* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 7673
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 4082754647
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:50:24.437 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch in context: com.google.javascript.rhino.Node$SideEffectFlags:valueOf()I
[MASTER] 09:50:25.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V
[MASTER] 09:50:26.218 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:51:17.675 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:00:22.269 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true
Number of times BBC is called in total: 0
* Search finished after 605s and 399 generations, 168201 statements, best individual has fitness: 3073.0
* Minimizing test suite
[MASTER] 10:01:48.526 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 853
* Number of covered goals: 769
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 588
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 458
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2072
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 233
* Number of covered goals: 210
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 714
* Number of covered goals: 544
* Generated 1042 tests with total length 10052
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:03:00.598 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7149666666666666% of time used, but only 89/1042 tests minimized), falling back to using all assertions
[MASTER] 10:03:17.715 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 10:03:32.174 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 10:03:38.767 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_127_1628157818707/com/google/javascript/rhino/Node_127_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_127_1628157818707/com/google/javascript/rhino/Node_127_tmp__ESTest_scaffolding.java]]
[MASTER] 10:03:38.767 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:38.767 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:38.774 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 199
[MASTER] 10:03:38.775 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_127_1628157818707/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:03:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.LinkedList;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_127_tmp__ESTest extends Node_127_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newNumber(2078.201356198);
27:       assertNotNull(node0);
28:       assertFalse(node0.isDefaultCase());
29:       assertFalse(node0.isRegExp());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.isVoid());
32:       assertFalse(node0.isTrue());
33:       assertFalse(node0.isTry());
34:       assertFalse(node0.isSetterDef());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.isIf());
37:       assertFalse(node0.isDelProp());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.isName());
40:       assertFalse(node0.isNE());
41:       assertFalse(node0.isFor());
42:       assertFalse(node0.isCall());
43:       assertFalse(node0.isCatch());
44:       assertFalse(node0.isWhile());
45:       assertFalse(node0.isIn());
46:       assertTrue(node0.isNumber());
47:       assertFalse(node0.isInc());
48:       assertFalse(node0.isString());
49:       assertEquals((-1), node0.getSourcePosition());
50:       assertFalse(node0.isThrow());
51:       assertFalse(node0.isContinue());
52:       assertFalse(node0.isFunction());
53:       assertFalse(node0.isFalse());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isWith());
56:       assertFalse(node0.isNot());
57:       assertFalse(node0.isAnd());
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isAssign());
66:       assertFalse(node0.isDec());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isHook());
71:       assertEquals((-1), node0.getLineno());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.hasMoreThanOneChild());
74:       assertFalse(node0.isExprResult());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isDo());
77:       assertEquals(39, node0.getType());
78:       assertFalse(node0.isCase());
79:       assertEquals((-1), node0.getCharno());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isSwitch());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isGetterDef());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isVar());
89:       assertFalse(node0.isStringKey());
90:       assertFalse(node0.isParamList());
91:       assertEquals(0, node0.getChildCount());
92:       assertFalse(node0.isLabel());
93:       assertFalse(node0.isArrayLit());
94:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
95:       assertEquals(43, Node.IS_CONSTANT_NAME);
96:       assertEquals(36, Node.QUOTED_PROP);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(55, Node.INFERRED_FUNCTION);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
102:       assertEquals(53, Node.INPUT_ID);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(40, Node.ORIGINALNAME_PROP);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(54, Node.SLASH_V);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(39, Node.EMPTY_BLOCK);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(48, Node.DIRECTIVES);
121:       assertEquals(8, Node.FLAG_NO_THROWS);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(56, Node.CHANGE_TIME);
124:       assertEquals(12, Node.COLUMN_BITS);
125:       assertEquals(49, Node.DIRECT_EVAL);
126:       assertEquals(4095, Node.COLUMN_MASK);
127:       assertEquals(37, Node.OPT_ARG_NAME);
128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       
131:       Iterable<Node> iterable0 = node0.children();
132:       assertNotNull(iterable0);
133:       assertFalse(node0.isDefaultCase());
134:       assertFalse(node0.isRegExp());
135:       assertFalse(node0.isDebugger());
136:       assertFalse(node0.isVoid());
137:       assertFalse(node0.isTrue());
138:       assertFalse(node0.isTry());
139:       assertFalse(node0.isSetterDef());
140:       assertFalse(node0.isEmpty());
141:       assertFalse(node0.isIf());
142:       assertFalse(node0.isDelProp());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.isName());
145:       assertFalse(node0.isNE());
146:       assertFalse(node0.isFor());
147:       assertFalse(node0.isCall());
148:       assertFalse(node0.isCatch());
149:       assertFalse(node0.isWhile());
150:       assertFalse(node0.isIn());
151:       assertTrue(node0.isNumber());
152:       assertFalse(node0.isInc());
153:       assertFalse(node0.isString());
154:       assertEquals((-1), node0.getSourcePosition());
155:       assertFalse(node0.isThrow());
156:       assertFalse(node0.isContinue());
157:       assertFalse(node0.isFunction());
158:       assertFalse(node0.isFalse());
159:       assertFalse(node0.isCast());
160:       assertFalse(node0.isWith());
161:       assertFalse(node0.isNot());
162:       assertFalse(node0.isAnd());
163:       assertFalse(node0.hasOneChild());
164:       assertFalse(node0.isObjectLit());
165:       assertFalse(node0.isGetProp());
166:       assertFalse(node0.isScript());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isDec());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isReturn());
175:       assertFalse(node0.isHook());
176:       assertEquals((-1), node0.getLineno());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.hasMoreThanOneChild());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isInstanceOf());
181:       assertFalse(node0.isDo());
182:       assertEquals(39, node0.getType());
183:       assertFalse(node0.isCase());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isBlock());
186:       assertFalse(node0.isSwitch());
187:       assertFalse(node0.isOr());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isAdd());
190:       assertFalse(node0.isGetterDef());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.isAssignAdd());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.isParamList());
196:       assertEquals(0, node0.getChildCount());
197:       assertFalse(node0.isLabel());
198:       assertFalse(node0.isArrayLit());
199:       assertFalse(iterable0.contains(node0));
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
205:       assertEquals(55, Node.INFERRED_FUNCTION);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(46, Node.IS_NAMESPACE);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(57, Node.LAST_PROP);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(8, Node.FLAG_NO_THROWS);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertEquals(56, Node.CHANGE_TIME);
230:       assertEquals(12, Node.COLUMN_BITS);
231:       assertEquals(49, Node.DIRECT_EVAL);
232:       assertEquals(4095, Node.COLUMN_MASK);
233:       assertEquals(37, Node.OPT_ARG_NAME);
234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
235:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
236:       
237:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
238:       assertNotNull(jSTypeRegistry0);
239:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
240:       
241:       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
242:       assertNotNull(linkedList0);
243:       assertEquals(0, linkedList0.size());
244:       
245:       Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
246:       assertFalse(node1.equals((Object)node0));
247:       assertNotNull(node1);
248:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
249:       assertEquals(0, linkedList0.size());
250:       assertFalse(node1.isVar());
251:       assertFalse(node1.isStringKey());
252:       assertFalse(node1.isCall());
253:       assertFalse(node1.isSetterDef());
254:       assertFalse(node1.isBlock());
255:       assertFalse(node1.isAdd());
256:       assertFalse(node1.isDo());
257:       assertFalse(node1.isWhile());
258:       assertFalse(node1.isNew());
259:       assertFalse(node1.hasMoreThanOneChild());
260:       assertFalse(node1.isCatch());
261:       assertFalse(node1.isReturn());
262:       assertFalse(node1.isOr());
263:       assertFalse(node1.isRegExp());
264:       assertFalse(node1.isNull());
265:       assertFalse(node1.isTrue());
266:       assertEquals((-1), node1.getLineno());
267:       assertFalse(node1.isName());
268:       assertFalse(node1.isVoid());
269:       assertFalse(node1.isCast());
270:       assertFalse(node1.isGetElem());
271:       assertFalse(node1.isAssign());
272:       assertFalse(node1.isDec());
273:       assertFalse(node1.isTypeOf());
274:       assertFalse(node1.isFunction());
275:       assertFalse(node1.hasChildren());
276:       assertFalse(node1.isContinue());
277:       assertFalse(node1.isAnd());
278:       assertFalse(node1.isNot());
279:       assertFalse(node1.isString());
280:       assertFalse(node1.isObjectLit());
281:       assertTrue(node1.isParamList());
282:       assertEquals((-1), node1.getSourcePosition());
283:       assertFalse(node1.isDebugger());
284:       assertFalse(node1.isThrow());
285:       assertFalse(node1.isHook());
286:       assertFalse(node1.isFalse());
287:       assertFalse(node1.isThis());
288:       assertEquals(83, node1.getType());
289:       assertFalse(node1.isComma());
290:       assertFalse(node1.isGetProp());
291:       assertFalse(node1.isInc());
292:       assertFalse(node1.isCase());
293:       assertFalse(node1.isInstanceOf());
294:       assertFalse(node1.isWith());
295:       assertFalse(node1.isIn());
296:       assertFalse(node1.isNE());
297:       assertFalse(node1.isBreak());
298:       assertFalse(node1.isExprResult());
299:       assertFalse(node1.isIf());
300:       assertFalse(node1.isDelProp());
301:       assertFalse(node1.isArrayLit());
302:       assertFalse(node1.isFor());
303:       assertFalse(node1.isEmpty());
304:       assertFalse(node1.isNumber());
305:       assertFalse(node1.isGetterDef());
306:       assertFalse(node1.isScript());
307:       assertFalse(node1.isAssignAdd());
308:       assertFalse(node1.isTry());
309:       assertFalse(node1.hasOneChild());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isLabel());
312:       assertEquals(0, node1.getChildCount());
313:       assertFalse(node1.isSwitch());
314:       assertEquals((-1), node1.getCharno());
315:       assertFalse(node1.isLabelName());
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(40, Node.ORIGINALNAME_PROP);
319:       assertEquals(50, Node.FREE_CALL);
320:       assertEquals(8, Node.FLAG_NO_THROWS);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
324:       assertEquals(43, Node.IS_CONSTANT_NAME);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(29, Node.JSDOC_INFO_PROP);
336:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
337:       assertEquals(12, Node.COLUMN_BITS);
338:       assertEquals(32, Node.INCRDECR_PROP);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(57, Node.LAST_PROP);
342:       assertEquals(36, Node.QUOTED_PROP);
343:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
344:       assertEquals(53, Node.INPUT_ID);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(52, Node.LENGTH);
347:       assertEquals(4095, Node.COLUMN_MASK);
348:       assertEquals(57, Node.REFLECTED_OBJECT);
349:       assertEquals(48, Node.DIRECTIVES);
350:       assertEquals(49, Node.DIRECT_EVAL);
351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
352:       
353:       // Undeclared exception!
354:       try { 
355:         node0.removeChild(node1);
356:         fail("Expecting exception: NullPointerException");
357:       
358:       } catch(NullPointerException e) {
359:          //
360:          // no message in exception (getMessage() returned null)
361:          //
362:          verifyException("com.google.javascript.rhino.Node", e);
363:       }
364:   }
365: }
RegularFileObject[/tmp/EvoSuite_127_1628157818707/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:03:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_127_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_127_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.ImmutableEnumSet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_127_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.jstype.EnumType",
330:       "com.google.javascript.rhino.jstype.EnumElementType",
331:       "com.google.common.collect.ImmutableSet",
332:       "com.google.common.collect.EmptyImmutableSet",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
346:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
355:       "com.google.common.collect.Platform",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 10:03:38.780 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2078.201356198);
assertNotNull(node0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(iterable0.contains(node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedList0.size());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertTrue(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertEquals(83, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabelName());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.removeChild(node1);

[MASTER] 10:03:38.806 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_128_1628157818781/com/google/javascript/rhino/Node_128_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_128_1628157818781/com/google/javascript/rhino/Node_128_tmp__ESTest_scaffolding.java]]
[MASTER] 10:03:38.806 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:38.806 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:38.806 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 193
[MASTER] 10:03:38.807 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_128_1628157818781/com/google/javascript/rhino/Node_128_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:03:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_128_tmp__ESTest extends Node_128_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertNotNull(node0);
22:       assertEquals(0, node0.getChildCount());
23:       assertFalse(node0.isRegExp());
24:       assertFalse(node0.isCatch());
25:       assertFalse(node0.isFunction());
26:       assertFalse(node0.isVoid());
27:       assertFalse(node0.isTrue());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isNull());
30:       assertFalse(node0.isParamList());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isArrayLit());
33:       assertFalse(node0.isAdd());
34:       assertFalse(node0.isSetterDef());
35:       assertFalse(node0.isNew());
36:       assertFalse(node0.isDefaultCase());
37:       assertFalse(node0.isVar());
38:       assertEquals(39, node0.getType());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isIn());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertEquals((-1), node0.getLineno());
43:       assertEquals((-1), node0.getCharno());
44:       assertFalse(node0.isIf());
45:       assertFalse(node0.isNE());
46:       assertFalse(node0.isSwitch());
47:       assertFalse(node0.isStringKey());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isGetterDef());
50:       assertFalse(node0.isBlock());
51:       assertFalse(node0.isTry());
52:       assertFalse(node0.isThis());
53:       assertFalse(node0.hasOneChild());
54:       assertFalse(node0.isHook());
55:       assertFalse(node0.isObjectLit());
56:       assertFalse(node0.isNot());
57:       assertFalse(node0.isInstanceOf());
58:       assertFalse(node0.isScript());
59:       assertFalse(node0.isWith());
60:       assertFalse(node0.isExprResult());
61:       assertFalse(node0.isAnd());
62:       assertFalse(node0.isThrow());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isLabelName());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isInc());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.isContinue());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isOr());
73:       assertEquals((-1), node0.getSourcePosition());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isGetElem());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isReturn());
85:       assertTrue(node0.isNumber());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isWhile());
88:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
89:       assertEquals(36, Node.QUOTED_PROP);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
92:       assertEquals(55, Node.INFERRED_FUNCTION);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(48, Node.DIRECTIVES);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(32, Node.INCRDECR_PROP);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(50, Node.FREE_CALL);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(54, Node.SLASH_V);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(29, Node.JSDOC_INFO_PROP);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertEquals(0, node0.getChildCount());
128:       assertFalse(node0.isRegExp());
129:       assertFalse(node0.isCatch());
130:       assertFalse(node0.isFunction());
131:       assertFalse(node0.isVoid());
132:       assertFalse(node0.isTrue());
133:       assertFalse(node0.isDebugger());
134:       assertFalse(node0.isNull());
135:       assertFalse(node0.isParamList());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isArrayLit());
138:       assertFalse(node0.isAdd());
139:       assertFalse(node0.isSetterDef());
140:       assertFalse(node0.isNew());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isVar());
143:       assertEquals(39, node0.getType());
144:       assertFalse(node0.isCase());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.hasMoreThanOneChild());
147:       assertEquals((-1), node0.getLineno());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isIf());
150:       assertFalse(node0.isNE());
151:       assertFalse(node0.isSwitch());
152:       assertFalse(node0.isStringKey());
153:       assertFalse(node0.isFor());
154:       assertFalse(node0.isGetterDef());
155:       assertFalse(node0.isBlock());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.isThis());
158:       assertFalse(node0.hasOneChild());
159:       assertFalse(node0.isHook());
160:       assertFalse(node0.isObjectLit());
161:       assertFalse(node0.isNot());
162:       assertFalse(node0.isInstanceOf());
163:       assertFalse(node0.isScript());
164:       assertFalse(node0.isWith());
165:       assertFalse(node0.isExprResult());
166:       assertFalse(node0.isAnd());
167:       assertFalse(node0.isThrow());
168:       assertFalse(node0.isFalse());
169:       assertFalse(node0.isLabelName());
170:       assertFalse(node0.isCast());
171:       assertFalse(node0.isInc());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isDo());
175:       assertFalse(node0.isContinue());
176:       assertFalse(node0.isString());
177:       assertFalse(node0.isOr());
178:       assertEquals((-1), node0.getSourcePosition());
179:       assertFalse(node0.isDelProp());
180:       assertFalse(node0.isGetElem());
181:       assertFalse(node0.isCall());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isBreak());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isGetProp());
189:       assertFalse(node0.isReturn());
190:       assertTrue(node0.isNumber());
191:       assertFalse(node0.isComma());
192:       assertFalse(node0.isWhile());
193:       assertFalse(iterable0.contains(node0));
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(53, Node.INPUT_ID);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(56, Node.CHANGE_TIME);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
206:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(40, Node.ORIGINALNAME_PROP);
215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
216:       assertEquals(49, Node.DIRECT_EVAL);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(57, Node.REFLECTED_OBJECT);
219:       assertEquals(46, Node.IS_NAMESPACE);
220:       assertEquals(54, Node.SLASH_V);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(57, Node.LAST_PROP);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_128_1628157818781/com/google/javascript/rhino/Node_128_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:03:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_128_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_128_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.ImmutableEnumSet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_128_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.jstype.EnumType",
330:       "com.google.javascript.rhino.jstype.EnumElementType",
331:       "com.google.common.collect.ImmutableSet",
332:       "com.google.common.collect.EmptyImmutableSet",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
346:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
355:       "com.google.common.collect.Platform",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 10:03:38.810 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertNotNull(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(iterable0.contains(node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);


[MASTER] 10:03:43.729 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_204_1628157823685/com/google/javascript/rhino/Node_204_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_204_1628157823685/com/google/javascript/rhino/Node_204_tmp__ESTest_scaffolding.java]]
[MASTER] 10:03:43.729 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:43.729 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:43.730 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 198
[MASTER] 10:03:43.731 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_204_1628157823685/com/google/javascript/rhino/Node_204_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:03:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.LinkedList;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_204_tmp__ESTest extends Node_204_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newNumber(2078.201356198);
26:       assertNotNull(node0);
27:       assertFalse(node0.hasOneChild());
28:       assertFalse(node0.isScript());
29:       assertFalse(node0.isExprResult());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isObjectLit());
33:       assertFalse(node0.isLabelName());
34:       assertFalse(node0.isNot());
35:       assertEquals((-1), node0.getSourcePosition());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isReturn());
38:       assertFalse(node0.isGetProp());
39:       assertEquals((-1), node0.getLineno());
40:       assertFalse(node0.isComma());
41:       assertFalse(node0.isTypeOf());
42:       assertFalse(node0.hasMoreThanOneChild());
43:       assertFalse(node0.isInstanceOf());
44:       assertFalse(node0.isWith());
45:       assertEquals(39, node0.getType());
46:       assertFalse(node0.isDec());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isThis());
50:       assertFalse(node0.isHook());
51:       assertFalse(node0.isWhile());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isNew());
54:       assertEquals((-1), node0.getCharno());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isName());
57:       assertFalse(node0.isBreak());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.isAssignAdd());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isTry());
71:       assertFalse(node0.isFunction());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isGetterDef());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.isTrue());
80:       assertFalse(node0.isNE());
81:       assertTrue(node0.isNumber());
82:       assertFalse(node0.isCatch());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isFor());
85:       assertFalse(node0.isBlock());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isString());
88:       assertFalse(node0.isSetterDef());
89:       assertFalse(node0.isIn());
90:       assertFalse(node0.isContinue());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.isThrow());
93:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
96:       assertEquals(29, Node.JSDOC_INFO_PROP);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(43, Node.IS_CONSTANT_NAME);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(36, Node.QUOTED_PROP);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(40, Node.ORIGINALNAME_PROP);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(52, Node.LENGTH);
121:       assertEquals(8, Node.FLAG_NO_THROWS);
122:       assertEquals(57, Node.REFLECTED_OBJECT);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(49, Node.DIRECT_EVAL);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
129:       
130:       Iterable<Node> iterable0 = node0.children();
131:       assertNotNull(iterable0);
132:       assertFalse(node0.hasOneChild());
133:       assertFalse(node0.isScript());
134:       assertFalse(node0.isExprResult());
135:       assertFalse(node0.isCast());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isObjectLit());
138:       assertFalse(node0.isLabelName());
139:       assertFalse(node0.isNot());
140:       assertEquals((-1), node0.getSourcePosition());
141:       assertFalse(node0.isAnd());
142:       assertFalse(node0.isReturn());
143:       assertFalse(node0.isGetProp());
144:       assertEquals((-1), node0.getLineno());
145:       assertFalse(node0.isComma());
146:       assertFalse(node0.isTypeOf());
147:       assertFalse(node0.hasMoreThanOneChild());
148:       assertFalse(node0.isInstanceOf());
149:       assertFalse(node0.isWith());
150:       assertEquals(39, node0.getType());
151:       assertFalse(node0.isDec());
152:       assertFalse(node0.isAssign());
153:       assertFalse(node0.hasChildren());
154:       assertFalse(node0.isThis());
155:       assertFalse(node0.isHook());
156:       assertFalse(node0.isWhile());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isNew());
159:       assertEquals((-1), node0.getCharno());
160:       assertFalse(node0.isCall());
161:       assertFalse(node0.isName());
162:       assertFalse(node0.isBreak());
163:       assertFalse(node0.isNull());
164:       assertFalse(node0.isSwitch());
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isStringKey());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isAssignAdd());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isEmpty());
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isDefaultCase());
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isFunction());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isVoid());
179:       assertFalse(node0.isRegExp());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isDelProp());
182:       assertFalse(node0.isGetterDef());
183:       assertFalse(node0.isIf());
184:       assertFalse(node0.isTrue());
185:       assertFalse(node0.isNE());
186:       assertTrue(node0.isNumber());
187:       assertFalse(node0.isCatch());
188:       assertFalse(node0.isCase());
189:       assertFalse(node0.isFor());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isString());
193:       assertFalse(node0.isSetterDef());
194:       assertFalse(node0.isIn());
195:       assertFalse(node0.isContinue());
196:       assertFalse(node0.isFalse());
197:       assertFalse(node0.isThrow());
198:       assertFalse(iterable0.contains(node0));
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(29, Node.JSDOC_INFO_PROP);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(37, Node.OPT_ARG_NAME);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(36, Node.QUOTED_PROP);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(2, Node.POST_FLAG);
216:       assertEquals(57, Node.LAST_PROP);
217:       assertEquals(30, Node.VAR_ARGS_NAME);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(40, Node.ORIGINALNAME_PROP);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(52, Node.LENGTH);
227:       assertEquals(8, Node.FLAG_NO_THROWS);
228:       assertEquals(57, Node.REFLECTED_OBJECT);
229:       assertEquals(1, Node.DECR_FLAG);
230:       assertEquals(49, Node.DIRECT_EVAL);
231:       assertEquals(4095, Node.COLUMN_MASK);
232:       assertEquals(32, Node.INCRDECR_PROP);
233:       assertEquals(12, Node.COLUMN_BITS);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       
236:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
237:       assertNotNull(jSTypeRegistry0);
238:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
239:       
240:       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
241:       assertNotNull(linkedList0);
242:       assertEquals(0, linkedList0.size());
243:       
244:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
245:       assertNotNull(node_SideEffectFlags0);
246:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
247:       assertEquals(0, node_SideEffectFlags0.valueOf());
248:       
249:       node_SideEffectFlags0.clearSideEffectFlags();
250:       assertEquals(15, node_SideEffectFlags0.valueOf());
251:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
252:       
253:       Node node1 = Node.newString((-498), "The new child node has siblings.", 52, 37);
254:       assertFalse(node1.equals((Object)node0));
255:       assertNotNull(node1);
256:       assertFalse(node1.isRegExp());
257:       assertFalse(node1.isFunction());
258:       assertFalse(node1.isCatch());
259:       assertFalse(node1.isTry());
260:       assertEquals(0, node1.getChildCount());
261:       assertFalse(node1.isDefaultCase());
262:       assertFalse(node1.isFor());
263:       assertFalse(node1.isEmpty());
264:       assertFalse(node1.isName());
265:       assertFalse(node1.isDelProp());
266:       assertFalse(node1.isSetterDef());
267:       assertFalse(node1.isCall());
268:       assertFalse(node1.isVoid());
269:       assertFalse(node1.isNE());
270:       assertFalse(node1.isNull());
271:       assertFalse(node1.isTrue());
272:       assertFalse(node1.isIf());
273:       assertFalse(node1.isDo());
274:       assertFalse(node1.isCase());
275:       assertFalse(node1.hasMoreThanOneChild());
276:       assertFalse(node1.isLabel());
277:       assertFalse(node1.isAssignAdd());
278:       assertFalse(node1.isAdd());
279:       assertFalse(node1.isBlock());
280:       assertEquals((-498), node1.getType());
281:       assertFalse(node1.isNew());
282:       assertFalse(node1.isVar());
283:       assertFalse(node1.isHook());
284:       assertFalse(node1.isLabelName());
285:       assertFalse(node1.isGetterDef());
286:       assertFalse(node1.isArrayLit());
287:       assertFalse(node1.isNumber());
288:       assertFalse(node1.isSwitch());
289:       assertFalse(node1.isStringKey());
290:       assertFalse(node1.isParamList());
291:       assertFalse(node1.isNot());
292:       assertEquals(37, node1.getCharno());
293:       assertFalse(node1.isWith());
294:       assertFalse(node1.isObjectLit());
295:       assertEquals(52, node1.getLineno());
296:       assertFalse(node1.isScript());
297:       assertFalse(node1.isExprResult());
298:       assertFalse(node1.isInstanceOf());
299:       assertFalse(node1.isGetProp());
300:       assertFalse(node1.hasOneChild());
301:       assertFalse(node1.isComma());
302:       assertFalse(node1.isThis());
303:       assertFalse(node1.isAssign());
304:       assertFalse(node1.isGetElem());
305:       assertFalse(node1.hasChildren());
306:       assertFalse(node1.isBreak());
307:       assertFalse(node1.isDec());
308:       assertFalse(node1.isTypeOf());
309:       assertFalse(node1.isOr());
310:       assertFalse(node1.isInc());
311:       assertFalse(node1.isContinue());
312:       assertFalse(node1.isIn());
313:       assertFalse(node1.isString());
314:       assertFalse(node1.isReturn());
315:       assertFalse(node1.isThrow());
316:       assertFalse(node1.isWhile());
317:       assertFalse(node1.isFalse());
318:       assertFalse(node1.isCast());
319:       assertEquals(213029, node1.getSourcePosition());
320:       assertFalse(node1.isDebugger());
321:       assertFalse(node1.isAnd());
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(2, Node.POST_FLAG);
327:       assertEquals(32, Node.INCRDECR_PROP);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
335:       assertEquals(54, Node.SLASH_V);
336:       assertEquals(52, Node.LENGTH);
337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
338:       assertEquals(40, Node.ORIGINALNAME_PROP);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(57, Node.LAST_PROP);
342:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       assertEquals(48, Node.DIRECTIVES);
345:       assertEquals(37, Node.OPT_ARG_NAME);
346:       assertEquals(8, Node.FLAG_NO_THROWS);
347:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
348:       assertEquals(4095, Node.COLUMN_MASK);
349:       assertEquals(55, Node.INFERRED_FUNCTION);
350:       assertEquals(29, Node.JSDOC_INFO_PROP);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(36, Node.QUOTED_PROP);
357:       assertEquals(57, Node.REFLECTED_OBJECT);
358:       
359:       // Undeclared exception!
360:       try { 
361:         node0.setSideEffectFlags(node_SideEffectFlags0);
362:         fail("Expecting exception: IllegalArgumentException");
363:       
364:       } catch(IllegalArgumentException e) {
365:          //
366:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
367:          //
368:          verifyException("com.google.common.base.Preconditions", e);
369:       }
370:   }
371: }
RegularFileObject[/tmp/EvoSuite_204_1628157823685/com/google/javascript/rhino/Node_204_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:03:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_204_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_204_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.ImmutableEnumSet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_204_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.jstype.EnumType",
330:       "com.google.javascript.rhino.jstype.EnumElementType",
331:       "com.google.common.collect.ImmutableSet",
332:       "com.google.common.collect.EmptyImmutableSet",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
346:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
355:       "com.google.common.collect.Platform",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 10:03:43.733 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2078.201356198);
assertNotNull(node0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(iterable0.contains(node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node node1 = Node.newString((-498), "The new child node has siblings.", 52, 37);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertEquals((-498), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertEquals(37, node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(213029, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

node0.setSideEffectFlags(node_SideEffectFlags0);

[MASTER] 10:03:53.745 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_287_1628157833638/com/google/javascript/rhino/Node_287_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_287_1628157833638/com/google/javascript/rhino/Node_287_tmp__ESTest_scaffolding.java]]
[MASTER] 10:03:53.745 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:53.747 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:53.748 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 198
[MASTER] 10:03:53.749 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_287_1628157833638/com/google/javascript/rhino/Node_287_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:03:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.LinkedList;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_287_tmp__ESTest extends Node_287_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newNumber(2078.201356198);
26:       assertNotNull(node0);
27:       assertFalse(node0.isNE());
28:       assertFalse(node0.isIn());
29:       assertFalse(node0.isGetterDef());
30:       assertFalse(node0.isCase());
31:       assertFalse(node0.isString());
32:       assertFalse(node0.isFor());
33:       assertFalse(node0.isEmpty());
34:       assertTrue(node0.isNumber());
35:       assertFalse(node0.isTry());
36:       assertFalse(node0.isDebugger());
37:       assertEquals((-1), node0.getCharno());
38:       assertFalse(node0.isFunction());
39:       assertFalse(node0.isFalse());
40:       assertFalse(node0.isSwitch());
41:       assertFalse(node0.isArrayLit());
42:       assertFalse(node0.isGetProp());
43:       assertFalse(node0.isNull());
44:       assertFalse(node0.isComma());
45:       assertEquals(0, node0.getChildCount());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isVar());
48:       assertFalse(node0.isDefaultCase());
49:       assertFalse(node0.isNew());
50:       assertFalse(node0.isExprResult());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isGetElem());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isBreak());
57:       assertFalse(node0.isDelProp());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isReturn());
62:       assertFalse(node0.isDec());
63:       assertFalse(node0.isTypeOf());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.hasChildren());
66:       assertFalse(node0.hasMoreThanOneChild());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isOr());
69:       assertEquals(39, node0.getType());
70:       assertFalse(node0.isWhile());
71:       assertFalse(node0.hasOneChild());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isScript());
74:       assertFalse(node0.isNot());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isContinue());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isCast());
79:       assertFalse(node0.isLabelName());
80:       assertFalse(node0.isSetterDef());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isInstanceOf());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isBlock());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isHook());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isRegExp());
90:       assertFalse(node0.isCatch());
91:       assertFalse(node0.isIf());
92:       assertEquals((-1), node0.getLineno());
93:       assertEquals(1, Node.DECR_FLAG);
94:       assertEquals(51, Node.STATIC_SOURCE_FILE);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(30, Node.VAR_ARGS_NAME);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(57, Node.LAST_PROP);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(29, Node.JSDOC_INFO_PROP);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(52, Node.LENGTH);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(37, Node.OPT_ARG_NAME);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertEquals(50, Node.FREE_CALL);
125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
126:       assertEquals(54, Node.SLASH_V);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       
130:       Iterable<Node> iterable0 = node0.children();
131:       assertNotNull(iterable0);
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isIn());
134:       assertFalse(node0.isGetterDef());
135:       assertFalse(node0.isCase());
136:       assertFalse(node0.isString());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isEmpty());
139:       assertTrue(node0.isNumber());
140:       assertFalse(node0.isTry());
141:       assertFalse(node0.isDebugger());
142:       assertEquals((-1), node0.getCharno());
143:       assertFalse(node0.isFunction());
144:       assertFalse(node0.isFalse());
145:       assertFalse(node0.isSwitch());
146:       assertFalse(node0.isArrayLit());
147:       assertFalse(node0.isGetProp());
148:       assertFalse(node0.isNull());
149:       assertFalse(node0.isComma());
150:       assertEquals(0, node0.getChildCount());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isVar());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.isNew());
155:       assertFalse(node0.isExprResult());
156:       assertFalse(node0.isTrue());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isGetElem());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isCall());
161:       assertFalse(node0.isBreak());
162:       assertFalse(node0.isDelProp());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isLabel());
165:       assertFalse(node0.isAssignAdd());
166:       assertFalse(node0.isReturn());
167:       assertFalse(node0.isDec());
168:       assertFalse(node0.isTypeOf());
169:       assertEquals((-1), node0.getSourcePosition());
170:       assertFalse(node0.hasChildren());
171:       assertFalse(node0.hasMoreThanOneChild());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.isOr());
174:       assertEquals(39, node0.getType());
175:       assertFalse(node0.isWhile());
176:       assertFalse(node0.hasOneChild());
177:       assertFalse(node0.isDo());
178:       assertFalse(node0.isScript());
179:       assertFalse(node0.isNot());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isContinue());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isLabelName());
185:       assertFalse(node0.isSetterDef());
186:       assertFalse(node0.isThis());
187:       assertFalse(node0.isParamList());
188:       assertFalse(node0.isInstanceOf());
189:       assertFalse(node0.isThrow());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isHook());
193:       assertFalse(node0.isWith());
194:       assertFalse(node0.isRegExp());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isIf());
197:       assertEquals((-1), node0.getLineno());
198:       assertFalse(iterable0.contains(node0));
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(30, Node.VAR_ARGS_NAME);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(32, Node.INCRDECR_PROP);
209:       assertEquals(57, Node.LAST_PROP);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(29, Node.JSDOC_INFO_PROP);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(37, Node.OPT_ARG_NAME);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(36, Node.QUOTED_PROP);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(55, Node.INFERRED_FUNCTION);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(53, Node.INPUT_ID);
228:       assertEquals(39, Node.EMPTY_BLOCK);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(50, Node.FREE_CALL);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       assertEquals(54, Node.SLASH_V);
233:       assertEquals(46, Node.IS_NAMESPACE);
234:       assertEquals(43, Node.IS_CONSTANT_NAME);
235:       
236:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
237:       assertNotNull(jSTypeRegistry0);
238:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
239:       
240:       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
241:       assertNotNull(linkedList0);
242:       assertEquals(0, linkedList0.size());
243:       
244:       Node node1 = Node.newString("T42NGn]b. H", 43, 29);
245:       assertFalse(node1.equals((Object)node0));
246:       assertNotNull(node1);
247:       assertFalse(node1.isIf());
248:       assertFalse(node1.isDelProp());
249:       assertFalse(node1.isGetterDef());
250:       assertFalse(node1.isNE());
251:       assertFalse(node1.isFor());
252:       assertFalse(node1.isEmpty());
253:       assertFalse(node1.isArrayLit());
254:       assertFalse(node1.isVoid());
255:       assertEquals(176157, node1.getSourcePosition());
256:       assertFalse(node1.isDefaultCase());
257:       assertFalse(node1.isInc());
258:       assertEquals(40, node1.getType());
259:       assertFalse(node1.isTrue());
260:       assertFalse(node1.isFunction());
261:       assertEquals(0, node1.getChildCount());
262:       assertFalse(node1.isIn());
263:       assertFalse(node1.isThrow());
264:       assertEquals(43, node1.getLineno());
265:       assertFalse(node1.isBreak());
266:       assertFalse(node1.isNull());
267:       assertFalse(node1.isComma());
268:       assertFalse(node1.isFalse());
269:       assertFalse(node1.isCall());
270:       assertFalse(node1.isAnd());
271:       assertFalse(node1.isName());
272:       assertFalse(node1.isWhile());
273:       assertFalse(node1.isExprResult());
274:       assertFalse(node1.isDebugger());
275:       assertFalse(node1.isNot());
276:       assertFalse(node1.isObjectLit());
277:       assertFalse(node1.isReturn());
278:       assertFalse(node1.isGetProp());
279:       assertFalse(node1.hasChildren());
280:       assertFalse(node1.isDec());
281:       assertFalse(node1.isGetElem());
282:       assertFalse(node1.isAssign());
283:       assertFalse(node1.isOr());
284:       assertFalse(node1.isTypeOf());
285:       assertFalse(node1.isNumber());
286:       assertFalse(node1.isCast());
287:       assertFalse(node1.isLabelName());
288:       assertFalse(node1.isContinue());
289:       assertEquals(29, node1.getCharno());
290:       assertFalse(node1.isLabel());
291:       assertFalse(node1.isAdd());
292:       assertFalse(node1.isVar());
293:       assertFalse(node1.isNew());
294:       assertFalse(node1.isAssignAdd());
295:       assertFalse(node1.isDo());
296:       assertFalse(node1.isSetterDef());
297:       assertFalse(node1.isThis());
298:       assertFalse(node1.isInstanceOf());
299:       assertFalse(node1.isCatch());
300:       assertFalse(node1.isStringKey());
301:       assertFalse(node1.isParamList());
302:       assertFalse(node1.isSwitch());
303:       assertFalse(node1.isScript());
304:       assertFalse(node1.hasMoreThanOneChild());
305:       assertFalse(node1.isWith());
306:       assertFalse(node1.isRegExp());
307:       assertFalse(node1.hasOneChild());
308:       assertFalse(node1.isBlock());
309:       assertFalse(node1.isHook());
310:       assertFalse(node1.isCase());
311:       assertFalse(node1.isTry());
312:       assertTrue(node1.isString());
313:       assertEquals(32, Node.INCRDECR_PROP);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(37, Node.OPT_ARG_NAME);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(54, Node.SLASH_V);
322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
323:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(1, Node.DECR_FLAG);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(4095, Node.COLUMN_MASK);
334:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
335:       assertEquals(50, Node.FREE_CALL);
336:       assertEquals(36, Node.QUOTED_PROP);
337:       assertEquals(57, Node.REFLECTED_OBJECT);
338:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
339:       assertEquals(43, Node.IS_CONSTANT_NAME);
340:       assertEquals(52, Node.LENGTH);
341:       assertEquals(53, Node.INPUT_ID);
342:       assertEquals(40, Node.ORIGINALNAME_PROP);
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(30, Node.VAR_ARGS_NAME);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(47, Node.IS_DISPATCHER);
347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
348:       assertEquals(57, Node.LAST_PROP);
349:       
350:       Node node2 = Node.newString("Object#Key", 4, 50);
351:       assertFalse(node2.equals((Object)node0));
352:       assertFalse(node2.equals((Object)node1));
353:       assertNotNull(node2);
354:       assertFalse(node2.isCatch());
355:       assertEquals(16434, node2.getSourcePosition());
356:       assertFalse(node2.isParamList());
357:       assertFalse(node2.isSetterDef());
358:       assertFalse(node2.isDefaultCase());
359:       assertEquals(40, node2.getType());
360:       assertFalse(node2.isFunction());
361:       assertEquals(4, node2.getLineno());
362:       assertFalse(node2.isRegExp());
363:       assertEquals(0, node2.getChildCount());
364:       assertFalse(node2.isAdd());
365:       assertFalse(node2.isVar());
366:       assertFalse(node2.isCall());
367:       assertFalse(node2.isNew());
368:       assertFalse(node2.isName());
369:       assertFalse(node2.isVoid());
370:       assertFalse(node2.isDelProp());
371:       assertFalse(node2.isIf());
372:       assertFalse(node2.isNull());
373:       assertFalse(node2.isNE());
374:       assertFalse(node2.isEmpty());
375:       assertFalse(node2.isTrue());
376:       assertFalse(node2.isAssignAdd());
377:       assertFalse(node2.isCase());
378:       assertFalse(node2.isDo());
379:       assertFalse(node2.isFor());
380:       assertFalse(node2.hasMoreThanOneChild());
381:       assertFalse(node2.isLabel());
382:       assertFalse(node2.isHook());
383:       assertFalse(node2.isBlock());
384:       assertFalse(node2.isSwitch());
385:       assertFalse(node2.isArrayLit());
386:       assertTrue(node2.isString());
387:       assertFalse(node2.hasOneChild());
388:       assertFalse(node2.isLabelName());
389:       assertFalse(node2.isTry());
390:       assertFalse(node2.isGetterDef());
391:       assertFalse(node2.isNumber());
392:       assertFalse(node2.isScript());
393:       assertFalse(node2.isStringKey());
394:       assertFalse(node2.isInstanceOf());
395:       assertFalse(node2.isAnd());
396:       assertFalse(node2.isGetProp());
397:       assertFalse(node2.isWith());
398:       assertFalse(node2.isBreak());
399:       assertFalse(node2.isThrow());
400:       assertFalse(node2.isThis());
401:       assertFalse(node2.isFalse());
402:       assertFalse(node2.isComma());
403:       assertFalse(node2.isInc());
404:       assertFalse(node2.isExprResult());
405:       assertFalse(node2.isOr());
406:       assertFalse(node2.isReturn());
407:       assertFalse(node2.isIn());
408:       assertFalse(node2.isWhile());
409:       assertFalse(node2.hasChildren());
410:       assertFalse(node2.isGetElem());
411:       assertEquals(50, node2.getCharno());
412:       assertFalse(node2.isContinue());
413:       assertFalse(node2.isTypeOf());
414:       assertFalse(node2.isDec());
415:       assertFalse(node2.isAssign());
416:       assertFalse(node2.isCast());
417:       assertFalse(node2.isObjectLit());
418:       assertFalse(node2.isDebugger());
419:       assertFalse(node2.isNot());
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(50, Node.FREE_CALL);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(40, Node.ORIGINALNAME_PROP);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(46, Node.IS_NAMESPACE);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(30, Node.VAR_ARGS_NAME);
435:       assertEquals(1, Node.DECR_FLAG);
436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       assertEquals(57, Node.LAST_PROP);
440:       assertEquals(37, Node.OPT_ARG_NAME);
441:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
442:       assertEquals(2, Node.POST_FLAG);
443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
444:       assertEquals(29, Node.JSDOC_INFO_PROP);
445:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
446:       assertEquals(47, Node.IS_DISPATCHER);
447:       assertEquals(56, Node.CHANGE_TIME);
448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(57, Node.REFLECTED_OBJECT);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(52, Node.LENGTH);
455:       assertEquals(8, Node.FLAG_NO_THROWS);
456:       assertNotSame(node2, node1);
457:       
458:       boolean boolean0 = node0.isFromExterns();
459:       assertFalse(node0.equals((Object)node1));
460:       assertFalse(node0.equals((Object)node2));
461:       assertFalse(boolean0);
462:       assertFalse(node0.isNE());
463:       assertFalse(node0.isIn());
464:       assertFalse(node0.isGetterDef());
465:       assertFalse(node0.isCase());
466:       assertFalse(node0.isString());
467:       assertFalse(node0.isFor());
468:       assertFalse(node0.isEmpty());
469:       assertTrue(node0.isNumber());
470:       assertFalse(node0.isTry());
471:       assertFalse(node0.isDebugger());
472:       assertEquals((-1), node0.getCharno());
473:       assertFalse(node0.isFunction());
474:       assertFalse(node0.isFalse());
475:       assertFalse(node0.isSwitch());
476:       assertFalse(node0.isArrayLit());
477:       assertFalse(node0.isGetProp());
478:       assertFalse(node0.isNull());
479:       assertFalse(node0.isComma());
480:       assertEquals(0, node0.getChildCount());
481:       assertFalse(node0.isObjectLit());
482:       assertFalse(node0.isVar());
483:       assertFalse(node0.isDefaultCase());
484:       assertFalse(node0.isNew());
485:       assertFalse(node0.isExprResult());
486:       assertFalse(node0.isTrue());
487:       assertFalse(node0.isAdd());
488:       assertFalse(node0.isGetElem());
489:       assertFalse(node0.isName());
490:       assertFalse(node0.isCall());
491:       assertFalse(node0.isBreak());
492:       assertFalse(node0.isDelProp());
493:       assertFalse(node0.isVoid());
494:       assertFalse(node0.isLabel());
495:       assertFalse(node0.isAssignAdd());
496:       assertFalse(node0.isReturn());
497:       assertFalse(node0.isDec());
498:       assertFalse(node0.isTypeOf());
499:       assertEquals((-1), node0.getSourcePosition());
500:       assertFalse(node0.hasChildren());
501:       assertFalse(node0.hasMoreThanOneChild());
502:       assertFalse(node0.isAssign());
503:       assertFalse(node0.isOr());
504:       assertEquals(39, node0.getType());
505:       assertFalse(node0.isWhile());
506:       assertFalse(node0.hasOneChild());
507:       assertFalse(node0.isDo());
508:       assertFalse(node0.isScript());
509:       assertFalse(node0.isNot());
510:       assertFalse(node0.isStringKey());
511:       assertFalse(node0.isContinue());
512:       assertFalse(node0.isAnd());
513:       assertFalse(node0.isCast());
514:       assertFalse(node0.isLabelName());
515:       assertFalse(node0.isSetterDef());
516:       assertFalse(node0.isThis());
517:       assertFalse(node0.isParamList());
518:       assertFalse(node0.isInstanceOf());
519:       assertFalse(node0.isThrow());
520:       assertFalse(node0.isBlock());
521:       assertFalse(node0.isInc());
522:       assertFalse(node0.isHook());
523:       assertFalse(node0.isWith());
524:       assertFalse(node0.isRegExp());
525:       assertFalse(node0.isCatch());
526:       assertFalse(node0.isIf());
527:       assertEquals((-1), node0.getLineno());
528:       assertEquals(1, Node.DECR_FLAG);
529:       assertEquals(51, Node.STATIC_SOURCE_FILE);
530:       assertEquals(12, Node.COLUMN_BITS);
531:       assertEquals(30, Node.VAR_ARGS_NAME);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
534:       assertEquals(15, Node.NO_SIDE_EFFECTS);
535:       assertEquals(47, Node.IS_DISPATCHER);
536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(29, Node.JSDOC_INFO_PROP);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(52, Node.LENGTH);
545:       assertEquals(8, Node.FLAG_NO_THROWS);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(37, Node.OPT_ARG_NAME);
548:       assertEquals(48, Node.DIRECTIVES);
549:       assertEquals(36, Node.QUOTED_PROP);
550:       assertEquals(49, Node.DIRECT_EVAL);
551:       assertEquals(56, Node.CHANGE_TIME);
552:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
553:       assertEquals(55, Node.INFERRED_FUNCTION);
554:       assertEquals(4095, Node.COLUMN_MASK);
555:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(40, Node.ORIGINALNAME_PROP);
559:       assertEquals(50, Node.FREE_CALL);
560:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(46, Node.IS_NAMESPACE);
563:       assertEquals(43, Node.IS_CONSTANT_NAME);
564:       
565:       Node node3 = node2.copyInformationFromForTree(node1);
566:       assertFalse(node1.equals((Object)node2));
567:       assertFalse(node1.equals((Object)node0));
568:       assertFalse(node2.equals((Object)node0));
569:       assertFalse(node2.equals((Object)node1));
570:       assertFalse(node3.equals((Object)node0));
571:       assertFalse(node3.equals((Object)node1));
572:       assertNotNull(node3);
573:       assertFalse(node1.isIf());
574:       assertFalse(node1.isDelProp());
575:       assertFalse(node1.isGetterDef());
576:       assertFalse(node1.isNE());
577:       assertFalse(node1.isFor());
578:       assertFalse(node1.isEmpty());
579:       assertFalse(node1.isArrayLit());
580:       assertFalse(node1.isVoid());
581:       assertEquals(176157, node1.getSourcePosition());
582:       assertFalse(node1.isDefaultCase());
583:       assertFalse(node1.isInc());
584:       assertEquals(40, node1.getType());
585:       assertFalse(node1.isTrue());
586:       assertFalse(node1.isFunction());
587:       assertEquals(0, node1.getChildCount());
588:       assertFalse(node1.isIn());
589:       assertFalse(node1.isThrow());
590:       assertEquals(43, node1.getLineno());
591:       assertFalse(node1.isBreak());
592:       assertFalse(node1.isNull());
593:       assertFalse(node1.isComma());
594:       assertFalse(node1.isFalse());
595:       assertFalse(node1.isCall());
596:       assertFalse(node1.isAnd());
597:       assertFalse(node1.isName());
598:       assertFalse(node1.isWhile());
599:       assertFalse(node1.isExprResult());
600:       assertFalse(node1.isDebugger());
601:       assertFalse(node1.isNot());
602:       assertFalse(node1.isObjectLit());
603:       assertFalse(node1.isReturn());
604:       assertFalse(node1.isGetProp());
605:       assertFalse(node1.hasChildren());
606:       assertFalse(node1.isDec());
607:       assertFalse(node1.isGetElem());
608:       assertFalse(node1.isAssign());
609:       assertFalse(node1.isOr());
610:       assertFalse(node1.isTypeOf());
611:       assertFalse(node1.isNumber());
612:       assertFalse(node1.isCast());
613:       assertFalse(node1.isLabelName());
614:       assertFalse(node1.isContinue());
615:       assertEquals(29, node1.getCharno());
616:       assertFalse(node1.isLabel());
617:       assertFalse(node1.isAdd());
618:       assertFalse(node1.isVar());
619:       assertFalse(node1.isNew());
620:       assertFalse(node1.isAssignAdd());
621:       assertFalse(node1.isDo());
622:       assertFalse(node1.isSetterDef());
623:       assertFalse(node1.isThis());
624:       assertFalse(node1.isInstanceOf());
625:       assertFalse(node1.isCatch());
626:       assertFalse(node1.isStringKey());
627:       assertFalse(node1.isParamList());
628:       assertFalse(node1.isSwitch());
629:       assertFalse(node1.isScript());
630:       assertFalse(node1.hasMoreThanOneChild());
631:       assertFalse(node1.isWith());
632:       assertFalse(node1.isRegExp());
633:       assertFalse(node1.hasOneChild());
634:       assertFalse(node1.isBlock());
635:       assertFalse(node1.isHook());
636:       assertFalse(node1.isCase());
637:       assertFalse(node1.isTry());
638:       assertTrue(node1.isString());
639:       assertFalse(node2.isCatch());
640:       assertFalse(node2.isParamList());
641:       assertFalse(node2.isSetterDef());
642:       assertFalse(node2.isDefaultCase());
643:       assertEquals(40, node2.getType());
644:       assertFalse(node2.isFunction());
645:       assertFalse(node2.isRegExp());
646:       assertEquals(0, node2.getChildCount());
647:       assertFalse(node2.isAdd());
648:       assertFalse(node2.isVar());
649:       assertFalse(node2.isCall());
650:       assertFalse(node2.isNew());
651:       assertFalse(node2.isName());
652:       assertFalse(node2.isVoid());
653:       assertFalse(node2.isDelProp());
654:       assertFalse(node2.isIf());
655:       assertFalse(node2.isNull());
656:       assertFalse(node2.isNE());
657:       assertFalse(node2.isEmpty());
658:       assertFalse(node2.isTrue());
659:       assertFalse(node2.isAssignAdd());
660:       assertFalse(node2.isCase());
661:       assertFalse(node2.isDo());
662:       assertFalse(node2.isFor());
663:       assertFalse(node2.hasMoreThanOneChild());
664:       assertFalse(node2.isLabel());
665:       assertFalse(node2.isHook());
666:       assertFalse(node2.isBlock());
667:       assertFalse(node2.isSwitch());
668:       assertFalse(node2.isArrayLit());
669:       assertTrue(node2.isString());
670:       assertFalse(node2.hasOneChild());
671:       assertFalse(node2.isLabelName());
672:       assertFalse(node2.isTry());
673:       assertFalse(node2.isGetterDef());
674:       assertFalse(node2.isNumber());
675:       assertFalse(node2.isScript());
676:       assertFalse(node2.isStringKey());
677:       assertFalse(node2.isInstanceOf());
678:       assertFalse(node2.isAnd());
679:       assertFalse(node2.isGetProp());
680:       assertFalse(node2.isWith());
681:       assertFalse(node2.isBreak());
682:       assertFalse(node2.isThrow());
683:       assertFalse(node2.isThis());
684:       assertFalse(node2.isFalse());
685:       assertFalse(node2.isComma());
686:       assertEquals(43, node2.getLineno());
687:       assertFalse(node2.isInc());
688:       assertFalse(node2.isExprResult());
689:       assertEquals(29, node2.getCharno());
690:       assertFalse(node2.isOr());
691:       assertFalse(node2.isReturn());
692:       assertFalse(node2.isIn());
693:       assertFalse(node2.isWhile());
694:       assertEquals(176157, node2.getSourcePosition());
695:       assertFalse(node2.hasChildren());
696:       assertFalse(node2.isGetElem());
697:       assertFalse(node2.isContinue());
698:       assertFalse(node2.isTypeOf());
699:       assertFalse(node2.isDec());
700:       assertFalse(node2.isAssign());
701:       assertFalse(node2.isCast());
702:       assertFalse(node2.isObjectLit());
703:       assertFalse(node2.isDebugger());
704:       assertFalse(node2.isNot());
705:       assertEquals(43, node3.getLineno());
706:       assertFalse(node3.isHook());
707:       assertFalse(node3.isThrow());
708:       assertFalse(node3.isBreak());
709:       assertFalse(node3.isThis());
710:       assertFalse(node3.isComma());
711:       assertEquals(176157, node3.getSourcePosition());
712:       assertFalse(node3.isFalse());
713:       assertFalse(node3.isInstanceOf());
714:       assertFalse(node3.isInc());
715:       assertFalse(node3.isNE());
716:       assertFalse(node3.isIn());
717:       assertEquals(29, node3.getCharno());
718:       assertFalse(node3.isGetElem());
719:       assertFalse(node3.isCast());
720:       assertFalse(node3.isDelProp());
721:       assertFalse(node3.isVoid());
722:       assertFalse(node3.isFunction());
723:       assertFalse(node3.isExprResult());
724:       assertFalse(node3.isReturn());
725:       assertFalse(node3.hasChildren());
726:       assertFalse(node3.isDec());
727:       assertFalse(node3.isTypeOf());
728:       assertFalse(node3.isAssign());
729:       assertFalse(node3.isContinue());
730:       assertFalse(node3.isAnd());
731:       assertFalse(node3.isWhile());
732:       assertFalse(node3.isDebugger());
733:       assertFalse(node3.isGetProp());
734:       assertFalse(node3.isObjectLit());
735:       assertFalse(node3.isNot());
736:       assertFalse(node3.isCall());
737:       assertFalse(node3.isStringKey());
738:       assertFalse(node3.isVar());
739:       assertTrue(node3.isString());
740:       assertFalse(node3.isNew());
741:       assertFalse(node3.isName());
742:       assertFalse(node3.isBlock());
743:       assertEquals(0, node3.getChildCount());
744:       assertFalse(node3.isCatch());
745:       assertFalse(node3.hasMoreThanOneChild());
746:       assertEquals(40, node3.getType());
747:       assertFalse(node3.isAssignAdd());
748:       assertFalse(node3.isDefaultCase());
749:       assertFalse(node3.isDo());
750:       assertFalse(node3.isSetterDef());
751:       assertFalse(node3.isTrue());
752:       assertFalse(node3.isNull());
753:       assertFalse(node3.isAdd());
754:       assertFalse(node3.isOr());
755:       assertFalse(node3.isArrayLit());
756:       assertFalse(node3.isFor());
757:       assertFalse(node3.isEmpty());
758:       assertFalse(node3.isIf());
759:       assertFalse(node3.hasOneChild());
760:       assertFalse(node3.isLabelName());
761:       assertFalse(node3.isTry());
762:       assertFalse(node3.isWith());
763:       assertFalse(node3.isLabel());
764:       assertFalse(node3.isRegExp());
765:       assertFalse(node3.isCase());
766:       assertFalse(node3.isParamList());
767:       assertFalse(node3.isSwitch());
768:       assertFalse(node3.isScript());
769:       assertFalse(node3.isNumber());
770:       assertFalse(node3.isGetterDef());
771:       assertEquals(32, Node.INCRDECR_PROP);
772:       assertEquals(46, Node.IS_NAMESPACE);
773:       assertEquals(37, Node.OPT_ARG_NAME);
774:       assertEquals(51, Node.STATIC_SOURCE_FILE);
775:       assertEquals(2, Node.POST_FLAG);
776:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
777:       assertEquals(49, Node.DIRECT_EVAL);
778:       assertEquals(56, Node.CHANGE_TIME);
779:       assertEquals(54, Node.SLASH_V);
780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
781:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
782:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertEquals(12, Node.COLUMN_BITS);
785:       assertEquals(48, Node.DIRECTIVES);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(8, Node.FLAG_NO_THROWS);
788:       assertEquals(39, Node.EMPTY_BLOCK);
789:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(4095, Node.COLUMN_MASK);
792:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
793:       assertEquals(50, Node.FREE_CALL);
794:       assertEquals(36, Node.QUOTED_PROP);
795:       assertEquals(57, Node.REFLECTED_OBJECT);
796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
797:       assertEquals(43, Node.IS_CONSTANT_NAME);
798:       assertEquals(52, Node.LENGTH);
799:       assertEquals(53, Node.INPUT_ID);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(29, Node.JSDOC_INFO_PROP);
802:       assertEquals(30, Node.VAR_ARGS_NAME);
803:       assertEquals(15, Node.NO_SIDE_EFFECTS);
804:       assertEquals(47, Node.IS_DISPATCHER);
805:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
806:       assertEquals(57, Node.LAST_PROP);
807:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
808:       assertEquals(43, Node.IS_CONSTANT_NAME);
809:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
810:       assertEquals(48, Node.DIRECTIVES);
811:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
812:       assertEquals(4095, Node.COLUMN_MASK);
813:       assertEquals(50, Node.FREE_CALL);
814:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
815:       assertEquals(40, Node.ORIGINALNAME_PROP);
816:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
817:       assertEquals(46, Node.IS_NAMESPACE);
818:       assertEquals(54, Node.SLASH_V);
819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
820:       assertEquals(49, Node.DIRECT_EVAL);
821:       assertEquals(30, Node.VAR_ARGS_NAME);
822:       assertEquals(1, Node.DECR_FLAG);
823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
824:       assertEquals(12, Node.COLUMN_BITS);
825:       assertEquals(32, Node.INCRDECR_PROP);
826:       assertEquals(57, Node.LAST_PROP);
827:       assertEquals(37, Node.OPT_ARG_NAME);
828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
829:       assertEquals(2, Node.POST_FLAG);
830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
831:       assertEquals(29, Node.JSDOC_INFO_PROP);
832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
833:       assertEquals(47, Node.IS_DISPATCHER);
834:       assertEquals(56, Node.CHANGE_TIME);
835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
836:       assertEquals(53, Node.INPUT_ID);
837:       assertEquals(39, Node.EMPTY_BLOCK);
838:       assertEquals(57, Node.REFLECTED_OBJECT);
839:       assertEquals(36, Node.QUOTED_PROP);
840:       assertEquals(55, Node.INFERRED_FUNCTION);
841:       assertEquals(52, Node.LENGTH);
842:       assertEquals(8, Node.FLAG_NO_THROWS);
843:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(39, Node.EMPTY_BLOCK);
846:       assertEquals(48, Node.DIRECTIVES);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(40, Node.ORIGINALNAME_PROP);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
851:       assertEquals(1, Node.DECR_FLAG);
852:       assertEquals(54, Node.SLASH_V);
853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
854:       assertEquals(46, Node.IS_NAMESPACE);
855:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
856:       assertEquals(50, Node.FREE_CALL);
857:       assertEquals(56, Node.CHANGE_TIME);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(37, Node.OPT_ARG_NAME);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       assertEquals(47, Node.IS_DISPATCHER);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(12, Node.COLUMN_BITS);
865:       assertEquals(30, Node.VAR_ARGS_NAME);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(15, Node.NO_SIDE_EFFECTS);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
870:       assertEquals(57, Node.LAST_PROP);
871:       assertEquals(57, Node.REFLECTED_OBJECT);
872:       assertEquals(55, Node.INFERRED_FUNCTION);
873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
874:       assertEquals(53, Node.INPUT_ID);
875:       assertEquals(29, Node.JSDOC_INFO_PROP);
876:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
877:       assertEquals(52, Node.LENGTH);
878:       assertEquals(8, Node.FLAG_NO_THROWS);
879:       assertNotSame(node1, node3);
880:       assertNotSame(node1, node2);
881:       assertSame(node2, node3);
882:       assertNotSame(node2, node1);
883:       assertSame(node3, node2);
884:       assertNotSame(node3, node1);
885:       
886:       Node node4 = node2.getAncestor(2481);
887:       assertFalse(node2.equals((Object)node0));
888:       assertFalse(node2.equals((Object)node1));
889:       assertNull(node4);
890:       assertFalse(node2.isCatch());
891:       assertFalse(node2.isParamList());
892:       assertFalse(node2.isSetterDef());
893:       assertFalse(node2.isDefaultCase());
894:       assertEquals(40, node2.getType());
895:       assertFalse(node2.isFunction());
896:       assertFalse(node2.isRegExp());
897:       assertEquals(0, node2.getChildCount());
898:       assertFalse(node2.isAdd());
899:       assertFalse(node2.isVar());
900:       assertFalse(node2.isCall());
901:       assertFalse(node2.isNew());
902:       assertFalse(node2.isName());
903:       assertFalse(node2.isVoid());
904:       assertFalse(node2.isDelProp());
905:       assertFalse(node2.isIf());
906:       assertFalse(node2.isNull());
907:       assertFalse(node2.isNE());
908:       assertFalse(node2.isEmpty());
909:       assertFalse(node2.isTrue());
910:       assertFalse(node2.isAssignAdd());
911:       assertFalse(node2.isCase());
912:       assertFalse(node2.isDo());
913:       assertFalse(node2.isFor());
914:       assertFalse(node2.hasMoreThanOneChild());
915:       assertFalse(node2.isLabel());
916:       assertFalse(node2.isHook());
917:       assertFalse(node2.isBlock());
918:       assertFalse(node2.isSwitch());
919:       assertFalse(node2.isArrayLit());
920:       assertTrue(node2.isString());
921:       assertFalse(node2.hasOneChild());
922:       assertFalse(node2.isLabelName());
923:       assertFalse(node2.isTry());
924:       assertFalse(node2.isGetterDef());
925:       assertFalse(node2.isNumber());
926:       assertFalse(node2.isScript());
927:       assertFalse(node2.isStringKey());
928:       assertFalse(node2.isInstanceOf());
929:       assertFalse(node2.isAnd());
930:       assertFalse(node2.isGetProp());
931:       assertFalse(node2.isWith());
932:       assertFalse(node2.isBreak());
933:       assertFalse(node2.isThrow());
934:       assertFalse(node2.isThis());
935:       assertFalse(node2.isFalse());
936:       assertFalse(node2.isComma());
937:       assertEquals(43, node2.getLineno());
938:       assertFalse(node2.isInc());
939:       assertFalse(node2.isExprResult());
940:       assertEquals(29, node2.getCharno());
941:       assertFalse(node2.isOr());
942:       assertFalse(node2.isReturn());
943:       assertFalse(node2.isIn());
944:       assertFalse(node2.isWhile());
945:       assertEquals(176157, node2.getSourcePosition());
946:       assertFalse(node2.hasChildren());
947:       assertFalse(node2.isGetElem());
948:       assertFalse(node2.isContinue());
949:       assertFalse(node2.isTypeOf());
950:       assertFalse(node2.isDec());
951:       assertFalse(node2.isAssign());
952:       assertFalse(node2.isCast());
953:       assertFalse(node2.isObjectLit());
954:       assertFalse(node2.isDebugger());
955:       assertFalse(node2.isNot());
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
959:       assertEquals(48, Node.DIRECTIVES);
960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(50, Node.FREE_CALL);
963:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
964:       assertEquals(40, Node.ORIGINALNAME_PROP);
965:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
966:       assertEquals(46, Node.IS_NAMESPACE);
967:       assertEquals(54, Node.SLASH_V);
968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(30, Node.VAR_ARGS_NAME);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
973:       assertEquals(12, Node.COLUMN_BITS);
974:       assertEquals(32, Node.INCRDECR_PROP);
975:       assertEquals(57, Node.LAST_PROP);
976:       assertEquals(37, Node.OPT_ARG_NAME);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       assertEquals(2, Node.POST_FLAG);
979:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
980:       assertEquals(29, Node.JSDOC_INFO_PROP);
981:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
982:       assertEquals(47, Node.IS_DISPATCHER);
983:       assertEquals(56, Node.CHANGE_TIME);
984:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
985:       assertEquals(53, Node.INPUT_ID);
986:       assertEquals(39, Node.EMPTY_BLOCK);
987:       assertEquals(57, Node.REFLECTED_OBJECT);
988:       assertEquals(36, Node.QUOTED_PROP);
989:       assertEquals(55, Node.INFERRED_FUNCTION);
990:       assertEquals(52, Node.LENGTH);
991:       assertEquals(8, Node.FLAG_NO_THROWS);
992:       assertSame(node2, node3);
993:       assertNotSame(node2, node1);
994:       
995:       node1.putProp(57, (Object) null);
996:       assertFalse(node1.equals((Object)node3));
997:       assertFalse(node1.equals((Object)node2));
998:       assertFalse(node1.equals((Object)node0));
999:       assertFalse(node1.isIf());
1000:       assertFalse(node1.isDelProp());
1001:       assertFalse(node1.isGetterDef());
1002:       assertFalse(node1.isNE());
1003:       assertFalse(node1.isFor());
1004:       assertFalse(node1.isEmpty());
1005:       assertFalse(node1.isArrayLit());
1006:       assertFalse(node1.isVoid());
1007:       assertEquals(176157, node1.getSourcePosition());
1008:       assertFalse(node1.isDefaultCase());
1009:       assertFalse(node1.isInc());
1010:       assertEquals(40, node1.getType());
1011:       assertFalse(node1.isTrue());
1012:       assertFalse(node1.isFunction());
1013:       assertEquals(0, node1.getChildCount());
1014:       assertFalse(node1.isIn());
1015:       assertFalse(node1.isThrow());
1016:       assertEquals(43, node1.getLineno());
1017:       assertFalse(node1.isBreak());
1018:       assertFalse(node1.isNull());
1019:       assertFalse(node1.isComma());
1020:       assertFalse(node1.isFalse());
1021:       assertFalse(node1.isCall());
1022:       assertFalse(node1.isAnd());
1023:       assertFalse(node1.isName());
1024:       assertFalse(node1.isWhile());
1025:       assertFalse(node1.isExprResult());
1026:       assertFalse(node1.isDebugger());
1027:       assertFalse(node1.isNot());
1028:       assertFalse(node1.isObjectLit());
1029:       assertFalse(node1.isReturn());
1030:       assertFalse(node1.isGetProp());
1031:       assertFalse(node1.hasChildren());
1032:       assertFalse(node1.isDec());
1033:       assertFalse(node1.isGetElem());
1034:       assertFalse(node1.isAssign());
1035:       assertFalse(node1.isOr());
1036:       assertFalse(node1.isTypeOf());
1037:       assertFalse(node1.isNumber());
1038:       assertFalse(node1.isCast());
1039:       assertFalse(node1.isLabelName());
1040:       assertFalse(node1.isContinue());
1041:       assertEquals(29, node1.getCharno());
1042:       assertFalse(node1.isLabel());
1043:       assertFalse(node1.isAdd());
1044:       assertFalse(node1.isVar());
1045:       assertFalse(node1.isNew());
1046:       assertFalse(node1.isAssignAdd());
1047:       assertFalse(node1.isDo());
1048:       assertFalse(node1.isSetterDef());
1049:       assertFalse(node1.isThis());
1050:       assertFalse(node1.isInstanceOf());
1051:       assertFalse(node1.isCatch());
1052:       assertFalse(node1.isStringKey());
1053:       assertFalse(node1.isParamList());
1054:       assertFalse(node1.isSwitch());
1055:       assertFalse(node1.isScript());
1056:       assertFalse(node1.hasMoreThanOneChild());
1057:       assertFalse(node1.isWith());
1058:       assertFalse(node1.isRegExp());
1059:       assertFalse(node1.hasOneChild());
1060:       assertFalse(node1.isBlock());
1061:       assertFalse(node1.isHook());
1062:       assertFalse(node1.isCase());
1063:       assertFalse(node1.isTry());
1064:       assertTrue(node1.isString());
1065:       assertEquals(32, Node.INCRDECR_PROP);
1066:       assertEquals(46, Node.IS_NAMESPACE);
1067:       assertEquals(37, Node.OPT_ARG_NAME);
1068:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1069:       assertEquals(2, Node.POST_FLAG);
1070:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1071:       assertEquals(49, Node.DIRECT_EVAL);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(54, Node.SLASH_V);
1074:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1077:       assertEquals(1, Node.DECR_FLAG);
1078:       assertEquals(12, Node.COLUMN_BITS);
1079:       assertEquals(48, Node.DIRECTIVES);
1080:       assertEquals(55, Node.INFERRED_FUNCTION);
1081:       assertEquals(8, Node.FLAG_NO_THROWS);
1082:       assertEquals(39, Node.EMPTY_BLOCK);
1083:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1084:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1085:       assertEquals(4095, Node.COLUMN_MASK);
1086:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(36, Node.QUOTED_PROP);
1089:       assertEquals(57, Node.REFLECTED_OBJECT);
1090:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1091:       assertEquals(43, Node.IS_CONSTANT_NAME);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(40, Node.ORIGINALNAME_PROP);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(30, Node.VAR_ARGS_NAME);
1097:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1098:       assertEquals(47, Node.IS_DISPATCHER);
1099:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1100:       assertEquals(57, Node.LAST_PROP);
1101:       assertNotSame(node1, node3);
1102:       assertNotSame(node1, node2);
1103:       
1104:       boolean boolean1 = node2.isDebugger();
1105:       assertFalse(node2.equals((Object)node0));
1106:       assertFalse(node2.equals((Object)node1));
1107:       assertTrue(boolean1 == boolean0);
1108:       assertFalse(boolean1);
1109:       assertFalse(node2.isCatch());
1110:       assertFalse(node2.isParamList());
1111:       assertFalse(node2.isSetterDef());
1112:       assertFalse(node2.isDefaultCase());
1113:       assertEquals(40, node2.getType());
1114:       assertFalse(node2.isFunction());
1115:       assertFalse(node2.isRegExp());
1116:       assertEquals(0, node2.getChildCount());
1117:       assertFalse(node2.isAdd());
1118:       assertFalse(node2.isVar());
1119:       assertFalse(node2.isCall());
1120:       assertFalse(node2.isNew());
1121:       assertFalse(node2.isName());
1122:       assertFalse(node2.isVoid());
1123:       assertFalse(node2.isDelProp());
1124:       assertFalse(node2.isIf());
1125:       assertFalse(node2.isNull());
1126:       assertFalse(node2.isNE());
1127:       assertFalse(node2.isEmpty());
1128:       assertFalse(node2.isTrue());
1129:       assertFalse(node2.isAssignAdd());
1130:       assertFalse(node2.isCase());
1131:       assertFalse(node2.isDo());
1132:       assertFalse(node2.isFor());
1133:       assertFalse(node2.hasMoreThanOneChild());
1134:       assertFalse(node2.isLabel());
1135:       assertFalse(node2.isHook());
1136:       assertFalse(node2.isBlock());
1137:       assertFalse(node2.isSwitch());
1138:       assertFalse(node2.isArrayLit());
1139:       assertTrue(node2.isString());
1140:       assertFalse(node2.hasOneChild());
1141:       assertFalse(node2.isLabelName());
1142:       assertFalse(node2.isTry());
1143:       assertFalse(node2.isGetterDef());
1144:       assertFalse(node2.isNumber());
1145:       assertFalse(node2.isScript());
1146:       assertFalse(node2.isStringKey());
1147:       assertFalse(node2.isInstanceOf());
1148:       assertFalse(node2.isAnd());
1149:       assertFalse(node2.isGetProp());
1150:       assertFalse(node2.isWith());
1151:       assertFalse(node2.isBreak());
1152:       assertFalse(node2.isThrow());
1153:       assertFalse(node2.isThis());
1154:       assertFalse(node2.isFalse());
1155:       assertFalse(node2.isComma());
1156:       assertEquals(43, node2.getLineno());
1157:       assertFalse(node2.isInc());
1158:       assertFalse(node2.isExprResult());
1159:       assertEquals(29, node2.getCharno());
1160:       assertFalse(node2.isOr());
1161:       assertFalse(node2.isReturn());
1162:       assertFalse(node2.isIn());
1163:       assertFalse(node2.isWhile());
1164:       assertEquals(176157, node2.getSourcePosition());
1165:       assertFalse(node2.hasChildren());
1166:       assertFalse(node2.isGetElem());
1167:       assertFalse(node2.isContinue());
1168:       assertFalse(node2.isTypeOf());
1169:       assertFalse(node2.isDec());
1170:       assertFalse(node2.isAssign());
1171:       assertFalse(node2.isCast());
1172:       assertFalse(node2.isObjectLit());
1173:       assertFalse(node2.isDebugger());
1174:       assertFalse(node2.isNot());
1175:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1176:       assertEquals(43, Node.IS_CONSTANT_NAME);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(48, Node.DIRECTIVES);
1179:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1180:       assertEquals(4095, Node.COLUMN_MASK);
1181:       assertEquals(50, Node.FREE_CALL);
1182:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1183:       assertEquals(40, Node.ORIGINALNAME_PROP);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(46, Node.IS_NAMESPACE);
1186:       assertEquals(54, Node.SLASH_V);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(49, Node.DIRECT_EVAL);
1189:       assertEquals(30, Node.VAR_ARGS_NAME);
1190:       assertEquals(1, Node.DECR_FLAG);
1191:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1192:       assertEquals(12, Node.COLUMN_BITS);
1193:       assertEquals(32, Node.INCRDECR_PROP);
1194:       assertEquals(57, Node.LAST_PROP);
1195:       assertEquals(37, Node.OPT_ARG_NAME);
1196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1197:       assertEquals(2, Node.POST_FLAG);
1198:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1199:       assertEquals(29, Node.JSDOC_INFO_PROP);
1200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1201:       assertEquals(47, Node.IS_DISPATCHER);
1202:       assertEquals(56, Node.CHANGE_TIME);
1203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1204:       assertEquals(53, Node.INPUT_ID);
1205:       assertEquals(39, Node.EMPTY_BLOCK);
1206:       assertEquals(57, Node.REFLECTED_OBJECT);
1207:       assertEquals(36, Node.QUOTED_PROP);
1208:       assertEquals(55, Node.INFERRED_FUNCTION);
1209:       assertEquals(52, Node.LENGTH);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertSame(node2, node3);
1212:       assertNotSame(node2, node1);
1213:       
1214:       Node node5 = null;
1215:       try {
1216:         node5 = new Node((-1250), node0, (Node) null, node3, node3, 55, (-2822));
1217:         fail("Expecting exception: NullPointerException");
1218:       
1219:       } catch(NullPointerException e) {
1220:          //
1221:          // no message in exception (getMessage() returned null)
1222:          //
1223:          verifyException("com.google.javascript.rhino.Node", e);
1224:       }
1225:   }
1226: }
RegularFileObject[/tmp/EvoSuite_287_1628157833638/com/google/javascript/rhino/Node_287_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:03:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_287_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_287_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.ImmutableEnumSet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_287_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.jstype.EnumType",
330:       "com.google.javascript.rhino.jstype.EnumElementType",
331:       "com.google.common.collect.ImmutableSet",
332:       "com.google.common.collect.EmptyImmutableSet",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
346:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
355:       "com.google.common.collect.Platform",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 10:03:53.983 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2078.201356198);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(iterable0.contains(node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

Node node1 = Node.newString("T42NGn]b. H", 43, 29);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertEquals(176157, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(43, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertEquals(29, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);

Node node2 = Node.newString("Object#Key", 4, 50);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isCatch());
assertEquals(16434, node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertEquals(4, node2.getLineno());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertEquals(50, node2.getCharno());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node2, node1);

boolean boolean0 = node0.isFromExterns();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node3 = node2.copyInformationFromForTree(node1);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertEquals(176157, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(43, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertEquals(29, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(43, node2.getLineno());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertEquals(29, node2.getCharno());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertFalse(node2.isWhile());
assertEquals(176157, node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(43, node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertEquals(176157, node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(29, node3.getCharno());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isWhile());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(40, node3.getType());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isTry());
assertFalse(node3.isWith());
assertFalse(node3.isLabel());
assertFalse(node3.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertSame(node3, node2);
assertNotSame(node3, node1);

Node node4 = node2.getAncestor(2481);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNull(node4);
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(43, node2.getLineno());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertEquals(29, node2.getCharno());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertFalse(node2.isWhile());
assertEquals(176157, node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertSame(node2, node3);
assertNotSame(node2, node1);

node1.putProp(57, (Object) null);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertEquals(176157, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(43, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertEquals(29, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node1, node3);
assertNotSame(node1, node2);

boolean boolean1 = node2.isDebugger();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertEquals(43, node2.getLineno());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertEquals(29, node2.getCharno());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertFalse(node2.isWhile());
assertEquals(176157, node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertSame(node2, node3);
assertNotSame(node2, node1);

Node node5 = new Node((-1250), node0, (Node) null, node3, node3, 55, (-2822));

[MASTER] 10:03:54.532 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_293_1628157834481/com/google/javascript/rhino/Node_293_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_293_1628157834481/com/google/javascript/rhino/Node_293_tmp__ESTest_scaffolding.java]]
[MASTER] 10:03:54.532 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:54.532 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:03:54.533 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 199
[MASTER] 10:03:54.534 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_293_1628157834481/com/google/javascript/rhino/Node_293_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:03:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.SimpleSourceFile;
16: import java.util.LinkedList;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_293_tmp__ESTest extends Node_293_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newNumber(2078.201356198);
27:       assertNotNull(node0);
28:       assertFalse(node0.hasOneChild());
29:       assertFalse(node0.isCast());
30:       assertFalse(node0.isScript());
31:       assertFalse(node0.isExprResult());
32:       assertFalse(node0.isAssign());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isDec());
36:       assertFalse(node0.isGetProp());
37:       assertFalse(node0.isObjectLit());
38:       assertFalse(node0.isAnd());
39:       assertFalse(node0.isLabelName());
40:       assertFalse(node0.isNot());
41:       assertEquals((-1), node0.getSourcePosition());
42:       assertEquals((-1), node0.getCharno());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isThrow());
46:       assertFalse(node0.isCase());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isFalse());
49:       assertEquals(39, node0.getType());
50:       assertFalse(node0.isBlock());
51:       assertFalse(node0.isThis());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isIn());
54:       assertEquals((-1), node0.getLineno());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.isSetterDef());
57:       assertFalse(node0.isIf());
58:       assertFalse(node0.isNE());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isRegExp());
62:       assertFalse(node0.isTry());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isCatch());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isParamList());
70:       assertTrue(node0.isNumber());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isGetterDef());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isAssignAdd());
85:       assertFalse(node0.isOr());
86:       assertFalse(node0.isTypeOf());
87:       assertFalse(node0.isDelProp());
88:       assertFalse(node0.isBreak());
89:       assertFalse(node0.isEmpty());
90:       assertFalse(node0.isGetElem());
91:       assertFalse(node0.isName());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isTrue());
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(29, Node.JSDOC_INFO_PROP);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(2, Node.POST_FLAG);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(55, Node.INFERRED_FUNCTION);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
103:       assertEquals(49, Node.DIRECT_EVAL);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(8, Node.FLAG_NO_THROWS);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
121:       assertEquals(12, Node.COLUMN_BITS);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(1, Node.DECR_FLAG);
125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
126:       assertEquals(54, Node.SLASH_V);
127:       assertEquals(43, Node.IS_CONSTANT_NAME);
128:       assertEquals(50, Node.FREE_CALL);
129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
130:       
131:       Iterable<Node> iterable0 = node0.children();
132:       assertNotNull(iterable0);
133:       assertFalse(node0.hasOneChild());
134:       assertFalse(node0.isCast());
135:       assertFalse(node0.isScript());
136:       assertFalse(node0.isExprResult());
137:       assertFalse(node0.isAssign());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isDec());
141:       assertFalse(node0.isGetProp());
142:       assertFalse(node0.isObjectLit());
143:       assertFalse(node0.isAnd());
144:       assertFalse(node0.isLabelName());
145:       assertFalse(node0.isNot());
146:       assertEquals((-1), node0.getSourcePosition());
147:       assertEquals((-1), node0.getCharno());
148:       assertFalse(node0.isInc());
149:       assertFalse(node0.isContinue());
150:       assertFalse(node0.isThrow());
151:       assertFalse(node0.isCase());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isFalse());
154:       assertEquals(39, node0.getType());
155:       assertFalse(node0.isBlock());
156:       assertFalse(node0.isThis());
157:       assertFalse(node0.isHook());
158:       assertFalse(node0.isIn());
159:       assertEquals((-1), node0.getLineno());
160:       assertFalse(node0.isInstanceOf());
161:       assertFalse(node0.isSetterDef());
162:       assertFalse(node0.isIf());
163:       assertFalse(node0.isNE());
164:       assertFalse(node0.isDebugger());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isRegExp());
167:       assertFalse(node0.isTry());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isCatch());
171:       assertEquals(0, node0.getChildCount());
172:       assertFalse(node0.isDefaultCase());
173:       assertFalse(node0.isFor());
174:       assertFalse(node0.isParamList());
175:       assertTrue(node0.isNumber());
176:       assertFalse(node0.isStringKey());
177:       assertFalse(node0.isGetterDef());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isString());
181:       assertFalse(node0.isAdd());
182:       assertFalse(node0.isCall());
183:       assertFalse(node0.isDo());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isLabel());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isReturn());
188:       assertFalse(node0.isComma());
189:       assertFalse(node0.isAssignAdd());
190:       assertFalse(node0.isOr());
191:       assertFalse(node0.isTypeOf());
192:       assertFalse(node0.isDelProp());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isEmpty());
195:       assertFalse(node0.isGetElem());
196:       assertFalse(node0.isName());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isTrue());
199:       assertFalse(iterable0.contains(node0));
200:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
202:       assertEquals(29, Node.JSDOC_INFO_PROP);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(55, Node.INFERRED_FUNCTION);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(56, Node.CHANGE_TIME);
217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(36, Node.QUOTED_PROP);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(32, Node.INCRDECR_PROP);
230:       assertEquals(1, Node.DECR_FLAG);
231:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
232:       assertEquals(54, Node.SLASH_V);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(50, Node.FREE_CALL);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       
237:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
238:       assertNotNull(jSTypeRegistry0);
239:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
240:       
241:       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
242:       assertNotNull(linkedList0);
243:       assertEquals(0, linkedList0.size());
244:       
245:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
246:       assertNotNull(node_SideEffectFlags0);
247:       assertEquals(0, node_SideEffectFlags0.valueOf());
248:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
249:       
250:       node_SideEffectFlags0.clearSideEffectFlags();
251:       assertEquals(15, node_SideEffectFlags0.valueOf());
252:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
253:       
254:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
255:       assertNotNull(simpleSourceFile0);
256:       assertNull(simpleSourceFile0.toString());
257:       assertNull(simpleSourceFile0.getName());
258:       assertTrue(simpleSourceFile0.isExtern());
259:       
260:       int int0 = simpleSourceFile0.getLineOffset(37);
261:       assertEquals(Integer.MIN_VALUE, int0);
262:       assertNull(simpleSourceFile0.toString());
263:       assertNull(simpleSourceFile0.getName());
264:       assertTrue(simpleSourceFile0.isExtern());
265:       
266:       node0.setStaticSourceFile(simpleSourceFile0);
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isCast());
269:       assertFalse(node0.isScript());
270:       assertFalse(node0.isExprResult());
271:       assertFalse(node0.isAssign());
272:       assertFalse(node0.isWith());
273:       assertFalse(node0.hasChildren());
274:       assertFalse(node0.isDec());
275:       assertFalse(node0.isGetProp());
276:       assertFalse(node0.isObjectLit());
277:       assertFalse(node0.isAnd());
278:       assertFalse(node0.isLabelName());
279:       assertFalse(node0.isNot());
280:       assertEquals((-1), node0.getSourcePosition());
281:       assertEquals((-1), node0.getCharno());
282:       assertFalse(node0.isInc());
283:       assertFalse(node0.isContinue());
284:       assertFalse(node0.isThrow());
285:       assertFalse(node0.isCase());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertFalse(node0.isFalse());
288:       assertEquals(39, node0.getType());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isHook());
292:       assertFalse(node0.isIn());
293:       assertEquals((-1), node0.getLineno());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.isIf());
297:       assertFalse(node0.isNE());
298:       assertFalse(node0.isDebugger());
299:       assertFalse(node0.isVoid());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isTry());
302:       assertFalse(node0.isFunction());
303:       assertFalse(node0.isArrayLit());
304:       assertFalse(node0.isCatch());
305:       assertEquals(0, node0.getChildCount());
306:       assertFalse(node0.isDefaultCase());
307:       assertFalse(node0.isFor());
308:       assertFalse(node0.isParamList());
309:       assertTrue(node0.isNumber());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isGetterDef());
312:       assertFalse(node0.isNew());
313:       assertFalse(node0.isSwitch());
314:       assertFalse(node0.isString());
315:       assertFalse(node0.isAdd());
316:       assertFalse(node0.isCall());
317:       assertFalse(node0.isDo());
318:       assertFalse(node0.isWhile());
319:       assertFalse(node0.isLabel());
320:       assertFalse(node0.isVar());
321:       assertFalse(node0.isReturn());
322:       assertFalse(node0.isComma());
323:       assertFalse(node0.isAssignAdd());
324:       assertFalse(node0.isOr());
325:       assertFalse(node0.isTypeOf());
326:       assertFalse(node0.isDelProp());
327:       assertFalse(node0.isBreak());
328:       assertFalse(node0.isEmpty());
329:       assertFalse(node0.isGetElem());
330:       assertFalse(node0.isName());
331:       assertFalse(node0.isNull());
332:       assertFalse(node0.isTrue());
333:       assertNull(simpleSourceFile0.toString());
334:       assertNull(simpleSourceFile0.getName());
335:       assertTrue(simpleSourceFile0.isExtern());
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(2, Node.POST_FLAG);
341:       assertEquals(47, Node.IS_DISPATCHER);
342:       assertEquals(55, Node.INFERRED_FUNCTION);
343:       assertEquals(4095, Node.COLUMN_MASK);
344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
345:       assertEquals(49, Node.DIRECT_EVAL);
346:       assertEquals(48, Node.DIRECTIVES);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(37, Node.OPT_ARG_NAME);
349:       assertEquals(39, Node.EMPTY_BLOCK);
350:       assertEquals(8, Node.FLAG_NO_THROWS);
351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
352:       assertEquals(56, Node.CHANGE_TIME);
353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
354:       assertEquals(52, Node.LENGTH);
355:       assertEquals(36, Node.QUOTED_PROP);
356:       assertEquals(40, Node.ORIGINALNAME_PROP);
357:       assertEquals(57, Node.REFLECTED_OBJECT);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(12, Node.COLUMN_BITS);
364:       assertEquals(46, Node.IS_NAMESPACE);
365:       assertEquals(32, Node.INCRDECR_PROP);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
368:       assertEquals(54, Node.SLASH_V);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(50, Node.FREE_CALL);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       
373:       Node node1 = Node.newString((-498), "The new child node has siblings.", 52, 37);
374:       assertFalse(node1.equals((Object)node0));
375:       assertNotNull(node1);
376:       assertFalse(node1.isScript());
377:       assertFalse(node1.isExprResult());
378:       assertFalse(node1.isNot());
379:       assertFalse(node1.isObjectLit());
380:       assertEquals(52, node1.getLineno());
381:       assertFalse(node1.isWith());
382:       assertFalse(node1.isInstanceOf());
383:       assertFalse(node1.isCast());
384:       assertFalse(node1.isLabelName());
385:       assertEquals(37, node1.getCharno());
386:       assertFalse(node1.isAnd());
387:       assertFalse(node1.isDec());
388:       assertFalse(node1.isTypeOf());
389:       assertFalse(node1.isNumber());
390:       assertFalse(node1.isThis());
391:       assertFalse(node1.isComma());
392:       assertFalse(node1.hasChildren());
393:       assertFalse(node1.isGetProp());
394:       assertFalse(node1.isBreak());
395:       assertFalse(node1.isGetElem());
396:       assertFalse(node1.isAssign());
397:       assertFalse(node1.hasOneChild());
398:       assertFalse(node1.isHook());
399:       assertFalse(node1.isReturn());
400:       assertEquals((-498), node1.getType());
401:       assertFalse(node1.isWhile());
402:       assertFalse(node1.isAdd());
403:       assertFalse(node1.isCall());
404:       assertFalse(node1.isStringKey());
405:       assertFalse(node1.isName());
406:       assertFalse(node1.isSwitch());
407:       assertFalse(node1.isNull());
408:       assertFalse(node1.isEmpty());
409:       assertFalse(node1.isOr());
410:       assertEquals(0, node1.getChildCount());
411:       assertFalse(node1.isVar());
412:       assertFalse(node1.isLabel());
413:       assertFalse(node1.isNew());
414:       assertFalse(node1.isDo());
415:       assertFalse(node1.isAssignAdd());
416:       assertFalse(node1.isDefaultCase());
417:       assertFalse(node1.isRegExp());
418:       assertFalse(node1.isDebugger());
419:       assertFalse(node1.isTrue());
420:       assertFalse(node1.isFunction());
421:       assertFalse(node1.isArrayLit());
422:       assertFalse(node1.isCatch());
423:       assertEquals(213029, node1.getSourcePosition());
424:       assertFalse(node1.isVoid());
425:       assertFalse(node1.isParamList());
426:       assertFalse(node1.isIf());
427:       assertFalse(node1.isDelProp());
428:       assertFalse(node1.isGetterDef());
429:       assertFalse(node1.isBlock());
430:       assertFalse(node1.isCase());
431:       assertFalse(node1.isFor());
432:       assertFalse(node1.isTry());
433:       assertFalse(node1.isInc());
434:       assertFalse(node1.isString());
435:       assertFalse(node1.hasMoreThanOneChild());
436:       assertFalse(node1.isContinue());
437:       assertFalse(node1.isNE());
438:       assertFalse(node1.isSetterDef());
439:       assertFalse(node1.isFalse());
440:       assertFalse(node1.isIn());
441:       assertFalse(node1.isThrow());
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
444:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
448:       assertEquals(43, Node.IS_CONSTANT_NAME);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
451:       assertEquals(8, Node.FLAG_NO_THROWS);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
455:       assertEquals(57, Node.LAST_PROP);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(30, Node.VAR_ARGS_NAME);
459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
460:       assertEquals(52, Node.LENGTH);
461:       assertEquals(40, Node.ORIGINALNAME_PROP);
462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
463:       assertEquals(50, Node.FREE_CALL);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(57, Node.REFLECTED_OBJECT);
466:       assertEquals(54, Node.SLASH_V);
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(46, Node.IS_NAMESPACE);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(48, Node.DIRECTIVES);
471:       assertEquals(37, Node.OPT_ARG_NAME);
472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
475:       assertEquals(1, Node.DECR_FLAG);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       
479:       // Undeclared exception!
480:       try { 
481:         node0.setSideEffectFlags(node_SideEffectFlags0);
482:         fail("Expecting exception: IllegalArgumentException");
483:       
484:       } catch(IllegalArgumentException e) {
485:          //
486:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
487:          //
488:          verifyException("com.google.common.base.Preconditions", e);
489:       }
490:   }
491: }
RegularFileObject[/tmp/EvoSuite_293_1628157834481/com/google/javascript/rhino/Node_293_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:03:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_293_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_293_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.ImmutableEnumSet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_293_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.jstype.EnumType",
330:       "com.google.javascript.rhino.jstype.EnumElementType",
331:       "com.google.common.collect.ImmutableSet",
332:       "com.google.common.collect.EmptyImmutableSet",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
346:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
355:       "com.google.common.collect.Platform",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 10:03:54.539 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2078.201356198);
assertNotNull(node0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertTrue(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertTrue(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(iterable0.contains(node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
assertNotNull(simpleSourceFile0);
assertNull(simpleSourceFile0.toString());
assertNull(simpleSourceFile0.getName());
assertTrue(simpleSourceFile0.isExtern());

int int0 = simpleSourceFile0.getLineOffset(37);
assertEquals(Integer.MIN_VALUE, int0);
assertNull(simpleSourceFile0.toString());
assertNull(simpleSourceFile0.getName());
assertTrue(simpleSourceFile0.isExtern());

node0.setStaticSourceFile(simpleSourceFile0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertTrue(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertNull(simpleSourceFile0.toString());
assertNull(simpleSourceFile0.getName());
assertTrue(simpleSourceFile0.isExtern());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = Node.newString((-498), "The new child node has siblings.", 52, 37);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(52, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertEquals(37, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertEquals((-498), node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(213029, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.setSideEffectFlags(node_SideEffectFlags0);

[MASTER] 10:04:04.864 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_387_1628157844755/com/google/javascript/rhino/Node_387_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_387_1628157844755/com/google/javascript/rhino/Node_387_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:04.864 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:04.865 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:04.865 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 416
[MASTER] 10:04:04.866 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_387_1628157844755/com/google/javascript/rhino/Node_387_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_387_tmp__ESTest extends Node_387_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
24:       assertNotNull(simpleErrorReporter0);
25:       
26:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
27:       assertNotNull(jSTypeRegistry0);
28:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
29:       
30:       simpleErrorReporter0.error("Object#Element", "N[w~$%j", 45, 257);
31:       simpleErrorReporter0.warning("Object#Element", "Object#Element", 0, 0);
32:       Node node0 = Node.newString(122, "R>X;", 257, (-1550));
33:       assertNotNull(node0);
34:       assertFalse(node0.isIn());
35:       assertFalse(node0.isNE());
36:       assertFalse(node0.isGetterDef());
37:       assertFalse(node0.isIf());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.isFunction());
41:       assertFalse(node0.isTrue());
42:       assertFalse(node0.isThrow());
43:       assertFalse(node0.isEmpty());
44:       assertFalse(node0.isDefaultCase());
45:       assertFalse(node0.isInc());
46:       assertFalse(node0.isNull());
47:       assertFalse(node0.isComma());
48:       assertFalse(node0.isFalse());
49:       assertFalse(node0.isName());
50:       assertFalse(node0.isAnd());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.isExprResult());
53:       assertFalse(node0.isBreak());
54:       assertFalse(node0.isDebugger());
55:       assertFalse(node0.isObjectLit());
56:       assertFalse(node0.isNot());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isString());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isAssignAdd());
62:       assertFalse(node0.isDec());
63:       assertFalse(node0.isTypeOf());
64:       assertFalse(node0.isNumber());
65:       assertEquals((-1), node0.getSourcePosition());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isGetElem());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isCast());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isVar());
79:       assertTrue(node0.isVoid());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isParamList());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isCatch());
87:       assertFalse(node0.isWith());
88:       assertEquals(122, node0.getType());
89:       assertFalse(node0.isInstanceOf());
90:       assertFalse(node0.isBlock());
91:       assertFalse(node0.isTry());
92:       assertFalse(node0.isSwitch());
93:       assertFalse(node0.isHook());
94:       assertFalse(node0.isRegExp());
95:       assertEquals((-1), node0.getCharno());
96:       assertFalse(node0.isCase());
97:       assertFalse(node0.isFor());
98:       assertFalse(node0.hasOneChild());
99:       assertFalse(node0.isScript());
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(54, Node.SLASH_V);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
110:       assertEquals(50, Node.FREE_CALL);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
122:       assertEquals(48, Node.DIRECTIVES);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertEquals(57, Node.REFLECTED_OBJECT);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
127:       assertEquals(52, Node.LENGTH);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(39, Node.EMPTY_BLOCK);
132:       assertEquals(53, Node.INPUT_ID);
133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(57, Node.LAST_PROP);
136:       
137:       boolean boolean0 = node0.isCast();
138:       assertFalse(boolean0);
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isNE());
141:       assertFalse(node0.isGetterDef());
142:       assertFalse(node0.isIf());
143:       assertFalse(node0.isDelProp());
144:       assertFalse(node0.isArrayLit());
145:       assertFalse(node0.isFunction());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isThrow());
148:       assertFalse(node0.isEmpty());
149:       assertFalse(node0.isDefaultCase());
150:       assertFalse(node0.isInc());
151:       assertFalse(node0.isNull());
152:       assertFalse(node0.isComma());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isAnd());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isExprResult());
158:       assertFalse(node0.isBreak());
159:       assertFalse(node0.isDebugger());
160:       assertFalse(node0.isObjectLit());
161:       assertFalse(node0.isNot());
162:       assertFalse(node0.isWhile());
163:       assertFalse(node0.isString());
164:       assertFalse(node0.isGetProp());
165:       assertFalse(node0.isOr());
166:       assertFalse(node0.isAssignAdd());
167:       assertFalse(node0.isDec());
168:       assertFalse(node0.isTypeOf());
169:       assertFalse(node0.isNumber());
170:       assertEquals((-1), node0.getSourcePosition());
171:       assertFalse(node0.isReturn());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isGetElem());
175:       assertFalse(node0.isAssign());
176:       assertFalse(node0.isLabelName());
177:       assertFalse(node0.hasMoreThanOneChild());
178:       assertFalse(node0.isContinue());
179:       assertFalse(node0.isCast());
180:       assertEquals((-1), node0.getLineno());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isVar());
184:       assertTrue(node0.isVoid());
185:       assertFalse(node0.isDo());
186:       assertFalse(node0.isSetterDef());
187:       assertFalse(node0.isParamList());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.isCatch());
192:       assertFalse(node0.isWith());
193:       assertEquals(122, node0.getType());
194:       assertFalse(node0.isInstanceOf());
195:       assertFalse(node0.isBlock());
196:       assertFalse(node0.isTry());
197:       assertFalse(node0.isSwitch());
198:       assertFalse(node0.isHook());
199:       assertFalse(node0.isRegExp());
200:       assertEquals((-1), node0.getCharno());
201:       assertFalse(node0.isCase());
202:       assertFalse(node0.isFor());
203:       assertFalse(node0.hasOneChild());
204:       assertFalse(node0.isScript());
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(56, Node.CHANGE_TIME);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(50, Node.FREE_CALL);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(1, Node.DECR_FLAG);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(48, Node.DIRECTIVES);
228:       assertEquals(40, Node.ORIGINALNAME_PROP);
229:       assertEquals(57, Node.REFLECTED_OBJECT);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
232:       assertEquals(52, Node.LENGTH);
233:       assertEquals(47, Node.IS_DISPATCHER);
234:       assertEquals(2, Node.POST_FLAG);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
239:       assertEquals(15, Node.NO_SIDE_EFFECTS);
240:       assertEquals(57, Node.LAST_PROP);
241:       
242:       boolean boolean1 = node0.isParamList();
243:       assertTrue(boolean1 == boolean0);
244:       assertFalse(boolean1);
245:       assertFalse(node0.isIn());
246:       assertFalse(node0.isNE());
247:       assertFalse(node0.isGetterDef());
248:       assertFalse(node0.isIf());
249:       assertFalse(node0.isDelProp());
250:       assertFalse(node0.isArrayLit());
251:       assertFalse(node0.isFunction());
252:       assertFalse(node0.isTrue());
253:       assertFalse(node0.isThrow());
254:       assertFalse(node0.isEmpty());
255:       assertFalse(node0.isDefaultCase());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.isNull());
258:       assertFalse(node0.isComma());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isName());
261:       assertFalse(node0.isAnd());
262:       assertFalse(node0.isCall());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isBreak());
265:       assertFalse(node0.isDebugger());
266:       assertFalse(node0.isObjectLit());
267:       assertFalse(node0.isNot());
268:       assertFalse(node0.isWhile());
269:       assertFalse(node0.isString());
270:       assertFalse(node0.isGetProp());
271:       assertFalse(node0.isOr());
272:       assertFalse(node0.isAssignAdd());
273:       assertFalse(node0.isDec());
274:       assertFalse(node0.isTypeOf());
275:       assertFalse(node0.isNumber());
276:       assertEquals((-1), node0.getSourcePosition());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.hasChildren());
280:       assertFalse(node0.isGetElem());
281:       assertFalse(node0.isAssign());
282:       assertFalse(node0.isLabelName());
283:       assertFalse(node0.hasMoreThanOneChild());
284:       assertFalse(node0.isContinue());
285:       assertFalse(node0.isCast());
286:       assertEquals((-1), node0.getLineno());
287:       assertFalse(node0.isNew());
288:       assertFalse(node0.isAdd());
289:       assertFalse(node0.isVar());
290:       assertTrue(node0.isVoid());
291:       assertFalse(node0.isDo());
292:       assertFalse(node0.isSetterDef());
293:       assertFalse(node0.isParamList());
294:       assertEquals(0, node0.getChildCount());
295:       assertFalse(node0.isThis());
296:       assertFalse(node0.isStringKey());
297:       assertFalse(node0.isCatch());
298:       assertFalse(node0.isWith());
299:       assertEquals(122, node0.getType());
300:       assertFalse(node0.isInstanceOf());
301:       assertFalse(node0.isBlock());
302:       assertFalse(node0.isTry());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isHook());
305:       assertFalse(node0.isRegExp());
306:       assertEquals((-1), node0.getCharno());
307:       assertFalse(node0.isCase());
308:       assertFalse(node0.isFor());
309:       assertFalse(node0.hasOneChild());
310:       assertFalse(node0.isScript());
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(30, Node.VAR_ARGS_NAME);
315:       assertEquals(37, Node.OPT_ARG_NAME);
316:       assertEquals(56, Node.CHANGE_TIME);
317:       assertEquals(54, Node.SLASH_V);
318:       assertEquals(49, Node.DIRECT_EVAL);
319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
321:       assertEquals(50, Node.FREE_CALL);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(1, Node.DECR_FLAG);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(43, Node.IS_CONSTANT_NAME);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(48, Node.DIRECTIVES);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(57, Node.REFLECTED_OBJECT);
336:       assertEquals(29, Node.JSDOC_INFO_PROP);
337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
338:       assertEquals(52, Node.LENGTH);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       assertEquals(2, Node.POST_FLAG);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(57, Node.LAST_PROP);
347:       
348:       Iterable<Node> iterable0 = node0.children();
349:       assertNotNull(iterable0);
350:       assertFalse(node0.isIn());
351:       assertFalse(node0.isNE());
352:       assertFalse(node0.isGetterDef());
353:       assertFalse(node0.isIf());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isArrayLit());
356:       assertFalse(node0.isFunction());
357:       assertFalse(node0.isTrue());
358:       assertFalse(node0.isThrow());
359:       assertFalse(node0.isEmpty());
360:       assertFalse(node0.isDefaultCase());
361:       assertFalse(node0.isInc());
362:       assertFalse(node0.isNull());
363:       assertFalse(node0.isComma());
364:       assertFalse(node0.isFalse());
365:       assertFalse(node0.isName());
366:       assertFalse(node0.isAnd());
367:       assertFalse(node0.isCall());
368:       assertFalse(node0.isExprResult());
369:       assertFalse(node0.isBreak());
370:       assertFalse(node0.isDebugger());
371:       assertFalse(node0.isObjectLit());
372:       assertFalse(node0.isNot());
373:       assertFalse(node0.isWhile());
374:       assertFalse(node0.isString());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isOr());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isDec());
379:       assertFalse(node0.isTypeOf());
380:       assertFalse(node0.isNumber());
381:       assertEquals((-1), node0.getSourcePosition());
382:       assertFalse(node0.isReturn());
383:       assertFalse(node0.isLabel());
384:       assertFalse(node0.hasChildren());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isAssign());
387:       assertFalse(node0.isLabelName());
388:       assertFalse(node0.hasMoreThanOneChild());
389:       assertFalse(node0.isContinue());
390:       assertFalse(node0.isCast());
391:       assertEquals((-1), node0.getLineno());
392:       assertFalse(node0.isNew());
393:       assertFalse(node0.isAdd());
394:       assertFalse(node0.isVar());
395:       assertTrue(node0.isVoid());
396:       assertFalse(node0.isDo());
397:       assertFalse(node0.isSetterDef());
398:       assertFalse(node0.isParamList());
399:       assertEquals(0, node0.getChildCount());
400:       assertFalse(node0.isThis());
401:       assertFalse(node0.isStringKey());
402:       assertFalse(node0.isCatch());
403:       assertFalse(node0.isWith());
404:       assertEquals(122, node0.getType());
405:       assertFalse(node0.isInstanceOf());
406:       assertFalse(node0.isBlock());
407:       assertFalse(node0.isTry());
408:       assertFalse(node0.isSwitch());
409:       assertFalse(node0.isHook());
410:       assertFalse(node0.isRegExp());
411:       assertEquals((-1), node0.getCharno());
412:       assertFalse(node0.isCase());
413:       assertFalse(node0.isFor());
414:       assertFalse(node0.hasOneChild());
415:       assertFalse(node0.isScript());
416:       assertFalse(iterable0.contains(node0));
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(30, Node.VAR_ARGS_NAME);
421:       assertEquals(37, Node.OPT_ARG_NAME);
422:       assertEquals(56, Node.CHANGE_TIME);
423:       assertEquals(54, Node.SLASH_V);
424:       assertEquals(49, Node.DIRECT_EVAL);
425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
430:       assertEquals(32, Node.INCRDECR_PROP);
431:       assertEquals(1, Node.DECR_FLAG);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(55, Node.INFERRED_FUNCTION);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(43, Node.IS_CONSTANT_NAME);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertEquals(48, Node.DIRECTIVES);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(57, Node.REFLECTED_OBJECT);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
444:       assertEquals(52, Node.LENGTH);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(2, Node.POST_FLAG);
447:       assertEquals(8, Node.FLAG_NO_THROWS);
448:       assertEquals(39, Node.EMPTY_BLOCK);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(57, Node.LAST_PROP);
453:       
454:       boolean boolean2 = node0.isWith();
455:       assertTrue(boolean2 == boolean0);
456:       assertTrue(boolean2 == boolean1);
457:       assertFalse(boolean2);
458:       assertFalse(node0.isIn());
459:       assertFalse(node0.isNE());
460:       assertFalse(node0.isGetterDef());
461:       assertFalse(node0.isIf());
462:       assertFalse(node0.isDelProp());
463:       assertFalse(node0.isArrayLit());
464:       assertFalse(node0.isFunction());
465:       assertFalse(node0.isTrue());
466:       assertFalse(node0.isThrow());
467:       assertFalse(node0.isEmpty());
468:       assertFalse(node0.isDefaultCase());
469:       assertFalse(node0.isInc());
470:       assertFalse(node0.isNull());
471:       assertFalse(node0.isComma());
472:       assertFalse(node0.isFalse());
473:       assertFalse(node0.isName());
474:       assertFalse(node0.isAnd());
475:       assertFalse(node0.isCall());
476:       assertFalse(node0.isExprResult());
477:       assertFalse(node0.isBreak());
478:       assertFalse(node0.isDebugger());
479:       assertFalse(node0.isObjectLit());
480:       assertFalse(node0.isNot());
481:       assertFalse(node0.isWhile());
482:       assertFalse(node0.isString());
483:       assertFalse(node0.isGetProp());
484:       assertFalse(node0.isOr());
485:       assertFalse(node0.isAssignAdd());
486:       assertFalse(node0.isDec());
487:       assertFalse(node0.isTypeOf());
488:       assertFalse(node0.isNumber());
489:       assertEquals((-1), node0.getSourcePosition());
490:       assertFalse(node0.isReturn());
491:       assertFalse(node0.isLabel());
492:       assertFalse(node0.hasChildren());
493:       assertFalse(node0.isGetElem());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isLabelName());
496:       assertFalse(node0.hasMoreThanOneChild());
497:       assertFalse(node0.isContinue());
498:       assertFalse(node0.isCast());
499:       assertEquals((-1), node0.getLineno());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isAdd());
502:       assertFalse(node0.isVar());
503:       assertTrue(node0.isVoid());
504:       assertFalse(node0.isDo());
505:       assertFalse(node0.isSetterDef());
506:       assertFalse(node0.isParamList());
507:       assertEquals(0, node0.getChildCount());
508:       assertFalse(node0.isThis());
509:       assertFalse(node0.isStringKey());
510:       assertFalse(node0.isCatch());
511:       assertFalse(node0.isWith());
512:       assertEquals(122, node0.getType());
513:       assertFalse(node0.isInstanceOf());
514:       assertFalse(node0.isBlock());
515:       assertFalse(node0.isTry());
516:       assertFalse(node0.isSwitch());
517:       assertFalse(node0.isHook());
518:       assertFalse(node0.isRegExp());
519:       assertEquals((-1), node0.getCharno());
520:       assertFalse(node0.isCase());
521:       assertFalse(node0.isFor());
522:       assertFalse(node0.hasOneChild());
523:       assertFalse(node0.isScript());
524:       assertEquals(12, Node.COLUMN_BITS);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
527:       assertEquals(30, Node.VAR_ARGS_NAME);
528:       assertEquals(37, Node.OPT_ARG_NAME);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(54, Node.SLASH_V);
531:       assertEquals(49, Node.DIRECT_EVAL);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertEquals(40, Node.ORIGINALNAME_PROP);
548:       assertEquals(57, Node.REFLECTED_OBJECT);
549:       assertEquals(29, Node.JSDOC_INFO_PROP);
550:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(39, Node.EMPTY_BLOCK);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(57, Node.LAST_PROP);
560:       
561:       Node node1 = Node.newString("PJ4!W4p}!-");
562:       assertFalse(node1.equals((Object)node0));
563:       assertNotNull(node1);
564:       assertFalse(node1.isCatch());
565:       assertEquals(0, node1.getChildCount());
566:       assertEquals(40, node1.getType());
567:       assertFalse(node1.isDebugger());
568:       assertFalse(node1.isTry());
569:       assertFalse(node1.isDefaultCase());
570:       assertFalse(node1.isSetterDef());
571:       assertFalse(node1.isStringKey());
572:       assertFalse(node1.isGetterDef());
573:       assertFalse(node1.isVar());
574:       assertFalse(node1.isParamList());
575:       assertFalse(node1.isFunction());
576:       assertFalse(node1.isArrayLit());
577:       assertFalse(node1.isWhile());
578:       assertFalse(node1.isOr());
579:       assertFalse(node1.isLabel());
580:       assertFalse(node1.isReturn());
581:       assertFalse(node1.isAssignAdd());
582:       assertFalse(node1.isDo());
583:       assertFalse(node1.isAdd());
584:       assertFalse(node1.isNew());
585:       assertFalse(node1.isEmpty());
586:       assertFalse(node1.isCall());
587:       assertFalse(node1.isName());
588:       assertFalse(node1.hasChildren());
589:       assertFalse(node1.isDec());
590:       assertFalse(node1.isAssign());
591:       assertFalse(node1.isNull());
592:       assertFalse(node1.isExprResult());
593:       assertFalse(node1.isVoid());
594:       assertFalse(node1.isTrue());
595:       assertFalse(node1.isComma());
596:       assertFalse(node1.isTypeOf());
597:       assertFalse(node1.isDelProp());
598:       assertFalse(node1.isBreak());
599:       assertFalse(node1.isGetElem());
600:       assertFalse(node1.isObjectLit());
601:       assertFalse(node1.isAnd());
602:       assertFalse(node1.isWith());
603:       assertFalse(node1.isNot());
604:       assertFalse(node1.hasOneChild());
605:       assertFalse(node1.isScript());
606:       assertFalse(node1.isGetProp());
607:       assertFalse(node1.isCast());
608:       assertFalse(node1.isThrow());
609:       assertFalse(node1.isLabelName());
610:       assertFalse(node1.isFalse());
611:       assertEquals((-1), node1.getSourcePosition());
612:       assertFalse(node1.isSwitch());
613:       assertFalse(node1.isContinue());
614:       assertFalse(node1.hasMoreThanOneChild());
615:       assertFalse(node1.isIn());
616:       assertEquals((-1), node1.getCharno());
617:       assertTrue(node1.isString());
618:       assertFalse(node1.isNumber());
619:       assertFalse(node1.isCase());
620:       assertFalse(node1.isInc());
621:       assertFalse(node1.isBlock());
622:       assertFalse(node1.isFor());
623:       assertFalse(node1.isThis());
624:       assertFalse(node1.isHook());
625:       assertFalse(node1.isNE());
626:       assertFalse(node1.isRegExp());
627:       assertFalse(node1.isIf());
628:       assertEquals((-1), node1.getLineno());
629:       assertFalse(node1.isInstanceOf());
630:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
631:       assertEquals(43, Node.IS_CONSTANT_NAME);
632:       assertEquals(36, Node.QUOTED_PROP);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(55, Node.INFERRED_FUNCTION);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(29, Node.JSDOC_INFO_PROP);
637:       assertEquals(53, Node.INPUT_ID);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(56, Node.CHANGE_TIME);
642:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(4095, Node.COLUMN_MASK);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(48, Node.DIRECTIVES);
649:       assertEquals(15, Node.NO_SIDE_EFFECTS);
650:       assertEquals(57, Node.LAST_PROP);
651:       assertEquals(54, Node.SLASH_V);
652:       assertEquals(30, Node.VAR_ARGS_NAME);
653:       assertEquals(52, Node.LENGTH);
654:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
655:       assertEquals(12, Node.COLUMN_BITS);
656:       assertEquals(32, Node.INCRDECR_PROP);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(2, Node.POST_FLAG);
659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
660:       assertEquals(47, Node.IS_DISPATCHER);
661:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
662:       assertEquals(50, Node.FREE_CALL);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(46, Node.IS_NAMESPACE);
666:       assertNotSame(node1, node0);
667:       
668:       // Undeclared exception!
669:       try { 
670:         node1.removeChild(node0);
671:         fail("Expecting exception: NullPointerException");
672:       
673:       } catch(NullPointerException e) {
674:          //
675:          // no message in exception (getMessage() returned null)
676:          //
677:          verifyException("com.google.javascript.rhino.Node", e);
678:       }
679:   }
680: }
RegularFileObject[/tmp/EvoSuite_387_1628157844755/com/google/javascript/rhino/Node_387_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_387_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_387_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.ImmutableEnumSet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_387_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.jstype.EnumType",
330:       "com.google.javascript.rhino.jstype.EnumElementType",
331:       "com.google.common.collect.ImmutableSet",
332:       "com.google.common.collect.EmptyImmutableSet",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
345:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
346:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.Sets$ImprovedAbstractSet",
352:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
353:       "com.google.common.collect.Hashing",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
355:       "com.google.common.collect.Platform",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 10:04:04.879 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

simpleErrorReporter0.error("Object#Element", "N[w~$%j", 45, 257);
simpleErrorReporter0.warning("Object#Element", "Object#Element", 0, 0);
Node node0 = Node.newString(122, "R>X;", 257, (-1550));
assertNotNull(node0);
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertTrue(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(122, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

boolean boolean0 = node0.isCast();
assertFalse(boolean0);
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertTrue(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(122, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

boolean boolean1 = node0.isParamList();
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertTrue(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(122, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertTrue(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(122, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(iterable0.contains(node0));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

boolean boolean2 = node0.isWith();
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertTrue(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(122, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

Node node1 = Node.newString("PJ4!W4p}!-");
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWhile());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node1, node0);

node1.removeChild(node0);

[MASTER] 10:04:23.167 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:23.673 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:23.935 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:24.153 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:24.346 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:24.610 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:24.850 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:25.039 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:25.244 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:25.459 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:25.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:25.822 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:26.000 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:26.185 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:26.392 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:26.624 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:26.824 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:27.123 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:28.609 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:28.834 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:29.040 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:04:29.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/6
* Done!

* Computation finished
