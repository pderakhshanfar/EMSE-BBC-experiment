* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 21019
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1157118591
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:15:11.109 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:15:12.949 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:15:13.539 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z
[MASTER] 10:15:13.575 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V
[MASTER] 10:15:13.575 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V
[MASTER] 10:15:14.647 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true in context: com.google.javascript.rhino.Node:getLastSibling()Lcom/google/javascript/rhino/Node;
[MASTER] 10:15:14.792 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;
[MASTER] 10:15:14.793 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;
[MASTER] 10:18:51.681 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 556 generations, 253063 statements, best individual has fitness: 2925.0
* Minimizing test suite
[MASTER] 10:26:44.106 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 800
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 623
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 110
* Number of covered goals: 110
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 464
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2111
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 583
* Generated 1118 tests with total length 12197
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:28:10.108 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7111333333333333% of time used, but only 77/1118 tests minimized), falling back to using all assertions
[MASTER] 10:28:27.714 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 10:28:43.259 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 10:29:02.261 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_282_1628159342236/com/google/javascript/rhino/Node_282_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_282_1628159342236/com/google/javascript/rhino/Node_282_tmp__ESTest_scaffolding.java]]
[MASTER] 10:29:02.261 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:29:02.261 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:29:02.268 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:29:02.270 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_282_1628159342236/com/google/javascript/rhino/Node_282_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:29:02 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_282_tmp__ESTest extends Node_282_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(101);
21:       assertNotNull(node0);
22:       assertEquals(47, Node.IS_DISPATCHER);
23:       assertEquals(56, Node.CHANGE_TIME);
24:       assertEquals(2, Node.POST_FLAG);
25:       assertEquals(37, Node.OPT_ARG_NAME);
26:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
27:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
28:       assertEquals(30, Node.VAR_ARGS_NAME);
29:       assertEquals(49, Node.DIRECT_EVAL);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(55, Node.INFERRED_FUNCTION);
37:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(40, Node.ORIGINALNAME_PROP);
42:       assertEquals(50, Node.FREE_CALL);
43:       assertEquals(57, Node.REFLECTED_OBJECT);
44:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(1, Node.DECR_FLAG);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(43, Node.IS_CONSTANT_NAME);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isTrue());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isNE());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isVoid());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isCatch());
69:       assertTrue(node0.isAnd());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isCase());
73:       assertFalse(node0.isString());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isStringKey());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.isNull());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isSwitch());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isCall());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isAssignAdd());
87:       assertFalse(node0.isOr());
88:       assertFalse(node0.isDefaultCase());
89:       assertFalse(node0.isDo());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isAssign());
96:       assertFalse(node0.hasChildren());
97:       assertFalse(node0.isTypeOf());
98:       assertFalse(node0.isDec());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isLabelName());
101:       assertEquals((-1), node0.getLineno());
102:       assertFalse(node0.isGetElem());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isObjectLit());
106:       assertFalse(node0.hasMoreThanOneChild());
107:       assertFalse(node0.isNot());
108:       assertFalse(node0.isWhile());
109:       assertFalse(node0.isThis());
110:       assertFalse(node0.isReturn());
111:       assertFalse(node0.isScript());
112:       assertEquals((-1), node0.getSourcePosition());
113:       assertFalse(node0.isNumber());
114:       assertFalse(node0.isGetProp());
115:       assertFalse(node0.isFalse());
116:       assertFalse(node0.isThrow());
117:       assertFalse(node0.isHook());
118:       assertFalse(node0.isBlock());
119:       assertEquals(101, node0.getType());
120:       assertFalse(node0.isIn());
121:       assertFalse(node0.isContinue());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isInc());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertEquals(47, Node.IS_DISPATCHER);
128:       assertEquals(56, Node.CHANGE_TIME);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(39, Node.EMPTY_BLOCK);
139:       assertEquals(36, Node.QUOTED_PROP);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(55, Node.INFERRED_FUNCTION);
142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
143:       assertEquals(29, Node.JSDOC_INFO_PROP);
144:       assertEquals(52, Node.LENGTH);
145:       assertEquals(8, Node.FLAG_NO_THROWS);
146:       assertEquals(40, Node.ORIGINALNAME_PROP);
147:       assertEquals(50, Node.FREE_CALL);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
153:       assertEquals(4095, Node.COLUMN_MASK);
154:       assertEquals(1, Node.DECR_FLAG);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(43, Node.IS_CONSTANT_NAME);
160:       assertEquals(54, Node.SLASH_V);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isTrue());
167:       assertFalse(node0.isRegExp());
168:       assertFalse(node0.isNE());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isIf());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isCatch());
174:       assertTrue(node0.isAnd());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isCase());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isStringKey());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.isNull());
184:       assertFalse(node0.isComma());
185:       assertFalse(node0.isParamList());
186:       assertFalse(node0.isSwitch());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.isCall());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isOr());
193:       assertFalse(node0.isDefaultCase());
194:       assertFalse(node0.isDo());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isEmpty());
197:       assertFalse(node0.isNew());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isAssign());
201:       assertFalse(node0.hasChildren());
202:       assertFalse(node0.isTypeOf());
203:       assertFalse(node0.isDec());
204:       assertFalse(node0.isWith());
205:       assertFalse(node0.isLabelName());
206:       assertEquals((-1), node0.getLineno());
207:       assertFalse(node0.isGetElem());
208:       assertFalse(node0.isExprResult());
209:       assertFalse(node0.isInstanceOf());
210:       assertFalse(node0.isObjectLit());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isNot());
213:       assertFalse(node0.isWhile());
214:       assertFalse(node0.isThis());
215:       assertFalse(node0.isReturn());
216:       assertFalse(node0.isScript());
217:       assertEquals((-1), node0.getSourcePosition());
218:       assertFalse(node0.isNumber());
219:       assertFalse(node0.isGetProp());
220:       assertFalse(node0.isFalse());
221:       assertFalse(node0.isThrow());
222:       assertFalse(node0.isHook());
223:       assertFalse(node0.isBlock());
224:       assertEquals(101, node0.getType());
225:       assertFalse(node0.isIn());
226:       assertFalse(node0.isContinue());
227:       assertFalse(node0.isSetterDef());
228:       assertFalse(node0.isInc());
229:       assertFalse(iterable0.contains(node0));
230:       
231:       boolean boolean0 = node0.isInc();
232:       assertFalse(boolean0);
233:       assertEquals(47, Node.IS_DISPATCHER);
234:       assertEquals(56, Node.CHANGE_TIME);
235:       assertEquals(2, Node.POST_FLAG);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
239:       assertEquals(30, Node.VAR_ARGS_NAME);
240:       assertEquals(49, Node.DIRECT_EVAL);
241:       assertEquals(57, Node.LAST_PROP);
242:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
243:       assertEquals(53, Node.INPUT_ID);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(55, Node.INFERRED_FUNCTION);
248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(52, Node.LENGTH);
251:       assertEquals(8, Node.FLAG_NO_THROWS);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(50, Node.FREE_CALL);
254:       assertEquals(57, Node.REFLECTED_OBJECT);
255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
256:       assertEquals(48, Node.DIRECTIVES);
257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
259:       assertEquals(4095, Node.COLUMN_MASK);
260:       assertEquals(1, Node.DECR_FLAG);
261:       assertEquals(51, Node.STATIC_SOURCE_FILE);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
269:       assertFalse(node0.isArrayLit());
270:       assertFalse(node0.isFor());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isTrue());
273:       assertFalse(node0.isRegExp());
274:       assertFalse(node0.isNE());
275:       assertFalse(node0.isDelProp());
276:       assertFalse(node0.isIf());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isCatch());
280:       assertTrue(node0.isAnd());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isString());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isStringKey());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.isNull());
290:       assertFalse(node0.isComma());
291:       assertFalse(node0.isParamList());
292:       assertFalse(node0.isSwitch());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isCall());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node0.isLabel());
297:       assertFalse(node0.isAssignAdd());
298:       assertFalse(node0.isOr());
299:       assertFalse(node0.isDefaultCase());
300:       assertFalse(node0.isDo());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.isNew());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.hasOneChild());
306:       assertFalse(node0.isAssign());
307:       assertFalse(node0.hasChildren());
308:       assertFalse(node0.isTypeOf());
309:       assertFalse(node0.isDec());
310:       assertFalse(node0.isWith());
311:       assertFalse(node0.isLabelName());
312:       assertEquals((-1), node0.getLineno());
313:       assertFalse(node0.isGetElem());
314:       assertFalse(node0.isExprResult());
315:       assertFalse(node0.isInstanceOf());
316:       assertFalse(node0.isObjectLit());
317:       assertFalse(node0.hasMoreThanOneChild());
318:       assertFalse(node0.isNot());
319:       assertFalse(node0.isWhile());
320:       assertFalse(node0.isThis());
321:       assertFalse(node0.isReturn());
322:       assertFalse(node0.isScript());
323:       assertEquals((-1), node0.getSourcePosition());
324:       assertFalse(node0.isNumber());
325:       assertFalse(node0.isGetProp());
326:       assertFalse(node0.isFalse());
327:       assertFalse(node0.isThrow());
328:       assertFalse(node0.isHook());
329:       assertFalse(node0.isBlock());
330:       assertEquals(101, node0.getType());
331:       assertFalse(node0.isIn());
332:       assertFalse(node0.isContinue());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isInc());
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_282_1628159342236/com/google/javascript/rhino/Node_282_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:29:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_282_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_282_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_282_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.common.collect.Sets$ImprovedAbstractSet",
370:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
371:       "com.google.common.collect.Hashing",
372:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 10:29:02.273 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(101);
assertNotNull(node0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertTrue(node0.isAnd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(101, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertTrue(node0.isAnd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(101, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isInc();
assertFalse(boolean0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertTrue(node0.isAnd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(101, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());


[MASTER] 10:29:05.507 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_312_1628159345322/com/google/javascript/rhino/Node_312_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_312_1628159345322/com/google/javascript/rhino/Node_312_tmp__ESTest_scaffolding.java]]
[MASTER] 10:29:05.507 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:29:05.507 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:29:05.508 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 232
[MASTER] 10:29:05.510 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_312_1628159345322/com/google/javascript/rhino/Node_312_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:29:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.HashSet;
13: import java.util.Set;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_312_tmp__ESTest extends Node_312_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 573, 573);
24:       assertNotNull(node0);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(57, Node.LAST_PROP);
27:       assertEquals(54, Node.SLASH_V);
28:       assertEquals(52, Node.LENGTH);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(1, Node.DECR_FLAG);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(51, Node.STATIC_SOURCE_FILE);
41:       assertEquals(40, Node.ORIGINALNAME_PROP);
42:       assertEquals(46, Node.IS_NAMESPACE);
43:       assertEquals(43, Node.IS_CONSTANT_NAME);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(53, Node.INPUT_ID);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(29, Node.JSDOC_INFO_PROP);
53:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(57, Node.REFLECTED_OBJECT);
58:       assertEquals(37, Node.OPT_ARG_NAME);
59:       assertEquals(48, Node.DIRECTIVES);
60:       assertEquals(49, Node.DIRECT_EVAL);
61:       assertFalse(node0.isCase());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isHook());
65:       assertFalse(node0.isThrow());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isIf());
75:       assertFalse(node0.isNot());
76:       assertEquals(40, node0.getType());
77:       assertFalse(node0.isFunction());
78:       assertFalse(node0.isExprResult());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isCast());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isDo());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isContinue());
89:       assertFalse(node0.isReturn());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isLabel());
94:       assertFalse(node0.isVar());
95:       assertTrue(node0.isString());
96:       assertFalse(node0.isAssignAdd());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isDec());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.hasChildren());
101:       assertFalse(node0.isSetterDef());
102:       assertFalse(node0.isCall());
103:       assertFalse(node0.isTypeOf());
104:       assertFalse(node0.isOr());
105:       assertFalse(node0.isNull());
106:       assertEquals(573, node0.getLineno());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isWith());
109:       assertEquals(2347581, node0.getSourcePosition());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.isRegExp());
112:       assertFalse(node0.isScript());
113:       assertFalse(node0.isInstanceOf());
114:       assertFalse(node0.isTry());
115:       assertEquals(0, node0.getChildCount());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isThis());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isGetterDef());
120:       assertFalse(node0.isLabelName());
121:       assertFalse(node0.isNumber());
122:       assertEquals(573, node0.getCharno());
123:       assertFalse(node0.isArrayLit());
124:       assertFalse(node0.isSwitch());
125:       assertFalse(node0.isParamList());
126:       assertFalse(node0.isStringKey());
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertNotNull(iterable0);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(57, Node.LAST_PROP);
132:       assertEquals(54, Node.SLASH_V);
133:       assertEquals(52, Node.LENGTH);
134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(50, Node.FREE_CALL);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(40, Node.ORIGINALNAME_PROP);
147:       assertEquals(46, Node.IS_NAMESPACE);
148:       assertEquals(43, Node.IS_CONSTANT_NAME);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(55, Node.INFERRED_FUNCTION);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(29, Node.JSDOC_INFO_PROP);
158:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(57, Node.REFLECTED_OBJECT);
163:       assertEquals(37, Node.OPT_ARG_NAME);
164:       assertEquals(48, Node.DIRECTIVES);
165:       assertEquals(49, Node.DIRECT_EVAL);
166:       assertFalse(node0.isCase());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isIn());
169:       assertFalse(node0.isHook());
170:       assertFalse(node0.isThrow());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isEmpty());
174:       assertFalse(node0.isBreak());
175:       assertFalse(node0.isComma());
176:       assertFalse(node0.isTrue());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isVoid());
179:       assertFalse(node0.isIf());
180:       assertFalse(node0.isNot());
181:       assertEquals(40, node0.getType());
182:       assertFalse(node0.isFunction());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isGetProp());
186:       assertFalse(node0.isCast());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isDebugger());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isDo());
192:       assertFalse(node0.hasMoreThanOneChild());
193:       assertFalse(node0.isContinue());
194:       assertFalse(node0.isReturn());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isBlock());
197:       assertFalse(node0.isNew());
198:       assertFalse(node0.isLabel());
199:       assertFalse(node0.isVar());
200:       assertTrue(node0.isString());
201:       assertFalse(node0.isAssignAdd());
202:       assertFalse(node0.isAssign());
203:       assertFalse(node0.isDec());
204:       assertFalse(node0.isGetElem());
205:       assertFalse(node0.hasChildren());
206:       assertFalse(node0.isSetterDef());
207:       assertFalse(node0.isCall());
208:       assertFalse(node0.isTypeOf());
209:       assertFalse(node0.isOr());
210:       assertFalse(node0.isNull());
211:       assertEquals(573, node0.getLineno());
212:       assertFalse(node0.isName());
213:       assertFalse(node0.isWith());
214:       assertEquals(2347581, node0.getSourcePosition());
215:       assertFalse(node0.isCatch());
216:       assertFalse(node0.isRegExp());
217:       assertFalse(node0.isScript());
218:       assertFalse(node0.isInstanceOf());
219:       assertFalse(node0.isTry());
220:       assertEquals(0, node0.getChildCount());
221:       assertFalse(node0.hasOneChild());
222:       assertFalse(node0.isThis());
223:       assertFalse(node0.isDefaultCase());
224:       assertFalse(node0.isGetterDef());
225:       assertFalse(node0.isLabelName());
226:       assertFalse(node0.isNumber());
227:       assertEquals(573, node0.getCharno());
228:       assertFalse(node0.isArrayLit());
229:       assertFalse(node0.isSwitch());
230:       assertFalse(node0.isParamList());
231:       assertFalse(node0.isStringKey());
232:       assertFalse(iterable0.contains(node0));
233:       
234:       boolean boolean0 = node0.isSyntheticBlock();
235:       assertFalse(boolean0);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(54, Node.SLASH_V);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(32, Node.INCRDECR_PROP);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
248:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(43, Node.IS_CONSTANT_NAME);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(56, Node.CHANGE_TIME);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(57, Node.REFLECTED_OBJECT);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertEquals(48, Node.DIRECTIVES);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertFalse(node0.isCase());
273:       assertFalse(node0.isInc());
274:       assertFalse(node0.isIn());
275:       assertFalse(node0.isHook());
276:       assertFalse(node0.isThrow());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isFor());
279:       assertFalse(node0.isEmpty());
280:       assertFalse(node0.isBreak());
281:       assertFalse(node0.isComma());
282:       assertFalse(node0.isTrue());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isVoid());
285:       assertFalse(node0.isIf());
286:       assertFalse(node0.isNot());
287:       assertEquals(40, node0.getType());
288:       assertFalse(node0.isFunction());
289:       assertFalse(node0.isExprResult());
290:       assertFalse(node0.isObjectLit());
291:       assertFalse(node0.isGetProp());
292:       assertFalse(node0.isCast());
293:       assertFalse(node0.isFalse());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isDo());
298:       assertFalse(node0.hasMoreThanOneChild());
299:       assertFalse(node0.isContinue());
300:       assertFalse(node0.isReturn());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isBlock());
303:       assertFalse(node0.isNew());
304:       assertFalse(node0.isLabel());
305:       assertFalse(node0.isVar());
306:       assertTrue(node0.isString());
307:       assertFalse(node0.isAssignAdd());
308:       assertFalse(node0.isAssign());
309:       assertFalse(node0.isDec());
310:       assertFalse(node0.isGetElem());
311:       assertFalse(node0.hasChildren());
312:       assertFalse(node0.isSetterDef());
313:       assertFalse(node0.isCall());
314:       assertFalse(node0.isTypeOf());
315:       assertFalse(node0.isOr());
316:       assertFalse(node0.isNull());
317:       assertEquals(573, node0.getLineno());
318:       assertFalse(node0.isName());
319:       assertFalse(node0.isWith());
320:       assertEquals(2347581, node0.getSourcePosition());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isRegExp());
323:       assertFalse(node0.isScript());
324:       assertFalse(node0.isInstanceOf());
325:       assertFalse(node0.isTry());
326:       assertEquals(0, node0.getChildCount());
327:       assertFalse(node0.hasOneChild());
328:       assertFalse(node0.isThis());
329:       assertFalse(node0.isDefaultCase());
330:       assertFalse(node0.isGetterDef());
331:       assertFalse(node0.isLabelName());
332:       assertFalse(node0.isNumber());
333:       assertEquals(573, node0.getCharno());
334:       assertFalse(node0.isArrayLit());
335:       assertFalse(node0.isSwitch());
336:       assertFalse(node0.isParamList());
337:       assertFalse(node0.isStringKey());
338:       
339:       Set<String> set0 = new HashSet<String>();
340:       assertNotNull(set0);
341:       assertTrue(set0.isEmpty());
342:       assertEquals(0, set0.size());
343:       assertFalse(set0.contains("setIsNoSideEffectsCall only supports CALL and NEW nodes, got "));
344:       
345:       String string0 = node0.getSourceFileName();
346:       assertNull(string0);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(30, Node.VAR_ARGS_NAME);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(32, Node.INCRDECR_PROP);
355:       assertEquals(1, Node.DECR_FLAG);
356:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
360:       assertEquals(2, Node.POST_FLAG);
361:       assertEquals(50, Node.FREE_CALL);
362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
363:       assertEquals(40, Node.ORIGINALNAME_PROP);
364:       assertEquals(46, Node.IS_NAMESPACE);
365:       assertEquals(43, Node.IS_CONSTANT_NAME);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(53, Node.INPUT_ID);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(39, Node.EMPTY_BLOCK);
374:       assertEquals(29, Node.JSDOC_INFO_PROP);
375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
378:       assertEquals(4095, Node.COLUMN_MASK);
379:       assertEquals(57, Node.REFLECTED_OBJECT);
380:       assertEquals(37, Node.OPT_ARG_NAME);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(49, Node.DIRECT_EVAL);
383:       assertFalse(node0.isCase());
384:       assertFalse(node0.isInc());
385:       assertFalse(node0.isIn());
386:       assertFalse(node0.isHook());
387:       assertFalse(node0.isThrow());
388:       assertFalse(node0.isDelProp());
389:       assertFalse(node0.isFor());
390:       assertFalse(node0.isEmpty());
391:       assertFalse(node0.isBreak());
392:       assertFalse(node0.isComma());
393:       assertFalse(node0.isTrue());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isVoid());
396:       assertFalse(node0.isIf());
397:       assertFalse(node0.isNot());
398:       assertEquals(40, node0.getType());
399:       assertFalse(node0.isFunction());
400:       assertFalse(node0.isExprResult());
401:       assertFalse(node0.isObjectLit());
402:       assertFalse(node0.isGetProp());
403:       assertFalse(node0.isCast());
404:       assertFalse(node0.isFalse());
405:       assertFalse(node0.isDebugger());
406:       assertFalse(node0.isAnd());
407:       assertFalse(node0.isWhile());
408:       assertFalse(node0.isDo());
409:       assertFalse(node0.hasMoreThanOneChild());
410:       assertFalse(node0.isContinue());
411:       assertFalse(node0.isReturn());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isBlock());
414:       assertFalse(node0.isNew());
415:       assertFalse(node0.isLabel());
416:       assertFalse(node0.isVar());
417:       assertTrue(node0.isString());
418:       assertFalse(node0.isAssignAdd());
419:       assertFalse(node0.isAssign());
420:       assertFalse(node0.isDec());
421:       assertFalse(node0.isGetElem());
422:       assertFalse(node0.hasChildren());
423:       assertFalse(node0.isSetterDef());
424:       assertFalse(node0.isCall());
425:       assertFalse(node0.isTypeOf());
426:       assertFalse(node0.isOr());
427:       assertFalse(node0.isNull());
428:       assertEquals(573, node0.getLineno());
429:       assertFalse(node0.isName());
430:       assertFalse(node0.isWith());
431:       assertEquals(2347581, node0.getSourcePosition());
432:       assertFalse(node0.isCatch());
433:       assertFalse(node0.isRegExp());
434:       assertFalse(node0.isScript());
435:       assertFalse(node0.isInstanceOf());
436:       assertFalse(node0.isTry());
437:       assertEquals(0, node0.getChildCount());
438:       assertFalse(node0.hasOneChild());
439:       assertFalse(node0.isThis());
440:       assertFalse(node0.isDefaultCase());
441:       assertFalse(node0.isGetterDef());
442:       assertFalse(node0.isLabelName());
443:       assertFalse(node0.isNumber());
444:       assertEquals(573, node0.getCharno());
445:       assertFalse(node0.isArrayLit());
446:       assertFalse(node0.isSwitch());
447:       assertFalse(node0.isParamList());
448:       assertFalse(node0.isStringKey());
449:       
450:       int int0 = node0.getType();
451:       assertEquals(40, int0);
452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
453:       assertEquals(57, Node.LAST_PROP);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(52, Node.LENGTH);
456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(12, Node.COLUMN_BITS);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(1, Node.DECR_FLAG);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(47, Node.IS_DISPATCHER);
463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
464:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(50, Node.FREE_CALL);
467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
468:       assertEquals(40, Node.ORIGINALNAME_PROP);
469:       assertEquals(46, Node.IS_NAMESPACE);
470:       assertEquals(43, Node.IS_CONSTANT_NAME);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
474:       assertEquals(55, Node.INFERRED_FUNCTION);
475:       assertEquals(53, Node.INPUT_ID);
476:       assertEquals(56, Node.CHANGE_TIME);
477:       assertEquals(8, Node.FLAG_NO_THROWS);
478:       assertEquals(39, Node.EMPTY_BLOCK);
479:       assertEquals(29, Node.JSDOC_INFO_PROP);
480:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
481:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
482:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
483:       assertEquals(4095, Node.COLUMN_MASK);
484:       assertEquals(57, Node.REFLECTED_OBJECT);
485:       assertEquals(37, Node.OPT_ARG_NAME);
486:       assertEquals(48, Node.DIRECTIVES);
487:       assertEquals(49, Node.DIRECT_EVAL);
488:       assertFalse(node0.isCase());
489:       assertFalse(node0.isInc());
490:       assertFalse(node0.isIn());
491:       assertFalse(node0.isHook());
492:       assertFalse(node0.isThrow());
493:       assertFalse(node0.isDelProp());
494:       assertFalse(node0.isFor());
495:       assertFalse(node0.isEmpty());
496:       assertFalse(node0.isBreak());
497:       assertFalse(node0.isComma());
498:       assertFalse(node0.isTrue());
499:       assertFalse(node0.isNE());
500:       assertFalse(node0.isVoid());
501:       assertFalse(node0.isIf());
502:       assertFalse(node0.isNot());
503:       assertEquals(40, node0.getType());
504:       assertFalse(node0.isFunction());
505:       assertFalse(node0.isExprResult());
506:       assertFalse(node0.isObjectLit());
507:       assertFalse(node0.isGetProp());
508:       assertFalse(node0.isCast());
509:       assertFalse(node0.isFalse());
510:       assertFalse(node0.isDebugger());
511:       assertFalse(node0.isAnd());
512:       assertFalse(node0.isWhile());
513:       assertFalse(node0.isDo());
514:       assertFalse(node0.hasMoreThanOneChild());
515:       assertFalse(node0.isContinue());
516:       assertFalse(node0.isReturn());
517:       assertFalse(node0.isAdd());
518:       assertFalse(node0.isBlock());
519:       assertFalse(node0.isNew());
520:       assertFalse(node0.isLabel());
521:       assertFalse(node0.isVar());
522:       assertTrue(node0.isString());
523:       assertFalse(node0.isAssignAdd());
524:       assertFalse(node0.isAssign());
525:       assertFalse(node0.isDec());
526:       assertFalse(node0.isGetElem());
527:       assertFalse(node0.hasChildren());
528:       assertFalse(node0.isSetterDef());
529:       assertFalse(node0.isCall());
530:       assertFalse(node0.isTypeOf());
531:       assertFalse(node0.isOr());
532:       assertFalse(node0.isNull());
533:       assertEquals(573, node0.getLineno());
534:       assertFalse(node0.isName());
535:       assertFalse(node0.isWith());
536:       assertEquals(2347581, node0.getSourcePosition());
537:       assertFalse(node0.isCatch());
538:       assertFalse(node0.isRegExp());
539:       assertFalse(node0.isScript());
540:       assertFalse(node0.isInstanceOf());
541:       assertFalse(node0.isTry());
542:       assertEquals(0, node0.getChildCount());
543:       assertFalse(node0.hasOneChild());
544:       assertFalse(node0.isThis());
545:       assertFalse(node0.isDefaultCase());
546:       assertFalse(node0.isGetterDef());
547:       assertFalse(node0.isLabelName());
548:       assertFalse(node0.isNumber());
549:       assertEquals(573, node0.getCharno());
550:       assertFalse(node0.isArrayLit());
551:       assertFalse(node0.isSwitch());
552:       assertFalse(node0.isParamList());
553:       assertFalse(node0.isStringKey());
554:       
555:       Node node1 = new Node(52, node0, 43, 50);
556:       assertFalse(node1.equals((Object)node0));
557:       assertNotNull(node1);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(57, Node.LAST_PROP);
560:       assertEquals(54, Node.SLASH_V);
561:       assertEquals(52, Node.LENGTH);
562:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
563:       assertEquals(30, Node.VAR_ARGS_NAME);
564:       assertEquals(12, Node.COLUMN_BITS);
565:       assertEquals(32, Node.INCRDECR_PROP);
566:       assertEquals(1, Node.DECR_FLAG);
567:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
568:       assertEquals(47, Node.IS_DISPATCHER);
569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
570:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
571:       assertEquals(2, Node.POST_FLAG);
572:       assertEquals(50, Node.FREE_CALL);
573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
574:       assertEquals(40, Node.ORIGINALNAME_PROP);
575:       assertEquals(46, Node.IS_NAMESPACE);
576:       assertEquals(43, Node.IS_CONSTANT_NAME);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
580:       assertEquals(55, Node.INFERRED_FUNCTION);
581:       assertEquals(53, Node.INPUT_ID);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(8, Node.FLAG_NO_THROWS);
584:       assertEquals(39, Node.EMPTY_BLOCK);
585:       assertEquals(29, Node.JSDOC_INFO_PROP);
586:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
589:       assertEquals(4095, Node.COLUMN_MASK);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(37, Node.OPT_ARG_NAME);
592:       assertEquals(48, Node.DIRECTIVES);
593:       assertEquals(49, Node.DIRECT_EVAL);
594:       assertEquals(8, Node.FLAG_NO_THROWS);
595:       assertEquals(39, Node.EMPTY_BLOCK);
596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
598:       assertEquals(48, Node.DIRECTIVES);
599:       assertEquals(4095, Node.COLUMN_MASK);
600:       assertEquals(40, Node.ORIGINALNAME_PROP);
601:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
602:       assertEquals(15, Node.NO_SIDE_EFFECTS);
603:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
604:       assertEquals(57, Node.LAST_PROP);
605:       assertEquals(49, Node.DIRECT_EVAL);
606:       assertEquals(53, Node.INPUT_ID);
607:       assertEquals(55, Node.INFERRED_FUNCTION);
608:       assertEquals(57, Node.REFLECTED_OBJECT);
609:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
610:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
611:       assertEquals(52, Node.LENGTH);
612:       assertEquals(36, Node.QUOTED_PROP);
613:       assertEquals(2, Node.POST_FLAG);
614:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
615:       assertEquals(56, Node.CHANGE_TIME);
616:       assertEquals(29, Node.JSDOC_INFO_PROP);
617:       assertEquals(32, Node.INCRDECR_PROP);
618:       assertEquals(37, Node.OPT_ARG_NAME);
619:       assertEquals(12, Node.COLUMN_BITS);
620:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
621:       assertEquals(30, Node.VAR_ARGS_NAME);
622:       assertEquals(47, Node.IS_DISPATCHER);
623:       assertEquals(54, Node.SLASH_V);
624:       assertEquals(43, Node.IS_CONSTANT_NAME);
625:       assertEquals(1, Node.DECR_FLAG);
626:       assertEquals(46, Node.IS_NAMESPACE);
627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
628:       assertEquals(50, Node.FREE_CALL);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertFalse(node0.isCase());
631:       assertFalse(node0.isInc());
632:       assertFalse(node0.isIn());
633:       assertFalse(node0.isHook());
634:       assertFalse(node0.isThrow());
635:       assertFalse(node0.isDelProp());
636:       assertFalse(node0.isFor());
637:       assertFalse(node0.isEmpty());
638:       assertFalse(node0.isBreak());
639:       assertFalse(node0.isComma());
640:       assertFalse(node0.isTrue());
641:       assertFalse(node0.isNE());
642:       assertFalse(node0.isVoid());
643:       assertFalse(node0.isIf());
644:       assertFalse(node0.isNot());
645:       assertEquals(40, node0.getType());
646:       assertFalse(node0.isFunction());
647:       assertFalse(node0.isExprResult());
648:       assertFalse(node0.isObjectLit());
649:       assertFalse(node0.isGetProp());
650:       assertFalse(node0.isCast());
651:       assertFalse(node0.isFalse());
652:       assertFalse(node0.isDebugger());
653:       assertFalse(node0.isAnd());
654:       assertFalse(node0.isWhile());
655:       assertFalse(node0.isDo());
656:       assertFalse(node0.hasMoreThanOneChild());
657:       assertFalse(node0.isContinue());
658:       assertFalse(node0.isReturn());
659:       assertFalse(node0.isAdd());
660:       assertFalse(node0.isBlock());
661:       assertFalse(node0.isNew());
662:       assertFalse(node0.isLabel());
663:       assertFalse(node0.isVar());
664:       assertTrue(node0.isString());
665:       assertFalse(node0.isAssignAdd());
666:       assertFalse(node0.isAssign());
667:       assertFalse(node0.isDec());
668:       assertFalse(node0.isGetElem());
669:       assertFalse(node0.hasChildren());
670:       assertFalse(node0.isSetterDef());
671:       assertFalse(node0.isCall());
672:       assertFalse(node0.isTypeOf());
673:       assertFalse(node0.isOr());
674:       assertFalse(node0.isNull());
675:       assertEquals(573, node0.getLineno());
676:       assertFalse(node0.isName());
677:       assertFalse(node0.isWith());
678:       assertEquals(2347581, node0.getSourcePosition());
679:       assertFalse(node0.isCatch());
680:       assertFalse(node0.isRegExp());
681:       assertFalse(node0.isScript());
682:       assertFalse(node0.isInstanceOf());
683:       assertFalse(node0.isTry());
684:       assertEquals(0, node0.getChildCount());
685:       assertFalse(node0.hasOneChild());
686:       assertFalse(node0.isThis());
687:       assertFalse(node0.isDefaultCase());
688:       assertFalse(node0.isGetterDef());
689:       assertFalse(node0.isLabelName());
690:       assertFalse(node0.isNumber());
691:       assertEquals(573, node0.getCharno());
692:       assertFalse(node0.isArrayLit());
693:       assertFalse(node0.isSwitch());
694:       assertFalse(node0.isParamList());
695:       assertFalse(node0.isStringKey());
696:       assertFalse(node1.isNull());
697:       assertFalse(node1.isSetterDef());
698:       assertFalse(node1.isParamList());
699:       assertFalse(node1.isStringKey());
700:       assertFalse(node1.isName());
701:       assertFalse(node1.isBlock());
702:       assertFalse(node1.isVar());
703:       assertFalse(node1.isCall());
704:       assertFalse(node1.isCatch());
705:       assertFalse(node1.isWhile());
706:       assertFalse(node1.isTry());
707:       assertFalse(node1.isDebugger());
708:       assertFalse(node1.isNumber());
709:       assertFalse(node1.isDelProp());
710:       assertFalse(node1.isGetterDef());
711:       assertFalse(node1.isDec());
712:       assertFalse(node1.isAssign());
713:       assertFalse(node1.isLabelName());
714:       assertFalse(node1.isEmpty());
715:       assertFalse(node1.isGetElem());
716:       assertTrue(node1.hasOneChild());
717:       assertFalse(node1.isAssignAdd());
718:       assertFalse(node1.isArrayLit());
719:       assertFalse(node1.isLabel());
720:       assertFalse(node1.isReturn());
721:       assertFalse(node1.isExprResult());
722:       assertFalse(node1.isTypeOf());
723:       assertFalse(node1.isDo());
724:       assertFalse(node1.isVoid());
725:       assertFalse(node1.isTrue());
726:       assertTrue(node1.isInstanceOf());
727:       assertFalse(node1.isDefaultCase());
728:       assertFalse(node1.isOr());
729:       assertFalse(node1.isNew());
730:       assertFalse(node1.isAdd());
731:       assertFalse(node1.isBreak());
732:       assertFalse(node1.isThis());
733:       assertFalse(node1.isThrow());
734:       assertEquals(43, node1.getLineno());
735:       assertFalse(node1.isHook());
736:       assertFalse(node1.isComma());
737:       assertFalse(node1.isWith());
738:       assertFalse(node1.isFalse());
739:       assertFalse(node1.isString());
740:       assertFalse(node1.isNot());
741:       assertFalse(node1.isCase());
742:       assertFalse(node1.isScript());
743:       assertFalse(node1.isAnd());
744:       assertFalse(node1.isSwitch());
745:       assertFalse(node1.isGetProp());
746:       assertFalse(node1.isObjectLit());
747:       assertEquals(176178, node1.getSourcePosition());
748:       assertEquals(50, node1.getCharno());
749:       assertFalse(node1.isFor());
750:       assertFalse(node1.isNE());
751:       assertFalse(node1.isIf());
752:       assertEquals(1, node1.getChildCount());
753:       assertTrue(node1.hasChildren());
754:       assertFalse(node1.isFunction());
755:       assertFalse(node1.isContinue());
756:       assertFalse(node1.isCast());
757:       assertFalse(node1.isRegExp());
758:       assertFalse(node1.hasMoreThanOneChild());
759:       assertFalse(node1.isInc());
760:       assertEquals(52, node1.getType());
761:       assertFalse(node1.isIn());
762:       
763:       Node node2 = Node.newNumber((double) 49, (-536870912), 11);
764:       assertFalse(node2.equals((Object)node1));
765:       assertFalse(node2.equals((Object)node0));
766:       assertNotNull(node2);
767:       assertEquals(29, Node.JSDOC_INFO_PROP);
768:       assertEquals(53, Node.INPUT_ID);
769:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
770:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
771:       assertEquals(47, Node.IS_DISPATCHER);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(32, Node.INCRDECR_PROP);
775:       assertEquals(46, Node.IS_NAMESPACE);
776:       assertEquals(51, Node.STATIC_SOURCE_FILE);
777:       assertEquals(54, Node.SLASH_V);
778:       assertEquals(43, Node.IS_CONSTANT_NAME);
779:       assertEquals(57, Node.REFLECTED_OBJECT);
780:       assertEquals(40, Node.ORIGINALNAME_PROP);
781:       assertEquals(50, Node.FREE_CALL);
782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
783:       assertEquals(52, Node.LENGTH);
784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
785:       assertEquals(57, Node.LAST_PROP);
786:       assertEquals(30, Node.VAR_ARGS_NAME);
787:       assertEquals(39, Node.EMPTY_BLOCK);
788:       assertEquals(1, Node.DECR_FLAG);
789:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
791:       assertEquals(12, Node.COLUMN_BITS);
792:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
793:       assertEquals(55, Node.INFERRED_FUNCTION);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(4095, Node.COLUMN_MASK);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
798:       assertEquals(49, Node.DIRECT_EVAL);
799:       assertEquals(37, Node.OPT_ARG_NAME);
800:       assertEquals(36, Node.QUOTED_PROP);
801:       assertEquals(48, Node.DIRECTIVES);
802:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
803:       assertFalse(node2.isCast());
804:       assertFalse(node2.isScript());
805:       assertFalse(node2.hasOneChild());
806:       assertFalse(node2.isGetElem());
807:       assertFalse(node2.isExprResult());
808:       assertFalse(node2.isAssign());
809:       assertFalse(node2.isWith());
810:       assertFalse(node2.isTypeOf());
811:       assertFalse(node2.isDec());
812:       assertFalse(node2.hasChildren());
813:       assertFalse(node2.isAssignAdd());
814:       assertFalse(node2.isOr());
815:       assertEquals((-1), node2.getLineno());
816:       assertFalse(node2.isInstanceOf());
817:       assertFalse(node2.isBreak());
818:       assertFalse(node2.isAdd());
819:       assertFalse(node2.isNew());
820:       assertEquals(39, node2.getType());
821:       assertFalse(node2.isDo());
822:       assertFalse(node2.isCase());
823:       assertFalse(node2.hasMoreThanOneChild());
824:       assertFalse(node2.isVar());
825:       assertFalse(node2.isHook());
826:       assertFalse(node2.isThis());
827:       assertFalse(node2.isBlock());
828:       assertFalse(node2.isLabel());
829:       assertEquals(0, node2.getChildCount());
830:       assertFalse(node2.isLabelName());
831:       assertFalse(node2.isStringKey());
832:       assertFalse(node2.isGetterDef());
833:       assertFalse(node2.isSwitch());
834:       assertFalse(node2.isParamList());
835:       assertEquals((-1), node2.getCharno());
836:       assertFalse(node2.isTry());
837:       assertFalse(node2.isVoid());
838:       assertFalse(node2.isFunction());
839:       assertFalse(node2.isArrayLit());
840:       assertFalse(node2.isFor());
841:       assertFalse(node2.isDefaultCase());
842:       assertFalse(node2.isRegExp());
843:       assertFalse(node2.isIn());
844:       assertFalse(node2.isCatch());
845:       assertFalse(node2.isSetterDef());
846:       assertFalse(node2.isEmpty());
847:       assertFalse(node2.isDelProp());
848:       assertFalse(node2.isIf());
849:       assertFalse(node2.isName());
850:       assertFalse(node2.isNE());
851:       assertFalse(node2.isNull());
852:       assertFalse(node2.isTrue());
853:       assertFalse(node2.isInc());
854:       assertFalse(node2.isCall());
855:       assertFalse(node2.isWhile());
856:       assertFalse(node2.isContinue());
857:       assertFalse(node2.isFalse());
858:       assertFalse(node2.isComma());
859:       assertFalse(node2.isThrow());
860:       assertFalse(node2.isReturn());
861:       assertTrue(node2.isNumber());
862:       assertFalse(node2.isGetProp());
863:       assertFalse(node2.isNot());
864:       assertFalse(node2.isString());
865:       assertFalse(node2.isAnd());
866:       assertFalse(node2.isObjectLit());
867:       assertEquals((-1), node2.getSourcePosition());
868:       assertFalse(node2.isDebugger());
869:       
870:       boolean boolean1 = node0.isLocalResultCall();
871:       assertFalse(node0.equals((Object)node2));
872:       assertFalse(node0.equals((Object)node1));
873:       assertTrue(boolean1 == boolean0);
874:       assertFalse(boolean1);
875:       assertEquals(15, Node.NO_SIDE_EFFECTS);
876:       assertEquals(57, Node.LAST_PROP);
877:       assertEquals(54, Node.SLASH_V);
878:       assertEquals(52, Node.LENGTH);
879:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
880:       assertEquals(30, Node.VAR_ARGS_NAME);
881:       assertEquals(12, Node.COLUMN_BITS);
882:       assertEquals(32, Node.INCRDECR_PROP);
883:       assertEquals(1, Node.DECR_FLAG);
884:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
888:       assertEquals(2, Node.POST_FLAG);
889:       assertEquals(50, Node.FREE_CALL);
890:       assertEquals(51, Node.STATIC_SOURCE_FILE);
891:       assertEquals(40, Node.ORIGINALNAME_PROP);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(43, Node.IS_CONSTANT_NAME);
894:       assertEquals(36, Node.QUOTED_PROP);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
897:       assertEquals(55, Node.INFERRED_FUNCTION);
898:       assertEquals(53, Node.INPUT_ID);
899:       assertEquals(56, Node.CHANGE_TIME);
900:       assertEquals(8, Node.FLAG_NO_THROWS);
901:       assertEquals(39, Node.EMPTY_BLOCK);
902:       assertEquals(29, Node.JSDOC_INFO_PROP);
903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
904:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
906:       assertEquals(4095, Node.COLUMN_MASK);
907:       assertEquals(57, Node.REFLECTED_OBJECT);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(48, Node.DIRECTIVES);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertFalse(node0.isCase());
912:       assertFalse(node0.isInc());
913:       assertFalse(node0.isIn());
914:       assertFalse(node0.isHook());
915:       assertFalse(node0.isThrow());
916:       assertFalse(node0.isDelProp());
917:       assertFalse(node0.isFor());
918:       assertFalse(node0.isEmpty());
919:       assertFalse(node0.isBreak());
920:       assertFalse(node0.isComma());
921:       assertFalse(node0.isTrue());
922:       assertFalse(node0.isNE());
923:       assertFalse(node0.isVoid());
924:       assertFalse(node0.isIf());
925:       assertFalse(node0.isNot());
926:       assertEquals(40, node0.getType());
927:       assertFalse(node0.isFunction());
928:       assertFalse(node0.isExprResult());
929:       assertFalse(node0.isObjectLit());
930:       assertFalse(node0.isGetProp());
931:       assertFalse(node0.isCast());
932:       assertFalse(node0.isFalse());
933:       assertFalse(node0.isDebugger());
934:       assertFalse(node0.isAnd());
935:       assertFalse(node0.isWhile());
936:       assertFalse(node0.isDo());
937:       assertFalse(node0.hasMoreThanOneChild());
938:       assertFalse(node0.isContinue());
939:       assertFalse(node0.isReturn());
940:       assertFalse(node0.isAdd());
941:       assertFalse(node0.isBlock());
942:       assertFalse(node0.isNew());
943:       assertFalse(node0.isLabel());
944:       assertFalse(node0.isVar());
945:       assertTrue(node0.isString());
946:       assertFalse(node0.isAssignAdd());
947:       assertFalse(node0.isAssign());
948:       assertFalse(node0.isDec());
949:       assertFalse(node0.isGetElem());
950:       assertFalse(node0.hasChildren());
951:       assertFalse(node0.isSetterDef());
952:       assertFalse(node0.isCall());
953:       assertFalse(node0.isTypeOf());
954:       assertFalse(node0.isOr());
955:       assertFalse(node0.isNull());
956:       assertEquals(573, node0.getLineno());
957:       assertFalse(node0.isName());
958:       assertFalse(node0.isWith());
959:       assertEquals(2347581, node0.getSourcePosition());
960:       assertFalse(node0.isCatch());
961:       assertFalse(node0.isRegExp());
962:       assertFalse(node0.isScript());
963:       assertFalse(node0.isInstanceOf());
964:       assertFalse(node0.isTry());
965:       assertEquals(0, node0.getChildCount());
966:       assertFalse(node0.hasOneChild());
967:       assertFalse(node0.isThis());
968:       assertFalse(node0.isDefaultCase());
969:       assertFalse(node0.isGetterDef());
970:       assertFalse(node0.isLabelName());
971:       assertFalse(node0.isNumber());
972:       assertEquals(573, node0.getCharno());
973:       assertFalse(node0.isArrayLit());
974:       assertFalse(node0.isSwitch());
975:       assertFalse(node0.isParamList());
976:       assertFalse(node0.isStringKey());
977:       
978:       boolean boolean2 = node2.isDec();
979:       assertFalse(node2.equals((Object)node1));
980:       assertFalse(node2.equals((Object)node0));
981:       assertTrue(boolean2 == boolean0);
982:       assertTrue(boolean2 == boolean1);
983:       assertFalse(boolean2);
984:       assertEquals(29, Node.JSDOC_INFO_PROP);
985:       assertEquals(53, Node.INPUT_ID);
986:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
987:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
988:       assertEquals(47, Node.IS_DISPATCHER);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
991:       assertEquals(32, Node.INCRDECR_PROP);
992:       assertEquals(46, Node.IS_NAMESPACE);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(54, Node.SLASH_V);
995:       assertEquals(43, Node.IS_CONSTANT_NAME);
996:       assertEquals(57, Node.REFLECTED_OBJECT);
997:       assertEquals(40, Node.ORIGINALNAME_PROP);
998:       assertEquals(50, Node.FREE_CALL);
999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1000:       assertEquals(52, Node.LENGTH);
1001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1002:       assertEquals(57, Node.LAST_PROP);
1003:       assertEquals(30, Node.VAR_ARGS_NAME);
1004:       assertEquals(39, Node.EMPTY_BLOCK);
1005:       assertEquals(1, Node.DECR_FLAG);
1006:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1007:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1008:       assertEquals(12, Node.COLUMN_BITS);
1009:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1010:       assertEquals(55, Node.INFERRED_FUNCTION);
1011:       assertEquals(8, Node.FLAG_NO_THROWS);
1012:       assertEquals(4095, Node.COLUMN_MASK);
1013:       assertEquals(56, Node.CHANGE_TIME);
1014:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1015:       assertEquals(49, Node.DIRECT_EVAL);
1016:       assertEquals(37, Node.OPT_ARG_NAME);
1017:       assertEquals(36, Node.QUOTED_PROP);
1018:       assertEquals(48, Node.DIRECTIVES);
1019:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1020:       assertFalse(node2.isCast());
1021:       assertFalse(node2.isScript());
1022:       assertFalse(node2.hasOneChild());
1023:       assertFalse(node2.isGetElem());
1024:       assertFalse(node2.isExprResult());
1025:       assertFalse(node2.isAssign());
1026:       assertFalse(node2.isWith());
1027:       assertFalse(node2.isTypeOf());
1028:       assertFalse(node2.isDec());
1029:       assertFalse(node2.hasChildren());
1030:       assertFalse(node2.isAssignAdd());
1031:       assertFalse(node2.isOr());
1032:       assertEquals((-1), node2.getLineno());
1033:       assertFalse(node2.isInstanceOf());
1034:       assertFalse(node2.isBreak());
1035:       assertFalse(node2.isAdd());
1036:       assertFalse(node2.isNew());
1037:       assertEquals(39, node2.getType());
1038:       assertFalse(node2.isDo());
1039:       assertFalse(node2.isCase());
1040:       assertFalse(node2.hasMoreThanOneChild());
1041:       assertFalse(node2.isVar());
1042:       assertFalse(node2.isHook());
1043:       assertFalse(node2.isThis());
1044:       assertFalse(node2.isBlock());
1045:       assertFalse(node2.isLabel());
1046:       assertEquals(0, node2.getChildCount());
1047:       assertFalse(node2.isLabelName());
1048:       assertFalse(node2.isStringKey());
1049:       assertFalse(node2.isGetterDef());
1050:       assertFalse(node2.isSwitch());
1051:       assertFalse(node2.isParamList());
1052:       assertEquals((-1), node2.getCharno());
1053:       assertFalse(node2.isTry());
1054:       assertFalse(node2.isVoid());
1055:       assertFalse(node2.isFunction());
1056:       assertFalse(node2.isArrayLit());
1057:       assertFalse(node2.isFor());
1058:       assertFalse(node2.isDefaultCase());
1059:       assertFalse(node2.isRegExp());
1060:       assertFalse(node2.isIn());
1061:       assertFalse(node2.isCatch());
1062:       assertFalse(node2.isSetterDef());
1063:       assertFalse(node2.isEmpty());
1064:       assertFalse(node2.isDelProp());
1065:       assertFalse(node2.isIf());
1066:       assertFalse(node2.isName());
1067:       assertFalse(node2.isNE());
1068:       assertFalse(node2.isNull());
1069:       assertFalse(node2.isTrue());
1070:       assertFalse(node2.isInc());
1071:       assertFalse(node2.isCall());
1072:       assertFalse(node2.isWhile());
1073:       assertFalse(node2.isContinue());
1074:       assertFalse(node2.isFalse());
1075:       assertFalse(node2.isComma());
1076:       assertFalse(node2.isThrow());
1077:       assertFalse(node2.isReturn());
1078:       assertTrue(node2.isNumber());
1079:       assertFalse(node2.isGetProp());
1080:       assertFalse(node2.isNot());
1081:       assertFalse(node2.isString());
1082:       assertFalse(node2.isAnd());
1083:       assertFalse(node2.isObjectLit());
1084:       assertEquals((-1), node2.getSourcePosition());
1085:       assertFalse(node2.isDebugger());
1086:       
1087:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
1088:       assertFalse(node0.equals((Object)node2));
1089:       assertFalse(node0.equals((Object)node1));
1090:       assertFalse(node1.equals((Object)node2));
1091:       assertFalse(node1.equals((Object)node0));
1092:       assertNotNull(node_NodeMismatch0);
1093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1094:       assertEquals(57, Node.LAST_PROP);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(52, Node.LENGTH);
1097:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1098:       assertEquals(30, Node.VAR_ARGS_NAME);
1099:       assertEquals(12, Node.COLUMN_BITS);
1100:       assertEquals(32, Node.INCRDECR_PROP);
1101:       assertEquals(1, Node.DECR_FLAG);
1102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1103:       assertEquals(47, Node.IS_DISPATCHER);
1104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(2, Node.POST_FLAG);
1107:       assertEquals(50, Node.FREE_CALL);
1108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1109:       assertEquals(40, Node.ORIGINALNAME_PROP);
1110:       assertEquals(46, Node.IS_NAMESPACE);
1111:       assertEquals(43, Node.IS_CONSTANT_NAME);
1112:       assertEquals(36, Node.QUOTED_PROP);
1113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1115:       assertEquals(55, Node.INFERRED_FUNCTION);
1116:       assertEquals(53, Node.INPUT_ID);
1117:       assertEquals(56, Node.CHANGE_TIME);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(39, Node.EMPTY_BLOCK);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1124:       assertEquals(4095, Node.COLUMN_MASK);
1125:       assertEquals(57, Node.REFLECTED_OBJECT);
1126:       assertEquals(37, Node.OPT_ARG_NAME);
1127:       assertEquals(48, Node.DIRECTIVES);
1128:       assertEquals(49, Node.DIRECT_EVAL);
1129:       assertEquals(8, Node.FLAG_NO_THROWS);
1130:       assertEquals(39, Node.EMPTY_BLOCK);
1131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1133:       assertEquals(48, Node.DIRECTIVES);
1134:       assertEquals(4095, Node.COLUMN_MASK);
1135:       assertEquals(40, Node.ORIGINALNAME_PROP);
1136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1139:       assertEquals(57, Node.LAST_PROP);
1140:       assertEquals(49, Node.DIRECT_EVAL);
1141:       assertEquals(53, Node.INPUT_ID);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1146:       assertEquals(52, Node.LENGTH);
1147:       assertEquals(36, Node.QUOTED_PROP);
1148:       assertEquals(2, Node.POST_FLAG);
1149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1150:       assertEquals(56, Node.CHANGE_TIME);
1151:       assertEquals(29, Node.JSDOC_INFO_PROP);
1152:       assertEquals(32, Node.INCRDECR_PROP);
1153:       assertEquals(37, Node.OPT_ARG_NAME);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(47, Node.IS_DISPATCHER);
1158:       assertEquals(54, Node.SLASH_V);
1159:       assertEquals(43, Node.IS_CONSTANT_NAME);
1160:       assertEquals(1, Node.DECR_FLAG);
1161:       assertEquals(46, Node.IS_NAMESPACE);
1162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1163:       assertEquals(50, Node.FREE_CALL);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertFalse(node0.isCase());
1166:       assertFalse(node0.isInc());
1167:       assertFalse(node0.isIn());
1168:       assertFalse(node0.isHook());
1169:       assertFalse(node0.isThrow());
1170:       assertFalse(node0.isDelProp());
1171:       assertFalse(node0.isFor());
1172:       assertFalse(node0.isEmpty());
1173:       assertFalse(node0.isBreak());
1174:       assertFalse(node0.isComma());
1175:       assertFalse(node0.isTrue());
1176:       assertFalse(node0.isNE());
1177:       assertFalse(node0.isVoid());
1178:       assertFalse(node0.isIf());
1179:       assertFalse(node0.isNot());
1180:       assertEquals(40, node0.getType());
1181:       assertFalse(node0.isFunction());
1182:       assertFalse(node0.isExprResult());
1183:       assertFalse(node0.isObjectLit());
1184:       assertFalse(node0.isGetProp());
1185:       assertFalse(node0.isCast());
1186:       assertFalse(node0.isFalse());
1187:       assertFalse(node0.isDebugger());
1188:       assertFalse(node0.isAnd());
1189:       assertFalse(node0.isWhile());
1190:       assertFalse(node0.isDo());
1191:       assertFalse(node0.hasMoreThanOneChild());
1192:       assertFalse(node0.isContinue());
1193:       assertFalse(node0.isReturn());
1194:       assertFalse(node0.isAdd());
1195:       assertFalse(node0.isBlock());
1196:       assertFalse(node0.isNew());
1197:       assertFalse(node0.isLabel());
1198:       assertFalse(node0.isVar());
1199:       assertTrue(node0.isString());
1200:       assertFalse(node0.isAssignAdd());
1201:       assertFalse(node0.isAssign());
1202:       assertFalse(node0.isDec());
1203:       assertFalse(node0.isGetElem());
1204:       assertFalse(node0.hasChildren());
1205:       assertFalse(node0.isSetterDef());
1206:       assertFalse(node0.isCall());
1207:       assertFalse(node0.isTypeOf());
1208:       assertFalse(node0.isOr());
1209:       assertFalse(node0.isNull());
1210:       assertEquals(573, node0.getLineno());
1211:       assertFalse(node0.isName());
1212:       assertFalse(node0.isWith());
1213:       assertEquals(2347581, node0.getSourcePosition());
1214:       assertFalse(node0.isCatch());
1215:       assertFalse(node0.isRegExp());
1216:       assertFalse(node0.isScript());
1217:       assertFalse(node0.isInstanceOf());
1218:       assertFalse(node0.isTry());
1219:       assertEquals(0, node0.getChildCount());
1220:       assertFalse(node0.hasOneChild());
1221:       assertFalse(node0.isThis());
1222:       assertFalse(node0.isDefaultCase());
1223:       assertFalse(node0.isGetterDef());
1224:       assertFalse(node0.isLabelName());
1225:       assertFalse(node0.isNumber());
1226:       assertEquals(573, node0.getCharno());
1227:       assertFalse(node0.isArrayLit());
1228:       assertFalse(node0.isSwitch());
1229:       assertFalse(node0.isParamList());
1230:       assertFalse(node0.isStringKey());
1231:       assertFalse(node1.isNull());
1232:       assertFalse(node1.isSetterDef());
1233:       assertFalse(node1.isParamList());
1234:       assertFalse(node1.isStringKey());
1235:       assertFalse(node1.isName());
1236:       assertFalse(node1.isBlock());
1237:       assertFalse(node1.isVar());
1238:       assertFalse(node1.isCall());
1239:       assertFalse(node1.isCatch());
1240:       assertFalse(node1.isWhile());
1241:       assertFalse(node1.isTry());
1242:       assertFalse(node1.isDebugger());
1243:       assertFalse(node1.isNumber());
1244:       assertFalse(node1.isDelProp());
1245:       assertFalse(node1.isGetterDef());
1246:       assertFalse(node1.isDec());
1247:       assertFalse(node1.isAssign());
1248:       assertFalse(node1.isLabelName());
1249:       assertFalse(node1.isEmpty());
1250:       assertFalse(node1.isGetElem());
1251:       assertTrue(node1.hasOneChild());
1252:       assertFalse(node1.isAssignAdd());
1253:       assertFalse(node1.isArrayLit());
1254:       assertFalse(node1.isLabel());
1255:       assertFalse(node1.isReturn());
1256:       assertFalse(node1.isExprResult());
1257:       assertFalse(node1.isTypeOf());
1258:       assertFalse(node1.isDo());
1259:       assertFalse(node1.isVoid());
1260:       assertFalse(node1.isTrue());
1261:       assertTrue(node1.isInstanceOf());
1262:       assertFalse(node1.isDefaultCase());
1263:       assertFalse(node1.isOr());
1264:       assertFalse(node1.isNew());
1265:       assertFalse(node1.isAdd());
1266:       assertFalse(node1.isBreak());
1267:       assertFalse(node1.isThis());
1268:       assertFalse(node1.isThrow());
1269:       assertEquals(43, node1.getLineno());
1270:       assertFalse(node1.isHook());
1271:       assertFalse(node1.isComma());
1272:       assertFalse(node1.isWith());
1273:       assertFalse(node1.isFalse());
1274:       assertFalse(node1.isString());
1275:       assertFalse(node1.isNot());
1276:       assertFalse(node1.isCase());
1277:       assertFalse(node1.isScript());
1278:       assertFalse(node1.isAnd());
1279:       assertFalse(node1.isSwitch());
1280:       assertFalse(node1.isGetProp());
1281:       assertFalse(node1.isObjectLit());
1282:       assertEquals(176178, node1.getSourcePosition());
1283:       assertEquals(50, node1.getCharno());
1284:       assertFalse(node1.isFor());
1285:       assertFalse(node1.isNE());
1286:       assertFalse(node1.isIf());
1287:       assertEquals(1, node1.getChildCount());
1288:       assertTrue(node1.hasChildren());
1289:       assertFalse(node1.isFunction());
1290:       assertFalse(node1.isContinue());
1291:       assertFalse(node1.isCast());
1292:       assertFalse(node1.isRegExp());
1293:       assertFalse(node1.hasMoreThanOneChild());
1294:       assertFalse(node1.isInc());
1295:       assertEquals(52, node1.getType());
1296:       assertFalse(node1.isIn());
1297:       
1298:       boolean boolean3 = node_NodeMismatch0.equals("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
1299:       assertFalse(node0.equals((Object)node2));
1300:       assertFalse(node0.equals((Object)node1));
1301:       assertFalse(node1.equals((Object)node2));
1302:       assertFalse(node1.equals((Object)node0));
1303:       assertTrue(boolean3 == boolean1);
1304:       assertTrue(boolean3 == boolean2);
1305:       assertTrue(boolean3 == boolean0);
1306:       assertFalse(boolean3);
1307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1308:       assertEquals(57, Node.LAST_PROP);
1309:       assertEquals(54, Node.SLASH_V);
1310:       assertEquals(52, Node.LENGTH);
1311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1312:       assertEquals(30, Node.VAR_ARGS_NAME);
1313:       assertEquals(12, Node.COLUMN_BITS);
1314:       assertEquals(32, Node.INCRDECR_PROP);
1315:       assertEquals(1, Node.DECR_FLAG);
1316:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1317:       assertEquals(47, Node.IS_DISPATCHER);
1318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1320:       assertEquals(2, Node.POST_FLAG);
1321:       assertEquals(50, Node.FREE_CALL);
1322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1323:       assertEquals(40, Node.ORIGINALNAME_PROP);
1324:       assertEquals(46, Node.IS_NAMESPACE);
1325:       assertEquals(43, Node.IS_CONSTANT_NAME);
1326:       assertEquals(36, Node.QUOTED_PROP);
1327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1328:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1329:       assertEquals(55, Node.INFERRED_FUNCTION);
1330:       assertEquals(53, Node.INPUT_ID);
1331:       assertEquals(56, Node.CHANGE_TIME);
1332:       assertEquals(8, Node.FLAG_NO_THROWS);
1333:       assertEquals(39, Node.EMPTY_BLOCK);
1334:       assertEquals(29, Node.JSDOC_INFO_PROP);
1335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1336:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1337:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1338:       assertEquals(4095, Node.COLUMN_MASK);
1339:       assertEquals(57, Node.REFLECTED_OBJECT);
1340:       assertEquals(37, Node.OPT_ARG_NAME);
1341:       assertEquals(48, Node.DIRECTIVES);
1342:       assertEquals(49, Node.DIRECT_EVAL);
1343:       assertEquals(8, Node.FLAG_NO_THROWS);
1344:       assertEquals(39, Node.EMPTY_BLOCK);
1345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1347:       assertEquals(48, Node.DIRECTIVES);
1348:       assertEquals(4095, Node.COLUMN_MASK);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1352:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1353:       assertEquals(57, Node.LAST_PROP);
1354:       assertEquals(49, Node.DIRECT_EVAL);
1355:       assertEquals(53, Node.INPUT_ID);
1356:       assertEquals(55, Node.INFERRED_FUNCTION);
1357:       assertEquals(57, Node.REFLECTED_OBJECT);
1358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1360:       assertEquals(52, Node.LENGTH);
1361:       assertEquals(36, Node.QUOTED_PROP);
1362:       assertEquals(2, Node.POST_FLAG);
1363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1364:       assertEquals(56, Node.CHANGE_TIME);
1365:       assertEquals(29, Node.JSDOC_INFO_PROP);
1366:       assertEquals(32, Node.INCRDECR_PROP);
1367:       assertEquals(37, Node.OPT_ARG_NAME);
1368:       assertEquals(12, Node.COLUMN_BITS);
1369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1370:       assertEquals(30, Node.VAR_ARGS_NAME);
1371:       assertEquals(47, Node.IS_DISPATCHER);
1372:       assertEquals(54, Node.SLASH_V);
1373:       assertEquals(43, Node.IS_CONSTANT_NAME);
1374:       assertEquals(1, Node.DECR_FLAG);
1375:       assertEquals(46, Node.IS_NAMESPACE);
1376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1377:       assertEquals(50, Node.FREE_CALL);
1378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1379:       assertFalse(node0.isCase());
1380:       assertFalse(node0.isInc());
1381:       assertFalse(node0.isIn());
1382:       assertFalse(node0.isHook());
1383:       assertFalse(node0.isThrow());
1384:       assertFalse(node0.isDelProp());
1385:       assertFalse(node0.isFor());
1386:       assertFalse(node0.isEmpty());
1387:       assertFalse(node0.isBreak());
1388:       assertFalse(node0.isComma());
1389:       assertFalse(node0.isTrue());
1390:       assertFalse(node0.isNE());
1391:       assertFalse(node0.isVoid());
1392:       assertFalse(node0.isIf());
1393:       assertFalse(node0.isNot());
1394:       assertEquals(40, node0.getType());
1395:       assertFalse(node0.isFunction());
1396:       assertFalse(node0.isExprResult());
1397:       assertFalse(node0.isObjectLit());
1398:       assertFalse(node0.isGetProp());
1399:       assertFalse(node0.isCast());
1400:       assertFalse(node0.isFalse());
1401:       assertFalse(node0.isDebugger());
1402:       assertFalse(node0.isAnd());
1403:       assertFalse(node0.isWhile());
1404:       assertFalse(node0.isDo());
1405:       assertFalse(node0.hasMoreThanOneChild());
1406:       assertFalse(node0.isContinue());
1407:       assertFalse(node0.isReturn());
1408:       assertFalse(node0.isAdd());
1409:       assertFalse(node0.isBlock());
1410:       assertFalse(node0.isNew());
1411:       assertFalse(node0.isLabel());
1412:       assertFalse(node0.isVar());
1413:       assertTrue(node0.isString());
1414:       assertFalse(node0.isAssignAdd());
1415:       assertFalse(node0.isAssign());
1416:       assertFalse(node0.isDec());
1417:       assertFalse(node0.isGetElem());
1418:       assertFalse(node0.hasChildren());
1419:       assertFalse(node0.isSetterDef());
1420:       assertFalse(node0.isCall());
1421:       assertFalse(node0.isTypeOf());
1422:       assertFalse(node0.isOr());
1423:       assertFalse(node0.isNull());
1424:       assertEquals(573, node0.getLineno());
1425:       assertFalse(node0.isName());
1426:       assertFalse(node0.isWith());
1427:       assertEquals(2347581, node0.getSourcePosition());
1428:       assertFalse(node0.isCatch());
1429:       assertFalse(node0.isRegExp());
1430:       assertFalse(node0.isScript());
1431:       assertFalse(node0.isInstanceOf());
1432:       assertFalse(node0.isTry());
1433:       assertEquals(0, node0.getChildCount());
1434:       assertFalse(node0.hasOneChild());
1435:       assertFalse(node0.isThis());
1436:       assertFalse(node0.isDefaultCase());
1437:       assertFalse(node0.isGetterDef());
1438:       assertFalse(node0.isLabelName());
1439:       assertFalse(node0.isNumber());
1440:       assertEquals(573, node0.getCharno());
1441:       assertFalse(node0.isArrayLit());
1442:       assertFalse(node0.isSwitch());
1443:       assertFalse(node0.isParamList());
1444:       assertFalse(node0.isStringKey());
1445:       assertFalse(node1.isNull());
1446:       assertFalse(node1.isSetterDef());
1447:       assertFalse(node1.isParamList());
1448:       assertFalse(node1.isStringKey());
1449:       assertFalse(node1.isName());
1450:       assertFalse(node1.isBlock());
1451:       assertFalse(node1.isVar());
1452:       assertFalse(node1.isCall());
1453:       assertFalse(node1.isCatch());
1454:       assertFalse(node1.isWhile());
1455:       assertFalse(node1.isTry());
1456:       assertFalse(node1.isDebugger());
1457:       assertFalse(node1.isNumber());
1458:       assertFalse(node1.isDelProp());
1459:       assertFalse(node1.isGetterDef());
1460:       assertFalse(node1.isDec());
1461:       assertFalse(node1.isAssign());
1462:       assertFalse(node1.isLabelName());
1463:       assertFalse(node1.isEmpty());
1464:       assertFalse(node1.isGetElem());
1465:       assertTrue(node1.hasOneChild());
1466:       assertFalse(node1.isAssignAdd());
1467:       assertFalse(node1.isArrayLit());
1468:       assertFalse(node1.isLabel());
1469:       assertFalse(node1.isReturn());
1470:       assertFalse(node1.isExprResult());
1471:       assertFalse(node1.isTypeOf());
1472:       assertFalse(node1.isDo());
1473:       assertFalse(node1.isVoid());
1474:       assertFalse(node1.isTrue());
1475:       assertTrue(node1.isInstanceOf());
1476:       assertFalse(node1.isDefaultCase());
1477:       assertFalse(node1.isOr());
1478:       assertFalse(node1.isNew());
1479:       assertFalse(node1.isAdd());
1480:       assertFalse(node1.isBreak());
1481:       assertFalse(node1.isThis());
1482:       assertFalse(node1.isThrow());
1483:       assertEquals(43, node1.getLineno());
1484:       assertFalse(node1.isHook());
1485:       assertFalse(node1.isComma());
1486:       assertFalse(node1.isWith());
1487:       assertFalse(node1.isFalse());
1488:       assertFalse(node1.isString());
1489:       assertFalse(node1.isNot());
1490:       assertFalse(node1.isCase());
1491:       assertFalse(node1.isScript());
1492:       assertFalse(node1.isAnd());
1493:       assertFalse(node1.isSwitch());
1494:       assertFalse(node1.isGetProp());
1495:       assertFalse(node1.isObjectLit());
1496:       assertEquals(176178, node1.getSourcePosition());
1497:       assertEquals(50, node1.getCharno());
1498:       assertFalse(node1.isFor());
1499:       assertFalse(node1.isNE());
1500:       assertFalse(node1.isIf());
1501:       assertEquals(1, node1.getChildCount());
1502:       assertTrue(node1.hasChildren());
1503:       assertFalse(node1.isFunction());
1504:       assertFalse(node1.isContinue());
1505:       assertFalse(node1.isCast());
1506:       assertFalse(node1.isRegExp());
1507:       assertFalse(node1.hasMoreThanOneChild());
1508:       assertFalse(node1.isInc());
1509:       assertEquals(52, node1.getType());
1510:       assertFalse(node1.isIn());
1511:       
1512:       node0.putIntProp((-3320), 0);
1513:       assertFalse(node0.equals((Object)node2));
1514:       assertFalse(node0.equals((Object)node1));
1515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1516:       assertEquals(57, Node.LAST_PROP);
1517:       assertEquals(54, Node.SLASH_V);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1520:       assertEquals(30, Node.VAR_ARGS_NAME);
1521:       assertEquals(12, Node.COLUMN_BITS);
1522:       assertEquals(32, Node.INCRDECR_PROP);
1523:       assertEquals(1, Node.DECR_FLAG);
1524:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1525:       assertEquals(47, Node.IS_DISPATCHER);
1526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1528:       assertEquals(2, Node.POST_FLAG);
1529:       assertEquals(50, Node.FREE_CALL);
1530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1531:       assertEquals(40, Node.ORIGINALNAME_PROP);
1532:       assertEquals(46, Node.IS_NAMESPACE);
1533:       assertEquals(43, Node.IS_CONSTANT_NAME);
1534:       assertEquals(36, Node.QUOTED_PROP);
1535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1537:       assertEquals(55, Node.INFERRED_FUNCTION);
1538:       assertEquals(53, Node.INPUT_ID);
1539:       assertEquals(56, Node.CHANGE_TIME);
1540:       assertEquals(8, Node.FLAG_NO_THROWS);
1541:       assertEquals(39, Node.EMPTY_BLOCK);
1542:       assertEquals(29, Node.JSDOC_INFO_PROP);
1543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1546:       assertEquals(4095, Node.COLUMN_MASK);
1547:       assertEquals(57, Node.REFLECTED_OBJECT);
1548:       assertEquals(37, Node.OPT_ARG_NAME);
1549:       assertEquals(48, Node.DIRECTIVES);
1550:       assertEquals(49, Node.DIRECT_EVAL);
1551:       assertFalse(node0.isCase());
1552:       assertFalse(node0.isInc());
1553:       assertFalse(node0.isIn());
1554:       assertFalse(node0.isHook());
1555:       assertFalse(node0.isThrow());
1556:       assertFalse(node0.isDelProp());
1557:       assertFalse(node0.isFor());
1558:       assertFalse(node0.isEmpty());
1559:       assertFalse(node0.isBreak());
1560:       assertFalse(node0.isComma());
1561:       assertFalse(node0.isTrue());
1562:       assertFalse(node0.isNE());
1563:       assertFalse(node0.isVoid());
1564:       assertFalse(node0.isIf());
1565:       assertFalse(node0.isNot());
1566:       assertEquals(40, node0.getType());
1567:       assertFalse(node0.isFunction());
1568:       assertFalse(node0.isExprResult());
1569:       assertFalse(node0.isObjectLit());
1570:       assertFalse(node0.isGetProp());
1571:       assertFalse(node0.isCast());
1572:       assertFalse(node0.isFalse());
1573:       assertFalse(node0.isDebugger());
1574:       assertFalse(node0.isAnd());
1575:       assertFalse(node0.isWhile());
1576:       assertFalse(node0.isDo());
1577:       assertFalse(node0.hasMoreThanOneChild());
1578:       assertFalse(node0.isContinue());
1579:       assertFalse(node0.isReturn());
1580:       assertFalse(node0.isAdd());
1581:       assertFalse(node0.isBlock());
1582:       assertFalse(node0.isNew());
1583:       assertFalse(node0.isLabel());
1584:       assertFalse(node0.isVar());
1585:       assertTrue(node0.isString());
1586:       assertFalse(node0.isAssignAdd());
1587:       assertFalse(node0.isAssign());
1588:       assertFalse(node0.isDec());
1589:       assertFalse(node0.isGetElem());
1590:       assertFalse(node0.hasChildren());
1591:       assertFalse(node0.isSetterDef());
1592:       assertFalse(node0.isCall());
1593:       assertFalse(node0.isTypeOf());
1594:       assertFalse(node0.isOr());
1595:       assertFalse(node0.isNull());
1596:       assertEquals(573, node0.getLineno());
1597:       assertFalse(node0.isName());
1598:       assertFalse(node0.isWith());
1599:       assertEquals(2347581, node0.getSourcePosition());
1600:       assertFalse(node0.isCatch());
1601:       assertFalse(node0.isRegExp());
1602:       assertFalse(node0.isScript());
1603:       assertFalse(node0.isInstanceOf());
1604:       assertFalse(node0.isTry());
1605:       assertEquals(0, node0.getChildCount());
1606:       assertFalse(node0.hasOneChild());
1607:       assertFalse(node0.isThis());
1608:       assertFalse(node0.isDefaultCase());
1609:       assertFalse(node0.isGetterDef());
1610:       assertFalse(node0.isLabelName());
1611:       assertFalse(node0.isNumber());
1612:       assertEquals(573, node0.getCharno());
1613:       assertFalse(node0.isArrayLit());
1614:       assertFalse(node0.isSwitch());
1615:       assertFalse(node0.isParamList());
1616:       assertFalse(node0.isStringKey());
1617:       
1618:       int int1 = Node.extractCharno(56);
1619:       assertFalse(int1 == int0);
1620:       assertEquals(56, int1);
1621:       
1622:       // Undeclared exception!
1623:       try { 
1624:         node2.setSideEffectFlags(2);
1625:         fail("Expecting exception: IllegalArgumentException");
1626:       
1627:       } catch(IllegalArgumentException e) {
1628:          //
1629:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
1630:          //
1631:          verifyException("com.google.common.base.Preconditions", e);
1632:       }
1633:   }
1634: }
RegularFileObject[/tmp/EvoSuite_312_1628159345322/com/google/javascript/rhino/Node_312_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:29:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_312_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_312_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_312_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.common.collect.Sets$ImprovedAbstractSet",
370:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
371:       "com.google.common.collect.Hashing",
372:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 10:29:05.606 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 573, 573);
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isSyntheticBlock();
assertFalse(boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Set<String> set0 = new HashSet<String>();
assertNotNull(set0);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertFalse(set0.contains("setIsNoSideEffectsCall only supports CALL and NEW nodes, got "));

String string0 = node0.getSourceFileName();
assertNull(string0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

int int0 = node0.getType();
assertEquals(40, int0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Node node1 = new Node(52, node0, 43, 50);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertEquals(43, node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertEquals(176178, node1.getSourcePosition());
assertEquals(50, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertEquals(52, node1.getType());
assertFalse(node1.isIn());

Node node2 = Node.newNumber((double) 49, (-536870912), 11);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals(39, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());

boolean boolean1 = node0.isLocalResultCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

boolean boolean2 = node2.isDec();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals(39, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertEquals(43, node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertEquals(176178, node1.getSourcePosition());
assertEquals(50, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertEquals(52, node1.getType());
assertFalse(node1.isIn());

boolean boolean3 = node_NodeMismatch0.equals("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertEquals(43, node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertEquals(176178, node1.getSourcePosition());
assertEquals(50, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertEquals(52, node1.getType());
assertFalse(node1.isIn());

node0.putIntProp((-3320), 0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(573, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals(573, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

int int1 = Node.extractCharno(56);
assertFalse(int1 == int0);
assertEquals(56, int1);

node2.setSideEffectFlags(2);

[MASTER] 10:29:11.544 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_367_1628159351506/com/google/javascript/rhino/Node_367_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_367_1628159351506/com/google/javascript/rhino/Node_367_tmp__ESTest_scaffolding.java]]
[MASTER] 10:29:11.544 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:29:11.544 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:29:11.545 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 234
[MASTER] 10:29:11.545 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_367_1628159351506/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:29:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.HashSet;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_367_tmp__ESTest extends Node_367_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 573, 573);
26:       assertNotNull(node0);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(52, Node.LENGTH);
31:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
32:       assertEquals(39, Node.EMPTY_BLOCK);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
36:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(55, Node.INFERRED_FUNCTION);
41:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
42:       assertEquals(37, Node.OPT_ARG_NAME);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(57, Node.REFLECTED_OBJECT);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(29, Node.JSDOC_INFO_PROP);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(2, Node.POST_FLAG);
54:       assertEquals(32, Node.INCRDECR_PROP);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(30, Node.VAR_ARGS_NAME);
59:       assertEquals(1, Node.DECR_FLAG);
60:       assertEquals(54, Node.SLASH_V);
61:       assertEquals(46, Node.IS_NAMESPACE);
62:       assertEquals(43, Node.IS_CONSTANT_NAME);
63:       assertFalse(node0.isVar());
64:       assertTrue(node0.isString());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isBlock());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isContinue());
73:       assertFalse(node0.isNumber());
74:       assertFalse(node0.isParamList());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isLabelName());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isEmpty());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isArrayLit());
83:       assertFalse(node0.isDec());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isDefaultCase());
86:       assertFalse(node0.isAssign());
87:       assertFalse(node0.isReturn());
88:       assertFalse(node0.isLabel());
89:       assertFalse(node0.hasChildren());
90:       assertFalse(node0.isAssignAdd());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isDelProp());
94:       assertFalse(node0.isOr());
95:       assertFalse(node0.isTrue());
96:       assertFalse(node0.isHook());
97:       assertFalse(node0.isInc());
98:       assertFalse(node0.isBreak());
99:       assertFalse(node0.isFalse());
100:       assertFalse(node0.isThrow());
101:       assertFalse(node0.isThis());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isAnd());
104:       assertFalse(node0.isCase());
105:       assertFalse(node0.isGetProp());
106:       assertFalse(node0.isGetterDef());
107:       assertFalse(node0.isScript());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isNot());
110:       assertFalse(node0.isObjectLit());
111:       assertEquals(573, node0.getCharno());
112:       assertFalse(node0.hasOneChild());
113:       assertFalse(node0.isCast());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.isRegExp());
116:       assertFalse(node0.isFunction());
117:       assertFalse(node0.isWith());
118:       assertEquals(40, node0.getType());
119:       assertFalse(node0.isFor());
120:       assertFalse(node0.isInstanceOf());
121:       assertEquals(573, node0.getLineno());
122:       assertFalse(node0.isCatch());
123:       assertFalse(node0.hasMoreThanOneChild());
124:       assertFalse(node0.isIn());
125:       assertEquals(2347581, node0.getSourcePosition());
126:       assertFalse(node0.isSetterDef());
127:       assertFalse(node0.isNE());
128:       assertFalse(node0.isIf());
129:       
130:       Iterable<Node> iterable0 = node0.children();
131:       assertNotNull(iterable0);
132:       assertEquals(40, Node.ORIGINALNAME_PROP);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(52, Node.LENGTH);
136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(57, Node.LAST_PROP);
140:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(55, Node.INFERRED_FUNCTION);
146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(2, Node.POST_FLAG);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(51, Node.STATIC_SOURCE_FILE);
163:       assertEquals(30, Node.VAR_ARGS_NAME);
164:       assertEquals(1, Node.DECR_FLAG);
165:       assertEquals(54, Node.SLASH_V);
166:       assertEquals(46, Node.IS_NAMESPACE);
167:       assertEquals(43, Node.IS_CONSTANT_NAME);
168:       assertFalse(node0.isVar());
169:       assertTrue(node0.isString());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isNew());
172:       assertFalse(node0.isAdd());
173:       assertFalse(node0.isCall());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isBlock());
176:       assertEquals(0, node0.getChildCount());
177:       assertFalse(node0.isContinue());
178:       assertFalse(node0.isNumber());
179:       assertFalse(node0.isParamList());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isGetElem());
183:       assertFalse(node0.isLabelName());
184:       assertFalse(node0.isVoid());
185:       assertFalse(node0.isEmpty());
186:       assertFalse(node0.isExprResult());
187:       assertFalse(node0.isArrayLit());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isDefaultCase());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isLabel());
194:       assertFalse(node0.hasChildren());
195:       assertFalse(node0.isAssignAdd());
196:       assertFalse(node0.isDo());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isDelProp());
199:       assertFalse(node0.isOr());
200:       assertFalse(node0.isTrue());
201:       assertFalse(node0.isHook());
202:       assertFalse(node0.isInc());
203:       assertFalse(node0.isBreak());
204:       assertFalse(node0.isFalse());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isThis());
207:       assertFalse(node0.isComma());
208:       assertFalse(node0.isAnd());
209:       assertFalse(node0.isCase());
210:       assertFalse(node0.isGetProp());
211:       assertFalse(node0.isGetterDef());
212:       assertFalse(node0.isScript());
213:       assertFalse(node0.isSwitch());
214:       assertFalse(node0.isNot());
215:       assertFalse(node0.isObjectLit());
216:       assertEquals(573, node0.getCharno());
217:       assertFalse(node0.hasOneChild());
218:       assertFalse(node0.isCast());
219:       assertFalse(node0.isTry());
220:       assertFalse(node0.isRegExp());
221:       assertFalse(node0.isFunction());
222:       assertFalse(node0.isWith());
223:       assertEquals(40, node0.getType());
224:       assertFalse(node0.isFor());
225:       assertFalse(node0.isInstanceOf());
226:       assertEquals(573, node0.getLineno());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.hasMoreThanOneChild());
229:       assertFalse(node0.isIn());
230:       assertEquals(2347581, node0.getSourcePosition());
231:       assertFalse(node0.isSetterDef());
232:       assertFalse(node0.isNE());
233:       assertFalse(node0.isIf());
234:       assertFalse(iterable0.contains(node0));
235:       
236:       boolean boolean0 = node0.isSyntheticBlock();
237:       assertFalse(boolean0);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(55, Node.INFERRED_FUNCTION);
252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
253:       assertEquals(37, Node.OPT_ARG_NAME);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(48, Node.DIRECTIVES);
257:       assertEquals(57, Node.REFLECTED_OBJECT);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(2, Node.POST_FLAG);
265:       assertEquals(32, Node.INCRDECR_PROP);
266:       assertEquals(47, Node.IS_DISPATCHER);
267:       assertEquals(12, Node.COLUMN_BITS);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(30, Node.VAR_ARGS_NAME);
270:       assertEquals(1, Node.DECR_FLAG);
271:       assertEquals(54, Node.SLASH_V);
272:       assertEquals(46, Node.IS_NAMESPACE);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertFalse(node0.isVar());
275:       assertTrue(node0.isString());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isNew());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isCall());
280:       assertFalse(node0.isWhile());
281:       assertFalse(node0.isBlock());
282:       assertEquals(0, node0.getChildCount());
283:       assertFalse(node0.isContinue());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.isParamList());
286:       assertFalse(node0.isStringKey());
287:       assertFalse(node0.isDebugger());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isLabelName());
290:       assertFalse(node0.isVoid());
291:       assertFalse(node0.isEmpty());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isDec());
295:       assertFalse(node0.isTypeOf());
296:       assertFalse(node0.isDefaultCase());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.isReturn());
299:       assertFalse(node0.isLabel());
300:       assertFalse(node0.hasChildren());
301:       assertFalse(node0.isAssignAdd());
302:       assertFalse(node0.isDo());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isDelProp());
305:       assertFalse(node0.isOr());
306:       assertFalse(node0.isTrue());
307:       assertFalse(node0.isHook());
308:       assertFalse(node0.isInc());
309:       assertFalse(node0.isBreak());
310:       assertFalse(node0.isFalse());
311:       assertFalse(node0.isThrow());
312:       assertFalse(node0.isThis());
313:       assertFalse(node0.isComma());
314:       assertFalse(node0.isAnd());
315:       assertFalse(node0.isCase());
316:       assertFalse(node0.isGetProp());
317:       assertFalse(node0.isGetterDef());
318:       assertFalse(node0.isScript());
319:       assertFalse(node0.isSwitch());
320:       assertFalse(node0.isNot());
321:       assertFalse(node0.isObjectLit());
322:       assertEquals(573, node0.getCharno());
323:       assertFalse(node0.hasOneChild());
324:       assertFalse(node0.isCast());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.isFunction());
328:       assertFalse(node0.isWith());
329:       assertEquals(40, node0.getType());
330:       assertFalse(node0.isFor());
331:       assertFalse(node0.isInstanceOf());
332:       assertEquals(573, node0.getLineno());
333:       assertFalse(node0.isCatch());
334:       assertFalse(node0.hasMoreThanOneChild());
335:       assertFalse(node0.isIn());
336:       assertEquals(2347581, node0.getSourcePosition());
337:       assertFalse(node0.isSetterDef());
338:       assertFalse(node0.isNE());
339:       assertFalse(node0.isIf());
340:       
341:       HashSet<String> hashSet0 = new HashSet<String>();
342:       assertNotNull(hashSet0);
343:       assertTrue(hashSet0.isEmpty());
344:       assertEquals(0, hashSet0.size());
345:       assertFalse(hashSet0.contains("setIsNoSideEffectsCall only supports CALL and NEW nodes, got "));
346:       
347:       String string0 = node0.getSourceFileName();
348:       assertNull(string0);
349:       assertEquals(40, Node.ORIGINALNAME_PROP);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
352:       assertEquals(52, Node.LENGTH);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(49, Node.DIRECT_EVAL);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(4095, Node.COLUMN_MASK);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(37, Node.OPT_ARG_NAME);
365:       assertEquals(8, Node.FLAG_NO_THROWS);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(56, Node.CHANGE_TIME);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(53, Node.INPUT_ID);
374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals(32, Node.INCRDECR_PROP);
377:       assertEquals(47, Node.IS_DISPATCHER);
378:       assertEquals(12, Node.COLUMN_BITS);
379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
380:       assertEquals(30, Node.VAR_ARGS_NAME);
381:       assertEquals(1, Node.DECR_FLAG);
382:       assertEquals(54, Node.SLASH_V);
383:       assertEquals(46, Node.IS_NAMESPACE);
384:       assertEquals(43, Node.IS_CONSTANT_NAME);
385:       assertFalse(node0.isVar());
386:       assertTrue(node0.isString());
387:       assertFalse(node0.isName());
388:       assertFalse(node0.isNew());
389:       assertFalse(node0.isAdd());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isWhile());
392:       assertFalse(node0.isBlock());
393:       assertEquals(0, node0.getChildCount());
394:       assertFalse(node0.isContinue());
395:       assertFalse(node0.isNumber());
396:       assertFalse(node0.isParamList());
397:       assertFalse(node0.isStringKey());
398:       assertFalse(node0.isDebugger());
399:       assertFalse(node0.isGetElem());
400:       assertFalse(node0.isLabelName());
401:       assertFalse(node0.isVoid());
402:       assertFalse(node0.isEmpty());
403:       assertFalse(node0.isExprResult());
404:       assertFalse(node0.isArrayLit());
405:       assertFalse(node0.isDec());
406:       assertFalse(node0.isTypeOf());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isAssign());
409:       assertFalse(node0.isReturn());
410:       assertFalse(node0.isLabel());
411:       assertFalse(node0.hasChildren());
412:       assertFalse(node0.isAssignAdd());
413:       assertFalse(node0.isDo());
414:       assertFalse(node0.isNull());
415:       assertFalse(node0.isDelProp());
416:       assertFalse(node0.isOr());
417:       assertFalse(node0.isTrue());
418:       assertFalse(node0.isHook());
419:       assertFalse(node0.isInc());
420:       assertFalse(node0.isBreak());
421:       assertFalse(node0.isFalse());
422:       assertFalse(node0.isThrow());
423:       assertFalse(node0.isThis());
424:       assertFalse(node0.isComma());
425:       assertFalse(node0.isAnd());
426:       assertFalse(node0.isCase());
427:       assertFalse(node0.isGetProp());
428:       assertFalse(node0.isGetterDef());
429:       assertFalse(node0.isScript());
430:       assertFalse(node0.isSwitch());
431:       assertFalse(node0.isNot());
432:       assertFalse(node0.isObjectLit());
433:       assertEquals(573, node0.getCharno());
434:       assertFalse(node0.hasOneChild());
435:       assertFalse(node0.isCast());
436:       assertFalse(node0.isTry());
437:       assertFalse(node0.isRegExp());
438:       assertFalse(node0.isFunction());
439:       assertFalse(node0.isWith());
440:       assertEquals(40, node0.getType());
441:       assertFalse(node0.isFor());
442:       assertFalse(node0.isInstanceOf());
443:       assertEquals(573, node0.getLineno());
444:       assertFalse(node0.isCatch());
445:       assertFalse(node0.hasMoreThanOneChild());
446:       assertFalse(node0.isIn());
447:       assertEquals(2347581, node0.getSourcePosition());
448:       assertFalse(node0.isSetterDef());
449:       assertFalse(node0.isNE());
450:       assertFalse(node0.isIf());
451:       
452:       int int0 = node0.getType();
453:       assertEquals(40, int0);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(52, Node.LENGTH);
458:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
459:       assertEquals(39, Node.EMPTY_BLOCK);
460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
461:       assertEquals(57, Node.LAST_PROP);
462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(4095, Node.COLUMN_MASK);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(37, Node.OPT_ARG_NAME);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(48, Node.DIRECTIVES);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(56, Node.CHANGE_TIME);
475:       assertEquals(29, Node.JSDOC_INFO_PROP);
476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(53, Node.INPUT_ID);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertEquals(2, Node.POST_FLAG);
481:       assertEquals(32, Node.INCRDECR_PROP);
482:       assertEquals(47, Node.IS_DISPATCHER);
483:       assertEquals(12, Node.COLUMN_BITS);
484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
485:       assertEquals(30, Node.VAR_ARGS_NAME);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(54, Node.SLASH_V);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(43, Node.IS_CONSTANT_NAME);
490:       assertFalse(node0.isVar());
491:       assertTrue(node0.isString());
492:       assertFalse(node0.isName());
493:       assertFalse(node0.isNew());
494:       assertFalse(node0.isAdd());
495:       assertFalse(node0.isCall());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.isBlock());
498:       assertEquals(0, node0.getChildCount());
499:       assertFalse(node0.isContinue());
500:       assertFalse(node0.isNumber());
501:       assertFalse(node0.isParamList());
502:       assertFalse(node0.isStringKey());
503:       assertFalse(node0.isDebugger());
504:       assertFalse(node0.isGetElem());
505:       assertFalse(node0.isLabelName());
506:       assertFalse(node0.isVoid());
507:       assertFalse(node0.isEmpty());
508:       assertFalse(node0.isExprResult());
509:       assertFalse(node0.isArrayLit());
510:       assertFalse(node0.isDec());
511:       assertFalse(node0.isTypeOf());
512:       assertFalse(node0.isDefaultCase());
513:       assertFalse(node0.isAssign());
514:       assertFalse(node0.isReturn());
515:       assertFalse(node0.isLabel());
516:       assertFalse(node0.hasChildren());
517:       assertFalse(node0.isAssignAdd());
518:       assertFalse(node0.isDo());
519:       assertFalse(node0.isNull());
520:       assertFalse(node0.isDelProp());
521:       assertFalse(node0.isOr());
522:       assertFalse(node0.isTrue());
523:       assertFalse(node0.isHook());
524:       assertFalse(node0.isInc());
525:       assertFalse(node0.isBreak());
526:       assertFalse(node0.isFalse());
527:       assertFalse(node0.isThrow());
528:       assertFalse(node0.isThis());
529:       assertFalse(node0.isComma());
530:       assertFalse(node0.isAnd());
531:       assertFalse(node0.isCase());
532:       assertFalse(node0.isGetProp());
533:       assertFalse(node0.isGetterDef());
534:       assertFalse(node0.isScript());
535:       assertFalse(node0.isSwitch());
536:       assertFalse(node0.isNot());
537:       assertFalse(node0.isObjectLit());
538:       assertEquals(573, node0.getCharno());
539:       assertFalse(node0.hasOneChild());
540:       assertFalse(node0.isCast());
541:       assertFalse(node0.isTry());
542:       assertFalse(node0.isRegExp());
543:       assertFalse(node0.isFunction());
544:       assertFalse(node0.isWith());
545:       assertEquals(40, node0.getType());
546:       assertFalse(node0.isFor());
547:       assertFalse(node0.isInstanceOf());
548:       assertEquals(573, node0.getLineno());
549:       assertFalse(node0.isCatch());
550:       assertFalse(node0.hasMoreThanOneChild());
551:       assertFalse(node0.isIn());
552:       assertEquals(2347581, node0.getSourcePosition());
553:       assertFalse(node0.isSetterDef());
554:       assertFalse(node0.isNE());
555:       assertFalse(node0.isIf());
556:       
557:       // Undeclared exception!
558:       try { 
559:         Node.newString((String) null);
560:         fail("Expecting exception: IllegalArgumentException");
561:       
562:       } catch(IllegalArgumentException e) {
563:          //
564:          // StringNode: str is null
565:          //
566:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
567:       }
568:   }
569: }
RegularFileObject[/tmp/EvoSuite_367_1628159351506/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:29:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_367_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_367_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_367_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.common.collect.Sets$ImprovedAbstractSet",
370:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
371:       "com.google.common.collect.Hashing",
372:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 10:29:11.553 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 573, 573);
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(573, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertEquals(573, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(573, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertEquals(573, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isSyntheticBlock();
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(573, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertEquals(573, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

HashSet<String> hashSet0 = new HashSet<String>();
assertNotNull(hashSet0);
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());
assertFalse(hashSet0.contains("setIsNoSideEffectsCall only supports CALL and NEW nodes, got "));

String string0 = node0.getSourceFileName();
assertNull(string0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(573, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertEquals(573, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

int int0 = node0.getType();
assertEquals(40, int0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(573, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertEquals(573, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(2347581, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

Node.newString((String) null);

[MASTER] 10:29:36.925 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:37.219 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:37.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:37.742 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:38.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:38.795 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:39.128 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:39.360 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:39.596 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:39.785 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:39.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:40.198 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:40.456 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/15
* Done!

* Computation finished
