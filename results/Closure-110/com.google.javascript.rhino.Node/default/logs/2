* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12508
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2246280839
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:38:42.946 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:38:44.565 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false in context: com.google.javascript.rhino.Node:useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 09:38:44.567 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true in context: com.google.javascript.rhino.Node:putBooleanProp(IZ)V
[MASTER] 09:38:44.576 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 09:38:44.576 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 09:38:44.579 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.toString()Ljava/lang/String;
[MASTER] 09:38:44.584 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false in context: com.google.javascript.rhino.Node:useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 09:38:44.589 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 09:38:56.216 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 09:39:42.931 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:45:51.346 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called in total: 0
* Search finished after 604s and 747 generations, 272933 statements, best individual has fitness: 2702.0
* Minimizing test suite
[MASTER] 09:50:16.521 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 803
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 623
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 475
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2326
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 589
* Generated 1163 tests with total length 10274
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:51:34.705 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7262166666666666% of time used, but only 84/1163 tests minimized), falling back to using all assertions
[MASTER] 09:51:51.151 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 09:52:04.106 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 09:52:09.320 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_123_1628157129292/com/google/javascript/rhino/Node_123_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_123_1628157129292/com/google/javascript/rhino/Node_123_tmp__ESTest_scaffolding.java]]
[MASTER] 09:52:09.320 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:09.320 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:09.324 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:52:09.325 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_123_1628157129292/com/google/javascript/rhino/Node_123_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:52:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_123_tmp__ESTest extends Node_123_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(115);
21:       assertEquals(1, Node.DECR_FLAG);
22:       assertEquals(30, Node.VAR_ARGS_NAME);
23:       assertEquals(49, Node.DIRECT_EVAL);
24:       assertEquals(57, Node.LAST_PROP);
25:       assertEquals(51, Node.STATIC_SOURCE_FILE);
26:       assertEquals(12, Node.COLUMN_BITS);
27:       assertEquals(46, Node.IS_NAMESPACE);
28:       assertEquals(54, Node.SLASH_V);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(2, Node.POST_FLAG);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(56, Node.CHANGE_TIME);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(57, Node.REFLECTED_OBJECT);
37:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(15, Node.NO_SIDE_EFFECTS);
41:       assertEquals(55, Node.INFERRED_FUNCTION);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(29, Node.JSDOC_INFO_PROP);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(4095, Node.COLUMN_MASK);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertNotNull(node0);
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isDo());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.isVar());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.isContinue());
67:       assertTrue(node0.isFor());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isNull());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isName());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.isArrayLit());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isInstanceOf());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isWith());
85:       assertFalse(node0.isParamList());
86:       assertFalse(node0.isThis());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isStringKey());
89:       assertFalse(node0.hasOneChild());
90:       assertFalse(node0.isGetterDef());
91:       assertFalse(node0.isNumber());
92:       assertEquals((-1), node0.getCharno());
93:       assertFalse(node0.isInc());
94:       assertFalse(node0.isCase());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isHook());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isNE());
99:       assertFalse(node0.isBreak());
100:       assertFalse(node0.isThrow());
101:       assertFalse(node0.isIf());
102:       assertFalse(node0.isDelProp());
103:       assertFalse(node0.isEmpty());
104:       assertFalse(node0.isIn());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isTrue());
107:       assertFalse(node0.isDebugger());
108:       assertFalse(node0.isVoid());
109:       assertFalse(node0.isAnd());
110:       assertFalse(node0.isCast());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isAssign());
113:       assertFalse(node0.isFunction());
114:       assertFalse(node0.isTypeOf());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertFalse(node0.isComma());
117:       assertFalse(node0.isDec());
118:       assertFalse(node0.hasChildren());
119:       assertFalse(node0.isGetProp());
120:       assertFalse(node0.isNot());
121:       assertFalse(node0.isString());
122:       assertFalse(node0.isObjectLit());
123:       assertEquals(115, node0.getType());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(1, Node.DECR_FLAG);
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(57, Node.LAST_PROP);
130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       assertEquals(46, Node.IS_NAMESPACE);
133:       assertEquals(54, Node.SLASH_V);
134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
135:       assertEquals(37, Node.OPT_ARG_NAME);
136:       assertEquals(2, Node.POST_FLAG);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(56, Node.CHANGE_TIME);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
146:       assertEquals(55, Node.INFERRED_FUNCTION);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(4095, Node.COLUMN_MASK);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertNotNull(iterable0);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isDo());
166:       assertFalse(node0.isNew());
167:       assertFalse(node0.isWhile());
168:       assertFalse(node0.isVar());
169:       assertFalse(node0.isCall());
170:       assertFalse(node0.isReturn());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isContinue());
173:       assertTrue(node0.isFor());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isNull());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isName());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isTry());
185:       assertFalse(node0.isDefaultCase());
186:       assertFalse(node0.isArrayLit());
187:       assertFalse(node0.isCatch());
188:       assertFalse(node0.isInstanceOf());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isWith());
191:       assertFalse(node0.isParamList());
192:       assertFalse(node0.isThis());
193:       assertFalse(node0.isLabelName());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.hasOneChild());
196:       assertFalse(node0.isGetterDef());
197:       assertFalse(node0.isNumber());
198:       assertEquals((-1), node0.getCharno());
199:       assertFalse(node0.isInc());
200:       assertFalse(node0.isCase());
201:       assertFalse(node0.isSwitch());
202:       assertFalse(node0.isHook());
203:       assertFalse(node0.isFalse());
204:       assertFalse(node0.isNE());
205:       assertFalse(node0.isBreak());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.isIf());
208:       assertFalse(node0.isDelProp());
209:       assertFalse(node0.isEmpty());
210:       assertFalse(node0.isIn());
211:       assertFalse(node0.isExprResult());
212:       assertFalse(node0.isTrue());
213:       assertFalse(node0.isDebugger());
214:       assertFalse(node0.isVoid());
215:       assertFalse(node0.isAnd());
216:       assertFalse(node0.isCast());
217:       assertFalse(node0.isGetElem());
218:       assertFalse(node0.isAssign());
219:       assertFalse(node0.isFunction());
220:       assertFalse(node0.isTypeOf());
221:       assertEquals((-1), node0.getSourcePosition());
222:       assertFalse(node0.isComma());
223:       assertFalse(node0.isDec());
224:       assertFalse(node0.hasChildren());
225:       assertFalse(node0.isGetProp());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isString());
228:       assertFalse(node0.isObjectLit());
229:       assertEquals(115, node0.getType());
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_123_1628157129292/com/google/javascript/rhino/Node_123_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:52:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_123_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_123_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.javascript.rhino.JSDocInfo$1",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_123_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.Node$AncestorIterable$1",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.JSDocInfo$Marker",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 09:52:09.326 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(115);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertTrue(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals(115, node0.getType());

Iterable<Node> iterable0 = node0.children();
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertTrue(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals(115, node0.getType());


[MASTER] 09:52:20.976 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_265_1628157140601/com/google/javascript/rhino/Node_265_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_265_1628157140601/com/google/javascript/rhino/Node_265_tmp__ESTest_scaffolding.java]]
[MASTER] 09:52:20.977 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:20.977 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:20.978 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 222
[MASTER] 09:52:20.980 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_265_1628157140601/com/google/javascript/rhino/Node_265_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:52:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
15: import com.google.javascript.rhino.jstype.EnumElementType;
16: import com.google.javascript.rhino.jstype.EnumType;
17: import com.google.javascript.rhino.jstype.JSType;
18: import com.google.javascript.rhino.jstype.JSTypeRegistry;
19: import com.google.javascript.rhino.jstype.StaticSourceFile;
20: import com.google.javascript.rhino.jstype.TemplateType;
21: import java.util.Stack;
22: import org.evosuite.runtime.EvoRunner;
23: import org.evosuite.runtime.EvoRunnerParameters;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_265_tmp__ESTest extends Node_265_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
32:       assertNotNull(simpleErrorReporter0);
33:       
34:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
35:       assertNotNull(jSTypeRegistry0);
36:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
37:       
38:       Stack<JSType> stack0 = new Stack<JSType>();
39:       assertNotNull(stack0);
40:       assertEquals(0, stack0.size());
41:       assertEquals(10, stack0.capacity());
42:       assertTrue(stack0.empty());
43:       assertEquals("[]", stack0.toString());
44:       assertTrue(stack0.isEmpty());
45:       
46:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
47:       assertNotNull(jSTypeRegistry1);
48:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
49:       assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
50:       
51:       TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Element");
52:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
53:       assertEquals(1, JSType.ENUMDECL);
54:       assertEquals(0, JSType.NOT_ENUMDECL);
55:       assertNotNull(templateType0);
56:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
57:       assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
58:       assertFalse(templateType0.isStringValueType());
59:       assertFalse(templateType0.isFunctionType());
60:       assertEquals("Object#Element", templateType0.getReferenceName());
61:       assertFalse(templateType0.isUnionType());
62:       assertFalse(templateType0.hasCachedValues());
63:       assertFalse(templateType0.isNumberValueType());
64:       assertFalse(templateType0.isNullType());
65:       assertTrue(templateType0.isObject());
66:       assertFalse(templateType0.isResolved());
67:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
68:       assertFalse(templateType0.isNominalConstructor());
69:       assertFalse(templateType0.isFunctionPrototypeType());
70:       assertFalse(templateType0.isBooleanValueType());
71:       assertFalse(templateType0.isVoidType());
72:       assertFalse(templateType0.isRecordType());
73:       assertFalse(templateType0.isEnumType());
74:       assertFalse(templateType0.isEnumElementType());
75:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
76:       assertTrue(templateType0.isTemplateType());
77:       assertFalse(templateType0.isTemplatizedType());
78:       
79:       Node node0 = new Node(147, 2705, 2);
80:       assertEquals(12, Node.COLUMN_BITS);
81:       assertEquals(1, Node.DECR_FLAG);
82:       assertEquals(49, Node.DIRECT_EVAL);
83:       assertEquals(32, Node.INCRDECR_PROP);
84:       assertEquals(15, Node.NO_SIDE_EFFECTS);
85:       assertEquals(2, Node.POST_FLAG);
86:       assertEquals(57, Node.LAST_PROP);
87:       assertEquals(30, Node.VAR_ARGS_NAME);
88:       assertEquals(47, Node.IS_DISPATCHER);
89:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(39, Node.EMPTY_BLOCK);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(36, Node.QUOTED_PROP);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(50, Node.FREE_CALL);
115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
116:       assertNotNull(node0);
117:       assertFalse(node0.isDo());
118:       assertFalse(node0.isContinue());
119:       assertFalse(node0.isAdd());
120:       assertFalse(node0.hasMoreThanOneChild());
121:       assertFalse(node0.isReturn());
122:       assertFalse(node0.isLabel());
123:       assertTrue(node0.isGetterDef());
124:       assertFalse(node0.isNew());
125:       assertFalse(node0.isBlock());
126:       assertFalse(node0.isVar());
127:       assertFalse(node0.isAssignAdd());
128:       assertFalse(node0.isWhile());
129:       assertFalse(node0.hasChildren());
130:       assertFalse(node0.isTypeOf());
131:       assertFalse(node0.isNull());
132:       assertFalse(node0.isAssign());
133:       assertFalse(node0.isDec());
134:       assertFalse(node0.isCall());
135:       assertFalse(node0.isSetterDef());
136:       assertFalse(node0.isGetElem());
137:       assertEquals(147, node0.getType());
138:       assertFalse(node0.isOr());
139:       assertFalse(node0.isName());
140:       assertFalse(node0.isDefaultCase());
141:       assertFalse(node0.isRegExp());
142:       assertFalse(node0.isScript());
143:       assertFalse(node0.isCatch());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isInstanceOf());
146:       assertEquals(0, node0.getChildCount());
147:       assertFalse(node0.isTry());
148:       assertFalse(node0.hasOneChild());
149:       assertFalse(node0.isThis());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isNumber());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isArrayLit());
154:       assertFalse(node0.isSwitch());
155:       assertFalse(node0.isParamList());
156:       assertFalse(node0.isStringKey());
157:       assertFalse(node0.isCase());
158:       assertFalse(node0.isInc());
159:       assertFalse(node0.isString());
160:       assertFalse(node0.isHook());
161:       assertFalse(node0.isThrow());
162:       assertFalse(node0.isIf());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isDelProp());
165:       assertFalse(node0.isComma());
166:       assertEquals(11079682, node0.getSourcePosition());
167:       assertFalse(node0.isEmpty());
168:       assertFalse(node0.isIn());
169:       assertFalse(node0.isVoid());
170:       assertFalse(node0.isTrue());
171:       assertFalse(node0.isNE());
172:       assertEquals(2, node0.getCharno());
173:       assertFalse(node0.isNot());
174:       assertFalse(node0.isDebugger());
175:       assertEquals(2705, node0.getLineno());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isObjectLit());
179:       assertFalse(node0.isGetProp());
180:       assertFalse(node0.isFalse());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.isAnd());
183:       
184:       Iterable<Node> iterable0 = node0.children();
185:       assertEquals(12, Node.COLUMN_BITS);
186:       assertEquals(1, Node.DECR_FLAG);
187:       assertEquals(49, Node.DIRECT_EVAL);
188:       assertEquals(32, Node.INCRDECR_PROP);
189:       assertEquals(15, Node.NO_SIDE_EFFECTS);
190:       assertEquals(2, Node.POST_FLAG);
191:       assertEquals(57, Node.LAST_PROP);
192:       assertEquals(30, Node.VAR_ARGS_NAME);
193:       assertEquals(47, Node.IS_DISPATCHER);
194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
196:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
197:       assertEquals(29, Node.JSDOC_INFO_PROP);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(8, Node.FLAG_NO_THROWS);
202:       assertEquals(39, Node.EMPTY_BLOCK);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
206:       assertEquals(52, Node.LENGTH);
207:       assertEquals(36, Node.QUOTED_PROP);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(40, Node.ORIGINALNAME_PROP);
214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertNotNull(iterable0);
222:       assertFalse(iterable0.contains(node0));
223:       assertFalse(node0.isDo());
224:       assertFalse(node0.isContinue());
225:       assertFalse(node0.isAdd());
226:       assertFalse(node0.hasMoreThanOneChild());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.isLabel());
229:       assertTrue(node0.isGetterDef());
230:       assertFalse(node0.isNew());
231:       assertFalse(node0.isBlock());
232:       assertFalse(node0.isVar());
233:       assertFalse(node0.isAssignAdd());
234:       assertFalse(node0.isWhile());
235:       assertFalse(node0.hasChildren());
236:       assertFalse(node0.isTypeOf());
237:       assertFalse(node0.isNull());
238:       assertFalse(node0.isAssign());
239:       assertFalse(node0.isDec());
240:       assertFalse(node0.isCall());
241:       assertFalse(node0.isSetterDef());
242:       assertFalse(node0.isGetElem());
243:       assertEquals(147, node0.getType());
244:       assertFalse(node0.isOr());
245:       assertFalse(node0.isName());
246:       assertFalse(node0.isDefaultCase());
247:       assertFalse(node0.isRegExp());
248:       assertFalse(node0.isScript());
249:       assertFalse(node0.isCatch());
250:       assertFalse(node0.isWith());
251:       assertFalse(node0.isInstanceOf());
252:       assertEquals(0, node0.getChildCount());
253:       assertFalse(node0.isTry());
254:       assertFalse(node0.hasOneChild());
255:       assertFalse(node0.isThis());
256:       assertFalse(node0.isFor());
257:       assertFalse(node0.isNumber());
258:       assertFalse(node0.isLabelName());
259:       assertFalse(node0.isArrayLit());
260:       assertFalse(node0.isSwitch());
261:       assertFalse(node0.isParamList());
262:       assertFalse(node0.isStringKey());
263:       assertFalse(node0.isCase());
264:       assertFalse(node0.isInc());
265:       assertFalse(node0.isString());
266:       assertFalse(node0.isHook());
267:       assertFalse(node0.isThrow());
268:       assertFalse(node0.isIf());
269:       assertFalse(node0.isBreak());
270:       assertFalse(node0.isDelProp());
271:       assertFalse(node0.isComma());
272:       assertEquals(11079682, node0.getSourcePosition());
273:       assertFalse(node0.isEmpty());
274:       assertFalse(node0.isIn());
275:       assertFalse(node0.isVoid());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isNE());
278:       assertEquals(2, node0.getCharno());
279:       assertFalse(node0.isNot());
280:       assertFalse(node0.isDebugger());
281:       assertEquals(2705, node0.getLineno());
282:       assertFalse(node0.isExprResult());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isFalse());
287:       assertFalse(node0.isCast());
288:       assertFalse(node0.isAnd());
289:       
290:       Node node1 = new Node(0, node0, node0, node0, 683, 50);
291:       assertEquals(12, Node.COLUMN_BITS);
292:       assertEquals(1, Node.DECR_FLAG);
293:       assertEquals(49, Node.DIRECT_EVAL);
294:       assertEquals(32, Node.INCRDECR_PROP);
295:       assertEquals(15, Node.NO_SIDE_EFFECTS);
296:       assertEquals(2, Node.POST_FLAG);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(30, Node.VAR_ARGS_NAME);
299:       assertEquals(47, Node.IS_DISPATCHER);
300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
303:       assertEquals(29, Node.JSDOC_INFO_PROP);
304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(39, Node.EMPTY_BLOCK);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(56, Node.CHANGE_TIME);
311:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
312:       assertEquals(52, Node.LENGTH);
313:       assertEquals(36, Node.QUOTED_PROP);
314:       assertEquals(57, Node.REFLECTED_OBJECT);
315:       assertEquals(55, Node.INFERRED_FUNCTION);
316:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
317:       assertEquals(4095, Node.COLUMN_MASK);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(43, Node.IS_CONSTANT_NAME);
324:       assertEquals(46, Node.IS_NAMESPACE);
325:       assertEquals(50, Node.FREE_CALL);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(52, Node.LENGTH);
328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(57, Node.LAST_PROP);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(49, Node.DIRECT_EVAL);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
336:       assertEquals(32, Node.INCRDECR_PROP);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       assertEquals(12, Node.COLUMN_BITS);
339:       assertEquals(46, Node.IS_NAMESPACE);
340:       assertEquals(50, Node.FREE_CALL);
341:       assertEquals(1, Node.DECR_FLAG);
342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
344:       assertEquals(53, Node.INPUT_ID);
345:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(47, Node.IS_DISPATCHER);
348:       assertEquals(2, Node.POST_FLAG);
349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
350:       assertEquals(4095, Node.COLUMN_MASK);
351:       assertEquals(48, Node.DIRECTIVES);
352:       assertEquals(37, Node.OPT_ARG_NAME);
353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
354:       assertEquals(56, Node.CHANGE_TIME);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(29, Node.JSDOC_INFO_PROP);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(36, Node.QUOTED_PROP);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(39, Node.EMPTY_BLOCK);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(8, Node.FLAG_NO_THROWS);
363:       assertNotNull(node1);
364:       assertFalse(node1.equals((Object)node0));
365:       assertFalse(node0.isDo());
366:       assertFalse(node0.isContinue());
367:       assertFalse(node0.isAdd());
368:       assertFalse(node0.hasMoreThanOneChild());
369:       assertFalse(node0.isReturn());
370:       assertFalse(node0.isLabel());
371:       assertTrue(node0.isGetterDef());
372:       assertFalse(node0.isNew());
373:       assertFalse(node0.isBlock());
374:       assertFalse(node0.isVar());
375:       assertFalse(node0.isAssignAdd());
376:       assertFalse(node0.isWhile());
377:       assertFalse(node0.hasChildren());
378:       assertFalse(node0.isTypeOf());
379:       assertFalse(node0.isNull());
380:       assertFalse(node0.isAssign());
381:       assertFalse(node0.isDec());
382:       assertFalse(node0.isCall());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isGetElem());
385:       assertEquals(147, node0.getType());
386:       assertFalse(node0.isOr());
387:       assertFalse(node0.isName());
388:       assertFalse(node0.isDefaultCase());
389:       assertFalse(node0.isRegExp());
390:       assertFalse(node0.isScript());
391:       assertFalse(node0.isCatch());
392:       assertFalse(node0.isWith());
393:       assertFalse(node0.isInstanceOf());
394:       assertEquals(0, node0.getChildCount());
395:       assertFalse(node0.isTry());
396:       assertFalse(node0.hasOneChild());
397:       assertFalse(node0.isThis());
398:       assertFalse(node0.isFor());
399:       assertFalse(node0.isNumber());
400:       assertFalse(node0.isLabelName());
401:       assertFalse(node0.isArrayLit());
402:       assertFalse(node0.isSwitch());
403:       assertFalse(node0.isParamList());
404:       assertFalse(node0.isStringKey());
405:       assertFalse(node0.isCase());
406:       assertFalse(node0.isInc());
407:       assertFalse(node0.isString());
408:       assertFalse(node0.isHook());
409:       assertFalse(node0.isThrow());
410:       assertFalse(node0.isIf());
411:       assertFalse(node0.isBreak());
412:       assertFalse(node0.isDelProp());
413:       assertFalse(node0.isComma());
414:       assertEquals(11079682, node0.getSourcePosition());
415:       assertFalse(node0.isEmpty());
416:       assertFalse(node0.isIn());
417:       assertFalse(node0.isVoid());
418:       assertFalse(node0.isTrue());
419:       assertFalse(node0.isNE());
420:       assertEquals(2, node0.getCharno());
421:       assertFalse(node0.isNot());
422:       assertFalse(node0.isDebugger());
423:       assertEquals(2705, node0.getLineno());
424:       assertFalse(node0.isExprResult());
425:       assertFalse(node0.isFunction());
426:       assertFalse(node0.isObjectLit());
427:       assertFalse(node0.isGetProp());
428:       assertFalse(node0.isFalse());
429:       assertFalse(node0.isCast());
430:       assertFalse(node0.isAnd());
431:       assertFalse(node1.isCall());
432:       assertFalse(node1.isVar());
433:       assertFalse(node1.isStringKey());
434:       assertFalse(node1.isNew());
435:       assertFalse(node1.isName());
436:       assertFalse(node1.isBlock());
437:       assertFalse(node1.isContinue());
438:       assertFalse(node1.isWhile());
439:       assertFalse(node1.isParamList());
440:       assertFalse(node1.isDebugger());
441:       assertFalse(node1.isNumber());
442:       assertFalse(node1.isFor());
443:       assertFalse(node1.isCast());
444:       assertFalse(node1.isIf());
445:       assertFalse(node1.isTry());
446:       assertEquals(2797618, node1.getSourcePosition());
447:       assertFalse(node1.isFunction());
448:       assertEquals(50, node1.getCharno());
449:       assertTrue(node1.hasChildren());
450:       assertEquals(1, node1.getChildCount());
451:       assertFalse(node1.isWith());
452:       assertFalse(node1.isRegExp());
453:       assertFalse(node1.hasMoreThanOneChild());
454:       assertFalse(node1.isCatch());
455:       assertFalse(node1.isInstanceOf());
456:       assertFalse(node1.isInc());
457:       assertFalse(node1.isSetterDef());
458:       assertFalse(node1.isNE());
459:       assertFalse(node1.isIn());
460:       assertFalse(node1.isFalse());
461:       assertEquals(683, node1.getLineno());
462:       assertFalse(node1.isThrow());
463:       assertFalse(node1.isBreak());
464:       assertFalse(node1.isThis());
465:       assertEquals(0, node1.getType());
466:       assertFalse(node1.isHook());
467:       assertFalse(node1.isComma());
468:       assertFalse(node1.isObjectLit());
469:       assertFalse(node1.isAnd());
470:       assertFalse(node1.isCase());
471:       assertFalse(node1.isSwitch());
472:       assertFalse(node1.isGetProp());
473:       assertFalse(node1.isScript());
474:       assertFalse(node1.isGetterDef());
475:       assertFalse(node1.isString());
476:       assertFalse(node1.isNot());
477:       assertFalse(node1.isGetElem());
478:       assertFalse(node1.isEmpty());
479:       assertFalse(node1.isDelProp());
480:       assertFalse(node1.isArrayLit());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isExprResult());
483:       assertFalse(node1.isReturn());
484:       assertTrue(node1.hasOneChild());
485:       assertFalse(node1.isLabel());
486:       assertFalse(node1.isTypeOf());
487:       assertFalse(node1.isAssign());
488:       assertFalse(node1.isDec());
489:       assertFalse(node1.isAssignAdd());
490:       assertFalse(node1.isDefaultCase());
491:       assertFalse(node1.isDo());
492:       assertFalse(node1.isTrue());
493:       assertFalse(node1.isVoid());
494:       assertFalse(node1.isAdd());
495:       assertFalse(node1.isNull());
496:       assertFalse(node1.isOr());
497:       
498:       boolean boolean0 = node1.isFromExterns();
499:       assertFalse(boolean0);
500:       assertNotSame(node0, node1);
501:       assertNotSame(node1, node0);
502:       assertEquals(12, Node.COLUMN_BITS);
503:       assertEquals(1, Node.DECR_FLAG);
504:       assertEquals(49, Node.DIRECT_EVAL);
505:       assertEquals(32, Node.INCRDECR_PROP);
506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
507:       assertEquals(2, Node.POST_FLAG);
508:       assertEquals(57, Node.LAST_PROP);
509:       assertEquals(30, Node.VAR_ARGS_NAME);
510:       assertEquals(47, Node.IS_DISPATCHER);
511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
512:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
514:       assertEquals(29, Node.JSDOC_INFO_PROP);
515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
516:       assertEquals(53, Node.INPUT_ID);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(39, Node.EMPTY_BLOCK);
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(52, Node.LENGTH);
524:       assertEquals(36, Node.QUOTED_PROP);
525:       assertEquals(57, Node.REFLECTED_OBJECT);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(54, Node.SLASH_V);
534:       assertEquals(43, Node.IS_CONSTANT_NAME);
535:       assertEquals(46, Node.IS_NAMESPACE);
536:       assertEquals(50, Node.FREE_CALL);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
540:       assertEquals(57, Node.REFLECTED_OBJECT);
541:       assertEquals(57, Node.LAST_PROP);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(30, Node.VAR_ARGS_NAME);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(12, Node.COLUMN_BITS);
550:       assertEquals(46, Node.IS_NAMESPACE);
551:       assertEquals(50, Node.FREE_CALL);
552:       assertEquals(1, Node.DECR_FLAG);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
555:       assertEquals(53, Node.INPUT_ID);
556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
557:       assertEquals(43, Node.IS_CONSTANT_NAME);
558:       assertEquals(47, Node.IS_DISPATCHER);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
561:       assertEquals(4095, Node.COLUMN_MASK);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(37, Node.OPT_ARG_NAME);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(56, Node.CHANGE_TIME);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(36, Node.QUOTED_PROP);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(8, Node.FLAG_NO_THROWS);
574:       assertFalse(node0.equals((Object)node1));
575:       assertFalse(node1.equals((Object)node0));
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isAdd());
579:       assertFalse(node0.hasMoreThanOneChild());
580:       assertFalse(node0.isReturn());
581:       assertFalse(node0.isLabel());
582:       assertTrue(node0.isGetterDef());
583:       assertFalse(node0.isNew());
584:       assertFalse(node0.isBlock());
585:       assertFalse(node0.isVar());
586:       assertFalse(node0.isAssignAdd());
587:       assertFalse(node0.isWhile());
588:       assertFalse(node0.hasChildren());
589:       assertFalse(node0.isTypeOf());
590:       assertFalse(node0.isNull());
591:       assertFalse(node0.isAssign());
592:       assertFalse(node0.isDec());
593:       assertFalse(node0.isCall());
594:       assertFalse(node0.isSetterDef());
595:       assertFalse(node0.isGetElem());
596:       assertEquals(147, node0.getType());
597:       assertFalse(node0.isOr());
598:       assertFalse(node0.isName());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isRegExp());
601:       assertFalse(node0.isScript());
602:       assertFalse(node0.isCatch());
603:       assertFalse(node0.isWith());
604:       assertFalse(node0.isInstanceOf());
605:       assertEquals(0, node0.getChildCount());
606:       assertFalse(node0.isTry());
607:       assertFalse(node0.hasOneChild());
608:       assertFalse(node0.isThis());
609:       assertFalse(node0.isFor());
610:       assertFalse(node0.isNumber());
611:       assertFalse(node0.isLabelName());
612:       assertFalse(node0.isArrayLit());
613:       assertFalse(node0.isSwitch());
614:       assertFalse(node0.isParamList());
615:       assertFalse(node0.isStringKey());
616:       assertFalse(node0.isCase());
617:       assertFalse(node0.isInc());
618:       assertFalse(node0.isString());
619:       assertFalse(node0.isHook());
620:       assertFalse(node0.isThrow());
621:       assertFalse(node0.isIf());
622:       assertFalse(node0.isBreak());
623:       assertFalse(node0.isDelProp());
624:       assertFalse(node0.isComma());
625:       assertEquals(11079682, node0.getSourcePosition());
626:       assertFalse(node0.isEmpty());
627:       assertFalse(node0.isIn());
628:       assertFalse(node0.isVoid());
629:       assertFalse(node0.isTrue());
630:       assertFalse(node0.isNE());
631:       assertEquals(2, node0.getCharno());
632:       assertFalse(node0.isNot());
633:       assertFalse(node0.isDebugger());
634:       assertEquals(2705, node0.getLineno());
635:       assertFalse(node0.isExprResult());
636:       assertFalse(node0.isFunction());
637:       assertFalse(node0.isObjectLit());
638:       assertFalse(node0.isGetProp());
639:       assertFalse(node0.isFalse());
640:       assertFalse(node0.isCast());
641:       assertFalse(node0.isAnd());
642:       assertFalse(node1.isCall());
643:       assertFalse(node1.isVar());
644:       assertFalse(node1.isStringKey());
645:       assertFalse(node1.isNew());
646:       assertFalse(node1.isName());
647:       assertFalse(node1.isBlock());
648:       assertFalse(node1.isContinue());
649:       assertFalse(node1.isWhile());
650:       assertFalse(node1.isParamList());
651:       assertFalse(node1.isDebugger());
652:       assertFalse(node1.isNumber());
653:       assertFalse(node1.isFor());
654:       assertFalse(node1.isCast());
655:       assertFalse(node1.isIf());
656:       assertFalse(node1.isTry());
657:       assertEquals(2797618, node1.getSourcePosition());
658:       assertFalse(node1.isFunction());
659:       assertEquals(50, node1.getCharno());
660:       assertTrue(node1.hasChildren());
661:       assertEquals(1, node1.getChildCount());
662:       assertFalse(node1.isWith());
663:       assertFalse(node1.isRegExp());
664:       assertFalse(node1.hasMoreThanOneChild());
665:       assertFalse(node1.isCatch());
666:       assertFalse(node1.isInstanceOf());
667:       assertFalse(node1.isInc());
668:       assertFalse(node1.isSetterDef());
669:       assertFalse(node1.isNE());
670:       assertFalse(node1.isIn());
671:       assertFalse(node1.isFalse());
672:       assertEquals(683, node1.getLineno());
673:       assertFalse(node1.isThrow());
674:       assertFalse(node1.isBreak());
675:       assertFalse(node1.isThis());
676:       assertEquals(0, node1.getType());
677:       assertFalse(node1.isHook());
678:       assertFalse(node1.isComma());
679:       assertFalse(node1.isObjectLit());
680:       assertFalse(node1.isAnd());
681:       assertFalse(node1.isCase());
682:       assertFalse(node1.isSwitch());
683:       assertFalse(node1.isGetProp());
684:       assertFalse(node1.isScript());
685:       assertFalse(node1.isGetterDef());
686:       assertFalse(node1.isString());
687:       assertFalse(node1.isNot());
688:       assertFalse(node1.isGetElem());
689:       assertFalse(node1.isEmpty());
690:       assertFalse(node1.isDelProp());
691:       assertFalse(node1.isArrayLit());
692:       assertFalse(node1.isLabelName());
693:       assertFalse(node1.isExprResult());
694:       assertFalse(node1.isReturn());
695:       assertTrue(node1.hasOneChild());
696:       assertFalse(node1.isLabel());
697:       assertFalse(node1.isTypeOf());
698:       assertFalse(node1.isAssign());
699:       assertFalse(node1.isDec());
700:       assertFalse(node1.isAssignAdd());
701:       assertFalse(node1.isDefaultCase());
702:       assertFalse(node1.isDo());
703:       assertFalse(node1.isTrue());
704:       assertFalse(node1.isVoid());
705:       assertFalse(node1.isAdd());
706:       assertFalse(node1.isNull());
707:       assertFalse(node1.isOr());
708:       
709:       JSDocInfo jSDocInfo0 = new JSDocInfo();
710:       assertNotNull(jSDocInfo0);
711:       assertNull(jSDocInfo0.getLendsName());
712:       assertNull(jSDocInfo0.getVisibility());
713:       assertNull(jSDocInfo0.getFileOverview());
714:       assertEquals("JSDocInfo", jSDocInfo0.toString());
715:       assertNull(jSDocInfo0.getVersion());
716:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
717:       assertNull(jSDocInfo0.getMeaning());
718:       assertFalse(jSDocInfo0.isConstant());
719:       assertFalse(jSDocInfo0.hasThisType());
720:       assertNull(jSDocInfo0.getDescription());
721:       assertFalse(jSDocInfo0.makesStructs());
722:       assertFalse(jSDocInfo0.isNoCompile());
723:       assertFalse(jSDocInfo0.isJaggerModule());
724:       assertFalse(jSDocInfo0.isExport());
725:       assertNull(jSDocInfo0.getDeprecationReason());
726:       assertFalse(jSDocInfo0.isNoTypeCheck());
727:       assertFalse(jSDocInfo0.hasEnumParameterType());
728:       assertFalse(jSDocInfo0.isConstructor());
729:       assertFalse(jSDocInfo0.isIdGenerator());
730:       assertFalse(jSDocInfo0.isInterface());
731:       assertFalse(jSDocInfo0.isJavaDispatch());
732:       assertFalse(jSDocInfo0.isOverride());
733:       assertFalse(jSDocInfo0.hasFileOverview());
734:       assertFalse(jSDocInfo0.isJaggerInject());
735:       assertNull(jSDocInfo0.getBlockDescription());
736:       assertFalse(jSDocInfo0.isWizaction());
737:       assertFalse(jSDocInfo0.isImplicitCast());
738:       assertFalse(jSDocInfo0.isStableIdGenerator());
739:       assertFalse(jSDocInfo0.isDisposes());
740:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
741:       assertFalse(jSDocInfo0.isDefine());
742:       assertFalse(jSDocInfo0.hasBaseType());
743:       assertFalse(jSDocInfo0.hasType());
744:       assertEquals(0, jSDocInfo0.getParameterCount());
745:       assertFalse(jSDocInfo0.shouldPreserveTry());
746:       assertNull(jSDocInfo0.getOriginalCommentString());
747:       assertFalse(jSDocInfo0.isJaggerProvide());
748:       assertNull(jSDocInfo0.getReturnDescription());
749:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
750:       assertNull(jSDocInfo0.getLicense());
751:       assertFalse(jSDocInfo0.isHidden());
752:       assertFalse(jSDocInfo0.makesDicts());
753:       assertFalse(jSDocInfo0.hasReturnType());
754:       assertFalse(jSDocInfo0.isNoAlias());
755:       assertFalse(jSDocInfo0.containsDeclaration());
756:       assertFalse(jSDocInfo0.hasTypedefType());
757:       assertFalse(jSDocInfo0.isExterns());
758:       assertFalse(jSDocInfo0.hasModifies());
759:       assertFalse(jSDocInfo0.isNoSideEffects());
760:       assertFalse(jSDocInfo0.isNoShadow());
761:       assertFalse(jSDocInfo0.isNgInject());
762:       assertFalse(jSDocInfo0.isExpose());
763:       assertFalse(jSDocInfo0.isDeprecated());
764:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
765:       assertFalse(jSDocInfo0.isMappedIdGenerator());
766:       
767:       Node node2 = node1.cloneNode();
768:       assertNotSame(node0, node2);
769:       assertNotSame(node0, node1);
770:       assertNotSame(node1, node0);
771:       assertNotSame(node1, node2);
772:       assertNotSame(node2, node1);
773:       assertNotSame(node2, node0);
774:       assertEquals(12, Node.COLUMN_BITS);
775:       assertEquals(1, Node.DECR_FLAG);
776:       assertEquals(49, Node.DIRECT_EVAL);
777:       assertEquals(32, Node.INCRDECR_PROP);
778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
779:       assertEquals(2, Node.POST_FLAG);
780:       assertEquals(57, Node.LAST_PROP);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(47, Node.IS_DISPATCHER);
783:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
784:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
786:       assertEquals(29, Node.JSDOC_INFO_PROP);
787:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
788:       assertEquals(53, Node.INPUT_ID);
789:       assertEquals(37, Node.OPT_ARG_NAME);
790:       assertEquals(8, Node.FLAG_NO_THROWS);
791:       assertEquals(39, Node.EMPTY_BLOCK);
792:       assertEquals(48, Node.DIRECTIVES);
793:       assertEquals(56, Node.CHANGE_TIME);
794:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
795:       assertEquals(52, Node.LENGTH);
796:       assertEquals(36, Node.QUOTED_PROP);
797:       assertEquals(57, Node.REFLECTED_OBJECT);
798:       assertEquals(55, Node.INFERRED_FUNCTION);
799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
800:       assertEquals(4095, Node.COLUMN_MASK);
801:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
802:       assertEquals(40, Node.ORIGINALNAME_PROP);
803:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
805:       assertEquals(54, Node.SLASH_V);
806:       assertEquals(43, Node.IS_CONSTANT_NAME);
807:       assertEquals(46, Node.IS_NAMESPACE);
808:       assertEquals(50, Node.FREE_CALL);
809:       assertEquals(51, Node.STATIC_SOURCE_FILE);
810:       assertEquals(52, Node.LENGTH);
811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
812:       assertEquals(57, Node.REFLECTED_OBJECT);
813:       assertEquals(57, Node.LAST_PROP);
814:       assertEquals(54, Node.SLASH_V);
815:       assertEquals(30, Node.VAR_ARGS_NAME);
816:       assertEquals(49, Node.DIRECT_EVAL);
817:       assertEquals(40, Node.ORIGINALNAME_PROP);
818:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
819:       assertEquals(32, Node.INCRDECR_PROP);
820:       assertEquals(51, Node.STATIC_SOURCE_FILE);
821:       assertEquals(12, Node.COLUMN_BITS);
822:       assertEquals(46, Node.IS_NAMESPACE);
823:       assertEquals(50, Node.FREE_CALL);
824:       assertEquals(1, Node.DECR_FLAG);
825:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
826:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
827:       assertEquals(53, Node.INPUT_ID);
828:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
829:       assertEquals(43, Node.IS_CONSTANT_NAME);
830:       assertEquals(47, Node.IS_DISPATCHER);
831:       assertEquals(2, Node.POST_FLAG);
832:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
833:       assertEquals(4095, Node.COLUMN_MASK);
834:       assertEquals(48, Node.DIRECTIVES);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
839:       assertEquals(29, Node.JSDOC_INFO_PROP);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(36, Node.QUOTED_PROP);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(39, Node.EMPTY_BLOCK);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(8, Node.FLAG_NO_THROWS);
846:       assertEquals(52, Node.LENGTH);
847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
848:       assertEquals(57, Node.REFLECTED_OBJECT);
849:       assertEquals(54, Node.SLASH_V);
850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
851:       assertEquals(57, Node.LAST_PROP);
852:       assertEquals(1, Node.DECR_FLAG);
853:       assertEquals(50, Node.FREE_CALL);
854:       assertEquals(8, Node.FLAG_NO_THROWS);
855:       assertEquals(39, Node.EMPTY_BLOCK);
856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
857:       assertEquals(48, Node.DIRECTIVES);
858:       assertEquals(32, Node.INCRDECR_PROP);
859:       assertEquals(56, Node.CHANGE_TIME);
860:       assertEquals(12, Node.COLUMN_BITS);
861:       assertEquals(49, Node.DIRECT_EVAL);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(4095, Node.COLUMN_MASK);
865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
866:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(55, Node.INFERRED_FUNCTION);
870:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
872:       assertEquals(29, Node.JSDOC_INFO_PROP);
873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
874:       assertEquals(53, Node.INPUT_ID);
875:       assertEquals(2, Node.POST_FLAG);
876:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
878:       assertEquals(47, Node.IS_DISPATCHER);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(30, Node.VAR_ARGS_NAME);
881:       assertEquals(40, Node.ORIGINALNAME_PROP);
882:       assertNotNull(node2);
883:       assertFalse(node0.equals((Object)node1));
884:       assertFalse(node1.equals((Object)node0));
885:       assertFalse(node2.equals((Object)node1));
886:       assertFalse(node2.equals((Object)node0));
887:       assertFalse(node0.isDo());
888:       assertFalse(node0.isContinue());
889:       assertFalse(node0.isAdd());
890:       assertFalse(node0.hasMoreThanOneChild());
891:       assertFalse(node0.isReturn());
892:       assertFalse(node0.isLabel());
893:       assertTrue(node0.isGetterDef());
894:       assertFalse(node0.isNew());
895:       assertFalse(node0.isBlock());
896:       assertFalse(node0.isVar());
897:       assertFalse(node0.isAssignAdd());
898:       assertFalse(node0.isWhile());
899:       assertFalse(node0.hasChildren());
900:       assertFalse(node0.isTypeOf());
901:       assertFalse(node0.isNull());
902:       assertFalse(node0.isAssign());
903:       assertFalse(node0.isDec());
904:       assertFalse(node0.isCall());
905:       assertFalse(node0.isSetterDef());
906:       assertFalse(node0.isGetElem());
907:       assertEquals(147, node0.getType());
908:       assertFalse(node0.isOr());
909:       assertFalse(node0.isName());
910:       assertFalse(node0.isDefaultCase());
911:       assertFalse(node0.isRegExp());
912:       assertFalse(node0.isScript());
913:       assertFalse(node0.isCatch());
914:       assertFalse(node0.isWith());
915:       assertFalse(node0.isInstanceOf());
916:       assertEquals(0, node0.getChildCount());
917:       assertFalse(node0.isTry());
918:       assertFalse(node0.hasOneChild());
919:       assertFalse(node0.isThis());
920:       assertFalse(node0.isFor());
921:       assertFalse(node0.isNumber());
922:       assertFalse(node0.isLabelName());
923:       assertFalse(node0.isArrayLit());
924:       assertFalse(node0.isSwitch());
925:       assertFalse(node0.isParamList());
926:       assertFalse(node0.isStringKey());
927:       assertFalse(node0.isCase());
928:       assertFalse(node0.isInc());
929:       assertFalse(node0.isString());
930:       assertFalse(node0.isHook());
931:       assertFalse(node0.isThrow());
932:       assertFalse(node0.isIf());
933:       assertFalse(node0.isBreak());
934:       assertFalse(node0.isDelProp());
935:       assertFalse(node0.isComma());
936:       assertEquals(11079682, node0.getSourcePosition());
937:       assertFalse(node0.isEmpty());
938:       assertFalse(node0.isIn());
939:       assertFalse(node0.isVoid());
940:       assertFalse(node0.isTrue());
941:       assertFalse(node0.isNE());
942:       assertEquals(2, node0.getCharno());
943:       assertFalse(node0.isNot());
944:       assertFalse(node0.isDebugger());
945:       assertEquals(2705, node0.getLineno());
946:       assertFalse(node0.isExprResult());
947:       assertFalse(node0.isFunction());
948:       assertFalse(node0.isObjectLit());
949:       assertFalse(node0.isGetProp());
950:       assertFalse(node0.isFalse());
951:       assertFalse(node0.isCast());
952:       assertFalse(node0.isAnd());
953:       assertFalse(node1.isCall());
954:       assertFalse(node1.isVar());
955:       assertFalse(node1.isStringKey());
956:       assertFalse(node1.isNew());
957:       assertFalse(node1.isName());
958:       assertFalse(node1.isBlock());
959:       assertFalse(node1.isContinue());
960:       assertFalse(node1.isWhile());
961:       assertFalse(node1.isParamList());
962:       assertFalse(node1.isDebugger());
963:       assertFalse(node1.isNumber());
964:       assertFalse(node1.isFor());
965:       assertFalse(node1.isCast());
966:       assertFalse(node1.isIf());
967:       assertFalse(node1.isTry());
968:       assertEquals(2797618, node1.getSourcePosition());
969:       assertFalse(node1.isFunction());
970:       assertEquals(50, node1.getCharno());
971:       assertTrue(node1.hasChildren());
972:       assertEquals(1, node1.getChildCount());
973:       assertFalse(node1.isWith());
974:       assertFalse(node1.isRegExp());
975:       assertFalse(node1.hasMoreThanOneChild());
976:       assertFalse(node1.isCatch());
977:       assertFalse(node1.isInstanceOf());
978:       assertFalse(node1.isInc());
979:       assertFalse(node1.isSetterDef());
980:       assertFalse(node1.isNE());
981:       assertFalse(node1.isIn());
982:       assertFalse(node1.isFalse());
983:       assertEquals(683, node1.getLineno());
984:       assertFalse(node1.isThrow());
985:       assertFalse(node1.isBreak());
986:       assertFalse(node1.isThis());
987:       assertEquals(0, node1.getType());
988:       assertFalse(node1.isHook());
989:       assertFalse(node1.isComma());
990:       assertFalse(node1.isObjectLit());
991:       assertFalse(node1.isAnd());
992:       assertFalse(node1.isCase());
993:       assertFalse(node1.isSwitch());
994:       assertFalse(node1.isGetProp());
995:       assertFalse(node1.isScript());
996:       assertFalse(node1.isGetterDef());
997:       assertFalse(node1.isString());
998:       assertFalse(node1.isNot());
999:       assertFalse(node1.isGetElem());
1000:       assertFalse(node1.isEmpty());
1001:       assertFalse(node1.isDelProp());
1002:       assertFalse(node1.isArrayLit());
1003:       assertFalse(node1.isLabelName());
1004:       assertFalse(node1.isExprResult());
1005:       assertFalse(node1.isReturn());
1006:       assertTrue(node1.hasOneChild());
1007:       assertFalse(node1.isLabel());
1008:       assertFalse(node1.isTypeOf());
1009:       assertFalse(node1.isAssign());
1010:       assertFalse(node1.isDec());
1011:       assertFalse(node1.isAssignAdd());
1012:       assertFalse(node1.isDefaultCase());
1013:       assertFalse(node1.isDo());
1014:       assertFalse(node1.isTrue());
1015:       assertFalse(node1.isVoid());
1016:       assertFalse(node1.isAdd());
1017:       assertFalse(node1.isNull());
1018:       assertFalse(node1.isOr());
1019:       assertFalse(node2.isCall());
1020:       assertFalse(node2.isStringKey());
1021:       assertFalse(node2.isVar());
1022:       assertFalse(node2.isName());
1023:       assertFalse(node2.isNew());
1024:       assertFalse(node2.isParamList());
1025:       assertFalse(node2.isAdd());
1026:       assertFalse(node2.isNull());
1027:       assertFalse(node2.isSetterDef());
1028:       assertFalse(node2.isCatch());
1029:       assertFalse(node2.isWhile());
1030:       assertFalse(node2.isVoid());
1031:       assertEquals(2797618, node2.getSourcePosition());
1032:       assertFalse(node2.isReturn());
1033:       assertFalse(node2.isBlock());
1034:       assertFalse(node2.hasChildren());
1035:       assertFalse(node2.isDec());
1036:       assertFalse(node2.isTypeOf());
1037:       assertFalse(node2.isRegExp());
1038:       assertFalse(node2.isAssign());
1039:       assertFalse(node2.hasMoreThanOneChild());
1040:       assertFalse(node2.isCast());
1041:       assertFalse(node2.isIf());
1042:       assertEquals(50, node2.getCharno());
1043:       assertFalse(node2.isDebugger());
1044:       assertFalse(node2.isNE());
1045:       assertFalse(node2.isIn());
1046:       assertFalse(node2.isNot());
1047:       assertFalse(node2.isContinue());
1048:       assertFalse(node2.isObjectLit());
1049:       assertFalse(node2.isAnd());
1050:       assertFalse(node2.isFalse());
1051:       assertFalse(node2.isFunction());
1052:       assertEquals(683, node2.getLineno());
1053:       assertFalse(node2.isThrow());
1054:       assertFalse(node2.isHook());
1055:       assertFalse(node2.isBreak());
1056:       assertFalse(node2.isInc());
1057:       assertFalse(node2.isGetProp());
1058:       assertFalse(node2.isString());
1059:       assertFalse(node2.isCase());
1060:       assertFalse(node2.isExprResult());
1061:       assertFalse(node2.isComma());
1062:       assertEquals(0, node2.getType());
1063:       assertFalse(node2.isThis());
1064:       assertFalse(node2.isInstanceOf());
1065:       assertFalse(node2.isWith());
1066:       assertFalse(node2.isArrayLit());
1067:       assertFalse(node2.isFor());
1068:       assertFalse(node2.isEmpty());
1069:       assertFalse(node2.isGetElem());
1070:       assertFalse(node2.isDelProp());
1071:       assertFalse(node2.hasOneChild());
1072:       assertFalse(node2.isTry());
1073:       assertFalse(node2.isLabelName());
1074:       assertFalse(node2.isTrue());
1075:       assertFalse(node2.isScript());
1076:       assertFalse(node2.isGetterDef());
1077:       assertFalse(node2.isOr());
1078:       assertFalse(node2.isNumber());
1079:       assertFalse(node2.isDo());
1080:       assertFalse(node2.isAssignAdd());
1081:       assertFalse(node2.isDefaultCase());
1082:       assertFalse(node2.isSwitch());
1083:       assertFalse(node2.isLabel());
1084:       assertEquals(0, node2.getChildCount());
1085:       
1086:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
1087:       assertNotSame(node0, node2);
1088:       assertNotSame(node0, node1);
1089:       assertNotSame(node1, node0);
1090:       assertNotSame(node1, node2);
1091:       assertEquals(12, Node.COLUMN_BITS);
1092:       assertEquals(1, Node.DECR_FLAG);
1093:       assertEquals(49, Node.DIRECT_EVAL);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(2, Node.POST_FLAG);
1097:       assertEquals(57, Node.LAST_PROP);
1098:       assertEquals(30, Node.VAR_ARGS_NAME);
1099:       assertEquals(47, Node.IS_DISPATCHER);
1100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1105:       assertEquals(53, Node.INPUT_ID);
1106:       assertEquals(37, Node.OPT_ARG_NAME);
1107:       assertEquals(8, Node.FLAG_NO_THROWS);
1108:       assertEquals(39, Node.EMPTY_BLOCK);
1109:       assertEquals(48, Node.DIRECTIVES);
1110:       assertEquals(56, Node.CHANGE_TIME);
1111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1112:       assertEquals(52, Node.LENGTH);
1113:       assertEquals(36, Node.QUOTED_PROP);
1114:       assertEquals(57, Node.REFLECTED_OBJECT);
1115:       assertEquals(55, Node.INFERRED_FUNCTION);
1116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1117:       assertEquals(4095, Node.COLUMN_MASK);
1118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1119:       assertEquals(40, Node.ORIGINALNAME_PROP);
1120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1122:       assertEquals(54, Node.SLASH_V);
1123:       assertEquals(43, Node.IS_CONSTANT_NAME);
1124:       assertEquals(46, Node.IS_NAMESPACE);
1125:       assertEquals(50, Node.FREE_CALL);
1126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1127:       assertEquals(52, Node.LENGTH);
1128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1129:       assertEquals(57, Node.REFLECTED_OBJECT);
1130:       assertEquals(57, Node.LAST_PROP);
1131:       assertEquals(54, Node.SLASH_V);
1132:       assertEquals(30, Node.VAR_ARGS_NAME);
1133:       assertEquals(49, Node.DIRECT_EVAL);
1134:       assertEquals(40, Node.ORIGINALNAME_PROP);
1135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1136:       assertEquals(32, Node.INCRDECR_PROP);
1137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1138:       assertEquals(12, Node.COLUMN_BITS);
1139:       assertEquals(46, Node.IS_NAMESPACE);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(1, Node.DECR_FLAG);
1142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1144:       assertEquals(53, Node.INPUT_ID);
1145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1146:       assertEquals(43, Node.IS_CONSTANT_NAME);
1147:       assertEquals(47, Node.IS_DISPATCHER);
1148:       assertEquals(2, Node.POST_FLAG);
1149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1150:       assertEquals(4095, Node.COLUMN_MASK);
1151:       assertEquals(48, Node.DIRECTIVES);
1152:       assertEquals(37, Node.OPT_ARG_NAME);
1153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1154:       assertEquals(56, Node.CHANGE_TIME);
1155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1156:       assertEquals(29, Node.JSDOC_INFO_PROP);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(36, Node.QUOTED_PROP);
1159:       assertEquals(55, Node.INFERRED_FUNCTION);
1160:       assertEquals(39, Node.EMPTY_BLOCK);
1161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1162:       assertEquals(8, Node.FLAG_NO_THROWS);
1163:       assertNull(staticSourceFile0);
1164:       assertFalse(node0.equals((Object)node2));
1165:       assertFalse(node0.equals((Object)node1));
1166:       assertFalse(node1.equals((Object)node0));
1167:       assertFalse(node1.equals((Object)node2));
1168:       assertFalse(node0.isDo());
1169:       assertFalse(node0.isContinue());
1170:       assertFalse(node0.isAdd());
1171:       assertFalse(node0.hasMoreThanOneChild());
1172:       assertFalse(node0.isReturn());
1173:       assertFalse(node0.isLabel());
1174:       assertTrue(node0.isGetterDef());
1175:       assertFalse(node0.isNew());
1176:       assertFalse(node0.isBlock());
1177:       assertFalse(node0.isVar());
1178:       assertFalse(node0.isAssignAdd());
1179:       assertFalse(node0.isWhile());
1180:       assertFalse(node0.hasChildren());
1181:       assertFalse(node0.isTypeOf());
1182:       assertFalse(node0.isNull());
1183:       assertFalse(node0.isAssign());
1184:       assertFalse(node0.isDec());
1185:       assertFalse(node0.isCall());
1186:       assertFalse(node0.isSetterDef());
1187:       assertFalse(node0.isGetElem());
1188:       assertEquals(147, node0.getType());
1189:       assertFalse(node0.isOr());
1190:       assertFalse(node0.isName());
1191:       assertFalse(node0.isDefaultCase());
1192:       assertFalse(node0.isRegExp());
1193:       assertFalse(node0.isScript());
1194:       assertFalse(node0.isCatch());
1195:       assertFalse(node0.isWith());
1196:       assertFalse(node0.isInstanceOf());
1197:       assertEquals(0, node0.getChildCount());
1198:       assertFalse(node0.isTry());
1199:       assertFalse(node0.hasOneChild());
1200:       assertFalse(node0.isThis());
1201:       assertFalse(node0.isFor());
1202:       assertFalse(node0.isNumber());
1203:       assertFalse(node0.isLabelName());
1204:       assertFalse(node0.isArrayLit());
1205:       assertFalse(node0.isSwitch());
1206:       assertFalse(node0.isParamList());
1207:       assertFalse(node0.isStringKey());
1208:       assertFalse(node0.isCase());
1209:       assertFalse(node0.isInc());
1210:       assertFalse(node0.isString());
1211:       assertFalse(node0.isHook());
1212:       assertFalse(node0.isThrow());
1213:       assertFalse(node0.isIf());
1214:       assertFalse(node0.isBreak());
1215:       assertFalse(node0.isDelProp());
1216:       assertFalse(node0.isComma());
1217:       assertEquals(11079682, node0.getSourcePosition());
1218:       assertFalse(node0.isEmpty());
1219:       assertFalse(node0.isIn());
1220:       assertFalse(node0.isVoid());
1221:       assertFalse(node0.isTrue());
1222:       assertFalse(node0.isNE());
1223:       assertEquals(2, node0.getCharno());
1224:       assertFalse(node0.isNot());
1225:       assertFalse(node0.isDebugger());
1226:       assertEquals(2705, node0.getLineno());
1227:       assertFalse(node0.isExprResult());
1228:       assertFalse(node0.isFunction());
1229:       assertFalse(node0.isObjectLit());
1230:       assertFalse(node0.isGetProp());
1231:       assertFalse(node0.isFalse());
1232:       assertFalse(node0.isCast());
1233:       assertFalse(node0.isAnd());
1234:       assertFalse(node1.isCall());
1235:       assertFalse(node1.isVar());
1236:       assertFalse(node1.isStringKey());
1237:       assertFalse(node1.isNew());
1238:       assertFalse(node1.isName());
1239:       assertFalse(node1.isBlock());
1240:       assertFalse(node1.isContinue());
1241:       assertFalse(node1.isWhile());
1242:       assertFalse(node1.isParamList());
1243:       assertFalse(node1.isDebugger());
1244:       assertFalse(node1.isNumber());
1245:       assertFalse(node1.isFor());
1246:       assertFalse(node1.isCast());
1247:       assertFalse(node1.isIf());
1248:       assertFalse(node1.isTry());
1249:       assertEquals(2797618, node1.getSourcePosition());
1250:       assertFalse(node1.isFunction());
1251:       assertEquals(50, node1.getCharno());
1252:       assertTrue(node1.hasChildren());
1253:       assertEquals(1, node1.getChildCount());
1254:       assertFalse(node1.isWith());
1255:       assertFalse(node1.isRegExp());
1256:       assertFalse(node1.hasMoreThanOneChild());
1257:       assertFalse(node1.isCatch());
1258:       assertFalse(node1.isInstanceOf());
1259:       assertFalse(node1.isInc());
1260:       assertFalse(node1.isSetterDef());
1261:       assertFalse(node1.isNE());
1262:       assertFalse(node1.isIn());
1263:       assertFalse(node1.isFalse());
1264:       assertEquals(683, node1.getLineno());
1265:       assertFalse(node1.isThrow());
1266:       assertFalse(node1.isBreak());
1267:       assertFalse(node1.isThis());
1268:       assertEquals(0, node1.getType());
1269:       assertFalse(node1.isHook());
1270:       assertFalse(node1.isComma());
1271:       assertFalse(node1.isObjectLit());
1272:       assertFalse(node1.isAnd());
1273:       assertFalse(node1.isCase());
1274:       assertFalse(node1.isSwitch());
1275:       assertFalse(node1.isGetProp());
1276:       assertFalse(node1.isScript());
1277:       assertFalse(node1.isGetterDef());
1278:       assertFalse(node1.isString());
1279:       assertFalse(node1.isNot());
1280:       assertFalse(node1.isGetElem());
1281:       assertFalse(node1.isEmpty());
1282:       assertFalse(node1.isDelProp());
1283:       assertFalse(node1.isArrayLit());
1284:       assertFalse(node1.isLabelName());
1285:       assertFalse(node1.isExprResult());
1286:       assertFalse(node1.isReturn());
1287:       assertTrue(node1.hasOneChild());
1288:       assertFalse(node1.isLabel());
1289:       assertFalse(node1.isTypeOf());
1290:       assertFalse(node1.isAssign());
1291:       assertFalse(node1.isDec());
1292:       assertFalse(node1.isAssignAdd());
1293:       assertFalse(node1.isDefaultCase());
1294:       assertFalse(node1.isDo());
1295:       assertFalse(node1.isTrue());
1296:       assertFalse(node1.isVoid());
1297:       assertFalse(node1.isAdd());
1298:       assertFalse(node1.isNull());
1299:       assertFalse(node1.isOr());
1300:       
1301:       node1.setStaticSourceFile((StaticSourceFile) null);
1302:       assertNotSame(node0, node2);
1303:       assertNotSame(node0, node1);
1304:       assertNotSame(node1, node0);
1305:       assertNotSame(node1, node2);
1306:       assertEquals(12, Node.COLUMN_BITS);
1307:       assertEquals(1, Node.DECR_FLAG);
1308:       assertEquals(49, Node.DIRECT_EVAL);
1309:       assertEquals(32, Node.INCRDECR_PROP);
1310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1311:       assertEquals(2, Node.POST_FLAG);
1312:       assertEquals(57, Node.LAST_PROP);
1313:       assertEquals(30, Node.VAR_ARGS_NAME);
1314:       assertEquals(47, Node.IS_DISPATCHER);
1315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1318:       assertEquals(29, Node.JSDOC_INFO_PROP);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(53, Node.INPUT_ID);
1321:       assertEquals(37, Node.OPT_ARG_NAME);
1322:       assertEquals(8, Node.FLAG_NO_THROWS);
1323:       assertEquals(39, Node.EMPTY_BLOCK);
1324:       assertEquals(48, Node.DIRECTIVES);
1325:       assertEquals(56, Node.CHANGE_TIME);
1326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1327:       assertEquals(52, Node.LENGTH);
1328:       assertEquals(36, Node.QUOTED_PROP);
1329:       assertEquals(57, Node.REFLECTED_OBJECT);
1330:       assertEquals(55, Node.INFERRED_FUNCTION);
1331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1332:       assertEquals(4095, Node.COLUMN_MASK);
1333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1334:       assertEquals(40, Node.ORIGINALNAME_PROP);
1335:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1337:       assertEquals(54, Node.SLASH_V);
1338:       assertEquals(43, Node.IS_CONSTANT_NAME);
1339:       assertEquals(46, Node.IS_NAMESPACE);
1340:       assertEquals(50, Node.FREE_CALL);
1341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1342:       assertEquals(52, Node.LENGTH);
1343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1344:       assertEquals(57, Node.REFLECTED_OBJECT);
1345:       assertEquals(57, Node.LAST_PROP);
1346:       assertEquals(54, Node.SLASH_V);
1347:       assertEquals(30, Node.VAR_ARGS_NAME);
1348:       assertEquals(49, Node.DIRECT_EVAL);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1351:       assertEquals(32, Node.INCRDECR_PROP);
1352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1353:       assertEquals(12, Node.COLUMN_BITS);
1354:       assertEquals(46, Node.IS_NAMESPACE);
1355:       assertEquals(50, Node.FREE_CALL);
1356:       assertEquals(1, Node.DECR_FLAG);
1357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1358:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1359:       assertEquals(53, Node.INPUT_ID);
1360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1361:       assertEquals(43, Node.IS_CONSTANT_NAME);
1362:       assertEquals(47, Node.IS_DISPATCHER);
1363:       assertEquals(2, Node.POST_FLAG);
1364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1365:       assertEquals(4095, Node.COLUMN_MASK);
1366:       assertEquals(48, Node.DIRECTIVES);
1367:       assertEquals(37, Node.OPT_ARG_NAME);
1368:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1369:       assertEquals(56, Node.CHANGE_TIME);
1370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1371:       assertEquals(29, Node.JSDOC_INFO_PROP);
1372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1373:       assertEquals(36, Node.QUOTED_PROP);
1374:       assertEquals(55, Node.INFERRED_FUNCTION);
1375:       assertEquals(39, Node.EMPTY_BLOCK);
1376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1377:       assertEquals(8, Node.FLAG_NO_THROWS);
1378:       assertFalse(node0.equals((Object)node2));
1379:       assertFalse(node0.equals((Object)node1));
1380:       assertFalse(node1.equals((Object)node0));
1381:       assertFalse(node1.equals((Object)node2));
1382:       assertFalse(node0.isDo());
1383:       assertFalse(node0.isContinue());
1384:       assertFalse(node0.isAdd());
1385:       assertFalse(node0.hasMoreThanOneChild());
1386:       assertFalse(node0.isReturn());
1387:       assertFalse(node0.isLabel());
1388:       assertTrue(node0.isGetterDef());
1389:       assertFalse(node0.isNew());
1390:       assertFalse(node0.isBlock());
1391:       assertFalse(node0.isVar());
1392:       assertFalse(node0.isAssignAdd());
1393:       assertFalse(node0.isWhile());
1394:       assertFalse(node0.hasChildren());
1395:       assertFalse(node0.isTypeOf());
1396:       assertFalse(node0.isNull());
1397:       assertFalse(node0.isAssign());
1398:       assertFalse(node0.isDec());
1399:       assertFalse(node0.isCall());
1400:       assertFalse(node0.isSetterDef());
1401:       assertFalse(node0.isGetElem());
1402:       assertEquals(147, node0.getType());
1403:       assertFalse(node0.isOr());
1404:       assertFalse(node0.isName());
1405:       assertFalse(node0.isDefaultCase());
1406:       assertFalse(node0.isRegExp());
1407:       assertFalse(node0.isScript());
1408:       assertFalse(node0.isCatch());
1409:       assertFalse(node0.isWith());
1410:       assertFalse(node0.isInstanceOf());
1411:       assertEquals(0, node0.getChildCount());
1412:       assertFalse(node0.isTry());
1413:       assertFalse(node0.hasOneChild());
1414:       assertFalse(node0.isThis());
1415:       assertFalse(node0.isFor());
1416:       assertFalse(node0.isNumber());
1417:       assertFalse(node0.isLabelName());
1418:       assertFalse(node0.isArrayLit());
1419:       assertFalse(node0.isSwitch());
1420:       assertFalse(node0.isParamList());
1421:       assertFalse(node0.isStringKey());
1422:       assertFalse(node0.isCase());
1423:       assertFalse(node0.isInc());
1424:       assertFalse(node0.isString());
1425:       assertFalse(node0.isHook());
1426:       assertFalse(node0.isThrow());
1427:       assertFalse(node0.isIf());
1428:       assertFalse(node0.isBreak());
1429:       assertFalse(node0.isDelProp());
1430:       assertFalse(node0.isComma());
1431:       assertEquals(11079682, node0.getSourcePosition());
1432:       assertFalse(node0.isEmpty());
1433:       assertFalse(node0.isIn());
1434:       assertFalse(node0.isVoid());
1435:       assertFalse(node0.isTrue());
1436:       assertFalse(node0.isNE());
1437:       assertEquals(2, node0.getCharno());
1438:       assertFalse(node0.isNot());
1439:       assertFalse(node0.isDebugger());
1440:       assertEquals(2705, node0.getLineno());
1441:       assertFalse(node0.isExprResult());
1442:       assertFalse(node0.isFunction());
1443:       assertFalse(node0.isObjectLit());
1444:       assertFalse(node0.isGetProp());
1445:       assertFalse(node0.isFalse());
1446:       assertFalse(node0.isCast());
1447:       assertFalse(node0.isAnd());
1448:       assertFalse(node1.isCall());
1449:       assertFalse(node1.isVar());
1450:       assertFalse(node1.isStringKey());
1451:       assertFalse(node1.isNew());
1452:       assertFalse(node1.isName());
1453:       assertFalse(node1.isBlock());
1454:       assertFalse(node1.isContinue());
1455:       assertFalse(node1.isWhile());
1456:       assertFalse(node1.isParamList());
1457:       assertFalse(node1.isDebugger());
1458:       assertFalse(node1.isNumber());
1459:       assertFalse(node1.isFor());
1460:       assertFalse(node1.isCast());
1461:       assertFalse(node1.isIf());
1462:       assertFalse(node1.isTry());
1463:       assertEquals(2797618, node1.getSourcePosition());
1464:       assertFalse(node1.isFunction());
1465:       assertEquals(50, node1.getCharno());
1466:       assertTrue(node1.hasChildren());
1467:       assertEquals(1, node1.getChildCount());
1468:       assertFalse(node1.isWith());
1469:       assertFalse(node1.isRegExp());
1470:       assertFalse(node1.hasMoreThanOneChild());
1471:       assertFalse(node1.isCatch());
1472:       assertFalse(node1.isInstanceOf());
1473:       assertFalse(node1.isInc());
1474:       assertFalse(node1.isSetterDef());
1475:       assertFalse(node1.isNE());
1476:       assertFalse(node1.isIn());
1477:       assertFalse(node1.isFalse());
1478:       assertEquals(683, node1.getLineno());
1479:       assertFalse(node1.isThrow());
1480:       assertFalse(node1.isBreak());
1481:       assertFalse(node1.isThis());
1482:       assertEquals(0, node1.getType());
1483:       assertFalse(node1.isHook());
1484:       assertFalse(node1.isComma());
1485:       assertFalse(node1.isObjectLit());
1486:       assertFalse(node1.isAnd());
1487:       assertFalse(node1.isCase());
1488:       assertFalse(node1.isSwitch());
1489:       assertFalse(node1.isGetProp());
1490:       assertFalse(node1.isScript());
1491:       assertFalse(node1.isGetterDef());
1492:       assertFalse(node1.isString());
1493:       assertFalse(node1.isNot());
1494:       assertFalse(node1.isGetElem());
1495:       assertFalse(node1.isEmpty());
1496:       assertFalse(node1.isDelProp());
1497:       assertFalse(node1.isArrayLit());
1498:       assertFalse(node1.isLabelName());
1499:       assertFalse(node1.isExprResult());
1500:       assertFalse(node1.isReturn());
1501:       assertTrue(node1.hasOneChild());
1502:       assertFalse(node1.isLabel());
1503:       assertFalse(node1.isTypeOf());
1504:       assertFalse(node1.isAssign());
1505:       assertFalse(node1.isDec());
1506:       assertFalse(node1.isAssignAdd());
1507:       assertFalse(node1.isDefaultCase());
1508:       assertFalse(node1.isDo());
1509:       assertFalse(node1.isTrue());
1510:       assertFalse(node1.isVoid());
1511:       assertFalse(node1.isAdd());
1512:       assertFalse(node1.isNull());
1513:       assertFalse(node1.isOr());
1514:       
1515:       boolean boolean1 = node2.hasOneChild();
1516:       assertFalse(boolean1);
1517:       assertNotSame(node0, node2);
1518:       assertNotSame(node0, node1);
1519:       assertNotSame(node1, node0);
1520:       assertNotSame(node1, node2);
1521:       assertNotSame(node2, node1);
1522:       assertNotSame(node2, node0);
1523:       assertEquals(12, Node.COLUMN_BITS);
1524:       assertEquals(1, Node.DECR_FLAG);
1525:       assertEquals(49, Node.DIRECT_EVAL);
1526:       assertEquals(32, Node.INCRDECR_PROP);
1527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1528:       assertEquals(2, Node.POST_FLAG);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(30, Node.VAR_ARGS_NAME);
1531:       assertEquals(47, Node.IS_DISPATCHER);
1532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1533:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1535:       assertEquals(29, Node.JSDOC_INFO_PROP);
1536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1537:       assertEquals(53, Node.INPUT_ID);
1538:       assertEquals(37, Node.OPT_ARG_NAME);
1539:       assertEquals(8, Node.FLAG_NO_THROWS);
1540:       assertEquals(39, Node.EMPTY_BLOCK);
1541:       assertEquals(48, Node.DIRECTIVES);
1542:       assertEquals(56, Node.CHANGE_TIME);
1543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1544:       assertEquals(52, Node.LENGTH);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(57, Node.REFLECTED_OBJECT);
1547:       assertEquals(55, Node.INFERRED_FUNCTION);
1548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1549:       assertEquals(4095, Node.COLUMN_MASK);
1550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1551:       assertEquals(40, Node.ORIGINALNAME_PROP);
1552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1554:       assertEquals(54, Node.SLASH_V);
1555:       assertEquals(43, Node.IS_CONSTANT_NAME);
1556:       assertEquals(46, Node.IS_NAMESPACE);
1557:       assertEquals(50, Node.FREE_CALL);
1558:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1559:       assertEquals(52, Node.LENGTH);
1560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1561:       assertEquals(57, Node.REFLECTED_OBJECT);
1562:       assertEquals(57, Node.LAST_PROP);
1563:       assertEquals(54, Node.SLASH_V);
1564:       assertEquals(30, Node.VAR_ARGS_NAME);
1565:       assertEquals(49, Node.DIRECT_EVAL);
1566:       assertEquals(40, Node.ORIGINALNAME_PROP);
1567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1568:       assertEquals(32, Node.INCRDECR_PROP);
1569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1570:       assertEquals(12, Node.COLUMN_BITS);
1571:       assertEquals(46, Node.IS_NAMESPACE);
1572:       assertEquals(50, Node.FREE_CALL);
1573:       assertEquals(1, Node.DECR_FLAG);
1574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1575:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1576:       assertEquals(53, Node.INPUT_ID);
1577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1578:       assertEquals(43, Node.IS_CONSTANT_NAME);
1579:       assertEquals(47, Node.IS_DISPATCHER);
1580:       assertEquals(2, Node.POST_FLAG);
1581:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1582:       assertEquals(4095, Node.COLUMN_MASK);
1583:       assertEquals(48, Node.DIRECTIVES);
1584:       assertEquals(37, Node.OPT_ARG_NAME);
1585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1586:       assertEquals(56, Node.CHANGE_TIME);
1587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1588:       assertEquals(29, Node.JSDOC_INFO_PROP);
1589:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1590:       assertEquals(36, Node.QUOTED_PROP);
1591:       assertEquals(55, Node.INFERRED_FUNCTION);
1592:       assertEquals(39, Node.EMPTY_BLOCK);
1593:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1594:       assertEquals(8, Node.FLAG_NO_THROWS);
1595:       assertEquals(52, Node.LENGTH);
1596:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1597:       assertEquals(57, Node.REFLECTED_OBJECT);
1598:       assertEquals(54, Node.SLASH_V);
1599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1600:       assertEquals(57, Node.LAST_PROP);
1601:       assertEquals(1, Node.DECR_FLAG);
1602:       assertEquals(50, Node.FREE_CALL);
1603:       assertEquals(8, Node.FLAG_NO_THROWS);
1604:       assertEquals(39, Node.EMPTY_BLOCK);
1605:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1606:       assertEquals(48, Node.DIRECTIVES);
1607:       assertEquals(32, Node.INCRDECR_PROP);
1608:       assertEquals(56, Node.CHANGE_TIME);
1609:       assertEquals(12, Node.COLUMN_BITS);
1610:       assertEquals(49, Node.DIRECT_EVAL);
1611:       assertEquals(37, Node.OPT_ARG_NAME);
1612:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1613:       assertEquals(4095, Node.COLUMN_MASK);
1614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1615:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1616:       assertEquals(43, Node.IS_CONSTANT_NAME);
1617:       assertEquals(36, Node.QUOTED_PROP);
1618:       assertEquals(55, Node.INFERRED_FUNCTION);
1619:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1620:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1621:       assertEquals(29, Node.JSDOC_INFO_PROP);
1622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1623:       assertEquals(53, Node.INPUT_ID);
1624:       assertEquals(2, Node.POST_FLAG);
1625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(46, Node.IS_NAMESPACE);
1629:       assertEquals(30, Node.VAR_ARGS_NAME);
1630:       assertEquals(40, Node.ORIGINALNAME_PROP);
1631:       assertFalse(node0.equals((Object)node2));
1632:       assertFalse(node0.equals((Object)node1));
1633:       assertFalse(node1.equals((Object)node0));
1634:       assertFalse(node1.equals((Object)node2));
1635:       assertFalse(node2.equals((Object)node1));
1636:       assertFalse(node2.equals((Object)node0));
1637:       assertTrue(boolean1 == boolean0);
1638:       assertFalse(node0.isDo());
1639:       assertFalse(node0.isContinue());
1640:       assertFalse(node0.isAdd());
1641:       assertFalse(node0.hasMoreThanOneChild());
1642:       assertFalse(node0.isReturn());
1643:       assertFalse(node0.isLabel());
1644:       assertTrue(node0.isGetterDef());
1645:       assertFalse(node0.isNew());
1646:       assertFalse(node0.isBlock());
1647:       assertFalse(node0.isVar());
1648:       assertFalse(node0.isAssignAdd());
1649:       assertFalse(node0.isWhile());
1650:       assertFalse(node0.hasChildren());
1651:       assertFalse(node0.isTypeOf());
1652:       assertFalse(node0.isNull());
1653:       assertFalse(node0.isAssign());
1654:       assertFalse(node0.isDec());
1655:       assertFalse(node0.isCall());
1656:       assertFalse(node0.isSetterDef());
1657:       assertFalse(node0.isGetElem());
1658:       assertEquals(147, node0.getType());
1659:       assertFalse(node0.isOr());
1660:       assertFalse(node0.isName());
1661:       assertFalse(node0.isDefaultCase());
1662:       assertFalse(node0.isRegExp());
1663:       assertFalse(node0.isScript());
1664:       assertFalse(node0.isCatch());
1665:       assertFalse(node0.isWith());
1666:       assertFalse(node0.isInstanceOf());
1667:       assertEquals(0, node0.getChildCount());
1668:       assertFalse(node0.isTry());
1669:       assertFalse(node0.hasOneChild());
1670:       assertFalse(node0.isThis());
1671:       assertFalse(node0.isFor());
1672:       assertFalse(node0.isNumber());
1673:       assertFalse(node0.isLabelName());
1674:       assertFalse(node0.isArrayLit());
1675:       assertFalse(node0.isSwitch());
1676:       assertFalse(node0.isParamList());
1677:       assertFalse(node0.isStringKey());
1678:       assertFalse(node0.isCase());
1679:       assertFalse(node0.isInc());
1680:       assertFalse(node0.isString());
1681:       assertFalse(node0.isHook());
1682:       assertFalse(node0.isThrow());
1683:       assertFalse(node0.isIf());
1684:       assertFalse(node0.isBreak());
1685:       assertFalse(node0.isDelProp());
1686:       assertFalse(node0.isComma());
1687:       assertEquals(11079682, node0.getSourcePosition());
1688:       assertFalse(node0.isEmpty());
1689:       assertFalse(node0.isIn());
1690:       assertFalse(node0.isVoid());
1691:       assertFalse(node0.isTrue());
1692:       assertFalse(node0.isNE());
1693:       assertEquals(2, node0.getCharno());
1694:       assertFalse(node0.isNot());
1695:       assertFalse(node0.isDebugger());
1696:       assertEquals(2705, node0.getLineno());
1697:       assertFalse(node0.isExprResult());
1698:       assertFalse(node0.isFunction());
1699:       assertFalse(node0.isObjectLit());
1700:       assertFalse(node0.isGetProp());
1701:       assertFalse(node0.isFalse());
1702:       assertFalse(node0.isCast());
1703:       assertFalse(node0.isAnd());
1704:       assertFalse(node1.isCall());
1705:       assertFalse(node1.isVar());
1706:       assertFalse(node1.isStringKey());
1707:       assertFalse(node1.isNew());
1708:       assertFalse(node1.isName());
1709:       assertFalse(node1.isBlock());
1710:       assertFalse(node1.isContinue());
1711:       assertFalse(node1.isWhile());
1712:       assertFalse(node1.isParamList());
1713:       assertFalse(node1.isDebugger());
1714:       assertFalse(node1.isNumber());
1715:       assertFalse(node1.isFor());
1716:       assertFalse(node1.isCast());
1717:       assertFalse(node1.isIf());
1718:       assertFalse(node1.isTry());
1719:       assertEquals(2797618, node1.getSourcePosition());
1720:       assertFalse(node1.isFunction());
1721:       assertEquals(50, node1.getCharno());
1722:       assertTrue(node1.hasChildren());
1723:       assertEquals(1, node1.getChildCount());
1724:       assertFalse(node1.isWith());
1725:       assertFalse(node1.isRegExp());
1726:       assertFalse(node1.hasMoreThanOneChild());
1727:       assertFalse(node1.isCatch());
1728:       assertFalse(node1.isInstanceOf());
1729:       assertFalse(node1.isInc());
1730:       assertFalse(node1.isSetterDef());
1731:       assertFalse(node1.isNE());
1732:       assertFalse(node1.isIn());
1733:       assertFalse(node1.isFalse());
1734:       assertEquals(683, node1.getLineno());
1735:       assertFalse(node1.isThrow());
1736:       assertFalse(node1.isBreak());
1737:       assertFalse(node1.isThis());
1738:       assertEquals(0, node1.getType());
1739:       assertFalse(node1.isHook());
1740:       assertFalse(node1.isComma());
1741:       assertFalse(node1.isObjectLit());
1742:       assertFalse(node1.isAnd());
1743:       assertFalse(node1.isCase());
1744:       assertFalse(node1.isSwitch());
1745:       assertFalse(node1.isGetProp());
1746:       assertFalse(node1.isScript());
1747:       assertFalse(node1.isGetterDef());
1748:       assertFalse(node1.isString());
1749:       assertFalse(node1.isNot());
1750:       assertFalse(node1.isGetElem());
1751:       assertFalse(node1.isEmpty());
1752:       assertFalse(node1.isDelProp());
1753:       assertFalse(node1.isArrayLit());
1754:       assertFalse(node1.isLabelName());
1755:       assertFalse(node1.isExprResult());
1756:       assertFalse(node1.isReturn());
1757:       assertTrue(node1.hasOneChild());
1758:       assertFalse(node1.isLabel());
1759:       assertFalse(node1.isTypeOf());
1760:       assertFalse(node1.isAssign());
1761:       assertFalse(node1.isDec());
1762:       assertFalse(node1.isAssignAdd());
1763:       assertFalse(node1.isDefaultCase());
1764:       assertFalse(node1.isDo());
1765:       assertFalse(node1.isTrue());
1766:       assertFalse(node1.isVoid());
1767:       assertFalse(node1.isAdd());
1768:       assertFalse(node1.isNull());
1769:       assertFalse(node1.isOr());
1770:       assertFalse(node2.isCall());
1771:       assertFalse(node2.isStringKey());
1772:       assertFalse(node2.isVar());
1773:       assertFalse(node2.isName());
1774:       assertFalse(node2.isNew());
1775:       assertFalse(node2.isParamList());
1776:       assertFalse(node2.isAdd());
1777:       assertFalse(node2.isNull());
1778:       assertFalse(node2.isSetterDef());
1779:       assertFalse(node2.isCatch());
1780:       assertFalse(node2.isWhile());
1781:       assertFalse(node2.isVoid());
1782:       assertEquals(2797618, node2.getSourcePosition());
1783:       assertFalse(node2.isReturn());
1784:       assertFalse(node2.isBlock());
1785:       assertFalse(node2.hasChildren());
1786:       assertFalse(node2.isDec());
1787:       assertFalse(node2.isTypeOf());
1788:       assertFalse(node2.isRegExp());
1789:       assertFalse(node2.isAssign());
1790:       assertFalse(node2.hasMoreThanOneChild());
1791:       assertFalse(node2.isCast());
1792:       assertFalse(node2.isIf());
1793:       assertEquals(50, node2.getCharno());
1794:       assertFalse(node2.isDebugger());
1795:       assertFalse(node2.isNE());
1796:       assertFalse(node2.isIn());
1797:       assertFalse(node2.isNot());
1798:       assertFalse(node2.isContinue());
1799:       assertFalse(node2.isObjectLit());
1800:       assertFalse(node2.isAnd());
1801:       assertFalse(node2.isFalse());
1802:       assertFalse(node2.isFunction());
1803:       assertEquals(683, node2.getLineno());
1804:       assertFalse(node2.isThrow());
1805:       assertFalse(node2.isHook());
1806:       assertFalse(node2.isBreak());
1807:       assertFalse(node2.isInc());
1808:       assertFalse(node2.isGetProp());
1809:       assertFalse(node2.isString());
1810:       assertFalse(node2.isCase());
1811:       assertFalse(node2.isExprResult());
1812:       assertFalse(node2.isComma());
1813:       assertEquals(0, node2.getType());
1814:       assertFalse(node2.isThis());
1815:       assertFalse(node2.isInstanceOf());
1816:       assertFalse(node2.isWith());
1817:       assertFalse(node2.isArrayLit());
1818:       assertFalse(node2.isFor());
1819:       assertFalse(node2.isEmpty());
1820:       assertFalse(node2.isGetElem());
1821:       assertFalse(node2.isDelProp());
1822:       assertFalse(node2.hasOneChild());
1823:       assertFalse(node2.isTry());
1824:       assertFalse(node2.isLabelName());
1825:       assertFalse(node2.isTrue());
1826:       assertFalse(node2.isScript());
1827:       assertFalse(node2.isGetterDef());
1828:       assertFalse(node2.isOr());
1829:       assertFalse(node2.isNumber());
1830:       assertFalse(node2.isDo());
1831:       assertFalse(node2.isAssignAdd());
1832:       assertFalse(node2.isDefaultCase());
1833:       assertFalse(node2.isSwitch());
1834:       assertFalse(node2.isLabel());
1835:       assertEquals(0, node2.getChildCount());
1836:       
1837:       Node node3 = new Node(57);
1838:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1839:       assertEquals(12, Node.COLUMN_BITS);
1840:       assertEquals(46, Node.IS_NAMESPACE);
1841:       assertEquals(32, Node.INCRDECR_PROP);
1842:       assertEquals(49, Node.DIRECT_EVAL);
1843:       assertEquals(1, Node.DECR_FLAG);
1844:       assertEquals(37, Node.OPT_ARG_NAME);
1845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1846:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1847:       assertEquals(56, Node.CHANGE_TIME);
1848:       assertEquals(54, Node.SLASH_V);
1849:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1850:       assertEquals(57, Node.REFLECTED_OBJECT);
1851:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1853:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1854:       assertEquals(4095, Node.COLUMN_MASK);
1855:       assertEquals(55, Node.INFERRED_FUNCTION);
1856:       assertEquals(48, Node.DIRECTIVES);
1857:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1858:       assertEquals(39, Node.EMPTY_BLOCK);
1859:       assertEquals(43, Node.IS_CONSTANT_NAME);
1860:       assertEquals(36, Node.QUOTED_PROP);
1861:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1862:       assertEquals(8, Node.FLAG_NO_THROWS);
1863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1864:       assertEquals(50, Node.FREE_CALL);
1865:       assertEquals(52, Node.LENGTH);
1866:       assertEquals(53, Node.INPUT_ID);
1867:       assertEquals(29, Node.JSDOC_INFO_PROP);
1868:       assertEquals(40, Node.ORIGINALNAME_PROP);
1869:       assertEquals(2, Node.POST_FLAG);
1870:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1871:       assertEquals(57, Node.LAST_PROP);
1872:       assertEquals(30, Node.VAR_ARGS_NAME);
1873:       assertEquals(47, Node.IS_DISPATCHER);
1874:       assertNotNull(node3);
1875:       assertFalse(node3.equals((Object)node1));
1876:       assertFalse(node3.equals((Object)node2));
1877:       assertFalse(node3.equals((Object)node0));
1878:       assertFalse(node3.isCase());
1879:       assertFalse(node3.isInc());
1880:       assertFalse(node3.isIn());
1881:       assertFalse(node3.isString());
1882:       assertEquals((-1), node3.getCharno());
1883:       assertFalse(node3.isSwitch());
1884:       assertFalse(node3.isNE());
1885:       assertFalse(node3.isIf());
1886:       assertFalse(node3.isFor());
1887:       assertFalse(node3.isGetterDef());
1888:       assertFalse(node3.isDelProp());
1889:       assertFalse(node3.isBreak());
1890:       assertFalse(node3.isComma());
1891:       assertFalse(node3.isTry());
1892:       assertFalse(node3.isHook());
1893:       assertFalse(node3.isGetProp());
1894:       assertFalse(node3.isThis());
1895:       assertFalse(node3.isScript());
1896:       assertFalse(node3.isExprResult());
1897:       assertFalse(node3.isArrayLit());
1898:       assertFalse(node3.isNull());
1899:       assertFalse(node3.isTrue());
1900:       assertFalse(node3.isVoid());
1901:       assertFalse(node3.isParamList());
1902:       assertFalse(node3.isLabelName());
1903:       assertFalse(node3.isEmpty());
1904:       assertFalse(node3.isAssignAdd());
1905:       assertFalse(node3.isAdd());
1906:       assertEquals(0, node3.getChildCount());
1907:       assertFalse(node3.isNew());
1908:       assertFalse(node3.isLabel());
1909:       assertFalse(node3.isVar());
1910:       assertFalse(node3.isDefaultCase());
1911:       assertFalse(node3.isDo());
1912:       assertFalse(node3.hasMoreThanOneChild());
1913:       assertFalse(node3.isContinue());
1914:       assertFalse(node3.isOr());
1915:       assertEquals((-1), node3.getLineno());
1916:       assertFalse(node3.isStringKey());
1917:       assertFalse(node3.isAssign());
1918:       assertFalse(node3.isName());
1919:       assertFalse(node3.isGetElem());
1920:       assertFalse(node3.isDec());
1921:       assertFalse(node3.hasChildren());
1922:       assertEquals((-1), node3.getSourcePosition());
1923:       assertFalse(node3.isCall());
1924:       assertFalse(node3.isTypeOf());
1925:       assertFalse(node3.isNumber());
1926:       assertFalse(node3.isReturn());
1927:       assertFalse(node3.isBlock());
1928:       assertFalse(node3.hasOneChild());
1929:       assertFalse(node3.isWhile());
1930:       assertFalse(node3.isWith());
1931:       assertFalse(node3.isNot());
1932:       assertFalse(node3.isCatch());
1933:       assertFalse(node3.isRegExp());
1934:       assertFalse(node3.isFunction());
1935:       assertFalse(node3.isObjectLit());
1936:       assertFalse(node3.isInstanceOf());
1937:       assertFalse(node3.isDebugger());
1938:       assertEquals(57, node3.getType());
1939:       assertFalse(node3.isAnd());
1940:       assertFalse(node3.isSetterDef());
1941:       assertFalse(node3.isCast());
1942:       assertFalse(node3.isFalse());
1943:       assertFalse(node3.isThrow());
1944:       
1945:       int int0 = node3.getLineno();
1946:       assertEquals((-1), int0);
1947:       assertNotSame(node3, node1);
1948:       assertNotSame(node3, node2);
1949:       assertNotSame(node3, node0);
1950:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1951:       assertEquals(12, Node.COLUMN_BITS);
1952:       assertEquals(46, Node.IS_NAMESPACE);
1953:       assertEquals(32, Node.INCRDECR_PROP);
1954:       assertEquals(49, Node.DIRECT_EVAL);
1955:       assertEquals(1, Node.DECR_FLAG);
1956:       assertEquals(37, Node.OPT_ARG_NAME);
1957:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1959:       assertEquals(56, Node.CHANGE_TIME);
1960:       assertEquals(54, Node.SLASH_V);
1961:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1962:       assertEquals(57, Node.REFLECTED_OBJECT);
1963:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1966:       assertEquals(4095, Node.COLUMN_MASK);
1967:       assertEquals(55, Node.INFERRED_FUNCTION);
1968:       assertEquals(48, Node.DIRECTIVES);
1969:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1970:       assertEquals(39, Node.EMPTY_BLOCK);
1971:       assertEquals(43, Node.IS_CONSTANT_NAME);
1972:       assertEquals(36, Node.QUOTED_PROP);
1973:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1974:       assertEquals(8, Node.FLAG_NO_THROWS);
1975:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1976:       assertEquals(50, Node.FREE_CALL);
1977:       assertEquals(52, Node.LENGTH);
1978:       assertEquals(53, Node.INPUT_ID);
1979:       assertEquals(29, Node.JSDOC_INFO_PROP);
1980:       assertEquals(40, Node.ORIGINALNAME_PROP);
1981:       assertEquals(2, Node.POST_FLAG);
1982:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1983:       assertEquals(57, Node.LAST_PROP);
1984:       assertEquals(30, Node.VAR_ARGS_NAME);
1985:       assertEquals(47, Node.IS_DISPATCHER);
1986:       assertFalse(node3.equals((Object)node1));
1987:       assertFalse(node3.equals((Object)node2));
1988:       assertFalse(node3.equals((Object)node0));
1989:       assertFalse(node3.isCase());
1990:       assertFalse(node3.isInc());
1991:       assertFalse(node3.isIn());
1992:       assertFalse(node3.isString());
1993:       assertEquals((-1), node3.getCharno());
1994:       assertFalse(node3.isSwitch());
1995:       assertFalse(node3.isNE());
1996:       assertFalse(node3.isIf());
1997:       assertFalse(node3.isFor());
1998:       assertFalse(node3.isGetterDef());
1999:       assertFalse(node3.isDelProp());
2000:       assertFalse(node3.isBreak());
2001:       assertFalse(node3.isComma());
2002:       assertFalse(node3.isTry());
2003:       assertFalse(node3.isHook());
2004:       assertFalse(node3.isGetProp());
2005:       assertFalse(node3.isThis());
2006:       assertFalse(node3.isScript());
2007:       assertFalse(node3.isExprResult());
2008:       assertFalse(node3.isArrayLit());
2009:       assertFalse(node3.isNull());
2010:       assertFalse(node3.isTrue());
2011:       assertFalse(node3.isVoid());
2012:       assertFalse(node3.isParamList());
2013:       assertFalse(node3.isLabelName());
2014:       assertFalse(node3.isEmpty());
2015:       assertFalse(node3.isAssignAdd());
2016:       assertFalse(node3.isAdd());
2017:       assertEquals(0, node3.getChildCount());
2018:       assertFalse(node3.isNew());
2019:       assertFalse(node3.isLabel());
2020:       assertFalse(node3.isVar());
2021:       assertFalse(node3.isDefaultCase());
2022:       assertFalse(node3.isDo());
2023:       assertFalse(node3.hasMoreThanOneChild());
2024:       assertFalse(node3.isContinue());
2025:       assertFalse(node3.isOr());
2026:       assertEquals((-1), node3.getLineno());
2027:       assertFalse(node3.isStringKey());
2028:       assertFalse(node3.isAssign());
2029:       assertFalse(node3.isName());
2030:       assertFalse(node3.isGetElem());
2031:       assertFalse(node3.isDec());
2032:       assertFalse(node3.hasChildren());
2033:       assertEquals((-1), node3.getSourcePosition());
2034:       assertFalse(node3.isCall());
2035:       assertFalse(node3.isTypeOf());
2036:       assertFalse(node3.isNumber());
2037:       assertFalse(node3.isReturn());
2038:       assertFalse(node3.isBlock());
2039:       assertFalse(node3.hasOneChild());
2040:       assertFalse(node3.isWhile());
2041:       assertFalse(node3.isWith());
2042:       assertFalse(node3.isNot());
2043:       assertFalse(node3.isCatch());
2044:       assertFalse(node3.isRegExp());
2045:       assertFalse(node3.isFunction());
2046:       assertFalse(node3.isObjectLit());
2047:       assertFalse(node3.isInstanceOf());
2048:       assertFalse(node3.isDebugger());
2049:       assertEquals(57, node3.getType());
2050:       assertFalse(node3.isAnd());
2051:       assertFalse(node3.isSetterDef());
2052:       assertFalse(node3.isCast());
2053:       assertFalse(node3.isFalse());
2054:       assertFalse(node3.isThrow());
2055:       
2056:       Node[] nodeArray0 = new Node[1];
2057:       nodeArray0[0] = node0;
2058:       Node node4 = null;
2059:       try {
2060:         node4 = new Node(0, nodeArray0, 4, 758);
2061:         fail("Expecting exception: IllegalArgumentException");
2062:       
2063:       } catch(IllegalArgumentException e) {
2064:          //
2065:          // no message in exception (getMessage() returned null)
2066:          //
2067:          verifyException("com.google.common.base.Preconditions", e);
2068:       }
2069:   }
2070: }
RegularFileObject[/tmp/EvoSuite_265_1628157140601/com/google/javascript/rhino/Node_265_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:52:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_265_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_265_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.javascript.rhino.JSDocInfo$1",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_265_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.Node$AncestorIterable$1",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.JSDocInfo$Marker",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 09:52:21.064 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Stack<JSType> stack0 = new Stack<JSType>();
assertNotNull(stack0);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());

TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Element");
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(templateType0);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isFunctionType());
assertEquals("Object#Element", templateType0.getReferenceName());
assertFalse(templateType0.isUnionType());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isNullType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isResolved());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isNominalConstructor());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isRecordType());
assertFalse(templateType0.isEnumType());
assertFalse(templateType0.isEnumElementType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isTemplatizedType());

Node node0 = new Node(147, 2705, 2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Iterable<Node> iterable0 = node0.children();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Node node1 = new Node(0, node0, node0, node0, 683, 50);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(2797618, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertEquals(50, node1.getCharno());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals(683, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());

boolean boolean0 = node1.isFromExterns();
assertFalse(boolean0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(2797618, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertEquals(50, node1.getCharno());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals(683, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertNotNull(jSDocInfo0);
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getVersion());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isMappedIdGenerator());

Node node2 = node1.cloneNode();
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(2797618, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertEquals(50, node1.getCharno());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals(683, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isParamList());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertEquals(2797618, node2.getSourcePosition());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertEquals(50, node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(683, node2.getLineno());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isTrue());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNull(staticSourceFile0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(2797618, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertEquals(50, node1.getCharno());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals(683, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());

node1.setStaticSourceFile((StaticSourceFile) null);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(2797618, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertEquals(50, node1.getCharno());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals(683, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());

boolean boolean1 = node2.hasOneChild();
assertFalse(boolean1);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals(147, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertEquals(11079682, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(2, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(2705, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(2797618, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertEquals(50, node1.getCharno());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertEquals(683, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isParamList());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertEquals(2797618, node2.getSourcePosition());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertEquals(50, node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(683, node2.getLineno());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isTrue());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());

Node node3 = new Node(57);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isTry());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isArrayLit());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isCall());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDebugger());
assertEquals(57, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());

int int0 = node3.getLineno();
assertEquals((-1), int0);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isTry());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isArrayLit());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isCall());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDebugger());
assertEquals(57, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());

Node[] nodeArray0 = new Node[1];
nodeArray0[0] = node0;
Node node4 = new Node(0, nodeArray0, 4, 758);

[MASTER] 09:52:22.428 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_282_1628157142321/com/google/javascript/rhino/Node_282_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_282_1628157142321/com/google/javascript/rhino/Node_282_tmp__ESTest_scaffolding.java]]
[MASTER] 09:52:22.428 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:22.428 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:22.429 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1012
[MASTER] 09:52:22.430 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_282_1628157142321/com/google/javascript/rhino/Node_282_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:52:22 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.JSType;
13: import java.util.Stack;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_282_tmp__ESTest extends Node_282_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newNumber((double) 111, 111, 111);
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(8, Node.FLAG_NO_THROWS);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(30, Node.VAR_ARGS_NAME);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(37, Node.OPT_ARG_NAME);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(32, Node.INCRDECR_PROP);
40:       assertEquals(56, Node.CHANGE_TIME);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(51, Node.STATIC_SOURCE_FILE);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(46, Node.IS_NAMESPACE);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(1, Node.DECR_FLAG);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(52, Node.LENGTH);
54:       assertEquals(57, Node.REFLECTED_OBJECT);
55:       assertEquals(36, Node.QUOTED_PROP);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
58:       assertEquals(4095, Node.COLUMN_MASK);
59:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
60:       assertNotNull(node0);
61:       assertFalse(node0.isInstanceOf());
62:       assertFalse(node0.isAnd());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isObjectLit());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isLabelName());
69:       assertFalse(node0.isThrow());
70:       assertFalse(node0.isSwitch());
71:       assertFalse(node0.isLabel());
72:       assertFalse(node0.isFalse());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isInc());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.hasOneChild());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isIf());
83:       assertFalse(node0.isRegExp());
84:       assertEquals(111, node0.getCharno());
85:       assertFalse(node0.isBlock());
86:       assertEquals(39, node0.getType());
87:       assertFalse(node0.isThis());
88:       assertFalse(node0.hasMoreThanOneChild());
89:       assertFalse(node0.isWith());
90:       assertFalse(node0.isCatch());
91:       assertEquals(0, node0.getChildCount());
92:       assertFalse(node0.isDefaultCase());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isParamList());
95:       assertFalse(node0.isTrue());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isSetterDef());
98:       assertFalse(node0.isVar());
99:       assertFalse(node0.isArrayLit());
100:       assertEquals(454767, node0.getSourcePosition());
101:       assertFalse(node0.isNew());
102:       assertEquals(111, node0.getLineno());
103:       assertFalse(node0.isStringKey());
104:       assertFalse(node0.isContinue());
105:       assertFalse(node0.isFunction());
106:       assertFalse(node0.isReturn());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isWhile());
110:       assertTrue(node0.isNumber());
111:       assertFalse(node0.isAdd());
112:       assertFalse(node0.isOr());
113:       assertFalse(node0.isEmpty());
114:       assertFalse(node0.isString());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isGetElem());
117:       assertFalse(node0.isName());
118:       assertFalse(node0.isDelProp());
119:       assertFalse(node0.isVoid());
120:       assertFalse(node0.isTypeOf());
121:       assertFalse(node0.isComma());
122:       assertFalse(node0.isDec());
123:       assertFalse(node0.isBreak());
124:       assertFalse(node0.isExprResult());
125:       assertFalse(node0.hasChildren());
126:       assertFalse(node0.isAssign());
127:       
128:       Node node1 = new Node(111, node0, node0, node0);
129:       assertEquals(48, Node.DIRECTIVES);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(55, Node.INFERRED_FUNCTION);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(30, Node.VAR_ARGS_NAME);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(32, Node.INCRDECR_PROP);
145:       assertEquals(56, Node.CHANGE_TIME);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
148:       assertEquals(12, Node.COLUMN_BITS);
149:       assertEquals(46, Node.IS_NAMESPACE);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(1, Node.DECR_FLAG);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
154:       assertEquals(29, Node.JSDOC_INFO_PROP);
155:       assertEquals(53, Node.INPUT_ID);
156:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(57, Node.REFLECTED_OBJECT);
160:       assertEquals(36, Node.QUOTED_PROP);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
163:       assertEquals(4095, Node.COLUMN_MASK);
164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
165:       assertEquals(36, Node.QUOTED_PROP);
166:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
167:       assertEquals(43, Node.IS_CONSTANT_NAME);
168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
169:       assertEquals(55, Node.INFERRED_FUNCTION);
170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
171:       assertEquals(29, Node.JSDOC_INFO_PROP);
172:       assertEquals(53, Node.INPUT_ID);
173:       assertEquals(8, Node.FLAG_NO_THROWS);
174:       assertEquals(39, Node.EMPTY_BLOCK);
175:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
176:       assertEquals(56, Node.CHANGE_TIME);
177:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
178:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
179:       assertEquals(4095, Node.COLUMN_MASK);
180:       assertEquals(57, Node.REFLECTED_OBJECT);
181:       assertEquals(49, Node.DIRECT_EVAL);
182:       assertEquals(37, Node.OPT_ARG_NAME);
183:       assertEquals(48, Node.DIRECTIVES);
184:       assertEquals(15, Node.NO_SIDE_EFFECTS);
185:       assertEquals(57, Node.LAST_PROP);
186:       assertEquals(54, Node.SLASH_V);
187:       assertEquals(52, Node.LENGTH);
188:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
189:       assertEquals(30, Node.VAR_ARGS_NAME);
190:       assertEquals(12, Node.COLUMN_BITS);
191:       assertEquals(32, Node.INCRDECR_PROP);
192:       assertEquals(1, Node.DECR_FLAG);
193:       assertEquals(2, Node.POST_FLAG);
194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
195:       assertEquals(47, Node.IS_DISPATCHER);
196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
199:       assertEquals(40, Node.ORIGINALNAME_PROP);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertNotNull(node1);
202:       assertFalse(node1.equals((Object)node0));
203:       assertFalse(node0.isInstanceOf());
204:       assertFalse(node0.isAnd());
205:       assertFalse(node0.isScript());
206:       assertFalse(node0.isGetProp());
207:       assertFalse(node0.isNot());
208:       assertFalse(node0.isObjectLit());
209:       assertFalse(node0.isCast());
210:       assertFalse(node0.isLabelName());
211:       assertFalse(node0.isThrow());
212:       assertFalse(node0.isSwitch());
213:       assertFalse(node0.isLabel());
214:       assertFalse(node0.isFalse());
215:       assertFalse(node0.isCase());
216:       assertFalse(node0.isNE());
217:       assertFalse(node0.isInc());
218:       assertFalse(node0.isGetterDef());
219:       assertFalse(node0.isIn());
220:       assertFalse(node0.hasOneChild());
221:       assertFalse(node0.isHook());
222:       assertFalse(node0.isTry());
223:       assertFalse(node0.isFor());
224:       assertFalse(node0.isIf());
225:       assertFalse(node0.isRegExp());
226:       assertEquals(111, node0.getCharno());
227:       assertFalse(node0.isBlock());
228:       assertEquals(39, node0.getType());
229:       assertFalse(node0.isThis());
230:       assertFalse(node0.hasMoreThanOneChild());
231:       assertFalse(node0.isWith());
232:       assertFalse(node0.isCatch());
233:       assertEquals(0, node0.getChildCount());
234:       assertFalse(node0.isDefaultCase());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isParamList());
237:       assertFalse(node0.isTrue());
238:       assertFalse(node0.isDebugger());
239:       assertFalse(node0.isSetterDef());
240:       assertFalse(node0.isVar());
241:       assertFalse(node0.isArrayLit());
242:       assertEquals(454767, node0.getSourcePosition());
243:       assertFalse(node0.isNew());
244:       assertEquals(111, node0.getLineno());
245:       assertFalse(node0.isStringKey());
246:       assertFalse(node0.isContinue());
247:       assertFalse(node0.isFunction());
248:       assertFalse(node0.isReturn());
249:       assertFalse(node0.isDo());
250:       assertFalse(node0.isAssignAdd());
251:       assertFalse(node0.isWhile());
252:       assertTrue(node0.isNumber());
253:       assertFalse(node0.isAdd());
254:       assertFalse(node0.isOr());
255:       assertFalse(node0.isEmpty());
256:       assertFalse(node0.isString());
257:       assertFalse(node0.isCall());
258:       assertFalse(node0.isGetElem());
259:       assertFalse(node0.isName());
260:       assertFalse(node0.isDelProp());
261:       assertFalse(node0.isVoid());
262:       assertFalse(node0.isTypeOf());
263:       assertFalse(node0.isComma());
264:       assertFalse(node0.isDec());
265:       assertFalse(node0.isBreak());
266:       assertFalse(node0.isExprResult());
267:       assertFalse(node0.hasChildren());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node1.isTry());
270:       assertFalse(node1.isVoid());
271:       assertFalse(node1.isTrue());
272:       assertFalse(node1.isDebugger());
273:       assertFalse(node1.isFor());
274:       assertFalse(node1.isDefaultCase());
275:       assertFalse(node1.isGetterDef());
276:       assertFalse(node1.isEmpty());
277:       assertEquals(1, node1.getChildCount());
278:       assertEquals(111, node1.getType());
279:       assertFalse(node1.isIn());
280:       assertFalse(node1.isNull());
281:       assertFalse(node1.isNE());
282:       assertTrue(node1.hasOneChild());
283:       assertFalse(node1.isIf());
284:       assertFalse(node1.isName());
285:       assertFalse(node1.isRegExp());
286:       assertFalse(node1.isDelProp());
287:       assertFalse(node1.isCall());
288:       assertFalse(node1.isCatch());
289:       assertTrue(node1.hasChildren());
290:       assertTrue(node1.isCase());
291:       assertFalse(node1.isThrow());
292:       assertFalse(node1.isWhile());
293:       assertFalse(node1.isString());
294:       assertFalse(node1.isSetterDef());
295:       assertFalse(node1.isInc());
296:       assertFalse(node1.isGetProp());
297:       assertFalse(node1.isAnd());
298:       assertFalse(node1.isFalse());
299:       assertFalse(node1.isFunction());
300:       assertFalse(node1.isContinue());
301:       assertFalse(node1.isCast());
302:       assertFalse(node1.isNumber());
303:       assertEquals((-1), node1.getSourcePosition());
304:       assertFalse(node1.isObjectLit());
305:       assertFalse(node1.isNot());
306:       assertFalse(node1.isScript());
307:       assertFalse(node1.isReturn());
308:       assertEquals((-1), node1.getLineno());
309:       assertFalse(node1.isOr());
310:       assertFalse(node1.isThis());
311:       assertFalse(node1.isComma());
312:       assertFalse(node1.isWith());
313:       assertFalse(node1.isBreak());
314:       assertFalse(node1.isDec());
315:       assertFalse(node1.isTypeOf());
316:       assertFalse(node1.isAssign());
317:       assertFalse(node1.hasMoreThanOneChild());
318:       assertFalse(node1.isExprResult());
319:       assertFalse(node1.isGetElem());
320:       assertFalse(node1.isInstanceOf());
321:       assertFalse(node1.isNew());
322:       assertFalse(node1.isSwitch());
323:       assertEquals((-1), node1.getCharno());
324:       assertFalse(node1.isBlock());
325:       assertFalse(node1.isStringKey());
326:       assertFalse(node1.isHook());
327:       assertFalse(node1.isVar());
328:       assertFalse(node1.isDo());
329:       assertFalse(node1.isAdd());
330:       assertFalse(node1.isLabel());
331:       assertFalse(node1.isAssignAdd());
332:       assertFalse(node1.isParamList());
333:       assertFalse(node1.isLabelName());
334:       assertFalse(node1.isArrayLit());
335:       
336:       Node node2 = node1.getChildBefore((Node) null);
337:       assertSame(node0, node2);
338:       assertSame(node2, node0);
339:       assertEquals(48, Node.DIRECTIVES);
340:       assertEquals(8, Node.FLAG_NO_THROWS);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
343:       assertEquals(50, Node.FREE_CALL);
344:       assertEquals(55, Node.INFERRED_FUNCTION);
345:       assertEquals(39, Node.EMPTY_BLOCK);
346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
347:       assertEquals(57, Node.LAST_PROP);
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(30, Node.VAR_ARGS_NAME);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(37, Node.OPT_ARG_NAME);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(32, Node.INCRDECR_PROP);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
358:       assertEquals(12, Node.COLUMN_BITS);
359:       assertEquals(46, Node.IS_NAMESPACE);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(1, Node.DECR_FLAG);
362:       assertEquals(15, Node.NO_SIDE_EFFECTS);
363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
364:       assertEquals(29, Node.JSDOC_INFO_PROP);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(57, Node.REFLECTED_OBJECT);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(49, Node.DIRECT_EVAL);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
375:       assertEquals(36, Node.QUOTED_PROP);
376:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
377:       assertEquals(43, Node.IS_CONSTANT_NAME);
378:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
379:       assertEquals(55, Node.INFERRED_FUNCTION);
380:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
381:       assertEquals(29, Node.JSDOC_INFO_PROP);
382:       assertEquals(53, Node.INPUT_ID);
383:       assertEquals(8, Node.FLAG_NO_THROWS);
384:       assertEquals(39, Node.EMPTY_BLOCK);
385:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
386:       assertEquals(56, Node.CHANGE_TIME);
387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
389:       assertEquals(4095, Node.COLUMN_MASK);
390:       assertEquals(57, Node.REFLECTED_OBJECT);
391:       assertEquals(49, Node.DIRECT_EVAL);
392:       assertEquals(37, Node.OPT_ARG_NAME);
393:       assertEquals(48, Node.DIRECTIVES);
394:       assertEquals(15, Node.NO_SIDE_EFFECTS);
395:       assertEquals(57, Node.LAST_PROP);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(52, Node.LENGTH);
398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(12, Node.COLUMN_BITS);
401:       assertEquals(32, Node.INCRDECR_PROP);
402:       assertEquals(1, Node.DECR_FLAG);
403:       assertEquals(2, Node.POST_FLAG);
404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertEquals(50, Node.FREE_CALL);
408:       assertEquals(51, Node.STATIC_SOURCE_FILE);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(2, Node.POST_FLAG);
412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
413:       assertEquals(56, Node.CHANGE_TIME);
414:       assertEquals(37, Node.OPT_ARG_NAME);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(32, Node.INCRDECR_PROP);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(12, Node.COLUMN_BITS);
419:       assertEquals(30, Node.VAR_ARGS_NAME);
420:       assertEquals(43, Node.IS_CONSTANT_NAME);
421:       assertEquals(54, Node.SLASH_V);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
425:       assertEquals(46, Node.IS_NAMESPACE);
426:       assertEquals(50, Node.FREE_CALL);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(36, Node.QUOTED_PROP);
435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
436:       assertEquals(49, Node.DIRECT_EVAL);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(57, Node.LAST_PROP);
439:       assertEquals(55, Node.INFERRED_FUNCTION);
440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
441:       assertEquals(57, Node.REFLECTED_OBJECT);
442:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(53, Node.INPUT_ID);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(8, Node.FLAG_NO_THROWS);
447:       assertNotNull(node2);
448:       assertFalse(node0.equals((Object)node1));
449:       assertFalse(node1.equals((Object)node0));
450:       assertFalse(node2.equals((Object)node1));
451:       assertFalse(node0.isInstanceOf());
452:       assertFalse(node0.isAnd());
453:       assertFalse(node0.isScript());
454:       assertFalse(node0.isGetProp());
455:       assertFalse(node0.isNot());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isCast());
458:       assertFalse(node0.isLabelName());
459:       assertFalse(node0.isThrow());
460:       assertFalse(node0.isSwitch());
461:       assertFalse(node0.isLabel());
462:       assertFalse(node0.isFalse());
463:       assertFalse(node0.isCase());
464:       assertFalse(node0.isNE());
465:       assertFalse(node0.isInc());
466:       assertFalse(node0.isGetterDef());
467:       assertFalse(node0.isIn());
468:       assertFalse(node0.hasOneChild());
469:       assertFalse(node0.isHook());
470:       assertFalse(node0.isTry());
471:       assertFalse(node0.isFor());
472:       assertFalse(node0.isIf());
473:       assertFalse(node0.isRegExp());
474:       assertEquals(111, node0.getCharno());
475:       assertFalse(node0.isBlock());
476:       assertEquals(39, node0.getType());
477:       assertFalse(node0.isThis());
478:       assertFalse(node0.hasMoreThanOneChild());
479:       assertFalse(node0.isWith());
480:       assertFalse(node0.isCatch());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isNull());
484:       assertFalse(node0.isParamList());
485:       assertFalse(node0.isTrue());
486:       assertFalse(node0.isDebugger());
487:       assertFalse(node0.isSetterDef());
488:       assertFalse(node0.isVar());
489:       assertFalse(node0.isArrayLit());
490:       assertEquals(454767, node0.getSourcePosition());
491:       assertFalse(node0.isNew());
492:       assertEquals(111, node0.getLineno());
493:       assertFalse(node0.isStringKey());
494:       assertFalse(node0.isContinue());
495:       assertFalse(node0.isFunction());
496:       assertFalse(node0.isReturn());
497:       assertFalse(node0.isDo());
498:       assertFalse(node0.isAssignAdd());
499:       assertFalse(node0.isWhile());
500:       assertTrue(node0.isNumber());
501:       assertFalse(node0.isAdd());
502:       assertFalse(node0.isOr());
503:       assertFalse(node0.isEmpty());
504:       assertFalse(node0.isString());
505:       assertFalse(node0.isCall());
506:       assertFalse(node0.isGetElem());
507:       assertFalse(node0.isName());
508:       assertFalse(node0.isDelProp());
509:       assertFalse(node0.isVoid());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isComma());
512:       assertFalse(node0.isDec());
513:       assertFalse(node0.isBreak());
514:       assertFalse(node0.isExprResult());
515:       assertFalse(node0.hasChildren());
516:       assertFalse(node0.isAssign());
517:       assertFalse(node1.isTry());
518:       assertFalse(node1.isVoid());
519:       assertFalse(node1.isTrue());
520:       assertFalse(node1.isDebugger());
521:       assertFalse(node1.isFor());
522:       assertFalse(node1.isDefaultCase());
523:       assertFalse(node1.isGetterDef());
524:       assertFalse(node1.isEmpty());
525:       assertEquals(1, node1.getChildCount());
526:       assertEquals(111, node1.getType());
527:       assertFalse(node1.isIn());
528:       assertFalse(node1.isNull());
529:       assertFalse(node1.isNE());
530:       assertTrue(node1.hasOneChild());
531:       assertFalse(node1.isIf());
532:       assertFalse(node1.isName());
533:       assertFalse(node1.isRegExp());
534:       assertFalse(node1.isDelProp());
535:       assertFalse(node1.isCall());
536:       assertFalse(node1.isCatch());
537:       assertTrue(node1.hasChildren());
538:       assertTrue(node1.isCase());
539:       assertFalse(node1.isThrow());
540:       assertFalse(node1.isWhile());
541:       assertFalse(node1.isString());
542:       assertFalse(node1.isSetterDef());
543:       assertFalse(node1.isInc());
544:       assertFalse(node1.isGetProp());
545:       assertFalse(node1.isAnd());
546:       assertFalse(node1.isFalse());
547:       assertFalse(node1.isFunction());
548:       assertFalse(node1.isContinue());
549:       assertFalse(node1.isCast());
550:       assertFalse(node1.isNumber());
551:       assertEquals((-1), node1.getSourcePosition());
552:       assertFalse(node1.isObjectLit());
553:       assertFalse(node1.isNot());
554:       assertFalse(node1.isScript());
555:       assertFalse(node1.isReturn());
556:       assertEquals((-1), node1.getLineno());
557:       assertFalse(node1.isOr());
558:       assertFalse(node1.isThis());
559:       assertFalse(node1.isComma());
560:       assertFalse(node1.isWith());
561:       assertFalse(node1.isBreak());
562:       assertFalse(node1.isDec());
563:       assertFalse(node1.isTypeOf());
564:       assertFalse(node1.isAssign());
565:       assertFalse(node1.hasMoreThanOneChild());
566:       assertFalse(node1.isExprResult());
567:       assertFalse(node1.isGetElem());
568:       assertFalse(node1.isInstanceOf());
569:       assertFalse(node1.isNew());
570:       assertFalse(node1.isSwitch());
571:       assertEquals((-1), node1.getCharno());
572:       assertFalse(node1.isBlock());
573:       assertFalse(node1.isStringKey());
574:       assertFalse(node1.isHook());
575:       assertFalse(node1.isVar());
576:       assertFalse(node1.isDo());
577:       assertFalse(node1.isAdd());
578:       assertFalse(node1.isLabel());
579:       assertFalse(node1.isAssignAdd());
580:       assertFalse(node1.isParamList());
581:       assertFalse(node1.isLabelName());
582:       assertFalse(node1.isArrayLit());
583:       assertTrue(node2.isNumber());
584:       assertFalse(node2.isIn());
585:       assertFalse(node2.isCase());
586:       assertFalse(node2.isFor());
587:       assertFalse(node2.isTry());
588:       assertFalse(node2.isArrayLit());
589:       assertFalse(node2.isString());
590:       assertFalse(node2.isGetterDef());
591:       assertFalse(node2.isSwitch());
592:       assertFalse(node2.isDebugger());
593:       assertEquals(0, node2.getChildCount());
594:       assertFalse(node2.isBreak());
595:       assertFalse(node2.isGetProp());
596:       assertFalse(node2.isDefaultCase());
597:       assertFalse(node2.isComma());
598:       assertFalse(node2.isVar());
599:       assertFalse(node2.isAdd());
600:       assertFalse(node2.isCall());
601:       assertFalse(node2.isExprResult());
602:       assertFalse(node2.isVoid());
603:       assertFalse(node2.isNew());
604:       assertFalse(node2.isGetElem());
605:       assertFalse(node2.isDelProp());
606:       assertFalse(node2.isEmpty());
607:       assertFalse(node2.isName());
608:       assertFalse(node2.isTrue());
609:       assertFalse(node2.isNull());
610:       assertFalse(node2.isReturn());
611:       assertFalse(node2.isOr());
612:       assertFalse(node2.isAssignAdd());
613:       assertFalse(node2.isWhile());
614:       assertFalse(node2.isDo());
615:       assertFalse(node2.isAssign());
616:       assertFalse(node2.isTypeOf());
617:       assertFalse(node2.isContinue());
618:       assertFalse(node2.hasMoreThanOneChild());
619:       assertFalse(node2.isBlock());
620:       assertFalse(node2.isDec());
621:       assertFalse(node2.isLabel());
622:       assertEquals(39, node2.getType());
623:       assertFalse(node2.hasChildren());
624:       assertFalse(node2.isScript());
625:       assertFalse(node2.isCast());
626:       assertFalse(node2.hasOneChild());
627:       assertFalse(node2.isLabelName());
628:       assertFalse(node2.isNot());
629:       assertFalse(node2.isStringKey());
630:       assertFalse(node2.isAnd());
631:       assertFalse(node2.isParamList());
632:       assertFalse(node2.isObjectLit());
633:       assertFalse(node2.isInstanceOf());
634:       assertFalse(node2.isSetterDef());
635:       assertFalse(node2.isCatch());
636:       assertFalse(node2.isWith());
637:       assertFalse(node2.isFalse());
638:       assertFalse(node2.isThis());
639:       assertFalse(node2.isFunction());
640:       assertFalse(node2.isRegExp());
641:       assertFalse(node2.isThrow());
642:       assertFalse(node2.isHook());
643:       assertEquals(111, node2.getCharno());
644:       assertEquals(111, node2.getLineno());
645:       assertFalse(node2.isInc());
646:       assertEquals(454767, node2.getSourcePosition());
647:       assertFalse(node2.isIf());
648:       assertFalse(node2.isNE());
649:       
650:       Stack<JSType> stack0 = new Stack<JSType>();
651:       assertNotNull(stack0);
652:       assertEquals("[]", stack0.toString());
653:       assertTrue(stack0.isEmpty());
654:       assertTrue(stack0.empty());
655:       assertEquals(0, stack0.size());
656:       assertEquals(10, stack0.capacity());
657:       
658:       int int0 = node2.getLength();
659:       assertEquals(0, int0);
660:       assertSame(node0, node2);
661:       assertSame(node2, node0);
662:       assertEquals(48, Node.DIRECTIVES);
663:       assertEquals(8, Node.FLAG_NO_THROWS);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
666:       assertEquals(50, Node.FREE_CALL);
667:       assertEquals(55, Node.INFERRED_FUNCTION);
668:       assertEquals(39, Node.EMPTY_BLOCK);
669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(43, Node.IS_CONSTANT_NAME);
672:       assertEquals(54, Node.SLASH_V);
673:       assertEquals(30, Node.VAR_ARGS_NAME);
674:       assertEquals(40, Node.ORIGINALNAME_PROP);
675:       assertEquals(37, Node.OPT_ARG_NAME);
676:       assertEquals(2, Node.POST_FLAG);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(56, Node.CHANGE_TIME);
679:       assertEquals(47, Node.IS_DISPATCHER);
680:       assertEquals(51, Node.STATIC_SOURCE_FILE);
681:       assertEquals(12, Node.COLUMN_BITS);
682:       assertEquals(46, Node.IS_NAMESPACE);
683:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
684:       assertEquals(1, Node.DECR_FLAG);
685:       assertEquals(15, Node.NO_SIDE_EFFECTS);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(29, Node.JSDOC_INFO_PROP);
688:       assertEquals(53, Node.INPUT_ID);
689:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
690:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
691:       assertEquals(52, Node.LENGTH);
692:       assertEquals(57, Node.REFLECTED_OBJECT);
693:       assertEquals(36, Node.QUOTED_PROP);
694:       assertEquals(49, Node.DIRECT_EVAL);
695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
696:       assertEquals(4095, Node.COLUMN_MASK);
697:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
698:       assertEquals(36, Node.QUOTED_PROP);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(43, Node.IS_CONSTANT_NAME);
701:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
702:       assertEquals(55, Node.INFERRED_FUNCTION);
703:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
704:       assertEquals(29, Node.JSDOC_INFO_PROP);
705:       assertEquals(53, Node.INPUT_ID);
706:       assertEquals(8, Node.FLAG_NO_THROWS);
707:       assertEquals(39, Node.EMPTY_BLOCK);
708:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
712:       assertEquals(4095, Node.COLUMN_MASK);
713:       assertEquals(57, Node.REFLECTED_OBJECT);
714:       assertEquals(49, Node.DIRECT_EVAL);
715:       assertEquals(37, Node.OPT_ARG_NAME);
716:       assertEquals(48, Node.DIRECTIVES);
717:       assertEquals(15, Node.NO_SIDE_EFFECTS);
718:       assertEquals(57, Node.LAST_PROP);
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(52, Node.LENGTH);
721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
722:       assertEquals(30, Node.VAR_ARGS_NAME);
723:       assertEquals(12, Node.COLUMN_BITS);
724:       assertEquals(32, Node.INCRDECR_PROP);
725:       assertEquals(1, Node.DECR_FLAG);
726:       assertEquals(2, Node.POST_FLAG);
727:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
728:       assertEquals(47, Node.IS_DISPATCHER);
729:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
730:       assertEquals(50, Node.FREE_CALL);
731:       assertEquals(51, Node.STATIC_SOURCE_FILE);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(46, Node.IS_NAMESPACE);
734:       assertEquals(2, Node.POST_FLAG);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(56, Node.CHANGE_TIME);
737:       assertEquals(37, Node.OPT_ARG_NAME);
738:       assertEquals(47, Node.IS_DISPATCHER);
739:       assertEquals(32, Node.INCRDECR_PROP);
740:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(30, Node.VAR_ARGS_NAME);
743:       assertEquals(43, Node.IS_CONSTANT_NAME);
744:       assertEquals(54, Node.SLASH_V);
745:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
746:       assertEquals(1, Node.DECR_FLAG);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(50, Node.FREE_CALL);
750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
752:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
753:       assertEquals(39, Node.EMPTY_BLOCK);
754:       assertEquals(48, Node.DIRECTIVES);
755:       assertEquals(4095, Node.COLUMN_MASK);
756:       assertEquals(40, Node.ORIGINALNAME_PROP);
757:       assertEquals(36, Node.QUOTED_PROP);
758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
761:       assertEquals(57, Node.LAST_PROP);
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
764:       assertEquals(57, Node.REFLECTED_OBJECT);
765:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
766:       assertEquals(29, Node.JSDOC_INFO_PROP);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(52, Node.LENGTH);
769:       assertEquals(8, Node.FLAG_NO_THROWS);
770:       assertFalse(node0.equals((Object)node1));
771:       assertFalse(node1.equals((Object)node0));
772:       assertFalse(node1.equals((Object)node2));
773:       assertFalse(node2.equals((Object)node1));
774:       assertFalse(node0.isInstanceOf());
775:       assertFalse(node0.isAnd());
776:       assertFalse(node0.isScript());
777:       assertFalse(node0.isGetProp());
778:       assertFalse(node0.isNot());
779:       assertFalse(node0.isObjectLit());
780:       assertFalse(node0.isCast());
781:       assertFalse(node0.isLabelName());
782:       assertFalse(node0.isThrow());
783:       assertFalse(node0.isSwitch());
784:       assertFalse(node0.isLabel());
785:       assertFalse(node0.isFalse());
786:       assertFalse(node0.isCase());
787:       assertFalse(node0.isNE());
788:       assertFalse(node0.isInc());
789:       assertFalse(node0.isGetterDef());
790:       assertFalse(node0.isIn());
791:       assertFalse(node0.hasOneChild());
792:       assertFalse(node0.isHook());
793:       assertFalse(node0.isTry());
794:       assertFalse(node0.isFor());
795:       assertFalse(node0.isIf());
796:       assertFalse(node0.isRegExp());
797:       assertEquals(111, node0.getCharno());
798:       assertFalse(node0.isBlock());
799:       assertEquals(39, node0.getType());
800:       assertFalse(node0.isThis());
801:       assertFalse(node0.hasMoreThanOneChild());
802:       assertFalse(node0.isWith());
803:       assertFalse(node0.isCatch());
804:       assertEquals(0, node0.getChildCount());
805:       assertFalse(node0.isDefaultCase());
806:       assertFalse(node0.isNull());
807:       assertFalse(node0.isParamList());
808:       assertFalse(node0.isTrue());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isSetterDef());
811:       assertFalse(node0.isVar());
812:       assertFalse(node0.isArrayLit());
813:       assertEquals(454767, node0.getSourcePosition());
814:       assertFalse(node0.isNew());
815:       assertEquals(111, node0.getLineno());
816:       assertFalse(node0.isStringKey());
817:       assertFalse(node0.isContinue());
818:       assertFalse(node0.isFunction());
819:       assertFalse(node0.isReturn());
820:       assertFalse(node0.isDo());
821:       assertFalse(node0.isAssignAdd());
822:       assertFalse(node0.isWhile());
823:       assertTrue(node0.isNumber());
824:       assertFalse(node0.isAdd());
825:       assertFalse(node0.isOr());
826:       assertFalse(node0.isEmpty());
827:       assertFalse(node0.isString());
828:       assertFalse(node0.isCall());
829:       assertFalse(node0.isGetElem());
830:       assertFalse(node0.isName());
831:       assertFalse(node0.isDelProp());
832:       assertFalse(node0.isVoid());
833:       assertFalse(node0.isTypeOf());
834:       assertFalse(node0.isComma());
835:       assertFalse(node0.isDec());
836:       assertFalse(node0.isBreak());
837:       assertFalse(node0.isExprResult());
838:       assertFalse(node0.hasChildren());
839:       assertFalse(node0.isAssign());
840:       assertFalse(node1.isTry());
841:       assertFalse(node1.isVoid());
842:       assertFalse(node1.isTrue());
843:       assertFalse(node1.isDebugger());
844:       assertFalse(node1.isFor());
845:       assertFalse(node1.isDefaultCase());
846:       assertFalse(node1.isGetterDef());
847:       assertFalse(node1.isEmpty());
848:       assertEquals(1, node1.getChildCount());
849:       assertEquals(111, node1.getType());
850:       assertFalse(node1.isIn());
851:       assertFalse(node1.isNull());
852:       assertFalse(node1.isNE());
853:       assertTrue(node1.hasOneChild());
854:       assertFalse(node1.isIf());
855:       assertFalse(node1.isName());
856:       assertFalse(node1.isRegExp());
857:       assertFalse(node1.isDelProp());
858:       assertFalse(node1.isCall());
859:       assertFalse(node1.isCatch());
860:       assertTrue(node1.hasChildren());
861:       assertTrue(node1.isCase());
862:       assertFalse(node1.isThrow());
863:       assertFalse(node1.isWhile());
864:       assertFalse(node1.isString());
865:       assertFalse(node1.isSetterDef());
866:       assertFalse(node1.isInc());
867:       assertFalse(node1.isGetProp());
868:       assertFalse(node1.isAnd());
869:       assertFalse(node1.isFalse());
870:       assertFalse(node1.isFunction());
871:       assertFalse(node1.isContinue());
872:       assertFalse(node1.isCast());
873:       assertFalse(node1.isNumber());
874:       assertEquals((-1), node1.getSourcePosition());
875:       assertFalse(node1.isObjectLit());
876:       assertFalse(node1.isNot());
877:       assertFalse(node1.isScript());
878:       assertFalse(node1.isReturn());
879:       assertEquals((-1), node1.getLineno());
880:       assertFalse(node1.isOr());
881:       assertFalse(node1.isThis());
882:       assertFalse(node1.isComma());
883:       assertFalse(node1.isWith());
884:       assertFalse(node1.isBreak());
885:       assertFalse(node1.isDec());
886:       assertFalse(node1.isTypeOf());
887:       assertFalse(node1.isAssign());
888:       assertFalse(node1.hasMoreThanOneChild());
889:       assertFalse(node1.isExprResult());
890:       assertFalse(node1.isGetElem());
891:       assertFalse(node1.isInstanceOf());
892:       assertFalse(node1.isNew());
893:       assertFalse(node1.isSwitch());
894:       assertEquals((-1), node1.getCharno());
895:       assertFalse(node1.isBlock());
896:       assertFalse(node1.isStringKey());
897:       assertFalse(node1.isHook());
898:       assertFalse(node1.isVar());
899:       assertFalse(node1.isDo());
900:       assertFalse(node1.isAdd());
901:       assertFalse(node1.isLabel());
902:       assertFalse(node1.isAssignAdd());
903:       assertFalse(node1.isParamList());
904:       assertFalse(node1.isLabelName());
905:       assertFalse(node1.isArrayLit());
906:       assertTrue(node2.isNumber());
907:       assertFalse(node2.isIn());
908:       assertFalse(node2.isCase());
909:       assertFalse(node2.isFor());
910:       assertFalse(node2.isTry());
911:       assertFalse(node2.isArrayLit());
912:       assertFalse(node2.isString());
913:       assertFalse(node2.isGetterDef());
914:       assertFalse(node2.isSwitch());
915:       assertFalse(node2.isDebugger());
916:       assertEquals(0, node2.getChildCount());
917:       assertFalse(node2.isBreak());
918:       assertFalse(node2.isGetProp());
919:       assertFalse(node2.isDefaultCase());
920:       assertFalse(node2.isComma());
921:       assertFalse(node2.isVar());
922:       assertFalse(node2.isAdd());
923:       assertFalse(node2.isCall());
924:       assertFalse(node2.isExprResult());
925:       assertFalse(node2.isVoid());
926:       assertFalse(node2.isNew());
927:       assertFalse(node2.isGetElem());
928:       assertFalse(node2.isDelProp());
929:       assertFalse(node2.isEmpty());
930:       assertFalse(node2.isName());
931:       assertFalse(node2.isTrue());
932:       assertFalse(node2.isNull());
933:       assertFalse(node2.isReturn());
934:       assertFalse(node2.isOr());
935:       assertFalse(node2.isAssignAdd());
936:       assertFalse(node2.isWhile());
937:       assertFalse(node2.isDo());
938:       assertFalse(node2.isAssign());
939:       assertFalse(node2.isTypeOf());
940:       assertFalse(node2.isContinue());
941:       assertFalse(node2.hasMoreThanOneChild());
942:       assertFalse(node2.isBlock());
943:       assertFalse(node2.isDec());
944:       assertFalse(node2.isLabel());
945:       assertEquals(39, node2.getType());
946:       assertFalse(node2.hasChildren());
947:       assertFalse(node2.isScript());
948:       assertFalse(node2.isCast());
949:       assertFalse(node2.hasOneChild());
950:       assertFalse(node2.isLabelName());
951:       assertFalse(node2.isNot());
952:       assertFalse(node2.isStringKey());
953:       assertFalse(node2.isAnd());
954:       assertFalse(node2.isParamList());
955:       assertFalse(node2.isObjectLit());
956:       assertFalse(node2.isInstanceOf());
957:       assertFalse(node2.isSetterDef());
958:       assertFalse(node2.isCatch());
959:       assertFalse(node2.isWith());
960:       assertFalse(node2.isFalse());
961:       assertFalse(node2.isThis());
962:       assertFalse(node2.isFunction());
963:       assertFalse(node2.isRegExp());
964:       assertFalse(node2.isThrow());
965:       assertFalse(node2.isHook());
966:       assertEquals(111, node2.getCharno());
967:       assertEquals(111, node2.getLineno());
968:       assertFalse(node2.isInc());
969:       assertEquals(454767, node2.getSourcePosition());
970:       assertFalse(node2.isIf());
971:       assertFalse(node2.isNE());
972:       
973:       Iterable<Node> iterable0 = node0.children();
974:       assertSame(node0, node2);
975:       assertEquals(48, Node.DIRECTIVES);
976:       assertEquals(8, Node.FLAG_NO_THROWS);
977:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
978:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
979:       assertEquals(50, Node.FREE_CALL);
980:       assertEquals(55, Node.INFERRED_FUNCTION);
981:       assertEquals(39, Node.EMPTY_BLOCK);
982:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
983:       assertEquals(57, Node.LAST_PROP);
984:       assertEquals(43, Node.IS_CONSTANT_NAME);
985:       assertEquals(54, Node.SLASH_V);
986:       assertEquals(30, Node.VAR_ARGS_NAME);
987:       assertEquals(40, Node.ORIGINALNAME_PROP);
988:       assertEquals(37, Node.OPT_ARG_NAME);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(32, Node.INCRDECR_PROP);
991:       assertEquals(56, Node.CHANGE_TIME);
992:       assertEquals(47, Node.IS_DISPATCHER);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(12, Node.COLUMN_BITS);
995:       assertEquals(46, Node.IS_NAMESPACE);
996:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
997:       assertEquals(1, Node.DECR_FLAG);
998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1000:       assertEquals(29, Node.JSDOC_INFO_PROP);
1001:       assertEquals(53, Node.INPUT_ID);
1002:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1003:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1004:       assertEquals(52, Node.LENGTH);
1005:       assertEquals(57, Node.REFLECTED_OBJECT);
1006:       assertEquals(36, Node.QUOTED_PROP);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1009:       assertEquals(4095, Node.COLUMN_MASK);
1010:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1011:       assertNotNull(iterable0);
1012:       assertFalse(iterable0.contains(node2));
1013:       assertFalse(node0.equals((Object)node1));
1014:       assertFalse(node0.isInstanceOf());
1015:       assertFalse(node0.isAnd());
1016:       assertFalse(node0.isScript());
1017:       assertFalse(node0.isGetProp());
1018:       assertFalse(node0.isNot());
1019:       assertFalse(node0.isObjectLit());
1020:       assertFalse(node0.isCast());
1021:       assertFalse(node0.isLabelName());
1022:       assertFalse(node0.isThrow());
1023:       assertFalse(node0.isSwitch());
1024:       assertFalse(node0.isLabel());
1025:       assertFalse(node0.isFalse());
1026:       assertFalse(node0.isCase());
1027:       assertFalse(node0.isNE());
1028:       assertFalse(node0.isInc());
1029:       assertFalse(node0.isGetterDef());
1030:       assertFalse(node0.isIn());
1031:       assertFalse(node0.hasOneChild());
1032:       assertFalse(node0.isHook());
1033:       assertFalse(node0.isTry());
1034:       assertFalse(node0.isFor());
1035:       assertFalse(node0.isIf());
1036:       assertFalse(node0.isRegExp());
1037:       assertEquals(111, node0.getCharno());
1038:       assertFalse(node0.isBlock());
1039:       assertEquals(39, node0.getType());
1040:       assertFalse(node0.isThis());
1041:       assertFalse(node0.hasMoreThanOneChild());
1042:       assertFalse(node0.isWith());
1043:       assertFalse(node0.isCatch());
1044:       assertEquals(0, node0.getChildCount());
1045:       assertFalse(node0.isDefaultCase());
1046:       assertFalse(node0.isNull());
1047:       assertFalse(node0.isParamList());
1048:       assertFalse(node0.isTrue());
1049:       assertFalse(node0.isDebugger());
1050:       assertFalse(node0.isSetterDef());
1051:       assertFalse(node0.isVar());
1052:       assertFalse(node0.isArrayLit());
1053:       assertEquals(454767, node0.getSourcePosition());
1054:       assertFalse(node0.isNew());
1055:       assertEquals(111, node0.getLineno());
1056:       assertFalse(node0.isStringKey());
1057:       assertFalse(node0.isContinue());
1058:       assertFalse(node0.isFunction());
1059:       assertFalse(node0.isReturn());
1060:       assertFalse(node0.isDo());
1061:       assertFalse(node0.isAssignAdd());
1062:       assertFalse(node0.isWhile());
1063:       assertTrue(node0.isNumber());
1064:       assertFalse(node0.isAdd());
1065:       assertFalse(node0.isOr());
1066:       assertFalse(node0.isEmpty());
1067:       assertFalse(node0.isString());
1068:       assertFalse(node0.isCall());
1069:       assertFalse(node0.isGetElem());
1070:       assertFalse(node0.isName());
1071:       assertFalse(node0.isDelProp());
1072:       assertFalse(node0.isVoid());
1073:       assertFalse(node0.isTypeOf());
1074:       assertFalse(node0.isComma());
1075:       assertFalse(node0.isDec());
1076:       assertFalse(node0.isBreak());
1077:       assertFalse(node0.isExprResult());
1078:       assertFalse(node0.hasChildren());
1079:       assertFalse(node0.isAssign());
1080:       
1081:       // Undeclared exception!
1082:       try { 
1083:         node1.removeChild((Node) null);
1084:         fail("Expecting exception: NullPointerException");
1085:       
1086:       } catch(NullPointerException e) {
1087:          //
1088:          // no message in exception (getMessage() returned null)
1089:          //
1090:          verifyException("com.google.javascript.rhino.Node", e);
1091:       }
1092:   }
1093: }
RegularFileObject[/tmp/EvoSuite_282_1628157142321/com/google/javascript/rhino/Node_282_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:52:22 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_282_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_282_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.javascript.rhino.JSDocInfo$1",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_282_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.Node$AncestorIterable$1",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.JSDocInfo$Marker",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 09:52:22.462 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) 111, 111, 111);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertEquals(111, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertEquals(454767, node0.getSourcePosition());
assertFalse(node0.isNew());
assertEquals(111, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());

Node node1 = new Node(111, node0, node0, node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertEquals(111, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertEquals(454767, node0.getSourcePosition());
assertFalse(node0.isNew());
assertEquals(111, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getChildCount());
assertEquals(111, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertTrue(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());

Node node2 = node1.getChildBefore((Node) null);
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertEquals(111, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertEquals(454767, node0.getSourcePosition());
assertFalse(node0.isNew());
assertEquals(111, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getChildCount());
assertEquals(111, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertTrue(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertEquals(39, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertEquals(111, node2.getCharno());
assertEquals(111, node2.getLineno());
assertFalse(node2.isInc());
assertEquals(454767, node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());

Stack<JSType> stack0 = new Stack<JSType>();
assertNotNull(stack0);
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());

int int0 = node2.getLength();
assertEquals(0, int0);
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertEquals(111, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertEquals(454767, node0.getSourcePosition());
assertFalse(node0.isNew());
assertEquals(111, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getChildCount());
assertEquals(111, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertTrue(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertEquals(39, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertEquals(111, node2.getCharno());
assertEquals(111, node2.getLineno());
assertFalse(node2.isInc());
assertEquals(454767, node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());

Iterable<Node> iterable0 = node0.children();
assertSame(node0, node2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertEquals(111, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertEquals(454767, node0.getSourcePosition());
assertFalse(node0.isNew());
assertEquals(111, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());

node1.removeChild((Node) null);

[MASTER] 09:52:22.827 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_286_1628157142803/com/google/javascript/rhino/Node_286_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_286_1628157142803/com/google/javascript/rhino/Node_286_tmp__ESTest_scaffolding.java]]
[MASTER] 09:52:22.827 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:22.827 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:52:22.828 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 168
[MASTER] 09:52:22.828 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_286_1628157142803/com/google/javascript/rhino/Node_286_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:52:22 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_286_tmp__ESTest extends Node_286_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(98, 98, 98);
23:       assertEquals(1, Node.DECR_FLAG);
24:       assertEquals(12, Node.COLUMN_BITS);
25:       assertEquals(51, Node.STATIC_SOURCE_FILE);
26:       assertEquals(30, Node.VAR_ARGS_NAME);
27:       assertEquals(54, Node.SLASH_V);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(29, Node.JSDOC_INFO_PROP);
33:       assertEquals(40, Node.ORIGINALNAME_PROP);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(57, Node.LAST_PROP);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
58:       assertEquals(32, Node.INCRDECR_PROP);
59:       assertNotNull(node0);
60:       assertFalse(node0.isWhile());
61:       assertFalse(node0.isBlock());
62:       assertFalse(node0.isContinue());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isName());
65:       assertTrue(node0.isHook());
66:       assertFalse(node0.isCall());
67:       assertEquals(98, node0.getLineno());
68:       assertFalse(node0.isNull());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isVar());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isNew());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isArrayLit());
82:       assertFalse(node0.isCatch());
83:       assertFalse(node0.isInstanceOf());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.isNumber());
89:       assertEquals(401506, node0.getSourcePosition());
90:       assertFalse(node0.isFor());
91:       assertFalse(node0.isStringKey());
92:       assertFalse(node0.isThis());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isCase());
96:       assertEquals(98, node0.getCharno());
97:       assertFalse(node0.isString());
98:       assertFalse(node0.isSwitch());
99:       assertFalse(node0.isFalse());
100:       assertFalse(node0.isBreak());
101:       assertFalse(node0.isNE());
102:       assertFalse(node0.isDelProp());
103:       assertFalse(node0.isIf());
104:       assertFalse(node0.isThrow());
105:       assertFalse(node0.isIn());
106:       assertFalse(node0.isEmpty());
107:       assertFalse(node0.isInc());
108:       assertEquals(98, node0.getType());
109:       assertFalse(node0.isFunction());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isNot());
112:       assertFalse(node0.isTrue());
113:       assertFalse(node0.isDebugger());
114:       assertFalse(node0.isCast());
115:       assertFalse(node0.isAnd());
116:       assertFalse(node0.isExprResult());
117:       assertFalse(node0.isGetElem());
118:       assertFalse(node0.isTypeOf());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isDec());
121:       assertFalse(node0.isAssign());
122:       assertFalse(node0.isReturn());
123:       assertFalse(node0.hasChildren());
124:       assertFalse(node0.isObjectLit());
125:       assertFalse(node0.isGetProp());
126:       
127:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
128:       assertFalse(boolean0);
129:       
130:       Iterable<Node> iterable0 = node0.children();
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
134:       assertEquals(30, Node.VAR_ARGS_NAME);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(56, Node.CHANGE_TIME);
139:       assertEquals(49, Node.DIRECT_EVAL);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(47, Node.IS_DISPATCHER);
144:       assertEquals(2, Node.POST_FLAG);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(8, Node.FLAG_NO_THROWS);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(39, Node.EMPTY_BLOCK);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(4095, Node.COLUMN_MASK);
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(43, Node.IS_CONSTANT_NAME);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
166:       assertEquals(32, Node.INCRDECR_PROP);
167:       assertNotNull(iterable0);
168:       assertFalse(iterable0.contains(node0));
169:       assertFalse(node0.isWhile());
170:       assertFalse(node0.isBlock());
171:       assertFalse(node0.isContinue());
172:       assertFalse(node0.hasMoreThanOneChild());
173:       assertFalse(node0.isName());
174:       assertTrue(node0.isHook());
175:       assertFalse(node0.isCall());
176:       assertEquals(98, node0.getLineno());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isVar());
181:       assertFalse(node0.isAssignAdd());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isNew());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isSetterDef());
186:       assertFalse(node0.isRegExp());
187:       assertFalse(node0.isScript());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isWith());
190:       assertFalse(node0.isArrayLit());
191:       assertFalse(node0.isCatch());
192:       assertFalse(node0.isInstanceOf());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node0.isLabelName());
195:       assertFalse(node0.isParamList());
196:       assertFalse(node0.isGetterDef());
197:       assertFalse(node0.isNumber());
198:       assertEquals(401506, node0.getSourcePosition());
199:       assertFalse(node0.isFor());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isThis());
202:       assertFalse(node0.hasOneChild());
203:       assertFalse(node0.isTry());
204:       assertFalse(node0.isCase());
205:       assertEquals(98, node0.getCharno());
206:       assertFalse(node0.isString());
207:       assertFalse(node0.isSwitch());
208:       assertFalse(node0.isFalse());
209:       assertFalse(node0.isBreak());
210:       assertFalse(node0.isNE());
211:       assertFalse(node0.isDelProp());
212:       assertFalse(node0.isIf());
213:       assertFalse(node0.isThrow());
214:       assertFalse(node0.isIn());
215:       assertFalse(node0.isEmpty());
216:       assertFalse(node0.isInc());
217:       assertEquals(98, node0.getType());
218:       assertFalse(node0.isFunction());
219:       assertFalse(node0.isVoid());
220:       assertFalse(node0.isNot());
221:       assertFalse(node0.isTrue());
222:       assertFalse(node0.isDebugger());
223:       assertFalse(node0.isCast());
224:       assertFalse(node0.isAnd());
225:       assertFalse(node0.isExprResult());
226:       assertFalse(node0.isGetElem());
227:       assertFalse(node0.isTypeOf());
228:       assertFalse(node0.isComma());
229:       assertFalse(node0.isDec());
230:       assertFalse(node0.isAssign());
231:       assertFalse(node0.isReturn());
232:       assertFalse(node0.hasChildren());
233:       assertFalse(node0.isObjectLit());
234:       assertFalse(node0.isGetProp());
235:       
236:       boolean boolean1 = node0.isHook();
237:       assertTrue(boolean1);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(12, Node.COLUMN_BITS);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(37, Node.OPT_ARG_NAME);
244:       assertEquals(46, Node.IS_NAMESPACE);
245:       assertEquals(56, Node.CHANGE_TIME);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(29, Node.JSDOC_INFO_PROP);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(47, Node.IS_DISPATCHER);
251:       assertEquals(2, Node.POST_FLAG);
252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
253:       assertEquals(52, Node.LENGTH);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
256:       assertEquals(39, Node.EMPTY_BLOCK);
257:       assertEquals(53, Node.INPUT_ID);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(36, Node.QUOTED_PROP);
263:       assertEquals(4095, Node.COLUMN_MASK);
264:       assertEquals(48, Node.DIRECTIVES);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
270:       assertEquals(50, Node.FREE_CALL);
271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertFalse(boolean1 == boolean0);
275:       assertFalse(node0.isWhile());
276:       assertFalse(node0.isBlock());
277:       assertFalse(node0.isContinue());
278:       assertFalse(node0.hasMoreThanOneChild());
279:       assertFalse(node0.isName());
280:       assertTrue(node0.isHook());
281:       assertFalse(node0.isCall());
282:       assertEquals(98, node0.getLineno());
283:       assertFalse(node0.isNull());
284:       assertFalse(node0.isLabel());
285:       assertFalse(node0.isOr());
286:       assertFalse(node0.isVar());
287:       assertFalse(node0.isAssignAdd());
288:       assertFalse(node0.isAdd());
289:       assertFalse(node0.isNew());
290:       assertFalse(node0.isDo());
291:       assertFalse(node0.isSetterDef());
292:       assertFalse(node0.isRegExp());
293:       assertFalse(node0.isScript());
294:       assertFalse(node0.isDefaultCase());
295:       assertFalse(node0.isWith());
296:       assertFalse(node0.isArrayLit());
297:       assertFalse(node0.isCatch());
298:       assertFalse(node0.isInstanceOf());
299:       assertEquals(0, node0.getChildCount());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isParamList());
302:       assertFalse(node0.isGetterDef());
303:       assertFalse(node0.isNumber());
304:       assertEquals(401506, node0.getSourcePosition());
305:       assertFalse(node0.isFor());
306:       assertFalse(node0.isStringKey());
307:       assertFalse(node0.isThis());
308:       assertFalse(node0.hasOneChild());
309:       assertFalse(node0.isTry());
310:       assertFalse(node0.isCase());
311:       assertEquals(98, node0.getCharno());
312:       assertFalse(node0.isString());
313:       assertFalse(node0.isSwitch());
314:       assertFalse(node0.isFalse());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isNE());
317:       assertFalse(node0.isDelProp());
318:       assertFalse(node0.isIf());
319:       assertFalse(node0.isThrow());
320:       assertFalse(node0.isIn());
321:       assertFalse(node0.isEmpty());
322:       assertFalse(node0.isInc());
323:       assertEquals(98, node0.getType());
324:       assertFalse(node0.isFunction());
325:       assertFalse(node0.isVoid());
326:       assertFalse(node0.isNot());
327:       assertFalse(node0.isTrue());
328:       assertFalse(node0.isDebugger());
329:       assertFalse(node0.isCast());
330:       assertFalse(node0.isAnd());
331:       assertFalse(node0.isExprResult());
332:       assertFalse(node0.isGetElem());
333:       assertFalse(node0.isTypeOf());
334:       assertFalse(node0.isComma());
335:       assertFalse(node0.isDec());
336:       assertFalse(node0.isAssign());
337:       assertFalse(node0.isReturn());
338:       assertFalse(node0.hasChildren());
339:       assertFalse(node0.isObjectLit());
340:       assertFalse(node0.isGetProp());
341:   }
342: }
RegularFileObject[/tmp/EvoSuite_286_1628157142803/com/google/javascript/rhino/Node_286_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:52:22 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_286_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_286_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.javascript.rhino.JSDocInfo$1",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_286_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.Node$AncestorIterable$1",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.JSDocInfo$Marker",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 09:52:22.831 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(98, 98, 98);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node0);
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertTrue(node0.isHook());
assertFalse(node0.isCall());
assertEquals(98, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(401506, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(98, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertEquals(98, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
assertFalse(boolean0);

Iterable<Node> iterable0 = node0.children();
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertTrue(node0.isHook());
assertFalse(node0.isCall());
assertEquals(98, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(401506, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(98, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertEquals(98, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());

boolean boolean1 = node0.isHook();
assertTrue(boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(boolean1 == boolean0);
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertTrue(node0.isHook());
assertFalse(node0.isCall());
assertEquals(98, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(401506, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(98, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertEquals(98, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());


[MASTER] 09:52:58.487 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:52:58.832 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:52:59.136 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:52:59.469 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:52:59.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:52:59.861 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:00.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:00.238 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:00.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:00.669 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:00.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:01.037 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:53:01.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/2
* Done!

* Computation finished
