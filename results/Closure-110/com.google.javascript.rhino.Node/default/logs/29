* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 10125
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 402472229
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:59:15.933 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.extractLineno(I)I
[MASTER] 10:59:15.933 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.extractLineno(I)I
[MASTER] 10:59:15.940 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 10:59:16.011 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 10:59:16.011 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 10:59:16.942 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5398: com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z:1533 - ReplaceComparisonOperator == -> >=
[MASTER] 10:59:20.056 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 11:00:28.625 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 837 generations, 328154 statements, best individual has fitness: 2417.0
* Minimizing test suite
[MASTER] 11:10:38.703 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 817
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 714
* Number of covered goals: 650
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 110
* Number of covered goals: 110
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 530
* Number of covered goals: 484
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 4536
* Number of covered goals: 2536
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Generated 1329 tests with total length 13277
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:12:21.608 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8970333333333333% of time used, but only 91/1329 tests minimized), falling back to using all assertions
[MASTER] 11:12:27.946 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 11:12:42.927 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 11:12:48.102 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1628161967692/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1628161967692/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:48.103 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:48.103 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:48.105 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 11:12:48.107 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1628161967692/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(0);
22:       assertFalse(node0.isAnd());
23:       assertFalse(node0.isObjectLit());
24:       assertFalse(node0.isInstanceOf());
25:       assertFalse(node0.isExprResult());
26:       assertFalse(node0.isThis());
27:       assertFalse(node0.isWith());
28:       assertFalse(node0.isComma());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.hasOneChild());
33:       assertFalse(node0.isGetProp());
34:       assertEquals((-1), node0.getCharno());
35:       assertFalse(node0.isScript());
36:       assertFalse(node0.isSwitch());
37:       assertFalse(node0.isNumber());
38:       assertFalse(node0.isNot());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertEquals((-1), node0.getLineno());
43:       assertFalse(node0.isCase());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isIf());
48:       assertFalse(node0.isSetterDef());
49:       assertFalse(node0.isInc());
50:       assertFalse(node0.isNE());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isCatch());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isFunction());
55:       assertEquals(0, node0.getChildCount());
56:       assertFalse(node0.isRegExp());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isParamList());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isWhile());
65:       assertFalse(node0.isString());
66:       assertFalse(node0.isDo());
67:       assertEquals(0, node0.getType());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.hasChildren());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.isLabel());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isGetElem());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isEmpty());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isNew());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isTrue());
85:       assertFalse(node0.isAdd());
86:       assertFalse(node0.isNull());
87:       assertFalse(node0.isOr());
88:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
89:       assertEquals(29, Node.JSDOC_INFO_PROP);
90:       assertEquals(47, Node.IS_DISPATCHER);
91:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(55, Node.INFERRED_FUNCTION);
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(39, Node.EMPTY_BLOCK);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(57, Node.LAST_PROP);
107:       assertEquals(40, Node.ORIGINALNAME_PROP);
108:       assertEquals(57, Node.REFLECTED_OBJECT);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(node0.isAnd());
128:       assertFalse(node0.isObjectLit());
129:       assertFalse(node0.isInstanceOf());
130:       assertFalse(node0.isExprResult());
131:       assertFalse(node0.isThis());
132:       assertFalse(node0.isWith());
133:       assertFalse(node0.isComma());
134:       assertFalse(node0.isFalse());
135:       assertFalse(node0.isCast());
136:       assertFalse(node0.isLabelName());
137:       assertFalse(node0.hasOneChild());
138:       assertFalse(node0.isGetProp());
139:       assertEquals((-1), node0.getCharno());
140:       assertFalse(node0.isScript());
141:       assertFalse(node0.isSwitch());
142:       assertFalse(node0.isNumber());
143:       assertFalse(node0.isNot());
144:       assertEquals((-1), node0.getSourcePosition());
145:       assertFalse(node0.isContinue());
146:       assertFalse(node0.hasMoreThanOneChild());
147:       assertEquals((-1), node0.getLineno());
148:       assertFalse(node0.isCase());
149:       assertFalse(node0.isBlock());
150:       assertFalse(node0.isHook());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isIf());
153:       assertFalse(node0.isSetterDef());
154:       assertFalse(node0.isInc());
155:       assertFalse(node0.isNE());
156:       assertFalse(node0.isIn());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isDefaultCase());
159:       assertFalse(node0.isFunction());
160:       assertEquals(0, node0.getChildCount());
161:       assertFalse(node0.isRegExp());
162:       assertFalse(node0.isFor());
163:       assertFalse(node0.isStringKey());
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isArrayLit());
166:       assertFalse(node0.isDebugger());
167:       assertFalse(node0.isParamList());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isWhile());
170:       assertFalse(node0.isString());
171:       assertFalse(node0.isDo());
172:       assertEquals(0, node0.getType());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.hasChildren());
175:       assertFalse(node0.isTypeOf());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isGetElem());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isCall());
183:       assertFalse(node0.isVar());
184:       assertFalse(node0.isEmpty());
185:       assertFalse(node0.isBreak());
186:       assertFalse(node0.isDelProp());
187:       assertFalse(node0.isNew());
188:       assertFalse(node0.isVoid());
189:       assertFalse(node0.isTrue());
190:       assertFalse(node0.isAdd());
191:       assertFalse(node0.isNull());
192:       assertFalse(node0.isOr());
193:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
194:       assertEquals(29, Node.JSDOC_INFO_PROP);
195:       assertEquals(47, Node.IS_DISPATCHER);
196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(56, Node.CHANGE_TIME);
202:       assertEquals(43, Node.IS_CONSTANT_NAME);
203:       assertEquals(55, Node.INFERRED_FUNCTION);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(30, Node.VAR_ARGS_NAME);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(39, Node.EMPTY_BLOCK);
209:       assertEquals(53, Node.INPUT_ID);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(40, Node.ORIGINALNAME_PROP);
213:       assertEquals(57, Node.REFLECTED_OBJECT);
214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(50, Node.FREE_CALL);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(54, Node.SLASH_V);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(1, Node.DECR_FLAG);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(51, Node.STATIC_SOURCE_FILE);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertNotNull(iterable0);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       Node node1 = new Node(0, node0, node0, node0, 1857, 15);
233:       assertFalse(node0.isAnd());
234:       assertFalse(node0.isObjectLit());
235:       assertFalse(node0.isInstanceOf());
236:       assertFalse(node0.isExprResult());
237:       assertFalse(node0.isThis());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isComma());
240:       assertFalse(node0.isFalse());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isLabelName());
243:       assertFalse(node0.hasOneChild());
244:       assertFalse(node0.isGetProp());
245:       assertEquals((-1), node0.getCharno());
246:       assertFalse(node0.isScript());
247:       assertFalse(node0.isSwitch());
248:       assertFalse(node0.isNumber());
249:       assertFalse(node0.isNot());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isContinue());
252:       assertFalse(node0.hasMoreThanOneChild());
253:       assertEquals((-1), node0.getLineno());
254:       assertFalse(node0.isCase());
255:       assertFalse(node0.isBlock());
256:       assertFalse(node0.isHook());
257:       assertFalse(node0.isThrow());
258:       assertFalse(node0.isIf());
259:       assertFalse(node0.isSetterDef());
260:       assertFalse(node0.isInc());
261:       assertFalse(node0.isNE());
262:       assertFalse(node0.isIn());
263:       assertFalse(node0.isCatch());
264:       assertFalse(node0.isDefaultCase());
265:       assertFalse(node0.isFunction());
266:       assertEquals(0, node0.getChildCount());
267:       assertFalse(node0.isRegExp());
268:       assertFalse(node0.isFor());
269:       assertFalse(node0.isStringKey());
270:       assertFalse(node0.isTry());
271:       assertFalse(node0.isArrayLit());
272:       assertFalse(node0.isDebugger());
273:       assertFalse(node0.isParamList());
274:       assertFalse(node0.isGetterDef());
275:       assertFalse(node0.isWhile());
276:       assertFalse(node0.isString());
277:       assertFalse(node0.isDo());
278:       assertEquals(0, node0.getType());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.hasChildren());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isAssign());
284:       assertFalse(node0.isLabel());
285:       assertFalse(node0.isDec());
286:       assertFalse(node0.isGetElem());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isCall());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isEmpty());
291:       assertFalse(node0.isBreak());
292:       assertFalse(node0.isDelProp());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isVoid());
295:       assertFalse(node0.isTrue());
296:       assertFalse(node0.isAdd());
297:       assertFalse(node0.isNull());
298:       assertFalse(node0.isOr());
299:       assertFalse(node1.isDelProp());
300:       assertFalse(node1.isGetterDef());
301:       assertFalse(node1.isIf());
302:       assertTrue(node1.hasOneChild());
303:       assertTrue(node1.hasChildren());
304:       assertFalse(node1.isEmpty());
305:       assertFalse(node1.isTry());
306:       assertEquals(1, node1.getChildCount());
307:       assertEquals(15, node1.getCharno());
308:       assertFalse(node1.isFor());
309:       assertFalse(node1.isDefaultCase());
310:       assertFalse(node1.isRegExp());
311:       assertEquals(0, node1.getType());
312:       assertFalse(node1.isInc());
313:       assertFalse(node1.isCatch());
314:       assertFalse(node1.isIn());
315:       assertFalse(node1.isVoid());
316:       assertFalse(node1.isTrue());
317:       assertFalse(node1.isNE());
318:       assertFalse(node1.isNull());
319:       assertFalse(node1.isHook());
320:       assertFalse(node1.isNew());
321:       assertFalse(node1.isBlock());
322:       assertFalse(node1.isThis());
323:       assertFalse(node1.isVar());
324:       assertFalse(node1.isCase());
325:       assertFalse(node1.isScript());
326:       assertFalse(node1.isArrayLit());
327:       assertFalse(node1.isSwitch());
328:       assertFalse(node1.isParamList());
329:       assertFalse(node1.isStringKey());
330:       assertFalse(node1.isNumber());
331:       assertFalse(node1.isTypeOf());
332:       assertFalse(node1.isAssign());
333:       assertFalse(node1.isLabelName());
334:       assertFalse(node1.isDec());
335:       assertEquals(1857, node1.getLineno());
336:       assertFalse(node1.isGetElem());
337:       assertFalse(node1.isCast());
338:       assertFalse(node1.isReturn());
339:       assertFalse(node1.isLabel());
340:       assertFalse(node1.isAssignAdd());
341:       assertFalse(node1.isWhile());
342:       assertFalse(node1.isWith());
343:       assertFalse(node1.isDo());
344:       assertFalse(node1.isExprResult());
345:       assertFalse(node1.hasMoreThanOneChild());
346:       assertFalse(node1.isAdd());
347:       assertFalse(node1.isInstanceOf());
348:       assertFalse(node1.isOr());
349:       assertFalse(node1.isName());
350:       assertFalse(node1.isBreak());
351:       assertFalse(node1.isComma());
352:       assertFalse(node1.isGetProp());
353:       assertFalse(node1.isCall());
354:       assertFalse(node1.isFalse());
355:       assertFalse(node1.isSetterDef());
356:       assertFalse(node1.isThrow());
357:       assertFalse(node1.isNot());
358:       assertFalse(node1.isContinue());
359:       assertFalse(node1.isObjectLit());
360:       assertFalse(node1.isFunction());
361:       assertFalse(node1.isString());
362:       assertFalse(node1.isAnd());
363:       assertFalse(node1.isDebugger());
364:       assertEquals(7606287, node1.getSourcePosition());
365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
366:       assertEquals(29, Node.JSDOC_INFO_PROP);
367:       assertEquals(47, Node.IS_DISPATCHER);
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(2, Node.POST_FLAG);
370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
371:       assertEquals(37, Node.OPT_ARG_NAME);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(43, Node.IS_CONSTANT_NAME);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(36, Node.QUOTED_PROP);
378:       assertEquals(30, Node.VAR_ARGS_NAME);
379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
380:       assertEquals(39, Node.EMPTY_BLOCK);
381:       assertEquals(53, Node.INPUT_ID);
382:       assertEquals(15, Node.NO_SIDE_EFFECTS);
383:       assertEquals(57, Node.LAST_PROP);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(57, Node.REFLECTED_OBJECT);
386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(8, Node.FLAG_NO_THROWS);
390:       assertEquals(50, Node.FREE_CALL);
391:       assertEquals(48, Node.DIRECTIVES);
392:       assertEquals(54, Node.SLASH_V);
393:       assertEquals(49, Node.DIRECT_EVAL);
394:       assertEquals(1, Node.DECR_FLAG);
395:       assertEquals(12, Node.COLUMN_BITS);
396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
397:       assertEquals(4095, Node.COLUMN_MASK);
398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
399:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
400:       assertEquals(32, Node.INCRDECR_PROP);
401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
402:       assertEquals(57, Node.LAST_PROP);
403:       assertEquals(30, Node.VAR_ARGS_NAME);
404:       assertEquals(49, Node.DIRECT_EVAL);
405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
406:       assertEquals(12, Node.COLUMN_BITS);
407:       assertEquals(54, Node.SLASH_V);
408:       assertEquals(37, Node.OPT_ARG_NAME);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(46, Node.IS_NAMESPACE);
414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(1, Node.DECR_FLAG);
417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(36, Node.QUOTED_PROP);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
422:       assertEquals(4095, Node.COLUMN_MASK);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(56, Node.CHANGE_TIME);
425:       assertEquals(47, Node.IS_DISPATCHER);
426:       assertEquals(2, Node.POST_FLAG);
427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(52, Node.LENGTH);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertNotNull(node1);
438:       assertFalse(node1.equals((Object)node0));
439:       
440:       Node node2 = new Node(2754, 4095, 50);
441:       assertFalse(node2.isInstanceOf());
442:       assertFalse(node2.isAnd());
443:       assertFalse(node2.isObjectLit());
444:       assertFalse(node2.isComma());
445:       assertFalse(node2.isThis());
446:       assertFalse(node2.isNot());
447:       assertFalse(node2.isScript());
448:       assertFalse(node2.isGetProp());
449:       assertFalse(node2.hasOneChild());
450:       assertFalse(node2.isHook());
451:       assertFalse(node2.hasChildren());
452:       assertFalse(node2.isBreak());
453:       assertFalse(node2.isDec());
454:       assertFalse(node2.isAssign());
455:       assertFalse(node2.isTypeOf());
456:       assertFalse(node2.isWith());
457:       assertFalse(node2.isExprResult());
458:       assertEquals(2754, node2.getType());
459:       assertFalse(node2.isGetElem());
460:       assertEquals(4095, node2.getLineno());
461:       assertFalse(node2.isIn());
462:       assertFalse(node2.isNE());
463:       assertFalse(node2.isReturn());
464:       assertFalse(node2.isWhile());
465:       assertFalse(node2.isString());
466:       assertEquals(50, node2.getCharno());
467:       assertFalse(node2.isInc());
468:       assertFalse(node2.isDebugger());
469:       assertFalse(node2.isThrow());
470:       assertFalse(node2.isFunction());
471:       assertFalse(node2.isFalse());
472:       assertFalse(node2.isContinue());
473:       assertFalse(node2.isCast());
474:       assertEquals(0, node2.getChildCount());
475:       assertFalse(node2.isParamList());
476:       assertFalse(node2.isNull());
477:       assertFalse(node2.isDefaultCase());
478:       assertEquals(16773170, node2.getSourcePosition());
479:       assertFalse(node2.isSetterDef());
480:       assertFalse(node2.isTry());
481:       assertFalse(node2.isTrue());
482:       assertFalse(node2.isFor());
483:       assertFalse(node2.isBlock());
484:       assertFalse(node2.isDelProp());
485:       assertFalse(node2.isName());
486:       assertFalse(node2.isRegExp());
487:       assertFalse(node2.isIf());
488:       assertFalse(node2.isCall());
489:       assertFalse(node2.isVoid());
490:       assertFalse(node2.isCatch());
491:       assertFalse(node2.isOr());
492:       assertFalse(node2.isAssignAdd());
493:       assertFalse(node2.hasMoreThanOneChild());
494:       assertFalse(node2.isLabel());
495:       assertFalse(node2.isGetterDef());
496:       assertFalse(node2.isDo());
497:       assertFalse(node2.isNumber());
498:       assertFalse(node2.isNew());
499:       assertFalse(node2.isAdd());
500:       assertFalse(node2.isEmpty());
501:       assertFalse(node2.isCase());
502:       assertFalse(node2.isStringKey());
503:       assertFalse(node2.isVar());
504:       assertFalse(node2.isLabelName());
505:       assertFalse(node2.isSwitch());
506:       assertFalse(node2.isArrayLit());
507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
508:       assertEquals(53, Node.INPUT_ID);
509:       assertEquals(47, Node.IS_DISPATCHER);
510:       assertEquals(2, Node.POST_FLAG);
511:       assertEquals(46, Node.IS_NAMESPACE);
512:       assertEquals(12, Node.COLUMN_BITS);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(1, Node.DECR_FLAG);
515:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(54, Node.SLASH_V);
519:       assertEquals(50, Node.FREE_CALL);
520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
521:       assertEquals(57, Node.REFLECTED_OBJECT);
522:       assertEquals(52, Node.LENGTH);
523:       assertEquals(40, Node.ORIGINALNAME_PROP);
524:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
525:       assertEquals(57, Node.LAST_PROP);
526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(30, Node.VAR_ARGS_NAME);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(4095, Node.COLUMN_MASK);
531:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(49, Node.DIRECT_EVAL);
535:       assertEquals(37, Node.OPT_ARG_NAME);
536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(29, Node.JSDOC_INFO_PROP);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(8, Node.FLAG_NO_THROWS);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertNotNull(node2);
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node2.equals((Object)node1));
546:       
547:       Node node3 = node1.srcref(node2);
548:       assertFalse(node0.isAnd());
549:       assertFalse(node0.isObjectLit());
550:       assertFalse(node0.isInstanceOf());
551:       assertFalse(node0.isExprResult());
552:       assertFalse(node0.isThis());
553:       assertFalse(node0.isWith());
554:       assertFalse(node0.isComma());
555:       assertFalse(node0.isFalse());
556:       assertFalse(node0.isCast());
557:       assertFalse(node0.isLabelName());
558:       assertFalse(node0.hasOneChild());
559:       assertFalse(node0.isGetProp());
560:       assertEquals((-1), node0.getCharno());
561:       assertFalse(node0.isScript());
562:       assertFalse(node0.isSwitch());
563:       assertFalse(node0.isNumber());
564:       assertFalse(node0.isNot());
565:       assertEquals((-1), node0.getSourcePosition());
566:       assertFalse(node0.isContinue());
567:       assertFalse(node0.hasMoreThanOneChild());
568:       assertEquals((-1), node0.getLineno());
569:       assertFalse(node0.isCase());
570:       assertFalse(node0.isBlock());
571:       assertFalse(node0.isHook());
572:       assertFalse(node0.isThrow());
573:       assertFalse(node0.isIf());
574:       assertFalse(node0.isSetterDef());
575:       assertFalse(node0.isInc());
576:       assertFalse(node0.isNE());
577:       assertFalse(node0.isIn());
578:       assertFalse(node0.isCatch());
579:       assertFalse(node0.isDefaultCase());
580:       assertFalse(node0.isFunction());
581:       assertEquals(0, node0.getChildCount());
582:       assertFalse(node0.isRegExp());
583:       assertFalse(node0.isFor());
584:       assertFalse(node0.isStringKey());
585:       assertFalse(node0.isTry());
586:       assertFalse(node0.isArrayLit());
587:       assertFalse(node0.isDebugger());
588:       assertFalse(node0.isParamList());
589:       assertFalse(node0.isGetterDef());
590:       assertFalse(node0.isWhile());
591:       assertFalse(node0.isString());
592:       assertFalse(node0.isDo());
593:       assertEquals(0, node0.getType());
594:       assertFalse(node0.isAssignAdd());
595:       assertFalse(node0.hasChildren());
596:       assertFalse(node0.isTypeOf());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isLabel());
600:       assertFalse(node0.isDec());
601:       assertFalse(node0.isGetElem());
602:       assertFalse(node0.isName());
603:       assertFalse(node0.isCall());
604:       assertFalse(node0.isVar());
605:       assertFalse(node0.isEmpty());
606:       assertFalse(node0.isBreak());
607:       assertFalse(node0.isDelProp());
608:       assertFalse(node0.isNew());
609:       assertFalse(node0.isVoid());
610:       assertFalse(node0.isTrue());
611:       assertFalse(node0.isAdd());
612:       assertFalse(node0.isNull());
613:       assertFalse(node0.isOr());
614:       assertFalse(node1.isDelProp());
615:       assertFalse(node1.isGetterDef());
616:       assertFalse(node1.isIf());
617:       assertTrue(node1.hasOneChild());
618:       assertTrue(node1.hasChildren());
619:       assertFalse(node1.isEmpty());
620:       assertFalse(node1.isTry());
621:       assertEquals(1, node1.getChildCount());
622:       assertFalse(node1.isFor());
623:       assertFalse(node1.isDefaultCase());
624:       assertEquals(16773170, node1.getSourcePosition());
625:       assertFalse(node1.isRegExp());
626:       assertEquals(0, node1.getType());
627:       assertFalse(node1.isInc());
628:       assertFalse(node1.isCatch());
629:       assertFalse(node1.isIn());
630:       assertFalse(node1.isVoid());
631:       assertFalse(node1.isTrue());
632:       assertFalse(node1.isNE());
633:       assertFalse(node1.isNull());
634:       assertFalse(node1.isHook());
635:       assertFalse(node1.isNew());
636:       assertFalse(node1.isBlock());
637:       assertFalse(node1.isThis());
638:       assertFalse(node1.isVar());
639:       assertFalse(node1.isCase());
640:       assertFalse(node1.isScript());
641:       assertFalse(node1.isArrayLit());
642:       assertFalse(node1.isSwitch());
643:       assertFalse(node1.isParamList());
644:       assertFalse(node1.isStringKey());
645:       assertFalse(node1.isNumber());
646:       assertFalse(node1.isTypeOf());
647:       assertFalse(node1.isAssign());
648:       assertFalse(node1.isLabelName());
649:       assertFalse(node1.isDec());
650:       assertFalse(node1.isGetElem());
651:       assertFalse(node1.isCast());
652:       assertFalse(node1.isReturn());
653:       assertFalse(node1.isLabel());
654:       assertFalse(node1.isAssignAdd());
655:       assertFalse(node1.isWhile());
656:       assertEquals(50, node1.getCharno());
657:       assertFalse(node1.isWith());
658:       assertFalse(node1.isDo());
659:       assertFalse(node1.isExprResult());
660:       assertFalse(node1.hasMoreThanOneChild());
661:       assertFalse(node1.isAdd());
662:       assertFalse(node1.isInstanceOf());
663:       assertFalse(node1.isOr());
664:       assertEquals(4095, node1.getLineno());
665:       assertFalse(node1.isName());
666:       assertFalse(node1.isBreak());
667:       assertFalse(node1.isComma());
668:       assertFalse(node1.isGetProp());
669:       assertFalse(node1.isCall());
670:       assertFalse(node1.isFalse());
671:       assertFalse(node1.isSetterDef());
672:       assertFalse(node1.isThrow());
673:       assertFalse(node1.isNot());
674:       assertFalse(node1.isContinue());
675:       assertFalse(node1.isObjectLit());
676:       assertFalse(node1.isFunction());
677:       assertFalse(node1.isString());
678:       assertFalse(node1.isAnd());
679:       assertFalse(node1.isDebugger());
680:       assertFalse(node2.isInstanceOf());
681:       assertFalse(node2.isAnd());
682:       assertFalse(node2.isObjectLit());
683:       assertFalse(node2.isComma());
684:       assertFalse(node2.isThis());
685:       assertFalse(node2.isNot());
686:       assertFalse(node2.isScript());
687:       assertFalse(node2.isGetProp());
688:       assertFalse(node2.hasOneChild());
689:       assertFalse(node2.isHook());
690:       assertFalse(node2.hasChildren());
691:       assertFalse(node2.isBreak());
692:       assertFalse(node2.isDec());
693:       assertFalse(node2.isAssign());
694:       assertFalse(node2.isTypeOf());
695:       assertFalse(node2.isWith());
696:       assertFalse(node2.isExprResult());
697:       assertEquals(2754, node2.getType());
698:       assertFalse(node2.isGetElem());
699:       assertEquals(4095, node2.getLineno());
700:       assertFalse(node2.isIn());
701:       assertFalse(node2.isNE());
702:       assertFalse(node2.isReturn());
703:       assertFalse(node2.isWhile());
704:       assertFalse(node2.isString());
705:       assertEquals(50, node2.getCharno());
706:       assertFalse(node2.isInc());
707:       assertFalse(node2.isDebugger());
708:       assertFalse(node2.isThrow());
709:       assertFalse(node2.isFunction());
710:       assertFalse(node2.isFalse());
711:       assertFalse(node2.isContinue());
712:       assertFalse(node2.isCast());
713:       assertEquals(0, node2.getChildCount());
714:       assertFalse(node2.isParamList());
715:       assertFalse(node2.isNull());
716:       assertFalse(node2.isDefaultCase());
717:       assertEquals(16773170, node2.getSourcePosition());
718:       assertFalse(node2.isSetterDef());
719:       assertFalse(node2.isTry());
720:       assertFalse(node2.isTrue());
721:       assertFalse(node2.isFor());
722:       assertFalse(node2.isBlock());
723:       assertFalse(node2.isDelProp());
724:       assertFalse(node2.isName());
725:       assertFalse(node2.isRegExp());
726:       assertFalse(node2.isIf());
727:       assertFalse(node2.isCall());
728:       assertFalse(node2.isVoid());
729:       assertFalse(node2.isCatch());
730:       assertFalse(node2.isOr());
731:       assertFalse(node2.isAssignAdd());
732:       assertFalse(node2.hasMoreThanOneChild());
733:       assertFalse(node2.isLabel());
734:       assertFalse(node2.isGetterDef());
735:       assertFalse(node2.isDo());
736:       assertFalse(node2.isNumber());
737:       assertFalse(node2.isNew());
738:       assertFalse(node2.isAdd());
739:       assertFalse(node2.isEmpty());
740:       assertFalse(node2.isCase());
741:       assertFalse(node2.isStringKey());
742:       assertFalse(node2.isVar());
743:       assertFalse(node2.isLabelName());
744:       assertFalse(node2.isSwitch());
745:       assertFalse(node2.isArrayLit());
746:       assertFalse(node3.isGetProp());
747:       assertFalse(node3.isComma());
748:       assertFalse(node3.isThis());
749:       assertFalse(node3.isThrow());
750:       assertFalse(node3.isNot());
751:       assertFalse(node3.isObjectLit());
752:       assertFalse(node3.isScript());
753:       assertFalse(node3.isSwitch());
754:       assertFalse(node3.isFalse());
755:       assertFalse(node3.isLabelName());
756:       assertFalse(node3.isCast());
757:       assertFalse(node3.isAnd());
758:       assertFalse(node3.isAssignAdd());
759:       assertFalse(node3.isDec());
760:       assertFalse(node3.isTypeOf());
761:       assertFalse(node3.isAssign());
762:       assertFalse(node3.isReturn());
763:       assertTrue(node3.hasOneChild());
764:       assertFalse(node3.isOr());
765:       assertFalse(node3.isLabel());
766:       assertFalse(node3.isEmpty());
767:       assertFalse(node3.isWhile());
768:       assertFalse(node3.isString());
769:       assertFalse(node3.isDo());
770:       assertFalse(node3.isAdd());
771:       assertFalse(node3.isTrue());
772:       assertFalse(node3.isExprResult());
773:       assertFalse(node3.isVoid());
774:       assertEquals(0, node3.getType());
775:       assertFalse(node3.isGetElem());
776:       assertFalse(node3.isName());
777:       assertFalse(node3.isCall());
778:       assertFalse(node3.isDelProp());
779:       assertFalse(node3.isBreak());
780:       assertFalse(node3.isParamList());
781:       assertFalse(node3.isNull());
782:       assertEquals(16773170, node3.getSourcePosition());
783:       assertFalse(node3.isDefaultCase());
784:       assertFalse(node3.isSetterDef());
785:       assertFalse(node3.isNew());
786:       assertFalse(node3.isFunction());
787:       assertFalse(node3.isVar());
788:       assertFalse(node3.isDebugger());
789:       assertFalse(node3.isStringKey());
790:       assertFalse(node3.isContinue());
791:       assertFalse(node3.isArrayLit());
792:       assertEquals(4095, node3.getLineno());
793:       assertTrue(node3.hasChildren());
794:       assertFalse(node3.isNE());
795:       assertFalse(node3.isNumber());
796:       assertEquals(50, node3.getCharno());
797:       assertFalse(node3.isIn());
798:       assertFalse(node3.isGetterDef());
799:       assertEquals(1, node3.getChildCount());
800:       assertFalse(node3.isFor());
801:       assertFalse(node3.isInc());
802:       assertFalse(node3.isCase());
803:       assertFalse(node3.isTry());
804:       assertFalse(node3.isBlock());
805:       assertFalse(node3.isHook());
806:       assertFalse(node3.isRegExp());
807:       assertFalse(node3.isCatch());
808:       assertFalse(node3.hasMoreThanOneChild());
809:       assertFalse(node3.isWith());
810:       assertFalse(node3.isInstanceOf());
811:       assertFalse(node3.isIf());
812:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
813:       assertEquals(29, Node.JSDOC_INFO_PROP);
814:       assertEquals(47, Node.IS_DISPATCHER);
815:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
816:       assertEquals(2, Node.POST_FLAG);
817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
818:       assertEquals(37, Node.OPT_ARG_NAME);
819:       assertEquals(46, Node.IS_NAMESPACE);
820:       assertEquals(56, Node.CHANGE_TIME);
821:       assertEquals(43, Node.IS_CONSTANT_NAME);
822:       assertEquals(55, Node.INFERRED_FUNCTION);
823:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
824:       assertEquals(36, Node.QUOTED_PROP);
825:       assertEquals(30, Node.VAR_ARGS_NAME);
826:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
827:       assertEquals(39, Node.EMPTY_BLOCK);
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(15, Node.NO_SIDE_EFFECTS);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(40, Node.ORIGINALNAME_PROP);
832:       assertEquals(57, Node.REFLECTED_OBJECT);
833:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:       assertEquals(52, Node.LENGTH);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(50, Node.FREE_CALL);
838:       assertEquals(48, Node.DIRECTIVES);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(49, Node.DIRECT_EVAL);
841:       assertEquals(1, Node.DECR_FLAG);
842:       assertEquals(12, Node.COLUMN_BITS);
843:       assertEquals(51, Node.STATIC_SOURCE_FILE);
844:       assertEquals(4095, Node.COLUMN_MASK);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
847:       assertEquals(32, Node.INCRDECR_PROP);
848:       assertEquals(15, Node.NO_SIDE_EFFECTS);
849:       assertEquals(57, Node.LAST_PROP);
850:       assertEquals(30, Node.VAR_ARGS_NAME);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
853:       assertEquals(12, Node.COLUMN_BITS);
854:       assertEquals(54, Node.SLASH_V);
855:       assertEquals(37, Node.OPT_ARG_NAME);
856:       assertEquals(40, Node.ORIGINALNAME_PROP);
857:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
859:       assertEquals(50, Node.FREE_CALL);
860:       assertEquals(46, Node.IS_NAMESPACE);
861:       assertEquals(51, Node.STATIC_SOURCE_FILE);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(1, Node.DECR_FLAG);
864:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
865:       assertEquals(43, Node.IS_CONSTANT_NAME);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
868:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(48, Node.DIRECTIVES);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(2, Node.POST_FLAG);
874:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
875:       assertEquals(8, Node.FLAG_NO_THROWS);
876:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
877:       assertEquals(57, Node.REFLECTED_OBJECT);
878:       assertEquals(52, Node.LENGTH);
879:       assertEquals(55, Node.INFERRED_FUNCTION);
880:       assertEquals(39, Node.EMPTY_BLOCK);
881:       assertEquals(29, Node.JSDOC_INFO_PROP);
882:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
883:       assertEquals(53, Node.INPUT_ID);
884:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
885:       assertEquals(53, Node.INPUT_ID);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(2, Node.POST_FLAG);
888:       assertEquals(46, Node.IS_NAMESPACE);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(32, Node.INCRDECR_PROP);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
894:       assertEquals(43, Node.IS_CONSTANT_NAME);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(50, Node.FREE_CALL);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(57, Node.REFLECTED_OBJECT);
899:       assertEquals(52, Node.LENGTH);
900:       assertEquals(40, Node.ORIGINALNAME_PROP);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(57, Node.LAST_PROP);
903:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
904:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
905:       assertEquals(30, Node.VAR_ARGS_NAME);
906:       assertEquals(55, Node.INFERRED_FUNCTION);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
909:       assertEquals(48, Node.DIRECTIVES);
910:       assertEquals(39, Node.EMPTY_BLOCK);
911:       assertEquals(49, Node.DIRECT_EVAL);
912:       assertEquals(37, Node.OPT_ARG_NAME);
913:       assertEquals(15, Node.NO_SIDE_EFFECTS);
914:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
915:       assertEquals(29, Node.JSDOC_INFO_PROP);
916:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
917:       assertEquals(56, Node.CHANGE_TIME);
918:       assertEquals(8, Node.FLAG_NO_THROWS);
919:       assertEquals(36, Node.QUOTED_PROP);
920:       assertEquals(53, Node.INPUT_ID);
921:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
922:       assertEquals(43, Node.IS_CONSTANT_NAME);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(47, Node.IS_DISPATCHER);
925:       assertEquals(4095, Node.COLUMN_MASK);
926:       assertEquals(2, Node.POST_FLAG);
927:       assertEquals(39, Node.EMPTY_BLOCK);
928:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
929:       assertEquals(56, Node.CHANGE_TIME);
930:       assertEquals(37, Node.OPT_ARG_NAME);
931:       assertEquals(48, Node.DIRECTIVES);
932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
933:       assertEquals(55, Node.INFERRED_FUNCTION);
934:       assertEquals(29, Node.JSDOC_INFO_PROP);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(36, Node.QUOTED_PROP);
937:       assertEquals(57, Node.REFLECTED_OBJECT);
938:       assertEquals(8, Node.FLAG_NO_THROWS);
939:       assertEquals(52, Node.LENGTH);
940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
941:       assertEquals(54, Node.SLASH_V);
942:       assertEquals(15, Node.NO_SIDE_EFFECTS);
943:       assertEquals(57, Node.LAST_PROP);
944:       assertEquals(49, Node.DIRECT_EVAL);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
947:       assertEquals(12, Node.COLUMN_BITS);
948:       assertEquals(30, Node.VAR_ARGS_NAME);
949:       assertEquals(46, Node.IS_NAMESPACE);
950:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(1, Node.DECR_FLAG);
953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
954:       assertEquals(51, Node.STATIC_SOURCE_FILE);
955:       assertEquals(50, Node.FREE_CALL);
956:       assertNotNull(node3);
957:       assertNotSame(node0, node1);
958:       assertNotSame(node0, node3);
959:       assertNotSame(node0, node2);
960:       assertSame(node1, node3);
961:       assertNotSame(node1, node0);
962:       assertNotSame(node1, node2);
963:       assertNotSame(node2, node0);
964:       assertNotSame(node2, node1);
965:       assertNotSame(node2, node3);
966:       assertNotSame(node3, node2);
967:       assertNotSame(node3, node0);
968:       assertSame(node3, node1);
969:       assertFalse(node0.equals((Object)node1));
970:       assertFalse(node0.equals((Object)node2));
971:       assertFalse(node1.equals((Object)node0));
972:       assertFalse(node1.equals((Object)node2));
973:       assertFalse(node2.equals((Object)node0));
974:       assertFalse(node2.equals((Object)node1));
975:       assertFalse(node3.equals((Object)node2));
976:       assertFalse(node3.equals((Object)node0));
977:       
978:       boolean boolean0 = node1.isEquivalentToShallow(node0);
979:       assertFalse(node0.isAnd());
980:       assertFalse(node0.isObjectLit());
981:       assertFalse(node0.isInstanceOf());
982:       assertFalse(node0.isExprResult());
983:       assertFalse(node0.isThis());
984:       assertFalse(node0.isWith());
985:       assertFalse(node0.isComma());
986:       assertFalse(node0.isFalse());
987:       assertFalse(node0.isCast());
988:       assertFalse(node0.isLabelName());
989:       assertFalse(node0.hasOneChild());
990:       assertFalse(node0.isGetProp());
991:       assertEquals((-1), node0.getCharno());
992:       assertFalse(node0.isScript());
993:       assertFalse(node0.isSwitch());
994:       assertFalse(node0.isNumber());
995:       assertFalse(node0.isNot());
996:       assertEquals((-1), node0.getSourcePosition());
997:       assertFalse(node0.isContinue());
998:       assertFalse(node0.hasMoreThanOneChild());
999:       assertEquals((-1), node0.getLineno());
1000:       assertFalse(node0.isCase());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isHook());
1003:       assertFalse(node0.isThrow());
1004:       assertFalse(node0.isIf());
1005:       assertFalse(node0.isSetterDef());
1006:       assertFalse(node0.isInc());
1007:       assertFalse(node0.isNE());
1008:       assertFalse(node0.isIn());
1009:       assertFalse(node0.isCatch());
1010:       assertFalse(node0.isDefaultCase());
1011:       assertFalse(node0.isFunction());
1012:       assertEquals(0, node0.getChildCount());
1013:       assertFalse(node0.isRegExp());
1014:       assertFalse(node0.isFor());
1015:       assertFalse(node0.isStringKey());
1016:       assertFalse(node0.isTry());
1017:       assertFalse(node0.isArrayLit());
1018:       assertFalse(node0.isDebugger());
1019:       assertFalse(node0.isParamList());
1020:       assertFalse(node0.isGetterDef());
1021:       assertFalse(node0.isWhile());
1022:       assertFalse(node0.isString());
1023:       assertFalse(node0.isDo());
1024:       assertEquals(0, node0.getType());
1025:       assertFalse(node0.isAssignAdd());
1026:       assertFalse(node0.hasChildren());
1027:       assertFalse(node0.isTypeOf());
1028:       assertFalse(node0.isReturn());
1029:       assertFalse(node0.isAssign());
1030:       assertFalse(node0.isLabel());
1031:       assertFalse(node0.isDec());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isName());
1034:       assertFalse(node0.isCall());
1035:       assertFalse(node0.isVar());
1036:       assertFalse(node0.isEmpty());
1037:       assertFalse(node0.isBreak());
1038:       assertFalse(node0.isDelProp());
1039:       assertFalse(node0.isNew());
1040:       assertFalse(node0.isVoid());
1041:       assertFalse(node0.isTrue());
1042:       assertFalse(node0.isAdd());
1043:       assertFalse(node0.isNull());
1044:       assertFalse(node0.isOr());
1045:       assertFalse(node1.isDelProp());
1046:       assertFalse(node1.isGetterDef());
1047:       assertFalse(node1.isIf());
1048:       assertTrue(node1.hasOneChild());
1049:       assertTrue(node1.hasChildren());
1050:       assertFalse(node1.isEmpty());
1051:       assertFalse(node1.isTry());
1052:       assertEquals(1, node1.getChildCount());
1053:       assertFalse(node1.isFor());
1054:       assertFalse(node1.isDefaultCase());
1055:       assertEquals(16773170, node1.getSourcePosition());
1056:       assertFalse(node1.isRegExp());
1057:       assertEquals(0, node1.getType());
1058:       assertFalse(node1.isInc());
1059:       assertFalse(node1.isCatch());
1060:       assertFalse(node1.isIn());
1061:       assertFalse(node1.isVoid());
1062:       assertFalse(node1.isTrue());
1063:       assertFalse(node1.isNE());
1064:       assertFalse(node1.isNull());
1065:       assertFalse(node1.isHook());
1066:       assertFalse(node1.isNew());
1067:       assertFalse(node1.isBlock());
1068:       assertFalse(node1.isThis());
1069:       assertFalse(node1.isVar());
1070:       assertFalse(node1.isCase());
1071:       assertFalse(node1.isScript());
1072:       assertFalse(node1.isArrayLit());
1073:       assertFalse(node1.isSwitch());
1074:       assertFalse(node1.isParamList());
1075:       assertFalse(node1.isStringKey());
1076:       assertFalse(node1.isNumber());
1077:       assertFalse(node1.isTypeOf());
1078:       assertFalse(node1.isAssign());
1079:       assertFalse(node1.isLabelName());
1080:       assertFalse(node1.isDec());
1081:       assertFalse(node1.isGetElem());
1082:       assertFalse(node1.isCast());
1083:       assertFalse(node1.isReturn());
1084:       assertFalse(node1.isLabel());
1085:       assertFalse(node1.isAssignAdd());
1086:       assertFalse(node1.isWhile());
1087:       assertEquals(50, node1.getCharno());
1088:       assertFalse(node1.isWith());
1089:       assertFalse(node1.isDo());
1090:       assertFalse(node1.isExprResult());
1091:       assertFalse(node1.hasMoreThanOneChild());
1092:       assertFalse(node1.isAdd());
1093:       assertFalse(node1.isInstanceOf());
1094:       assertFalse(node1.isOr());
1095:       assertEquals(4095, node1.getLineno());
1096:       assertFalse(node1.isName());
1097:       assertFalse(node1.isBreak());
1098:       assertFalse(node1.isComma());
1099:       assertFalse(node1.isGetProp());
1100:       assertFalse(node1.isCall());
1101:       assertFalse(node1.isFalse());
1102:       assertFalse(node1.isSetterDef());
1103:       assertFalse(node1.isThrow());
1104:       assertFalse(node1.isNot());
1105:       assertFalse(node1.isContinue());
1106:       assertFalse(node1.isObjectLit());
1107:       assertFalse(node1.isFunction());
1108:       assertFalse(node1.isString());
1109:       assertFalse(node1.isAnd());
1110:       assertFalse(node1.isDebugger());
1111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1112:       assertEquals(29, Node.JSDOC_INFO_PROP);
1113:       assertEquals(47, Node.IS_DISPATCHER);
1114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1115:       assertEquals(2, Node.POST_FLAG);
1116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1117:       assertEquals(37, Node.OPT_ARG_NAME);
1118:       assertEquals(46, Node.IS_NAMESPACE);
1119:       assertEquals(56, Node.CHANGE_TIME);
1120:       assertEquals(43, Node.IS_CONSTANT_NAME);
1121:       assertEquals(55, Node.INFERRED_FUNCTION);
1122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1123:       assertEquals(36, Node.QUOTED_PROP);
1124:       assertEquals(30, Node.VAR_ARGS_NAME);
1125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1126:       assertEquals(39, Node.EMPTY_BLOCK);
1127:       assertEquals(53, Node.INPUT_ID);
1128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1129:       assertEquals(57, Node.LAST_PROP);
1130:       assertEquals(40, Node.ORIGINALNAME_PROP);
1131:       assertEquals(57, Node.REFLECTED_OBJECT);
1132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1134:       assertEquals(52, Node.LENGTH);
1135:       assertEquals(8, Node.FLAG_NO_THROWS);
1136:       assertEquals(50, Node.FREE_CALL);
1137:       assertEquals(48, Node.DIRECTIVES);
1138:       assertEquals(54, Node.SLASH_V);
1139:       assertEquals(49, Node.DIRECT_EVAL);
1140:       assertEquals(1, Node.DECR_FLAG);
1141:       assertEquals(12, Node.COLUMN_BITS);
1142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1143:       assertEquals(4095, Node.COLUMN_MASK);
1144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1146:       assertEquals(32, Node.INCRDECR_PROP);
1147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1148:       assertEquals(57, Node.LAST_PROP);
1149:       assertEquals(30, Node.VAR_ARGS_NAME);
1150:       assertEquals(49, Node.DIRECT_EVAL);
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(54, Node.SLASH_V);
1154:       assertEquals(37, Node.OPT_ARG_NAME);
1155:       assertEquals(40, Node.ORIGINALNAME_PROP);
1156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1158:       assertEquals(50, Node.FREE_CALL);
1159:       assertEquals(46, Node.IS_NAMESPACE);
1160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1161:       assertEquals(32, Node.INCRDECR_PROP);
1162:       assertEquals(1, Node.DECR_FLAG);
1163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1164:       assertEquals(43, Node.IS_CONSTANT_NAME);
1165:       assertEquals(36, Node.QUOTED_PROP);
1166:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1168:       assertEquals(4095, Node.COLUMN_MASK);
1169:       assertEquals(48, Node.DIRECTIVES);
1170:       assertEquals(56, Node.CHANGE_TIME);
1171:       assertEquals(47, Node.IS_DISPATCHER);
1172:       assertEquals(2, Node.POST_FLAG);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1176:       assertEquals(57, Node.REFLECTED_OBJECT);
1177:       assertEquals(52, Node.LENGTH);
1178:       assertEquals(55, Node.INFERRED_FUNCTION);
1179:       assertEquals(39, Node.EMPTY_BLOCK);
1180:       assertEquals(29, Node.JSDOC_INFO_PROP);
1181:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1182:       assertEquals(53, Node.INPUT_ID);
1183:       assertFalse(boolean0);
1184:       assertNotSame(node0, node1);
1185:       assertNotSame(node0, node3);
1186:       assertNotSame(node0, node2);
1187:       assertSame(node1, node3);
1188:       assertNotSame(node1, node0);
1189:       assertNotSame(node1, node2);
1190:       assertFalse(node0.equals((Object)node1));
1191:       assertFalse(node0.equals((Object)node3));
1192:       assertFalse(node0.equals((Object)node2));
1193:       assertFalse(node1.equals((Object)node0));
1194:       assertFalse(node1.equals((Object)node2));
1195:       
1196:       Node node4 = node1.getFirstChild();
1197:       assertFalse(node0.isAnd());
1198:       assertFalse(node0.isObjectLit());
1199:       assertFalse(node0.isInstanceOf());
1200:       assertFalse(node0.isExprResult());
1201:       assertFalse(node0.isThis());
1202:       assertFalse(node0.isWith());
1203:       assertFalse(node0.isComma());
1204:       assertFalse(node0.isFalse());
1205:       assertFalse(node0.isCast());
1206:       assertFalse(node0.isLabelName());
1207:       assertFalse(node0.hasOneChild());
1208:       assertFalse(node0.isGetProp());
1209:       assertEquals((-1), node0.getCharno());
1210:       assertFalse(node0.isScript());
1211:       assertFalse(node0.isSwitch());
1212:       assertFalse(node0.isNumber());
1213:       assertFalse(node0.isNot());
1214:       assertEquals((-1), node0.getSourcePosition());
1215:       assertFalse(node0.isContinue());
1216:       assertFalse(node0.hasMoreThanOneChild());
1217:       assertEquals((-1), node0.getLineno());
1218:       assertFalse(node0.isCase());
1219:       assertFalse(node0.isBlock());
1220:       assertFalse(node0.isHook());
1221:       assertFalse(node0.isThrow());
1222:       assertFalse(node0.isIf());
1223:       assertFalse(node0.isSetterDef());
1224:       assertFalse(node0.isInc());
1225:       assertFalse(node0.isNE());
1226:       assertFalse(node0.isIn());
1227:       assertFalse(node0.isCatch());
1228:       assertFalse(node0.isDefaultCase());
1229:       assertFalse(node0.isFunction());
1230:       assertEquals(0, node0.getChildCount());
1231:       assertFalse(node0.isRegExp());
1232:       assertFalse(node0.isFor());
1233:       assertFalse(node0.isStringKey());
1234:       assertFalse(node0.isTry());
1235:       assertFalse(node0.isArrayLit());
1236:       assertFalse(node0.isDebugger());
1237:       assertFalse(node0.isParamList());
1238:       assertFalse(node0.isGetterDef());
1239:       assertFalse(node0.isWhile());
1240:       assertFalse(node0.isString());
1241:       assertFalse(node0.isDo());
1242:       assertEquals(0, node0.getType());
1243:       assertFalse(node0.isAssignAdd());
1244:       assertFalse(node0.hasChildren());
1245:       assertFalse(node0.isTypeOf());
1246:       assertFalse(node0.isReturn());
1247:       assertFalse(node0.isAssign());
1248:       assertFalse(node0.isLabel());
1249:       assertFalse(node0.isDec());
1250:       assertFalse(node0.isGetElem());
1251:       assertFalse(node0.isName());
1252:       assertFalse(node0.isCall());
1253:       assertFalse(node0.isVar());
1254:       assertFalse(node0.isEmpty());
1255:       assertFalse(node0.isBreak());
1256:       assertFalse(node0.isDelProp());
1257:       assertFalse(node0.isNew());
1258:       assertFalse(node0.isVoid());
1259:       assertFalse(node0.isTrue());
1260:       assertFalse(node0.isAdd());
1261:       assertFalse(node0.isNull());
1262:       assertFalse(node0.isOr());
1263:       assertFalse(node1.isDelProp());
1264:       assertFalse(node1.isGetterDef());
1265:       assertFalse(node1.isIf());
1266:       assertTrue(node1.hasOneChild());
1267:       assertTrue(node1.hasChildren());
1268:       assertFalse(node1.isEmpty());
1269:       assertFalse(node1.isTry());
1270:       assertEquals(1, node1.getChildCount());
1271:       assertFalse(node1.isFor());
1272:       assertFalse(node1.isDefaultCase());
1273:       assertEquals(16773170, node1.getSourcePosition());
1274:       assertFalse(node1.isRegExp());
1275:       assertEquals(0, node1.getType());
1276:       assertFalse(node1.isInc());
1277:       assertFalse(node1.isCatch());
1278:       assertFalse(node1.isIn());
1279:       assertFalse(node1.isVoid());
1280:       assertFalse(node1.isTrue());
1281:       assertFalse(node1.isNE());
1282:       assertFalse(node1.isNull());
1283:       assertFalse(node1.isHook());
1284:       assertFalse(node1.isNew());
1285:       assertFalse(node1.isBlock());
1286:       assertFalse(node1.isThis());
1287:       assertFalse(node1.isVar());
1288:       assertFalse(node1.isCase());
1289:       assertFalse(node1.isScript());
1290:       assertFalse(node1.isArrayLit());
1291:       assertFalse(node1.isSwitch());
1292:       assertFalse(node1.isParamList());
1293:       assertFalse(node1.isStringKey());
1294:       assertFalse(node1.isNumber());
1295:       assertFalse(node1.isTypeOf());
1296:       assertFalse(node1.isAssign());
1297:       assertFalse(node1.isLabelName());
1298:       assertFalse(node1.isDec());
1299:       assertFalse(node1.isGetElem());
1300:       assertFalse(node1.isCast());
1301:       assertFalse(node1.isReturn());
1302:       assertFalse(node1.isLabel());
1303:       assertFalse(node1.isAssignAdd());
1304:       assertFalse(node1.isWhile());
1305:       assertEquals(50, node1.getCharno());
1306:       assertFalse(node1.isWith());
1307:       assertFalse(node1.isDo());
1308:       assertFalse(node1.isExprResult());
1309:       assertFalse(node1.hasMoreThanOneChild());
1310:       assertFalse(node1.isAdd());
1311:       assertFalse(node1.isInstanceOf());
1312:       assertFalse(node1.isOr());
1313:       assertEquals(4095, node1.getLineno());
1314:       assertFalse(node1.isName());
1315:       assertFalse(node1.isBreak());
1316:       assertFalse(node1.isComma());
1317:       assertFalse(node1.isGetProp());
1318:       assertFalse(node1.isCall());
1319:       assertFalse(node1.isFalse());
1320:       assertFalse(node1.isSetterDef());
1321:       assertFalse(node1.isThrow());
1322:       assertFalse(node1.isNot());
1323:       assertFalse(node1.isContinue());
1324:       assertFalse(node1.isObjectLit());
1325:       assertFalse(node1.isFunction());
1326:       assertFalse(node1.isString());
1327:       assertFalse(node1.isAnd());
1328:       assertFalse(node1.isDebugger());
1329:       assertFalse(node4.isAssignAdd());
1330:       assertFalse(node4.isContinue());
1331:       assertFalse(node4.hasMoreThanOneChild());
1332:       assertFalse(node4.isOr());
1333:       assertFalse(node4.isReturn());
1334:       assertFalse(node4.isLabel());
1335:       assertFalse(node4.isNumber());
1336:       assertEquals((-1), node4.getSourcePosition());
1337:       assertFalse(node4.isWhile());
1338:       assertFalse(node4.isNew());
1339:       assertFalse(node4.isAdd());
1340:       assertFalse(node4.isDo());
1341:       assertFalse(node4.hasOneChild());
1342:       assertFalse(node4.isBlock());
1343:       assertFalse(node4.isAssign());
1344:       assertFalse(node4.hasChildren());
1345:       assertFalse(node4.isDec());
1346:       assertFalse(node4.isTypeOf());
1347:       assertFalse(node4.isNull());
1348:       assertFalse(node4.isWith());
1349:       assertFalse(node4.isGetElem());
1350:       assertFalse(node4.isName());
1351:       assertEquals((-1), node4.getLineno());
1352:       assertFalse(node4.isCall());
1353:       assertFalse(node4.isExprResult());
1354:       assertFalse(node4.isAnd());
1355:       assertFalse(node4.isNot());
1356:       assertFalse(node4.isObjectLit());
1357:       assertFalse(node4.isComma());
1358:       assertFalse(node4.isSetterDef());
1359:       assertFalse(node4.isGetProp());
1360:       assertFalse(node4.isCast());
1361:       assertFalse(node4.isFalse());
1362:       assertFalse(node4.isThrow());
1363:       assertFalse(node4.isDebugger());
1364:       assertFalse(node4.isFunction());
1365:       assertFalse(node4.isIn());
1366:       assertFalse(node4.isGetterDef());
1367:       assertFalse(node4.isString());
1368:       assertFalse(node4.isCase());
1369:       assertFalse(node4.isEmpty());
1370:       assertFalse(node4.isInc());
1371:       assertFalse(node4.isHook());
1372:       assertFalse(node4.isFor());
1373:       assertFalse(node4.isTrue());
1374:       assertFalse(node4.isDelProp());
1375:       assertFalse(node4.isRegExp());
1376:       assertFalse(node4.isNE());
1377:       assertFalse(node4.isIf());
1378:       assertEquals(0, node4.getType());
1379:       assertFalse(node4.isVoid());
1380:       assertFalse(node4.isBreak());
1381:       assertFalse(node4.isInstanceOf());
1382:       assertEquals(0, node4.getChildCount());
1383:       assertFalse(node4.isCatch());
1384:       assertFalse(node4.isThis());
1385:       assertFalse(node4.isScript());
1386:       assertFalse(node4.isDefaultCase());
1387:       assertFalse(node4.isTry());
1388:       assertFalse(node4.isVar());
1389:       assertFalse(node4.isStringKey());
1390:       assertEquals((-1), node4.getCharno());
1391:       assertFalse(node4.isParamList());
1392:       assertFalse(node4.isSwitch());
1393:       assertFalse(node4.isLabelName());
1394:       assertFalse(node4.isArrayLit());
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(29, Node.JSDOC_INFO_PROP);
1397:       assertEquals(47, Node.IS_DISPATCHER);
1398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1399:       assertEquals(2, Node.POST_FLAG);
1400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1401:       assertEquals(37, Node.OPT_ARG_NAME);
1402:       assertEquals(46, Node.IS_NAMESPACE);
1403:       assertEquals(56, Node.CHANGE_TIME);
1404:       assertEquals(43, Node.IS_CONSTANT_NAME);
1405:       assertEquals(55, Node.INFERRED_FUNCTION);
1406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1407:       assertEquals(36, Node.QUOTED_PROP);
1408:       assertEquals(30, Node.VAR_ARGS_NAME);
1409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1410:       assertEquals(39, Node.EMPTY_BLOCK);
1411:       assertEquals(53, Node.INPUT_ID);
1412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1413:       assertEquals(57, Node.LAST_PROP);
1414:       assertEquals(40, Node.ORIGINALNAME_PROP);
1415:       assertEquals(57, Node.REFLECTED_OBJECT);
1416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1418:       assertEquals(52, Node.LENGTH);
1419:       assertEquals(8, Node.FLAG_NO_THROWS);
1420:       assertEquals(50, Node.FREE_CALL);
1421:       assertEquals(48, Node.DIRECTIVES);
1422:       assertEquals(54, Node.SLASH_V);
1423:       assertEquals(49, Node.DIRECT_EVAL);
1424:       assertEquals(1, Node.DECR_FLAG);
1425:       assertEquals(12, Node.COLUMN_BITS);
1426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1427:       assertEquals(4095, Node.COLUMN_MASK);
1428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1430:       assertEquals(32, Node.INCRDECR_PROP);
1431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1432:       assertEquals(57, Node.LAST_PROP);
1433:       assertEquals(30, Node.VAR_ARGS_NAME);
1434:       assertEquals(49, Node.DIRECT_EVAL);
1435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1436:       assertEquals(12, Node.COLUMN_BITS);
1437:       assertEquals(54, Node.SLASH_V);
1438:       assertEquals(37, Node.OPT_ARG_NAME);
1439:       assertEquals(40, Node.ORIGINALNAME_PROP);
1440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1442:       assertEquals(50, Node.FREE_CALL);
1443:       assertEquals(46, Node.IS_NAMESPACE);
1444:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1445:       assertEquals(32, Node.INCRDECR_PROP);
1446:       assertEquals(1, Node.DECR_FLAG);
1447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1452:       assertEquals(4095, Node.COLUMN_MASK);
1453:       assertEquals(48, Node.DIRECTIVES);
1454:       assertEquals(56, Node.CHANGE_TIME);
1455:       assertEquals(47, Node.IS_DISPATCHER);
1456:       assertEquals(2, Node.POST_FLAG);
1457:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1458:       assertEquals(8, Node.FLAG_NO_THROWS);
1459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1460:       assertEquals(57, Node.REFLECTED_OBJECT);
1461:       assertEquals(52, Node.LENGTH);
1462:       assertEquals(55, Node.INFERRED_FUNCTION);
1463:       assertEquals(39, Node.EMPTY_BLOCK);
1464:       assertEquals(29, Node.JSDOC_INFO_PROP);
1465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1466:       assertEquals(53, Node.INPUT_ID);
1467:       assertEquals(57, Node.REFLECTED_OBJECT);
1468:       assertEquals(40, Node.ORIGINALNAME_PROP);
1469:       assertEquals(57, Node.LAST_PROP);
1470:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1473:       assertEquals(30, Node.VAR_ARGS_NAME);
1474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1475:       assertEquals(12, Node.COLUMN_BITS);
1476:       assertEquals(46, Node.IS_NAMESPACE);
1477:       assertEquals(32, Node.INCRDECR_PROP);
1478:       assertEquals(1, Node.DECR_FLAG);
1479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1480:       assertEquals(43, Node.IS_CONSTANT_NAME);
1481:       assertEquals(54, Node.SLASH_V);
1482:       assertEquals(50, Node.FREE_CALL);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1485:       assertEquals(29, Node.JSDOC_INFO_PROP);
1486:       assertEquals(53, Node.INPUT_ID);
1487:       assertEquals(47, Node.IS_DISPATCHER);
1488:       assertEquals(2, Node.POST_FLAG);
1489:       assertEquals(4095, Node.COLUMN_MASK);
1490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1491:       assertEquals(55, Node.INFERRED_FUNCTION);
1492:       assertEquals(49, Node.DIRECT_EVAL);
1493:       assertEquals(37, Node.OPT_ARG_NAME);
1494:       assertEquals(48, Node.DIRECTIVES);
1495:       assertEquals(36, Node.QUOTED_PROP);
1496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1497:       assertEquals(8, Node.FLAG_NO_THROWS);
1498:       assertEquals(39, Node.EMPTY_BLOCK);
1499:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1500:       assertEquals(56, Node.CHANGE_TIME);
1501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1502:       assertEquals(52, Node.LENGTH);
1503:       assertNotNull(node4);
1504:       assertNotSame(node0, node1);
1505:       assertNotSame(node0, node3);
1506:       assertSame(node0, node4);
1507:       assertNotSame(node0, node2);
1508:       assertSame(node1, node3);
1509:       assertNotSame(node1, node0);
1510:       assertNotSame(node1, node2);
1511:       assertNotSame(node1, node4);
1512:       assertNotSame(node4, node2);
1513:       assertNotSame(node4, node1);
1514:       assertNotSame(node4, node3);
1515:       assertSame(node4, node0);
1516:       assertFalse(node0.equals((Object)node1));
1517:       assertFalse(node0.equals((Object)node3));
1518:       assertFalse(node0.equals((Object)node2));
1519:       assertFalse(node1.equals((Object)node0));
1520:       assertFalse(node1.equals((Object)node2));
1521:       assertFalse(node4.equals((Object)node2));
1522:       assertFalse(node4.equals((Object)node1));
1523:       assertFalse(node4.equals((Object)node3));
1524:       
1525:       boolean boolean1 = node1.isQualifiedName();
1526:       assertFalse(node0.isAnd());
1527:       assertFalse(node0.isObjectLit());
1528:       assertFalse(node0.isInstanceOf());
1529:       assertFalse(node0.isExprResult());
1530:       assertFalse(node0.isThis());
1531:       assertFalse(node0.isWith());
1532:       assertFalse(node0.isComma());
1533:       assertFalse(node0.isFalse());
1534:       assertFalse(node0.isCast());
1535:       assertFalse(node0.isLabelName());
1536:       assertFalse(node0.hasOneChild());
1537:       assertFalse(node0.isGetProp());
1538:       assertEquals((-1), node0.getCharno());
1539:       assertFalse(node0.isScript());
1540:       assertFalse(node0.isSwitch());
1541:       assertFalse(node0.isNumber());
1542:       assertFalse(node0.isNot());
1543:       assertEquals((-1), node0.getSourcePosition());
1544:       assertFalse(node0.isContinue());
1545:       assertFalse(node0.hasMoreThanOneChild());
1546:       assertEquals((-1), node0.getLineno());
1547:       assertFalse(node0.isCase());
1548:       assertFalse(node0.isBlock());
1549:       assertFalse(node0.isHook());
1550:       assertFalse(node0.isThrow());
1551:       assertFalse(node0.isIf());
1552:       assertFalse(node0.isSetterDef());
1553:       assertFalse(node0.isInc());
1554:       assertFalse(node0.isNE());
1555:       assertFalse(node0.isIn());
1556:       assertFalse(node0.isCatch());
1557:       assertFalse(node0.isDefaultCase());
1558:       assertFalse(node0.isFunction());
1559:       assertEquals(0, node0.getChildCount());
1560:       assertFalse(node0.isRegExp());
1561:       assertFalse(node0.isFor());
1562:       assertFalse(node0.isStringKey());
1563:       assertFalse(node0.isTry());
1564:       assertFalse(node0.isArrayLit());
1565:       assertFalse(node0.isDebugger());
1566:       assertFalse(node0.isParamList());
1567:       assertFalse(node0.isGetterDef());
1568:       assertFalse(node0.isWhile());
1569:       assertFalse(node0.isString());
1570:       assertFalse(node0.isDo());
1571:       assertEquals(0, node0.getType());
1572:       assertFalse(node0.isAssignAdd());
1573:       assertFalse(node0.hasChildren());
1574:       assertFalse(node0.isTypeOf());
1575:       assertFalse(node0.isReturn());
1576:       assertFalse(node0.isAssign());
1577:       assertFalse(node0.isLabel());
1578:       assertFalse(node0.isDec());
1579:       assertFalse(node0.isGetElem());
1580:       assertFalse(node0.isName());
1581:       assertFalse(node0.isCall());
1582:       assertFalse(node0.isVar());
1583:       assertFalse(node0.isEmpty());
1584:       assertFalse(node0.isBreak());
1585:       assertFalse(node0.isDelProp());
1586:       assertFalse(node0.isNew());
1587:       assertFalse(node0.isVoid());
1588:       assertFalse(node0.isTrue());
1589:       assertFalse(node0.isAdd());
1590:       assertFalse(node0.isNull());
1591:       assertFalse(node0.isOr());
1592:       assertFalse(node1.isDelProp());
1593:       assertFalse(node1.isGetterDef());
1594:       assertFalse(node1.isIf());
1595:       assertTrue(node1.hasOneChild());
1596:       assertTrue(node1.hasChildren());
1597:       assertFalse(node1.isEmpty());
1598:       assertFalse(node1.isTry());
1599:       assertEquals(1, node1.getChildCount());
1600:       assertFalse(node1.isFor());
1601:       assertFalse(node1.isDefaultCase());
1602:       assertEquals(16773170, node1.getSourcePosition());
1603:       assertFalse(node1.isRegExp());
1604:       assertEquals(0, node1.getType());
1605:       assertFalse(node1.isInc());
1606:       assertFalse(node1.isCatch());
1607:       assertFalse(node1.isIn());
1608:       assertFalse(node1.isVoid());
1609:       assertFalse(node1.isTrue());
1610:       assertFalse(node1.isNE());
1611:       assertFalse(node1.isNull());
1612:       assertFalse(node1.isHook());
1613:       assertFalse(node1.isNew());
1614:       assertFalse(node1.isBlock());
1615:       assertFalse(node1.isThis());
1616:       assertFalse(node1.isVar());
1617:       assertFalse(node1.isCase());
1618:       assertFalse(node1.isScript());
1619:       assertFalse(node1.isArrayLit());
1620:       assertFalse(node1.isSwitch());
1621:       assertFalse(node1.isParamList());
1622:       assertFalse(node1.isStringKey());
1623:       assertFalse(node1.isNumber());
1624:       assertFalse(node1.isTypeOf());
1625:       assertFalse(node1.isAssign());
1626:       assertFalse(node1.isLabelName());
1627:       assertFalse(node1.isDec());
1628:       assertFalse(node1.isGetElem());
1629:       assertFalse(node1.isCast());
1630:       assertFalse(node1.isReturn());
1631:       assertFalse(node1.isLabel());
1632:       assertFalse(node1.isAssignAdd());
1633:       assertFalse(node1.isWhile());
1634:       assertEquals(50, node1.getCharno());
1635:       assertFalse(node1.isWith());
1636:       assertFalse(node1.isDo());
1637:       assertFalse(node1.isExprResult());
1638:       assertFalse(node1.hasMoreThanOneChild());
1639:       assertFalse(node1.isAdd());
1640:       assertFalse(node1.isInstanceOf());
1641:       assertFalse(node1.isOr());
1642:       assertEquals(4095, node1.getLineno());
1643:       assertFalse(node1.isName());
1644:       assertFalse(node1.isBreak());
1645:       assertFalse(node1.isComma());
1646:       assertFalse(node1.isGetProp());
1647:       assertFalse(node1.isCall());
1648:       assertFalse(node1.isFalse());
1649:       assertFalse(node1.isSetterDef());
1650:       assertFalse(node1.isThrow());
1651:       assertFalse(node1.isNot());
1652:       assertFalse(node1.isContinue());
1653:       assertFalse(node1.isObjectLit());
1654:       assertFalse(node1.isFunction());
1655:       assertFalse(node1.isString());
1656:       assertFalse(node1.isAnd());
1657:       assertFalse(node1.isDebugger());
1658:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1659:       assertEquals(29, Node.JSDOC_INFO_PROP);
1660:       assertEquals(47, Node.IS_DISPATCHER);
1661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1662:       assertEquals(2, Node.POST_FLAG);
1663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1664:       assertEquals(37, Node.OPT_ARG_NAME);
1665:       assertEquals(46, Node.IS_NAMESPACE);
1666:       assertEquals(56, Node.CHANGE_TIME);
1667:       assertEquals(43, Node.IS_CONSTANT_NAME);
1668:       assertEquals(55, Node.INFERRED_FUNCTION);
1669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1670:       assertEquals(36, Node.QUOTED_PROP);
1671:       assertEquals(30, Node.VAR_ARGS_NAME);
1672:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1673:       assertEquals(39, Node.EMPTY_BLOCK);
1674:       assertEquals(53, Node.INPUT_ID);
1675:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1676:       assertEquals(57, Node.LAST_PROP);
1677:       assertEquals(40, Node.ORIGINALNAME_PROP);
1678:       assertEquals(57, Node.REFLECTED_OBJECT);
1679:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1681:       assertEquals(52, Node.LENGTH);
1682:       assertEquals(8, Node.FLAG_NO_THROWS);
1683:       assertEquals(50, Node.FREE_CALL);
1684:       assertEquals(48, Node.DIRECTIVES);
1685:       assertEquals(54, Node.SLASH_V);
1686:       assertEquals(49, Node.DIRECT_EVAL);
1687:       assertEquals(1, Node.DECR_FLAG);
1688:       assertEquals(12, Node.COLUMN_BITS);
1689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1690:       assertEquals(4095, Node.COLUMN_MASK);
1691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1693:       assertEquals(32, Node.INCRDECR_PROP);
1694:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1695:       assertEquals(57, Node.LAST_PROP);
1696:       assertEquals(30, Node.VAR_ARGS_NAME);
1697:       assertEquals(49, Node.DIRECT_EVAL);
1698:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1699:       assertEquals(12, Node.COLUMN_BITS);
1700:       assertEquals(54, Node.SLASH_V);
1701:       assertEquals(37, Node.OPT_ARG_NAME);
1702:       assertEquals(40, Node.ORIGINALNAME_PROP);
1703:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1705:       assertEquals(50, Node.FREE_CALL);
1706:       assertEquals(46, Node.IS_NAMESPACE);
1707:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1708:       assertEquals(32, Node.INCRDECR_PROP);
1709:       assertEquals(1, Node.DECR_FLAG);
1710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1711:       assertEquals(43, Node.IS_CONSTANT_NAME);
1712:       assertEquals(36, Node.QUOTED_PROP);
1713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1715:       assertEquals(4095, Node.COLUMN_MASK);
1716:       assertEquals(48, Node.DIRECTIVES);
1717:       assertEquals(56, Node.CHANGE_TIME);
1718:       assertEquals(47, Node.IS_DISPATCHER);
1719:       assertEquals(2, Node.POST_FLAG);
1720:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1721:       assertEquals(8, Node.FLAG_NO_THROWS);
1722:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1723:       assertEquals(57, Node.REFLECTED_OBJECT);
1724:       assertEquals(52, Node.LENGTH);
1725:       assertEquals(55, Node.INFERRED_FUNCTION);
1726:       assertEquals(39, Node.EMPTY_BLOCK);
1727:       assertEquals(29, Node.JSDOC_INFO_PROP);
1728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1729:       assertEquals(53, Node.INPUT_ID);
1730:       assertFalse(boolean1);
1731:       assertNotSame(node0, node1);
1732:       assertNotSame(node0, node3);
1733:       assertSame(node0, node4);
1734:       assertNotSame(node0, node2);
1735:       assertSame(node1, node3);
1736:       assertNotSame(node1, node0);
1737:       assertNotSame(node1, node2);
1738:       assertNotSame(node1, node4);
1739:       assertFalse(node0.equals((Object)node1));
1740:       assertFalse(node0.equals((Object)node3));
1741:       assertFalse(node0.equals((Object)node2));
1742:       assertFalse(node1.equals((Object)node0));
1743:       assertFalse(node1.equals((Object)node2));
1744:       assertFalse(node1.equals((Object)node4));
1745:       assertTrue(boolean1 == boolean0);
1746:       
1747:       Node node5 = node1.copyInformationFrom(node4);
1748:       assertFalse(node0.isAnd());
1749:       assertFalse(node0.isObjectLit());
1750:       assertFalse(node0.isInstanceOf());
1751:       assertFalse(node0.isExprResult());
1752:       assertFalse(node0.isThis());
1753:       assertFalse(node0.isWith());
1754:       assertFalse(node0.isComma());
1755:       assertFalse(node0.isFalse());
1756:       assertFalse(node0.isCast());
1757:       assertFalse(node0.isLabelName());
1758:       assertFalse(node0.hasOneChild());
1759:       assertFalse(node0.isGetProp());
1760:       assertEquals((-1), node0.getCharno());
1761:       assertFalse(node0.isScript());
1762:       assertFalse(node0.isSwitch());
1763:       assertFalse(node0.isNumber());
1764:       assertFalse(node0.isNot());
1765:       assertEquals((-1), node0.getSourcePosition());
1766:       assertFalse(node0.isContinue());
1767:       assertFalse(node0.hasMoreThanOneChild());
1768:       assertEquals((-1), node0.getLineno());
1769:       assertFalse(node0.isCase());
1770:       assertFalse(node0.isBlock());
1771:       assertFalse(node0.isHook());
1772:       assertFalse(node0.isThrow());
1773:       assertFalse(node0.isIf());
1774:       assertFalse(node0.isSetterDef());
1775:       assertFalse(node0.isInc());
1776:       assertFalse(node0.isNE());
1777:       assertFalse(node0.isIn());
1778:       assertFalse(node0.isCatch());
1779:       assertFalse(node0.isDefaultCase());
1780:       assertFalse(node0.isFunction());
1781:       assertEquals(0, node0.getChildCount());
1782:       assertFalse(node0.isRegExp());
1783:       assertFalse(node0.isFor());
1784:       assertFalse(node0.isStringKey());
1785:       assertFalse(node0.isTry());
1786:       assertFalse(node0.isArrayLit());
1787:       assertFalse(node0.isDebugger());
1788:       assertFalse(node0.isParamList());
1789:       assertFalse(node0.isGetterDef());
1790:       assertFalse(node0.isWhile());
1791:       assertFalse(node0.isString());
1792:       assertFalse(node0.isDo());
1793:       assertEquals(0, node0.getType());
1794:       assertFalse(node0.isAssignAdd());
1795:       assertFalse(node0.hasChildren());
1796:       assertFalse(node0.isTypeOf());
1797:       assertFalse(node0.isReturn());
1798:       assertFalse(node0.isAssign());
1799:       assertFalse(node0.isLabel());
1800:       assertFalse(node0.isDec());
1801:       assertFalse(node0.isGetElem());
1802:       assertFalse(node0.isName());
1803:       assertFalse(node0.isCall());
1804:       assertFalse(node0.isVar());
1805:       assertFalse(node0.isEmpty());
1806:       assertFalse(node0.isBreak());
1807:       assertFalse(node0.isDelProp());
1808:       assertFalse(node0.isNew());
1809:       assertFalse(node0.isVoid());
1810:       assertFalse(node0.isTrue());
1811:       assertFalse(node0.isAdd());
1812:       assertFalse(node0.isNull());
1813:       assertFalse(node0.isOr());
1814:       assertFalse(node1.isDelProp());
1815:       assertFalse(node1.isGetterDef());
1816:       assertFalse(node1.isIf());
1817:       assertTrue(node1.hasOneChild());
1818:       assertTrue(node1.hasChildren());
1819:       assertFalse(node1.isEmpty());
1820:       assertFalse(node1.isTry());
1821:       assertEquals(1, node1.getChildCount());
1822:       assertFalse(node1.isFor());
1823:       assertFalse(node1.isDefaultCase());
1824:       assertFalse(node1.isRegExp());
1825:       assertEquals(0, node1.getType());
1826:       assertFalse(node1.isInc());
1827:       assertFalse(node1.isCatch());
1828:       assertFalse(node1.isIn());
1829:       assertFalse(node1.isVoid());
1830:       assertFalse(node1.isTrue());
1831:       assertFalse(node1.isNE());
1832:       assertFalse(node1.isNull());
1833:       assertFalse(node1.isHook());
1834:       assertFalse(node1.isNew());
1835:       assertFalse(node1.isBlock());
1836:       assertFalse(node1.isThis());
1837:       assertFalse(node1.isVar());
1838:       assertFalse(node1.isCase());
1839:       assertFalse(node1.isScript());
1840:       assertFalse(node1.isArrayLit());
1841:       assertEquals((-1), node1.getCharno());
1842:       assertFalse(node1.isSwitch());
1843:       assertFalse(node1.isParamList());
1844:       assertFalse(node1.isStringKey());
1845:       assertFalse(node1.isNumber());
1846:       assertFalse(node1.isTypeOf());
1847:       assertFalse(node1.isAssign());
1848:       assertFalse(node1.isLabelName());
1849:       assertFalse(node1.isDec());
1850:       assertEquals((-1), node1.getSourcePosition());
1851:       assertFalse(node1.isGetElem());
1852:       assertFalse(node1.isCast());
1853:       assertFalse(node1.isReturn());
1854:       assertFalse(node1.isLabel());
1855:       assertFalse(node1.isAssignAdd());
1856:       assertFalse(node1.isWhile());
1857:       assertFalse(node1.isWith());
1858:       assertFalse(node1.isDo());
1859:       assertFalse(node1.isExprResult());
1860:       assertFalse(node1.hasMoreThanOneChild());
1861:       assertFalse(node1.isAdd());
1862:       assertFalse(node1.isInstanceOf());
1863:       assertFalse(node1.isOr());
1864:       assertEquals((-1), node1.getLineno());
1865:       assertFalse(node1.isName());
1866:       assertFalse(node1.isBreak());
1867:       assertFalse(node1.isComma());
1868:       assertFalse(node1.isGetProp());
1869:       assertFalse(node1.isCall());
1870:       assertFalse(node1.isFalse());
1871:       assertFalse(node1.isSetterDef());
1872:       assertFalse(node1.isThrow());
1873:       assertFalse(node1.isNot());
1874:       assertFalse(node1.isContinue());
1875:       assertFalse(node1.isObjectLit());
1876:       assertFalse(node1.isFunction());
1877:       assertFalse(node1.isString());
1878:       assertFalse(node1.isAnd());
1879:       assertFalse(node1.isDebugger());
1880:       assertFalse(node4.isAssignAdd());
1881:       assertFalse(node4.isContinue());
1882:       assertFalse(node4.hasMoreThanOneChild());
1883:       assertFalse(node4.isOr());
1884:       assertFalse(node4.isReturn());
1885:       assertFalse(node4.isLabel());
1886:       assertFalse(node4.isNumber());
1887:       assertEquals((-1), node4.getSourcePosition());
1888:       assertFalse(node4.isWhile());
1889:       assertFalse(node4.isNew());
1890:       assertFalse(node4.isAdd());
1891:       assertFalse(node4.isDo());
1892:       assertFalse(node4.hasOneChild());
1893:       assertFalse(node4.isBlock());
1894:       assertFalse(node4.isAssign());
1895:       assertFalse(node4.hasChildren());
1896:       assertFalse(node4.isDec());
1897:       assertFalse(node4.isTypeOf());
1898:       assertFalse(node4.isNull());
1899:       assertFalse(node4.isWith());
1900:       assertFalse(node4.isGetElem());
1901:       assertFalse(node4.isName());
1902:       assertEquals((-1), node4.getLineno());
1903:       assertFalse(node4.isCall());
1904:       assertFalse(node4.isExprResult());
1905:       assertFalse(node4.isAnd());
1906:       assertFalse(node4.isNot());
1907:       assertFalse(node4.isObjectLit());
1908:       assertFalse(node4.isComma());
1909:       assertFalse(node4.isSetterDef());
1910:       assertFalse(node4.isGetProp());
1911:       assertFalse(node4.isCast());
1912:       assertFalse(node4.isFalse());
1913:       assertFalse(node4.isThrow());
1914:       assertFalse(node4.isDebugger());
1915:       assertFalse(node4.isFunction());
1916:       assertFalse(node4.isIn());
1917:       assertFalse(node4.isGetterDef());
1918:       assertFalse(node4.isString());
1919:       assertFalse(node4.isCase());
1920:       assertFalse(node4.isEmpty());
1921:       assertFalse(node4.isInc());
1922:       assertFalse(node4.isHook());
1923:       assertFalse(node4.isFor());
1924:       assertFalse(node4.isTrue());
1925:       assertFalse(node4.isDelProp());
1926:       assertFalse(node4.isRegExp());
1927:       assertFalse(node4.isNE());
1928:       assertFalse(node4.isIf());
1929:       assertEquals(0, node4.getType());
1930:       assertFalse(node4.isVoid());
1931:       assertFalse(node4.isBreak());
1932:       assertFalse(node4.isInstanceOf());
1933:       assertEquals(0, node4.getChildCount());
1934:       assertFalse(node4.isCatch());
1935:       assertFalse(node4.isThis());
1936:       assertFalse(node4.isScript());
1937:       assertFalse(node4.isDefaultCase());
1938:       assertFalse(node4.isTry());
1939:       assertFalse(node4.isVar());
1940:       assertFalse(node4.isStringKey());
1941:       assertEquals((-1), node4.getCharno());
1942:       assertFalse(node4.isParamList());
1943:       assertFalse(node4.isSwitch());
1944:       assertFalse(node4.isLabelName());
1945:       assertFalse(node4.isArrayLit());
1946:       assertFalse(node5.isParamList());
1947:       assertFalse(node5.isNull());
1948:       assertFalse(node5.isDefaultCase());
1949:       assertFalse(node5.isSetterDef());
1950:       assertFalse(node5.isNew());
1951:       assertFalse(node5.isArrayLit());
1952:       assertFalse(node5.isDebugger());
1953:       assertFalse(node5.isVar());
1954:       assertFalse(node5.isStringKey());
1955:       assertFalse(node5.isContinue());
1956:       assertFalse(node5.isFunction());
1957:       assertFalse(node5.isReturn());
1958:       assertFalse(node5.isLabel());
1959:       assertFalse(node5.isAssignAdd());
1960:       assertFalse(node5.isOr());
1961:       assertFalse(node5.isWhile());
1962:       assertFalse(node5.isString());
1963:       assertEquals((-1), node5.getSourcePosition());
1964:       assertFalse(node5.isDo());
1965:       assertFalse(node5.isAdd());
1966:       assertFalse(node5.isEmpty());
1967:       assertFalse(node5.isVoid());
1968:       assertFalse(node5.isTrue());
1969:       assertFalse(node5.isDelProp());
1970:       assertTrue(node5.hasOneChild());
1971:       assertFalse(node5.isBreak());
1972:       assertFalse(node5.isTypeOf());
1973:       assertFalse(node5.isName());
1974:       assertFalse(node5.isDec());
1975:       assertFalse(node5.isAssign());
1976:       assertFalse(node5.isComma());
1977:       assertFalse(node5.isCall());
1978:       assertFalse(node5.isExprResult());
1979:       assertFalse(node5.isGetElem());
1980:       assertEquals(0, node5.getType());
1981:       assertFalse(node5.isAnd());
1982:       assertFalse(node5.isThis());
1983:       assertFalse(node5.isNot());
1984:       assertFalse(node5.isObjectLit());
1985:       assertFalse(node5.isGetProp());
1986:       assertFalse(node5.isScript());
1987:       assertEquals((-1), node5.getCharno());
1988:       assertFalse(node5.isSwitch());
1989:       assertFalse(node5.isThrow());
1990:       assertFalse(node5.isLabelName());
1991:       assertFalse(node5.isFalse());
1992:       assertFalse(node5.isCast());
1993:       assertEquals((-1), node5.getLineno());
1994:       assertEquals(1, node5.getChildCount());
1995:       assertFalse(node5.isIn());
1996:       assertFalse(node5.isNE());
1997:       assertFalse(node5.isGetterDef());
1998:       assertFalse(node5.isNumber());
1999:       assertFalse(node5.isCase());
2000:       assertFalse(node5.isInc());
2001:       assertFalse(node5.isHook());
2002:       assertFalse(node5.isTry());
2003:       assertFalse(node5.isFor());
2004:       assertFalse(node5.isBlock());
2005:       assertFalse(node5.isWith());
2006:       assertFalse(node5.isIf());
2007:       assertFalse(node5.isRegExp());
2008:       assertFalse(node5.hasMoreThanOneChild());
2009:       assertTrue(node5.hasChildren());
2010:       assertFalse(node5.isCatch());
2011:       assertFalse(node5.isInstanceOf());
2012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2013:       assertEquals(29, Node.JSDOC_INFO_PROP);
2014:       assertEquals(47, Node.IS_DISPATCHER);
2015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2016:       assertEquals(2, Node.POST_FLAG);
2017:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2018:       assertEquals(37, Node.OPT_ARG_NAME);
2019:       assertEquals(46, Node.IS_NAMESPACE);
2020:       assertEquals(56, Node.CHANGE_TIME);
2021:       assertEquals(43, Node.IS_CONSTANT_NAME);
2022:       assertEquals(55, Node.INFERRED_FUNCTION);
2023:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2024:       assertEquals(36, Node.QUOTED_PROP);
2025:       assertEquals(30, Node.VAR_ARGS_NAME);
2026:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2027:       assertEquals(39, Node.EMPTY_BLOCK);
2028:       assertEquals(53, Node.INPUT_ID);
2029:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2030:       assertEquals(57, Node.LAST_PROP);
2031:       assertEquals(40, Node.ORIGINALNAME_PROP);
2032:       assertEquals(57, Node.REFLECTED_OBJECT);
2033:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2034:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2035:       assertEquals(52, Node.LENGTH);
2036:       assertEquals(8, Node.FLAG_NO_THROWS);
2037:       assertEquals(50, Node.FREE_CALL);
2038:       assertEquals(48, Node.DIRECTIVES);
2039:       assertEquals(54, Node.SLASH_V);
2040:       assertEquals(49, Node.DIRECT_EVAL);
2041:       assertEquals(1, Node.DECR_FLAG);
2042:       assertEquals(12, Node.COLUMN_BITS);
2043:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2044:       assertEquals(4095, Node.COLUMN_MASK);
2045:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2046:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2047:       assertEquals(32, Node.INCRDECR_PROP);
2048:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2049:       assertEquals(57, Node.LAST_PROP);
2050:       assertEquals(30, Node.VAR_ARGS_NAME);
2051:       assertEquals(49, Node.DIRECT_EVAL);
2052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2053:       assertEquals(12, Node.COLUMN_BITS);
2054:       assertEquals(54, Node.SLASH_V);
2055:       assertEquals(37, Node.OPT_ARG_NAME);
2056:       assertEquals(40, Node.ORIGINALNAME_PROP);
2057:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2058:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2059:       assertEquals(50, Node.FREE_CALL);
2060:       assertEquals(46, Node.IS_NAMESPACE);
2061:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2062:       assertEquals(32, Node.INCRDECR_PROP);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2065:       assertEquals(43, Node.IS_CONSTANT_NAME);
2066:       assertEquals(36, Node.QUOTED_PROP);
2067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2069:       assertEquals(4095, Node.COLUMN_MASK);
2070:       assertEquals(48, Node.DIRECTIVES);
2071:       assertEquals(56, Node.CHANGE_TIME);
2072:       assertEquals(47, Node.IS_DISPATCHER);
2073:       assertEquals(2, Node.POST_FLAG);
2074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2075:       assertEquals(8, Node.FLAG_NO_THROWS);
2076:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2077:       assertEquals(57, Node.REFLECTED_OBJECT);
2078:       assertEquals(52, Node.LENGTH);
2079:       assertEquals(55, Node.INFERRED_FUNCTION);
2080:       assertEquals(39, Node.EMPTY_BLOCK);
2081:       assertEquals(29, Node.JSDOC_INFO_PROP);
2082:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2083:       assertEquals(53, Node.INPUT_ID);
2084:       assertEquals(57, Node.REFLECTED_OBJECT);
2085:       assertEquals(40, Node.ORIGINALNAME_PROP);
2086:       assertEquals(57, Node.LAST_PROP);
2087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2089:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2090:       assertEquals(30, Node.VAR_ARGS_NAME);
2091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2092:       assertEquals(12, Node.COLUMN_BITS);
2093:       assertEquals(46, Node.IS_NAMESPACE);
2094:       assertEquals(32, Node.INCRDECR_PROP);
2095:       assertEquals(1, Node.DECR_FLAG);
2096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2097:       assertEquals(43, Node.IS_CONSTANT_NAME);
2098:       assertEquals(54, Node.SLASH_V);
2099:       assertEquals(50, Node.FREE_CALL);
2100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2102:       assertEquals(29, Node.JSDOC_INFO_PROP);
2103:       assertEquals(53, Node.INPUT_ID);
2104:       assertEquals(47, Node.IS_DISPATCHER);
2105:       assertEquals(2, Node.POST_FLAG);
2106:       assertEquals(4095, Node.COLUMN_MASK);
2107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2108:       assertEquals(55, Node.INFERRED_FUNCTION);
2109:       assertEquals(49, Node.DIRECT_EVAL);
2110:       assertEquals(37, Node.OPT_ARG_NAME);
2111:       assertEquals(48, Node.DIRECTIVES);
2112:       assertEquals(36, Node.QUOTED_PROP);
2113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2114:       assertEquals(8, Node.FLAG_NO_THROWS);
2115:       assertEquals(39, Node.EMPTY_BLOCK);
2116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2117:       assertEquals(56, Node.CHANGE_TIME);
2118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2119:       assertEquals(52, Node.LENGTH);
2120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2122:       assertEquals(29, Node.JSDOC_INFO_PROP);
2123:       assertEquals(53, Node.INPUT_ID);
2124:       assertEquals(2, Node.POST_FLAG);
2125:       assertEquals(47, Node.IS_DISPATCHER);
2126:       assertEquals(4095, Node.COLUMN_MASK);
2127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2128:       assertEquals(48, Node.DIRECTIVES);
2129:       assertEquals(55, Node.INFERRED_FUNCTION);
2130:       assertEquals(37, Node.OPT_ARG_NAME);
2131:       assertEquals(39, Node.EMPTY_BLOCK);
2132:       assertEquals(56, Node.CHANGE_TIME);
2133:       assertEquals(36, Node.QUOTED_PROP);
2134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2135:       assertEquals(49, Node.DIRECT_EVAL);
2136:       assertEquals(8, Node.FLAG_NO_THROWS);
2137:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2138:       assertEquals(57, Node.REFLECTED_OBJECT);
2139:       assertEquals(52, Node.LENGTH);
2140:       assertEquals(40, Node.ORIGINALNAME_PROP);
2141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2143:       assertEquals(57, Node.LAST_PROP);
2144:       assertEquals(30, Node.VAR_ARGS_NAME);
2145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2146:       assertEquals(12, Node.COLUMN_BITS);
2147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2148:       assertEquals(32, Node.INCRDECR_PROP);
2149:       assertEquals(46, Node.IS_NAMESPACE);
2150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2151:       assertEquals(1, Node.DECR_FLAG);
2152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2153:       assertEquals(43, Node.IS_CONSTANT_NAME);
2154:       assertEquals(50, Node.FREE_CALL);
2155:       assertEquals(54, Node.SLASH_V);
2156:       assertNotNull(node5);
2157:       assertNotSame(node0, node1);
2158:       assertNotSame(node0, node3);
2159:       assertSame(node0, node4);
2160:       assertNotSame(node0, node5);
2161:       assertNotSame(node0, node2);
2162:       assertSame(node1, node3);
2163:       assertNotSame(node1, node0);
2164:       assertSame(node1, node5);
2165:       assertNotSame(node1, node2);
2166:       assertNotSame(node1, node4);
2167:       assertNotSame(node4, node2);
2168:       assertNotSame(node4, node1);
2169:       assertNotSame(node4, node3);
2170:       assertNotSame(node4, node5);
2171:       assertSame(node4, node0);
2172:       assertNotSame(node5, node2);
2173:       assertNotSame(node5, node4);
2174:       assertSame(node5, node1);
2175:       assertSame(node5, node3);
2176:       assertNotSame(node5, node0);
2177:       assertFalse(node0.equals((Object)node1));
2178:       assertFalse(node0.equals((Object)node3));
2179:       assertFalse(node0.equals((Object)node2));
2180:       assertFalse(node1.equals((Object)node0));
2181:       assertFalse(node1.equals((Object)node2));
2182:       assertFalse(node1.equals((Object)node4));
2183:       assertFalse(node4.equals((Object)node2));
2184:       assertFalse(node4.equals((Object)node1));
2185:       assertFalse(node4.equals((Object)node3));
2186:       assertFalse(node5.equals((Object)node2));
2187:       assertFalse(node5.equals((Object)node4));
2188:       assertFalse(node5.equals((Object)node0));
2189:       
2190:       node4.addSuppression("");
2191:       assertFalse(node0.isAnd());
2192:       assertFalse(node0.isObjectLit());
2193:       assertFalse(node0.isInstanceOf());
2194:       assertFalse(node0.isExprResult());
2195:       assertFalse(node0.isThis());
2196:       assertFalse(node0.isWith());
2197:       assertFalse(node0.isComma());
2198:       assertFalse(node0.isFalse());
2199:       assertFalse(node0.isCast());
2200:       assertFalse(node0.isLabelName());
2201:       assertFalse(node0.hasOneChild());
2202:       assertFalse(node0.isGetProp());
2203:       assertEquals((-1), node0.getCharno());
2204:       assertFalse(node0.isScript());
2205:       assertFalse(node0.isSwitch());
2206:       assertFalse(node0.isNumber());
2207:       assertFalse(node0.isNot());
2208:       assertEquals((-1), node0.getSourcePosition());
2209:       assertFalse(node0.isContinue());
2210:       assertFalse(node0.hasMoreThanOneChild());
2211:       assertEquals((-1), node0.getLineno());
2212:       assertFalse(node0.isCase());
2213:       assertFalse(node0.isBlock());
2214:       assertFalse(node0.isHook());
2215:       assertFalse(node0.isThrow());
2216:       assertFalse(node0.isIf());
2217:       assertFalse(node0.isSetterDef());
2218:       assertFalse(node0.isInc());
2219:       assertFalse(node0.isNE());
2220:       assertFalse(node0.isIn());
2221:       assertFalse(node0.isCatch());
2222:       assertFalse(node0.isDefaultCase());
2223:       assertFalse(node0.isFunction());
2224:       assertEquals(0, node0.getChildCount());
2225:       assertFalse(node0.isRegExp());
2226:       assertFalse(node0.isFor());
2227:       assertFalse(node0.isStringKey());
2228:       assertFalse(node0.isTry());
2229:       assertFalse(node0.isArrayLit());
2230:       assertFalse(node0.isDebugger());
2231:       assertFalse(node0.isParamList());
2232:       assertFalse(node0.isGetterDef());
2233:       assertFalse(node0.isWhile());
2234:       assertFalse(node0.isString());
2235:       assertFalse(node0.isDo());
2236:       assertEquals(0, node0.getType());
2237:       assertFalse(node0.isAssignAdd());
2238:       assertFalse(node0.hasChildren());
2239:       assertFalse(node0.isTypeOf());
2240:       assertFalse(node0.isReturn());
2241:       assertFalse(node0.isAssign());
2242:       assertFalse(node0.isLabel());
2243:       assertFalse(node0.isDec());
2244:       assertFalse(node0.isGetElem());
2245:       assertFalse(node0.isName());
2246:       assertFalse(node0.isCall());
2247:       assertFalse(node0.isVar());
2248:       assertFalse(node0.isEmpty());
2249:       assertFalse(node0.isBreak());
2250:       assertFalse(node0.isDelProp());
2251:       assertFalse(node0.isNew());
2252:       assertFalse(node0.isVoid());
2253:       assertFalse(node0.isTrue());
2254:       assertFalse(node0.isAdd());
2255:       assertFalse(node0.isNull());
2256:       assertFalse(node0.isOr());
2257:       assertFalse(node1.isDelProp());
2258:       assertFalse(node1.isGetterDef());
2259:       assertFalse(node1.isIf());
2260:       assertTrue(node1.hasOneChild());
2261:       assertTrue(node1.hasChildren());
2262:       assertFalse(node1.isEmpty());
2263:       assertFalse(node1.isTry());
2264:       assertEquals(1, node1.getChildCount());
2265:       assertFalse(node1.isFor());
2266:       assertFalse(node1.isDefaultCase());
2267:       assertFalse(node1.isRegExp());
2268:       assertEquals(0, node1.getType());
2269:       assertFalse(node1.isInc());
2270:       assertFalse(node1.isCatch());
2271:       assertFalse(node1.isIn());
2272:       assertFalse(node1.isVoid());
2273:       assertFalse(node1.isTrue());
2274:       assertFalse(node1.isNE());
2275:       assertFalse(node1.isNull());
2276:       assertFalse(node1.isHook());
2277:       assertFalse(node1.isNew());
2278:       assertFalse(node1.isBlock());
2279:       assertFalse(node1.isThis());
2280:       assertFalse(node1.isVar());
2281:       assertFalse(node1.isCase());
2282:       assertFalse(node1.isScript());
2283:       assertFalse(node1.isArrayLit());
2284:       assertEquals((-1), node1.getCharno());
2285:       assertFalse(node1.isSwitch());
2286:       assertFalse(node1.isParamList());
2287:       assertFalse(node1.isStringKey());
2288:       assertFalse(node1.isNumber());
2289:       assertFalse(node1.isTypeOf());
2290:       assertFalse(node1.isAssign());
2291:       assertFalse(node1.isLabelName());
2292:       assertFalse(node1.isDec());
2293:       assertEquals((-1), node1.getSourcePosition());
2294:       assertFalse(node1.isGetElem());
2295:       assertFalse(node1.isCast());
2296:       assertFalse(node1.isReturn());
2297:       assertFalse(node1.isLabel());
2298:       assertFalse(node1.isAssignAdd());
2299:       assertFalse(node1.isWhile());
2300:       assertFalse(node1.isWith());
2301:       assertFalse(node1.isDo());
2302:       assertFalse(node1.isExprResult());
2303:       assertFalse(node1.hasMoreThanOneChild());
2304:       assertFalse(node1.isAdd());
2305:       assertFalse(node1.isInstanceOf());
2306:       assertFalse(node1.isOr());
2307:       assertEquals((-1), node1.getLineno());
2308:       assertFalse(node1.isName());
2309:       assertFalse(node1.isBreak());
2310:       assertFalse(node1.isComma());
2311:       assertFalse(node1.isGetProp());
2312:       assertFalse(node1.isCall());
2313:       assertFalse(node1.isFalse());
2314:       assertFalse(node1.isSetterDef());
2315:       assertFalse(node1.isThrow());
2316:       assertFalse(node1.isNot());
2317:       assertFalse(node1.isContinue());
2318:       assertFalse(node1.isObjectLit());
2319:       assertFalse(node1.isFunction());
2320:       assertFalse(node1.isString());
2321:       assertFalse(node1.isAnd());
2322:       assertFalse(node1.isDebugger());
2323:       assertFalse(node4.isAssignAdd());
2324:       assertFalse(node4.isContinue());
2325:       assertFalse(node4.hasMoreThanOneChild());
2326:       assertFalse(node4.isOr());
2327:       assertFalse(node4.isReturn());
2328:       assertFalse(node4.isLabel());
2329:       assertFalse(node4.isNumber());
2330:       assertEquals((-1), node4.getSourcePosition());
2331:       assertFalse(node4.isWhile());
2332:       assertFalse(node4.isNew());
2333:       assertFalse(node4.isAdd());
2334:       assertFalse(node4.isDo());
2335:       assertFalse(node4.hasOneChild());
2336:       assertFalse(node4.isBlock());
2337:       assertFalse(node4.isAssign());
2338:       assertFalse(node4.hasChildren());
2339:       assertFalse(node4.isDec());
2340:       assertFalse(node4.isTypeOf());
2341:       assertFalse(node4.isNull());
2342:       assertFalse(node4.isWith());
2343:       assertFalse(node4.isGetElem());
2344:       assertFalse(node4.isName());
2345:       assertEquals((-1), node4.getLineno());
2346:       assertFalse(node4.isCall());
2347:       assertFalse(node4.isExprResult());
2348:       assertFalse(node4.isAnd());
2349:       assertFalse(node4.isNot());
2350:       assertFalse(node4.isObjectLit());
2351:       assertFalse(node4.isComma());
2352:       assertFalse(node4.isSetterDef());
2353:       assertFalse(node4.isGetProp());
2354:       assertFalse(node4.isCast());
2355:       assertFalse(node4.isFalse());
2356:       assertFalse(node4.isThrow());
2357:       assertFalse(node4.isDebugger());
2358:       assertFalse(node4.isFunction());
2359:       assertFalse(node4.isIn());
2360:       assertFalse(node4.isGetterDef());
2361:       assertFalse(node4.isString());
2362:       assertFalse(node4.isCase());
2363:       assertFalse(node4.isEmpty());
2364:       assertFalse(node4.isInc());
2365:       assertFalse(node4.isHook());
2366:       assertFalse(node4.isFor());
2367:       assertFalse(node4.isTrue());
2368:       assertFalse(node4.isDelProp());
2369:       assertFalse(node4.isRegExp());
2370:       assertFalse(node4.isNE());
2371:       assertFalse(node4.isIf());
2372:       assertEquals(0, node4.getType());
2373:       assertFalse(node4.isVoid());
2374:       assertFalse(node4.isBreak());
2375:       assertFalse(node4.isInstanceOf());
2376:       assertEquals(0, node4.getChildCount());
2377:       assertFalse(node4.isCatch());
2378:       assertFalse(node4.isThis());
2379:       assertFalse(node4.isScript());
2380:       assertFalse(node4.isDefaultCase());
2381:       assertFalse(node4.isTry());
2382:       assertFalse(node4.isVar());
2383:       assertFalse(node4.isStringKey());
2384:       assertEquals((-1), node4.getCharno());
2385:       assertFalse(node4.isParamList());
2386:       assertFalse(node4.isSwitch());
2387:       assertFalse(node4.isLabelName());
2388:       assertFalse(node4.isArrayLit());
2389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2390:       assertEquals(29, Node.JSDOC_INFO_PROP);
2391:       assertEquals(47, Node.IS_DISPATCHER);
2392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2393:       assertEquals(2, Node.POST_FLAG);
2394:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2395:       assertEquals(37, Node.OPT_ARG_NAME);
2396:       assertEquals(46, Node.IS_NAMESPACE);
2397:       assertEquals(56, Node.CHANGE_TIME);
2398:       assertEquals(43, Node.IS_CONSTANT_NAME);
2399:       assertEquals(55, Node.INFERRED_FUNCTION);
2400:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2401:       assertEquals(36, Node.QUOTED_PROP);
2402:       assertEquals(30, Node.VAR_ARGS_NAME);
2403:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2404:       assertEquals(39, Node.EMPTY_BLOCK);
2405:       assertEquals(53, Node.INPUT_ID);
2406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2407:       assertEquals(57, Node.LAST_PROP);
2408:       assertEquals(40, Node.ORIGINALNAME_PROP);
2409:       assertEquals(57, Node.REFLECTED_OBJECT);
2410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2412:       assertEquals(52, Node.LENGTH);
2413:       assertEquals(8, Node.FLAG_NO_THROWS);
2414:       assertEquals(50, Node.FREE_CALL);
2415:       assertEquals(48, Node.DIRECTIVES);
2416:       assertEquals(54, Node.SLASH_V);
2417:       assertEquals(49, Node.DIRECT_EVAL);
2418:       assertEquals(1, Node.DECR_FLAG);
2419:       assertEquals(12, Node.COLUMN_BITS);
2420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2421:       assertEquals(4095, Node.COLUMN_MASK);
2422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2423:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2424:       assertEquals(32, Node.INCRDECR_PROP);
2425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2426:       assertEquals(57, Node.LAST_PROP);
2427:       assertEquals(30, Node.VAR_ARGS_NAME);
2428:       assertEquals(49, Node.DIRECT_EVAL);
2429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2430:       assertEquals(12, Node.COLUMN_BITS);
2431:       assertEquals(54, Node.SLASH_V);
2432:       assertEquals(37, Node.OPT_ARG_NAME);
2433:       assertEquals(40, Node.ORIGINALNAME_PROP);
2434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2436:       assertEquals(50, Node.FREE_CALL);
2437:       assertEquals(46, Node.IS_NAMESPACE);
2438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2439:       assertEquals(32, Node.INCRDECR_PROP);
2440:       assertEquals(1, Node.DECR_FLAG);
2441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2442:       assertEquals(43, Node.IS_CONSTANT_NAME);
2443:       assertEquals(36, Node.QUOTED_PROP);
2444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2446:       assertEquals(4095, Node.COLUMN_MASK);
2447:       assertEquals(48, Node.DIRECTIVES);
2448:       assertEquals(56, Node.CHANGE_TIME);
2449:       assertEquals(47, Node.IS_DISPATCHER);
2450:       assertEquals(2, Node.POST_FLAG);
2451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2452:       assertEquals(8, Node.FLAG_NO_THROWS);
2453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2454:       assertEquals(57, Node.REFLECTED_OBJECT);
2455:       assertEquals(52, Node.LENGTH);
2456:       assertEquals(55, Node.INFERRED_FUNCTION);
2457:       assertEquals(39, Node.EMPTY_BLOCK);
2458:       assertEquals(29, Node.JSDOC_INFO_PROP);
2459:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2460:       assertEquals(53, Node.INPUT_ID);
2461:       assertEquals(57, Node.REFLECTED_OBJECT);
2462:       assertEquals(40, Node.ORIGINALNAME_PROP);
2463:       assertEquals(57, Node.LAST_PROP);
2464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2466:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2467:       assertEquals(30, Node.VAR_ARGS_NAME);
2468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2469:       assertEquals(12, Node.COLUMN_BITS);
2470:       assertEquals(46, Node.IS_NAMESPACE);
2471:       assertEquals(32, Node.INCRDECR_PROP);
2472:       assertEquals(1, Node.DECR_FLAG);
2473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2474:       assertEquals(43, Node.IS_CONSTANT_NAME);
2475:       assertEquals(54, Node.SLASH_V);
2476:       assertEquals(50, Node.FREE_CALL);
2477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2479:       assertEquals(29, Node.JSDOC_INFO_PROP);
2480:       assertEquals(53, Node.INPUT_ID);
2481:       assertEquals(47, Node.IS_DISPATCHER);
2482:       assertEquals(2, Node.POST_FLAG);
2483:       assertEquals(4095, Node.COLUMN_MASK);
2484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2485:       assertEquals(55, Node.INFERRED_FUNCTION);
2486:       assertEquals(49, Node.DIRECT_EVAL);
2487:       assertEquals(37, Node.OPT_ARG_NAME);
2488:       assertEquals(48, Node.DIRECTIVES);
2489:       assertEquals(36, Node.QUOTED_PROP);
2490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2491:       assertEquals(8, Node.FLAG_NO_THROWS);
2492:       assertEquals(39, Node.EMPTY_BLOCK);
2493:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2494:       assertEquals(56, Node.CHANGE_TIME);
2495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2496:       assertEquals(52, Node.LENGTH);
2497:       assertNotSame(node0, node1);
2498:       assertNotSame(node0, node3);
2499:       assertSame(node0, node4);
2500:       assertNotSame(node0, node5);
2501:       assertNotSame(node0, node2);
2502:       assertSame(node1, node3);
2503:       assertNotSame(node1, node0);
2504:       assertSame(node1, node5);
2505:       assertNotSame(node1, node2);
2506:       assertNotSame(node1, node4);
2507:       assertNotSame(node4, node2);
2508:       assertNotSame(node4, node1);
2509:       assertNotSame(node4, node3);
2510:       assertNotSame(node4, node5);
2511:       assertSame(node4, node0);
2512:       assertFalse(node0.equals((Object)node1));
2513:       assertFalse(node0.equals((Object)node3));
2514:       assertFalse(node0.equals((Object)node5));
2515:       assertFalse(node0.equals((Object)node2));
2516:       assertFalse(node1.equals((Object)node0));
2517:       assertFalse(node1.equals((Object)node2));
2518:       assertFalse(node1.equals((Object)node4));
2519:       assertFalse(node4.equals((Object)node2));
2520:       assertFalse(node4.equals((Object)node1));
2521:       assertFalse(node4.equals((Object)node3));
2522:       assertFalse(node4.equals((Object)node5));
2523:       
2524:       // Undeclared exception!
2525:       try { 
2526:         node4.toString();
2527:         fail("Expecting exception: IllegalStateException");
2528:       
2529:       } catch(IllegalStateException e) {
2530:          //
2531:          // 0
2532:          //
2533:          verifyException("com.google.javascript.rhino.Token", e);
2534:       }
2535:   }
2536: }
RegularFileObject[/tmp/EvoSuite_144_1628161967692/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.common.base.Objects",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.JSTypeNative",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.SimpleErrorReporter",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.JSTypeExpression",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.common.collect.ImmutableList$1",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.NamespaceType",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.JSDocInfo$Marker"
364:     );
365:   }
366: }

[MASTER] 11:12:48.269 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node node1 = new Node(0, node0, node0, node0, 1857, 15);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertEquals(15, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals(1857, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertEquals(7606287, node1.getSourcePosition());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(2754, 4095, 50);
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertEquals(2754, node2.getType());
assertFalse(node2.isGetElem());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertEquals(50, node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertEquals(16773170, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node1.srcref(node2);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertEquals(16773170, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertEquals(50, node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertEquals(4095, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertEquals(2754, node2.getType());
assertFalse(node2.isGetElem());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertEquals(50, node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertEquals(16773170, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertTrue(node3.hasOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isEmpty());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertEquals(0, node3.getType());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(16773170, node3.getSourcePosition());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isDebugger());
assertFalse(node3.isStringKey());
assertFalse(node3.isContinue());
assertFalse(node3.isArrayLit());
assertEquals(4095, node3.getLineno());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isNumber());
assertEquals(50, node3.getCharno());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIf());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node3);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertEquals(16773170, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertEquals(50, node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertEquals(4095, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean0);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

Node node4 = node1.getFirstChild();
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertEquals(16773170, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertEquals(50, node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertEquals(4095, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isOr());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.hasOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isSetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isCast());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFor());
assertFalse(node4.isTrue());
assertFalse(node4.isDelProp());
assertFalse(node4.isRegExp());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(0, node4.getType());
assertFalse(node4.isVoid());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isThis());
assertFalse(node4.isScript());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(node4);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertSame(node0, node4);
assertNotSame(node0, node2);
assertSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertNotSame(node4, node3);
assertSame(node4, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));

boolean boolean1 = node1.isQualifiedName();
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertEquals(16773170, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertEquals(50, node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertEquals(4095, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean1);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertSame(node0, node4);
assertNotSame(node0, node2);
assertSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean1 == boolean0);

Node node5 = node1.copyInformationFrom(node4);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isOr());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.hasOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isSetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isCast());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFor());
assertFalse(node4.isTrue());
assertFalse(node4.isDelProp());
assertFalse(node4.isRegExp());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(0, node4.getType());
assertFalse(node4.isVoid());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isThis());
assertFalse(node4.isScript());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isSetterDef());
assertFalse(node5.isNew());
assertFalse(node5.isArrayLit());
assertFalse(node5.isDebugger());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isContinue());
assertFalse(node5.isFunction());
assertFalse(node5.isReturn());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isEmpty());
assertFalse(node5.isVoid());
assertFalse(node5.isTrue());
assertFalse(node5.isDelProp());
assertTrue(node5.hasOneChild());
assertFalse(node5.isBreak());
assertFalse(node5.isTypeOf());
assertFalse(node5.isName());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isCall());
assertFalse(node5.isExprResult());
assertFalse(node5.isGetElem());
assertEquals(0, node5.getType());
assertFalse(node5.isAnd());
assertFalse(node5.isThis());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetProp());
assertFalse(node5.isScript());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isThrow());
assertFalse(node5.isLabelName());
assertFalse(node5.isFalse());
assertFalse(node5.isCast());
assertEquals((-1), node5.getLineno());
assertEquals(1, node5.getChildCount());
assertFalse(node5.isIn());
assertFalse(node5.isNE());
assertFalse(node5.isGetterDef());
assertFalse(node5.isNumber());
assertFalse(node5.isCase());
assertFalse(node5.isInc());
assertFalse(node5.isHook());
assertFalse(node5.isTry());
assertFalse(node5.isFor());
assertFalse(node5.isBlock());
assertFalse(node5.isWith());
assertFalse(node5.isIf());
assertFalse(node5.isRegExp());
assertFalse(node5.hasMoreThanOneChild());
assertTrue(node5.hasChildren());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertNotNull(node5);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node2);
assertSame(node1, node3);
assertNotSame(node1, node0);
assertSame(node1, node5);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertNotSame(node4, node3);
assertNotSame(node4, node5);
assertSame(node4, node0);
assertNotSame(node5, node2);
assertNotSame(node5, node4);
assertSame(node5, node1);
assertSame(node5, node3);
assertNotSame(node5, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));

node4.addSuppression("");
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertEquals(0, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isOr());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.hasOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isSetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isCast());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFor());
assertFalse(node4.isTrue());
assertFalse(node4.isDelProp());
assertFalse(node4.isRegExp());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(0, node4.getType());
assertFalse(node4.isVoid());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isThis());
assertFalse(node4.isScript());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node2);
assertSame(node1, node3);
assertNotSame(node1, node0);
assertSame(node1, node5);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertNotSame(node4, node3);
assertNotSame(node4, node5);
assertSame(node4, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node5));

node4.toString();

[MASTER] 11:12:48.547 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_148_1628161968531/com/google/javascript/rhino/Node_148_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_148_1628161968531/com/google/javascript/rhino/Node_148_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:48.547 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:48.547 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:48.548 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 11:12:48.549 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_148_1628161968531/com/google/javascript/rhino/Node_148_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_148_tmp__ESTest extends Node_148_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(113, 113, 113);
21:       assertFalse(node0.isNew());
22:       assertFalse(node0.isAdd());
23:       assertFalse(node0.isContinue());
24:       assertFalse(node0.isCall());
25:       assertFalse(node0.isDo());
26:       assertFalse(node0.hasMoreThanOneChild());
27:       assertFalse(node0.isLabel());
28:       assertFalse(node0.isVar());
29:       assertEquals(113, node0.getCharno());
30:       assertFalse(node0.isReturn());
31:       assertFalse(node0.isBlock());
32:       assertFalse(node0.isTypeOf());
33:       assertFalse(node0.isAssignAdd());
34:       assertFalse(node0.isOr());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isSetterDef());
37:       assertFalse(node0.isName());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.isTrue());
40:       assertFalse(node0.isExprResult());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isFunction());
44:       assertFalse(node0.isCast());
45:       assertFalse(node0.isAssign());
46:       assertFalse(node0.hasChildren());
47:       assertFalse(node0.isDec());
48:       assertFalse(node0.isGetProp());
49:       assertFalse(node0.isAnd());
50:       assertFalse(node0.isObjectLit());
51:       assertFalse(node0.isNot());
52:       assertTrue(node0.isWhile());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isString());
55:       assertFalse(node0.isCase());
56:       assertEquals(113, node0.getLineno());
57:       assertFalse(node0.isInc());
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isIn());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isNE());
70:       assertEquals(462961, node0.getSourcePosition());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isRegExp());
73:       assertFalse(node0.isDefaultCase());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isArrayLit());
77:       assertFalse(node0.isCatch());
78:       assertFalse(node0.isWith());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isFor());
81:       assertEquals(113, node0.getType());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isNumber());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isGetterDef());
87:       assertEquals(48, Node.DIRECTIVES);
88:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
89:       assertEquals(8, Node.FLAG_NO_THROWS);
90:       assertEquals(50, Node.FREE_CALL);
91:       assertEquals(40, Node.ORIGINALNAME_PROP);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(54, Node.SLASH_V);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(32, Node.INCRDECR_PROP);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(12, Node.COLUMN_BITS);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(node0.isNew());
127:       assertFalse(node0.isAdd());
128:       assertFalse(node0.isContinue());
129:       assertFalse(node0.isCall());
130:       assertFalse(node0.isDo());
131:       assertFalse(node0.hasMoreThanOneChild());
132:       assertFalse(node0.isLabel());
133:       assertFalse(node0.isVar());
134:       assertEquals(113, node0.getCharno());
135:       assertFalse(node0.isReturn());
136:       assertFalse(node0.isBlock());
137:       assertFalse(node0.isTypeOf());
138:       assertFalse(node0.isAssignAdd());
139:       assertFalse(node0.isOr());
140:       assertFalse(node0.isGetElem());
141:       assertFalse(node0.isSetterDef());
142:       assertFalse(node0.isName());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.isTrue());
145:       assertFalse(node0.isExprResult());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isFunction());
149:       assertFalse(node0.isCast());
150:       assertFalse(node0.isAssign());
151:       assertFalse(node0.hasChildren());
152:       assertFalse(node0.isDec());
153:       assertFalse(node0.isGetProp());
154:       assertFalse(node0.isAnd());
155:       assertFalse(node0.isObjectLit());
156:       assertFalse(node0.isNot());
157:       assertTrue(node0.isWhile());
158:       assertFalse(node0.isSwitch());
159:       assertFalse(node0.isString());
160:       assertFalse(node0.isCase());
161:       assertEquals(113, node0.getLineno());
162:       assertFalse(node0.isInc());
163:       assertFalse(node0.isThrow());
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isIn());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isEmpty());
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isNE());
175:       assertEquals(462961, node0.getSourcePosition());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isRegExp());
178:       assertFalse(node0.isDefaultCase());
179:       assertFalse(node0.hasOneChild());
180:       assertFalse(node0.isScript());
181:       assertFalse(node0.isArrayLit());
182:       assertFalse(node0.isCatch());
183:       assertFalse(node0.isWith());
184:       assertEquals(0, node0.getChildCount());
185:       assertFalse(node0.isFor());
186:       assertEquals(113, node0.getType());
187:       assertFalse(node0.isParamList());
188:       assertFalse(node0.isNumber());
189:       assertFalse(node0.isStringKey());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isGetterDef());
192:       assertEquals(48, Node.DIRECTIVES);
193:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
194:       assertEquals(8, Node.FLAG_NO_THROWS);
195:       assertEquals(50, Node.FREE_CALL);
196:       assertEquals(40, Node.ORIGINALNAME_PROP);
197:       assertEquals(4095, Node.COLUMN_MASK);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
200:       assertEquals(54, Node.SLASH_V);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(1, Node.DECR_FLAG);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(12, Node.COLUMN_BITS);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(57, Node.REFLECTED_OBJECT);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(36, Node.QUOTED_PROP);
221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertNotNull(iterable0);
229:       assertFalse(iterable0.contains(node0));
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_148_1628161968531/com/google/javascript/rhino/Node_148_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_148_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_148_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_148_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.common.base.Objects",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.JSTypeNative",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.SimpleErrorReporter",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.JSTypeExpression",
340:       "com.google.common.collect.ImmutableSet",
341:       "com.google.common.collect.EmptyImmutableSet",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.common.collect.ImmutableList$1",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.common.collect.Platform",
359:       "com.google.javascript.rhino.jstype.NamespaceType",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.JSDocInfo$Marker"
364:     );
365:   }
366: }

[MASTER] 11:12:48.550 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(113, 113, 113);
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(113, node0.getCharno());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertTrue(node0.isWhile());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals(113, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(462961, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertEquals(113, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(113, node0.getCharno());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertTrue(node0.isWhile());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals(113, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(462961, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertEquals(113, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));


[MASTER] 11:13:18.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:18.708 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:18.902 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:19.083 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:19.263 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:19.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:20.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:20.350 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:20.630 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:20.812 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.019 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.213 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.409 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.757 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.962 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.309 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.505 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.849 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.021 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.407 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.578 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.982 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.372 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.749 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.925 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:26.240 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:26.409 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:26.576 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:26.869 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:27.045 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:27.212 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:27.382 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:27.596 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:27.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:27.943 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:28.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:28.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:28.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:28.633 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:28.822 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:28.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:29.160 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:29.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:29.541 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:29.705 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:29.889 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:30.095 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:30.281 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:30.481 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:30.675 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:30.910 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.083 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.260 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.445 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.714 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:31.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.059 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.465 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.641 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:32.815 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.006 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.346 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.515 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:33.876 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.230 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:34.888 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:35.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:35.223 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:35.438 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:35.616 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:35.821 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.010 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.253 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.612 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.802 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:36.983 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:37.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:37.424 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:37.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:37.849 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:38.097 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:38.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:38.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:38.735 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:38.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:39.129 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:39.312 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:39.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:39.972 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/29
* Done!

* Computation finished
