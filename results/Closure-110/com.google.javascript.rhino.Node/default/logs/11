* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 15105
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2077647695
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:05:02.425 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:06:11.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 607s and 615 generations, 259789 statements, best individual has fitness: 2770.0
* Minimizing test suite
[MASTER] 10:16:31.497 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 802
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 634
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 477
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2239
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 592
* Generated 1184 tests with total length 12123
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:17:48.880 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.69745% of time used, but only 89/1184 tests minimized), falling back to using all assertions
[MASTER] 10:18:07.180 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 10:18:20.439 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 10:18:35.912 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_250_1628158715876/com/google/javascript/rhino/Node_250_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_250_1628158715876/com/google/javascript/rhino/Node_250_tmp__ESTest_scaffolding.java]]
[MASTER] 10:18:35.912 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:35.912 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:35.914 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 232
[MASTER] 10:18:35.915 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_250_1628158715876/com/google/javascript/rhino/Node_250_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:18:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_250_tmp__ESTest extends Node_250_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
24:       assertFalse(node0.isThrow());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isBreak());
27:       assertFalse(node0.isHook());
28:       assertFalse(node0.isThis());
29:       assertFalse(node0.isComma());
30:       assertFalse(node0.isInstanceOf());
31:       assertFalse(node0.isInc());
32:       assertFalse(node0.isIn());
33:       assertFalse(node0.isGetElem());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.hasChildren());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.isVoid());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isDec());
41:       assertFalse(node0.isTypeOf());
42:       assertFalse(node0.isCast());
43:       assertFalse(node0.isFunction());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isObjectLit());
46:       assertFalse(node0.isNot());
47:       assertFalse(node0.isAnd());
48:       assertFalse(node0.isWhile());
49:       assertFalse(node0.isGetProp());
50:       assertEquals((-1), node0.getSourcePosition());
51:       assertFalse(node0.isDebugger());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isCall());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isNull());
56:       assertFalse(node0.isVar());
57:       assertFalse(node0.isParamList());
58:       assertFalse(node0.isBlock());
59:       assertEquals(0, node0.getChildCount());
60:       assertFalse(node0.isCatch());
61:       assertEquals(40, node0.getType());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isDefaultCase());
64:       assertFalse(node0.isAssignAdd());
65:       assertFalse(node0.isAdd());
66:       assertFalse(node0.isTrue());
67:       assertFalse(node0.isSetterDef());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isLabelName());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isIf());
75:       assertFalse(node0.hasOneChild());
76:       assertFalse(node0.isNE());
77:       assertEquals((-1), node0.getLineno());
78:       assertFalse(node0.isLabel());
79:       assertFalse(node0.isRegExp());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isSwitch());
84:       assertFalse(node0.isTry());
85:       assertTrue(node0.isString());
86:       assertEquals((-1), node0.getCharno());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isGetterDef());
90:       assertNotNull(node0);
91:       assertEquals(12, Node.COLUMN_BITS);
92:       assertEquals(46, Node.IS_NAMESPACE);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(29, Node.JSDOC_INFO_PROP);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(43, Node.IS_CONSTANT_NAME);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertEquals(30, Node.VAR_ARGS_NAME);
124:       assertEquals(47, Node.IS_DISPATCHER);
125:       assertEquals(40, Node.ORIGINALNAME_PROP);
126:       assertEquals(2, Node.POST_FLAG);
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertFalse(node0.isThrow());
130:       assertFalse(node0.isFalse());
131:       assertFalse(node0.isBreak());
132:       assertFalse(node0.isHook());
133:       assertFalse(node0.isThis());
134:       assertFalse(node0.isComma());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isInc());
137:       assertFalse(node0.isIn());
138:       assertFalse(node0.isGetElem());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.hasChildren());
141:       assertFalse(node0.isDelProp());
142:       assertFalse(node0.isExprResult());
143:       assertFalse(node0.isVoid());
144:       assertFalse(node0.isReturn());
145:       assertFalse(node0.isDec());
146:       assertFalse(node0.isTypeOf());
147:       assertFalse(node0.isCast());
148:       assertFalse(node0.isFunction());
149:       assertFalse(node0.isContinue());
150:       assertFalse(node0.isObjectLit());
151:       assertFalse(node0.isNot());
152:       assertFalse(node0.isAnd());
153:       assertFalse(node0.isWhile());
154:       assertFalse(node0.isGetProp());
155:       assertEquals((-1), node0.getSourcePosition());
156:       assertFalse(node0.isDebugger());
157:       assertFalse(node0.isStringKey());
158:       assertFalse(node0.isCall());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isNull());
161:       assertFalse(node0.isVar());
162:       assertFalse(node0.isParamList());
163:       assertFalse(node0.isBlock());
164:       assertEquals(0, node0.getChildCount());
165:       assertFalse(node0.isCatch());
166:       assertEquals(40, node0.getType());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isAssignAdd());
170:       assertFalse(node0.isAdd());
171:       assertFalse(node0.isTrue());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isOr());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isLabelName());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isArrayLit());
179:       assertFalse(node0.isIf());
180:       assertFalse(node0.hasOneChild());
181:       assertFalse(node0.isNE());
182:       assertEquals((-1), node0.getLineno());
183:       assertFalse(node0.isLabel());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isCase());
188:       assertFalse(node0.isSwitch());
189:       assertFalse(node0.isTry());
190:       assertTrue(node0.isString());
191:       assertEquals((-1), node0.getCharno());
192:       assertFalse(node0.isNumber());
193:       assertFalse(node0.isScript());
194:       assertFalse(node0.isGetterDef());
195:       assertNotNull(iterable0);
196:       assertEquals(12, Node.COLUMN_BITS);
197:       assertEquals(46, Node.IS_NAMESPACE);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(49, Node.DIRECT_EVAL);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(4095, Node.COLUMN_MASK);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(39, Node.EMPTY_BLOCK);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(8, Node.FLAG_NO_THROWS);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(50, Node.FREE_CALL);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertEquals(30, Node.VAR_ARGS_NAME);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       assertEquals(40, Node.ORIGINALNAME_PROP);
231:       assertEquals(2, Node.POST_FLAG);
232:       assertFalse(iterable0.contains(node0));
233:       
234:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
235:       assertNotNull(simpleErrorReporter0);
236:       
237:       boolean boolean0 = false;
238:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
239:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
240:       assertNotNull(jSTypeRegistry0);
241:       
242:       boolean boolean1 = node0.isSyntheticBlock();
243:       assertTrue(boolean1 == boolean0);
244:       assertFalse(node0.isThrow());
245:       assertFalse(node0.isFalse());
246:       assertFalse(node0.isBreak());
247:       assertFalse(node0.isHook());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.isComma());
250:       assertFalse(node0.isInstanceOf());
251:       assertFalse(node0.isInc());
252:       assertFalse(node0.isIn());
253:       assertFalse(node0.isGetElem());
254:       assertFalse(node0.isAssign());
255:       assertFalse(node0.hasChildren());
256:       assertFalse(node0.isDelProp());
257:       assertFalse(node0.isExprResult());
258:       assertFalse(node0.isVoid());
259:       assertFalse(node0.isReturn());
260:       assertFalse(node0.isDec());
261:       assertFalse(node0.isTypeOf());
262:       assertFalse(node0.isCast());
263:       assertFalse(node0.isFunction());
264:       assertFalse(node0.isContinue());
265:       assertFalse(node0.isObjectLit());
266:       assertFalse(node0.isNot());
267:       assertFalse(node0.isAnd());
268:       assertFalse(node0.isWhile());
269:       assertFalse(node0.isGetProp());
270:       assertEquals((-1), node0.getSourcePosition());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isStringKey());
273:       assertFalse(node0.isCall());
274:       assertFalse(node0.isName());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isVar());
277:       assertFalse(node0.isParamList());
278:       assertFalse(node0.isBlock());
279:       assertEquals(0, node0.getChildCount());
280:       assertFalse(node0.isCatch());
281:       assertEquals(40, node0.getType());
282:       assertFalse(node0.isDo());
283:       assertFalse(node0.isDefaultCase());
284:       assertFalse(node0.isAssignAdd());
285:       assertFalse(node0.isAdd());
286:       assertFalse(node0.isTrue());
287:       assertFalse(node0.isSetterDef());
288:       assertFalse(node0.isOr());
289:       assertFalse(node0.isNew());
290:       assertFalse(node0.isLabelName());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isIf());
295:       assertFalse(node0.hasOneChild());
296:       assertFalse(node0.isNE());
297:       assertEquals((-1), node0.getLineno());
298:       assertFalse(node0.isLabel());
299:       assertFalse(node0.isRegExp());
300:       assertFalse(node0.hasMoreThanOneChild());
301:       assertFalse(node0.isWith());
302:       assertFalse(node0.isCase());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isTry());
305:       assertTrue(node0.isString());
306:       assertEquals((-1), node0.getCharno());
307:       assertFalse(node0.isNumber());
308:       assertFalse(node0.isScript());
309:       assertFalse(node0.isGetterDef());
310:       assertFalse(boolean1);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
314:       assertEquals(37, Node.OPT_ARG_NAME);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(49, Node.DIRECT_EVAL);
317:       assertEquals(32, Node.INCRDECR_PROP);
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(8, Node.FLAG_NO_THROWS);
336:       assertEquals(36, Node.QUOTED_PROP);
337:       assertEquals(50, Node.FREE_CALL);
338:       assertEquals(52, Node.LENGTH);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(54, Node.SLASH_V);
341:       assertEquals(43, Node.IS_CONSTANT_NAME);
342:       assertEquals(57, Node.LAST_PROP);
343:       assertEquals(30, Node.VAR_ARGS_NAME);
344:       assertEquals(47, Node.IS_DISPATCHER);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(2, Node.POST_FLAG);
347:       
348:       try { 
349:         node0.getDouble();
350:         fail("Expecting exception: UnsupportedOperationException");
351:       
352:       } catch(UnsupportedOperationException e) {
353:          //
354:          // STRING n%%.I4+tqA<U}$et- is not a number node
355:          //
356:          verifyException("com.google.javascript.rhino.Node", e);
357:       }
358:   }
359: }
RegularFileObject[/tmp/EvoSuite_250_1628158715876/com/google/javascript/rhino/Node_250_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:18:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_250_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_250_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.LinkedHashMultimap",
96:       "com.google.javascript.rhino.Node",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.javascript.rhino.SourcePosition",
99:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.javascript.rhino.JSDocInfo$1",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_250_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.JSDocInfo$Visibility",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
360:     );
361:   }
362: }

[MASTER] 10:18:35.917 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertNotNull(node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertNotNull(iterable0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(iterable0.contains(node0));

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

boolean boolean0 = false;
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

boolean boolean1 = node0.isSyntheticBlock();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(boolean1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

node0.getDouble();

[MASTER] 10:18:38.347 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_272_1628158718302/com/google/javascript/rhino/Node_272_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_272_1628158718302/com/google/javascript/rhino/Node_272_tmp__ESTest_scaffolding.java]]
[MASTER] 10:18:38.347 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:38.347 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:38.348 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 231
[MASTER] 10:18:38.349 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_272_1628158718302/com/google/javascript/rhino/Node_272_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:18:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_272_tmp__ESTest extends Node_272_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
23:       assertFalse(node0.isCatch());
24:       assertEquals(40, node0.getType());
25:       assertEquals(0, node0.getChildCount());
26:       assertFalse(node0.isRegExp());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isTrue());
30:       assertFalse(node0.isVoid());
31:       assertFalse(node0.isNull());
32:       assertFalse(node0.isStringKey());
33:       assertFalse(node0.isName());
34:       assertFalse(node0.isVar());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isEmpty());
37:       assertFalse(node0.isFunction());
38:       assertFalse(node0.isAdd());
39:       assertFalse(node0.isNew());
40:       assertFalse(node0.isSetterDef());
41:       assertFalse(node0.isDo());
42:       assertFalse(node0.isDefaultCase());
43:       assertFalse(node0.isCase());
44:       assertFalse(node0.isIn());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertFalse(node0.isNE());
47:       assertEquals((-1), node0.getCharno());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isLabelName());
50:       assertFalse(node0.isSwitch());
51:       assertFalse(node0.isIf());
52:       assertFalse(node0.isFor());
53:       assertFalse(node0.hasOneChild());
54:       assertFalse(node0.isHook());
55:       assertFalse(node0.isGetterDef());
56:       assertFalse(node0.isNumber());
57:       assertFalse(node0.isThis());
58:       assertFalse(node0.isScript());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isTry());
61:       assertTrue(node0.isString());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isAnd());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isThrow());
70:       assertFalse(node0.isCast());
71:       assertFalse(node0.isFalse());
72:       assertFalse(node0.isInc());
73:       assertFalse(node0.isLabel());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isContinue());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isGetProp());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isReturn());
88:       assertFalse(node0.isWhile());
89:       assertNotNull(node0);
90:       assertEquals(52, Node.LENGTH);
91:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
92:       assertEquals(54, Node.SLASH_V);
93:       assertEquals(57, Node.REFLECTED_OBJECT);
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(39, Node.EMPTY_BLOCK);
101:       assertEquals(12, Node.COLUMN_BITS);
102:       assertEquals(4095, Node.COLUMN_MASK);
103:       assertEquals(8, Node.FLAG_NO_THROWS);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(48, Node.DIRECTIVES);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(53, Node.INPUT_ID);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(node0.isCatch());
129:       assertEquals(40, node0.getType());
130:       assertEquals(0, node0.getChildCount());
131:       assertFalse(node0.isRegExp());
132:       assertFalse(node0.isParamList());
133:       assertFalse(node0.isDebugger());
134:       assertFalse(node0.isTrue());
135:       assertFalse(node0.isVoid());
136:       assertFalse(node0.isNull());
137:       assertFalse(node0.isStringKey());
138:       assertFalse(node0.isName());
139:       assertFalse(node0.isVar());
140:       assertFalse(node0.isArrayLit());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isFunction());
143:       assertFalse(node0.isAdd());
144:       assertFalse(node0.isNew());
145:       assertFalse(node0.isSetterDef());
146:       assertFalse(node0.isDo());
147:       assertFalse(node0.isDefaultCase());
148:       assertFalse(node0.isCase());
149:       assertFalse(node0.isIn());
150:       assertFalse(node0.hasMoreThanOneChild());
151:       assertFalse(node0.isNE());
152:       assertEquals((-1), node0.getCharno());
153:       assertEquals((-1), node0.getLineno());
154:       assertFalse(node0.isLabelName());
155:       assertFalse(node0.isSwitch());
156:       assertFalse(node0.isIf());
157:       assertFalse(node0.isFor());
158:       assertFalse(node0.hasOneChild());
159:       assertFalse(node0.isHook());
160:       assertFalse(node0.isGetterDef());
161:       assertFalse(node0.isNumber());
162:       assertFalse(node0.isThis());
163:       assertFalse(node0.isScript());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isTry());
166:       assertTrue(node0.isString());
167:       assertFalse(node0.isObjectLit());
168:       assertFalse(node0.isAnd());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isExprResult());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isThrow());
175:       assertFalse(node0.isCast());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isInc());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isOr());
181:       assertFalse(node0.isContinue());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isDelProp());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isGetElem());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isComma());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isWhile());
194:       assertNotNull(iterable0);
195:       assertEquals(52, Node.LENGTH);
196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
197:       assertEquals(54, Node.SLASH_V);
198:       assertEquals(57, Node.REFLECTED_OBJECT);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(32, Node.INCRDECR_PROP);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(39, Node.EMPTY_BLOCK);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(8, Node.FLAG_NO_THROWS);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(56, Node.CHANGE_TIME);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(53, Node.INPUT_ID);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
222:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       assertFalse(iterable0.contains(node0));
232:       
233:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
234:       assertNotNull(simpleErrorReporter0);
235:       
236:       Node node1 = Node.newNumber((double) 15);
237:       assertFalse(node1.equals((Object)node0));
238:       assertFalse(node1.hasMoreThanOneChild());
239:       assertFalse(node1.isContinue());
240:       assertEquals((-1), node1.getLineno());
241:       assertFalse(node1.isWhile());
242:       assertFalse(node1.isAssignAdd());
243:       assertFalse(node1.isDo());
244:       assertFalse(node1.isAdd());
245:       assertEquals((-1), node1.getSourcePosition());
246:       assertFalse(node1.isOr());
247:       assertFalse(node1.isStringKey());
248:       assertFalse(node1.isCast());
249:       assertFalse(node1.isVar());
250:       assertFalse(node1.isNew());
251:       assertFalse(node1.isLabelName());
252:       assertFalse(node1.isLabel());
253:       assertEquals(0, node1.getChildCount());
254:       assertFalse(node1.isCatch());
255:       assertFalse(node1.isInstanceOf());
256:       assertFalse(node1.isParamList());
257:       assertFalse(node1.isSetterDef());
258:       assertFalse(node1.isScript());
259:       assertFalse(node1.isHook());
260:       assertFalse(node1.isFor());
261:       assertFalse(node1.isIf());
262:       assertFalse(node1.hasOneChild());
263:       assertFalse(node1.isTry());
264:       assertFalse(node1.isThis());
265:       assertFalse(node1.isBlock());
266:       assertFalse(node1.isWith());
267:       assertEquals(39, node1.getType());
268:       assertFalse(node1.isRegExp());
269:       assertTrue(node1.isNumber());
270:       assertFalse(node1.isCase());
271:       assertFalse(node1.isInc());
272:       assertFalse(node1.isSwitch());
273:       assertEquals((-1), node1.getCharno());
274:       assertFalse(node1.isNE());
275:       assertFalse(node1.isString());
276:       assertFalse(node1.isIn());
277:       assertFalse(node1.isGetterDef());
278:       assertFalse(node1.isArrayLit());
279:       assertFalse(node1.isThrow());
280:       assertFalse(node1.isEmpty());
281:       assertFalse(node1.isFunction());
282:       assertFalse(node1.isFalse());
283:       assertFalse(node1.isAnd());
284:       assertFalse(node1.isDefaultCase());
285:       assertFalse(node1.isTrue());
286:       assertFalse(node1.isGetProp());
287:       assertFalse(node1.isDebugger());
288:       assertFalse(node1.isNull());
289:       assertFalse(node1.isObjectLit());
290:       assertFalse(node1.isNot());
291:       assertFalse(node1.isCall());
292:       assertFalse(node1.isGetElem());
293:       assertFalse(node1.isBreak());
294:       assertFalse(node1.isName());
295:       assertFalse(node1.isDelProp());
296:       assertFalse(node1.isVoid());
297:       assertFalse(node1.isComma());
298:       assertFalse(node1.isExprResult());
299:       assertFalse(node1.isReturn());
300:       assertFalse(node1.hasChildren());
301:       assertFalse(node1.isTypeOf());
302:       assertFalse(node1.isDec());
303:       assertFalse(node1.isAssign());
304:       assertNotNull(node1);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
308:       assertEquals(4095, Node.COLUMN_MASK);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(48, Node.DIRECTIVES);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(8, Node.FLAG_NO_THROWS);
314:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(29, Node.JSDOC_INFO_PROP);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(36, Node.QUOTED_PROP);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
326:       assertEquals(54, Node.SLASH_V);
327:       assertEquals(52, Node.LENGTH);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(12, Node.COLUMN_BITS);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       assertEquals(50, Node.FREE_CALL);
338:       assertEquals(43, Node.IS_CONSTANT_NAME);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(46, Node.IS_NAMESPACE);
341:       
342:       boolean boolean0 = node1.wasEmptyNode();
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(node1.hasMoreThanOneChild());
345:       assertFalse(node1.isContinue());
346:       assertEquals((-1), node1.getLineno());
347:       assertFalse(node1.isWhile());
348:       assertFalse(node1.isAssignAdd());
349:       assertFalse(node1.isDo());
350:       assertFalse(node1.isAdd());
351:       assertEquals((-1), node1.getSourcePosition());
352:       assertFalse(node1.isOr());
353:       assertFalse(node1.isStringKey());
354:       assertFalse(node1.isCast());
355:       assertFalse(node1.isVar());
356:       assertFalse(node1.isNew());
357:       assertFalse(node1.isLabelName());
358:       assertFalse(node1.isLabel());
359:       assertEquals(0, node1.getChildCount());
360:       assertFalse(node1.isCatch());
361:       assertFalse(node1.isInstanceOf());
362:       assertFalse(node1.isParamList());
363:       assertFalse(node1.isSetterDef());
364:       assertFalse(node1.isScript());
365:       assertFalse(node1.isHook());
366:       assertFalse(node1.isFor());
367:       assertFalse(node1.isIf());
368:       assertFalse(node1.hasOneChild());
369:       assertFalse(node1.isTry());
370:       assertFalse(node1.isThis());
371:       assertFalse(node1.isBlock());
372:       assertFalse(node1.isWith());
373:       assertEquals(39, node1.getType());
374:       assertFalse(node1.isRegExp());
375:       assertTrue(node1.isNumber());
376:       assertFalse(node1.isCase());
377:       assertFalse(node1.isInc());
378:       assertFalse(node1.isSwitch());
379:       assertEquals((-1), node1.getCharno());
380:       assertFalse(node1.isNE());
381:       assertFalse(node1.isString());
382:       assertFalse(node1.isIn());
383:       assertFalse(node1.isGetterDef());
384:       assertFalse(node1.isArrayLit());
385:       assertFalse(node1.isThrow());
386:       assertFalse(node1.isEmpty());
387:       assertFalse(node1.isFunction());
388:       assertFalse(node1.isFalse());
389:       assertFalse(node1.isAnd());
390:       assertFalse(node1.isDefaultCase());
391:       assertFalse(node1.isTrue());
392:       assertFalse(node1.isGetProp());
393:       assertFalse(node1.isDebugger());
394:       assertFalse(node1.isNull());
395:       assertFalse(node1.isObjectLit());
396:       assertFalse(node1.isNot());
397:       assertFalse(node1.isCall());
398:       assertFalse(node1.isGetElem());
399:       assertFalse(node1.isBreak());
400:       assertFalse(node1.isName());
401:       assertFalse(node1.isDelProp());
402:       assertFalse(node1.isVoid());
403:       assertFalse(node1.isComma());
404:       assertFalse(node1.isExprResult());
405:       assertFalse(node1.isReturn());
406:       assertFalse(node1.hasChildren());
407:       assertFalse(node1.isTypeOf());
408:       assertFalse(node1.isDec());
409:       assertFalse(node1.isAssign());
410:       assertFalse(boolean0);
411:       assertEquals(53, Node.INPUT_ID);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
414:       assertEquals(4095, Node.COLUMN_MASK);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(2, Node.POST_FLAG);
417:       assertEquals(48, Node.DIRECTIVES);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(8, Node.FLAG_NO_THROWS);
420:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
421:       assertEquals(39, Node.EMPTY_BLOCK);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(29, Node.JSDOC_INFO_PROP);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(52, Node.LENGTH);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(57, Node.LAST_PROP);
438:       assertEquals(12, Node.COLUMN_BITS);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       assertEquals(32, Node.INCRDECR_PROP);
441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
443:       assertEquals(50, Node.FREE_CALL);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       assertEquals(46, Node.IS_NAMESPACE);
447:       
448:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
449:       assertFalse(node0.equals((Object)node1));
450:       assertFalse(node0.isCatch());
451:       assertEquals(40, node0.getType());
452:       assertEquals(0, node0.getChildCount());
453:       assertFalse(node0.isRegExp());
454:       assertFalse(node0.isParamList());
455:       assertFalse(node0.isDebugger());
456:       assertFalse(node0.isTrue());
457:       assertFalse(node0.isVoid());
458:       assertFalse(node0.isNull());
459:       assertFalse(node0.isStringKey());
460:       assertFalse(node0.isName());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isArrayLit());
463:       assertFalse(node0.isEmpty());
464:       assertFalse(node0.isFunction());
465:       assertFalse(node0.isAdd());
466:       assertFalse(node0.isNew());
467:       assertFalse(node0.isSetterDef());
468:       assertFalse(node0.isDo());
469:       assertFalse(node0.isDefaultCase());
470:       assertFalse(node0.isCase());
471:       assertFalse(node0.isIn());
472:       assertFalse(node0.hasMoreThanOneChild());
473:       assertFalse(node0.isNE());
474:       assertEquals((-1), node0.getCharno());
475:       assertEquals((-1), node0.getLineno());
476:       assertFalse(node0.isLabelName());
477:       assertFalse(node0.isSwitch());
478:       assertFalse(node0.isIf());
479:       assertFalse(node0.isFor());
480:       assertFalse(node0.hasOneChild());
481:       assertFalse(node0.isHook());
482:       assertFalse(node0.isGetterDef());
483:       assertFalse(node0.isNumber());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.isScript());
486:       assertFalse(node0.isBlock());
487:       assertFalse(node0.isTry());
488:       assertTrue(node0.isString());
489:       assertFalse(node0.isObjectLit());
490:       assertFalse(node0.isAnd());
491:       assertFalse(node0.isNot());
492:       assertFalse(node0.isInstanceOf());
493:       assertFalse(node0.isWith());
494:       assertFalse(node0.isExprResult());
495:       assertFalse(node0.isBreak());
496:       assertFalse(node0.isThrow());
497:       assertFalse(node0.isCast());
498:       assertFalse(node0.isFalse());
499:       assertFalse(node0.isInc());
500:       assertFalse(node0.isLabel());
501:       assertFalse(node0.isAssignAdd());
502:       assertFalse(node0.isOr());
503:       assertFalse(node0.isContinue());
504:       assertEquals((-1), node0.getSourcePosition());
505:       assertFalse(node0.isDelProp());
506:       assertFalse(node0.isCall());
507:       assertFalse(node0.isGetElem());
508:       assertFalse(node0.isDec());
509:       assertFalse(node0.isAssign());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isComma());
512:       assertFalse(node0.isGetProp());
513:       assertFalse(node0.hasChildren());
514:       assertFalse(node0.isReturn());
515:       assertFalse(node0.isWhile());
516:       assertNotNull(node_FileLevelJsDocBuilder0);
517:       assertEquals(52, Node.LENGTH);
518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
519:       assertEquals(54, Node.SLASH_V);
520:       assertEquals(57, Node.REFLECTED_OBJECT);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
523:       assertEquals(15, Node.NO_SIDE_EFFECTS);
524:       assertEquals(57, Node.LAST_PROP);
525:       assertEquals(32, Node.INCRDECR_PROP);
526:       assertEquals(1, Node.DECR_FLAG);
527:       assertEquals(39, Node.EMPTY_BLOCK);
528:       assertEquals(12, Node.COLUMN_BITS);
529:       assertEquals(4095, Node.COLUMN_MASK);
530:       assertEquals(8, Node.FLAG_NO_THROWS);
531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
532:       assertEquals(56, Node.CHANGE_TIME);
533:       assertEquals(37, Node.OPT_ARG_NAME);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(49, Node.DIRECT_EVAL);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(29, Node.JSDOC_INFO_PROP);
543:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
546:       assertEquals(46, Node.IS_NAMESPACE);
547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
548:       assertEquals(47, Node.IS_DISPATCHER);
549:       assertEquals(2, Node.POST_FLAG);
550:       assertEquals(50, Node.FREE_CALL);
551:       assertEquals(40, Node.ORIGINALNAME_PROP);
552:       assertEquals(43, Node.IS_CONSTANT_NAME);
553:       
554:       Node node2 = node1.removeChildren();
555:       assertFalse(node1.equals((Object)node0));
556:       assertFalse(node1.hasMoreThanOneChild());
557:       assertFalse(node1.isContinue());
558:       assertEquals((-1), node1.getLineno());
559:       assertFalse(node1.isWhile());
560:       assertFalse(node1.isAssignAdd());
561:       assertFalse(node1.isDo());
562:       assertFalse(node1.isAdd());
563:       assertEquals((-1), node1.getSourcePosition());
564:       assertFalse(node1.isOr());
565:       assertFalse(node1.isStringKey());
566:       assertFalse(node1.isCast());
567:       assertFalse(node1.isVar());
568:       assertFalse(node1.isNew());
569:       assertFalse(node1.isLabelName());
570:       assertFalse(node1.isLabel());
571:       assertEquals(0, node1.getChildCount());
572:       assertFalse(node1.isCatch());
573:       assertFalse(node1.isInstanceOf());
574:       assertFalse(node1.isParamList());
575:       assertFalse(node1.isSetterDef());
576:       assertFalse(node1.isScript());
577:       assertFalse(node1.isHook());
578:       assertFalse(node1.isFor());
579:       assertFalse(node1.isIf());
580:       assertFalse(node1.hasOneChild());
581:       assertFalse(node1.isTry());
582:       assertFalse(node1.isThis());
583:       assertFalse(node1.isBlock());
584:       assertFalse(node1.isWith());
585:       assertEquals(39, node1.getType());
586:       assertFalse(node1.isRegExp());
587:       assertTrue(node1.isNumber());
588:       assertFalse(node1.isCase());
589:       assertFalse(node1.isInc());
590:       assertFalse(node1.isSwitch());
591:       assertEquals((-1), node1.getCharno());
592:       assertFalse(node1.isNE());
593:       assertFalse(node1.isString());
594:       assertFalse(node1.isIn());
595:       assertFalse(node1.isGetterDef());
596:       assertFalse(node1.isArrayLit());
597:       assertFalse(node1.isThrow());
598:       assertFalse(node1.isEmpty());
599:       assertFalse(node1.isFunction());
600:       assertFalse(node1.isFalse());
601:       assertFalse(node1.isAnd());
602:       assertFalse(node1.isDefaultCase());
603:       assertFalse(node1.isTrue());
604:       assertFalse(node1.isGetProp());
605:       assertFalse(node1.isDebugger());
606:       assertFalse(node1.isNull());
607:       assertFalse(node1.isObjectLit());
608:       assertFalse(node1.isNot());
609:       assertFalse(node1.isCall());
610:       assertFalse(node1.isGetElem());
611:       assertFalse(node1.isBreak());
612:       assertFalse(node1.isName());
613:       assertFalse(node1.isDelProp());
614:       assertFalse(node1.isVoid());
615:       assertFalse(node1.isComma());
616:       assertFalse(node1.isExprResult());
617:       assertFalse(node1.isReturn());
618:       assertFalse(node1.hasChildren());
619:       assertFalse(node1.isTypeOf());
620:       assertFalse(node1.isDec());
621:       assertFalse(node1.isAssign());
622:       assertNull(node2);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
625:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(48, Node.DIRECTIVES);
630:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
633:       assertEquals(39, Node.EMPTY_BLOCK);
634:       assertEquals(37, Node.OPT_ARG_NAME);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(49, Node.DIRECT_EVAL);
638:       assertEquals(55, Node.INFERRED_FUNCTION);
639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(57, Node.REFLECTED_OBJECT);
643:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
644:       assertEquals(54, Node.SLASH_V);
645:       assertEquals(52, Node.LENGTH);
646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
647:       assertEquals(40, Node.ORIGINALNAME_PROP);
648:       assertEquals(1, Node.DECR_FLAG);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(12, Node.COLUMN_BITS);
651:       assertEquals(30, Node.VAR_ARGS_NAME);
652:       assertEquals(32, Node.INCRDECR_PROP);
653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(43, Node.IS_CONSTANT_NAME);
657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
658:       assertEquals(46, Node.IS_NAMESPACE);
659:       
660:       node1.setOptionalArg(false);
661:       assertFalse(node1.equals((Object)node0));
662:       assertFalse(node1.hasMoreThanOneChild());
663:       assertFalse(node1.isContinue());
664:       assertEquals((-1), node1.getLineno());
665:       assertFalse(node1.isWhile());
666:       assertFalse(node1.isAssignAdd());
667:       assertFalse(node1.isDo());
668:       assertFalse(node1.isAdd());
669:       assertEquals((-1), node1.getSourcePosition());
670:       assertFalse(node1.isOr());
671:       assertFalse(node1.isStringKey());
672:       assertFalse(node1.isCast());
673:       assertFalse(node1.isVar());
674:       assertFalse(node1.isNew());
675:       assertFalse(node1.isLabelName());
676:       assertFalse(node1.isLabel());
677:       assertEquals(0, node1.getChildCount());
678:       assertFalse(node1.isCatch());
679:       assertFalse(node1.isInstanceOf());
680:       assertFalse(node1.isParamList());
681:       assertFalse(node1.isSetterDef());
682:       assertFalse(node1.isScript());
683:       assertFalse(node1.isHook());
684:       assertFalse(node1.isFor());
685:       assertFalse(node1.isIf());
686:       assertFalse(node1.hasOneChild());
687:       assertFalse(node1.isTry());
688:       assertFalse(node1.isThis());
689:       assertFalse(node1.isBlock());
690:       assertFalse(node1.isWith());
691:       assertEquals(39, node1.getType());
692:       assertFalse(node1.isRegExp());
693:       assertTrue(node1.isNumber());
694:       assertFalse(node1.isCase());
695:       assertFalse(node1.isInc());
696:       assertFalse(node1.isSwitch());
697:       assertEquals((-1), node1.getCharno());
698:       assertFalse(node1.isNE());
699:       assertFalse(node1.isString());
700:       assertFalse(node1.isIn());
701:       assertFalse(node1.isGetterDef());
702:       assertFalse(node1.isArrayLit());
703:       assertFalse(node1.isThrow());
704:       assertFalse(node1.isEmpty());
705:       assertFalse(node1.isFunction());
706:       assertFalse(node1.isFalse());
707:       assertFalse(node1.isAnd());
708:       assertFalse(node1.isDefaultCase());
709:       assertFalse(node1.isTrue());
710:       assertFalse(node1.isGetProp());
711:       assertFalse(node1.isDebugger());
712:       assertFalse(node1.isNull());
713:       assertFalse(node1.isObjectLit());
714:       assertFalse(node1.isNot());
715:       assertFalse(node1.isCall());
716:       assertFalse(node1.isGetElem());
717:       assertFalse(node1.isBreak());
718:       assertFalse(node1.isName());
719:       assertFalse(node1.isDelProp());
720:       assertFalse(node1.isVoid());
721:       assertFalse(node1.isComma());
722:       assertFalse(node1.isExprResult());
723:       assertFalse(node1.isReturn());
724:       assertFalse(node1.hasChildren());
725:       assertFalse(node1.isTypeOf());
726:       assertFalse(node1.isDec());
727:       assertFalse(node1.isAssign());
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
730:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
731:       assertEquals(4095, Node.COLUMN_MASK);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(2, Node.POST_FLAG);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
736:       assertEquals(8, Node.FLAG_NO_THROWS);
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(39, Node.EMPTY_BLOCK);
739:       assertEquals(37, Node.OPT_ARG_NAME);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
742:       assertEquals(49, Node.DIRECT_EVAL);
743:       assertEquals(55, Node.INFERRED_FUNCTION);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(36, Node.QUOTED_PROP);
747:       assertEquals(57, Node.REFLECTED_OBJECT);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(54, Node.SLASH_V);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(40, Node.ORIGINALNAME_PROP);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(57, Node.LAST_PROP);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(30, Node.VAR_ARGS_NAME);
757:       assertEquals(32, Node.INCRDECR_PROP);
758:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
759:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(43, Node.IS_CONSTANT_NAME);
762:       assertEquals(51, Node.STATIC_SOURCE_FILE);
763:       assertEquals(46, Node.IS_NAMESPACE);
764:       
765:       String string0 = "Yw>EI!Sn4DaV1";
766:       // Undeclared exception!
767:       try { 
768:         node1.addChildBefore((Node) null, (Node) null);
769:         fail("Expecting exception: IllegalArgumentException");
770:       
771:       } catch(IllegalArgumentException e) {
772:          //
773:          // The existing child node of the parent should not be null.
774:          //
775:          verifyException("com.google.common.base.Preconditions", e);
776:       }
777:   }
778: }
RegularFileObject[/tmp/EvoSuite_272_1628158718302/com/google/javascript/rhino/Node_272_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:18:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_272_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_272_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.LinkedHashMultimap",
96:       "com.google.javascript.rhino.Node",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.javascript.rhino.SourcePosition",
99:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.javascript.rhino.JSDocInfo$1",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_272_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.JSDocInfo$Visibility",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
360:     );
361:   }
362: }

[MASTER] 10:18:38.417 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertNotNull(node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertNotNull(iterable0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(iterable0.contains(node0));

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

Node node1 = Node.newNumber((double) 15);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

boolean boolean0 = node1.wasEmptyNode();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = node1.removeChildren();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertNull(node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

node1.setOptionalArg(false);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

String string0 = "Yw>EI!Sn4DaV1";
node1.addChildBefore((Node) null, (Node) null);

[MASTER] 10:18:45.711 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_328_1628158725349/com/google/javascript/rhino/Node_328_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_328_1628158725349/com/google/javascript/rhino/Node_328_tmp__ESTest_scaffolding.java]]
[MASTER] 10:18:45.711 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:45.711 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:45.712 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 233
[MASTER] 10:18:45.713 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_328_1628158725349/com/google/javascript/rhino/Node_328_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:18:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import java.util.Iterator;
14: import java.util.Spliterator;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_328_tmp__ESTest extends Node_328_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
25:       assertFalse(node0.isWith());
26:       assertFalse(node0.isNot());
27:       assertFalse(node0.isAnd());
28:       assertFalse(node0.isGetProp());
29:       assertFalse(node0.hasOneChild());
30:       assertFalse(node0.isObjectLit());
31:       assertFalse(node0.isScript());
32:       assertFalse(node0.isLabelName());
33:       assertEquals((-1), node0.getSourcePosition());
34:       assertFalse(node0.isThrow());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isLabel());
37:       assertFalse(node0.isCast());
38:       assertFalse(node0.isFalse());
39:       assertFalse(node0.isContinue());
40:       assertFalse(node0.isCase());
41:       assertFalse(node0.isSwitch());
42:       assertTrue(node0.isString());
43:       assertEquals((-1), node0.getCharno());
44:       assertFalse(node0.isInc());
45:       assertFalse(node0.isNumber());
46:       assertFalse(node0.isIn());
47:       assertFalse(node0.isFor());
48:       assertFalse(node0.isThis());
49:       assertFalse(node0.isNE());
50:       assertFalse(node0.isIf());
51:       assertEquals((-1), node0.getLineno());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isBlock());
54:       assertFalse(node0.hasMoreThanOneChild());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isRegExp());
57:       assertFalse(node0.isInstanceOf());
58:       assertEquals(40, node0.getType());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isTry());
63:       assertFalse(node0.isDebugger());
64:       assertFalse(node0.isSetterDef());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isParamList());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isStringKey());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isArrayLit());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isWhile());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isOr());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isAssign());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.hasChildren());
84:       assertFalse(node0.isBreak());
85:       assertFalse(node0.isNull());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.isExprResult());
90:       assertFalse(node0.isCall());
91:       assertNotNull(node0);
92:       assertEquals(57, Node.REFLECTED_OBJECT);
93:       assertEquals(40, Node.ORIGINALNAME_PROP);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(30, Node.VAR_ARGS_NAME);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(55, Node.INFERRED_FUNCTION);
101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(37, Node.OPT_ARG_NAME);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(36, Node.QUOTED_PROP);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(12, Node.COLUMN_BITS);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
125:       assertEquals(54, Node.SLASH_V);
126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
127:       assertEquals(50, Node.FREE_CALL);
128:       
129:       Iterable<Node> iterable0 = node0.children();
130:       assertFalse(node0.isWith());
131:       assertFalse(node0.isNot());
132:       assertFalse(node0.isAnd());
133:       assertFalse(node0.isGetProp());
134:       assertFalse(node0.hasOneChild());
135:       assertFalse(node0.isObjectLit());
136:       assertFalse(node0.isScript());
137:       assertFalse(node0.isLabelName());
138:       assertEquals((-1), node0.getSourcePosition());
139:       assertFalse(node0.isThrow());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isLabel());
142:       assertFalse(node0.isCast());
143:       assertFalse(node0.isFalse());
144:       assertFalse(node0.isContinue());
145:       assertFalse(node0.isCase());
146:       assertFalse(node0.isSwitch());
147:       assertTrue(node0.isString());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isInc());
150:       assertFalse(node0.isNumber());
151:       assertFalse(node0.isIn());
152:       assertFalse(node0.isFor());
153:       assertFalse(node0.isThis());
154:       assertFalse(node0.isNE());
155:       assertFalse(node0.isIf());
156:       assertEquals((-1), node0.getLineno());
157:       assertFalse(node0.isHook());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.hasMoreThanOneChild());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isRegExp());
162:       assertFalse(node0.isInstanceOf());
163:       assertEquals(40, node0.getType());
164:       assertFalse(node0.isTrue());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isTry());
168:       assertFalse(node0.isDebugger());
169:       assertFalse(node0.isSetterDef());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isEmpty());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isStringKey());
175:       assertEquals(0, node0.getChildCount());
176:       assertFalse(node0.isArrayLit());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isWhile());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isDelProp());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.hasChildren());
189:       assertFalse(node0.isBreak());
190:       assertFalse(node0.isNull());
191:       assertFalse(node0.isReturn());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isExprResult());
195:       assertFalse(node0.isCall());
196:       assertNotNull(iterable0);
197:       assertEquals(57, Node.REFLECTED_OBJECT);
198:       assertEquals(40, Node.ORIGINALNAME_PROP);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(30, Node.VAR_ARGS_NAME);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(55, Node.INFERRED_FUNCTION);
206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
207:       assertEquals(48, Node.DIRECTIVES);
208:       assertEquals(37, Node.OPT_ARG_NAME);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(56, Node.CHANGE_TIME);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
219:       assertEquals(53, Node.INPUT_ID);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(32, Node.INCRDECR_PROP);
228:       assertEquals(43, Node.IS_CONSTANT_NAME);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(54, Node.SLASH_V);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       assertEquals(50, Node.FREE_CALL);
233:       assertFalse(iterable0.contains(node0));
234:       
235:       boolean boolean0 = node0.isEquivalentTo(node0);
236:       assertFalse(node0.isWith());
237:       assertFalse(node0.isNot());
238:       assertFalse(node0.isAnd());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.hasOneChild());
241:       assertFalse(node0.isObjectLit());
242:       assertFalse(node0.isScript());
243:       assertFalse(node0.isLabelName());
244:       assertEquals((-1), node0.getSourcePosition());
245:       assertFalse(node0.isThrow());
246:       assertFalse(node0.isAssignAdd());
247:       assertFalse(node0.isLabel());
248:       assertFalse(node0.isCast());
249:       assertFalse(node0.isFalse());
250:       assertFalse(node0.isContinue());
251:       assertFalse(node0.isCase());
252:       assertFalse(node0.isSwitch());
253:       assertTrue(node0.isString());
254:       assertEquals((-1), node0.getCharno());
255:       assertFalse(node0.isInc());
256:       assertFalse(node0.isNumber());
257:       assertFalse(node0.isIn());
258:       assertFalse(node0.isFor());
259:       assertFalse(node0.isThis());
260:       assertFalse(node0.isNE());
261:       assertFalse(node0.isIf());
262:       assertEquals((-1), node0.getLineno());
263:       assertFalse(node0.isHook());
264:       assertFalse(node0.isBlock());
265:       assertFalse(node0.hasMoreThanOneChild());
266:       assertFalse(node0.isCatch());
267:       assertFalse(node0.isRegExp());
268:       assertFalse(node0.isInstanceOf());
269:       assertEquals(40, node0.getType());
270:       assertFalse(node0.isTrue());
271:       assertFalse(node0.isVoid());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isTry());
274:       assertFalse(node0.isDebugger());
275:       assertFalse(node0.isSetterDef());
276:       assertFalse(node0.isGetterDef());
277:       assertFalse(node0.isEmpty());
278:       assertFalse(node0.isParamList());
279:       assertFalse(node0.isVar());
280:       assertFalse(node0.isStringKey());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isArrayLit());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isWhile());
285:       assertFalse(node0.isDo());
286:       assertFalse(node0.isAdd());
287:       assertFalse(node0.isOr());
288:       assertFalse(node0.isNew());
289:       assertFalse(node0.isDelProp());
290:       assertFalse(node0.isName());
291:       assertFalse(node0.isAssign());
292:       assertFalse(node0.isDec());
293:       assertFalse(node0.isGetElem());
294:       assertFalse(node0.hasChildren());
295:       assertFalse(node0.isBreak());
296:       assertFalse(node0.isNull());
297:       assertFalse(node0.isReturn());
298:       assertFalse(node0.isComma());
299:       assertFalse(node0.isTypeOf());
300:       assertFalse(node0.isExprResult());
301:       assertFalse(node0.isCall());
302:       assertTrue(boolean0);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(40, Node.ORIGINALNAME_PROP);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
309:       assertEquals(30, Node.VAR_ARGS_NAME);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(55, Node.INFERRED_FUNCTION);
312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
313:       assertEquals(48, Node.DIRECTIVES);
314:       assertEquals(37, Node.OPT_ARG_NAME);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(56, Node.CHANGE_TIME);
317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
318:       assertEquals(36, Node.QUOTED_PROP);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(53, Node.INPUT_ID);
326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
330:       assertEquals(12, Node.COLUMN_BITS);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(32, Node.INCRDECR_PROP);
334:       assertEquals(43, Node.IS_CONSTANT_NAME);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       assertEquals(54, Node.SLASH_V);
337:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
338:       assertEquals(50, Node.FREE_CALL);
339:       
340:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
341:       assertFalse(node0.isWith());
342:       assertFalse(node0.isNot());
343:       assertFalse(node0.isAnd());
344:       assertFalse(node0.isGetProp());
345:       assertFalse(node0.hasOneChild());
346:       assertFalse(node0.isObjectLit());
347:       assertFalse(node0.isScript());
348:       assertFalse(node0.isLabelName());
349:       assertEquals((-1), node0.getSourcePosition());
350:       assertFalse(node0.isThrow());
351:       assertFalse(node0.isAssignAdd());
352:       assertFalse(node0.isLabel());
353:       assertFalse(node0.isCast());
354:       assertFalse(node0.isFalse());
355:       assertFalse(node0.isContinue());
356:       assertFalse(node0.isCase());
357:       assertFalse(node0.isSwitch());
358:       assertTrue(node0.isString());
359:       assertEquals((-1), node0.getCharno());
360:       assertFalse(node0.isInc());
361:       assertFalse(node0.isNumber());
362:       assertFalse(node0.isIn());
363:       assertFalse(node0.isFor());
364:       assertFalse(node0.isThis());
365:       assertFalse(node0.isNE());
366:       assertFalse(node0.isIf());
367:       assertEquals((-1), node0.getLineno());
368:       assertFalse(node0.isHook());
369:       assertFalse(node0.isBlock());
370:       assertFalse(node0.hasMoreThanOneChild());
371:       assertFalse(node0.isCatch());
372:       assertFalse(node0.isRegExp());
373:       assertFalse(node0.isInstanceOf());
374:       assertEquals(40, node0.getType());
375:       assertFalse(node0.isTrue());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isDefaultCase());
378:       assertFalse(node0.isTry());
379:       assertFalse(node0.isDebugger());
380:       assertFalse(node0.isSetterDef());
381:       assertFalse(node0.isGetterDef());
382:       assertFalse(node0.isEmpty());
383:       assertFalse(node0.isParamList());
384:       assertFalse(node0.isVar());
385:       assertFalse(node0.isStringKey());
386:       assertEquals(0, node0.getChildCount());
387:       assertFalse(node0.isArrayLit());
388:       assertFalse(node0.isFunction());
389:       assertFalse(node0.isWhile());
390:       assertFalse(node0.isDo());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isOr());
393:       assertFalse(node0.isNew());
394:       assertFalse(node0.isDelProp());
395:       assertFalse(node0.isName());
396:       assertFalse(node0.isAssign());
397:       assertFalse(node0.isDec());
398:       assertFalse(node0.isGetElem());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isBreak());
401:       assertFalse(node0.isNull());
402:       assertFalse(node0.isReturn());
403:       assertFalse(node0.isComma());
404:       assertFalse(node0.isTypeOf());
405:       assertFalse(node0.isExprResult());
406:       assertFalse(node0.isCall());
407:       assertNotNull(node_AncestorIterable0);
408:       assertEquals(57, Node.REFLECTED_OBJECT);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(57, Node.LAST_PROP);
411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(30, Node.VAR_ARGS_NAME);
415:       assertEquals(4095, Node.COLUMN_MASK);
416:       assertEquals(55, Node.INFERRED_FUNCTION);
417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
418:       assertEquals(48, Node.DIRECTIVES);
419:       assertEquals(37, Node.OPT_ARG_NAME);
420:       assertEquals(49, Node.DIRECT_EVAL);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(29, Node.JSDOC_INFO_PROP);
426:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(53, Node.INPUT_ID);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(2, Node.POST_FLAG);
434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
435:       assertEquals(12, Node.COLUMN_BITS);
436:       assertEquals(46, Node.IS_NAMESPACE);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
441:       assertEquals(54, Node.SLASH_V);
442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
443:       assertEquals(50, Node.FREE_CALL);
444:       
445:       Spliterator<Node> spliterator0 = node_AncestorIterable0.spliterator();
446:       assertFalse(node0.isWith());
447:       assertFalse(node0.isNot());
448:       assertFalse(node0.isAnd());
449:       assertFalse(node0.isGetProp());
450:       assertFalse(node0.hasOneChild());
451:       assertFalse(node0.isObjectLit());
452:       assertFalse(node0.isScript());
453:       assertFalse(node0.isLabelName());
454:       assertEquals((-1), node0.getSourcePosition());
455:       assertFalse(node0.isThrow());
456:       assertFalse(node0.isAssignAdd());
457:       assertFalse(node0.isLabel());
458:       assertFalse(node0.isCast());
459:       assertFalse(node0.isFalse());
460:       assertFalse(node0.isContinue());
461:       assertFalse(node0.isCase());
462:       assertFalse(node0.isSwitch());
463:       assertTrue(node0.isString());
464:       assertEquals((-1), node0.getCharno());
465:       assertFalse(node0.isInc());
466:       assertFalse(node0.isNumber());
467:       assertFalse(node0.isIn());
468:       assertFalse(node0.isFor());
469:       assertFalse(node0.isThis());
470:       assertFalse(node0.isNE());
471:       assertFalse(node0.isIf());
472:       assertEquals((-1), node0.getLineno());
473:       assertFalse(node0.isHook());
474:       assertFalse(node0.isBlock());
475:       assertFalse(node0.hasMoreThanOneChild());
476:       assertFalse(node0.isCatch());
477:       assertFalse(node0.isRegExp());
478:       assertFalse(node0.isInstanceOf());
479:       assertEquals(40, node0.getType());
480:       assertFalse(node0.isTrue());
481:       assertFalse(node0.isVoid());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isTry());
484:       assertFalse(node0.isDebugger());
485:       assertFalse(node0.isSetterDef());
486:       assertFalse(node0.isGetterDef());
487:       assertFalse(node0.isEmpty());
488:       assertFalse(node0.isParamList());
489:       assertFalse(node0.isVar());
490:       assertFalse(node0.isStringKey());
491:       assertEquals(0, node0.getChildCount());
492:       assertFalse(node0.isArrayLit());
493:       assertFalse(node0.isFunction());
494:       assertFalse(node0.isWhile());
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isAdd());
497:       assertFalse(node0.isOr());
498:       assertFalse(node0.isNew());
499:       assertFalse(node0.isDelProp());
500:       assertFalse(node0.isName());
501:       assertFalse(node0.isAssign());
502:       assertFalse(node0.isDec());
503:       assertFalse(node0.isGetElem());
504:       assertFalse(node0.hasChildren());
505:       assertFalse(node0.isBreak());
506:       assertFalse(node0.isNull());
507:       assertFalse(node0.isReturn());
508:       assertFalse(node0.isComma());
509:       assertFalse(node0.isTypeOf());
510:       assertFalse(node0.isExprResult());
511:       assertFalse(node0.isCall());
512:       assertNotNull(spliterator0);
513:       assertEquals(57, Node.REFLECTED_OBJECT);
514:       assertEquals(40, Node.ORIGINALNAME_PROP);
515:       assertEquals(57, Node.LAST_PROP);
516:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
517:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
519:       assertEquals(30, Node.VAR_ARGS_NAME);
520:       assertEquals(4095, Node.COLUMN_MASK);
521:       assertEquals(55, Node.INFERRED_FUNCTION);
522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
523:       assertEquals(48, Node.DIRECTIVES);
524:       assertEquals(37, Node.OPT_ARG_NAME);
525:       assertEquals(49, Node.DIRECT_EVAL);
526:       assertEquals(56, Node.CHANGE_TIME);
527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(39, Node.EMPTY_BLOCK);
530:       assertEquals(29, Node.JSDOC_INFO_PROP);
531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
532:       assertEquals(52, Node.LENGTH);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(2, Node.POST_FLAG);
539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
540:       assertEquals(12, Node.COLUMN_BITS);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(1, Node.DECR_FLAG);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(54, Node.SLASH_V);
547:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
548:       assertEquals(50, Node.FREE_CALL);
549:       
550:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
551:       assertFalse(node0.isWith());
552:       assertFalse(node0.isNot());
553:       assertFalse(node0.isAnd());
554:       assertFalse(node0.isGetProp());
555:       assertFalse(node0.hasOneChild());
556:       assertFalse(node0.isObjectLit());
557:       assertFalse(node0.isScript());
558:       assertFalse(node0.isLabelName());
559:       assertEquals((-1), node0.getSourcePosition());
560:       assertFalse(node0.isThrow());
561:       assertFalse(node0.isAssignAdd());
562:       assertFalse(node0.isLabel());
563:       assertFalse(node0.isCast());
564:       assertFalse(node0.isFalse());
565:       assertFalse(node0.isContinue());
566:       assertFalse(node0.isCase());
567:       assertFalse(node0.isSwitch());
568:       assertTrue(node0.isString());
569:       assertEquals((-1), node0.getCharno());
570:       assertFalse(node0.isInc());
571:       assertFalse(node0.isNumber());
572:       assertFalse(node0.isIn());
573:       assertFalse(node0.isFor());
574:       assertFalse(node0.isThis());
575:       assertFalse(node0.isNE());
576:       assertFalse(node0.isIf());
577:       assertEquals((-1), node0.getLineno());
578:       assertFalse(node0.isHook());
579:       assertFalse(node0.isBlock());
580:       assertFalse(node0.hasMoreThanOneChild());
581:       assertFalse(node0.isCatch());
582:       assertFalse(node0.isRegExp());
583:       assertFalse(node0.isInstanceOf());
584:       assertEquals(40, node0.getType());
585:       assertFalse(node0.isTrue());
586:       assertFalse(node0.isVoid());
587:       assertFalse(node0.isDefaultCase());
588:       assertFalse(node0.isTry());
589:       assertFalse(node0.isDebugger());
590:       assertFalse(node0.isSetterDef());
591:       assertFalse(node0.isGetterDef());
592:       assertFalse(node0.isEmpty());
593:       assertFalse(node0.isParamList());
594:       assertFalse(node0.isVar());
595:       assertFalse(node0.isStringKey());
596:       assertEquals(0, node0.getChildCount());
597:       assertFalse(node0.isArrayLit());
598:       assertFalse(node0.isFunction());
599:       assertFalse(node0.isWhile());
600:       assertFalse(node0.isDo());
601:       assertFalse(node0.isAdd());
602:       assertFalse(node0.isOr());
603:       assertFalse(node0.isNew());
604:       assertFalse(node0.isDelProp());
605:       assertFalse(node0.isName());
606:       assertFalse(node0.isAssign());
607:       assertFalse(node0.isDec());
608:       assertFalse(node0.isGetElem());
609:       assertFalse(node0.hasChildren());
610:       assertFalse(node0.isBreak());
611:       assertFalse(node0.isNull());
612:       assertFalse(node0.isReturn());
613:       assertFalse(node0.isComma());
614:       assertFalse(node0.isTypeOf());
615:       assertFalse(node0.isExprResult());
616:       assertFalse(node0.isCall());
617:       assertNotNull(iterator0);
618:       assertEquals(57, Node.REFLECTED_OBJECT);
619:       assertEquals(40, Node.ORIGINALNAME_PROP);
620:       assertEquals(57, Node.LAST_PROP);
621:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
623:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
624:       assertEquals(30, Node.VAR_ARGS_NAME);
625:       assertEquals(4095, Node.COLUMN_MASK);
626:       assertEquals(55, Node.INFERRED_FUNCTION);
627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
628:       assertEquals(48, Node.DIRECTIVES);
629:       assertEquals(37, Node.OPT_ARG_NAME);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(56, Node.CHANGE_TIME);
632:       assertEquals(15, Node.NO_SIDE_EFFECTS);
633:       assertEquals(36, Node.QUOTED_PROP);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
637:       assertEquals(52, Node.LENGTH);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(2, Node.POST_FLAG);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(12, Node.COLUMN_BITS);
646:       assertEquals(46, Node.IS_NAMESPACE);
647:       assertEquals(1, Node.DECR_FLAG);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(43, Node.IS_CONSTANT_NAME);
650:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
651:       assertEquals(54, Node.SLASH_V);
652:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
653:       assertEquals(50, Node.FREE_CALL);
654:       
655:       boolean boolean1 = node0.isVarArgs();
656:       assertFalse(boolean1 == boolean0);
657:       assertFalse(node0.isWith());
658:       assertFalse(node0.isNot());
659:       assertFalse(node0.isAnd());
660:       assertFalse(node0.isGetProp());
661:       assertFalse(node0.hasOneChild());
662:       assertFalse(node0.isObjectLit());
663:       assertFalse(node0.isScript());
664:       assertFalse(node0.isLabelName());
665:       assertEquals((-1), node0.getSourcePosition());
666:       assertFalse(node0.isThrow());
667:       assertFalse(node0.isAssignAdd());
668:       assertFalse(node0.isLabel());
669:       assertFalse(node0.isCast());
670:       assertFalse(node0.isFalse());
671:       assertFalse(node0.isContinue());
672:       assertFalse(node0.isCase());
673:       assertFalse(node0.isSwitch());
674:       assertTrue(node0.isString());
675:       assertEquals((-1), node0.getCharno());
676:       assertFalse(node0.isInc());
677:       assertFalse(node0.isNumber());
678:       assertFalse(node0.isIn());
679:       assertFalse(node0.isFor());
680:       assertFalse(node0.isThis());
681:       assertFalse(node0.isNE());
682:       assertFalse(node0.isIf());
683:       assertEquals((-1), node0.getLineno());
684:       assertFalse(node0.isHook());
685:       assertFalse(node0.isBlock());
686:       assertFalse(node0.hasMoreThanOneChild());
687:       assertFalse(node0.isCatch());
688:       assertFalse(node0.isRegExp());
689:       assertFalse(node0.isInstanceOf());
690:       assertEquals(40, node0.getType());
691:       assertFalse(node0.isTrue());
692:       assertFalse(node0.isVoid());
693:       assertFalse(node0.isDefaultCase());
694:       assertFalse(node0.isTry());
695:       assertFalse(node0.isDebugger());
696:       assertFalse(node0.isSetterDef());
697:       assertFalse(node0.isGetterDef());
698:       assertFalse(node0.isEmpty());
699:       assertFalse(node0.isParamList());
700:       assertFalse(node0.isVar());
701:       assertFalse(node0.isStringKey());
702:       assertEquals(0, node0.getChildCount());
703:       assertFalse(node0.isArrayLit());
704:       assertFalse(node0.isFunction());
705:       assertFalse(node0.isWhile());
706:       assertFalse(node0.isDo());
707:       assertFalse(node0.isAdd());
708:       assertFalse(node0.isOr());
709:       assertFalse(node0.isNew());
710:       assertFalse(node0.isDelProp());
711:       assertFalse(node0.isName());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.isGetElem());
715:       assertFalse(node0.hasChildren());
716:       assertFalse(node0.isBreak());
717:       assertFalse(node0.isNull());
718:       assertFalse(node0.isReturn());
719:       assertFalse(node0.isComma());
720:       assertFalse(node0.isTypeOf());
721:       assertFalse(node0.isExprResult());
722:       assertFalse(node0.isCall());
723:       assertFalse(boolean1);
724:       assertEquals(57, Node.REFLECTED_OBJECT);
725:       assertEquals(40, Node.ORIGINALNAME_PROP);
726:       assertEquals(57, Node.LAST_PROP);
727:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
729:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
730:       assertEquals(30, Node.VAR_ARGS_NAME);
731:       assertEquals(4095, Node.COLUMN_MASK);
732:       assertEquals(55, Node.INFERRED_FUNCTION);
733:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(37, Node.OPT_ARG_NAME);
736:       assertEquals(49, Node.DIRECT_EVAL);
737:       assertEquals(56, Node.CHANGE_TIME);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(36, Node.QUOTED_PROP);
740:       assertEquals(39, Node.EMPTY_BLOCK);
741:       assertEquals(29, Node.JSDOC_INFO_PROP);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
746:       assertEquals(53, Node.INPUT_ID);
747:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
748:       assertEquals(47, Node.IS_DISPATCHER);
749:       assertEquals(2, Node.POST_FLAG);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(12, Node.COLUMN_BITS);
752:       assertEquals(46, Node.IS_NAMESPACE);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(32, Node.INCRDECR_PROP);
755:       assertEquals(43, Node.IS_CONSTANT_NAME);
756:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
757:       assertEquals(54, Node.SLASH_V);
758:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
759:       assertEquals(50, Node.FREE_CALL);
760:       
761:       Node node1 = Node.newNumber((double) 4);
762:       assertFalse(node1.equals((Object)node0));
763:       assertFalse(node1.isDefaultCase());
764:       assertFalse(node1.isRegExp());
765:       assertFalse(node1.isFunction());
766:       assertFalse(node1.isCatch());
767:       assertEquals(0, node1.getChildCount());
768:       assertFalse(node1.isTry());
769:       assertFalse(node1.isFor());
770:       assertFalse(node1.isGetterDef());
771:       assertFalse(node1.isArrayLit());
772:       assertFalse(node1.isDebugger());
773:       assertFalse(node1.isParamList());
774:       assertFalse(node1.isStringKey());
775:       assertFalse(node1.isDo());
776:       assertFalse(node1.isAdd());
777:       assertFalse(node1.isString());
778:       assertFalse(node1.isReturn());
779:       assertFalse(node1.isLabel());
780:       assertTrue(node1.isNumber());
781:       assertFalse(node1.isNew());
782:       assertFalse(node1.isVar());
783:       assertFalse(node1.isAssignAdd());
784:       assertFalse(node1.isWhile());
785:       assertFalse(node1.isDelProp());
786:       assertFalse(node1.hasChildren());
787:       assertFalse(node1.isBreak());
788:       assertFalse(node1.isTypeOf());
789:       assertFalse(node1.isAssign());
790:       assertFalse(node1.isComma());
791:       assertFalse(node1.isDec());
792:       assertFalse(node1.isCall());
793:       assertFalse(node1.isGetElem());
794:       assertFalse(node1.isEmpty());
795:       assertFalse(node1.isOr());
796:       assertFalse(node1.isVoid());
797:       assertFalse(node1.isTrue());
798:       assertFalse(node1.isName());
799:       assertFalse(node1.isNull());
800:       assertFalse(node1.isWith());
801:       assertFalse(node1.isNot());
802:       assertFalse(node1.isObjectLit());
803:       assertFalse(node1.isExprResult());
804:       assertFalse(node1.isScript());
805:       assertFalse(node1.isInstanceOf());
806:       assertFalse(node1.hasOneChild());
807:       assertFalse(node1.isThis());
808:       assertFalse(node1.isLabelName());
809:       assertEquals((-1), node1.getSourcePosition());
810:       assertFalse(node1.isGetProp());
811:       assertFalse(node1.isFalse());
812:       assertFalse(node1.isCast());
813:       assertFalse(node1.isAnd());
814:       assertEquals((-1), node1.getCharno());
815:       assertFalse(node1.isSwitch());
816:       assertEquals(39, node1.getType());
817:       assertFalse(node1.isCase());
818:       assertFalse(node1.isContinue());
819:       assertFalse(node1.isInc());
820:       assertFalse(node1.hasMoreThanOneChild());
821:       assertFalse(node1.isHook());
822:       assertFalse(node1.isThrow());
823:       assertFalse(node1.isBlock());
824:       assertFalse(node1.isIf());
825:       assertFalse(node1.isSetterDef());
826:       assertFalse(node1.isIn());
827:       assertEquals((-1), node1.getLineno());
828:       assertFalse(node1.isNE());
829:       assertNotNull(node1);
830:       assertEquals(40, Node.ORIGINALNAME_PROP);
831:       assertEquals(57, Node.REFLECTED_OBJECT);
832:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
833:       assertEquals(50, Node.FREE_CALL);
834:       assertEquals(52, Node.LENGTH);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(54, Node.SLASH_V);
837:       assertEquals(49, Node.DIRECT_EVAL);
838:       assertEquals(48, Node.DIRECTIVES);
839:       assertEquals(55, Node.INFERRED_FUNCTION);
840:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(8, Node.FLAG_NO_THROWS);
843:       assertEquals(2, Node.POST_FLAG);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(39, Node.EMPTY_BLOCK);
847:       assertEquals(47, Node.IS_DISPATCHER);
848:       assertEquals(57, Node.LAST_PROP);
849:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
850:       assertEquals(29, Node.JSDOC_INFO_PROP);
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
853:       assertEquals(43, Node.IS_CONSTANT_NAME);
854:       assertEquals(56, Node.CHANGE_TIME);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       assertEquals(37, Node.OPT_ARG_NAME);
857:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(4095, Node.COLUMN_MASK);
860:       assertEquals(51, Node.STATIC_SOURCE_FILE);
861:       assertEquals(46, Node.IS_NAMESPACE);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       
867:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
868:       assertFalse(jSDocInfo0.isNoTypeCheck());
869:       assertNull(jSDocInfo0.getDescription());
870:       assertFalse(jSDocInfo0.hasModifies());
871:       assertFalse(jSDocInfo0.isConstructor());
872:       assertFalse(jSDocInfo0.hasThisType());
873:       assertFalse(jSDocInfo0.hasEnumParameterType());
874:       assertFalse(jSDocInfo0.isExport());
875:       assertFalse(jSDocInfo0.containsDeclaration());
876:       assertFalse(jSDocInfo0.hasTypedefType());
877:       assertNull(jSDocInfo0.getFileOverview());
878:       assertFalse(jSDocInfo0.isNoAlias());
879:       assertNull(jSDocInfo0.getVisibility());
880:       assertNull(jSDocInfo0.getMeaning());
881:       assertFalse(jSDocInfo0.hasReturnType());
882:       assertFalse(jSDocInfo0.isConstant());
883:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
884:       assertNull(jSDocInfo0.getVersion());
885:       assertFalse(jSDocInfo0.makesStructs());
886:       assertFalse(jSDocInfo0.isWizaction());
887:       assertFalse(jSDocInfo0.isImplicitCast());
888:       assertEquals(0, jSDocInfo0.getParameterCount());
889:       assertFalse(jSDocInfo0.isDefine());
890:       assertFalse(jSDocInfo0.isOverride());
891:       assertFalse(jSDocInfo0.isIdGenerator());
892:       assertFalse(jSDocInfo0.isInterface());
893:       assertNull(jSDocInfo0.getBlockDescription());
894:       assertNull(jSDocInfo0.getDeprecationReason());
895:       assertFalse(jSDocInfo0.hasFileOverview());
896:       assertFalse(jSDocInfo0.isJaggerInject());
897:       assertFalse(jSDocInfo0.isNoSideEffects());
898:       assertFalse(jSDocInfo0.hasType());
899:       assertFalse(jSDocInfo0.isJaggerModule());
900:       assertFalse(jSDocInfo0.makesDicts());
901:       assertFalse(jSDocInfo0.isNoCompile());
902:       assertFalse(jSDocInfo0.isJavaDispatch());
903:       assertNull(jSDocInfo0.getOriginalCommentString());
904:       assertFalse(jSDocInfo0.isJaggerProvide());
905:       assertFalse(jSDocInfo0.isStableIdGenerator());
906:       assertNull(jSDocInfo0.getLicense());
907:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
908:       assertFalse(jSDocInfo0.shouldPreserveTry());
909:       assertEquals("JSDocInfo", jSDocInfo0.toString());
910:       assertNull(jSDocInfo0.getReturnDescription());
911:       assertFalse(jSDocInfo0.isNgInject());
912:       assertFalse(jSDocInfo0.hasBaseType());
913:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
914:       assertFalse(jSDocInfo0.isDisposes());
915:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
916:       assertFalse(jSDocInfo0.isExterns());
917:       assertFalse(jSDocInfo0.isHidden());
918:       assertFalse(jSDocInfo0.isNoShadow());
919:       assertFalse(jSDocInfo0.isDeprecated());
920:       assertNull(jSDocInfo0.getLendsName());
921:       assertFalse(jSDocInfo0.isMappedIdGenerator());
922:       assertFalse(jSDocInfo0.isExpose());
923:       assertNotNull(jSDocInfo0);
924:       
925:       boolean boolean2 = node1.isTypeOf();
926:       assertFalse(node1.equals((Object)node0));
927:       assertTrue(boolean2 == boolean1);
928:       assertFalse(boolean2 == boolean0);
929:       assertFalse(node1.isDefaultCase());
930:       assertFalse(node1.isRegExp());
931:       assertFalse(node1.isFunction());
932:       assertFalse(node1.isCatch());
933:       assertEquals(0, node1.getChildCount());
934:       assertFalse(node1.isTry());
935:       assertFalse(node1.isFor());
936:       assertFalse(node1.isGetterDef());
937:       assertFalse(node1.isArrayLit());
938:       assertFalse(node1.isDebugger());
939:       assertFalse(node1.isParamList());
940:       assertFalse(node1.isStringKey());
941:       assertFalse(node1.isDo());
942:       assertFalse(node1.isAdd());
943:       assertFalse(node1.isString());
944:       assertFalse(node1.isReturn());
945:       assertFalse(node1.isLabel());
946:       assertTrue(node1.isNumber());
947:       assertFalse(node1.isNew());
948:       assertFalse(node1.isVar());
949:       assertFalse(node1.isAssignAdd());
950:       assertFalse(node1.isWhile());
951:       assertFalse(node1.isDelProp());
952:       assertFalse(node1.hasChildren());
953:       assertFalse(node1.isBreak());
954:       assertFalse(node1.isTypeOf());
955:       assertFalse(node1.isAssign());
956:       assertFalse(node1.isComma());
957:       assertFalse(node1.isDec());
958:       assertFalse(node1.isCall());
959:       assertFalse(node1.isGetElem());
960:       assertFalse(node1.isEmpty());
961:       assertFalse(node1.isOr());
962:       assertFalse(node1.isVoid());
963:       assertFalse(node1.isTrue());
964:       assertFalse(node1.isName());
965:       assertFalse(node1.isNull());
966:       assertFalse(node1.isWith());
967:       assertFalse(node1.isNot());
968:       assertFalse(node1.isObjectLit());
969:       assertFalse(node1.isExprResult());
970:       assertFalse(node1.isScript());
971:       assertFalse(node1.isInstanceOf());
972:       assertFalse(node1.hasOneChild());
973:       assertFalse(node1.isThis());
974:       assertFalse(node1.isLabelName());
975:       assertEquals((-1), node1.getSourcePosition());
976:       assertFalse(node1.isGetProp());
977:       assertFalse(node1.isFalse());
978:       assertFalse(node1.isCast());
979:       assertFalse(node1.isAnd());
980:       assertEquals((-1), node1.getCharno());
981:       assertFalse(node1.isSwitch());
982:       assertEquals(39, node1.getType());
983:       assertFalse(node1.isCase());
984:       assertFalse(node1.isContinue());
985:       assertFalse(node1.isInc());
986:       assertFalse(node1.hasMoreThanOneChild());
987:       assertFalse(node1.isHook());
988:       assertFalse(node1.isThrow());
989:       assertFalse(node1.isBlock());
990:       assertFalse(node1.isIf());
991:       assertFalse(node1.isSetterDef());
992:       assertFalse(node1.isIn());
993:       assertEquals((-1), node1.getLineno());
994:       assertFalse(node1.isNE());
995:       assertFalse(boolean2);
996:       assertEquals(40, Node.ORIGINALNAME_PROP);
997:       assertEquals(57, Node.REFLECTED_OBJECT);
998:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
999:       assertEquals(50, Node.FREE_CALL);
1000:       assertEquals(52, Node.LENGTH);
1001:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1002:       assertEquals(54, Node.SLASH_V);
1003:       assertEquals(49, Node.DIRECT_EVAL);
1004:       assertEquals(48, Node.DIRECTIVES);
1005:       assertEquals(55, Node.INFERRED_FUNCTION);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(30, Node.VAR_ARGS_NAME);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(2, Node.POST_FLAG);
1010:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1011:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1012:       assertEquals(39, Node.EMPTY_BLOCK);
1013:       assertEquals(47, Node.IS_DISPATCHER);
1014:       assertEquals(57, Node.LAST_PROP);
1015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1016:       assertEquals(29, Node.JSDOC_INFO_PROP);
1017:       assertEquals(53, Node.INPUT_ID);
1018:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1019:       assertEquals(43, Node.IS_CONSTANT_NAME);
1020:       assertEquals(56, Node.CHANGE_TIME);
1021:       assertEquals(36, Node.QUOTED_PROP);
1022:       assertEquals(37, Node.OPT_ARG_NAME);
1023:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1024:       assertEquals(12, Node.COLUMN_BITS);
1025:       assertEquals(4095, Node.COLUMN_MASK);
1026:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1027:       assertEquals(46, Node.IS_NAMESPACE);
1028:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1029:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1030:       assertEquals(1, Node.DECR_FLAG);
1031:       assertEquals(32, Node.INCRDECR_PROP);
1032:       
1033:       Node node2 = new Node(28, node1, node0);
1034:       assertFalse(node0.equals((Object)node1));
1035:       assertFalse(node1.equals((Object)node0));
1036:       assertFalse(node2.equals((Object)node0));
1037:       assertFalse(node2.equals((Object)node1));
1038:       assertFalse(node0.isWith());
1039:       assertFalse(node0.isNot());
1040:       assertFalse(node0.isAnd());
1041:       assertFalse(node0.isGetProp());
1042:       assertFalse(node0.hasOneChild());
1043:       assertFalse(node0.isObjectLit());
1044:       assertFalse(node0.isScript());
1045:       assertFalse(node0.isLabelName());
1046:       assertEquals((-1), node0.getSourcePosition());
1047:       assertFalse(node0.isThrow());
1048:       assertFalse(node0.isAssignAdd());
1049:       assertFalse(node0.isLabel());
1050:       assertFalse(node0.isCast());
1051:       assertFalse(node0.isFalse());
1052:       assertFalse(node0.isContinue());
1053:       assertFalse(node0.isCase());
1054:       assertFalse(node0.isSwitch());
1055:       assertTrue(node0.isString());
1056:       assertEquals((-1), node0.getCharno());
1057:       assertFalse(node0.isInc());
1058:       assertFalse(node0.isNumber());
1059:       assertFalse(node0.isIn());
1060:       assertFalse(node0.isFor());
1061:       assertFalse(node0.isThis());
1062:       assertFalse(node0.isNE());
1063:       assertFalse(node0.isIf());
1064:       assertEquals((-1), node0.getLineno());
1065:       assertFalse(node0.isHook());
1066:       assertFalse(node0.isBlock());
1067:       assertFalse(node0.hasMoreThanOneChild());
1068:       assertFalse(node0.isCatch());
1069:       assertFalse(node0.isRegExp());
1070:       assertFalse(node0.isInstanceOf());
1071:       assertEquals(40, node0.getType());
1072:       assertFalse(node0.isTrue());
1073:       assertFalse(node0.isVoid());
1074:       assertFalse(node0.isDefaultCase());
1075:       assertFalse(node0.isTry());
1076:       assertFalse(node0.isDebugger());
1077:       assertFalse(node0.isSetterDef());
1078:       assertFalse(node0.isGetterDef());
1079:       assertFalse(node0.isEmpty());
1080:       assertFalse(node0.isParamList());
1081:       assertFalse(node0.isVar());
1082:       assertFalse(node0.isStringKey());
1083:       assertEquals(0, node0.getChildCount());
1084:       assertFalse(node0.isArrayLit());
1085:       assertFalse(node0.isFunction());
1086:       assertFalse(node0.isWhile());
1087:       assertFalse(node0.isDo());
1088:       assertFalse(node0.isAdd());
1089:       assertFalse(node0.isOr());
1090:       assertFalse(node0.isNew());
1091:       assertFalse(node0.isDelProp());
1092:       assertFalse(node0.isName());
1093:       assertFalse(node0.isAssign());
1094:       assertFalse(node0.isDec());
1095:       assertFalse(node0.isGetElem());
1096:       assertFalse(node0.hasChildren());
1097:       assertFalse(node0.isBreak());
1098:       assertFalse(node0.isNull());
1099:       assertFalse(node0.isReturn());
1100:       assertFalse(node0.isComma());
1101:       assertFalse(node0.isTypeOf());
1102:       assertFalse(node0.isExprResult());
1103:       assertFalse(node0.isCall());
1104:       assertFalse(node1.isDefaultCase());
1105:       assertFalse(node1.isRegExp());
1106:       assertFalse(node1.isFunction());
1107:       assertFalse(node1.isCatch());
1108:       assertEquals(0, node1.getChildCount());
1109:       assertFalse(node1.isTry());
1110:       assertFalse(node1.isFor());
1111:       assertFalse(node1.isGetterDef());
1112:       assertFalse(node1.isArrayLit());
1113:       assertFalse(node1.isDebugger());
1114:       assertFalse(node1.isParamList());
1115:       assertFalse(node1.isStringKey());
1116:       assertFalse(node1.isDo());
1117:       assertFalse(node1.isAdd());
1118:       assertFalse(node1.isString());
1119:       assertFalse(node1.isReturn());
1120:       assertFalse(node1.isLabel());
1121:       assertTrue(node1.isNumber());
1122:       assertFalse(node1.isNew());
1123:       assertFalse(node1.isVar());
1124:       assertFalse(node1.isAssignAdd());
1125:       assertFalse(node1.isWhile());
1126:       assertFalse(node1.isDelProp());
1127:       assertFalse(node1.hasChildren());
1128:       assertFalse(node1.isBreak());
1129:       assertFalse(node1.isTypeOf());
1130:       assertFalse(node1.isAssign());
1131:       assertFalse(node1.isComma());
1132:       assertFalse(node1.isDec());
1133:       assertFalse(node1.isCall());
1134:       assertFalse(node1.isGetElem());
1135:       assertFalse(node1.isEmpty());
1136:       assertFalse(node1.isOr());
1137:       assertFalse(node1.isVoid());
1138:       assertFalse(node1.isTrue());
1139:       assertFalse(node1.isName());
1140:       assertFalse(node1.isNull());
1141:       assertFalse(node1.isWith());
1142:       assertFalse(node1.isNot());
1143:       assertFalse(node1.isObjectLit());
1144:       assertFalse(node1.isExprResult());
1145:       assertFalse(node1.isScript());
1146:       assertFalse(node1.isInstanceOf());
1147:       assertFalse(node1.hasOneChild());
1148:       assertFalse(node1.isThis());
1149:       assertFalse(node1.isLabelName());
1150:       assertEquals((-1), node1.getSourcePosition());
1151:       assertFalse(node1.isGetProp());
1152:       assertFalse(node1.isFalse());
1153:       assertFalse(node1.isCast());
1154:       assertFalse(node1.isAnd());
1155:       assertEquals((-1), node1.getCharno());
1156:       assertFalse(node1.isSwitch());
1157:       assertEquals(39, node1.getType());
1158:       assertFalse(node1.isCase());
1159:       assertFalse(node1.isContinue());
1160:       assertFalse(node1.isInc());
1161:       assertFalse(node1.hasMoreThanOneChild());
1162:       assertFalse(node1.isHook());
1163:       assertFalse(node1.isThrow());
1164:       assertFalse(node1.isBlock());
1165:       assertFalse(node1.isIf());
1166:       assertFalse(node1.isSetterDef());
1167:       assertFalse(node1.isIn());
1168:       assertEquals((-1), node1.getLineno());
1169:       assertFalse(node1.isNE());
1170:       assertFalse(node2.isDo());
1171:       assertFalse(node2.isWhile());
1172:       assertFalse(node2.isContinue());
1173:       assertEquals((-1), node2.getLineno());
1174:       assertFalse(node2.isBlock());
1175:       assertFalse(node2.isNew());
1176:       assertFalse(node2.isAssignAdd());
1177:       assertFalse(node2.isTypeOf());
1178:       assertFalse(node2.isDec());
1179:       assertFalse(node2.isVar());
1180:       assertFalse(node2.isReturn());
1181:       assertFalse(node2.isLabel());
1182:       assertFalse(node2.isName());
1183:       assertFalse(node2.isGetElem());
1184:       assertFalse(node2.isAssign());
1185:       assertFalse(node2.isSetterDef());
1186:       assertFalse(node2.isCall());
1187:       assertFalse(node2.isAdd());
1188:       assertFalse(node2.isOr());
1189:       assertFalse(node2.isNull());
1190:       assertFalse(node2.isNot());
1191:       assertFalse(node2.isObjectLit());
1192:       assertFalse(node2.isAnd());
1193:       assertFalse(node2.isExprResult());
1194:       assertFalse(node2.isFunction());
1195:       assertFalse(node2.isComma());
1196:       assertEquals(2, node2.getChildCount());
1197:       assertFalse(node2.isFalse());
1198:       assertEquals(28, node2.getType());
1199:       assertFalse(node2.isCast());
1200:       assertFalse(node2.isGetProp());
1201:       assertEquals((-1), node2.getSourcePosition());
1202:       assertFalse(node2.isDebugger());
1203:       assertFalse(node2.isCase());
1204:       assertFalse(node2.isString());
1205:       assertTrue(node2.hasMoreThanOneChild());
1206:       assertFalse(node2.isInc());
1207:       assertTrue(node2.hasChildren());
1208:       assertFalse(node2.isHook());
1209:       assertFalse(node2.isThrow());
1210:       assertFalse(node2.isEmpty());
1211:       assertFalse(node2.isDelProp());
1212:       assertFalse(node2.isIf());
1213:       assertFalse(node2.isBreak());
1214:       assertFalse(node2.isVoid());
1215:       assertFalse(node2.isIn());
1216:       assertFalse(node2.isNE());
1217:       assertFalse(node2.isTrue());
1218:       assertFalse(node2.isWith());
1219:       assertFalse(node2.isDefaultCase());
1220:       assertFalse(node2.isInstanceOf());
1221:       assertFalse(node2.isScript());
1222:       assertFalse(node2.isCatch());
1223:       assertFalse(node2.isTry());
1224:       assertFalse(node2.isRegExp());
1225:       assertFalse(node2.isThis());
1226:       assertFalse(node2.isStringKey());
1227:       assertFalse(node2.isLabelName());
1228:       assertFalse(node2.isFor());
1229:       assertFalse(node2.hasOneChild());
1230:       assertFalse(node2.isArrayLit());
1231:       assertFalse(node2.isParamList());
1232:       assertFalse(node2.isSwitch());
1233:       assertFalse(node2.isNumber());
1234:       assertFalse(node2.isGetterDef());
1235:       assertEquals((-1), node2.getCharno());
1236:       assertNotNull(node2);
1237:       assertEquals(57, Node.REFLECTED_OBJECT);
1238:       assertEquals(40, Node.ORIGINALNAME_PROP);
1239:       assertEquals(57, Node.LAST_PROP);
1240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1243:       assertEquals(30, Node.VAR_ARGS_NAME);
1244:       assertEquals(4095, Node.COLUMN_MASK);
1245:       assertEquals(55, Node.INFERRED_FUNCTION);
1246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1247:       assertEquals(48, Node.DIRECTIVES);
1248:       assertEquals(37, Node.OPT_ARG_NAME);
1249:       assertEquals(49, Node.DIRECT_EVAL);
1250:       assertEquals(56, Node.CHANGE_TIME);
1251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1252:       assertEquals(36, Node.QUOTED_PROP);
1253:       assertEquals(39, Node.EMPTY_BLOCK);
1254:       assertEquals(29, Node.JSDOC_INFO_PROP);
1255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1256:       assertEquals(52, Node.LENGTH);
1257:       assertEquals(8, Node.FLAG_NO_THROWS);
1258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1259:       assertEquals(53, Node.INPUT_ID);
1260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1261:       assertEquals(47, Node.IS_DISPATCHER);
1262:       assertEquals(2, Node.POST_FLAG);
1263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1264:       assertEquals(12, Node.COLUMN_BITS);
1265:       assertEquals(46, Node.IS_NAMESPACE);
1266:       assertEquals(1, Node.DECR_FLAG);
1267:       assertEquals(32, Node.INCRDECR_PROP);
1268:       assertEquals(43, Node.IS_CONSTANT_NAME);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(54, Node.SLASH_V);
1271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1272:       assertEquals(50, Node.FREE_CALL);
1273:       assertEquals(40, Node.ORIGINALNAME_PROP);
1274:       assertEquals(57, Node.REFLECTED_OBJECT);
1275:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1276:       assertEquals(50, Node.FREE_CALL);
1277:       assertEquals(52, Node.LENGTH);
1278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1279:       assertEquals(54, Node.SLASH_V);
1280:       assertEquals(49, Node.DIRECT_EVAL);
1281:       assertEquals(48, Node.DIRECTIVES);
1282:       assertEquals(55, Node.INFERRED_FUNCTION);
1283:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1284:       assertEquals(30, Node.VAR_ARGS_NAME);
1285:       assertEquals(8, Node.FLAG_NO_THROWS);
1286:       assertEquals(2, Node.POST_FLAG);
1287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertEquals(47, Node.IS_DISPATCHER);
1291:       assertEquals(57, Node.LAST_PROP);
1292:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1293:       assertEquals(29, Node.JSDOC_INFO_PROP);
1294:       assertEquals(53, Node.INPUT_ID);
1295:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1296:       assertEquals(43, Node.IS_CONSTANT_NAME);
1297:       assertEquals(56, Node.CHANGE_TIME);
1298:       assertEquals(36, Node.QUOTED_PROP);
1299:       assertEquals(37, Node.OPT_ARG_NAME);
1300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1301:       assertEquals(12, Node.COLUMN_BITS);
1302:       assertEquals(4095, Node.COLUMN_MASK);
1303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1304:       assertEquals(46, Node.IS_NAMESPACE);
1305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1307:       assertEquals(1, Node.DECR_FLAG);
1308:       assertEquals(32, Node.INCRDECR_PROP);
1309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1311:       assertEquals(53, Node.INPUT_ID);
1312:       assertEquals(29, Node.JSDOC_INFO_PROP);
1313:       assertEquals(36, Node.QUOTED_PROP);
1314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1315:       assertEquals(43, Node.IS_CONSTANT_NAME);
1316:       assertEquals(56, Node.CHANGE_TIME);
1317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1318:       assertEquals(48, Node.DIRECTIVES);
1319:       assertEquals(32, Node.INCRDECR_PROP);
1320:       assertEquals(37, Node.OPT_ARG_NAME);
1321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1322:       assertEquals(4095, Node.COLUMN_MASK);
1323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1324:       assertEquals(1, Node.DECR_FLAG);
1325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1326:       assertEquals(12, Node.COLUMN_BITS);
1327:       assertEquals(52, Node.LENGTH);
1328:       assertEquals(40, Node.ORIGINALNAME_PROP);
1329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1330:       assertEquals(49, Node.DIRECT_EVAL);
1331:       assertEquals(50, Node.FREE_CALL);
1332:       assertEquals(57, Node.REFLECTED_OBJECT);
1333:       assertEquals(46, Node.IS_NAMESPACE);
1334:       assertEquals(54, Node.SLASH_V);
1335:       assertEquals(8, Node.FLAG_NO_THROWS);
1336:       assertEquals(39, Node.EMPTY_BLOCK);
1337:       assertEquals(55, Node.INFERRED_FUNCTION);
1338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1340:       assertEquals(57, Node.LAST_PROP);
1341:       assertEquals(47, Node.IS_DISPATCHER);
1342:       assertEquals(2, Node.POST_FLAG);
1343:       assertEquals(30, Node.VAR_ARGS_NAME);
1344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1345:       
1346:       boolean boolean3 = node0.isScript();
1347:       assertFalse(node0.equals((Object)node2));
1348:       assertFalse(node0.equals((Object)node1));
1349:       assertTrue(boolean3 == boolean1);
1350:       assertTrue(boolean3 == boolean2);
1351:       assertFalse(boolean3 == boolean0);
1352:       assertFalse(node0.isWith());
1353:       assertFalse(node0.isNot());
1354:       assertFalse(node0.isAnd());
1355:       assertFalse(node0.isGetProp());
1356:       assertFalse(node0.hasOneChild());
1357:       assertFalse(node0.isObjectLit());
1358:       assertFalse(node0.isScript());
1359:       assertFalse(node0.isLabelName());
1360:       assertEquals((-1), node0.getSourcePosition());
1361:       assertFalse(node0.isThrow());
1362:       assertFalse(node0.isAssignAdd());
1363:       assertFalse(node0.isLabel());
1364:       assertFalse(node0.isCast());
1365:       assertFalse(node0.isFalse());
1366:       assertFalse(node0.isContinue());
1367:       assertFalse(node0.isCase());
1368:       assertFalse(node0.isSwitch());
1369:       assertTrue(node0.isString());
1370:       assertEquals((-1), node0.getCharno());
1371:       assertFalse(node0.isInc());
1372:       assertFalse(node0.isNumber());
1373:       assertFalse(node0.isIn());
1374:       assertFalse(node0.isFor());
1375:       assertFalse(node0.isThis());
1376:       assertFalse(node0.isNE());
1377:       assertFalse(node0.isIf());
1378:       assertEquals((-1), node0.getLineno());
1379:       assertFalse(node0.isHook());
1380:       assertFalse(node0.isBlock());
1381:       assertFalse(node0.hasMoreThanOneChild());
1382:       assertFalse(node0.isCatch());
1383:       assertFalse(node0.isRegExp());
1384:       assertFalse(node0.isInstanceOf());
1385:       assertEquals(40, node0.getType());
1386:       assertFalse(node0.isTrue());
1387:       assertFalse(node0.isVoid());
1388:       assertFalse(node0.isDefaultCase());
1389:       assertFalse(node0.isTry());
1390:       assertFalse(node0.isDebugger());
1391:       assertFalse(node0.isSetterDef());
1392:       assertFalse(node0.isGetterDef());
1393:       assertFalse(node0.isEmpty());
1394:       assertFalse(node0.isParamList());
1395:       assertFalse(node0.isVar());
1396:       assertFalse(node0.isStringKey());
1397:       assertEquals(0, node0.getChildCount());
1398:       assertFalse(node0.isArrayLit());
1399:       assertFalse(node0.isFunction());
1400:       assertFalse(node0.isWhile());
1401:       assertFalse(node0.isDo());
1402:       assertFalse(node0.isAdd());
1403:       assertFalse(node0.isOr());
1404:       assertFalse(node0.isNew());
1405:       assertFalse(node0.isDelProp());
1406:       assertFalse(node0.isName());
1407:       assertFalse(node0.isAssign());
1408:       assertFalse(node0.isDec());
1409:       assertFalse(node0.isGetElem());
1410:       assertFalse(node0.hasChildren());
1411:       assertFalse(node0.isBreak());
1412:       assertFalse(node0.isNull());
1413:       assertFalse(node0.isReturn());
1414:       assertFalse(node0.isComma());
1415:       assertFalse(node0.isTypeOf());
1416:       assertFalse(node0.isExprResult());
1417:       assertFalse(node0.isCall());
1418:       assertFalse(boolean3);
1419:       assertEquals(57, Node.REFLECTED_OBJECT);
1420:       assertEquals(40, Node.ORIGINALNAME_PROP);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1425:       assertEquals(30, Node.VAR_ARGS_NAME);
1426:       assertEquals(4095, Node.COLUMN_MASK);
1427:       assertEquals(55, Node.INFERRED_FUNCTION);
1428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1429:       assertEquals(48, Node.DIRECTIVES);
1430:       assertEquals(37, Node.OPT_ARG_NAME);
1431:       assertEquals(49, Node.DIRECT_EVAL);
1432:       assertEquals(56, Node.CHANGE_TIME);
1433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1434:       assertEquals(36, Node.QUOTED_PROP);
1435:       assertEquals(39, Node.EMPTY_BLOCK);
1436:       assertEquals(29, Node.JSDOC_INFO_PROP);
1437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1438:       assertEquals(52, Node.LENGTH);
1439:       assertEquals(8, Node.FLAG_NO_THROWS);
1440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1441:       assertEquals(53, Node.INPUT_ID);
1442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1443:       assertEquals(47, Node.IS_DISPATCHER);
1444:       assertEquals(2, Node.POST_FLAG);
1445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1446:       assertEquals(12, Node.COLUMN_BITS);
1447:       assertEquals(46, Node.IS_NAMESPACE);
1448:       assertEquals(1, Node.DECR_FLAG);
1449:       assertEquals(32, Node.INCRDECR_PROP);
1450:       assertEquals(43, Node.IS_CONSTANT_NAME);
1451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1452:       assertEquals(54, Node.SLASH_V);
1453:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1454:       assertEquals(50, Node.FREE_CALL);
1455:       
1456:       Iterable<Node> iterable1 = node0.siblings();
1457:       assertFalse(node0.equals((Object)node2));
1458:       assertFalse(node0.equals((Object)node1));
1459:       assertFalse(iterable1.equals((Object)iterable0));
1460:       assertFalse(node0.isWith());
1461:       assertFalse(node0.isNot());
1462:       assertFalse(node0.isAnd());
1463:       assertFalse(node0.isGetProp());
1464:       assertFalse(node0.hasOneChild());
1465:       assertFalse(node0.isObjectLit());
1466:       assertFalse(node0.isScript());
1467:       assertFalse(node0.isLabelName());
1468:       assertEquals((-1), node0.getSourcePosition());
1469:       assertFalse(node0.isThrow());
1470:       assertFalse(node0.isAssignAdd());
1471:       assertFalse(node0.isLabel());
1472:       assertFalse(node0.isCast());
1473:       assertFalse(node0.isFalse());
1474:       assertFalse(node0.isContinue());
1475:       assertFalse(node0.isCase());
1476:       assertFalse(node0.isSwitch());
1477:       assertTrue(node0.isString());
1478:       assertEquals((-1), node0.getCharno());
1479:       assertFalse(node0.isInc());
1480:       assertFalse(node0.isNumber());
1481:       assertFalse(node0.isIn());
1482:       assertFalse(node0.isFor());
1483:       assertFalse(node0.isThis());
1484:       assertFalse(node0.isNE());
1485:       assertFalse(node0.isIf());
1486:       assertEquals((-1), node0.getLineno());
1487:       assertFalse(node0.isHook());
1488:       assertFalse(node0.isBlock());
1489:       assertFalse(node0.hasMoreThanOneChild());
1490:       assertFalse(node0.isCatch());
1491:       assertFalse(node0.isRegExp());
1492:       assertFalse(node0.isInstanceOf());
1493:       assertEquals(40, node0.getType());
1494:       assertFalse(node0.isTrue());
1495:       assertFalse(node0.isVoid());
1496:       assertFalse(node0.isDefaultCase());
1497:       assertFalse(node0.isTry());
1498:       assertFalse(node0.isDebugger());
1499:       assertFalse(node0.isSetterDef());
1500:       assertFalse(node0.isGetterDef());
1501:       assertFalse(node0.isEmpty());
1502:       assertFalse(node0.isParamList());
1503:       assertFalse(node0.isVar());
1504:       assertFalse(node0.isStringKey());
1505:       assertEquals(0, node0.getChildCount());
1506:       assertFalse(node0.isArrayLit());
1507:       assertFalse(node0.isFunction());
1508:       assertFalse(node0.isWhile());
1509:       assertFalse(node0.isDo());
1510:       assertFalse(node0.isAdd());
1511:       assertFalse(node0.isOr());
1512:       assertFalse(node0.isNew());
1513:       assertFalse(node0.isDelProp());
1514:       assertFalse(node0.isName());
1515:       assertFalse(node0.isAssign());
1516:       assertFalse(node0.isDec());
1517:       assertFalse(node0.isGetElem());
1518:       assertFalse(node0.hasChildren());
1519:       assertFalse(node0.isBreak());
1520:       assertFalse(node0.isNull());
1521:       assertFalse(node0.isReturn());
1522:       assertFalse(node0.isComma());
1523:       assertFalse(node0.isTypeOf());
1524:       assertFalse(node0.isExprResult());
1525:       assertFalse(node0.isCall());
1526:       assertNotNull(iterable1);
1527:       assertEquals(57, Node.REFLECTED_OBJECT);
1528:       assertEquals(40, Node.ORIGINALNAME_PROP);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1533:       assertEquals(30, Node.VAR_ARGS_NAME);
1534:       assertEquals(4095, Node.COLUMN_MASK);
1535:       assertEquals(55, Node.INFERRED_FUNCTION);
1536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1537:       assertEquals(48, Node.DIRECTIVES);
1538:       assertEquals(37, Node.OPT_ARG_NAME);
1539:       assertEquals(49, Node.DIRECT_EVAL);
1540:       assertEquals(56, Node.CHANGE_TIME);
1541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1542:       assertEquals(36, Node.QUOTED_PROP);
1543:       assertEquals(39, Node.EMPTY_BLOCK);
1544:       assertEquals(29, Node.JSDOC_INFO_PROP);
1545:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1546:       assertEquals(52, Node.LENGTH);
1547:       assertEquals(8, Node.FLAG_NO_THROWS);
1548:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1549:       assertEquals(53, Node.INPUT_ID);
1550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1551:       assertEquals(47, Node.IS_DISPATCHER);
1552:       assertEquals(2, Node.POST_FLAG);
1553:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1554:       assertEquals(12, Node.COLUMN_BITS);
1555:       assertEquals(46, Node.IS_NAMESPACE);
1556:       assertEquals(1, Node.DECR_FLAG);
1557:       assertEquals(32, Node.INCRDECR_PROP);
1558:       assertEquals(43, Node.IS_CONSTANT_NAME);
1559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1560:       assertEquals(54, Node.SLASH_V);
1561:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1562:       assertEquals(50, Node.FREE_CALL);
1563:       
1564:       String string0 = node2.getQualifiedName();
1565:       assertFalse(node0.equals((Object)node2));
1566:       assertFalse(node0.equals((Object)node1));
1567:       assertFalse(node1.equals((Object)node2));
1568:       assertFalse(node1.equals((Object)node0));
1569:       assertFalse(node2.equals((Object)node0));
1570:       assertFalse(node2.equals((Object)node1));
1571:       assertFalse(node0.isWith());
1572:       assertFalse(node0.isNot());
1573:       assertFalse(node0.isAnd());
1574:       assertFalse(node0.isGetProp());
1575:       assertFalse(node0.hasOneChild());
1576:       assertFalse(node0.isObjectLit());
1577:       assertFalse(node0.isScript());
1578:       assertFalse(node0.isLabelName());
1579:       assertEquals((-1), node0.getSourcePosition());
1580:       assertFalse(node0.isThrow());
1581:       assertFalse(node0.isAssignAdd());
1582:       assertFalse(node0.isLabel());
1583:       assertFalse(node0.isCast());
1584:       assertFalse(node0.isFalse());
1585:       assertFalse(node0.isContinue());
1586:       assertFalse(node0.isCase());
1587:       assertFalse(node0.isSwitch());
1588:       assertTrue(node0.isString());
1589:       assertEquals((-1), node0.getCharno());
1590:       assertFalse(node0.isInc());
1591:       assertFalse(node0.isNumber());
1592:       assertFalse(node0.isIn());
1593:       assertFalse(node0.isFor());
1594:       assertFalse(node0.isThis());
1595:       assertFalse(node0.isNE());
1596:       assertFalse(node0.isIf());
1597:       assertEquals((-1), node0.getLineno());
1598:       assertFalse(node0.isHook());
1599:       assertFalse(node0.isBlock());
1600:       assertFalse(node0.hasMoreThanOneChild());
1601:       assertFalse(node0.isCatch());
1602:       assertFalse(node0.isRegExp());
1603:       assertFalse(node0.isInstanceOf());
1604:       assertEquals(40, node0.getType());
1605:       assertFalse(node0.isTrue());
1606:       assertFalse(node0.isVoid());
1607:       assertFalse(node0.isDefaultCase());
1608:       assertFalse(node0.isTry());
1609:       assertFalse(node0.isDebugger());
1610:       assertFalse(node0.isSetterDef());
1611:       assertFalse(node0.isGetterDef());
1612:       assertFalse(node0.isEmpty());
1613:       assertFalse(node0.isParamList());
1614:       assertFalse(node0.isVar());
1615:       assertFalse(node0.isStringKey());
1616:       assertEquals(0, node0.getChildCount());
1617:       assertFalse(node0.isArrayLit());
1618:       assertFalse(node0.isFunction());
1619:       assertFalse(node0.isWhile());
1620:       assertFalse(node0.isDo());
1621:       assertFalse(node0.isAdd());
1622:       assertFalse(node0.isOr());
1623:       assertFalse(node0.isNew());
1624:       assertFalse(node0.isDelProp());
1625:       assertFalse(node0.isName());
1626:       assertFalse(node0.isAssign());
1627:       assertFalse(node0.isDec());
1628:       assertFalse(node0.isGetElem());
1629:       assertFalse(node0.hasChildren());
1630:       assertFalse(node0.isBreak());
1631:       assertFalse(node0.isNull());
1632:       assertFalse(node0.isReturn());
1633:       assertFalse(node0.isComma());
1634:       assertFalse(node0.isTypeOf());
1635:       assertFalse(node0.isExprResult());
1636:       assertFalse(node0.isCall());
1637:       assertFalse(node1.isDefaultCase());
1638:       assertFalse(node1.isRegExp());
1639:       assertFalse(node1.isFunction());
1640:       assertFalse(node1.isCatch());
1641:       assertEquals(0, node1.getChildCount());
1642:       assertFalse(node1.isTry());
1643:       assertFalse(node1.isFor());
1644:       assertFalse(node1.isGetterDef());
1645:       assertFalse(node1.isArrayLit());
1646:       assertFalse(node1.isDebugger());
1647:       assertFalse(node1.isParamList());
1648:       assertFalse(node1.isStringKey());
1649:       assertFalse(node1.isDo());
1650:       assertFalse(node1.isAdd());
1651:       assertFalse(node1.isString());
1652:       assertFalse(node1.isReturn());
1653:       assertFalse(node1.isLabel());
1654:       assertTrue(node1.isNumber());
1655:       assertFalse(node1.isNew());
1656:       assertFalse(node1.isVar());
1657:       assertFalse(node1.isAssignAdd());
1658:       assertFalse(node1.isWhile());
1659:       assertFalse(node1.isDelProp());
1660:       assertFalse(node1.hasChildren());
1661:       assertFalse(node1.isBreak());
1662:       assertFalse(node1.isTypeOf());
1663:       assertFalse(node1.isAssign());
1664:       assertFalse(node1.isComma());
1665:       assertFalse(node1.isDec());
1666:       assertFalse(node1.isCall());
1667:       assertFalse(node1.isGetElem());
1668:       assertFalse(node1.isEmpty());
1669:       assertFalse(node1.isOr());
1670:       assertFalse(node1.isVoid());
1671:       assertFalse(node1.isTrue());
1672:       assertFalse(node1.isName());
1673:       assertFalse(node1.isNull());
1674:       assertFalse(node1.isWith());
1675:       assertFalse(node1.isNot());
1676:       assertFalse(node1.isObjectLit());
1677:       assertFalse(node1.isExprResult());
1678:       assertFalse(node1.isScript());
1679:       assertFalse(node1.isInstanceOf());
1680:       assertFalse(node1.hasOneChild());
1681:       assertFalse(node1.isThis());
1682:       assertFalse(node1.isLabelName());
1683:       assertEquals((-1), node1.getSourcePosition());
1684:       assertFalse(node1.isGetProp());
1685:       assertFalse(node1.isFalse());
1686:       assertFalse(node1.isCast());
1687:       assertFalse(node1.isAnd());
1688:       assertEquals((-1), node1.getCharno());
1689:       assertFalse(node1.isSwitch());
1690:       assertEquals(39, node1.getType());
1691:       assertFalse(node1.isCase());
1692:       assertFalse(node1.isContinue());
1693:       assertFalse(node1.isInc());
1694:       assertFalse(node1.hasMoreThanOneChild());
1695:       assertFalse(node1.isHook());
1696:       assertFalse(node1.isThrow());
1697:       assertFalse(node1.isBlock());
1698:       assertFalse(node1.isIf());
1699:       assertFalse(node1.isSetterDef());
1700:       assertFalse(node1.isIn());
1701:       assertEquals((-1), node1.getLineno());
1702:       assertFalse(node1.isNE());
1703:       assertFalse(node2.isDo());
1704:       assertFalse(node2.isWhile());
1705:       assertFalse(node2.isContinue());
1706:       assertEquals((-1), node2.getLineno());
1707:       assertFalse(node2.isBlock());
1708:       assertFalse(node2.isNew());
1709:       assertFalse(node2.isAssignAdd());
1710:       assertFalse(node2.isTypeOf());
1711:       assertFalse(node2.isDec());
1712:       assertFalse(node2.isVar());
1713:       assertFalse(node2.isReturn());
1714:       assertFalse(node2.isLabel());
1715:       assertFalse(node2.isName());
1716:       assertFalse(node2.isGetElem());
1717:       assertFalse(node2.isAssign());
1718:       assertFalse(node2.isSetterDef());
1719:       assertFalse(node2.isCall());
1720:       assertFalse(node2.isAdd());
1721:       assertFalse(node2.isOr());
1722:       assertFalse(node2.isNull());
1723:       assertFalse(node2.isNot());
1724:       assertFalse(node2.isObjectLit());
1725:       assertFalse(node2.isAnd());
1726:       assertFalse(node2.isExprResult());
1727:       assertFalse(node2.isFunction());
1728:       assertFalse(node2.isComma());
1729:       assertEquals(2, node2.getChildCount());
1730:       assertFalse(node2.isFalse());
1731:       assertEquals(28, node2.getType());
1732:       assertFalse(node2.isCast());
1733:       assertFalse(node2.isGetProp());
1734:       assertEquals((-1), node2.getSourcePosition());
1735:       assertFalse(node2.isDebugger());
1736:       assertFalse(node2.isCase());
1737:       assertFalse(node2.isString());
1738:       assertTrue(node2.hasMoreThanOneChild());
1739:       assertFalse(node2.isInc());
1740:       assertTrue(node2.hasChildren());
1741:       assertFalse(node2.isHook());
1742:       assertFalse(node2.isThrow());
1743:       assertFalse(node2.isEmpty());
1744:       assertFalse(node2.isDelProp());
1745:       assertFalse(node2.isIf());
1746:       assertFalse(node2.isBreak());
1747:       assertFalse(node2.isVoid());
1748:       assertFalse(node2.isIn());
1749:       assertFalse(node2.isNE());
1750:       assertFalse(node2.isTrue());
1751:       assertFalse(node2.isWith());
1752:       assertFalse(node2.isDefaultCase());
1753:       assertFalse(node2.isInstanceOf());
1754:       assertFalse(node2.isScript());
1755:       assertFalse(node2.isCatch());
1756:       assertFalse(node2.isTry());
1757:       assertFalse(node2.isRegExp());
1758:       assertFalse(node2.isThis());
1759:       assertFalse(node2.isStringKey());
1760:       assertFalse(node2.isLabelName());
1761:       assertFalse(node2.isFor());
1762:       assertFalse(node2.hasOneChild());
1763:       assertFalse(node2.isArrayLit());
1764:       assertFalse(node2.isParamList());
1765:       assertFalse(node2.isSwitch());
1766:       assertFalse(node2.isNumber());
1767:       assertFalse(node2.isGetterDef());
1768:       assertEquals((-1), node2.getCharno());
1769:       assertNull(string0);
1770:       assertEquals(57, Node.REFLECTED_OBJECT);
1771:       assertEquals(40, Node.ORIGINALNAME_PROP);
1772:       assertEquals(57, Node.LAST_PROP);
1773:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1774:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1775:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1776:       assertEquals(30, Node.VAR_ARGS_NAME);
1777:       assertEquals(4095, Node.COLUMN_MASK);
1778:       assertEquals(55, Node.INFERRED_FUNCTION);
1779:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1780:       assertEquals(48, Node.DIRECTIVES);
1781:       assertEquals(37, Node.OPT_ARG_NAME);
1782:       assertEquals(49, Node.DIRECT_EVAL);
1783:       assertEquals(56, Node.CHANGE_TIME);
1784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1785:       assertEquals(36, Node.QUOTED_PROP);
1786:       assertEquals(39, Node.EMPTY_BLOCK);
1787:       assertEquals(29, Node.JSDOC_INFO_PROP);
1788:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1789:       assertEquals(52, Node.LENGTH);
1790:       assertEquals(8, Node.FLAG_NO_THROWS);
1791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1792:       assertEquals(53, Node.INPUT_ID);
1793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1794:       assertEquals(47, Node.IS_DISPATCHER);
1795:       assertEquals(2, Node.POST_FLAG);
1796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1797:       assertEquals(12, Node.COLUMN_BITS);
1798:       assertEquals(46, Node.IS_NAMESPACE);
1799:       assertEquals(1, Node.DECR_FLAG);
1800:       assertEquals(32, Node.INCRDECR_PROP);
1801:       assertEquals(43, Node.IS_CONSTANT_NAME);
1802:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1803:       assertEquals(54, Node.SLASH_V);
1804:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1805:       assertEquals(50, Node.FREE_CALL);
1806:       assertEquals(40, Node.ORIGINALNAME_PROP);
1807:       assertEquals(57, Node.REFLECTED_OBJECT);
1808:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1809:       assertEquals(50, Node.FREE_CALL);
1810:       assertEquals(52, Node.LENGTH);
1811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1812:       assertEquals(54, Node.SLASH_V);
1813:       assertEquals(49, Node.DIRECT_EVAL);
1814:       assertEquals(48, Node.DIRECTIVES);
1815:       assertEquals(55, Node.INFERRED_FUNCTION);
1816:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1817:       assertEquals(30, Node.VAR_ARGS_NAME);
1818:       assertEquals(8, Node.FLAG_NO_THROWS);
1819:       assertEquals(2, Node.POST_FLAG);
1820:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1821:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1822:       assertEquals(39, Node.EMPTY_BLOCK);
1823:       assertEquals(47, Node.IS_DISPATCHER);
1824:       assertEquals(57, Node.LAST_PROP);
1825:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1826:       assertEquals(29, Node.JSDOC_INFO_PROP);
1827:       assertEquals(53, Node.INPUT_ID);
1828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1829:       assertEquals(43, Node.IS_CONSTANT_NAME);
1830:       assertEquals(56, Node.CHANGE_TIME);
1831:       assertEquals(36, Node.QUOTED_PROP);
1832:       assertEquals(37, Node.OPT_ARG_NAME);
1833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1834:       assertEquals(12, Node.COLUMN_BITS);
1835:       assertEquals(4095, Node.COLUMN_MASK);
1836:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1837:       assertEquals(46, Node.IS_NAMESPACE);
1838:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1839:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1840:       assertEquals(1, Node.DECR_FLAG);
1841:       assertEquals(32, Node.INCRDECR_PROP);
1842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(53, Node.INPUT_ID);
1845:       assertEquals(29, Node.JSDOC_INFO_PROP);
1846:       assertEquals(36, Node.QUOTED_PROP);
1847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1848:       assertEquals(43, Node.IS_CONSTANT_NAME);
1849:       assertEquals(56, Node.CHANGE_TIME);
1850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1851:       assertEquals(48, Node.DIRECTIVES);
1852:       assertEquals(32, Node.INCRDECR_PROP);
1853:       assertEquals(37, Node.OPT_ARG_NAME);
1854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1855:       assertEquals(4095, Node.COLUMN_MASK);
1856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1857:       assertEquals(1, Node.DECR_FLAG);
1858:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1859:       assertEquals(12, Node.COLUMN_BITS);
1860:       assertEquals(52, Node.LENGTH);
1861:       assertEquals(40, Node.ORIGINALNAME_PROP);
1862:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1863:       assertEquals(49, Node.DIRECT_EVAL);
1864:       assertEquals(50, Node.FREE_CALL);
1865:       assertEquals(57, Node.REFLECTED_OBJECT);
1866:       assertEquals(46, Node.IS_NAMESPACE);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(8, Node.FLAG_NO_THROWS);
1869:       assertEquals(39, Node.EMPTY_BLOCK);
1870:       assertEquals(55, Node.INFERRED_FUNCTION);
1871:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1873:       assertEquals(57, Node.LAST_PROP);
1874:       assertEquals(47, Node.IS_DISPATCHER);
1875:       assertEquals(2, Node.POST_FLAG);
1876:       assertEquals(30, Node.VAR_ARGS_NAME);
1877:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1878:       
1879:       boolean boolean4 = node1.isThrow();
1880:       assertFalse(node1.equals((Object)node2));
1881:       assertFalse(node1.equals((Object)node0));
1882:       assertTrue(boolean4 == boolean2);
1883:       assertFalse(boolean4 == boolean0);
1884:       assertTrue(boolean4 == boolean1);
1885:       assertTrue(boolean4 == boolean3);
1886:       assertFalse(node1.isDefaultCase());
1887:       assertFalse(node1.isRegExp());
1888:       assertFalse(node1.isFunction());
1889:       assertFalse(node1.isCatch());
1890:       assertEquals(0, node1.getChildCount());
1891:       assertFalse(node1.isTry());
1892:       assertFalse(node1.isFor());
1893:       assertFalse(node1.isGetterDef());
1894:       assertFalse(node1.isArrayLit());
1895:       assertFalse(node1.isDebugger());
1896:       assertFalse(node1.isParamList());
1897:       assertFalse(node1.isStringKey());
1898:       assertFalse(node1.isDo());
1899:       assertFalse(node1.isAdd());
1900:       assertFalse(node1.isString());
1901:       assertFalse(node1.isReturn());
1902:       assertFalse(node1.isLabel());
1903:       assertTrue(node1.isNumber());
1904:       assertFalse(node1.isNew());
1905:       assertFalse(node1.isVar());
1906:       assertFalse(node1.isAssignAdd());
1907:       assertFalse(node1.isWhile());
1908:       assertFalse(node1.isDelProp());
1909:       assertFalse(node1.hasChildren());
1910:       assertFalse(node1.isBreak());
1911:       assertFalse(node1.isTypeOf());
1912:       assertFalse(node1.isAssign());
1913:       assertFalse(node1.isComma());
1914:       assertFalse(node1.isDec());
1915:       assertFalse(node1.isCall());
1916:       assertFalse(node1.isGetElem());
1917:       assertFalse(node1.isEmpty());
1918:       assertFalse(node1.isOr());
1919:       assertFalse(node1.isVoid());
1920:       assertFalse(node1.isTrue());
1921:       assertFalse(node1.isName());
1922:       assertFalse(node1.isNull());
1923:       assertFalse(node1.isWith());
1924:       assertFalse(node1.isNot());
1925:       assertFalse(node1.isObjectLit());
1926:       assertFalse(node1.isExprResult());
1927:       assertFalse(node1.isScript());
1928:       assertFalse(node1.isInstanceOf());
1929:       assertFalse(node1.hasOneChild());
1930:       assertFalse(node1.isThis());
1931:       assertFalse(node1.isLabelName());
1932:       assertEquals((-1), node1.getSourcePosition());
1933:       assertFalse(node1.isGetProp());
1934:       assertFalse(node1.isFalse());
1935:       assertFalse(node1.isCast());
1936:       assertFalse(node1.isAnd());
1937:       assertEquals((-1), node1.getCharno());
1938:       assertFalse(node1.isSwitch());
1939:       assertEquals(39, node1.getType());
1940:       assertFalse(node1.isCase());
1941:       assertFalse(node1.isContinue());
1942:       assertFalse(node1.isInc());
1943:       assertFalse(node1.hasMoreThanOneChild());
1944:       assertFalse(node1.isHook());
1945:       assertFalse(node1.isThrow());
1946:       assertFalse(node1.isBlock());
1947:       assertFalse(node1.isIf());
1948:       assertFalse(node1.isSetterDef());
1949:       assertFalse(node1.isIn());
1950:       assertEquals((-1), node1.getLineno());
1951:       assertFalse(node1.isNE());
1952:       assertFalse(boolean4);
1953:       assertEquals(40, Node.ORIGINALNAME_PROP);
1954:       assertEquals(57, Node.REFLECTED_OBJECT);
1955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1956:       assertEquals(50, Node.FREE_CALL);
1957:       assertEquals(52, Node.LENGTH);
1958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1959:       assertEquals(54, Node.SLASH_V);
1960:       assertEquals(49, Node.DIRECT_EVAL);
1961:       assertEquals(48, Node.DIRECTIVES);
1962:       assertEquals(55, Node.INFERRED_FUNCTION);
1963:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1964:       assertEquals(30, Node.VAR_ARGS_NAME);
1965:       assertEquals(8, Node.FLAG_NO_THROWS);
1966:       assertEquals(2, Node.POST_FLAG);
1967:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1969:       assertEquals(39, Node.EMPTY_BLOCK);
1970:       assertEquals(47, Node.IS_DISPATCHER);
1971:       assertEquals(57, Node.LAST_PROP);
1972:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1973:       assertEquals(29, Node.JSDOC_INFO_PROP);
1974:       assertEquals(53, Node.INPUT_ID);
1975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1976:       assertEquals(43, Node.IS_CONSTANT_NAME);
1977:       assertEquals(56, Node.CHANGE_TIME);
1978:       assertEquals(36, Node.QUOTED_PROP);
1979:       assertEquals(37, Node.OPT_ARG_NAME);
1980:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1981:       assertEquals(12, Node.COLUMN_BITS);
1982:       assertEquals(4095, Node.COLUMN_MASK);
1983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1984:       assertEquals(46, Node.IS_NAMESPACE);
1985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1987:       assertEquals(1, Node.DECR_FLAG);
1988:       assertEquals(32, Node.INCRDECR_PROP);
1989:       
1990:       // Undeclared exception!
1991:       try { 
1992:         node0.replaceChild(node2, node2);
1993:         fail("Expecting exception: NullPointerException");
1994:       
1995:       } catch(NullPointerException e) {
1996:          //
1997:          // no message in exception (getMessage() returned null)
1998:          //
1999:          verifyException("com.google.javascript.rhino.Node", e);
2000:       }
2001:   }
2002: }
RegularFileObject[/tmp/EvoSuite_328_1628158725349/com/google/javascript/rhino/Node_328_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:18:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_328_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_328_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.LinkedHashMultimap",
96:       "com.google.javascript.rhino.Node",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.javascript.rhino.SourcePosition",
99:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.javascript.rhino.JSDocInfo$1",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_328_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.JSDocInfo$Visibility",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
360:     );
361:   }
362: }

[MASTER] 10:18:45.799 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(iterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isEquivalentTo(node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertTrue(boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(node_AncestorIterable0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Spliterator<Node> spliterator0 = node_AncestorIterable0.spliterator();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(spliterator0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(iterator0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean1 = node0.isVarArgs();
assertFalse(boolean1 == boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Node node1 = Node.newNumber((double) 4);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertNotNull(node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isExpose());
assertNotNull(jSDocInfo0);

boolean boolean2 = node1.isTypeOf();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(boolean2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Node node2 = new Node(28, node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertEquals(28, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNotNull(node2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean3 = node0.isScript();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(boolean3);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Iterable<Node> iterable1 = node0.siblings();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertNotNull(iterable1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

String string0 = node2.getQualifiedName();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertEquals(28, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNull(string0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean4 = node1.isThrow();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(boolean4);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

node0.replaceChild(node2, node2);

[MASTER] 10:18:51.073 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_367_1628158731054/com/google/javascript/rhino/Node_367_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_367_1628158731054/com/google/javascript/rhino/Node_367_tmp__ESTest_scaffolding.java]]
[MASTER] 10:18:51.073 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:51.073 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:51.074 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:18:51.074 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_367_1628158731054/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:18:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_367_tmp__ESTest extends Node_367_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
21:       assertFalse(node0.isDefaultCase());
22:       assertFalse(node0.isRegExp());
23:       assertEquals(40, node0.getType());
24:       assertFalse(node0.isFunction());
25:       assertFalse(node0.isTrue());
26:       assertFalse(node0.isDebugger());
27:       assertEquals(0, node0.getChildCount());
28:       assertFalse(node0.isCatch());
29:       assertFalse(node0.isVoid());
30:       assertFalse(node0.isArrayLit());
31:       assertFalse(node0.isGetterDef());
32:       assertFalse(node0.isParamList());
33:       assertFalse(node0.isStringKey());
34:       assertFalse(node0.isFor());
35:       assertFalse(node0.isTry());
36:       assertTrue(node0.isString());
37:       assertFalse(node0.isCase());
38:       assertFalse(node0.isBlock());
39:       assertFalse(node0.hasMoreThanOneChild());
40:       assertFalse(node0.isContinue());
41:       assertEquals((-1), node0.getLineno());
42:       assertFalse(node0.isIf());
43:       assertFalse(node0.isNE());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.isFalse());
46:       assertFalse(node0.isIn());
47:       assertFalse(node0.isInc());
48:       assertFalse(node0.isSetterDef());
49:       assertFalse(node0.isScript());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isObjectLit());
52:       assertFalse(node0.isNot());
53:       assertFalse(node0.isInstanceOf());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isAnd());
56:       assertFalse(node0.isGetElem());
57:       assertFalse(node0.isExprResult());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isNumber());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isComma());
65:       assertFalse(node0.isReturn());
66:       assertFalse(node0.isAssign());
67:       assertEquals((-1), node0.getSourcePosition());
68:       assertFalse(node0.hasOneChild());
69:       assertFalse(node0.isHook());
70:       assertFalse(node0.isGetProp());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.isWhile());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isBreak());
77:       assertFalse(node0.isNull());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.isOr());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isAdd());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isDo());
86:       assertFalse(node0.isNew());
87:       assertNotNull(node0);
88:       assertEquals(50, Node.FREE_CALL);
89:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
90:       assertEquals(54, Node.SLASH_V);
91:       assertEquals(57, Node.REFLECTED_OBJECT);
92:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
97:       assertEquals(52, Node.LENGTH);
98:       assertEquals(15, Node.NO_SIDE_EFFECTS);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(30, Node.VAR_ARGS_NAME);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(2, Node.POST_FLAG);
103:       assertEquals(43, Node.IS_CONSTANT_NAME);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(56, Node.CHANGE_TIME);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(1, Node.DECR_FLAG);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(12, Node.COLUMN_BITS);
120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(48, Node.DIRECTIVES);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(node0.isDefaultCase());
127:       assertFalse(node0.isRegExp());
128:       assertEquals(40, node0.getType());
129:       assertFalse(node0.isFunction());
130:       assertFalse(node0.isTrue());
131:       assertFalse(node0.isDebugger());
132:       assertEquals(0, node0.getChildCount());
133:       assertFalse(node0.isCatch());
134:       assertFalse(node0.isVoid());
135:       assertFalse(node0.isArrayLit());
136:       assertFalse(node0.isGetterDef());
137:       assertFalse(node0.isParamList());
138:       assertFalse(node0.isStringKey());
139:       assertFalse(node0.isFor());
140:       assertFalse(node0.isTry());
141:       assertTrue(node0.isString());
142:       assertFalse(node0.isCase());
143:       assertFalse(node0.isBlock());
144:       assertFalse(node0.hasMoreThanOneChild());
145:       assertFalse(node0.isContinue());
146:       assertEquals((-1), node0.getLineno());
147:       assertFalse(node0.isIf());
148:       assertFalse(node0.isNE());
149:       assertFalse(node0.isThrow());
150:       assertFalse(node0.isFalse());
151:       assertFalse(node0.isIn());
152:       assertFalse(node0.isInc());
153:       assertFalse(node0.isSetterDef());
154:       assertFalse(node0.isScript());
155:       assertFalse(node0.isWith());
156:       assertFalse(node0.isObjectLit());
157:       assertFalse(node0.isNot());
158:       assertFalse(node0.isInstanceOf());
159:       assertFalse(node0.isCast());
160:       assertFalse(node0.isAnd());
161:       assertFalse(node0.isGetElem());
162:       assertFalse(node0.isExprResult());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isNumber());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isTypeOf());
168:       assertFalse(node0.isThis());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isReturn());
171:       assertFalse(node0.isAssign());
172:       assertEquals((-1), node0.getSourcePosition());
173:       assertFalse(node0.hasOneChild());
174:       assertFalse(node0.isHook());
175:       assertFalse(node0.isGetProp());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isWhile());
178:       assertEquals((-1), node0.getCharno());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isBreak());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isDelProp());
184:       assertFalse(node0.isOr());
185:       assertFalse(node0.isLabel());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isAdd());
189:       assertFalse(node0.isEmpty());
190:       assertFalse(node0.isDo());
191:       assertFalse(node0.isNew());
192:       assertNotNull(iterable0);
193:       assertEquals(50, Node.FREE_CALL);
194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(57, Node.REFLECTED_OBJECT);
197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(57, Node.LAST_PROP);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(30, Node.VAR_ARGS_NAME);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(43, Node.IS_CONSTANT_NAME);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(56, Node.CHANGE_TIME);
212:       assertEquals(47, Node.IS_DISPATCHER);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(1, Node.DECR_FLAG);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(48, Node.DIRECTIVES);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertFalse(iterable0.contains(node0));
230:       
231:       boolean boolean0 = node0.isAnd();
232:       assertFalse(node0.isDefaultCase());
233:       assertFalse(node0.isRegExp());
234:       assertEquals(40, node0.getType());
235:       assertFalse(node0.isFunction());
236:       assertFalse(node0.isTrue());
237:       assertFalse(node0.isDebugger());
238:       assertEquals(0, node0.getChildCount());
239:       assertFalse(node0.isCatch());
240:       assertFalse(node0.isVoid());
241:       assertFalse(node0.isArrayLit());
242:       assertFalse(node0.isGetterDef());
243:       assertFalse(node0.isParamList());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isFor());
246:       assertFalse(node0.isTry());
247:       assertTrue(node0.isString());
248:       assertFalse(node0.isCase());
249:       assertFalse(node0.isBlock());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertFalse(node0.isContinue());
252:       assertEquals((-1), node0.getLineno());
253:       assertFalse(node0.isIf());
254:       assertFalse(node0.isNE());
255:       assertFalse(node0.isThrow());
256:       assertFalse(node0.isFalse());
257:       assertFalse(node0.isIn());
258:       assertFalse(node0.isInc());
259:       assertFalse(node0.isSetterDef());
260:       assertFalse(node0.isScript());
261:       assertFalse(node0.isWith());
262:       assertFalse(node0.isObjectLit());
263:       assertFalse(node0.isNot());
264:       assertFalse(node0.isInstanceOf());
265:       assertFalse(node0.isCast());
266:       assertFalse(node0.isAnd());
267:       assertFalse(node0.isGetElem());
268:       assertFalse(node0.isExprResult());
269:       assertFalse(node0.isLabelName());
270:       assertFalse(node0.isNumber());
271:       assertFalse(node0.isDec());
272:       assertFalse(node0.hasChildren());
273:       assertFalse(node0.isTypeOf());
274:       assertFalse(node0.isThis());
275:       assertFalse(node0.isComma());
276:       assertFalse(node0.isReturn());
277:       assertFalse(node0.isAssign());
278:       assertEquals((-1), node0.getSourcePosition());
279:       assertFalse(node0.hasOneChild());
280:       assertFalse(node0.isHook());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isSwitch());
283:       assertFalse(node0.isWhile());
284:       assertEquals((-1), node0.getCharno());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isBreak());
288:       assertFalse(node0.isNull());
289:       assertFalse(node0.isDelProp());
290:       assertFalse(node0.isOr());
291:       assertFalse(node0.isLabel());
292:       assertFalse(node0.isVar());
293:       assertFalse(node0.isAssignAdd());
294:       assertFalse(node0.isAdd());
295:       assertFalse(node0.isEmpty());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isNew());
298:       assertFalse(boolean0);
299:       assertEquals(50, Node.FREE_CALL);
300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
301:       assertEquals(54, Node.SLASH_V);
302:       assertEquals(57, Node.REFLECTED_OBJECT);
303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
304:       assertEquals(8, Node.FLAG_NO_THROWS);
305:       assertEquals(39, Node.EMPTY_BLOCK);
306:       assertEquals(57, Node.LAST_PROP);
307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
308:       assertEquals(52, Node.LENGTH);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(2, Node.POST_FLAG);
314:       assertEquals(43, Node.IS_CONSTANT_NAME);
315:       assertEquals(40, Node.ORIGINALNAME_PROP);
316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(29, Node.JSDOC_INFO_PROP);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(4095, Node.COLUMN_MASK);
327:       assertEquals(1, Node.DECR_FLAG);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(12, Node.COLUMN_BITS);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(37, Node.OPT_ARG_NAME);
333:       assertEquals(48, Node.DIRECTIVES);
334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_367_1628158731054/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:18:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_367_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_367_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.LinkedHashMultimap",
96:       "com.google.javascript.rhino.Node",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.javascript.rhino.SourcePosition",
99:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.javascript.rhino.JSDocInfo$1",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_367_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.JSDocInfo$Visibility",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
360:     );
361:   }
362: }

[MASTER] 10:18:51.076 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotNull(node0);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotNull(iterable0);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isAnd();
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(boolean0);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);


[MASTER] 10:18:52.715 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_380_1628158732690/com/google/javascript/rhino/Node_380_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_380_1628158732690/com/google/javascript/rhino/Node_380_tmp__ESTest_scaffolding.java]]
[MASTER] 10:18:52.716 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:52.716 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:18:52.716 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 10:18:52.716 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_380_1628158732690/com/google/javascript/rhino/Node_380_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:18:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_380_tmp__ESTest extends Node_380_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isHook());
24:       assertFalse(node0.isFalse());
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isBreak());
27:       assertFalse(node0.isSwitch());
28:       assertFalse(node0.isObjectLit());
29:       assertFalse(node0.isAnd());
30:       assertFalse(node0.isCase());
31:       assertFalse(node0.isInstanceOf());
32:       assertFalse(node0.isNot());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.isGetProp());
35:       assertFalse(node0.isComma());
36:       assertFalse(node0.isScript());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.hasOneChild());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.isEmpty());
41:       assertFalse(node0.isGetElem());
42:       assertFalse(node0.isGetterDef());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isDec());
45:       assertFalse(node0.isAssign());
46:       assertFalse(node0.isNumber());
47:       assertFalse(node0.isTypeOf());
48:       assertFalse(node0.isVoid());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isTrue());
51:       assertFalse(node0.isDelProp());
52:       assertFalse(node0.isLabelName());
53:       assertEquals(0, node0.getChildCount());
54:       assertFalse(node0.isOr());
55:       assertFalse(node0.isNew());
56:       assertFalse(node0.isAdd());
57:       assertFalse(node0.isLabel());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isAssignAdd());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isVar());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isParamList());
65:       assertFalse(node0.isNull());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isCatch());
68:       assertFalse(node0.isRegExp());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isBlock());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isWhile());
73:       assertFalse(node0.isTry());
74:       assertTrue(node0.isString());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isFor());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isNE());
80:       assertFalse(node0.isIf());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isContinue());
83:       assertEquals(40, node0.getType());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isSetterDef());
88:       assertNotNull(node0);
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(2, Node.POST_FLAG);
91:       assertEquals(12, Node.COLUMN_BITS);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(15, Node.NO_SIDE_EFFECTS);
99:       assertEquals(32, Node.INCRDECR_PROP);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(30, Node.VAR_ARGS_NAME);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(43, Node.IS_CONSTANT_NAME);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
118:       assertEquals(57, Node.REFLECTED_OBJECT);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
122:       assertEquals(56, Node.CHANGE_TIME);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(48, Node.DIRECTIVES);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(node0.isThrow());
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isFalse());
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isBreak());
132:       assertFalse(node0.isSwitch());
133:       assertFalse(node0.isObjectLit());
134:       assertFalse(node0.isAnd());
135:       assertFalse(node0.isCase());
136:       assertFalse(node0.isInstanceOf());
137:       assertFalse(node0.isNot());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.isGetProp());
140:       assertFalse(node0.isComma());
141:       assertFalse(node0.isScript());
142:       assertFalse(node0.isThis());
143:       assertFalse(node0.hasOneChild());
144:       assertFalse(node0.isArrayLit());
145:       assertFalse(node0.isEmpty());
146:       assertFalse(node0.isGetElem());
147:       assertFalse(node0.isGetterDef());
148:       assertFalse(node0.hasChildren());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isAssign());
151:       assertFalse(node0.isNumber());
152:       assertFalse(node0.isTypeOf());
153:       assertFalse(node0.isVoid());
154:       assertFalse(node0.isExprResult());
155:       assertFalse(node0.isTrue());
156:       assertFalse(node0.isDelProp());
157:       assertFalse(node0.isLabelName());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isOr());
160:       assertFalse(node0.isNew());
161:       assertFalse(node0.isAdd());
162:       assertFalse(node0.isLabel());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isAssignAdd());
165:       assertFalse(node0.isDo());
166:       assertFalse(node0.isStringKey());
167:       assertFalse(node0.isVar());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isParamList());
170:       assertFalse(node0.isNull());
171:       assertFalse(node0.isName());
172:       assertFalse(node0.isCatch());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isBlock());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isTry());
179:       assertTrue(node0.isString());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.isFor());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isDebugger());
184:       assertFalse(node0.isNE());
185:       assertFalse(node0.isIf());
186:       assertEquals((-1), node0.getLineno());
187:       assertFalse(node0.isContinue());
188:       assertEquals(40, node0.getType());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isSetterDef());
193:       assertNotNull(iterable0);
194:       assertEquals(46, Node.IS_NAMESPACE);
195:       assertEquals(2, Node.POST_FLAG);
196:       assertEquals(12, Node.COLUMN_BITS);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(57, Node.LAST_PROP);
201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(1, Node.DECR_FLAG);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(43, Node.IS_CONSTANT_NAME);
210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(55, Node.INFERRED_FUNCTION);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(57, Node.REFLECTED_OBJECT);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(56, Node.CHANGE_TIME);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertEquals(48, Node.DIRECTIVES);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       boolean boolean0 = node0.isEquivalentTo(node0);
233:       assertFalse(node0.isThrow());
234:       assertFalse(node0.isHook());
235:       assertFalse(node0.isFalse());
236:       assertEquals((-1), node0.getCharno());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isSwitch());
239:       assertFalse(node0.isObjectLit());
240:       assertFalse(node0.isAnd());
241:       assertFalse(node0.isCase());
242:       assertFalse(node0.isInstanceOf());
243:       assertFalse(node0.isNot());
244:       assertFalse(node0.isWith());
245:       assertFalse(node0.isGetProp());
246:       assertFalse(node0.isComma());
247:       assertFalse(node0.isScript());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.hasOneChild());
250:       assertFalse(node0.isArrayLit());
251:       assertFalse(node0.isEmpty());
252:       assertFalse(node0.isGetElem());
253:       assertFalse(node0.isGetterDef());
254:       assertFalse(node0.hasChildren());
255:       assertFalse(node0.isDec());
256:       assertFalse(node0.isAssign());
257:       assertFalse(node0.isNumber());
258:       assertFalse(node0.isTypeOf());
259:       assertFalse(node0.isVoid());
260:       assertFalse(node0.isExprResult());
261:       assertFalse(node0.isTrue());
262:       assertFalse(node0.isDelProp());
263:       assertFalse(node0.isLabelName());
264:       assertEquals(0, node0.getChildCount());
265:       assertFalse(node0.isOr());
266:       assertFalse(node0.isNew());
267:       assertFalse(node0.isAdd());
268:       assertFalse(node0.isLabel());
269:       assertFalse(node0.isDefaultCase());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isDo());
272:       assertFalse(node0.isStringKey());
273:       assertFalse(node0.isVar());
274:       assertFalse(node0.isCall());
275:       assertFalse(node0.isParamList());
276:       assertFalse(node0.isNull());
277:       assertFalse(node0.isName());
278:       assertFalse(node0.isCatch());
279:       assertFalse(node0.isRegExp());
280:       assertFalse(node0.hasMoreThanOneChild());
281:       assertFalse(node0.isBlock());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isWhile());
284:       assertFalse(node0.isTry());
285:       assertTrue(node0.isString());
286:       assertFalse(node0.isCast());
287:       assertFalse(node0.isFor());
288:       assertEquals((-1), node0.getSourcePosition());
289:       assertFalse(node0.isDebugger());
290:       assertFalse(node0.isNE());
291:       assertFalse(node0.isIf());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isContinue());
294:       assertEquals(40, node0.getType());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isFunction());
297:       assertFalse(node0.isInc());
298:       assertFalse(node0.isSetterDef());
299:       assertTrue(boolean0);
300:       assertEquals(46, Node.IS_NAMESPACE);
301:       assertEquals(2, Node.POST_FLAG);
302:       assertEquals(12, Node.COLUMN_BITS);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(57, Node.LAST_PROP);
307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(32, Node.INCRDECR_PROP);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(43, Node.IS_CONSTANT_NAME);
316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
317:       assertEquals(4095, Node.COLUMN_MASK);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
320:       assertEquals(50, Node.FREE_CALL);
321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(49, Node.DIRECT_EVAL);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(56, Node.CHANGE_TIME);
334:       assertEquals(37, Node.OPT_ARG_NAME);
335:       assertEquals(48, Node.DIRECTIVES);
336:       
337:       Node node1 = Node.newString("n%%.I4+tqA<U}$et-", 1638, 1659);
338:       assertFalse(node1.equals((Object)node0));
339:       assertFalse(node1.isCatch());
340:       assertEquals(0, node1.getChildCount());
341:       assertEquals(40, node1.getType());
342:       assertFalse(node1.isTrue());
343:       assertFalse(node1.isVoid());
344:       assertFalse(node1.isParamList());
345:       assertFalse(node1.isRegExp());
346:       assertFalse(node1.isFunction());
347:       assertFalse(node1.isArrayLit());
348:       assertFalse(node1.isCall());
349:       assertFalse(node1.isStringKey());
350:       assertFalse(node1.isGetterDef());
351:       assertFalse(node1.isFor());
352:       assertFalse(node1.isBlock());
353:       assertFalse(node1.isDebugger());
354:       assertFalse(node1.isTry());
355:       assertTrue(node1.isString());
356:       assertFalse(node1.isDo());
357:       assertFalse(node1.isWhile());
358:       assertFalse(node1.isLabel());
359:       assertFalse(node1.isReturn());
360:       assertFalse(node1.isTypeOf());
361:       assertFalse(node1.isSwitch());
362:       assertFalse(node1.isDelProp());
363:       assertFalse(node1.isGetElem());
364:       assertFalse(node1.isName());
365:       assertFalse(node1.isNull());
366:       assertFalse(node1.isVar());
367:       assertFalse(node1.isNew());
368:       assertFalse(node1.isOr());
369:       assertFalse(node1.isAssignAdd());
370:       assertFalse(node1.isDefaultCase());
371:       assertFalse(node1.isAdd());
372:       assertFalse(node1.isEmpty());
373:       assertFalse(node1.isObjectLit());
374:       assertFalse(node1.isAnd());
375:       assertFalse(node1.isNot());
376:       assertFalse(node1.isWith());
377:       assertFalse(node1.isExprResult());
378:       assertFalse(node1.isComma());
379:       assertFalse(node1.isBreak());
380:       assertFalse(node1.isInstanceOf());
381:       assertFalse(node1.isLabelName());
382:       assertFalse(node1.isAssign());
383:       assertEquals(1638, node1.getLineno());
384:       assertFalse(node1.hasChildren());
385:       assertFalse(node1.isDec());
386:       assertFalse(node1.isThis());
387:       assertFalse(node1.isHook());
388:       assertFalse(node1.isGetProp());
389:       assertFalse(node1.isNumber());
390:       assertFalse(node1.hasOneChild());
391:       assertEquals(1659, node1.getCharno());
392:       assertFalse(node1.isScript());
393:       assertFalse(node1.isCase());
394:       assertFalse(node1.isContinue());
395:       assertFalse(node1.hasMoreThanOneChild());
396:       assertFalse(node1.isThrow());
397:       assertFalse(node1.isCast());
398:       assertEquals(6710907, node1.getSourcePosition());
399:       assertFalse(node1.isFalse());
400:       assertFalse(node1.isIf());
401:       assertFalse(node1.isNE());
402:       assertFalse(node1.isIn());
403:       assertFalse(node1.isInc());
404:       assertFalse(node1.isSetterDef());
405:       assertNotSame(node1, node0);
406:       assertNotNull(node1);
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
409:       assertEquals(57, Node.LAST_PROP);
410:       assertEquals(57, Node.REFLECTED_OBJECT);
411:       assertEquals(54, Node.SLASH_V);
412:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(1, Node.DECR_FLAG);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(8, Node.FLAG_NO_THROWS);
417:       assertEquals(39, Node.EMPTY_BLOCK);
418:       assertEquals(51, Node.STATIC_SOURCE_FILE);
419:       assertEquals(47, Node.IS_DISPATCHER);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(40, Node.ORIGINALNAME_PROP);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(32, Node.INCRDECR_PROP);
436:       assertEquals(48, Node.DIRECTIVES);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(56, Node.CHANGE_TIME);
439:       assertEquals(49, Node.DIRECT_EVAL);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(4095, Node.COLUMN_MASK);
442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
443:       
444:       // Undeclared exception!
445:       try { 
446:         node0.getExistingIntProp((-226));
447:         fail("Expecting exception: IllegalStateException");
448:       
449:       } catch(IllegalStateException e) {
450:          //
451:          // missing prop: -226
452:          //
453:          verifyException("com.google.javascript.rhino.Node", e);
454:       }
455:   }
456: }
RegularFileObject[/tmp/EvoSuite_380_1628158732690/com/google/javascript/rhino/Node_380_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:18:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_380_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_380_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.LinkedHashMultimap",
96:       "com.google.javascript.rhino.Node",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.javascript.rhino.SourcePosition",
99:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.javascript.rhino.JSDocInfo$1",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_380_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.Sets",
340:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.JSDocInfo$Visibility",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
360:     );
361:   }
362: }

[MASTER] 10:18:52.720 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("n%%.I4+tqA<U}$et-");
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertNotNull(node0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertNotNull(iterable0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isEquivalentTo(node0);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertTrue(boolean0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Node node1 = Node.newString("n%%.I4+tqA<U}$et-", 1638, 1659);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals(1638, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertEquals(1659, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals(6710907, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

node0.getExistingIntProp((-226));

[MASTER] 10:19:15.482 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:15.770 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:16.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:16.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:16.551 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:16.739 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:16.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:17.296 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:19:17.512 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/11
* Done!

* Computation finished
