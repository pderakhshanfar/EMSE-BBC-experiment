* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 9444
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 50137210
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:14:56.106 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:14:57.717 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:16:51.545 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 599 generations, 279875 statements, best individual has fitness: 2599.0
* Minimizing test suite
[MASTER] 10:26:27.780 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 821
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 637
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 478
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2377
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Generated 1169 tests with total length 12411
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:27:44.475 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6669% of time used, but only 86/1169 tests minimized), falling back to using all assertions
[MASTER] 10:28:04.560 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 10:28:18.317 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 10:28:24.632 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_128_1628159304381/com/google/javascript/rhino/Node_128_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_128_1628159304381/com/google/javascript/rhino/Node_128_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:24.632 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:24.632 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:24.635 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1100
[MASTER] 10:28:24.637 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_128_1628159304381/com/google/javascript/rhino/Node_128_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:24 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplatizedType;
16: import java.util.ArrayList;
17: import java.util.Collection;
18: import java.util.Iterator;
19: import java.util.List;
20: import java.util.ListIterator;
21: import org.evosuite.runtime.EvoRunner;
22: import org.evosuite.runtime.EvoRunnerParameters;
23: import org.evosuite.runtime.testdata.FileSystemHandling;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_128_tmp__ESTest extends Node_128_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
32:       assertNotNull(simpleErrorReporter0);
33:       
34:       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
35:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
36:       assertNotNull(simpleErrorReporter1);
37:       
38:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
39:       assertTrue(boolean0);
40:       
41:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
42:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
43:       assertNotNull(jSTypeRegistry0);
44:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
45:       
46:       ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
47:       assertNotNull(arrayList0);
48:       assertEquals(0, arrayList0.size());
49:       assertTrue(arrayList0.isEmpty());
50:       
51:       ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
52:       assertNotNull(listIterator0);
53:       assertEquals(0, arrayList0.size());
54:       assertTrue(arrayList0.isEmpty());
55:       assertFalse(listIterator0.hasNext());
56:       assertFalse(listIterator0.hasPrevious());
57:       
58:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
59:       assertNotNull(immutableList0);
60:       assertEquals(0, arrayList0.size());
61:       assertTrue(arrayList0.isEmpty());
62:       assertFalse(listIterator0.hasNext());
63:       assertFalse(listIterator0.hasPrevious());
64:       assertEquals(0, immutableList0.size());
65:       
66:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
67:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
68:       assertNotNull(node0);
69:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
70:       assertEquals(0, arrayList0.size());
71:       assertTrue(arrayList0.isEmpty());
72:       assertFalse(listIterator0.hasNext());
73:       assertFalse(listIterator0.hasPrevious());
74:       assertEquals(0, immutableList0.size());
75:       assertTrue(node0.isParamList());
76:       assertFalse(node0.isAnd());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isGetProp());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isGetElem());
87:       assertEquals(83, node0.getType());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.hasMoreThanOneChild());
91:       assertFalse(node0.isCase());
92:       assertFalse(node0.isAssignAdd());
93:       assertEquals((-1), node0.getLineno());
94:       assertFalse(node0.isDo());
95:       assertFalse(node0.isFor());
96:       assertFalse(node0.isBlock());
97:       assertFalse(node0.isLabel());
98:       assertFalse(node0.isArrayLit());
99:       assertFalse(node0.isHook());
100:       assertFalse(node0.hasOneChild());
101:       assertFalse(node0.isStringKey());
102:       assertFalse(node0.isTry());
103:       assertFalse(node0.isLabelName());
104:       assertFalse(node0.isScript());
105:       assertFalse(node0.isSwitch());
106:       assertFalse(node0.isNumber());
107:       assertEquals((-1), node0.getCharno());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isCatch());
110:       assertFalse(node0.isRegExp());
111:       assertFalse(node0.isDefaultCase());
112:       assertFalse(node0.isFunction());
113:       assertEquals(0, node0.getChildCount());
114:       assertFalse(node0.isCall());
115:       assertFalse(node0.isVar());
116:       assertFalse(node0.isName());
117:       assertFalse(node0.isNew());
118:       assertFalse(node0.isAdd());
119:       assertFalse(node0.isDelProp());
120:       assertFalse(node0.isVoid());
121:       assertFalse(node0.isNull());
122:       assertFalse(node0.isIf());
123:       assertFalse(node0.isSetterDef());
124:       assertFalse(node0.isTrue());
125:       assertFalse(node0.isNE());
126:       assertFalse(node0.isEmpty());
127:       assertFalse(node0.isIn());
128:       assertFalse(node0.isReturn());
129:       assertFalse(node0.isContinue());
130:       assertFalse(node0.isTypeOf());
131:       assertFalse(node0.hasChildren());
132:       assertFalse(node0.isWhile());
133:       assertFalse(node0.isAssign());
134:       assertFalse(node0.isDec());
135:       assertFalse(node0.isCast());
136:       assertEquals((-1), node0.getSourcePosition());
137:       assertFalse(node0.isString());
138:       assertFalse(node0.isDebugger());
139:       assertFalse(node0.isObjectLit());
140:       assertFalse(node0.isNot());
141:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(37, Node.OPT_ARG_NAME);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(56, Node.CHANGE_TIME);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(30, Node.VAR_ARGS_NAME);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
165:       assertEquals(39, Node.EMPTY_BLOCK);
166:       assertEquals(8, Node.FLAG_NO_THROWS);
167:       assertEquals(48, Node.DIRECTIVES);
168:       assertEquals(54, Node.SLASH_V);
169:       assertEquals(52, Node.LENGTH);
170:       assertEquals(50, Node.FREE_CALL);
171:       assertEquals(57, Node.REFLECTED_OBJECT);
172:       assertEquals(1, Node.DECR_FLAG);
173:       assertEquals(4095, Node.COLUMN_MASK);
174:       assertEquals(32, Node.INCRDECR_PROP);
175:       assertEquals(49, Node.DIRECT_EVAL);
176:       assertEquals(12, Node.COLUMN_BITS);
177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
178:       
179:       Node node1 = new Node(4, node0, 2836, 47);
180:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
181:       assertFalse(node1.equals((Object)node0));
182:       assertNotNull(node1);
183:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
184:       assertEquals(0, arrayList0.size());
185:       assertTrue(arrayList0.isEmpty());
186:       assertFalse(listIterator0.hasNext());
187:       assertFalse(listIterator0.hasPrevious());
188:       assertEquals(0, immutableList0.size());
189:       assertTrue(node0.isParamList());
190:       assertFalse(node0.isAnd());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isExprResult());
195:       assertFalse(node0.isThis());
196:       assertFalse(node0.isWith());
197:       assertFalse(node0.isFalse());
198:       assertFalse(node0.isComma());
199:       assertFalse(node0.isThrow());
200:       assertFalse(node0.isGetElem());
201:       assertEquals(83, node0.getType());
202:       assertFalse(node0.isInc());
203:       assertFalse(node0.isOr());
204:       assertFalse(node0.hasMoreThanOneChild());
205:       assertFalse(node0.isCase());
206:       assertFalse(node0.isAssignAdd());
207:       assertEquals((-1), node0.getLineno());
208:       assertFalse(node0.isDo());
209:       assertFalse(node0.isFor());
210:       assertFalse(node0.isBlock());
211:       assertFalse(node0.isLabel());
212:       assertFalse(node0.isArrayLit());
213:       assertFalse(node0.isHook());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isStringKey());
216:       assertFalse(node0.isTry());
217:       assertFalse(node0.isLabelName());
218:       assertFalse(node0.isScript());
219:       assertFalse(node0.isSwitch());
220:       assertFalse(node0.isNumber());
221:       assertEquals((-1), node0.getCharno());
222:       assertFalse(node0.isGetterDef());
223:       assertFalse(node0.isCatch());
224:       assertFalse(node0.isRegExp());
225:       assertFalse(node0.isDefaultCase());
226:       assertFalse(node0.isFunction());
227:       assertEquals(0, node0.getChildCount());
228:       assertFalse(node0.isCall());
229:       assertFalse(node0.isVar());
230:       assertFalse(node0.isName());
231:       assertFalse(node0.isNew());
232:       assertFalse(node0.isAdd());
233:       assertFalse(node0.isDelProp());
234:       assertFalse(node0.isVoid());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isIf());
237:       assertFalse(node0.isSetterDef());
238:       assertFalse(node0.isTrue());
239:       assertFalse(node0.isNE());
240:       assertFalse(node0.isEmpty());
241:       assertFalse(node0.isIn());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isContinue());
244:       assertFalse(node0.isTypeOf());
245:       assertFalse(node0.hasChildren());
246:       assertFalse(node0.isWhile());
247:       assertFalse(node0.isAssign());
248:       assertFalse(node0.isDec());
249:       assertFalse(node0.isCast());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isString());
252:       assertFalse(node0.isDebugger());
253:       assertFalse(node0.isObjectLit());
254:       assertFalse(node0.isNot());
255:       assertFalse(node1.isAnd());
256:       assertFalse(node1.isInstanceOf());
257:       assertFalse(node1.isNot());
258:       assertFalse(node1.isWith());
259:       assertFalse(node1.isObjectLit());
260:       assertFalse(node1.isComma());
261:       assertFalse(node1.isScript());
262:       assertFalse(node1.isThis());
263:       assertFalse(node1.isGetProp());
264:       assertFalse(node1.isHook());
265:       assertFalse(node1.isAssign());
266:       assertFalse(node1.isDec());
267:       assertFalse(node1.isTypeOf());
268:       assertEquals(4, node1.getType());
269:       assertFalse(node1.isExprResult());
270:       assertFalse(node1.isGetElem());
271:       assertFalse(node1.isBreak());
272:       assertFalse(node1.hasMoreThanOneChild());
273:       assertTrue(node1.isReturn());
274:       assertFalse(node1.isLabel());
275:       assertEquals(1, node1.getChildCount());
276:       assertFalse(node1.isOr());
277:       assertFalse(node1.isNumber());
278:       assertFalse(node1.isEmpty());
279:       assertFalse(node1.isCase());
280:       assertFalse(node1.isAdd());
281:       assertFalse(node1.isAssignAdd());
282:       assertFalse(node1.isNew());
283:       assertFalse(node1.isDo());
284:       assertFalse(node1.isArrayLit());
285:       assertFalse(node1.isVar());
286:       assertEquals(11616303, node1.getSourcePosition());
287:       assertFalse(node1.isStringKey());
288:       assertFalse(node1.isGetterDef());
289:       assertFalse(node1.isSwitch());
290:       assertFalse(node1.isParamList());
291:       assertFalse(node1.isLabelName());
292:       assertFalse(node1.isCatch());
293:       assertEquals(47, node1.getCharno());
294:       assertFalse(node1.isDefaultCase());
295:       assertFalse(node1.isSetterDef());
296:       assertFalse(node1.isTry());
297:       assertFalse(node1.isCall());
298:       assertFalse(node1.isFor());
299:       assertFalse(node1.isBlock());
300:       assertTrue(node1.hasOneChild());
301:       assertFalse(node1.isRegExp());
302:       assertFalse(node1.isNull());
303:       assertFalse(node1.isIf());
304:       assertFalse(node1.isTrue());
305:       assertFalse(node1.isNE());
306:       assertFalse(node1.isName());
307:       assertTrue(node1.hasChildren());
308:       assertFalse(node1.isDelProp());
309:       assertFalse(node1.isVoid());
310:       assertFalse(node1.isIn());
311:       assertFalse(node1.isContinue());
312:       assertFalse(node1.isInc());
313:       assertFalse(node1.isWhile());
314:       assertFalse(node1.isString());
315:       assertEquals(2836, node1.getLineno());
316:       assertFalse(node1.isThrow());
317:       assertFalse(node1.isCast());
318:       assertFalse(node1.isFalse());
319:       assertFalse(node1.isDebugger());
320:       assertFalse(node1.isFunction());
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
327:       assertEquals(37, Node.OPT_ARG_NAME);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
332:       assertEquals(36, Node.QUOTED_PROP);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
336:       assertEquals(2, Node.POST_FLAG);
337:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
338:       assertEquals(57, Node.LAST_PROP);
339:       assertEquals(30, Node.VAR_ARGS_NAME);
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(40, Node.ORIGINALNAME_PROP);
342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
344:       assertEquals(39, Node.EMPTY_BLOCK);
345:       assertEquals(8, Node.FLAG_NO_THROWS);
346:       assertEquals(48, Node.DIRECTIVES);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(52, Node.LENGTH);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(57, Node.REFLECTED_OBJECT);
351:       assertEquals(1, Node.DECR_FLAG);
352:       assertEquals(4095, Node.COLUMN_MASK);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
359:       assertEquals(56, Node.CHANGE_TIME);
360:       assertEquals(47, Node.IS_DISPATCHER);
361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
362:       assertEquals(37, Node.OPT_ARG_NAME);
363:       assertEquals(2, Node.POST_FLAG);
364:       assertEquals(43, Node.IS_CONSTANT_NAME);
365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
366:       assertEquals(55, Node.INFERRED_FUNCTION);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
371:       assertEquals(52, Node.LENGTH);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(57, Node.LAST_PROP);
374:       assertEquals(29, Node.JSDOC_INFO_PROP);
375:       assertEquals(53, Node.INPUT_ID);
376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
377:       assertEquals(39, Node.EMPTY_BLOCK);
378:       assertEquals(40, Node.ORIGINALNAME_PROP);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
382:       assertEquals(57, Node.REFLECTED_OBJECT);
383:       assertEquals(54, Node.SLASH_V);
384:       assertEquals(48, Node.DIRECTIVES);
385:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
386:       assertEquals(1, Node.DECR_FLAG);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(46, Node.IS_NAMESPACE);
389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
390:       assertEquals(12, Node.COLUMN_BITS);
391:       assertEquals(32, Node.INCRDECR_PROP);
392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
393:       
394:       boolean boolean1 = node1.isLabel();
395:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
396:       assertFalse(node0.equals((Object)node1));
397:       assertFalse(node1.equals((Object)node0));
398:       assertFalse(boolean1 == boolean0);
399:       assertFalse(boolean1);
400:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
401:       assertEquals(0, arrayList0.size());
402:       assertTrue(arrayList0.isEmpty());
403:       assertFalse(listIterator0.hasNext());
404:       assertFalse(listIterator0.hasPrevious());
405:       assertEquals(0, immutableList0.size());
406:       assertTrue(node0.isParamList());
407:       assertFalse(node0.isAnd());
408:       assertFalse(node0.isInstanceOf());
409:       assertFalse(node0.isGetProp());
410:       assertFalse(node0.isBreak());
411:       assertFalse(node0.isExprResult());
412:       assertFalse(node0.isThis());
413:       assertFalse(node0.isWith());
414:       assertFalse(node0.isFalse());
415:       assertFalse(node0.isComma());
416:       assertFalse(node0.isThrow());
417:       assertFalse(node0.isGetElem());
418:       assertEquals(83, node0.getType());
419:       assertFalse(node0.isInc());
420:       assertFalse(node0.isOr());
421:       assertFalse(node0.hasMoreThanOneChild());
422:       assertFalse(node0.isCase());
423:       assertFalse(node0.isAssignAdd());
424:       assertEquals((-1), node0.getLineno());
425:       assertFalse(node0.isDo());
426:       assertFalse(node0.isFor());
427:       assertFalse(node0.isBlock());
428:       assertFalse(node0.isLabel());
429:       assertFalse(node0.isArrayLit());
430:       assertFalse(node0.isHook());
431:       assertFalse(node0.hasOneChild());
432:       assertFalse(node0.isStringKey());
433:       assertFalse(node0.isTry());
434:       assertFalse(node0.isLabelName());
435:       assertFalse(node0.isScript());
436:       assertFalse(node0.isSwitch());
437:       assertFalse(node0.isNumber());
438:       assertEquals((-1), node0.getCharno());
439:       assertFalse(node0.isGetterDef());
440:       assertFalse(node0.isCatch());
441:       assertFalse(node0.isRegExp());
442:       assertFalse(node0.isDefaultCase());
443:       assertFalse(node0.isFunction());
444:       assertEquals(0, node0.getChildCount());
445:       assertFalse(node0.isCall());
446:       assertFalse(node0.isVar());
447:       assertFalse(node0.isName());
448:       assertFalse(node0.isNew());
449:       assertFalse(node0.isAdd());
450:       assertFalse(node0.isDelProp());
451:       assertFalse(node0.isVoid());
452:       assertFalse(node0.isNull());
453:       assertFalse(node0.isIf());
454:       assertFalse(node0.isSetterDef());
455:       assertFalse(node0.isTrue());
456:       assertFalse(node0.isNE());
457:       assertFalse(node0.isEmpty());
458:       assertFalse(node0.isIn());
459:       assertFalse(node0.isReturn());
460:       assertFalse(node0.isContinue());
461:       assertFalse(node0.isTypeOf());
462:       assertFalse(node0.hasChildren());
463:       assertFalse(node0.isWhile());
464:       assertFalse(node0.isAssign());
465:       assertFalse(node0.isDec());
466:       assertFalse(node0.isCast());
467:       assertEquals((-1), node0.getSourcePosition());
468:       assertFalse(node0.isString());
469:       assertFalse(node0.isDebugger());
470:       assertFalse(node0.isObjectLit());
471:       assertFalse(node0.isNot());
472:       assertFalse(node1.isAnd());
473:       assertFalse(node1.isInstanceOf());
474:       assertFalse(node1.isNot());
475:       assertFalse(node1.isWith());
476:       assertFalse(node1.isObjectLit());
477:       assertFalse(node1.isComma());
478:       assertFalse(node1.isScript());
479:       assertFalse(node1.isThis());
480:       assertFalse(node1.isGetProp());
481:       assertFalse(node1.isHook());
482:       assertFalse(node1.isAssign());
483:       assertFalse(node1.isDec());
484:       assertFalse(node1.isTypeOf());
485:       assertEquals(4, node1.getType());
486:       assertFalse(node1.isExprResult());
487:       assertFalse(node1.isGetElem());
488:       assertFalse(node1.isBreak());
489:       assertFalse(node1.hasMoreThanOneChild());
490:       assertTrue(node1.isReturn());
491:       assertFalse(node1.isLabel());
492:       assertEquals(1, node1.getChildCount());
493:       assertFalse(node1.isOr());
494:       assertFalse(node1.isNumber());
495:       assertFalse(node1.isEmpty());
496:       assertFalse(node1.isCase());
497:       assertFalse(node1.isAdd());
498:       assertFalse(node1.isAssignAdd());
499:       assertFalse(node1.isNew());
500:       assertFalse(node1.isDo());
501:       assertFalse(node1.isArrayLit());
502:       assertFalse(node1.isVar());
503:       assertEquals(11616303, node1.getSourcePosition());
504:       assertFalse(node1.isStringKey());
505:       assertFalse(node1.isGetterDef());
506:       assertFalse(node1.isSwitch());
507:       assertFalse(node1.isParamList());
508:       assertFalse(node1.isLabelName());
509:       assertFalse(node1.isCatch());
510:       assertEquals(47, node1.getCharno());
511:       assertFalse(node1.isDefaultCase());
512:       assertFalse(node1.isSetterDef());
513:       assertFalse(node1.isTry());
514:       assertFalse(node1.isCall());
515:       assertFalse(node1.isFor());
516:       assertFalse(node1.isBlock());
517:       assertTrue(node1.hasOneChild());
518:       assertFalse(node1.isRegExp());
519:       assertFalse(node1.isNull());
520:       assertFalse(node1.isIf());
521:       assertFalse(node1.isTrue());
522:       assertFalse(node1.isNE());
523:       assertFalse(node1.isName());
524:       assertTrue(node1.hasChildren());
525:       assertFalse(node1.isDelProp());
526:       assertFalse(node1.isVoid());
527:       assertFalse(node1.isIn());
528:       assertFalse(node1.isContinue());
529:       assertFalse(node1.isInc());
530:       assertFalse(node1.isWhile());
531:       assertFalse(node1.isString());
532:       assertEquals(2836, node1.getLineno());
533:       assertFalse(node1.isThrow());
534:       assertFalse(node1.isCast());
535:       assertFalse(node1.isFalse());
536:       assertFalse(node1.isDebugger());
537:       assertFalse(node1.isFunction());
538:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
539:       assertNotSame(node0, node1);
540:       assertNotSame(node1, node0);
541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(29, Node.JSDOC_INFO_PROP);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(37, Node.OPT_ARG_NAME);
548:       assertEquals(43, Node.IS_CONSTANT_NAME);
549:       assertEquals(56, Node.CHANGE_TIME);
550:       assertEquals(46, Node.IS_NAMESPACE);
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
556:       assertEquals(2, Node.POST_FLAG);
557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
558:       assertEquals(57, Node.LAST_PROP);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(40, Node.ORIGINALNAME_PROP);
562:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
563:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
564:       assertEquals(39, Node.EMPTY_BLOCK);
565:       assertEquals(8, Node.FLAG_NO_THROWS);
566:       assertEquals(48, Node.DIRECTIVES);
567:       assertEquals(54, Node.SLASH_V);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(57, Node.REFLECTED_OBJECT);
571:       assertEquals(1, Node.DECR_FLAG);
572:       assertEquals(4095, Node.COLUMN_MASK);
573:       assertEquals(32, Node.INCRDECR_PROP);
574:       assertEquals(49, Node.DIRECT_EVAL);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
579:       assertEquals(56, Node.CHANGE_TIME);
580:       assertEquals(47, Node.IS_DISPATCHER);
581:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
582:       assertEquals(37, Node.OPT_ARG_NAME);
583:       assertEquals(2, Node.POST_FLAG);
584:       assertEquals(43, Node.IS_CONSTANT_NAME);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertEquals(55, Node.INFERRED_FUNCTION);
587:       assertEquals(49, Node.DIRECT_EVAL);
588:       assertEquals(30, Node.VAR_ARGS_NAME);
589:       assertEquals(36, Node.QUOTED_PROP);
590:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
591:       assertEquals(52, Node.LENGTH);
592:       assertEquals(8, Node.FLAG_NO_THROWS);
593:       assertEquals(57, Node.LAST_PROP);
594:       assertEquals(29, Node.JSDOC_INFO_PROP);
595:       assertEquals(53, Node.INPUT_ID);
596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
597:       assertEquals(39, Node.EMPTY_BLOCK);
598:       assertEquals(40, Node.ORIGINALNAME_PROP);
599:       assertEquals(50, Node.FREE_CALL);
600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
601:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
602:       assertEquals(57, Node.REFLECTED_OBJECT);
603:       assertEquals(54, Node.SLASH_V);
604:       assertEquals(48, Node.DIRECTIVES);
605:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(4095, Node.COLUMN_MASK);
608:       assertEquals(46, Node.IS_NAMESPACE);
609:       assertEquals(51, Node.STATIC_SOURCE_FILE);
610:       assertEquals(12, Node.COLUMN_BITS);
611:       assertEquals(32, Node.INCRDECR_PROP);
612:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
613:       
614:       ImmutableList<JSType> immutableList1 = immutableList0.reverse();
615:       assertTrue(immutableList1.equals((Object)immutableList0));
616:       assertNotNull(immutableList1);
617:       assertEquals(0, arrayList0.size());
618:       assertTrue(arrayList0.isEmpty());
619:       assertFalse(listIterator0.hasNext());
620:       assertFalse(listIterator0.hasPrevious());
621:       assertEquals(0, immutableList0.size());
622:       assertEquals(0, immutableList1.size());
623:       
624:       ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
625:       assertTrue(immutableList0.equals((Object)immutableList1));
626:       assertTrue(immutableList1.equals((Object)immutableList0));
627:       assertTrue(immutableList2.equals((Object)immutableList0));
628:       assertNotNull(immutableList2);
629:       assertEquals(0, arrayList0.size());
630:       assertTrue(arrayList0.isEmpty());
631:       assertFalse(listIterator0.hasNext());
632:       assertFalse(listIterator0.hasPrevious());
633:       assertEquals(0, immutableList0.size());
634:       assertEquals(0, immutableList1.size());
635:       assertEquals(0, immutableList2.size());
636:       assertSame(immutableList1, immutableList2);
637:       assertSame(immutableList2, immutableList1);
638:       
639:       boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
640:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
641:       assertTrue(immutableList0.equals((Object)immutableList2));
642:       assertTrue(immutableList0.equals((Object)immutableList1));
643:       assertFalse(node0.equals((Object)node1));
644:       assertFalse(node1.equals((Object)node0));
645:       assertTrue(boolean2 == boolean1);
646:       assertFalse(boolean2 == boolean0);
647:       assertFalse(boolean2);
648:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
649:       assertEquals(0, arrayList0.size());
650:       assertTrue(arrayList0.isEmpty());
651:       assertFalse(listIterator0.hasNext());
652:       assertFalse(listIterator0.hasPrevious());
653:       assertEquals(0, immutableList0.size());
654:       assertTrue(node0.isParamList());
655:       assertFalse(node0.isAnd());
656:       assertFalse(node0.isInstanceOf());
657:       assertFalse(node0.isGetProp());
658:       assertFalse(node0.isBreak());
659:       assertFalse(node0.isExprResult());
660:       assertFalse(node0.isThis());
661:       assertFalse(node0.isWith());
662:       assertFalse(node0.isFalse());
663:       assertFalse(node0.isComma());
664:       assertFalse(node0.isThrow());
665:       assertFalse(node0.isGetElem());
666:       assertEquals(83, node0.getType());
667:       assertFalse(node0.isInc());
668:       assertFalse(node0.isOr());
669:       assertFalse(node0.hasMoreThanOneChild());
670:       assertFalse(node0.isCase());
671:       assertFalse(node0.isAssignAdd());
672:       assertEquals((-1), node0.getLineno());
673:       assertFalse(node0.isDo());
674:       assertFalse(node0.isFor());
675:       assertFalse(node0.isBlock());
676:       assertFalse(node0.isLabel());
677:       assertFalse(node0.isArrayLit());
678:       assertFalse(node0.isHook());
679:       assertFalse(node0.hasOneChild());
680:       assertFalse(node0.isStringKey());
681:       assertFalse(node0.isTry());
682:       assertFalse(node0.isLabelName());
683:       assertFalse(node0.isScript());
684:       assertFalse(node0.isSwitch());
685:       assertFalse(node0.isNumber());
686:       assertEquals((-1), node0.getCharno());
687:       assertFalse(node0.isGetterDef());
688:       assertFalse(node0.isCatch());
689:       assertFalse(node0.isRegExp());
690:       assertFalse(node0.isDefaultCase());
691:       assertFalse(node0.isFunction());
692:       assertEquals(0, node0.getChildCount());
693:       assertFalse(node0.isCall());
694:       assertFalse(node0.isVar());
695:       assertFalse(node0.isName());
696:       assertFalse(node0.isNew());
697:       assertFalse(node0.isAdd());
698:       assertFalse(node0.isDelProp());
699:       assertFalse(node0.isVoid());
700:       assertFalse(node0.isNull());
701:       assertFalse(node0.isIf());
702:       assertFalse(node0.isSetterDef());
703:       assertFalse(node0.isTrue());
704:       assertFalse(node0.isNE());
705:       assertFalse(node0.isEmpty());
706:       assertFalse(node0.isIn());
707:       assertFalse(node0.isReturn());
708:       assertFalse(node0.isContinue());
709:       assertFalse(node0.isTypeOf());
710:       assertFalse(node0.hasChildren());
711:       assertFalse(node0.isWhile());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.isCast());
715:       assertEquals((-1), node0.getSourcePosition());
716:       assertFalse(node0.isString());
717:       assertFalse(node0.isDebugger());
718:       assertFalse(node0.isObjectLit());
719:       assertFalse(node0.isNot());
720:       assertFalse(node1.isAnd());
721:       assertFalse(node1.isInstanceOf());
722:       assertFalse(node1.isNot());
723:       assertFalse(node1.isWith());
724:       assertFalse(node1.isObjectLit());
725:       assertFalse(node1.isComma());
726:       assertFalse(node1.isScript());
727:       assertFalse(node1.isThis());
728:       assertFalse(node1.isGetProp());
729:       assertFalse(node1.isHook());
730:       assertFalse(node1.isAssign());
731:       assertFalse(node1.isDec());
732:       assertFalse(node1.isTypeOf());
733:       assertEquals(4, node1.getType());
734:       assertFalse(node1.isExprResult());
735:       assertFalse(node1.isGetElem());
736:       assertFalse(node1.isBreak());
737:       assertFalse(node1.hasMoreThanOneChild());
738:       assertTrue(node1.isReturn());
739:       assertFalse(node1.isLabel());
740:       assertEquals(1, node1.getChildCount());
741:       assertFalse(node1.isOr());
742:       assertFalse(node1.isNumber());
743:       assertFalse(node1.isEmpty());
744:       assertFalse(node1.isCase());
745:       assertFalse(node1.isAdd());
746:       assertFalse(node1.isAssignAdd());
747:       assertFalse(node1.isNew());
748:       assertFalse(node1.isDo());
749:       assertFalse(node1.isArrayLit());
750:       assertFalse(node1.isVar());
751:       assertEquals(11616303, node1.getSourcePosition());
752:       assertFalse(node1.isStringKey());
753:       assertFalse(node1.isGetterDef());
754:       assertFalse(node1.isSwitch());
755:       assertFalse(node1.isParamList());
756:       assertFalse(node1.isLabelName());
757:       assertFalse(node1.isCatch());
758:       assertEquals(47, node1.getCharno());
759:       assertFalse(node1.isDefaultCase());
760:       assertFalse(node1.isSetterDef());
761:       assertFalse(node1.isTry());
762:       assertFalse(node1.isCall());
763:       assertFalse(node1.isFor());
764:       assertFalse(node1.isBlock());
765:       assertTrue(node1.hasOneChild());
766:       assertFalse(node1.isRegExp());
767:       assertFalse(node1.isNull());
768:       assertFalse(node1.isIf());
769:       assertFalse(node1.isTrue());
770:       assertFalse(node1.isNE());
771:       assertFalse(node1.isName());
772:       assertTrue(node1.hasChildren());
773:       assertFalse(node1.isDelProp());
774:       assertFalse(node1.isVoid());
775:       assertFalse(node1.isIn());
776:       assertFalse(node1.isContinue());
777:       assertFalse(node1.isInc());
778:       assertFalse(node1.isWhile());
779:       assertFalse(node1.isString());
780:       assertEquals(2836, node1.getLineno());
781:       assertFalse(node1.isThrow());
782:       assertFalse(node1.isCast());
783:       assertFalse(node1.isFalse());
784:       assertFalse(node1.isDebugger());
785:       assertFalse(node1.isFunction());
786:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
787:       assertNotSame(node0, node1);
788:       assertNotSame(node1, node0);
789:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
791:       assertEquals(29, Node.JSDOC_INFO_PROP);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
794:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
795:       assertEquals(37, Node.OPT_ARG_NAME);
796:       assertEquals(43, Node.IS_CONSTANT_NAME);
797:       assertEquals(56, Node.CHANGE_TIME);
798:       assertEquals(46, Node.IS_NAMESPACE);
799:       assertEquals(51, Node.STATIC_SOURCE_FILE);
800:       assertEquals(36, Node.QUOTED_PROP);
801:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
802:       assertEquals(55, Node.INFERRED_FUNCTION);
803:       assertEquals(15, Node.NO_SIDE_EFFECTS);
804:       assertEquals(2, Node.POST_FLAG);
805:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
806:       assertEquals(57, Node.LAST_PROP);
807:       assertEquals(30, Node.VAR_ARGS_NAME);
808:       assertEquals(47, Node.IS_DISPATCHER);
809:       assertEquals(40, Node.ORIGINALNAME_PROP);
810:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(39, Node.EMPTY_BLOCK);
813:       assertEquals(8, Node.FLAG_NO_THROWS);
814:       assertEquals(48, Node.DIRECTIVES);
815:       assertEquals(54, Node.SLASH_V);
816:       assertEquals(52, Node.LENGTH);
817:       assertEquals(50, Node.FREE_CALL);
818:       assertEquals(57, Node.REFLECTED_OBJECT);
819:       assertEquals(1, Node.DECR_FLAG);
820:       assertEquals(4095, Node.COLUMN_MASK);
821:       assertEquals(32, Node.INCRDECR_PROP);
822:       assertEquals(49, Node.DIRECT_EVAL);
823:       assertEquals(12, Node.COLUMN_BITS);
824:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
825:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
826:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
827:       assertEquals(56, Node.CHANGE_TIME);
828:       assertEquals(47, Node.IS_DISPATCHER);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(37, Node.OPT_ARG_NAME);
831:       assertEquals(2, Node.POST_FLAG);
832:       assertEquals(43, Node.IS_CONSTANT_NAME);
833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
834:       assertEquals(55, Node.INFERRED_FUNCTION);
835:       assertEquals(49, Node.DIRECT_EVAL);
836:       assertEquals(30, Node.VAR_ARGS_NAME);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
839:       assertEquals(52, Node.LENGTH);
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(57, Node.LAST_PROP);
842:       assertEquals(29, Node.JSDOC_INFO_PROP);
843:       assertEquals(53, Node.INPUT_ID);
844:       assertEquals(15, Node.NO_SIDE_EFFECTS);
845:       assertEquals(39, Node.EMPTY_BLOCK);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(50, Node.FREE_CALL);
848:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
849:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(54, Node.SLASH_V);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
854:       assertEquals(1, Node.DECR_FLAG);
855:       assertEquals(4095, Node.COLUMN_MASK);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(32, Node.INCRDECR_PROP);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       
862:       int int0 = node0.getChildCount();
863:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
864:       assertTrue(immutableList0.equals((Object)immutableList2));
865:       assertTrue(immutableList0.equals((Object)immutableList1));
866:       assertFalse(node0.equals((Object)node1));
867:       assertEquals(0, int0);
868:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
869:       assertEquals(0, arrayList0.size());
870:       assertTrue(arrayList0.isEmpty());
871:       assertFalse(listIterator0.hasNext());
872:       assertFalse(listIterator0.hasPrevious());
873:       assertEquals(0, immutableList0.size());
874:       assertTrue(node0.isParamList());
875:       assertFalse(node0.isAnd());
876:       assertFalse(node0.isInstanceOf());
877:       assertFalse(node0.isGetProp());
878:       assertFalse(node0.isBreak());
879:       assertFalse(node0.isExprResult());
880:       assertFalse(node0.isThis());
881:       assertFalse(node0.isWith());
882:       assertFalse(node0.isFalse());
883:       assertFalse(node0.isComma());
884:       assertFalse(node0.isThrow());
885:       assertFalse(node0.isGetElem());
886:       assertEquals(83, node0.getType());
887:       assertFalse(node0.isInc());
888:       assertFalse(node0.isOr());
889:       assertFalse(node0.hasMoreThanOneChild());
890:       assertFalse(node0.isCase());
891:       assertFalse(node0.isAssignAdd());
892:       assertEquals((-1), node0.getLineno());
893:       assertFalse(node0.isDo());
894:       assertFalse(node0.isFor());
895:       assertFalse(node0.isBlock());
896:       assertFalse(node0.isLabel());
897:       assertFalse(node0.isArrayLit());
898:       assertFalse(node0.isHook());
899:       assertFalse(node0.hasOneChild());
900:       assertFalse(node0.isStringKey());
901:       assertFalse(node0.isTry());
902:       assertFalse(node0.isLabelName());
903:       assertFalse(node0.isScript());
904:       assertFalse(node0.isSwitch());
905:       assertFalse(node0.isNumber());
906:       assertEquals((-1), node0.getCharno());
907:       assertFalse(node0.isGetterDef());
908:       assertFalse(node0.isCatch());
909:       assertFalse(node0.isRegExp());
910:       assertFalse(node0.isDefaultCase());
911:       assertFalse(node0.isFunction());
912:       assertEquals(0, node0.getChildCount());
913:       assertFalse(node0.isCall());
914:       assertFalse(node0.isVar());
915:       assertFalse(node0.isName());
916:       assertFalse(node0.isNew());
917:       assertFalse(node0.isAdd());
918:       assertFalse(node0.isDelProp());
919:       assertFalse(node0.isVoid());
920:       assertFalse(node0.isNull());
921:       assertFalse(node0.isIf());
922:       assertFalse(node0.isSetterDef());
923:       assertFalse(node0.isTrue());
924:       assertFalse(node0.isNE());
925:       assertFalse(node0.isEmpty());
926:       assertFalse(node0.isIn());
927:       assertFalse(node0.isReturn());
928:       assertFalse(node0.isContinue());
929:       assertFalse(node0.isTypeOf());
930:       assertFalse(node0.hasChildren());
931:       assertFalse(node0.isWhile());
932:       assertFalse(node0.isAssign());
933:       assertFalse(node0.isDec());
934:       assertFalse(node0.isCast());
935:       assertEquals((-1), node0.getSourcePosition());
936:       assertFalse(node0.isString());
937:       assertFalse(node0.isDebugger());
938:       assertFalse(node0.isObjectLit());
939:       assertFalse(node0.isNot());
940:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
941:       assertNotSame(node0, node1);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
944:       assertEquals(29, Node.JSDOC_INFO_PROP);
945:       assertEquals(53, Node.INPUT_ID);
946:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
947:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
948:       assertEquals(37, Node.OPT_ARG_NAME);
949:       assertEquals(43, Node.IS_CONSTANT_NAME);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(46, Node.IS_NAMESPACE);
952:       assertEquals(51, Node.STATIC_SOURCE_FILE);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(15, Node.NO_SIDE_EFFECTS);
957:       assertEquals(2, Node.POST_FLAG);
958:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(30, Node.VAR_ARGS_NAME);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(39, Node.EMPTY_BLOCK);
966:       assertEquals(8, Node.FLAG_NO_THROWS);
967:       assertEquals(48, Node.DIRECTIVES);
968:       assertEquals(54, Node.SLASH_V);
969:       assertEquals(52, Node.LENGTH);
970:       assertEquals(50, Node.FREE_CALL);
971:       assertEquals(57, Node.REFLECTED_OBJECT);
972:       assertEquals(1, Node.DECR_FLAG);
973:       assertEquals(4095, Node.COLUMN_MASK);
974:       assertEquals(32, Node.INCRDECR_PROP);
975:       assertEquals(49, Node.DIRECT_EVAL);
976:       assertEquals(12, Node.COLUMN_BITS);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       
979:       boolean boolean3 = node0.isNull();
980:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
981:       assertTrue(immutableList0.equals((Object)immutableList2));
982:       assertTrue(immutableList0.equals((Object)immutableList1));
983:       assertFalse(node0.equals((Object)node1));
984:       assertFalse(boolean3 == boolean0);
985:       assertTrue(boolean3 == boolean1);
986:       assertTrue(boolean3 == boolean2);
987:       assertFalse(boolean3);
988:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
989:       assertEquals(0, arrayList0.size());
990:       assertTrue(arrayList0.isEmpty());
991:       assertFalse(listIterator0.hasNext());
992:       assertFalse(listIterator0.hasPrevious());
993:       assertEquals(0, immutableList0.size());
994:       assertTrue(node0.isParamList());
995:       assertFalse(node0.isAnd());
996:       assertFalse(node0.isInstanceOf());
997:       assertFalse(node0.isGetProp());
998:       assertFalse(node0.isBreak());
999:       assertFalse(node0.isExprResult());
1000:       assertFalse(node0.isThis());
1001:       assertFalse(node0.isWith());
1002:       assertFalse(node0.isFalse());
1003:       assertFalse(node0.isComma());
1004:       assertFalse(node0.isThrow());
1005:       assertFalse(node0.isGetElem());
1006:       assertEquals(83, node0.getType());
1007:       assertFalse(node0.isInc());
1008:       assertFalse(node0.isOr());
1009:       assertFalse(node0.hasMoreThanOneChild());
1010:       assertFalse(node0.isCase());
1011:       assertFalse(node0.isAssignAdd());
1012:       assertEquals((-1), node0.getLineno());
1013:       assertFalse(node0.isDo());
1014:       assertFalse(node0.isFor());
1015:       assertFalse(node0.isBlock());
1016:       assertFalse(node0.isLabel());
1017:       assertFalse(node0.isArrayLit());
1018:       assertFalse(node0.isHook());
1019:       assertFalse(node0.hasOneChild());
1020:       assertFalse(node0.isStringKey());
1021:       assertFalse(node0.isTry());
1022:       assertFalse(node0.isLabelName());
1023:       assertFalse(node0.isScript());
1024:       assertFalse(node0.isSwitch());
1025:       assertFalse(node0.isNumber());
1026:       assertEquals((-1), node0.getCharno());
1027:       assertFalse(node0.isGetterDef());
1028:       assertFalse(node0.isCatch());
1029:       assertFalse(node0.isRegExp());
1030:       assertFalse(node0.isDefaultCase());
1031:       assertFalse(node0.isFunction());
1032:       assertEquals(0, node0.getChildCount());
1033:       assertFalse(node0.isCall());
1034:       assertFalse(node0.isVar());
1035:       assertFalse(node0.isName());
1036:       assertFalse(node0.isNew());
1037:       assertFalse(node0.isAdd());
1038:       assertFalse(node0.isDelProp());
1039:       assertFalse(node0.isVoid());
1040:       assertFalse(node0.isNull());
1041:       assertFalse(node0.isIf());
1042:       assertFalse(node0.isSetterDef());
1043:       assertFalse(node0.isTrue());
1044:       assertFalse(node0.isNE());
1045:       assertFalse(node0.isEmpty());
1046:       assertFalse(node0.isIn());
1047:       assertFalse(node0.isReturn());
1048:       assertFalse(node0.isContinue());
1049:       assertFalse(node0.isTypeOf());
1050:       assertFalse(node0.hasChildren());
1051:       assertFalse(node0.isWhile());
1052:       assertFalse(node0.isAssign());
1053:       assertFalse(node0.isDec());
1054:       assertFalse(node0.isCast());
1055:       assertEquals((-1), node0.getSourcePosition());
1056:       assertFalse(node0.isString());
1057:       assertFalse(node0.isDebugger());
1058:       assertFalse(node0.isObjectLit());
1059:       assertFalse(node0.isNot());
1060:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1061:       assertNotSame(node0, node1);
1062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1064:       assertEquals(29, Node.JSDOC_INFO_PROP);
1065:       assertEquals(53, Node.INPUT_ID);
1066:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1068:       assertEquals(37, Node.OPT_ARG_NAME);
1069:       assertEquals(43, Node.IS_CONSTANT_NAME);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(46, Node.IS_NAMESPACE);
1072:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1075:       assertEquals(55, Node.INFERRED_FUNCTION);
1076:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1077:       assertEquals(2, Node.POST_FLAG);
1078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1079:       assertEquals(57, Node.LAST_PROP);
1080:       assertEquals(30, Node.VAR_ARGS_NAME);
1081:       assertEquals(47, Node.IS_DISPATCHER);
1082:       assertEquals(40, Node.ORIGINALNAME_PROP);
1083:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1084:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1085:       assertEquals(39, Node.EMPTY_BLOCK);
1086:       assertEquals(8, Node.FLAG_NO_THROWS);
1087:       assertEquals(48, Node.DIRECTIVES);
1088:       assertEquals(54, Node.SLASH_V);
1089:       assertEquals(52, Node.LENGTH);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(1, Node.DECR_FLAG);
1093:       assertEquals(4095, Node.COLUMN_MASK);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(49, Node.DIRECT_EVAL);
1096:       assertEquals(12, Node.COLUMN_BITS);
1097:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1098:       
1099:       Iterable<Node> iterable0 = node0.children();
1100:       assertFalse(iterable0.contains(node0));
1101:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1102:       assertTrue(immutableList0.equals((Object)immutableList2));
1103:       assertTrue(immutableList0.equals((Object)immutableList1));
1104:       assertFalse(node0.equals((Object)node1));
1105:       assertNotNull(iterable0);
1106:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1107:       assertEquals(0, arrayList0.size());
1108:       assertTrue(arrayList0.isEmpty());
1109:       assertFalse(listIterator0.hasNext());
1110:       assertFalse(listIterator0.hasPrevious());
1111:       assertEquals(0, immutableList0.size());
1112:       assertTrue(node0.isParamList());
1113:       assertFalse(node0.isAnd());
1114:       assertFalse(node0.isInstanceOf());
1115:       assertFalse(node0.isGetProp());
1116:       assertFalse(node0.isBreak());
1117:       assertFalse(node0.isExprResult());
1118:       assertFalse(node0.isThis());
1119:       assertFalse(node0.isWith());
1120:       assertFalse(node0.isFalse());
1121:       assertFalse(node0.isComma());
1122:       assertFalse(node0.isThrow());
1123:       assertFalse(node0.isGetElem());
1124:       assertEquals(83, node0.getType());
1125:       assertFalse(node0.isInc());
1126:       assertFalse(node0.isOr());
1127:       assertFalse(node0.hasMoreThanOneChild());
1128:       assertFalse(node0.isCase());
1129:       assertFalse(node0.isAssignAdd());
1130:       assertEquals((-1), node0.getLineno());
1131:       assertFalse(node0.isDo());
1132:       assertFalse(node0.isFor());
1133:       assertFalse(node0.isBlock());
1134:       assertFalse(node0.isLabel());
1135:       assertFalse(node0.isArrayLit());
1136:       assertFalse(node0.isHook());
1137:       assertFalse(node0.hasOneChild());
1138:       assertFalse(node0.isStringKey());
1139:       assertFalse(node0.isTry());
1140:       assertFalse(node0.isLabelName());
1141:       assertFalse(node0.isScript());
1142:       assertFalse(node0.isSwitch());
1143:       assertFalse(node0.isNumber());
1144:       assertEquals((-1), node0.getCharno());
1145:       assertFalse(node0.isGetterDef());
1146:       assertFalse(node0.isCatch());
1147:       assertFalse(node0.isRegExp());
1148:       assertFalse(node0.isDefaultCase());
1149:       assertFalse(node0.isFunction());
1150:       assertEquals(0, node0.getChildCount());
1151:       assertFalse(node0.isCall());
1152:       assertFalse(node0.isVar());
1153:       assertFalse(node0.isName());
1154:       assertFalse(node0.isNew());
1155:       assertFalse(node0.isAdd());
1156:       assertFalse(node0.isDelProp());
1157:       assertFalse(node0.isVoid());
1158:       assertFalse(node0.isNull());
1159:       assertFalse(node0.isIf());
1160:       assertFalse(node0.isSetterDef());
1161:       assertFalse(node0.isTrue());
1162:       assertFalse(node0.isNE());
1163:       assertFalse(node0.isEmpty());
1164:       assertFalse(node0.isIn());
1165:       assertFalse(node0.isReturn());
1166:       assertFalse(node0.isContinue());
1167:       assertFalse(node0.isTypeOf());
1168:       assertFalse(node0.hasChildren());
1169:       assertFalse(node0.isWhile());
1170:       assertFalse(node0.isAssign());
1171:       assertFalse(node0.isDec());
1172:       assertFalse(node0.isCast());
1173:       assertEquals((-1), node0.getSourcePosition());
1174:       assertFalse(node0.isString());
1175:       assertFalse(node0.isDebugger());
1176:       assertFalse(node0.isObjectLit());
1177:       assertFalse(node0.isNot());
1178:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1179:       assertNotSame(node0, node1);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1182:       assertEquals(29, Node.JSDOC_INFO_PROP);
1183:       assertEquals(53, Node.INPUT_ID);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1186:       assertEquals(37, Node.OPT_ARG_NAME);
1187:       assertEquals(43, Node.IS_CONSTANT_NAME);
1188:       assertEquals(56, Node.CHANGE_TIME);
1189:       assertEquals(46, Node.IS_NAMESPACE);
1190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1193:       assertEquals(55, Node.INFERRED_FUNCTION);
1194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1195:       assertEquals(2, Node.POST_FLAG);
1196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1197:       assertEquals(57, Node.LAST_PROP);
1198:       assertEquals(30, Node.VAR_ARGS_NAME);
1199:       assertEquals(47, Node.IS_DISPATCHER);
1200:       assertEquals(40, Node.ORIGINALNAME_PROP);
1201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1203:       assertEquals(39, Node.EMPTY_BLOCK);
1204:       assertEquals(8, Node.FLAG_NO_THROWS);
1205:       assertEquals(48, Node.DIRECTIVES);
1206:       assertEquals(54, Node.SLASH_V);
1207:       assertEquals(52, Node.LENGTH);
1208:       assertEquals(50, Node.FREE_CALL);
1209:       assertEquals(57, Node.REFLECTED_OBJECT);
1210:       assertEquals(1, Node.DECR_FLAG);
1211:       assertEquals(4095, Node.COLUMN_MASK);
1212:       assertEquals(32, Node.INCRDECR_PROP);
1213:       assertEquals(49, Node.DIRECT_EVAL);
1214:       assertEquals(12, Node.COLUMN_BITS);
1215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1216:       
1217:       Node node2 = node1.copyInformationFromForTree(node0);
1218:       assertFalse(node2.equals((Object)node0));
1219:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1220:       assertTrue(immutableList0.equals((Object)immutableList2));
1221:       assertTrue(immutableList0.equals((Object)immutableList1));
1222:       assertFalse(node0.equals((Object)node1));
1223:       assertFalse(node1.equals((Object)node0));
1224:       assertNotNull(node2);
1225:       assertFalse(node2.isFor());
1226:       assertFalse(node2.isEmpty());
1227:       assertTrue(node2.hasOneChild());
1228:       assertFalse(node2.isGetterDef());
1229:       assertFalse(node2.isDebugger());
1230:       assertFalse(node2.isTrue());
1231:       assertFalse(node2.isFunction());
1232:       assertFalse(node2.isNE());
1233:       assertTrue(node2.hasChildren());
1234:       assertFalse(node2.isIf());
1235:       assertFalse(node2.isArrayLit());
1236:       assertFalse(node2.isDelProp());
1237:       assertFalse(node2.isVoid());
1238:       assertTrue(node2.isReturn());
1239:       assertFalse(node2.isCatch());
1240:       assertFalse(node2.isString());
1241:       assertEquals(1, node2.getChildCount());
1242:       assertFalse(node2.isRegExp());
1243:       assertEquals(4, node2.getType());
1244:       assertFalse(node2.isCase());
1245:       assertFalse(node2.isTry());
1246:       assertFalse(node2.isCall());
1247:       assertFalse(node2.isStringKey());
1248:       assertFalse(node2.isVar());
1249:       assertFalse(node2.isParamList());
1250:       assertEquals((-1), node2.getCharno());
1251:       assertFalse(node2.isSwitch());
1252:       assertFalse(node2.isNull());
1253:       assertFalse(node2.isBreak());
1254:       assertFalse(node2.isName());
1255:       assertFalse(node2.isLabel());
1256:       assertFalse(node2.isOr());
1257:       assertFalse(node2.isAdd());
1258:       assertFalse(node2.isDefaultCase());
1259:       assertFalse(node2.isAssignAdd());
1260:       assertFalse(node2.isNew());
1261:       assertFalse(node2.isDo());
1262:       assertFalse(node2.isGetElem());
1263:       assertFalse(node2.isCast());
1264:       assertFalse(node2.isNumber());
1265:       assertFalse(node2.isTypeOf());
1266:       assertFalse(node2.isDec());
1267:       assertEquals((-1), node2.getSourcePosition());
1268:       assertFalse(node2.isAssign());
1269:       assertFalse(node2.isExprResult());
1270:       assertEquals((-1), node2.getLineno());
1271:       assertFalse(node2.isLabelName());
1272:       assertFalse(node2.isObjectLit());
1273:       assertFalse(node2.hasMoreThanOneChild());
1274:       assertFalse(node2.isAnd());
1275:       assertFalse(node2.isInstanceOf());
1276:       assertFalse(node2.isWith());
1277:       assertFalse(node2.isNot());
1278:       assertFalse(node2.isThis());
1279:       assertFalse(node2.isComma());
1280:       assertFalse(node2.isGetProp());
1281:       assertFalse(node2.isBlock());
1282:       assertFalse(node2.isScript());
1283:       assertFalse(node2.isWhile());
1284:       assertFalse(node2.isHook());
1285:       assertFalse(node2.isThrow());
1286:       assertFalse(node2.isFalse());
1287:       assertFalse(node2.isContinue());
1288:       assertFalse(node2.isIn());
1289:       assertFalse(node2.isInc());
1290:       assertFalse(node2.isSetterDef());
1291:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1292:       assertEquals(0, arrayList0.size());
1293:       assertTrue(arrayList0.isEmpty());
1294:       assertFalse(listIterator0.hasNext());
1295:       assertFalse(listIterator0.hasPrevious());
1296:       assertEquals(0, immutableList0.size());
1297:       assertTrue(node0.isParamList());
1298:       assertFalse(node0.isAnd());
1299:       assertFalse(node0.isInstanceOf());
1300:       assertFalse(node0.isGetProp());
1301:       assertFalse(node0.isBreak());
1302:       assertFalse(node0.isExprResult());
1303:       assertFalse(node0.isThis());
1304:       assertFalse(node0.isWith());
1305:       assertFalse(node0.isFalse());
1306:       assertFalse(node0.isComma());
1307:       assertFalse(node0.isThrow());
1308:       assertFalse(node0.isGetElem());
1309:       assertEquals(83, node0.getType());
1310:       assertFalse(node0.isInc());
1311:       assertFalse(node0.isOr());
1312:       assertFalse(node0.hasMoreThanOneChild());
1313:       assertFalse(node0.isCase());
1314:       assertFalse(node0.isAssignAdd());
1315:       assertEquals((-1), node0.getLineno());
1316:       assertFalse(node0.isDo());
1317:       assertFalse(node0.isFor());
1318:       assertFalse(node0.isBlock());
1319:       assertFalse(node0.isLabel());
1320:       assertFalse(node0.isArrayLit());
1321:       assertFalse(node0.isHook());
1322:       assertFalse(node0.hasOneChild());
1323:       assertFalse(node0.isStringKey());
1324:       assertFalse(node0.isTry());
1325:       assertFalse(node0.isLabelName());
1326:       assertFalse(node0.isScript());
1327:       assertFalse(node0.isSwitch());
1328:       assertFalse(node0.isNumber());
1329:       assertEquals((-1), node0.getCharno());
1330:       assertFalse(node0.isGetterDef());
1331:       assertFalse(node0.isCatch());
1332:       assertFalse(node0.isRegExp());
1333:       assertFalse(node0.isDefaultCase());
1334:       assertFalse(node0.isFunction());
1335:       assertEquals(0, node0.getChildCount());
1336:       assertFalse(node0.isCall());
1337:       assertFalse(node0.isVar());
1338:       assertFalse(node0.isName());
1339:       assertFalse(node0.isNew());
1340:       assertFalse(node0.isAdd());
1341:       assertFalse(node0.isDelProp());
1342:       assertFalse(node0.isVoid());
1343:       assertFalse(node0.isNull());
1344:       assertFalse(node0.isIf());
1345:       assertFalse(node0.isSetterDef());
1346:       assertFalse(node0.isTrue());
1347:       assertFalse(node0.isNE());
1348:       assertFalse(node0.isEmpty());
1349:       assertFalse(node0.isIn());
1350:       assertFalse(node0.isReturn());
1351:       assertFalse(node0.isContinue());
1352:       assertFalse(node0.isTypeOf());
1353:       assertFalse(node0.hasChildren());
1354:       assertFalse(node0.isWhile());
1355:       assertFalse(node0.isAssign());
1356:       assertFalse(node0.isDec());
1357:       assertFalse(node0.isCast());
1358:       assertEquals((-1), node0.getSourcePosition());
1359:       assertFalse(node0.isString());
1360:       assertFalse(node0.isDebugger());
1361:       assertFalse(node0.isObjectLit());
1362:       assertFalse(node0.isNot());
1363:       assertFalse(node1.isAnd());
1364:       assertFalse(node1.isInstanceOf());
1365:       assertFalse(node1.isNot());
1366:       assertFalse(node1.isWith());
1367:       assertFalse(node1.isObjectLit());
1368:       assertFalse(node1.isComma());
1369:       assertFalse(node1.isScript());
1370:       assertFalse(node1.isThis());
1371:       assertFalse(node1.isGetProp());
1372:       assertFalse(node1.isHook());
1373:       assertFalse(node1.isAssign());
1374:       assertFalse(node1.isDec());
1375:       assertFalse(node1.isTypeOf());
1376:       assertEquals(4, node1.getType());
1377:       assertFalse(node1.isExprResult());
1378:       assertFalse(node1.isGetElem());
1379:       assertFalse(node1.isBreak());
1380:       assertEquals((-1), node1.getLineno());
1381:       assertFalse(node1.hasMoreThanOneChild());
1382:       assertTrue(node1.isReturn());
1383:       assertFalse(node1.isLabel());
1384:       assertEquals(1, node1.getChildCount());
1385:       assertFalse(node1.isOr());
1386:       assertFalse(node1.isNumber());
1387:       assertFalse(node1.isEmpty());
1388:       assertFalse(node1.isCase());
1389:       assertFalse(node1.isAdd());
1390:       assertFalse(node1.isAssignAdd());
1391:       assertFalse(node1.isNew());
1392:       assertFalse(node1.isDo());
1393:       assertFalse(node1.isArrayLit());
1394:       assertFalse(node1.isVar());
1395:       assertFalse(node1.isStringKey());
1396:       assertEquals((-1), node1.getCharno());
1397:       assertFalse(node1.isGetterDef());
1398:       assertFalse(node1.isSwitch());
1399:       assertFalse(node1.isParamList());
1400:       assertFalse(node1.isLabelName());
1401:       assertFalse(node1.isCatch());
1402:       assertFalse(node1.isDefaultCase());
1403:       assertFalse(node1.isSetterDef());
1404:       assertFalse(node1.isTry());
1405:       assertFalse(node1.isCall());
1406:       assertFalse(node1.isFor());
1407:       assertFalse(node1.isBlock());
1408:       assertTrue(node1.hasOneChild());
1409:       assertFalse(node1.isRegExp());
1410:       assertFalse(node1.isNull());
1411:       assertFalse(node1.isIf());
1412:       assertFalse(node1.isTrue());
1413:       assertFalse(node1.isNE());
1414:       assertFalse(node1.isName());
1415:       assertTrue(node1.hasChildren());
1416:       assertFalse(node1.isDelProp());
1417:       assertFalse(node1.isVoid());
1418:       assertFalse(node1.isIn());
1419:       assertFalse(node1.isContinue());
1420:       assertFalse(node1.isInc());
1421:       assertFalse(node1.isWhile());
1422:       assertFalse(node1.isString());
1423:       assertFalse(node1.isThrow());
1424:       assertFalse(node1.isCast());
1425:       assertFalse(node1.isFalse());
1426:       assertFalse(node1.isDebugger());
1427:       assertEquals((-1), node1.getSourcePosition());
1428:       assertFalse(node1.isFunction());
1429:       assertNotSame(node2, node0);
1430:       assertSame(node2, node1);
1431:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1432:       assertNotSame(node0, node1);
1433:       assertNotSame(node0, node2);
1434:       assertSame(node1, node2);
1435:       assertNotSame(node1, node0);
1436:       assertEquals(30, Node.VAR_ARGS_NAME);
1437:       assertEquals(49, Node.DIRECT_EVAL);
1438:       assertEquals(1, Node.DECR_FLAG);
1439:       assertEquals(57, Node.LAST_PROP);
1440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1441:       assertEquals(12, Node.COLUMN_BITS);
1442:       assertEquals(46, Node.IS_NAMESPACE);
1443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1444:       assertEquals(52, Node.LENGTH);
1445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1446:       assertEquals(32, Node.INCRDECR_PROP);
1447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1448:       assertEquals(29, Node.JSDOC_INFO_PROP);
1449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1450:       assertEquals(56, Node.CHANGE_TIME);
1451:       assertEquals(57, Node.REFLECTED_OBJECT);
1452:       assertEquals(48, Node.DIRECTIVES);
1453:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1454:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1456:       assertEquals(37, Node.OPT_ARG_NAME);
1457:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1458:       assertEquals(4095, Node.COLUMN_MASK);
1459:       assertEquals(43, Node.IS_CONSTANT_NAME);
1460:       assertEquals(36, Node.QUOTED_PROP);
1461:       assertEquals(53, Node.INPUT_ID);
1462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1463:       assertEquals(8, Node.FLAG_NO_THROWS);
1464:       assertEquals(55, Node.INFERRED_FUNCTION);
1465:       assertEquals(39, Node.EMPTY_BLOCK);
1466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1467:       assertEquals(50, Node.FREE_CALL);
1468:       assertEquals(2, Node.POST_FLAG);
1469:       assertEquals(47, Node.IS_DISPATCHER);
1470:       assertEquals(54, Node.SLASH_V);
1471:       assertEquals(40, Node.ORIGINALNAME_PROP);
1472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1474:       assertEquals(29, Node.JSDOC_INFO_PROP);
1475:       assertEquals(53, Node.INPUT_ID);
1476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1478:       assertEquals(37, Node.OPT_ARG_NAME);
1479:       assertEquals(43, Node.IS_CONSTANT_NAME);
1480:       assertEquals(56, Node.CHANGE_TIME);
1481:       assertEquals(46, Node.IS_NAMESPACE);
1482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1483:       assertEquals(36, Node.QUOTED_PROP);
1484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1485:       assertEquals(55, Node.INFERRED_FUNCTION);
1486:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1487:       assertEquals(2, Node.POST_FLAG);
1488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1489:       assertEquals(57, Node.LAST_PROP);
1490:       assertEquals(30, Node.VAR_ARGS_NAME);
1491:       assertEquals(47, Node.IS_DISPATCHER);
1492:       assertEquals(40, Node.ORIGINALNAME_PROP);
1493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1495:       assertEquals(39, Node.EMPTY_BLOCK);
1496:       assertEquals(8, Node.FLAG_NO_THROWS);
1497:       assertEquals(48, Node.DIRECTIVES);
1498:       assertEquals(54, Node.SLASH_V);
1499:       assertEquals(52, Node.LENGTH);
1500:       assertEquals(50, Node.FREE_CALL);
1501:       assertEquals(57, Node.REFLECTED_OBJECT);
1502:       assertEquals(1, Node.DECR_FLAG);
1503:       assertEquals(4095, Node.COLUMN_MASK);
1504:       assertEquals(32, Node.INCRDECR_PROP);
1505:       assertEquals(49, Node.DIRECT_EVAL);
1506:       assertEquals(12, Node.COLUMN_BITS);
1507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1508:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1510:       assertEquals(56, Node.CHANGE_TIME);
1511:       assertEquals(47, Node.IS_DISPATCHER);
1512:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1513:       assertEquals(37, Node.OPT_ARG_NAME);
1514:       assertEquals(2, Node.POST_FLAG);
1515:       assertEquals(43, Node.IS_CONSTANT_NAME);
1516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1517:       assertEquals(55, Node.INFERRED_FUNCTION);
1518:       assertEquals(49, Node.DIRECT_EVAL);
1519:       assertEquals(30, Node.VAR_ARGS_NAME);
1520:       assertEquals(36, Node.QUOTED_PROP);
1521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1522:       assertEquals(52, Node.LENGTH);
1523:       assertEquals(8, Node.FLAG_NO_THROWS);
1524:       assertEquals(57, Node.LAST_PROP);
1525:       assertEquals(29, Node.JSDOC_INFO_PROP);
1526:       assertEquals(53, Node.INPUT_ID);
1527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1528:       assertEquals(39, Node.EMPTY_BLOCK);
1529:       assertEquals(40, Node.ORIGINALNAME_PROP);
1530:       assertEquals(50, Node.FREE_CALL);
1531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1533:       assertEquals(57, Node.REFLECTED_OBJECT);
1534:       assertEquals(54, Node.SLASH_V);
1535:       assertEquals(48, Node.DIRECTIVES);
1536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1537:       assertEquals(1, Node.DECR_FLAG);
1538:       assertEquals(4095, Node.COLUMN_MASK);
1539:       assertEquals(46, Node.IS_NAMESPACE);
1540:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1541:       assertEquals(12, Node.COLUMN_BITS);
1542:       assertEquals(32, Node.INCRDECR_PROP);
1543:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1544:   }
1545: }
RegularFileObject[/tmp/EvoSuite_128_1628159304381/com/google/javascript/rhino/Node_128_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:24 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_128_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_128_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_128_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:24.727 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(simpleErrorReporter1);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
assertNotNull(listIterator0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
assertNotNull(immutableList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = new Node(4, node0, 2836, 47);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertEquals(47, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node1.isLabel();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertEquals(47, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

ImmutableList<JSType> immutableList1 = immutableList0.reverse();
assertTrue(immutableList1.equals((Object)immutableList0));
assertNotNull(immutableList1);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());

ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList1.equals((Object)immutableList0));
assertTrue(immutableList2.equals((Object)immutableList0));
assertNotNull(immutableList2);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());
assertEquals(0, immutableList2.size());
assertSame(immutableList1, immutableList2);
assertSame(immutableList2, immutableList1);

boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertEquals(47, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = node0.getChildCount();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertEquals(0, int0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean3 = node0.isNull();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node2 = node1.copyInformationFromForTree(node0);
assertFalse(node2.equals((Object)node0));
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node2);
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isNE());
assertTrue(node2.hasChildren());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertTrue(node2.isReturn());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertEquals(4, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertEquals(83, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertNotSame(node2, node0);
assertSame(node2, node1);
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);


[MASTER] 10:28:30.976 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_203_1628159310953/com/google/javascript/rhino/Node_203_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_203_1628159310953/com/google/javascript/rhino/Node_203_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:30.976 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:30.976 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:30.976 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:28:30.978 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_203_1628159310953/com/google/javascript/rhino/Node_203_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_203_tmp__ESTest extends Node_203_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(97);
21:       assertNotNull(node0);
22:       assertFalse(node0.isExprResult());
23:       assertFalse(node0.isScript());
24:       assertFalse(node0.hasOneChild());
25:       assertFalse(node0.isGetElem());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isCast());
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.hasChildren());
30:       assertFalse(node0.isDec());
31:       assertFalse(node0.isAssign());
32:       assertFalse(node0.isTypeOf());
33:       assertEquals((-1), node0.getLineno());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.isBreak());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isInc());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.isCall());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.isThrow());
42:       assertFalse(node0.isReturn());
43:       assertFalse(node0.isFalse());
44:       assertFalse(node0.isComma());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isAnd());
47:       assertFalse(node0.isString());
48:       assertEquals((-1), node0.getSourcePosition());
49:       assertFalse(node0.isObjectLit());
50:       assertFalse(node0.isNot());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.isFunction());
53:       assertFalse(node0.isDebugger());
54:       assertFalse(node0.isDefaultCase());
55:       assertFalse(node0.isTry());
56:       assertFalse(node0.isVoid());
57:       assertFalse(node0.isCatch());
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isRegExp());
61:       assertEquals(0, node0.getChildCount());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isNE());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isSwitch());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isBlock());
73:       assertFalse(node0.isAdd());
74:       assertEquals(97, node0.getType());
75:       assertFalse(node0.isCase());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isLabel());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isNumber());
87:       assertFalse(node0.isGetterDef());
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
90:       assertEquals(37, Node.OPT_ARG_NAME);
91:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(49, Node.DIRECT_EVAL);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(57, Node.LAST_PROP);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(30, Node.VAR_ARGS_NAME);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(8, Node.FLAG_NO_THROWS);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
122:       assertEquals(4095, Node.COLUMN_MASK);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertFalse(node0.isExprResult());
129:       assertFalse(node0.isScript());
130:       assertFalse(node0.hasOneChild());
131:       assertFalse(node0.isGetElem());
132:       assertFalse(node0.isInstanceOf());
133:       assertFalse(node0.isCast());
134:       assertFalse(node0.isWith());
135:       assertFalse(node0.hasChildren());
136:       assertFalse(node0.isDec());
137:       assertFalse(node0.isAssign());
138:       assertFalse(node0.isTypeOf());
139:       assertEquals((-1), node0.getLineno());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isBreak());
142:       assertFalse(node0.isOr());
143:       assertFalse(node0.isInc());
144:       assertFalse(node0.isWhile());
145:       assertFalse(node0.isCall());
146:       assertFalse(node0.isContinue());
147:       assertFalse(node0.isThrow());
148:       assertFalse(node0.isReturn());
149:       assertFalse(node0.isFalse());
150:       assertFalse(node0.isComma());
151:       assertFalse(node0.isGetProp());
152:       assertFalse(node0.isAnd());
153:       assertFalse(node0.isString());
154:       assertEquals((-1), node0.getSourcePosition());
155:       assertFalse(node0.isObjectLit());
156:       assertFalse(node0.isNot());
157:       assertFalse(node0.isTrue());
158:       assertFalse(node0.isFunction());
159:       assertFalse(node0.isDebugger());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isTry());
162:       assertFalse(node0.isVoid());
163:       assertFalse(node0.isCatch());
164:       assertFalse(node0.isArrayLit());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isRegExp());
167:       assertEquals(0, node0.getChildCount());
168:       assertFalse(node0.isSetterDef());
169:       assertFalse(node0.isNE());
170:       assertFalse(node0.isNull());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isName());
173:       assertFalse(node0.isDelProp());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isIn());
176:       assertFalse(node0.isSwitch());
177:       assertEquals((-1), node0.getCharno());
178:       assertFalse(node0.isBlock());
179:       assertFalse(node0.isAdd());
180:       assertEquals(97, node0.getType());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isDo());
184:       assertFalse(node0.hasMoreThanOneChild());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isLabel());
188:       assertFalse(node0.isParamList());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isNumber());
193:       assertFalse(node0.isGetterDef());
194:       assertEquals(32, Node.INCRDECR_PROP);
195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(49, Node.DIRECT_EVAL);
200:       assertEquals(56, Node.CHANGE_TIME);
201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(52, Node.LENGTH);
206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(47, Node.IS_DISPATCHER);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(50, Node.FREE_CALL);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(43, Node.IS_CONSTANT_NAME);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(57, Node.REFLECTED_OBJECT);
224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       
231:       boolean boolean0 = node0.isOr();
232:       assertFalse(boolean0);
233:       assertFalse(node0.isExprResult());
234:       assertFalse(node0.isScript());
235:       assertFalse(node0.hasOneChild());
236:       assertFalse(node0.isGetElem());
237:       assertFalse(node0.isInstanceOf());
238:       assertFalse(node0.isCast());
239:       assertFalse(node0.isWith());
240:       assertFalse(node0.hasChildren());
241:       assertFalse(node0.isDec());
242:       assertFalse(node0.isAssign());
243:       assertFalse(node0.isTypeOf());
244:       assertEquals((-1), node0.getLineno());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.isBreak());
247:       assertFalse(node0.isOr());
248:       assertFalse(node0.isInc());
249:       assertFalse(node0.isWhile());
250:       assertFalse(node0.isCall());
251:       assertFalse(node0.isContinue());
252:       assertFalse(node0.isThrow());
253:       assertFalse(node0.isReturn());
254:       assertFalse(node0.isFalse());
255:       assertFalse(node0.isComma());
256:       assertFalse(node0.isGetProp());
257:       assertFalse(node0.isAnd());
258:       assertFalse(node0.isString());
259:       assertEquals((-1), node0.getSourcePosition());
260:       assertFalse(node0.isObjectLit());
261:       assertFalse(node0.isNot());
262:       assertFalse(node0.isTrue());
263:       assertFalse(node0.isFunction());
264:       assertFalse(node0.isDebugger());
265:       assertFalse(node0.isDefaultCase());
266:       assertFalse(node0.isTry());
267:       assertFalse(node0.isVoid());
268:       assertFalse(node0.isCatch());
269:       assertFalse(node0.isArrayLit());
270:       assertFalse(node0.isFor());
271:       assertFalse(node0.isRegExp());
272:       assertEquals(0, node0.getChildCount());
273:       assertFalse(node0.isSetterDef());
274:       assertFalse(node0.isNE());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isIf());
277:       assertFalse(node0.isName());
278:       assertFalse(node0.isDelProp());
279:       assertFalse(node0.isEmpty());
280:       assertFalse(node0.isIn());
281:       assertFalse(node0.isSwitch());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isBlock());
284:       assertFalse(node0.isAdd());
285:       assertEquals(97, node0.getType());
286:       assertFalse(node0.isCase());
287:       assertFalse(node0.isNew());
288:       assertFalse(node0.isDo());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.isHook());
291:       assertFalse(node0.isVar());
292:       assertFalse(node0.isLabel());
293:       assertFalse(node0.isParamList());
294:       assertFalse(node0.isThis());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isStringKey());
297:       assertFalse(node0.isNumber());
298:       assertFalse(node0.isGetterDef());
299:       assertEquals(32, Node.INCRDECR_PROP);
300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(29, Node.JSDOC_INFO_PROP);
304:       assertEquals(49, Node.DIRECT_EVAL);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(54, Node.SLASH_V);
310:       assertEquals(52, Node.LENGTH);
311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(8, Node.FLAG_NO_THROWS);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(39, Node.EMPTY_BLOCK);
322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
326:       assertEquals(43, Node.IS_CONSTANT_NAME);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(57, Node.REFLECTED_OBJECT);
329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(4095, Node.COLUMN_MASK);
334:       assertEquals(12, Node.COLUMN_BITS);
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_203_1628159310953/com/google/javascript/rhino/Node_203_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_203_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_203_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_203_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:30.981 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(97);
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isReturn());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(97, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isReturn());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(97, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isReturn());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(97, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);


[MASTER] 10:28:32.232 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_220_1628159312062/com/google/javascript/rhino/Node_220_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_220_1628159312062/com/google/javascript/rhino/Node_220_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:32.232 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:32.232 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:32.233 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 986
[MASTER] 10:28:32.234 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_220_1628159312062/com/google/javascript/rhino/Node_220_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplatizedType;
16: import java.util.ArrayList;
17: import java.util.Collection;
18: import java.util.Iterator;
19: import java.util.List;
20: import java.util.ListIterator;
21: import org.evosuite.runtime.EvoRunner;
22: import org.evosuite.runtime.EvoRunnerParameters;
23: import org.evosuite.runtime.testdata.FileSystemHandling;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_220_tmp__ESTest extends Node_220_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
32:       assertNotNull(simpleErrorReporter0);
33:       
34:       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
35:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
36:       assertNotNull(simpleErrorReporter1);
37:       
38:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
39:       assertTrue(boolean0);
40:       
41:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
42:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
43:       assertNotNull(jSTypeRegistry0);
44:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
45:       
46:       ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
47:       assertNotNull(arrayList0);
48:       assertEquals(0, arrayList0.size());
49:       assertTrue(arrayList0.isEmpty());
50:       
51:       ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
52:       assertNotNull(listIterator0);
53:       assertEquals(0, arrayList0.size());
54:       assertTrue(arrayList0.isEmpty());
55:       assertFalse(listIterator0.hasPrevious());
56:       assertFalse(listIterator0.hasNext());
57:       
58:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
59:       assertNotNull(immutableList0);
60:       assertEquals(0, arrayList0.size());
61:       assertTrue(arrayList0.isEmpty());
62:       assertFalse(listIterator0.hasPrevious());
63:       assertFalse(listIterator0.hasNext());
64:       assertEquals(0, immutableList0.size());
65:       
66:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
67:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
68:       assertNotNull(node0);
69:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
70:       assertEquals(0, arrayList0.size());
71:       assertTrue(arrayList0.isEmpty());
72:       assertFalse(listIterator0.hasPrevious());
73:       assertFalse(listIterator0.hasNext());
74:       assertEquals(0, immutableList0.size());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isRegExp());
81:       assertFalse(node0.isWhile());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isCatch());
85:       assertFalse(node0.hasMoreThanOneChild());
86:       assertFalse(node0.isFor());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isReturn());
89:       assertFalse(node0.isIf());
90:       assertFalse(node0.isNE());
91:       assertEquals((-1), node0.getLineno());
92:       assertFalse(node0.isIn());
93:       assertFalse(node0.isDebugger());
94:       assertEquals((-1), node0.getSourcePosition());
95:       assertFalse(node0.isFunction());
96:       assertFalse(node0.isInc());
97:       assertFalse(node0.isCast());
98:       assertFalse(node0.isContinue());
99:       assertFalse(node0.isFalse());
100:       assertFalse(node0.isThrow());
101:       assertEquals(83, node0.getType());
102:       assertFalse(node0.isGetProp());
103:       assertFalse(node0.isBreak());
104:       assertTrue(node0.isParamList());
105:       assertFalse(node0.isAnd());
106:       assertFalse(node0.isObjectLit());
107:       assertFalse(node0.isNot());
108:       assertEquals((-1), node0.getCharno());
109:       assertFalse(node0.isScript());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isString());
112:       assertFalse(node0.isExprResult());
113:       assertFalse(node0.isCase());
114:       assertFalse(node0.isHook());
115:       assertFalse(node0.hasOneChild());
116:       assertFalse(node0.isInstanceOf());
117:       assertFalse(node0.isAssign());
118:       assertFalse(node0.isThis());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.hasChildren());
121:       assertFalse(node0.isNumber());
122:       assertFalse(node0.isDec());
123:       assertFalse(node0.isDelProp());
124:       assertFalse(node0.isGetterDef());
125:       assertFalse(node0.isTypeOf());
126:       assertFalse(node0.isGetElem());
127:       assertFalse(node0.isEmpty());
128:       assertFalse(node0.isLabelName());
129:       assertFalse(node0.isArrayLit());
130:       assertFalse(node0.isTrue());
131:       assertFalse(node0.isOr());
132:       assertFalse(node0.isDefaultCase());
133:       assertFalse(node0.isSwitch());
134:       assertFalse(node0.isNew());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isDo());
137:       assertEquals(0, node0.getChildCount());
138:       assertFalse(node0.isVar());
139:       assertFalse(node0.isAssignAdd());
140:       assertFalse(node0.isLabel());
141:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
143:       assertEquals(36, Node.QUOTED_PROP);
144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(47, Node.IS_DISPATCHER);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(29, Node.JSDOC_INFO_PROP);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(57, Node.REFLECTED_OBJECT);
161:       assertEquals(57, Node.LAST_PROP);
162:       assertEquals(52, Node.LENGTH);
163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
164:       assertEquals(1, Node.DECR_FLAG);
165:       assertEquals(32, Node.INCRDECR_PROP);
166:       assertEquals(30, Node.VAR_ARGS_NAME);
167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
168:       assertEquals(12, Node.COLUMN_BITS);
169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
170:       assertEquals(2, Node.POST_FLAG);
171:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
172:       assertEquals(40, Node.ORIGINALNAME_PROP);
173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
174:       assertEquals(50, Node.FREE_CALL);
175:       assertEquals(43, Node.IS_CONSTANT_NAME);
176:       assertEquals(46, Node.IS_NAMESPACE);
177:       assertEquals(54, Node.SLASH_V);
178:       
179:       Node node1 = new Node(4, node0, 2836, 47);
180:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
181:       assertFalse(node1.equals((Object)node0));
182:       assertNotNull(node1);
183:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
184:       assertEquals(0, arrayList0.size());
185:       assertTrue(arrayList0.isEmpty());
186:       assertFalse(listIterator0.hasPrevious());
187:       assertFalse(listIterator0.hasNext());
188:       assertEquals(0, immutableList0.size());
189:       assertFalse(node0.isNull());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isName());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isStringKey());
194:       assertFalse(node0.isRegExp());
195:       assertFalse(node0.isWhile());
196:       assertFalse(node0.isTry());
197:       assertFalse(node0.isVoid());
198:       assertFalse(node0.isCatch());
199:       assertFalse(node0.hasMoreThanOneChild());
200:       assertFalse(node0.isFor());
201:       assertFalse(node0.isBlock());
202:       assertFalse(node0.isReturn());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isNE());
205:       assertEquals((-1), node0.getLineno());
206:       assertFalse(node0.isIn());
207:       assertFalse(node0.isDebugger());
208:       assertEquals((-1), node0.getSourcePosition());
209:       assertFalse(node0.isFunction());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isContinue());
213:       assertFalse(node0.isFalse());
214:       assertFalse(node0.isThrow());
215:       assertEquals(83, node0.getType());
216:       assertFalse(node0.isGetProp());
217:       assertFalse(node0.isBreak());
218:       assertTrue(node0.isParamList());
219:       assertFalse(node0.isAnd());
220:       assertFalse(node0.isObjectLit());
221:       assertFalse(node0.isNot());
222:       assertEquals((-1), node0.getCharno());
223:       assertFalse(node0.isScript());
224:       assertFalse(node0.isWith());
225:       assertFalse(node0.isString());
226:       assertFalse(node0.isExprResult());
227:       assertFalse(node0.isCase());
228:       assertFalse(node0.isHook());
229:       assertFalse(node0.hasOneChild());
230:       assertFalse(node0.isInstanceOf());
231:       assertFalse(node0.isAssign());
232:       assertFalse(node0.isThis());
233:       assertFalse(node0.isComma());
234:       assertFalse(node0.hasChildren());
235:       assertFalse(node0.isNumber());
236:       assertFalse(node0.isDec());
237:       assertFalse(node0.isDelProp());
238:       assertFalse(node0.isGetterDef());
239:       assertFalse(node0.isTypeOf());
240:       assertFalse(node0.isGetElem());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isLabelName());
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isTrue());
245:       assertFalse(node0.isOr());
246:       assertFalse(node0.isDefaultCase());
247:       assertFalse(node0.isSwitch());
248:       assertFalse(node0.isNew());
249:       assertFalse(node0.isAdd());
250:       assertFalse(node0.isDo());
251:       assertEquals(0, node0.getChildCount());
252:       assertFalse(node0.isVar());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isLabel());
255:       assertEquals(47, node1.getCharno());
256:       assertFalse(node1.isParamList());
257:       assertFalse(node1.isNull());
258:       assertFalse(node1.isVoid());
259:       assertFalse(node1.isRegExp());
260:       assertFalse(node1.isName());
261:       assertFalse(node1.isFunction());
262:       assertFalse(node1.isCatch());
263:       assertFalse(node1.isCall());
264:       assertFalse(node1.isArrayLit());
265:       assertFalse(node1.isTry());
266:       assertFalse(node1.isStringKey());
267:       assertFalse(node1.isDebugger());
268:       assertTrue(node1.hasOneChild());
269:       assertFalse(node1.isFor());
270:       assertFalse(node1.isBlock());
271:       assertFalse(node1.isWhile());
272:       assertFalse(node1.isGetterDef());
273:       assertFalse(node1.isIn());
274:       assertEquals(1, node1.getChildCount());
275:       assertFalse(node1.hasMoreThanOneChild());
276:       assertFalse(node1.isNE());
277:       assertFalse(node1.isIf());
278:       assertTrue(node1.isReturn());
279:       assertFalse(node1.isContinue());
280:       assertTrue(node1.hasChildren());
281:       assertFalse(node1.isCast());
282:       assertFalse(node1.isThrow());
283:       assertEquals(2836, node1.getLineno());
284:       assertFalse(node1.isSetterDef());
285:       assertFalse(node1.isInc());
286:       assertFalse(node1.isInstanceOf());
287:       assertFalse(node1.isObjectLit());
288:       assertFalse(node1.isAnd());
289:       assertFalse(node1.isThis());
290:       assertFalse(node1.isBreak());
291:       assertFalse(node1.isComma());
292:       assertFalse(node1.isWith());
293:       assertFalse(node1.isFalse());
294:       assertFalse(node1.isExprResult());
295:       assertFalse(node1.isHook());
296:       assertFalse(node1.isNumber());
297:       assertFalse(node1.isString());
298:       assertFalse(node1.isNot());
299:       assertFalse(node1.isGetProp());
300:       assertFalse(node1.isCase());
301:       assertEquals(11616303, node1.getSourcePosition());
302:       assertFalse(node1.isScript());
303:       assertFalse(node1.isAssignAdd());
304:       assertFalse(node1.isOr());
305:       assertFalse(node1.isLabel());
306:       assertFalse(node1.isDec());
307:       assertFalse(node1.isSwitch());
308:       assertFalse(node1.isAssign());
309:       assertFalse(node1.isLabelName());
310:       assertFalse(node1.isDelProp());
311:       assertFalse(node1.isTypeOf());
312:       assertEquals(4, node1.getType());
313:       assertFalse(node1.isGetElem());
314:       assertFalse(node1.isVar());
315:       assertFalse(node1.isTrue());
316:       assertFalse(node1.isDefaultCase());
317:       assertFalse(node1.isDo());
318:       assertFalse(node1.isNew());
319:       assertFalse(node1.isEmpty());
320:       assertFalse(node1.isAdd());
321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(4095, Node.COLUMN_MASK);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
336:       assertEquals(55, Node.INFERRED_FUNCTION);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(56, Node.CHANGE_TIME);
339:       assertEquals(57, Node.REFLECTED_OBJECT);
340:       assertEquals(57, Node.LAST_PROP);
341:       assertEquals(52, Node.LENGTH);
342:       assertEquals(15, Node.NO_SIDE_EFFECTS);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(30, Node.VAR_ARGS_NAME);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
349:       assertEquals(2, Node.POST_FLAG);
350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(50, Node.FREE_CALL);
354:       assertEquals(43, Node.IS_CONSTANT_NAME);
355:       assertEquals(46, Node.IS_NAMESPACE);
356:       assertEquals(54, Node.SLASH_V);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(36, Node.QUOTED_PROP);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(53, Node.INPUT_ID);
363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
364:       assertEquals(12, Node.COLUMN_BITS);
365:       assertEquals(1, Node.DECR_FLAG);
366:       assertEquals(49, Node.DIRECT_EVAL);
367:       assertEquals(32, Node.INCRDECR_PROP);
368:       assertEquals(48, Node.DIRECTIVES);
369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(40, Node.ORIGINALNAME_PROP);
375:       assertEquals(57, Node.REFLECTED_OBJECT);
376:       assertEquals(8, Node.FLAG_NO_THROWS);
377:       assertEquals(39, Node.EMPTY_BLOCK);
378:       assertEquals(54, Node.SLASH_V);
379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
380:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
381:       assertEquals(52, Node.LENGTH);
382:       assertEquals(50, Node.FREE_CALL);
383:       assertEquals(55, Node.INFERRED_FUNCTION);
384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
386:       assertEquals(46, Node.IS_NAMESPACE);
387:       assertEquals(57, Node.LAST_PROP);
388:       assertEquals(43, Node.IS_CONSTANT_NAME);
389:       assertEquals(2, Node.POST_FLAG);
390:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
391:       assertEquals(47, Node.IS_DISPATCHER);
392:       assertEquals(30, Node.VAR_ARGS_NAME);
393:       
394:       boolean boolean1 = node1.isLabel();
395:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
396:       assertFalse(node0.equals((Object)node1));
397:       assertFalse(node1.equals((Object)node0));
398:       assertFalse(boolean1 == boolean0);
399:       assertFalse(boolean1);
400:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
401:       assertEquals(0, arrayList0.size());
402:       assertTrue(arrayList0.isEmpty());
403:       assertFalse(listIterator0.hasPrevious());
404:       assertFalse(listIterator0.hasNext());
405:       assertEquals(0, immutableList0.size());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isCall());
408:       assertFalse(node0.isName());
409:       assertFalse(node0.isSetterDef());
410:       assertFalse(node0.isStringKey());
411:       assertFalse(node0.isRegExp());
412:       assertFalse(node0.isWhile());
413:       assertFalse(node0.isTry());
414:       assertFalse(node0.isVoid());
415:       assertFalse(node0.isCatch());
416:       assertFalse(node0.hasMoreThanOneChild());
417:       assertFalse(node0.isFor());
418:       assertFalse(node0.isBlock());
419:       assertFalse(node0.isReturn());
420:       assertFalse(node0.isIf());
421:       assertFalse(node0.isNE());
422:       assertEquals((-1), node0.getLineno());
423:       assertFalse(node0.isIn());
424:       assertFalse(node0.isDebugger());
425:       assertEquals((-1), node0.getSourcePosition());
426:       assertFalse(node0.isFunction());
427:       assertFalse(node0.isInc());
428:       assertFalse(node0.isCast());
429:       assertFalse(node0.isContinue());
430:       assertFalse(node0.isFalse());
431:       assertFalse(node0.isThrow());
432:       assertEquals(83, node0.getType());
433:       assertFalse(node0.isGetProp());
434:       assertFalse(node0.isBreak());
435:       assertTrue(node0.isParamList());
436:       assertFalse(node0.isAnd());
437:       assertFalse(node0.isObjectLit());
438:       assertFalse(node0.isNot());
439:       assertEquals((-1), node0.getCharno());
440:       assertFalse(node0.isScript());
441:       assertFalse(node0.isWith());
442:       assertFalse(node0.isString());
443:       assertFalse(node0.isExprResult());
444:       assertFalse(node0.isCase());
445:       assertFalse(node0.isHook());
446:       assertFalse(node0.hasOneChild());
447:       assertFalse(node0.isInstanceOf());
448:       assertFalse(node0.isAssign());
449:       assertFalse(node0.isThis());
450:       assertFalse(node0.isComma());
451:       assertFalse(node0.hasChildren());
452:       assertFalse(node0.isNumber());
453:       assertFalse(node0.isDec());
454:       assertFalse(node0.isDelProp());
455:       assertFalse(node0.isGetterDef());
456:       assertFalse(node0.isTypeOf());
457:       assertFalse(node0.isGetElem());
458:       assertFalse(node0.isEmpty());
459:       assertFalse(node0.isLabelName());
460:       assertFalse(node0.isArrayLit());
461:       assertFalse(node0.isTrue());
462:       assertFalse(node0.isOr());
463:       assertFalse(node0.isDefaultCase());
464:       assertFalse(node0.isSwitch());
465:       assertFalse(node0.isNew());
466:       assertFalse(node0.isAdd());
467:       assertFalse(node0.isDo());
468:       assertEquals(0, node0.getChildCount());
469:       assertFalse(node0.isVar());
470:       assertFalse(node0.isAssignAdd());
471:       assertFalse(node0.isLabel());
472:       assertEquals(47, node1.getCharno());
473:       assertFalse(node1.isParamList());
474:       assertFalse(node1.isNull());
475:       assertFalse(node1.isVoid());
476:       assertFalse(node1.isRegExp());
477:       assertFalse(node1.isName());
478:       assertFalse(node1.isFunction());
479:       assertFalse(node1.isCatch());
480:       assertFalse(node1.isCall());
481:       assertFalse(node1.isArrayLit());
482:       assertFalse(node1.isTry());
483:       assertFalse(node1.isStringKey());
484:       assertFalse(node1.isDebugger());
485:       assertTrue(node1.hasOneChild());
486:       assertFalse(node1.isFor());
487:       assertFalse(node1.isBlock());
488:       assertFalse(node1.isWhile());
489:       assertFalse(node1.isGetterDef());
490:       assertFalse(node1.isIn());
491:       assertEquals(1, node1.getChildCount());
492:       assertFalse(node1.hasMoreThanOneChild());
493:       assertFalse(node1.isNE());
494:       assertFalse(node1.isIf());
495:       assertTrue(node1.isReturn());
496:       assertFalse(node1.isContinue());
497:       assertTrue(node1.hasChildren());
498:       assertFalse(node1.isCast());
499:       assertFalse(node1.isThrow());
500:       assertEquals(2836, node1.getLineno());
501:       assertFalse(node1.isSetterDef());
502:       assertFalse(node1.isInc());
503:       assertFalse(node1.isInstanceOf());
504:       assertFalse(node1.isObjectLit());
505:       assertFalse(node1.isAnd());
506:       assertFalse(node1.isThis());
507:       assertFalse(node1.isBreak());
508:       assertFalse(node1.isComma());
509:       assertFalse(node1.isWith());
510:       assertFalse(node1.isFalse());
511:       assertFalse(node1.isExprResult());
512:       assertFalse(node1.isHook());
513:       assertFalse(node1.isNumber());
514:       assertFalse(node1.isString());
515:       assertFalse(node1.isNot());
516:       assertFalse(node1.isGetProp());
517:       assertFalse(node1.isCase());
518:       assertEquals(11616303, node1.getSourcePosition());
519:       assertFalse(node1.isScript());
520:       assertFalse(node1.isAssignAdd());
521:       assertFalse(node1.isOr());
522:       assertFalse(node1.isLabel());
523:       assertFalse(node1.isDec());
524:       assertFalse(node1.isSwitch());
525:       assertFalse(node1.isAssign());
526:       assertFalse(node1.isLabelName());
527:       assertFalse(node1.isDelProp());
528:       assertFalse(node1.isTypeOf());
529:       assertEquals(4, node1.getType());
530:       assertFalse(node1.isGetElem());
531:       assertFalse(node1.isVar());
532:       assertFalse(node1.isTrue());
533:       assertFalse(node1.isDefaultCase());
534:       assertFalse(node1.isDo());
535:       assertFalse(node1.isNew());
536:       assertFalse(node1.isEmpty());
537:       assertFalse(node1.isAdd());
538:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
539:       assertNotSame(node0, node1);
540:       assertNotSame(node1, node0);
541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(4095, Node.COLUMN_MASK);
547:       assertEquals(47, Node.IS_DISPATCHER);
548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
549:       assertEquals(8, Node.FLAG_NO_THROWS);
550:       assertEquals(39, Node.EMPTY_BLOCK);
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
554:       assertEquals(29, Node.JSDOC_INFO_PROP);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(55, Node.INFERRED_FUNCTION);
557:       assertEquals(49, Node.DIRECT_EVAL);
558:       assertEquals(56, Node.CHANGE_TIME);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(52, Node.LENGTH);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(1, Node.DECR_FLAG);
564:       assertEquals(32, Node.INCRDECR_PROP);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
569:       assertEquals(2, Node.POST_FLAG);
570:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
571:       assertEquals(40, Node.ORIGINALNAME_PROP);
572:       assertEquals(51, Node.STATIC_SOURCE_FILE);
573:       assertEquals(50, Node.FREE_CALL);
574:       assertEquals(43, Node.IS_CONSTANT_NAME);
575:       assertEquals(46, Node.IS_NAMESPACE);
576:       assertEquals(54, Node.SLASH_V);
577:       assertEquals(56, Node.CHANGE_TIME);
578:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(36, Node.QUOTED_PROP);
581:       assertEquals(29, Node.JSDOC_INFO_PROP);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(12, Node.COLUMN_BITS);
585:       assertEquals(1, Node.DECR_FLAG);
586:       assertEquals(49, Node.DIRECT_EVAL);
587:       assertEquals(32, Node.INCRDECR_PROP);
588:       assertEquals(48, Node.DIRECTIVES);
589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
590:       assertEquals(37, Node.OPT_ARG_NAME);
591:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(40, Node.ORIGINALNAME_PROP);
595:       assertEquals(57, Node.REFLECTED_OBJECT);
596:       assertEquals(8, Node.FLAG_NO_THROWS);
597:       assertEquals(39, Node.EMPTY_BLOCK);
598:       assertEquals(54, Node.SLASH_V);
599:       assertEquals(15, Node.NO_SIDE_EFFECTS);
600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
601:       assertEquals(52, Node.LENGTH);
602:       assertEquals(50, Node.FREE_CALL);
603:       assertEquals(55, Node.INFERRED_FUNCTION);
604:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(57, Node.LAST_PROP);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(2, Node.POST_FLAG);
610:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
611:       assertEquals(47, Node.IS_DISPATCHER);
612:       assertEquals(30, Node.VAR_ARGS_NAME);
613:       
614:       ImmutableList<JSType> immutableList1 = immutableList0.reverse();
615:       assertTrue(immutableList1.equals((Object)immutableList0));
616:       assertNotNull(immutableList1);
617:       assertEquals(0, arrayList0.size());
618:       assertTrue(arrayList0.isEmpty());
619:       assertFalse(listIterator0.hasPrevious());
620:       assertFalse(listIterator0.hasNext());
621:       assertEquals(0, immutableList0.size());
622:       assertEquals(0, immutableList1.size());
623:       
624:       ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
625:       assertTrue(immutableList0.equals((Object)immutableList1));
626:       assertTrue(immutableList1.equals((Object)immutableList0));
627:       assertTrue(immutableList2.equals((Object)immutableList0));
628:       assertNotNull(immutableList2);
629:       assertEquals(0, arrayList0.size());
630:       assertTrue(arrayList0.isEmpty());
631:       assertFalse(listIterator0.hasPrevious());
632:       assertFalse(listIterator0.hasNext());
633:       assertEquals(0, immutableList0.size());
634:       assertEquals(0, immutableList1.size());
635:       assertEquals(0, immutableList2.size());
636:       assertSame(immutableList1, immutableList2);
637:       assertSame(immutableList2, immutableList1);
638:       
639:       boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
640:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
641:       assertTrue(immutableList0.equals((Object)immutableList1));
642:       assertTrue(immutableList0.equals((Object)immutableList2));
643:       assertFalse(node0.equals((Object)node1));
644:       assertFalse(node1.equals((Object)node0));
645:       assertFalse(boolean2 == boolean0);
646:       assertTrue(boolean2 == boolean1);
647:       assertFalse(boolean2);
648:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
649:       assertEquals(0, arrayList0.size());
650:       assertTrue(arrayList0.isEmpty());
651:       assertFalse(listIterator0.hasPrevious());
652:       assertFalse(listIterator0.hasNext());
653:       assertEquals(0, immutableList0.size());
654:       assertFalse(node0.isNull());
655:       assertFalse(node0.isCall());
656:       assertFalse(node0.isName());
657:       assertFalse(node0.isSetterDef());
658:       assertFalse(node0.isStringKey());
659:       assertFalse(node0.isRegExp());
660:       assertFalse(node0.isWhile());
661:       assertFalse(node0.isTry());
662:       assertFalse(node0.isVoid());
663:       assertFalse(node0.isCatch());
664:       assertFalse(node0.hasMoreThanOneChild());
665:       assertFalse(node0.isFor());
666:       assertFalse(node0.isBlock());
667:       assertFalse(node0.isReturn());
668:       assertFalse(node0.isIf());
669:       assertFalse(node0.isNE());
670:       assertEquals((-1), node0.getLineno());
671:       assertFalse(node0.isIn());
672:       assertFalse(node0.isDebugger());
673:       assertEquals((-1), node0.getSourcePosition());
674:       assertFalse(node0.isFunction());
675:       assertFalse(node0.isInc());
676:       assertFalse(node0.isCast());
677:       assertFalse(node0.isContinue());
678:       assertFalse(node0.isFalse());
679:       assertFalse(node0.isThrow());
680:       assertEquals(83, node0.getType());
681:       assertFalse(node0.isGetProp());
682:       assertFalse(node0.isBreak());
683:       assertTrue(node0.isParamList());
684:       assertFalse(node0.isAnd());
685:       assertFalse(node0.isObjectLit());
686:       assertFalse(node0.isNot());
687:       assertEquals((-1), node0.getCharno());
688:       assertFalse(node0.isScript());
689:       assertFalse(node0.isWith());
690:       assertFalse(node0.isString());
691:       assertFalse(node0.isExprResult());
692:       assertFalse(node0.isCase());
693:       assertFalse(node0.isHook());
694:       assertFalse(node0.hasOneChild());
695:       assertFalse(node0.isInstanceOf());
696:       assertFalse(node0.isAssign());
697:       assertFalse(node0.isThis());
698:       assertFalse(node0.isComma());
699:       assertFalse(node0.hasChildren());
700:       assertFalse(node0.isNumber());
701:       assertFalse(node0.isDec());
702:       assertFalse(node0.isDelProp());
703:       assertFalse(node0.isGetterDef());
704:       assertFalse(node0.isTypeOf());
705:       assertFalse(node0.isGetElem());
706:       assertFalse(node0.isEmpty());
707:       assertFalse(node0.isLabelName());
708:       assertFalse(node0.isArrayLit());
709:       assertFalse(node0.isTrue());
710:       assertFalse(node0.isOr());
711:       assertFalse(node0.isDefaultCase());
712:       assertFalse(node0.isSwitch());
713:       assertFalse(node0.isNew());
714:       assertFalse(node0.isAdd());
715:       assertFalse(node0.isDo());
716:       assertEquals(0, node0.getChildCount());
717:       assertFalse(node0.isVar());
718:       assertFalse(node0.isAssignAdd());
719:       assertFalse(node0.isLabel());
720:       assertEquals(47, node1.getCharno());
721:       assertFalse(node1.isParamList());
722:       assertFalse(node1.isNull());
723:       assertFalse(node1.isVoid());
724:       assertFalse(node1.isRegExp());
725:       assertFalse(node1.isName());
726:       assertFalse(node1.isFunction());
727:       assertFalse(node1.isCatch());
728:       assertFalse(node1.isCall());
729:       assertFalse(node1.isArrayLit());
730:       assertFalse(node1.isTry());
731:       assertFalse(node1.isStringKey());
732:       assertFalse(node1.isDebugger());
733:       assertTrue(node1.hasOneChild());
734:       assertFalse(node1.isFor());
735:       assertFalse(node1.isBlock());
736:       assertFalse(node1.isWhile());
737:       assertFalse(node1.isGetterDef());
738:       assertFalse(node1.isIn());
739:       assertEquals(1, node1.getChildCount());
740:       assertFalse(node1.hasMoreThanOneChild());
741:       assertFalse(node1.isNE());
742:       assertFalse(node1.isIf());
743:       assertTrue(node1.isReturn());
744:       assertFalse(node1.isContinue());
745:       assertTrue(node1.hasChildren());
746:       assertFalse(node1.isCast());
747:       assertFalse(node1.isThrow());
748:       assertEquals(2836, node1.getLineno());
749:       assertFalse(node1.isSetterDef());
750:       assertFalse(node1.isInc());
751:       assertFalse(node1.isInstanceOf());
752:       assertFalse(node1.isObjectLit());
753:       assertFalse(node1.isAnd());
754:       assertFalse(node1.isThis());
755:       assertFalse(node1.isBreak());
756:       assertFalse(node1.isComma());
757:       assertFalse(node1.isWith());
758:       assertFalse(node1.isFalse());
759:       assertFalse(node1.isExprResult());
760:       assertFalse(node1.isHook());
761:       assertFalse(node1.isNumber());
762:       assertFalse(node1.isString());
763:       assertFalse(node1.isNot());
764:       assertFalse(node1.isGetProp());
765:       assertFalse(node1.isCase());
766:       assertEquals(11616303, node1.getSourcePosition());
767:       assertFalse(node1.isScript());
768:       assertFalse(node1.isAssignAdd());
769:       assertFalse(node1.isOr());
770:       assertFalse(node1.isLabel());
771:       assertFalse(node1.isDec());
772:       assertFalse(node1.isSwitch());
773:       assertFalse(node1.isAssign());
774:       assertFalse(node1.isLabelName());
775:       assertFalse(node1.isDelProp());
776:       assertFalse(node1.isTypeOf());
777:       assertEquals(4, node1.getType());
778:       assertFalse(node1.isGetElem());
779:       assertFalse(node1.isVar());
780:       assertFalse(node1.isTrue());
781:       assertFalse(node1.isDefaultCase());
782:       assertFalse(node1.isDo());
783:       assertFalse(node1.isNew());
784:       assertFalse(node1.isEmpty());
785:       assertFalse(node1.isAdd());
786:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
787:       assertNotSame(node0, node1);
788:       assertNotSame(node1, node0);
789:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
790:       assertEquals(36, Node.QUOTED_PROP);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
794:       assertEquals(4095, Node.COLUMN_MASK);
795:       assertEquals(47, Node.IS_DISPATCHER);
796:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
797:       assertEquals(8, Node.FLAG_NO_THROWS);
798:       assertEquals(39, Node.EMPTY_BLOCK);
799:       assertEquals(37, Node.OPT_ARG_NAME);
800:       assertEquals(48, Node.DIRECTIVES);
801:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
802:       assertEquals(29, Node.JSDOC_INFO_PROP);
803:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
804:       assertEquals(55, Node.INFERRED_FUNCTION);
805:       assertEquals(49, Node.DIRECT_EVAL);
806:       assertEquals(56, Node.CHANGE_TIME);
807:       assertEquals(57, Node.REFLECTED_OBJECT);
808:       assertEquals(57, Node.LAST_PROP);
809:       assertEquals(52, Node.LENGTH);
810:       assertEquals(15, Node.NO_SIDE_EFFECTS);
811:       assertEquals(1, Node.DECR_FLAG);
812:       assertEquals(32, Node.INCRDECR_PROP);
813:       assertEquals(30, Node.VAR_ARGS_NAME);
814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
815:       assertEquals(12, Node.COLUMN_BITS);
816:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
817:       assertEquals(2, Node.POST_FLAG);
818:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
819:       assertEquals(40, Node.ORIGINALNAME_PROP);
820:       assertEquals(51, Node.STATIC_SOURCE_FILE);
821:       assertEquals(50, Node.FREE_CALL);
822:       assertEquals(43, Node.IS_CONSTANT_NAME);
823:       assertEquals(46, Node.IS_NAMESPACE);
824:       assertEquals(54, Node.SLASH_V);
825:       assertEquals(56, Node.CHANGE_TIME);
826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
827:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
828:       assertEquals(36, Node.QUOTED_PROP);
829:       assertEquals(29, Node.JSDOC_INFO_PROP);
830:       assertEquals(53, Node.INPUT_ID);
831:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
832:       assertEquals(12, Node.COLUMN_BITS);
833:       assertEquals(1, Node.DECR_FLAG);
834:       assertEquals(49, Node.DIRECT_EVAL);
835:       assertEquals(32, Node.INCRDECR_PROP);
836:       assertEquals(48, Node.DIRECTIVES);
837:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
838:       assertEquals(37, Node.OPT_ARG_NAME);
839:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(40, Node.ORIGINALNAME_PROP);
843:       assertEquals(57, Node.REFLECTED_OBJECT);
844:       assertEquals(8, Node.FLAG_NO_THROWS);
845:       assertEquals(39, Node.EMPTY_BLOCK);
846:       assertEquals(54, Node.SLASH_V);
847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
848:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
849:       assertEquals(52, Node.LENGTH);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(55, Node.INFERRED_FUNCTION);
852:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
854:       assertEquals(46, Node.IS_NAMESPACE);
855:       assertEquals(57, Node.LAST_PROP);
856:       assertEquals(43, Node.IS_CONSTANT_NAME);
857:       assertEquals(2, Node.POST_FLAG);
858:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
859:       assertEquals(47, Node.IS_DISPATCHER);
860:       assertEquals(30, Node.VAR_ARGS_NAME);
861:       
862:       int int0 = Node.COLUMN_MASK;
863:       assertEquals(4095, int0);
864:       
865:       boolean boolean3 = node0.isNull();
866:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
867:       assertTrue(immutableList0.equals((Object)immutableList1));
868:       assertTrue(immutableList0.equals((Object)immutableList2));
869:       assertFalse(node0.equals((Object)node1));
870:       assertTrue(boolean3 == boolean1);
871:       assertFalse(boolean3 == boolean0);
872:       assertTrue(boolean3 == boolean2);
873:       assertFalse(boolean3);
874:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
875:       assertEquals(0, arrayList0.size());
876:       assertTrue(arrayList0.isEmpty());
877:       assertFalse(listIterator0.hasPrevious());
878:       assertFalse(listIterator0.hasNext());
879:       assertEquals(0, immutableList0.size());
880:       assertFalse(node0.isNull());
881:       assertFalse(node0.isCall());
882:       assertFalse(node0.isName());
883:       assertFalse(node0.isSetterDef());
884:       assertFalse(node0.isStringKey());
885:       assertFalse(node0.isRegExp());
886:       assertFalse(node0.isWhile());
887:       assertFalse(node0.isTry());
888:       assertFalse(node0.isVoid());
889:       assertFalse(node0.isCatch());
890:       assertFalse(node0.hasMoreThanOneChild());
891:       assertFalse(node0.isFor());
892:       assertFalse(node0.isBlock());
893:       assertFalse(node0.isReturn());
894:       assertFalse(node0.isIf());
895:       assertFalse(node0.isNE());
896:       assertEquals((-1), node0.getLineno());
897:       assertFalse(node0.isIn());
898:       assertFalse(node0.isDebugger());
899:       assertEquals((-1), node0.getSourcePosition());
900:       assertFalse(node0.isFunction());
901:       assertFalse(node0.isInc());
902:       assertFalse(node0.isCast());
903:       assertFalse(node0.isContinue());
904:       assertFalse(node0.isFalse());
905:       assertFalse(node0.isThrow());
906:       assertEquals(83, node0.getType());
907:       assertFalse(node0.isGetProp());
908:       assertFalse(node0.isBreak());
909:       assertTrue(node0.isParamList());
910:       assertFalse(node0.isAnd());
911:       assertFalse(node0.isObjectLit());
912:       assertFalse(node0.isNot());
913:       assertEquals((-1), node0.getCharno());
914:       assertFalse(node0.isScript());
915:       assertFalse(node0.isWith());
916:       assertFalse(node0.isString());
917:       assertFalse(node0.isExprResult());
918:       assertFalse(node0.isCase());
919:       assertFalse(node0.isHook());
920:       assertFalse(node0.hasOneChild());
921:       assertFalse(node0.isInstanceOf());
922:       assertFalse(node0.isAssign());
923:       assertFalse(node0.isThis());
924:       assertFalse(node0.isComma());
925:       assertFalse(node0.hasChildren());
926:       assertFalse(node0.isNumber());
927:       assertFalse(node0.isDec());
928:       assertFalse(node0.isDelProp());
929:       assertFalse(node0.isGetterDef());
930:       assertFalse(node0.isTypeOf());
931:       assertFalse(node0.isGetElem());
932:       assertFalse(node0.isEmpty());
933:       assertFalse(node0.isLabelName());
934:       assertFalse(node0.isArrayLit());
935:       assertFalse(node0.isTrue());
936:       assertFalse(node0.isOr());
937:       assertFalse(node0.isDefaultCase());
938:       assertFalse(node0.isSwitch());
939:       assertFalse(node0.isNew());
940:       assertFalse(node0.isAdd());
941:       assertFalse(node0.isDo());
942:       assertEquals(0, node0.getChildCount());
943:       assertFalse(node0.isVar());
944:       assertFalse(node0.isAssignAdd());
945:       assertFalse(node0.isLabel());
946:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
947:       assertNotSame(node0, node1);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(36, Node.QUOTED_PROP);
950:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
951:       assertEquals(53, Node.INPUT_ID);
952:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
953:       assertEquals(4095, Node.COLUMN_MASK);
954:       assertEquals(47, Node.IS_DISPATCHER);
955:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
956:       assertEquals(8, Node.FLAG_NO_THROWS);
957:       assertEquals(39, Node.EMPTY_BLOCK);
958:       assertEquals(37, Node.OPT_ARG_NAME);
959:       assertEquals(48, Node.DIRECTIVES);
960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
961:       assertEquals(29, Node.JSDOC_INFO_PROP);
962:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
963:       assertEquals(55, Node.INFERRED_FUNCTION);
964:       assertEquals(49, Node.DIRECT_EVAL);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(57, Node.REFLECTED_OBJECT);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(52, Node.LENGTH);
969:       assertEquals(15, Node.NO_SIDE_EFFECTS);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(32, Node.INCRDECR_PROP);
972:       assertEquals(30, Node.VAR_ARGS_NAME);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(12, Node.COLUMN_BITS);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(2, Node.POST_FLAG);
977:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
978:       assertEquals(40, Node.ORIGINALNAME_PROP);
979:       assertEquals(51, Node.STATIC_SOURCE_FILE);
980:       assertEquals(50, Node.FREE_CALL);
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(46, Node.IS_NAMESPACE);
983:       assertEquals(54, Node.SLASH_V);
984:       
985:       Iterable<Node> iterable0 = node0.children();
986:       assertFalse(iterable0.contains(node1));
987:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
988:       assertTrue(immutableList0.equals((Object)immutableList1));
989:       assertTrue(immutableList0.equals((Object)immutableList2));
990:       assertFalse(node0.equals((Object)node1));
991:       assertNotNull(iterable0);
992:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
993:       assertEquals(0, arrayList0.size());
994:       assertTrue(arrayList0.isEmpty());
995:       assertFalse(listIterator0.hasPrevious());
996:       assertFalse(listIterator0.hasNext());
997:       assertEquals(0, immutableList0.size());
998:       assertFalse(node0.isNull());
999:       assertFalse(node0.isCall());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isSetterDef());
1002:       assertFalse(node0.isStringKey());
1003:       assertFalse(node0.isRegExp());
1004:       assertFalse(node0.isWhile());
1005:       assertFalse(node0.isTry());
1006:       assertFalse(node0.isVoid());
1007:       assertFalse(node0.isCatch());
1008:       assertFalse(node0.hasMoreThanOneChild());
1009:       assertFalse(node0.isFor());
1010:       assertFalse(node0.isBlock());
1011:       assertFalse(node0.isReturn());
1012:       assertFalse(node0.isIf());
1013:       assertFalse(node0.isNE());
1014:       assertEquals((-1), node0.getLineno());
1015:       assertFalse(node0.isIn());
1016:       assertFalse(node0.isDebugger());
1017:       assertEquals((-1), node0.getSourcePosition());
1018:       assertFalse(node0.isFunction());
1019:       assertFalse(node0.isInc());
1020:       assertFalse(node0.isCast());
1021:       assertFalse(node0.isContinue());
1022:       assertFalse(node0.isFalse());
1023:       assertFalse(node0.isThrow());
1024:       assertEquals(83, node0.getType());
1025:       assertFalse(node0.isGetProp());
1026:       assertFalse(node0.isBreak());
1027:       assertTrue(node0.isParamList());
1028:       assertFalse(node0.isAnd());
1029:       assertFalse(node0.isObjectLit());
1030:       assertFalse(node0.isNot());
1031:       assertEquals((-1), node0.getCharno());
1032:       assertFalse(node0.isScript());
1033:       assertFalse(node0.isWith());
1034:       assertFalse(node0.isString());
1035:       assertFalse(node0.isExprResult());
1036:       assertFalse(node0.isCase());
1037:       assertFalse(node0.isHook());
1038:       assertFalse(node0.hasOneChild());
1039:       assertFalse(node0.isInstanceOf());
1040:       assertFalse(node0.isAssign());
1041:       assertFalse(node0.isThis());
1042:       assertFalse(node0.isComma());
1043:       assertFalse(node0.hasChildren());
1044:       assertFalse(node0.isNumber());
1045:       assertFalse(node0.isDec());
1046:       assertFalse(node0.isDelProp());
1047:       assertFalse(node0.isGetterDef());
1048:       assertFalse(node0.isTypeOf());
1049:       assertFalse(node0.isGetElem());
1050:       assertFalse(node0.isEmpty());
1051:       assertFalse(node0.isLabelName());
1052:       assertFalse(node0.isArrayLit());
1053:       assertFalse(node0.isTrue());
1054:       assertFalse(node0.isOr());
1055:       assertFalse(node0.isDefaultCase());
1056:       assertFalse(node0.isSwitch());
1057:       assertFalse(node0.isNew());
1058:       assertFalse(node0.isAdd());
1059:       assertFalse(node0.isDo());
1060:       assertEquals(0, node0.getChildCount());
1061:       assertFalse(node0.isVar());
1062:       assertFalse(node0.isAssignAdd());
1063:       assertFalse(node0.isLabel());
1064:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1065:       assertNotSame(node0, node1);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(36, Node.QUOTED_PROP);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(53, Node.INPUT_ID);
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(4095, Node.COLUMN_MASK);
1072:       assertEquals(47, Node.IS_DISPATCHER);
1073:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1074:       assertEquals(8, Node.FLAG_NO_THROWS);
1075:       assertEquals(39, Node.EMPTY_BLOCK);
1076:       assertEquals(37, Node.OPT_ARG_NAME);
1077:       assertEquals(48, Node.DIRECTIVES);
1078:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1079:       assertEquals(29, Node.JSDOC_INFO_PROP);
1080:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1081:       assertEquals(55, Node.INFERRED_FUNCTION);
1082:       assertEquals(49, Node.DIRECT_EVAL);
1083:       assertEquals(56, Node.CHANGE_TIME);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(57, Node.LAST_PROP);
1086:       assertEquals(52, Node.LENGTH);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(1, Node.DECR_FLAG);
1089:       assertEquals(32, Node.INCRDECR_PROP);
1090:       assertEquals(30, Node.VAR_ARGS_NAME);
1091:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1092:       assertEquals(12, Node.COLUMN_BITS);
1093:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1094:       assertEquals(2, Node.POST_FLAG);
1095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1096:       assertEquals(40, Node.ORIGINALNAME_PROP);
1097:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1098:       assertEquals(50, Node.FREE_CALL);
1099:       assertEquals(43, Node.IS_CONSTANT_NAME);
1100:       assertEquals(46, Node.IS_NAMESPACE);
1101:       assertEquals(54, Node.SLASH_V);
1102:       
1103:       boolean boolean4 = node1.isString();
1104:       assertFalse(boolean4 == boolean0);
1105:       assertTrue(boolean4 == boolean1);
1106:       assertTrue(boolean4 == boolean2);
1107:       assertTrue(boolean4 == boolean3);
1108:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1109:       assertTrue(immutableList0.equals((Object)immutableList1));
1110:       assertTrue(immutableList0.equals((Object)immutableList2));
1111:       assertFalse(node0.equals((Object)node1));
1112:       assertFalse(node1.equals((Object)node0));
1113:       assertFalse(boolean4);
1114:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1115:       assertEquals(0, arrayList0.size());
1116:       assertTrue(arrayList0.isEmpty());
1117:       assertFalse(listIterator0.hasPrevious());
1118:       assertFalse(listIterator0.hasNext());
1119:       assertEquals(0, immutableList0.size());
1120:       assertFalse(node0.isNull());
1121:       assertFalse(node0.isCall());
1122:       assertFalse(node0.isName());
1123:       assertFalse(node0.isSetterDef());
1124:       assertFalse(node0.isStringKey());
1125:       assertFalse(node0.isRegExp());
1126:       assertFalse(node0.isWhile());
1127:       assertFalse(node0.isTry());
1128:       assertFalse(node0.isVoid());
1129:       assertFalse(node0.isCatch());
1130:       assertFalse(node0.hasMoreThanOneChild());
1131:       assertFalse(node0.isFor());
1132:       assertFalse(node0.isBlock());
1133:       assertFalse(node0.isReturn());
1134:       assertFalse(node0.isIf());
1135:       assertFalse(node0.isNE());
1136:       assertEquals((-1), node0.getLineno());
1137:       assertFalse(node0.isIn());
1138:       assertFalse(node0.isDebugger());
1139:       assertEquals((-1), node0.getSourcePosition());
1140:       assertFalse(node0.isFunction());
1141:       assertFalse(node0.isInc());
1142:       assertFalse(node0.isCast());
1143:       assertFalse(node0.isContinue());
1144:       assertFalse(node0.isFalse());
1145:       assertFalse(node0.isThrow());
1146:       assertEquals(83, node0.getType());
1147:       assertFalse(node0.isGetProp());
1148:       assertFalse(node0.isBreak());
1149:       assertTrue(node0.isParamList());
1150:       assertFalse(node0.isAnd());
1151:       assertFalse(node0.isObjectLit());
1152:       assertFalse(node0.isNot());
1153:       assertEquals((-1), node0.getCharno());
1154:       assertFalse(node0.isScript());
1155:       assertFalse(node0.isWith());
1156:       assertFalse(node0.isString());
1157:       assertFalse(node0.isExprResult());
1158:       assertFalse(node0.isCase());
1159:       assertFalse(node0.isHook());
1160:       assertFalse(node0.hasOneChild());
1161:       assertFalse(node0.isInstanceOf());
1162:       assertFalse(node0.isAssign());
1163:       assertFalse(node0.isThis());
1164:       assertFalse(node0.isComma());
1165:       assertFalse(node0.hasChildren());
1166:       assertFalse(node0.isNumber());
1167:       assertFalse(node0.isDec());
1168:       assertFalse(node0.isDelProp());
1169:       assertFalse(node0.isGetterDef());
1170:       assertFalse(node0.isTypeOf());
1171:       assertFalse(node0.isGetElem());
1172:       assertFalse(node0.isEmpty());
1173:       assertFalse(node0.isLabelName());
1174:       assertFalse(node0.isArrayLit());
1175:       assertFalse(node0.isTrue());
1176:       assertFalse(node0.isOr());
1177:       assertFalse(node0.isDefaultCase());
1178:       assertFalse(node0.isSwitch());
1179:       assertFalse(node0.isNew());
1180:       assertFalse(node0.isAdd());
1181:       assertFalse(node0.isDo());
1182:       assertEquals(0, node0.getChildCount());
1183:       assertFalse(node0.isVar());
1184:       assertFalse(node0.isAssignAdd());
1185:       assertFalse(node0.isLabel());
1186:       assertEquals(47, node1.getCharno());
1187:       assertFalse(node1.isParamList());
1188:       assertFalse(node1.isNull());
1189:       assertFalse(node1.isVoid());
1190:       assertFalse(node1.isRegExp());
1191:       assertFalse(node1.isName());
1192:       assertFalse(node1.isFunction());
1193:       assertFalse(node1.isCatch());
1194:       assertFalse(node1.isCall());
1195:       assertFalse(node1.isArrayLit());
1196:       assertFalse(node1.isTry());
1197:       assertFalse(node1.isStringKey());
1198:       assertFalse(node1.isDebugger());
1199:       assertTrue(node1.hasOneChild());
1200:       assertFalse(node1.isFor());
1201:       assertFalse(node1.isBlock());
1202:       assertFalse(node1.isWhile());
1203:       assertFalse(node1.isGetterDef());
1204:       assertFalse(node1.isIn());
1205:       assertEquals(1, node1.getChildCount());
1206:       assertFalse(node1.hasMoreThanOneChild());
1207:       assertFalse(node1.isNE());
1208:       assertFalse(node1.isIf());
1209:       assertTrue(node1.isReturn());
1210:       assertFalse(node1.isContinue());
1211:       assertTrue(node1.hasChildren());
1212:       assertFalse(node1.isCast());
1213:       assertFalse(node1.isThrow());
1214:       assertEquals(2836, node1.getLineno());
1215:       assertFalse(node1.isSetterDef());
1216:       assertFalse(node1.isInc());
1217:       assertFalse(node1.isInstanceOf());
1218:       assertFalse(node1.isObjectLit());
1219:       assertFalse(node1.isAnd());
1220:       assertFalse(node1.isThis());
1221:       assertFalse(node1.isBreak());
1222:       assertFalse(node1.isComma());
1223:       assertFalse(node1.isWith());
1224:       assertFalse(node1.isFalse());
1225:       assertFalse(node1.isExprResult());
1226:       assertFalse(node1.isHook());
1227:       assertFalse(node1.isNumber());
1228:       assertFalse(node1.isString());
1229:       assertFalse(node1.isNot());
1230:       assertFalse(node1.isGetProp());
1231:       assertFalse(node1.isCase());
1232:       assertEquals(11616303, node1.getSourcePosition());
1233:       assertFalse(node1.isScript());
1234:       assertFalse(node1.isAssignAdd());
1235:       assertFalse(node1.isOr());
1236:       assertFalse(node1.isLabel());
1237:       assertFalse(node1.isDec());
1238:       assertFalse(node1.isSwitch());
1239:       assertFalse(node1.isAssign());
1240:       assertFalse(node1.isLabelName());
1241:       assertFalse(node1.isDelProp());
1242:       assertFalse(node1.isTypeOf());
1243:       assertEquals(4, node1.getType());
1244:       assertFalse(node1.isGetElem());
1245:       assertFalse(node1.isVar());
1246:       assertFalse(node1.isTrue());
1247:       assertFalse(node1.isDefaultCase());
1248:       assertFalse(node1.isDo());
1249:       assertFalse(node1.isNew());
1250:       assertFalse(node1.isEmpty());
1251:       assertFalse(node1.isAdd());
1252:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1253:       assertNotSame(node0, node1);
1254:       assertNotSame(node1, node0);
1255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1256:       assertEquals(36, Node.QUOTED_PROP);
1257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1258:       assertEquals(53, Node.INPUT_ID);
1259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1260:       assertEquals(4095, Node.COLUMN_MASK);
1261:       assertEquals(47, Node.IS_DISPATCHER);
1262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1263:       assertEquals(8, Node.FLAG_NO_THROWS);
1264:       assertEquals(39, Node.EMPTY_BLOCK);
1265:       assertEquals(37, Node.OPT_ARG_NAME);
1266:       assertEquals(48, Node.DIRECTIVES);
1267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1268:       assertEquals(29, Node.JSDOC_INFO_PROP);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(55, Node.INFERRED_FUNCTION);
1271:       assertEquals(49, Node.DIRECT_EVAL);
1272:       assertEquals(56, Node.CHANGE_TIME);
1273:       assertEquals(57, Node.REFLECTED_OBJECT);
1274:       assertEquals(57, Node.LAST_PROP);
1275:       assertEquals(52, Node.LENGTH);
1276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1277:       assertEquals(1, Node.DECR_FLAG);
1278:       assertEquals(32, Node.INCRDECR_PROP);
1279:       assertEquals(30, Node.VAR_ARGS_NAME);
1280:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1281:       assertEquals(12, Node.COLUMN_BITS);
1282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1283:       assertEquals(2, Node.POST_FLAG);
1284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1285:       assertEquals(40, Node.ORIGINALNAME_PROP);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(43, Node.IS_CONSTANT_NAME);
1289:       assertEquals(46, Node.IS_NAMESPACE);
1290:       assertEquals(54, Node.SLASH_V);
1291:       assertEquals(56, Node.CHANGE_TIME);
1292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1293:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1294:       assertEquals(36, Node.QUOTED_PROP);
1295:       assertEquals(29, Node.JSDOC_INFO_PROP);
1296:       assertEquals(53, Node.INPUT_ID);
1297:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1298:       assertEquals(12, Node.COLUMN_BITS);
1299:       assertEquals(1, Node.DECR_FLAG);
1300:       assertEquals(49, Node.DIRECT_EVAL);
1301:       assertEquals(32, Node.INCRDECR_PROP);
1302:       assertEquals(48, Node.DIRECTIVES);
1303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1304:       assertEquals(37, Node.OPT_ARG_NAME);
1305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1307:       assertEquals(4095, Node.COLUMN_MASK);
1308:       assertEquals(40, Node.ORIGINALNAME_PROP);
1309:       assertEquals(57, Node.REFLECTED_OBJECT);
1310:       assertEquals(8, Node.FLAG_NO_THROWS);
1311:       assertEquals(39, Node.EMPTY_BLOCK);
1312:       assertEquals(54, Node.SLASH_V);
1313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1315:       assertEquals(52, Node.LENGTH);
1316:       assertEquals(50, Node.FREE_CALL);
1317:       assertEquals(55, Node.INFERRED_FUNCTION);
1318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1320:       assertEquals(46, Node.IS_NAMESPACE);
1321:       assertEquals(57, Node.LAST_PROP);
1322:       assertEquals(43, Node.IS_CONSTANT_NAME);
1323:       assertEquals(2, Node.POST_FLAG);
1324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1325:       assertEquals(47, Node.IS_DISPATCHER);
1326:       assertEquals(30, Node.VAR_ARGS_NAME);
1327:   }
1328: }
RegularFileObject[/tmp/EvoSuite_220_1628159312062/com/google/javascript/rhino/Node_220_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_220_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_220_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_220_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:32.270 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(simpleErrorReporter1);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
assertNotNull(listIterator0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
assertNotNull(immutableList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node1 = new Node(4, node0, 2836, 47);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(47, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isReturn());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isSwitch());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean1 = node1.isLabel();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(47, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isReturn());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isSwitch());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

ImmutableList<JSType> immutableList1 = immutableList0.reverse();
assertTrue(immutableList1.equals((Object)immutableList0));
assertNotNull(immutableList1);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());

ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList1.equals((Object)immutableList0));
assertTrue(immutableList2.equals((Object)immutableList0));
assertNotNull(immutableList2);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());
assertEquals(0, immutableList2.size());
assertSame(immutableList1, immutableList2);
assertSame(immutableList2, immutableList1);

boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(47, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isReturn());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isSwitch());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

int int0 = Node.COLUMN_MASK;
assertEquals(4095, int0);

boolean boolean3 = node0.isNull();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean4 = node1.isString();
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(83, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(47, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isReturn());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isSwitch());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertEquals(4, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);


[MASTER] 10:28:32.372 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_222_1628159312290/com/google/javascript/rhino/Node_222_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_222_1628159312290/com/google/javascript/rhino/Node_222_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:32.372 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:32.372 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:32.372 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 765
[MASTER] 10:28:32.373 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_222_1628159312290/com/google/javascript/rhino/Node_222_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_222_tmp__ESTest extends Node_222_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("%\"/WB>EC'c", (-396), (-396));
21:       assertNotNull(node0);
22:       assertFalse(node0.isBreak());
23:       assertFalse(node0.isThis());
24:       assertFalse(node0.isThrow());
25:       assertFalse(node0.isGetProp());
26:       assertEquals((-1), node0.getCharno());
27:       assertFalse(node0.isNot());
28:       assertFalse(node0.isObjectLit());
29:       assertFalse(node0.isScript());
30:       assertFalse(node0.isExprResult());
31:       assertFalse(node0.isCase());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isHook());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isAssign());
36:       assertFalse(node0.isWith());
37:       assertFalse(node0.isIf());
38:       assertFalse(node0.hasChildren());
39:       assertFalse(node0.isDec());
40:       assertEquals((-1), node0.getSourcePosition());
41:       assertFalse(node0.isNE());
42:       assertFalse(node0.isIn());
43:       assertFalse(node0.isDebugger());
44:       assertFalse(node0.isInc());
45:       assertEquals(40, node0.getType());
46:       assertFalse(node0.isAnd());
47:       assertFalse(node0.isCast());
48:       assertFalse(node0.isContinue());
49:       assertFalse(node0.isFalse());
50:       assertFalse(node0.isFunction());
51:       assertFalse(node0.isNull());
52:       assertFalse(node0.isSetterDef());
53:       assertFalse(node0.isStringKey());
54:       assertFalse(node0.isParamList());
55:       assertFalse(node0.isName());
56:       assertFalse(node0.isAdd());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isTrue());
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isTry());
61:       assertTrue(node0.isString());
62:       assertEquals((-1), node0.getLineno());
63:       assertFalse(node0.isCatch());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isBlock());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.hasMoreThanOneChild());
68:       assertFalse(node0.isRegExp());
69:       assertFalse(node0.isTypeOf());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isGetElem());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isNumber());
80:       assertFalse(node0.isDefaultCase());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.isSwitch());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isArrayLit());
86:       assertFalse(node0.isVar());
87:       assertFalse(node0.isLabel());
88:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
89:       assertEquals(43, Node.IS_CONSTANT_NAME);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(8, Node.FLAG_NO_THROWS);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(56, Node.CHANGE_TIME);
98:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(55, Node.INFERRED_FUNCTION);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(36, Node.QUOTED_PROP);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(54, Node.SLASH_V);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(1, Node.DECR_FLAG);
113:       assertEquals(40, Node.ORIGINALNAME_PROP);
114:       assertEquals(12, Node.COLUMN_BITS);
115:       assertEquals(30, Node.VAR_ARGS_NAME);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       
125:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
126:       assertNotNull(node_AncestorIterable0);
127:       assertFalse(node0.isBreak());
128:       assertFalse(node0.isThis());
129:       assertFalse(node0.isThrow());
130:       assertFalse(node0.isGetProp());
131:       assertEquals((-1), node0.getCharno());
132:       assertFalse(node0.isNot());
133:       assertFalse(node0.isObjectLit());
134:       assertFalse(node0.isScript());
135:       assertFalse(node0.isExprResult());
136:       assertFalse(node0.isCase());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isHook());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isAssign());
141:       assertFalse(node0.isWith());
142:       assertFalse(node0.isIf());
143:       assertFalse(node0.hasChildren());
144:       assertFalse(node0.isDec());
145:       assertEquals((-1), node0.getSourcePosition());
146:       assertFalse(node0.isNE());
147:       assertFalse(node0.isIn());
148:       assertFalse(node0.isDebugger());
149:       assertFalse(node0.isInc());
150:       assertEquals(40, node0.getType());
151:       assertFalse(node0.isAnd());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isContinue());
154:       assertFalse(node0.isFalse());
155:       assertFalse(node0.isFunction());
156:       assertFalse(node0.isNull());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isParamList());
160:       assertFalse(node0.isName());
161:       assertFalse(node0.isAdd());
162:       assertFalse(node0.isWhile());
163:       assertFalse(node0.isTrue());
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isTry());
166:       assertTrue(node0.isString());
167:       assertEquals((-1), node0.getLineno());
168:       assertFalse(node0.isCatch());
169:       assertFalse(node0.isCall());
170:       assertFalse(node0.isBlock());
171:       assertFalse(node0.isReturn());
172:       assertFalse(node0.hasMoreThanOneChild());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isTypeOf());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isGetElem());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isLabelName());
181:       assertFalse(node0.isDelProp());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isNumber());
185:       assertFalse(node0.isDefaultCase());
186:       assertFalse(node0.isNew());
187:       assertFalse(node0.isDo());
188:       assertFalse(node0.isSwitch());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isArrayLit());
191:       assertFalse(node0.isVar());
192:       assertFalse(node0.isLabel());
193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(53, Node.INPUT_ID);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
198:       assertEquals(47, Node.IS_DISPATCHER);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(56, Node.CHANGE_TIME);
203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
204:       assertEquals(29, Node.JSDOC_INFO_PROP);
205:       assertEquals(48, Node.DIRECTIVES);
206:       assertEquals(37, Node.OPT_ARG_NAME);
207:       assertEquals(55, Node.INFERRED_FUNCTION);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(54, Node.SLASH_V);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(1, Node.DECR_FLAG);
218:       assertEquals(40, Node.ORIGINALNAME_PROP);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(30, Node.VAR_ARGS_NAME);
221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
229:       
230:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
231:       assertNotNull(node_SideEffectFlags0);
232:       assertEquals(0, node_SideEffectFlags0.valueOf());
233:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
234:       
235:       boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
236:       assertTrue(boolean0);
237:       assertEquals(0, node_SideEffectFlags0.valueOf());
238:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
239:       
240:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
241:       assertNotNull(node_FileLevelJsDocBuilder0);
242:       assertFalse(node0.isBreak());
243:       assertFalse(node0.isThis());
244:       assertFalse(node0.isThrow());
245:       assertFalse(node0.isGetProp());
246:       assertEquals((-1), node0.getCharno());
247:       assertFalse(node0.isNot());
248:       assertFalse(node0.isObjectLit());
249:       assertFalse(node0.isScript());
250:       assertFalse(node0.isExprResult());
251:       assertFalse(node0.isCase());
252:       assertFalse(node0.isInstanceOf());
253:       assertFalse(node0.isHook());
254:       assertFalse(node0.isComma());
255:       assertFalse(node0.isAssign());
256:       assertFalse(node0.isWith());
257:       assertFalse(node0.isIf());
258:       assertFalse(node0.hasChildren());
259:       assertFalse(node0.isDec());
260:       assertEquals((-1), node0.getSourcePosition());
261:       assertFalse(node0.isNE());
262:       assertFalse(node0.isIn());
263:       assertFalse(node0.isDebugger());
264:       assertFalse(node0.isInc());
265:       assertEquals(40, node0.getType());
266:       assertFalse(node0.isAnd());
267:       assertFalse(node0.isCast());
268:       assertFalse(node0.isContinue());
269:       assertFalse(node0.isFalse());
270:       assertFalse(node0.isFunction());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isStringKey());
274:       assertFalse(node0.isParamList());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isAdd());
277:       assertFalse(node0.isWhile());
278:       assertFalse(node0.isTrue());
279:       assertFalse(node0.isVoid());
280:       assertFalse(node0.isTry());
281:       assertTrue(node0.isString());
282:       assertEquals((-1), node0.getLineno());
283:       assertFalse(node0.isCatch());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.isBlock());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.hasMoreThanOneChild());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isTypeOf());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isGetElem());
294:       assertFalse(node0.isAssignAdd());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isDelProp());
297:       assertFalse(node0.hasOneChild());
298:       assertFalse(node0.isOr());
299:       assertFalse(node0.isNumber());
300:       assertFalse(node0.isDefaultCase());
301:       assertFalse(node0.isNew());
302:       assertFalse(node0.isDo());
303:       assertFalse(node0.isSwitch());
304:       assertEquals(0, node0.getChildCount());
305:       assertFalse(node0.isArrayLit());
306:       assertFalse(node0.isVar());
307:       assertFalse(node0.isLabel());
308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(53, Node.INPUT_ID);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
313:       assertEquals(47, Node.IS_DISPATCHER);
314:       assertEquals(8, Node.FLAG_NO_THROWS);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(57, Node.LAST_PROP);
329:       assertEquals(54, Node.SLASH_V);
330:       assertEquals(49, Node.DIRECT_EVAL);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(40, Node.ORIGINALNAME_PROP);
334:       assertEquals(12, Node.COLUMN_BITS);
335:       assertEquals(30, Node.VAR_ARGS_NAME);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       assertEquals(2, Node.POST_FLAG);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       assertEquals(32, Node.INCRDECR_PROP);
340:       assertEquals(46, Node.IS_NAMESPACE);
341:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       
345:       node_FileLevelJsDocBuilder0.append("9;y:y_rDHq/oi");
346:       assertFalse(node0.isBreak());
347:       assertFalse(node0.isThis());
348:       assertFalse(node0.isThrow());
349:       assertFalse(node0.isGetProp());
350:       assertEquals((-1), node0.getCharno());
351:       assertFalse(node0.isNot());
352:       assertFalse(node0.isObjectLit());
353:       assertFalse(node0.isScript());
354:       assertFalse(node0.isExprResult());
355:       assertFalse(node0.isCase());
356:       assertFalse(node0.isInstanceOf());
357:       assertFalse(node0.isHook());
358:       assertFalse(node0.isComma());
359:       assertFalse(node0.isAssign());
360:       assertFalse(node0.isWith());
361:       assertFalse(node0.isIf());
362:       assertFalse(node0.hasChildren());
363:       assertFalse(node0.isDec());
364:       assertEquals((-1), node0.getSourcePosition());
365:       assertFalse(node0.isNE());
366:       assertFalse(node0.isIn());
367:       assertFalse(node0.isDebugger());
368:       assertFalse(node0.isInc());
369:       assertEquals(40, node0.getType());
370:       assertFalse(node0.isAnd());
371:       assertFalse(node0.isCast());
372:       assertFalse(node0.isContinue());
373:       assertFalse(node0.isFalse());
374:       assertFalse(node0.isFunction());
375:       assertFalse(node0.isNull());
376:       assertFalse(node0.isSetterDef());
377:       assertFalse(node0.isStringKey());
378:       assertFalse(node0.isParamList());
379:       assertFalse(node0.isName());
380:       assertFalse(node0.isAdd());
381:       assertFalse(node0.isWhile());
382:       assertFalse(node0.isTrue());
383:       assertFalse(node0.isVoid());
384:       assertFalse(node0.isTry());
385:       assertTrue(node0.isString());
386:       assertEquals((-1), node0.getLineno());
387:       assertFalse(node0.isCatch());
388:       assertFalse(node0.isCall());
389:       assertFalse(node0.isBlock());
390:       assertFalse(node0.isReturn());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isRegExp());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isGetterDef());
395:       assertFalse(node0.isFor());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isGetElem());
398:       assertFalse(node0.isAssignAdd());
399:       assertFalse(node0.isLabelName());
400:       assertFalse(node0.isDelProp());
401:       assertFalse(node0.hasOneChild());
402:       assertFalse(node0.isOr());
403:       assertFalse(node0.isNumber());
404:       assertFalse(node0.isDefaultCase());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isDo());
407:       assertFalse(node0.isSwitch());
408:       assertEquals(0, node0.getChildCount());
409:       assertFalse(node0.isArrayLit());
410:       assertFalse(node0.isVar());
411:       assertFalse(node0.isLabel());
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(43, Node.IS_CONSTANT_NAME);
414:       assertEquals(53, Node.INPUT_ID);
415:       assertEquals(4095, Node.COLUMN_MASK);
416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(8, Node.FLAG_NO_THROWS);
419:       assertEquals(39, Node.EMPTY_BLOCK);
420:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
423:       assertEquals(29, Node.JSDOC_INFO_PROP);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(37, Node.OPT_ARG_NAME);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(57, Node.LAST_PROP);
433:       assertEquals(54, Node.SLASH_V);
434:       assertEquals(49, Node.DIRECT_EVAL);
435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(40, Node.ORIGINALNAME_PROP);
438:       assertEquals(12, Node.COLUMN_BITS);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
441:       assertEquals(2, Node.POST_FLAG);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       assertEquals(32, Node.INCRDECR_PROP);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
448:       
449:       node0.setString("%\"/WB>EC'c");
450:       assertFalse(node0.isBreak());
451:       assertFalse(node0.isThis());
452:       assertFalse(node0.isThrow());
453:       assertFalse(node0.isGetProp());
454:       assertEquals((-1), node0.getCharno());
455:       assertFalse(node0.isNot());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isScript());
458:       assertFalse(node0.isExprResult());
459:       assertFalse(node0.isCase());
460:       assertFalse(node0.isInstanceOf());
461:       assertFalse(node0.isHook());
462:       assertFalse(node0.isComma());
463:       assertFalse(node0.isAssign());
464:       assertFalse(node0.isWith());
465:       assertFalse(node0.isIf());
466:       assertFalse(node0.hasChildren());
467:       assertFalse(node0.isDec());
468:       assertEquals((-1), node0.getSourcePosition());
469:       assertFalse(node0.isNE());
470:       assertFalse(node0.isIn());
471:       assertFalse(node0.isDebugger());
472:       assertFalse(node0.isInc());
473:       assertEquals(40, node0.getType());
474:       assertFalse(node0.isAnd());
475:       assertFalse(node0.isCast());
476:       assertFalse(node0.isContinue());
477:       assertFalse(node0.isFalse());
478:       assertFalse(node0.isFunction());
479:       assertFalse(node0.isNull());
480:       assertFalse(node0.isSetterDef());
481:       assertFalse(node0.isStringKey());
482:       assertFalse(node0.isParamList());
483:       assertFalse(node0.isName());
484:       assertFalse(node0.isAdd());
485:       assertFalse(node0.isWhile());
486:       assertFalse(node0.isTrue());
487:       assertFalse(node0.isVoid());
488:       assertFalse(node0.isTry());
489:       assertTrue(node0.isString());
490:       assertEquals((-1), node0.getLineno());
491:       assertFalse(node0.isCatch());
492:       assertFalse(node0.isCall());
493:       assertFalse(node0.isBlock());
494:       assertFalse(node0.isReturn());
495:       assertFalse(node0.hasMoreThanOneChild());
496:       assertFalse(node0.isRegExp());
497:       assertFalse(node0.isTypeOf());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.isEmpty());
501:       assertFalse(node0.isGetElem());
502:       assertFalse(node0.isAssignAdd());
503:       assertFalse(node0.isLabelName());
504:       assertFalse(node0.isDelProp());
505:       assertFalse(node0.hasOneChild());
506:       assertFalse(node0.isOr());
507:       assertFalse(node0.isNumber());
508:       assertFalse(node0.isDefaultCase());
509:       assertFalse(node0.isNew());
510:       assertFalse(node0.isDo());
511:       assertFalse(node0.isSwitch());
512:       assertEquals(0, node0.getChildCount());
513:       assertFalse(node0.isArrayLit());
514:       assertFalse(node0.isVar());
515:       assertFalse(node0.isLabel());
516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(4095, Node.COLUMN_MASK);
520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
521:       assertEquals(47, Node.IS_DISPATCHER);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
525:       assertEquals(56, Node.CHANGE_TIME);
526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(48, Node.DIRECTIVES);
529:       assertEquals(37, Node.OPT_ARG_NAME);
530:       assertEquals(55, Node.INFERRED_FUNCTION);
531:       assertEquals(57, Node.REFLECTED_OBJECT);
532:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
534:       assertEquals(52, Node.LENGTH);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(57, Node.LAST_PROP);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(1, Node.DECR_FLAG);
541:       assertEquals(40, Node.ORIGINALNAME_PROP);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(30, Node.VAR_ARGS_NAME);
544:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
545:       assertEquals(2, Node.POST_FLAG);
546:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(46, Node.IS_NAMESPACE);
549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
550:       assertEquals(50, Node.FREE_CALL);
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       
553:       String string0 = node0.toString(true, false, true);
554:       assertEquals("STRING %\"/WB>EC'c", string0);
555:       assertNotNull(string0);
556:       assertFalse(node0.isBreak());
557:       assertFalse(node0.isThis());
558:       assertFalse(node0.isThrow());
559:       assertFalse(node0.isGetProp());
560:       assertEquals((-1), node0.getCharno());
561:       assertFalse(node0.isNot());
562:       assertFalse(node0.isObjectLit());
563:       assertFalse(node0.isScript());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isCase());
566:       assertFalse(node0.isInstanceOf());
567:       assertFalse(node0.isHook());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.isAssign());
570:       assertFalse(node0.isWith());
571:       assertFalse(node0.isIf());
572:       assertFalse(node0.hasChildren());
573:       assertFalse(node0.isDec());
574:       assertEquals((-1), node0.getSourcePosition());
575:       assertFalse(node0.isNE());
576:       assertFalse(node0.isIn());
577:       assertFalse(node0.isDebugger());
578:       assertFalse(node0.isInc());
579:       assertEquals(40, node0.getType());
580:       assertFalse(node0.isAnd());
581:       assertFalse(node0.isCast());
582:       assertFalse(node0.isContinue());
583:       assertFalse(node0.isFalse());
584:       assertFalse(node0.isFunction());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isSetterDef());
587:       assertFalse(node0.isStringKey());
588:       assertFalse(node0.isParamList());
589:       assertFalse(node0.isName());
590:       assertFalse(node0.isAdd());
591:       assertFalse(node0.isWhile());
592:       assertFalse(node0.isTrue());
593:       assertFalse(node0.isVoid());
594:       assertFalse(node0.isTry());
595:       assertTrue(node0.isString());
596:       assertEquals((-1), node0.getLineno());
597:       assertFalse(node0.isCatch());
598:       assertFalse(node0.isCall());
599:       assertFalse(node0.isBlock());
600:       assertFalse(node0.isReturn());
601:       assertFalse(node0.hasMoreThanOneChild());
602:       assertFalse(node0.isRegExp());
603:       assertFalse(node0.isTypeOf());
604:       assertFalse(node0.isGetterDef());
605:       assertFalse(node0.isFor());
606:       assertFalse(node0.isEmpty());
607:       assertFalse(node0.isGetElem());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.isLabelName());
610:       assertFalse(node0.isDelProp());
611:       assertFalse(node0.hasOneChild());
612:       assertFalse(node0.isOr());
613:       assertFalse(node0.isNumber());
614:       assertFalse(node0.isDefaultCase());
615:       assertFalse(node0.isNew());
616:       assertFalse(node0.isDo());
617:       assertFalse(node0.isSwitch());
618:       assertEquals(0, node0.getChildCount());
619:       assertFalse(node0.isArrayLit());
620:       assertFalse(node0.isVar());
621:       assertFalse(node0.isLabel());
622:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
623:       assertEquals(43, Node.IS_CONSTANT_NAME);
624:       assertEquals(53, Node.INPUT_ID);
625:       assertEquals(4095, Node.COLUMN_MASK);
626:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(8, Node.FLAG_NO_THROWS);
629:       assertEquals(39, Node.EMPTY_BLOCK);
630:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
631:       assertEquals(56, Node.CHANGE_TIME);
632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
633:       assertEquals(29, Node.JSDOC_INFO_PROP);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(37, Node.OPT_ARG_NAME);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(57, Node.REFLECTED_OBJECT);
638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
640:       assertEquals(52, Node.LENGTH);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(54, Node.SLASH_V);
644:       assertEquals(49, Node.DIRECT_EVAL);
645:       assertEquals(15, Node.NO_SIDE_EFFECTS);
646:       assertEquals(1, Node.DECR_FLAG);
647:       assertEquals(40, Node.ORIGINALNAME_PROP);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
651:       assertEquals(2, Node.POST_FLAG);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(32, Node.INCRDECR_PROP);
654:       assertEquals(46, Node.IS_NAMESPACE);
655:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
656:       assertEquals(50, Node.FREE_CALL);
657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
658:       
659:       String string1 = node0.getQualifiedName();
660:       assertNull(string1);
661:       assertFalse(node0.isBreak());
662:       assertFalse(node0.isThis());
663:       assertFalse(node0.isThrow());
664:       assertFalse(node0.isGetProp());
665:       assertEquals((-1), node0.getCharno());
666:       assertFalse(node0.isNot());
667:       assertFalse(node0.isObjectLit());
668:       assertFalse(node0.isScript());
669:       assertFalse(node0.isExprResult());
670:       assertFalse(node0.isCase());
671:       assertFalse(node0.isInstanceOf());
672:       assertFalse(node0.isHook());
673:       assertFalse(node0.isComma());
674:       assertFalse(node0.isAssign());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isIf());
677:       assertFalse(node0.hasChildren());
678:       assertFalse(node0.isDec());
679:       assertEquals((-1), node0.getSourcePosition());
680:       assertFalse(node0.isNE());
681:       assertFalse(node0.isIn());
682:       assertFalse(node0.isDebugger());
683:       assertFalse(node0.isInc());
684:       assertEquals(40, node0.getType());
685:       assertFalse(node0.isAnd());
686:       assertFalse(node0.isCast());
687:       assertFalse(node0.isContinue());
688:       assertFalse(node0.isFalse());
689:       assertFalse(node0.isFunction());
690:       assertFalse(node0.isNull());
691:       assertFalse(node0.isSetterDef());
692:       assertFalse(node0.isStringKey());
693:       assertFalse(node0.isParamList());
694:       assertFalse(node0.isName());
695:       assertFalse(node0.isAdd());
696:       assertFalse(node0.isWhile());
697:       assertFalse(node0.isTrue());
698:       assertFalse(node0.isVoid());
699:       assertFalse(node0.isTry());
700:       assertTrue(node0.isString());
701:       assertEquals((-1), node0.getLineno());
702:       assertFalse(node0.isCatch());
703:       assertFalse(node0.isCall());
704:       assertFalse(node0.isBlock());
705:       assertFalse(node0.isReturn());
706:       assertFalse(node0.hasMoreThanOneChild());
707:       assertFalse(node0.isRegExp());
708:       assertFalse(node0.isTypeOf());
709:       assertFalse(node0.isGetterDef());
710:       assertFalse(node0.isFor());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isGetElem());
713:       assertFalse(node0.isAssignAdd());
714:       assertFalse(node0.isLabelName());
715:       assertFalse(node0.isDelProp());
716:       assertFalse(node0.hasOneChild());
717:       assertFalse(node0.isOr());
718:       assertFalse(node0.isNumber());
719:       assertFalse(node0.isDefaultCase());
720:       assertFalse(node0.isNew());
721:       assertFalse(node0.isDo());
722:       assertFalse(node0.isSwitch());
723:       assertEquals(0, node0.getChildCount());
724:       assertFalse(node0.isArrayLit());
725:       assertFalse(node0.isVar());
726:       assertFalse(node0.isLabel());
727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
728:       assertEquals(43, Node.IS_CONSTANT_NAME);
729:       assertEquals(53, Node.INPUT_ID);
730:       assertEquals(4095, Node.COLUMN_MASK);
731:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(8, Node.FLAG_NO_THROWS);
734:       assertEquals(39, Node.EMPTY_BLOCK);
735:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
736:       assertEquals(56, Node.CHANGE_TIME);
737:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
738:       assertEquals(29, Node.JSDOC_INFO_PROP);
739:       assertEquals(48, Node.DIRECTIVES);
740:       assertEquals(37, Node.OPT_ARG_NAME);
741:       assertEquals(55, Node.INFERRED_FUNCTION);
742:       assertEquals(57, Node.REFLECTED_OBJECT);
743:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(36, Node.QUOTED_PROP);
747:       assertEquals(57, Node.LAST_PROP);
748:       assertEquals(54, Node.SLASH_V);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(15, Node.NO_SIDE_EFFECTS);
751:       assertEquals(1, Node.DECR_FLAG);
752:       assertEquals(40, Node.ORIGINALNAME_PROP);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
758:       assertEquals(32, Node.INCRDECR_PROP);
759:       assertEquals(46, Node.IS_NAMESPACE);
760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
761:       assertEquals(50, Node.FREE_CALL);
762:       assertEquals(51, Node.STATIC_SOURCE_FILE);
763:       
764:       Iterable<Node> iterable0 = node0.children();
765:       assertFalse(iterable0.contains(node0));
766:       assertNotNull(iterable0);
767:       assertFalse(node0.isBreak());
768:       assertFalse(node0.isThis());
769:       assertFalse(node0.isThrow());
770:       assertFalse(node0.isGetProp());
771:       assertEquals((-1), node0.getCharno());
772:       assertFalse(node0.isNot());
773:       assertFalse(node0.isObjectLit());
774:       assertFalse(node0.isScript());
775:       assertFalse(node0.isExprResult());
776:       assertFalse(node0.isCase());
777:       assertFalse(node0.isInstanceOf());
778:       assertFalse(node0.isHook());
779:       assertFalse(node0.isComma());
780:       assertFalse(node0.isAssign());
781:       assertFalse(node0.isWith());
782:       assertFalse(node0.isIf());
783:       assertFalse(node0.hasChildren());
784:       assertFalse(node0.isDec());
785:       assertEquals((-1), node0.getSourcePosition());
786:       assertFalse(node0.isNE());
787:       assertFalse(node0.isIn());
788:       assertFalse(node0.isDebugger());
789:       assertFalse(node0.isInc());
790:       assertEquals(40, node0.getType());
791:       assertFalse(node0.isAnd());
792:       assertFalse(node0.isCast());
793:       assertFalse(node0.isContinue());
794:       assertFalse(node0.isFalse());
795:       assertFalse(node0.isFunction());
796:       assertFalse(node0.isNull());
797:       assertFalse(node0.isSetterDef());
798:       assertFalse(node0.isStringKey());
799:       assertFalse(node0.isParamList());
800:       assertFalse(node0.isName());
801:       assertFalse(node0.isAdd());
802:       assertFalse(node0.isWhile());
803:       assertFalse(node0.isTrue());
804:       assertFalse(node0.isVoid());
805:       assertFalse(node0.isTry());
806:       assertTrue(node0.isString());
807:       assertEquals((-1), node0.getLineno());
808:       assertFalse(node0.isCatch());
809:       assertFalse(node0.isCall());
810:       assertFalse(node0.isBlock());
811:       assertFalse(node0.isReturn());
812:       assertFalse(node0.hasMoreThanOneChild());
813:       assertFalse(node0.isRegExp());
814:       assertFalse(node0.isTypeOf());
815:       assertFalse(node0.isGetterDef());
816:       assertFalse(node0.isFor());
817:       assertFalse(node0.isEmpty());
818:       assertFalse(node0.isGetElem());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isLabelName());
821:       assertFalse(node0.isDelProp());
822:       assertFalse(node0.hasOneChild());
823:       assertFalse(node0.isOr());
824:       assertFalse(node0.isNumber());
825:       assertFalse(node0.isDefaultCase());
826:       assertFalse(node0.isNew());
827:       assertFalse(node0.isDo());
828:       assertFalse(node0.isSwitch());
829:       assertEquals(0, node0.getChildCount());
830:       assertFalse(node0.isArrayLit());
831:       assertFalse(node0.isVar());
832:       assertFalse(node0.isLabel());
833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
834:       assertEquals(43, Node.IS_CONSTANT_NAME);
835:       assertEquals(53, Node.INPUT_ID);
836:       assertEquals(4095, Node.COLUMN_MASK);
837:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(39, Node.EMPTY_BLOCK);
841:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
842:       assertEquals(56, Node.CHANGE_TIME);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(29, Node.JSDOC_INFO_PROP);
845:       assertEquals(48, Node.DIRECTIVES);
846:       assertEquals(37, Node.OPT_ARG_NAME);
847:       assertEquals(55, Node.INFERRED_FUNCTION);
848:       assertEquals(57, Node.REFLECTED_OBJECT);
849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
851:       assertEquals(52, Node.LENGTH);
852:       assertEquals(36, Node.QUOTED_PROP);
853:       assertEquals(57, Node.LAST_PROP);
854:       assertEquals(54, Node.SLASH_V);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(40, Node.ORIGINALNAME_PROP);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(30, Node.VAR_ARGS_NAME);
861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
862:       assertEquals(2, Node.POST_FLAG);
863:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
864:       assertEquals(32, Node.INCRDECR_PROP);
865:       assertEquals(46, Node.IS_NAMESPACE);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(50, Node.FREE_CALL);
868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
869:       
870:       boolean boolean1 = node0.isString();
871:       assertTrue(boolean1 == boolean0);
872:       assertTrue(boolean1);
873:       assertFalse(node0.isBreak());
874:       assertFalse(node0.isThis());
875:       assertFalse(node0.isThrow());
876:       assertFalse(node0.isGetProp());
877:       assertEquals((-1), node0.getCharno());
878:       assertFalse(node0.isNot());
879:       assertFalse(node0.isObjectLit());
880:       assertFalse(node0.isScript());
881:       assertFalse(node0.isExprResult());
882:       assertFalse(node0.isCase());
883:       assertFalse(node0.isInstanceOf());
884:       assertFalse(node0.isHook());
885:       assertFalse(node0.isComma());
886:       assertFalse(node0.isAssign());
887:       assertFalse(node0.isWith());
888:       assertFalse(node0.isIf());
889:       assertFalse(node0.hasChildren());
890:       assertFalse(node0.isDec());
891:       assertEquals((-1), node0.getSourcePosition());
892:       assertFalse(node0.isNE());
893:       assertFalse(node0.isIn());
894:       assertFalse(node0.isDebugger());
895:       assertFalse(node0.isInc());
896:       assertEquals(40, node0.getType());
897:       assertFalse(node0.isAnd());
898:       assertFalse(node0.isCast());
899:       assertFalse(node0.isContinue());
900:       assertFalse(node0.isFalse());
901:       assertFalse(node0.isFunction());
902:       assertFalse(node0.isNull());
903:       assertFalse(node0.isSetterDef());
904:       assertFalse(node0.isStringKey());
905:       assertFalse(node0.isParamList());
906:       assertFalse(node0.isName());
907:       assertFalse(node0.isAdd());
908:       assertFalse(node0.isWhile());
909:       assertFalse(node0.isTrue());
910:       assertFalse(node0.isVoid());
911:       assertFalse(node0.isTry());
912:       assertTrue(node0.isString());
913:       assertEquals((-1), node0.getLineno());
914:       assertFalse(node0.isCatch());
915:       assertFalse(node0.isCall());
916:       assertFalse(node0.isBlock());
917:       assertFalse(node0.isReturn());
918:       assertFalse(node0.hasMoreThanOneChild());
919:       assertFalse(node0.isRegExp());
920:       assertFalse(node0.isTypeOf());
921:       assertFalse(node0.isGetterDef());
922:       assertFalse(node0.isFor());
923:       assertFalse(node0.isEmpty());
924:       assertFalse(node0.isGetElem());
925:       assertFalse(node0.isAssignAdd());
926:       assertFalse(node0.isLabelName());
927:       assertFalse(node0.isDelProp());
928:       assertFalse(node0.hasOneChild());
929:       assertFalse(node0.isOr());
930:       assertFalse(node0.isNumber());
931:       assertFalse(node0.isDefaultCase());
932:       assertFalse(node0.isNew());
933:       assertFalse(node0.isDo());
934:       assertFalse(node0.isSwitch());
935:       assertEquals(0, node0.getChildCount());
936:       assertFalse(node0.isArrayLit());
937:       assertFalse(node0.isVar());
938:       assertFalse(node0.isLabel());
939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
940:       assertEquals(43, Node.IS_CONSTANT_NAME);
941:       assertEquals(53, Node.INPUT_ID);
942:       assertEquals(4095, Node.COLUMN_MASK);
943:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
944:       assertEquals(47, Node.IS_DISPATCHER);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(39, Node.EMPTY_BLOCK);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(56, Node.CHANGE_TIME);
949:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(48, Node.DIRECTIVES);
952:       assertEquals(37, Node.OPT_ARG_NAME);
953:       assertEquals(55, Node.INFERRED_FUNCTION);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(36, Node.QUOTED_PROP);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(49, Node.DIRECT_EVAL);
962:       assertEquals(15, Node.NO_SIDE_EFFECTS);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(40, Node.ORIGINALNAME_PROP);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       assertEquals(2, Node.POST_FLAG);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(32, Node.INCRDECR_PROP);
971:       assertEquals(46, Node.IS_NAMESPACE);
972:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
973:       assertEquals(50, Node.FREE_CALL);
974:       assertEquals(51, Node.STATIC_SOURCE_FILE);
975:   }
976: }
RegularFileObject[/tmp/EvoSuite_222_1628159312290/com/google/javascript/rhino/Node_222_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_222_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_222_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_222_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:32.391 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("%\"/WB>EC'c", (-396), (-396));
assertNotNull(node0);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
assertTrue(boolean0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node_FileLevelJsDocBuilder0.append("9;y:y_rDHq/oi");
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setString("%\"/WB>EC'c");
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

String string0 = node0.toString(true, false, true);
assertEquals("STRING %\"/WB>EC'c", string0);
assertNotNull(string0);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

String string1 = node0.getQualifiedName();
assertNull(string1);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean1 = node0.isString();
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);


[MASTER] 10:28:38.282 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_304_1628159318054/com/google/javascript/rhino/Node_304_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_304_1628159318054/com/google/javascript/rhino/Node_304_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:38.282 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:38.282 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:38.283 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1009
[MASTER] 10:28:38.284 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_304_1628159318054/com/google/javascript/rhino/Node_304_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.TemplateType;
17: import com.google.javascript.rhino.jstype.TemplatizedType;
18: import java.util.ArrayList;
19: import java.util.Collection;
20: import java.util.Iterator;
21: import java.util.List;
22: import java.util.ListIterator;
23: import org.evosuite.runtime.EvoRunner;
24: import org.evosuite.runtime.EvoRunnerParameters;
25: import org.evosuite.runtime.testdata.FileSystemHandling;
26: import org.junit.runner.RunWith;
27: 
28: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
29: public class Node_304_tmp__ESTest extends Node_304_tmp__ESTest_scaffolding {
30: 
31:   @Test(timeout = 4000)
32:   public void test0()  throws Throwable  {
33:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
34:       assertNotNull(simpleErrorReporter0);
35:       
36:       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
37:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
38:       assertNotNull(simpleErrorReporter1);
39:       
40:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
41:       assertTrue(boolean0);
42:       
43:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
44:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
45:       assertNotNull(jSTypeRegistry0);
46:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
47:       
48:       ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
49:       assertNotNull(arrayList0);
50:       assertEquals(0, arrayList0.size());
51:       assertTrue(arrayList0.isEmpty());
52:       
53:       ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
54:       assertNotNull(listIterator0);
55:       assertEquals(0, arrayList0.size());
56:       assertTrue(arrayList0.isEmpty());
57:       assertFalse(listIterator0.hasNext());
58:       assertFalse(listIterator0.hasPrevious());
59:       
60:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
61:       assertNotNull(immutableList0);
62:       assertEquals(0, arrayList0.size());
63:       assertTrue(arrayList0.isEmpty());
64:       assertFalse(listIterator0.hasNext());
65:       assertFalse(listIterator0.hasPrevious());
66:       assertEquals(0, immutableList0.size());
67:       
68:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
69:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
70:       assertNotNull(node0);
71:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
72:       assertEquals(0, arrayList0.size());
73:       assertTrue(arrayList0.isEmpty());
74:       assertFalse(listIterator0.hasNext());
75:       assertFalse(listIterator0.hasPrevious());
76:       assertEquals(0, immutableList0.size());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isString());
83:       assertFalse(node0.isSwitch());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isNE());
86:       assertFalse(node0.isTry());
87:       assertFalse(node0.isVoid());
88:       assertFalse(node0.isRegExp());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.isFor());
91:       assertFalse(node0.isHook());
92:       assertFalse(node0.isThis());
93:       assertEquals(0, node0.getChildCount());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isName());
96:       assertEquals(83, node0.getType());
97:       assertFalse(node0.isTrue());
98:       assertFalse(node0.isStringKey());
99:       assertFalse(node0.isNull());
100:       assertFalse(node0.isNew());
101:       assertFalse(node0.isArrayLit());
102:       assertFalse(node0.isEmpty());
103:       assertFalse(node0.isAdd());
104:       assertFalse(node0.isDo());
105:       assertFalse(node0.isDefaultCase());
106:       assertFalse(node0.isVar());
107:       assertFalse(node0.isLabel());
108:       assertEquals((-1), node0.getLineno());
109:       assertFalse(node0.isAssignAdd());
110:       assertFalse(node0.isOr());
111:       assertFalse(node0.hasMoreThanOneChild());
112:       assertFalse(node0.isContinue());
113:       assertFalse(node0.isLabelName());
114:       assertFalse(node0.isNumber());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isCall());
118:       assertFalse(node0.isExprResult());
119:       assertFalse(node0.isScript());
120:       assertFalse(node0.isGetElem());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isWhile());
123:       assertFalse(node0.isDec());
124:       assertFalse(node0.isAssign());
125:       assertFalse(node0.isTypeOf());
126:       assertFalse(node0.isWith());
127:       assertFalse(node0.isBlock());
128:       assertFalse(node0.isReturn());
129:       assertFalse(node0.isInstanceOf());
130:       assertTrue(node0.isParamList());
131:       assertFalse(node0.isCatch());
132:       assertFalse(node0.isGetProp());
133:       assertFalse(node0.isSetterDef());
134:       assertFalse(node0.isNot());
135:       assertFalse(node0.isDebugger());
136:       assertFalse(node0.isAnd());
137:       assertFalse(node0.isObjectLit());
138:       assertFalse(node0.isCast());
139:       assertFalse(node0.isInc());
140:       assertFalse(node0.isFalse());
141:       assertFalse(node0.isFunction());
142:       assertFalse(node0.isThrow());
143:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(50, Node.FREE_CALL);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(30, Node.VAR_ARGS_NAME);
154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(36, Node.QUOTED_PROP);
161:       assertEquals(8, Node.FLAG_NO_THROWS);
162:       assertEquals(37, Node.OPT_ARG_NAME);
163:       assertEquals(48, Node.DIRECTIVES);
164:       assertEquals(49, Node.DIRECT_EVAL);
165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
166:       assertEquals(56, Node.CHANGE_TIME);
167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
168:       assertEquals(29, Node.JSDOC_INFO_PROP);
169:       assertEquals(53, Node.INPUT_ID);
170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
171:       assertEquals(2, Node.POST_FLAG);
172:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
173:       assertEquals(47, Node.IS_DISPATCHER);
174:       assertEquals(32, Node.INCRDECR_PROP);
175:       assertEquals(51, Node.STATIC_SOURCE_FILE);
176:       assertEquals(1, Node.DECR_FLAG);
177:       assertEquals(46, Node.IS_NAMESPACE);
178:       assertEquals(54, Node.SLASH_V);
179:       assertEquals(43, Node.IS_CONSTANT_NAME);
180:       
181:       Node node1 = new Node(4, node0, 2836, 47);
182:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
183:       assertFalse(node1.equals((Object)node0));
184:       assertNotNull(node1);
185:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
186:       assertEquals(0, arrayList0.size());
187:       assertTrue(arrayList0.isEmpty());
188:       assertFalse(listIterator0.hasNext());
189:       assertFalse(listIterator0.hasPrevious());
190:       assertEquals(0, immutableList0.size());
191:       assertFalse(node0.isIn());
192:       assertFalse(node0.isCase());
193:       assertFalse(node0.isDelProp());
194:       assertFalse(node0.isIf());
195:       assertFalse(node0.isGetterDef());
196:       assertFalse(node0.isString());
197:       assertFalse(node0.isSwitch());
198:       assertEquals((-1), node0.getCharno());
199:       assertFalse(node0.isNE());
200:       assertFalse(node0.isTry());
201:       assertFalse(node0.isVoid());
202:       assertFalse(node0.isRegExp());
203:       assertFalse(node0.isComma());
204:       assertFalse(node0.isFor());
205:       assertFalse(node0.isHook());
206:       assertFalse(node0.isThis());
207:       assertEquals(0, node0.getChildCount());
208:       assertFalse(node0.isBreak());
209:       assertFalse(node0.isName());
210:       assertEquals(83, node0.getType());
211:       assertFalse(node0.isTrue());
212:       assertFalse(node0.isStringKey());
213:       assertFalse(node0.isNull());
214:       assertFalse(node0.isNew());
215:       assertFalse(node0.isArrayLit());
216:       assertFalse(node0.isEmpty());
217:       assertFalse(node0.isAdd());
218:       assertFalse(node0.isDo());
219:       assertFalse(node0.isDefaultCase());
220:       assertFalse(node0.isVar());
221:       assertFalse(node0.isLabel());
222:       assertEquals((-1), node0.getLineno());
223:       assertFalse(node0.isAssignAdd());
224:       assertFalse(node0.isOr());
225:       assertFalse(node0.hasMoreThanOneChild());
226:       assertFalse(node0.isContinue());
227:       assertFalse(node0.isLabelName());
228:       assertFalse(node0.isNumber());
229:       assertEquals((-1), node0.getSourcePosition());
230:       assertFalse(node0.hasOneChild());
231:       assertFalse(node0.isCall());
232:       assertFalse(node0.isExprResult());
233:       assertFalse(node0.isScript());
234:       assertFalse(node0.isGetElem());
235:       assertFalse(node0.hasChildren());
236:       assertFalse(node0.isWhile());
237:       assertFalse(node0.isDec());
238:       assertFalse(node0.isAssign());
239:       assertFalse(node0.isTypeOf());
240:       assertFalse(node0.isWith());
241:       assertFalse(node0.isBlock());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isInstanceOf());
244:       assertTrue(node0.isParamList());
245:       assertFalse(node0.isCatch());
246:       assertFalse(node0.isGetProp());
247:       assertFalse(node0.isSetterDef());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isDebugger());
250:       assertFalse(node0.isAnd());
251:       assertFalse(node0.isObjectLit());
252:       assertFalse(node0.isCast());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isFalse());
255:       assertFalse(node0.isFunction());
256:       assertFalse(node0.isThrow());
257:       assertFalse(node1.isDo());
258:       assertFalse(node1.isWhile());
259:       assertFalse(node1.isContinue());
260:       assertFalse(node1.hasMoreThanOneChild());
261:       assertFalse(node1.isBlock());
262:       assertFalse(node1.isLabel());
263:       assertFalse(node1.isCall());
264:       assertFalse(node1.isAssign());
265:       assertFalse(node1.isLabelName());
266:       assertFalse(node1.isStringKey());
267:       assertFalse(node1.isNumber());
268:       assertFalse(node1.isTypeOf());
269:       assertFalse(node1.isParamList());
270:       assertFalse(node1.isDec());
271:       assertEquals(47, node1.getCharno());
272:       assertFalse(node1.isScript());
273:       assertFalse(node1.isDefaultCase());
274:       assertFalse(node1.isTrue());
275:       assertFalse(node1.isVoid());
276:       assertFalse(node1.isArrayLit());
277:       assertFalse(node1.isBreak());
278:       assertFalse(node1.isExprResult());
279:       assertFalse(node1.isGetElem());
280:       assertFalse(node1.isEmpty());
281:       assertFalse(node1.isDelProp());
282:       assertFalse(node1.isName());
283:       assertFalse(node1.isNull());
284:       assertFalse(node1.isVar());
285:       assertFalse(node1.isAdd());
286:       assertFalse(node1.isAssignAdd());
287:       assertFalse(node1.isOr());
288:       assertFalse(node1.isNew());
289:       assertFalse(node1.isCase());
290:       assertTrue(node1.isReturn());
291:       assertFalse(node1.isString());
292:       assertEquals(4, node1.getType());
293:       assertTrue(node1.hasChildren());
294:       assertEquals(1, node1.getChildCount());
295:       assertFalse(node1.isSwitch());
296:       assertFalse(node1.isFor());
297:       assertFalse(node1.isGetterDef());
298:       assertFalse(node1.isComma());
299:       assertFalse(node1.isHook());
300:       assertTrue(node1.hasOneChild());
301:       assertFalse(node1.isThis());
302:       assertFalse(node1.isTry());
303:       assertFalse(node1.isGetProp());
304:       assertEquals(11616303, node1.getSourcePosition());
305:       assertFalse(node1.isNot());
306:       assertFalse(node1.isAnd());
307:       assertFalse(node1.isObjectLit());
308:       assertFalse(node1.isWith());
309:       assertFalse(node1.isRegExp());
310:       assertFalse(node1.isDebugger());
311:       assertFalse(node1.isFunction());
312:       assertFalse(node1.isCast());
313:       assertFalse(node1.isCatch());
314:       assertFalse(node1.isInstanceOf());
315:       assertFalse(node1.isIf());
316:       assertFalse(node1.isFalse());
317:       assertFalse(node1.isNE());
318:       assertFalse(node1.isThrow());
319:       assertFalse(node1.isIn());
320:       assertEquals(2836, node1.getLineno());
321:       assertFalse(node1.isInc());
322:       assertFalse(node1.isSetterDef());
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(50, Node.FREE_CALL);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(12, Node.COLUMN_BITS);
336:       assertEquals(4095, Node.COLUMN_MASK);
337:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(36, Node.QUOTED_PROP);
340:       assertEquals(8, Node.FLAG_NO_THROWS);
341:       assertEquals(37, Node.OPT_ARG_NAME);
342:       assertEquals(48, Node.DIRECTIVES);
343:       assertEquals(49, Node.DIRECT_EVAL);
344:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
345:       assertEquals(56, Node.CHANGE_TIME);
346:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(53, Node.INPUT_ID);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
352:       assertEquals(47, Node.IS_DISPATCHER);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(51, Node.STATIC_SOURCE_FILE);
355:       assertEquals(1, Node.DECR_FLAG);
356:       assertEquals(46, Node.IS_NAMESPACE);
357:       assertEquals(54, Node.SLASH_V);
358:       assertEquals(43, Node.IS_CONSTANT_NAME);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(50, Node.FREE_CALL);
361:       assertEquals(48, Node.DIRECTIVES);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
366:       assertEquals(8, Node.FLAG_NO_THROWS);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(49, Node.DIRECT_EVAL);
371:       assertEquals(1, Node.DECR_FLAG);
372:       assertEquals(36, Node.QUOTED_PROP);
373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertEquals(37, Node.OPT_ARG_NAME);
377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
378:       assertEquals(4095, Node.COLUMN_MASK);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(2, Node.POST_FLAG);
381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
382:       assertEquals(56, Node.CHANGE_TIME);
383:       assertEquals(32, Node.INCRDECR_PROP);
384:       assertEquals(46, Node.IS_NAMESPACE);
385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
386:       assertEquals(53, Node.INPUT_ID);
387:       assertEquals(29, Node.JSDOC_INFO_PROP);
388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
389:       assertEquals(57, Node.LAST_PROP);
390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
391:       assertEquals(30, Node.VAR_ARGS_NAME);
392:       assertEquals(54, Node.SLASH_V);
393:       assertEquals(43, Node.IS_CONSTANT_NAME);
394:       assertEquals(40, Node.ORIGINALNAME_PROP);
395:       
396:       boolean boolean1 = node1.isLabel();
397:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
398:       assertFalse(node0.equals((Object)node1));
399:       assertFalse(node1.equals((Object)node0));
400:       assertFalse(boolean1 == boolean0);
401:       assertFalse(boolean1);
402:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
403:       assertEquals(0, arrayList0.size());
404:       assertTrue(arrayList0.isEmpty());
405:       assertFalse(listIterator0.hasNext());
406:       assertFalse(listIterator0.hasPrevious());
407:       assertEquals(0, immutableList0.size());
408:       assertFalse(node0.isIn());
409:       assertFalse(node0.isCase());
410:       assertFalse(node0.isDelProp());
411:       assertFalse(node0.isIf());
412:       assertFalse(node0.isGetterDef());
413:       assertFalse(node0.isString());
414:       assertFalse(node0.isSwitch());
415:       assertEquals((-1), node0.getCharno());
416:       assertFalse(node0.isNE());
417:       assertFalse(node0.isTry());
418:       assertFalse(node0.isVoid());
419:       assertFalse(node0.isRegExp());
420:       assertFalse(node0.isComma());
421:       assertFalse(node0.isFor());
422:       assertFalse(node0.isHook());
423:       assertFalse(node0.isThis());
424:       assertEquals(0, node0.getChildCount());
425:       assertFalse(node0.isBreak());
426:       assertFalse(node0.isName());
427:       assertEquals(83, node0.getType());
428:       assertFalse(node0.isTrue());
429:       assertFalse(node0.isStringKey());
430:       assertFalse(node0.isNull());
431:       assertFalse(node0.isNew());
432:       assertFalse(node0.isArrayLit());
433:       assertFalse(node0.isEmpty());
434:       assertFalse(node0.isAdd());
435:       assertFalse(node0.isDo());
436:       assertFalse(node0.isDefaultCase());
437:       assertFalse(node0.isVar());
438:       assertFalse(node0.isLabel());
439:       assertEquals((-1), node0.getLineno());
440:       assertFalse(node0.isAssignAdd());
441:       assertFalse(node0.isOr());
442:       assertFalse(node0.hasMoreThanOneChild());
443:       assertFalse(node0.isContinue());
444:       assertFalse(node0.isLabelName());
445:       assertFalse(node0.isNumber());
446:       assertEquals((-1), node0.getSourcePosition());
447:       assertFalse(node0.hasOneChild());
448:       assertFalse(node0.isCall());
449:       assertFalse(node0.isExprResult());
450:       assertFalse(node0.isScript());
451:       assertFalse(node0.isGetElem());
452:       assertFalse(node0.hasChildren());
453:       assertFalse(node0.isWhile());
454:       assertFalse(node0.isDec());
455:       assertFalse(node0.isAssign());
456:       assertFalse(node0.isTypeOf());
457:       assertFalse(node0.isWith());
458:       assertFalse(node0.isBlock());
459:       assertFalse(node0.isReturn());
460:       assertFalse(node0.isInstanceOf());
461:       assertTrue(node0.isParamList());
462:       assertFalse(node0.isCatch());
463:       assertFalse(node0.isGetProp());
464:       assertFalse(node0.isSetterDef());
465:       assertFalse(node0.isNot());
466:       assertFalse(node0.isDebugger());
467:       assertFalse(node0.isAnd());
468:       assertFalse(node0.isObjectLit());
469:       assertFalse(node0.isCast());
470:       assertFalse(node0.isInc());
471:       assertFalse(node0.isFalse());
472:       assertFalse(node0.isFunction());
473:       assertFalse(node0.isThrow());
474:       assertFalse(node1.isDo());
475:       assertFalse(node1.isWhile());
476:       assertFalse(node1.isContinue());
477:       assertFalse(node1.hasMoreThanOneChild());
478:       assertFalse(node1.isBlock());
479:       assertFalse(node1.isLabel());
480:       assertFalse(node1.isCall());
481:       assertFalse(node1.isAssign());
482:       assertFalse(node1.isLabelName());
483:       assertFalse(node1.isStringKey());
484:       assertFalse(node1.isNumber());
485:       assertFalse(node1.isTypeOf());
486:       assertFalse(node1.isParamList());
487:       assertFalse(node1.isDec());
488:       assertEquals(47, node1.getCharno());
489:       assertFalse(node1.isScript());
490:       assertFalse(node1.isDefaultCase());
491:       assertFalse(node1.isTrue());
492:       assertFalse(node1.isVoid());
493:       assertFalse(node1.isArrayLit());
494:       assertFalse(node1.isBreak());
495:       assertFalse(node1.isExprResult());
496:       assertFalse(node1.isGetElem());
497:       assertFalse(node1.isEmpty());
498:       assertFalse(node1.isDelProp());
499:       assertFalse(node1.isName());
500:       assertFalse(node1.isNull());
501:       assertFalse(node1.isVar());
502:       assertFalse(node1.isAdd());
503:       assertFalse(node1.isAssignAdd());
504:       assertFalse(node1.isOr());
505:       assertFalse(node1.isNew());
506:       assertFalse(node1.isCase());
507:       assertTrue(node1.isReturn());
508:       assertFalse(node1.isString());
509:       assertEquals(4, node1.getType());
510:       assertTrue(node1.hasChildren());
511:       assertEquals(1, node1.getChildCount());
512:       assertFalse(node1.isSwitch());
513:       assertFalse(node1.isFor());
514:       assertFalse(node1.isGetterDef());
515:       assertFalse(node1.isComma());
516:       assertFalse(node1.isHook());
517:       assertTrue(node1.hasOneChild());
518:       assertFalse(node1.isThis());
519:       assertFalse(node1.isTry());
520:       assertFalse(node1.isGetProp());
521:       assertEquals(11616303, node1.getSourcePosition());
522:       assertFalse(node1.isNot());
523:       assertFalse(node1.isAnd());
524:       assertFalse(node1.isObjectLit());
525:       assertFalse(node1.isWith());
526:       assertFalse(node1.isRegExp());
527:       assertFalse(node1.isDebugger());
528:       assertFalse(node1.isFunction());
529:       assertFalse(node1.isCast());
530:       assertFalse(node1.isCatch());
531:       assertFalse(node1.isInstanceOf());
532:       assertFalse(node1.isIf());
533:       assertFalse(node1.isFalse());
534:       assertFalse(node1.isNE());
535:       assertFalse(node1.isThrow());
536:       assertFalse(node1.isIn());
537:       assertEquals(2836, node1.getLineno());
538:       assertFalse(node1.isInc());
539:       assertFalse(node1.isSetterDef());
540:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
541:       assertNotSame(node0, node1);
542:       assertNotSame(node1, node0);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(52, Node.LENGTH);
547:       assertEquals(40, Node.ORIGINALNAME_PROP);
548:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(39, Node.EMPTY_BLOCK);
551:       assertEquals(57, Node.LAST_PROP);
552:       assertEquals(30, Node.VAR_ARGS_NAME);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
555:       assertEquals(12, Node.COLUMN_BITS);
556:       assertEquals(4095, Node.COLUMN_MASK);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(36, Node.QUOTED_PROP);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(37, Node.OPT_ARG_NAME);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(56, Node.CHANGE_TIME);
566:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(53, Node.INPUT_ID);
569:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
570:       assertEquals(2, Node.POST_FLAG);
571:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
572:       assertEquals(47, Node.IS_DISPATCHER);
573:       assertEquals(32, Node.INCRDECR_PROP);
574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
575:       assertEquals(1, Node.DECR_FLAG);
576:       assertEquals(46, Node.IS_NAMESPACE);
577:       assertEquals(54, Node.SLASH_V);
578:       assertEquals(43, Node.IS_CONSTANT_NAME);
579:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(48, Node.DIRECTIVES);
582:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
583:       assertEquals(52, Node.LENGTH);
584:       assertEquals(57, Node.REFLECTED_OBJECT);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertEquals(8, Node.FLAG_NO_THROWS);
587:       assertEquals(39, Node.EMPTY_BLOCK);
588:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
589:       assertEquals(55, Node.INFERRED_FUNCTION);
590:       assertEquals(49, Node.DIRECT_EVAL);
591:       assertEquals(1, Node.DECR_FLAG);
592:       assertEquals(36, Node.QUOTED_PROP);
593:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
594:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(37, Node.OPT_ARG_NAME);
597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(2, Node.POST_FLAG);
601:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
602:       assertEquals(56, Node.CHANGE_TIME);
603:       assertEquals(32, Node.INCRDECR_PROP);
604:       assertEquals(46, Node.IS_NAMESPACE);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(53, Node.INPUT_ID);
607:       assertEquals(29, Node.JSDOC_INFO_PROP);
608:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
609:       assertEquals(57, Node.LAST_PROP);
610:       assertEquals(15, Node.NO_SIDE_EFFECTS);
611:       assertEquals(30, Node.VAR_ARGS_NAME);
612:       assertEquals(54, Node.SLASH_V);
613:       assertEquals(43, Node.IS_CONSTANT_NAME);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       
616:       ImmutableList<JSType> immutableList1 = immutableList0.reverse();
617:       assertTrue(immutableList1.equals((Object)immutableList0));
618:       assertNotNull(immutableList1);
619:       assertEquals(0, arrayList0.size());
620:       assertTrue(arrayList0.isEmpty());
621:       assertFalse(listIterator0.hasNext());
622:       assertFalse(listIterator0.hasPrevious());
623:       assertEquals(0, immutableList0.size());
624:       assertEquals(0, immutableList1.size());
625:       
626:       ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
627:       assertTrue(immutableList0.equals((Object)immutableList1));
628:       assertTrue(immutableList1.equals((Object)immutableList0));
629:       assertTrue(immutableList2.equals((Object)immutableList0));
630:       assertNotNull(immutableList2);
631:       assertEquals(0, arrayList0.size());
632:       assertTrue(arrayList0.isEmpty());
633:       assertFalse(listIterator0.hasNext());
634:       assertFalse(listIterator0.hasPrevious());
635:       assertEquals(0, immutableList0.size());
636:       assertEquals(0, immutableList1.size());
637:       assertEquals(0, immutableList2.size());
638:       assertSame(immutableList1, immutableList2);
639:       assertSame(immutableList2, immutableList1);
640:       
641:       boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
642:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
643:       assertTrue(immutableList0.equals((Object)immutableList1));
644:       assertTrue(immutableList0.equals((Object)immutableList2));
645:       assertFalse(node0.equals((Object)node1));
646:       assertFalse(node1.equals((Object)node0));
647:       assertFalse(boolean2 == boolean0);
648:       assertTrue(boolean2 == boolean1);
649:       assertFalse(boolean2);
650:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
651:       assertEquals(0, arrayList0.size());
652:       assertTrue(arrayList0.isEmpty());
653:       assertFalse(listIterator0.hasNext());
654:       assertFalse(listIterator0.hasPrevious());
655:       assertEquals(0, immutableList0.size());
656:       assertFalse(node0.isIn());
657:       assertFalse(node0.isCase());
658:       assertFalse(node0.isDelProp());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isGetterDef());
661:       assertFalse(node0.isString());
662:       assertFalse(node0.isSwitch());
663:       assertEquals((-1), node0.getCharno());
664:       assertFalse(node0.isNE());
665:       assertFalse(node0.isTry());
666:       assertFalse(node0.isVoid());
667:       assertFalse(node0.isRegExp());
668:       assertFalse(node0.isComma());
669:       assertFalse(node0.isFor());
670:       assertFalse(node0.isHook());
671:       assertFalse(node0.isThis());
672:       assertEquals(0, node0.getChildCount());
673:       assertFalse(node0.isBreak());
674:       assertFalse(node0.isName());
675:       assertEquals(83, node0.getType());
676:       assertFalse(node0.isTrue());
677:       assertFalse(node0.isStringKey());
678:       assertFalse(node0.isNull());
679:       assertFalse(node0.isNew());
680:       assertFalse(node0.isArrayLit());
681:       assertFalse(node0.isEmpty());
682:       assertFalse(node0.isAdd());
683:       assertFalse(node0.isDo());
684:       assertFalse(node0.isDefaultCase());
685:       assertFalse(node0.isVar());
686:       assertFalse(node0.isLabel());
687:       assertEquals((-1), node0.getLineno());
688:       assertFalse(node0.isAssignAdd());
689:       assertFalse(node0.isOr());
690:       assertFalse(node0.hasMoreThanOneChild());
691:       assertFalse(node0.isContinue());
692:       assertFalse(node0.isLabelName());
693:       assertFalse(node0.isNumber());
694:       assertEquals((-1), node0.getSourcePosition());
695:       assertFalse(node0.hasOneChild());
696:       assertFalse(node0.isCall());
697:       assertFalse(node0.isExprResult());
698:       assertFalse(node0.isScript());
699:       assertFalse(node0.isGetElem());
700:       assertFalse(node0.hasChildren());
701:       assertFalse(node0.isWhile());
702:       assertFalse(node0.isDec());
703:       assertFalse(node0.isAssign());
704:       assertFalse(node0.isTypeOf());
705:       assertFalse(node0.isWith());
706:       assertFalse(node0.isBlock());
707:       assertFalse(node0.isReturn());
708:       assertFalse(node0.isInstanceOf());
709:       assertTrue(node0.isParamList());
710:       assertFalse(node0.isCatch());
711:       assertFalse(node0.isGetProp());
712:       assertFalse(node0.isSetterDef());
713:       assertFalse(node0.isNot());
714:       assertFalse(node0.isDebugger());
715:       assertFalse(node0.isAnd());
716:       assertFalse(node0.isObjectLit());
717:       assertFalse(node0.isCast());
718:       assertFalse(node0.isInc());
719:       assertFalse(node0.isFalse());
720:       assertFalse(node0.isFunction());
721:       assertFalse(node0.isThrow());
722:       assertFalse(node1.isDo());
723:       assertFalse(node1.isWhile());
724:       assertFalse(node1.isContinue());
725:       assertFalse(node1.hasMoreThanOneChild());
726:       assertFalse(node1.isBlock());
727:       assertFalse(node1.isLabel());
728:       assertFalse(node1.isCall());
729:       assertFalse(node1.isAssign());
730:       assertFalse(node1.isLabelName());
731:       assertFalse(node1.isStringKey());
732:       assertFalse(node1.isNumber());
733:       assertFalse(node1.isTypeOf());
734:       assertFalse(node1.isParamList());
735:       assertFalse(node1.isDec());
736:       assertEquals(47, node1.getCharno());
737:       assertFalse(node1.isScript());
738:       assertFalse(node1.isDefaultCase());
739:       assertFalse(node1.isTrue());
740:       assertFalse(node1.isVoid());
741:       assertFalse(node1.isArrayLit());
742:       assertFalse(node1.isBreak());
743:       assertFalse(node1.isExprResult());
744:       assertFalse(node1.isGetElem());
745:       assertFalse(node1.isEmpty());
746:       assertFalse(node1.isDelProp());
747:       assertFalse(node1.isName());
748:       assertFalse(node1.isNull());
749:       assertFalse(node1.isVar());
750:       assertFalse(node1.isAdd());
751:       assertFalse(node1.isAssignAdd());
752:       assertFalse(node1.isOr());
753:       assertFalse(node1.isNew());
754:       assertFalse(node1.isCase());
755:       assertTrue(node1.isReturn());
756:       assertFalse(node1.isString());
757:       assertEquals(4, node1.getType());
758:       assertTrue(node1.hasChildren());
759:       assertEquals(1, node1.getChildCount());
760:       assertFalse(node1.isSwitch());
761:       assertFalse(node1.isFor());
762:       assertFalse(node1.isGetterDef());
763:       assertFalse(node1.isComma());
764:       assertFalse(node1.isHook());
765:       assertTrue(node1.hasOneChild());
766:       assertFalse(node1.isThis());
767:       assertFalse(node1.isTry());
768:       assertFalse(node1.isGetProp());
769:       assertEquals(11616303, node1.getSourcePosition());
770:       assertFalse(node1.isNot());
771:       assertFalse(node1.isAnd());
772:       assertFalse(node1.isObjectLit());
773:       assertFalse(node1.isWith());
774:       assertFalse(node1.isRegExp());
775:       assertFalse(node1.isDebugger());
776:       assertFalse(node1.isFunction());
777:       assertFalse(node1.isCast());
778:       assertFalse(node1.isCatch());
779:       assertFalse(node1.isInstanceOf());
780:       assertFalse(node1.isIf());
781:       assertFalse(node1.isFalse());
782:       assertFalse(node1.isNE());
783:       assertFalse(node1.isThrow());
784:       assertFalse(node1.isIn());
785:       assertEquals(2836, node1.getLineno());
786:       assertFalse(node1.isInc());
787:       assertFalse(node1.isSetterDef());
788:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
789:       assertNotSame(node0, node1);
790:       assertNotSame(node1, node0);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
793:       assertEquals(50, Node.FREE_CALL);
794:       assertEquals(52, Node.LENGTH);
795:       assertEquals(40, Node.ORIGINALNAME_PROP);
796:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
797:       assertEquals(15, Node.NO_SIDE_EFFECTS);
798:       assertEquals(39, Node.EMPTY_BLOCK);
799:       assertEquals(57, Node.LAST_PROP);
800:       assertEquals(30, Node.VAR_ARGS_NAME);
801:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
803:       assertEquals(12, Node.COLUMN_BITS);
804:       assertEquals(4095, Node.COLUMN_MASK);
805:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
806:       assertEquals(55, Node.INFERRED_FUNCTION);
807:       assertEquals(36, Node.QUOTED_PROP);
808:       assertEquals(8, Node.FLAG_NO_THROWS);
809:       assertEquals(37, Node.OPT_ARG_NAME);
810:       assertEquals(48, Node.DIRECTIVES);
811:       assertEquals(49, Node.DIRECT_EVAL);
812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
813:       assertEquals(56, Node.CHANGE_TIME);
814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
815:       assertEquals(29, Node.JSDOC_INFO_PROP);
816:       assertEquals(53, Node.INPUT_ID);
817:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
818:       assertEquals(2, Node.POST_FLAG);
819:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
820:       assertEquals(47, Node.IS_DISPATCHER);
821:       assertEquals(32, Node.INCRDECR_PROP);
822:       assertEquals(51, Node.STATIC_SOURCE_FILE);
823:       assertEquals(1, Node.DECR_FLAG);
824:       assertEquals(46, Node.IS_NAMESPACE);
825:       assertEquals(54, Node.SLASH_V);
826:       assertEquals(43, Node.IS_CONSTANT_NAME);
827:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
828:       assertEquals(50, Node.FREE_CALL);
829:       assertEquals(48, Node.DIRECTIVES);
830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
831:       assertEquals(52, Node.LENGTH);
832:       assertEquals(57, Node.REFLECTED_OBJECT);
833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
834:       assertEquals(8, Node.FLAG_NO_THROWS);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
837:       assertEquals(55, Node.INFERRED_FUNCTION);
838:       assertEquals(49, Node.DIRECT_EVAL);
839:       assertEquals(1, Node.DECR_FLAG);
840:       assertEquals(36, Node.QUOTED_PROP);
841:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
842:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
843:       assertEquals(12, Node.COLUMN_BITS);
844:       assertEquals(37, Node.OPT_ARG_NAME);
845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
846:       assertEquals(4095, Node.COLUMN_MASK);
847:       assertEquals(47, Node.IS_DISPATCHER);
848:       assertEquals(2, Node.POST_FLAG);
849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
850:       assertEquals(56, Node.CHANGE_TIME);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(46, Node.IS_NAMESPACE);
853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(29, Node.JSDOC_INFO_PROP);
856:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
857:       assertEquals(57, Node.LAST_PROP);
858:       assertEquals(15, Node.NO_SIDE_EFFECTS);
859:       assertEquals(30, Node.VAR_ARGS_NAME);
860:       assertEquals(54, Node.SLASH_V);
861:       assertEquals(43, Node.IS_CONSTANT_NAME);
862:       assertEquals(40, Node.ORIGINALNAME_PROP);
863:       
864:       TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
865:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
866:       assertNotNull(templateType0);
867:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
868:       assertFalse(templateType0.hasCachedValues());
869:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
870:       assertEquals("Object#Key", templateType0.getReferenceName());
871:       assertFalse(templateType0.isVoidType());
872:       assertFalse(templateType0.isFunctionPrototypeType());
873:       assertFalse(templateType0.isBooleanValueType());
874:       assertFalse(templateType0.isNumberValueType());
875:       assertTrue(templateType0.isTemplateType());
876:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
877:       assertFalse(templateType0.isStringValueType());
878:       assertFalse(templateType0.isNullType());
879:       assertFalse(templateType0.isResolved());
880:       assertTrue(templateType0.isObject());
881:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
882:       assertEquals(0, JSType.NOT_ENUMDECL);
883:       assertEquals(1, JSType.ENUMDECL);
884:       
885:       int int0 = Node.COLUMN_MASK;
886:       assertEquals(4095, int0);
887:       
888:       boolean boolean3 = node0.isNull();
889:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
890:       assertTrue(immutableList0.equals((Object)immutableList1));
891:       assertTrue(immutableList0.equals((Object)immutableList2));
892:       assertFalse(node0.equals((Object)node1));
893:       assertTrue(boolean3 == boolean2);
894:       assertFalse(boolean3 == boolean0);
895:       assertTrue(boolean3 == boolean1);
896:       assertFalse(boolean3);
897:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
898:       assertEquals(0, arrayList0.size());
899:       assertTrue(arrayList0.isEmpty());
900:       assertFalse(listIterator0.hasNext());
901:       assertFalse(listIterator0.hasPrevious());
902:       assertEquals(0, immutableList0.size());
903:       assertFalse(node0.isIn());
904:       assertFalse(node0.isCase());
905:       assertFalse(node0.isDelProp());
906:       assertFalse(node0.isIf());
907:       assertFalse(node0.isGetterDef());
908:       assertFalse(node0.isString());
909:       assertFalse(node0.isSwitch());
910:       assertEquals((-1), node0.getCharno());
911:       assertFalse(node0.isNE());
912:       assertFalse(node0.isTry());
913:       assertFalse(node0.isVoid());
914:       assertFalse(node0.isRegExp());
915:       assertFalse(node0.isComma());
916:       assertFalse(node0.isFor());
917:       assertFalse(node0.isHook());
918:       assertFalse(node0.isThis());
919:       assertEquals(0, node0.getChildCount());
920:       assertFalse(node0.isBreak());
921:       assertFalse(node0.isName());
922:       assertEquals(83, node0.getType());
923:       assertFalse(node0.isTrue());
924:       assertFalse(node0.isStringKey());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isNew());
927:       assertFalse(node0.isArrayLit());
928:       assertFalse(node0.isEmpty());
929:       assertFalse(node0.isAdd());
930:       assertFalse(node0.isDo());
931:       assertFalse(node0.isDefaultCase());
932:       assertFalse(node0.isVar());
933:       assertFalse(node0.isLabel());
934:       assertEquals((-1), node0.getLineno());
935:       assertFalse(node0.isAssignAdd());
936:       assertFalse(node0.isOr());
937:       assertFalse(node0.hasMoreThanOneChild());
938:       assertFalse(node0.isContinue());
939:       assertFalse(node0.isLabelName());
940:       assertFalse(node0.isNumber());
941:       assertEquals((-1), node0.getSourcePosition());
942:       assertFalse(node0.hasOneChild());
943:       assertFalse(node0.isCall());
944:       assertFalse(node0.isExprResult());
945:       assertFalse(node0.isScript());
946:       assertFalse(node0.isGetElem());
947:       assertFalse(node0.hasChildren());
948:       assertFalse(node0.isWhile());
949:       assertFalse(node0.isDec());
950:       assertFalse(node0.isAssign());
951:       assertFalse(node0.isTypeOf());
952:       assertFalse(node0.isWith());
953:       assertFalse(node0.isBlock());
954:       assertFalse(node0.isReturn());
955:       assertFalse(node0.isInstanceOf());
956:       assertTrue(node0.isParamList());
957:       assertFalse(node0.isCatch());
958:       assertFalse(node0.isGetProp());
959:       assertFalse(node0.isSetterDef());
960:       assertFalse(node0.isNot());
961:       assertFalse(node0.isDebugger());
962:       assertFalse(node0.isAnd());
963:       assertFalse(node0.isObjectLit());
964:       assertFalse(node0.isCast());
965:       assertFalse(node0.isInc());
966:       assertFalse(node0.isFalse());
967:       assertFalse(node0.isFunction());
968:       assertFalse(node0.isThrow());
969:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
970:       assertNotSame(node0, node1);
971:       assertEquals(57, Node.REFLECTED_OBJECT);
972:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
973:       assertEquals(50, Node.FREE_CALL);
974:       assertEquals(52, Node.LENGTH);
975:       assertEquals(40, Node.ORIGINALNAME_PROP);
976:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(57, Node.LAST_PROP);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
983:       assertEquals(12, Node.COLUMN_BITS);
984:       assertEquals(4095, Node.COLUMN_MASK);
985:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
986:       assertEquals(55, Node.INFERRED_FUNCTION);
987:       assertEquals(36, Node.QUOTED_PROP);
988:       assertEquals(8, Node.FLAG_NO_THROWS);
989:       assertEquals(37, Node.OPT_ARG_NAME);
990:       assertEquals(48, Node.DIRECTIVES);
991:       assertEquals(49, Node.DIRECT_EVAL);
992:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
993:       assertEquals(56, Node.CHANGE_TIME);
994:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
995:       assertEquals(29, Node.JSDOC_INFO_PROP);
996:       assertEquals(53, Node.INPUT_ID);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(2, Node.POST_FLAG);
999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1000:       assertEquals(47, Node.IS_DISPATCHER);
1001:       assertEquals(32, Node.INCRDECR_PROP);
1002:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1003:       assertEquals(1, Node.DECR_FLAG);
1004:       assertEquals(46, Node.IS_NAMESPACE);
1005:       assertEquals(54, Node.SLASH_V);
1006:       assertEquals(43, Node.IS_CONSTANT_NAME);
1007:       
1008:       Iterable<Node> iterable0 = node0.children();
1009:       assertFalse(iterable0.contains(node1));
1010:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1011:       assertTrue(immutableList0.equals((Object)immutableList1));
1012:       assertTrue(immutableList0.equals((Object)immutableList2));
1013:       assertFalse(node0.equals((Object)node1));
1014:       assertNotNull(iterable0);
1015:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1016:       assertEquals(0, arrayList0.size());
1017:       assertTrue(arrayList0.isEmpty());
1018:       assertFalse(listIterator0.hasNext());
1019:       assertFalse(listIterator0.hasPrevious());
1020:       assertEquals(0, immutableList0.size());
1021:       assertFalse(node0.isIn());
1022:       assertFalse(node0.isCase());
1023:       assertFalse(node0.isDelProp());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isGetterDef());
1026:       assertFalse(node0.isString());
1027:       assertFalse(node0.isSwitch());
1028:       assertEquals((-1), node0.getCharno());
1029:       assertFalse(node0.isNE());
1030:       assertFalse(node0.isTry());
1031:       assertFalse(node0.isVoid());
1032:       assertFalse(node0.isRegExp());
1033:       assertFalse(node0.isComma());
1034:       assertFalse(node0.isFor());
1035:       assertFalse(node0.isHook());
1036:       assertFalse(node0.isThis());
1037:       assertEquals(0, node0.getChildCount());
1038:       assertFalse(node0.isBreak());
1039:       assertFalse(node0.isName());
1040:       assertEquals(83, node0.getType());
1041:       assertFalse(node0.isTrue());
1042:       assertFalse(node0.isStringKey());
1043:       assertFalse(node0.isNull());
1044:       assertFalse(node0.isNew());
1045:       assertFalse(node0.isArrayLit());
1046:       assertFalse(node0.isEmpty());
1047:       assertFalse(node0.isAdd());
1048:       assertFalse(node0.isDo());
1049:       assertFalse(node0.isDefaultCase());
1050:       assertFalse(node0.isVar());
1051:       assertFalse(node0.isLabel());
1052:       assertEquals((-1), node0.getLineno());
1053:       assertFalse(node0.isAssignAdd());
1054:       assertFalse(node0.isOr());
1055:       assertFalse(node0.hasMoreThanOneChild());
1056:       assertFalse(node0.isContinue());
1057:       assertFalse(node0.isLabelName());
1058:       assertFalse(node0.isNumber());
1059:       assertEquals((-1), node0.getSourcePosition());
1060:       assertFalse(node0.hasOneChild());
1061:       assertFalse(node0.isCall());
1062:       assertFalse(node0.isExprResult());
1063:       assertFalse(node0.isScript());
1064:       assertFalse(node0.isGetElem());
1065:       assertFalse(node0.hasChildren());
1066:       assertFalse(node0.isWhile());
1067:       assertFalse(node0.isDec());
1068:       assertFalse(node0.isAssign());
1069:       assertFalse(node0.isTypeOf());
1070:       assertFalse(node0.isWith());
1071:       assertFalse(node0.isBlock());
1072:       assertFalse(node0.isReturn());
1073:       assertFalse(node0.isInstanceOf());
1074:       assertTrue(node0.isParamList());
1075:       assertFalse(node0.isCatch());
1076:       assertFalse(node0.isGetProp());
1077:       assertFalse(node0.isSetterDef());
1078:       assertFalse(node0.isNot());
1079:       assertFalse(node0.isDebugger());
1080:       assertFalse(node0.isAnd());
1081:       assertFalse(node0.isObjectLit());
1082:       assertFalse(node0.isCast());
1083:       assertFalse(node0.isInc());
1084:       assertFalse(node0.isFalse());
1085:       assertFalse(node0.isFunction());
1086:       assertFalse(node0.isThrow());
1087:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1088:       assertNotSame(node0, node1);
1089:       assertEquals(57, Node.REFLECTED_OBJECT);
1090:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1091:       assertEquals(50, Node.FREE_CALL);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(40, Node.ORIGINALNAME_PROP);
1094:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(39, Node.EMPTY_BLOCK);
1097:       assertEquals(57, Node.LAST_PROP);
1098:       assertEquals(30, Node.VAR_ARGS_NAME);
1099:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1101:       assertEquals(12, Node.COLUMN_BITS);
1102:       assertEquals(4095, Node.COLUMN_MASK);
1103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1104:       assertEquals(55, Node.INFERRED_FUNCTION);
1105:       assertEquals(36, Node.QUOTED_PROP);
1106:       assertEquals(8, Node.FLAG_NO_THROWS);
1107:       assertEquals(37, Node.OPT_ARG_NAME);
1108:       assertEquals(48, Node.DIRECTIVES);
1109:       assertEquals(49, Node.DIRECT_EVAL);
1110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1111:       assertEquals(56, Node.CHANGE_TIME);
1112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(53, Node.INPUT_ID);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(2, Node.POST_FLAG);
1117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1118:       assertEquals(47, Node.IS_DISPATCHER);
1119:       assertEquals(32, Node.INCRDECR_PROP);
1120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1121:       assertEquals(1, Node.DECR_FLAG);
1122:       assertEquals(46, Node.IS_NAMESPACE);
1123:       assertEquals(54, Node.SLASH_V);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       
1126:       boolean boolean4 = node1.isString();
1127:       assertTrue(boolean4 == boolean2);
1128:       assertFalse(boolean4 == boolean0);
1129:       assertTrue(boolean4 == boolean1);
1130:       assertTrue(boolean4 == boolean3);
1131:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1132:       assertTrue(immutableList0.equals((Object)immutableList1));
1133:       assertTrue(immutableList0.equals((Object)immutableList2));
1134:       assertFalse(node0.equals((Object)node1));
1135:       assertFalse(node1.equals((Object)node0));
1136:       assertFalse(boolean4);
1137:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1138:       assertEquals(0, arrayList0.size());
1139:       assertTrue(arrayList0.isEmpty());
1140:       assertFalse(listIterator0.hasNext());
1141:       assertFalse(listIterator0.hasPrevious());
1142:       assertEquals(0, immutableList0.size());
1143:       assertFalse(node0.isIn());
1144:       assertFalse(node0.isCase());
1145:       assertFalse(node0.isDelProp());
1146:       assertFalse(node0.isIf());
1147:       assertFalse(node0.isGetterDef());
1148:       assertFalse(node0.isString());
1149:       assertFalse(node0.isSwitch());
1150:       assertEquals((-1), node0.getCharno());
1151:       assertFalse(node0.isNE());
1152:       assertFalse(node0.isTry());
1153:       assertFalse(node0.isVoid());
1154:       assertFalse(node0.isRegExp());
1155:       assertFalse(node0.isComma());
1156:       assertFalse(node0.isFor());
1157:       assertFalse(node0.isHook());
1158:       assertFalse(node0.isThis());
1159:       assertEquals(0, node0.getChildCount());
1160:       assertFalse(node0.isBreak());
1161:       assertFalse(node0.isName());
1162:       assertEquals(83, node0.getType());
1163:       assertFalse(node0.isTrue());
1164:       assertFalse(node0.isStringKey());
1165:       assertFalse(node0.isNull());
1166:       assertFalse(node0.isNew());
1167:       assertFalse(node0.isArrayLit());
1168:       assertFalse(node0.isEmpty());
1169:       assertFalse(node0.isAdd());
1170:       assertFalse(node0.isDo());
1171:       assertFalse(node0.isDefaultCase());
1172:       assertFalse(node0.isVar());
1173:       assertFalse(node0.isLabel());
1174:       assertEquals((-1), node0.getLineno());
1175:       assertFalse(node0.isAssignAdd());
1176:       assertFalse(node0.isOr());
1177:       assertFalse(node0.hasMoreThanOneChild());
1178:       assertFalse(node0.isContinue());
1179:       assertFalse(node0.isLabelName());
1180:       assertFalse(node0.isNumber());
1181:       assertEquals((-1), node0.getSourcePosition());
1182:       assertFalse(node0.hasOneChild());
1183:       assertFalse(node0.isCall());
1184:       assertFalse(node0.isExprResult());
1185:       assertFalse(node0.isScript());
1186:       assertFalse(node0.isGetElem());
1187:       assertFalse(node0.hasChildren());
1188:       assertFalse(node0.isWhile());
1189:       assertFalse(node0.isDec());
1190:       assertFalse(node0.isAssign());
1191:       assertFalse(node0.isTypeOf());
1192:       assertFalse(node0.isWith());
1193:       assertFalse(node0.isBlock());
1194:       assertFalse(node0.isReturn());
1195:       assertFalse(node0.isInstanceOf());
1196:       assertTrue(node0.isParamList());
1197:       assertFalse(node0.isCatch());
1198:       assertFalse(node0.isGetProp());
1199:       assertFalse(node0.isSetterDef());
1200:       assertFalse(node0.isNot());
1201:       assertFalse(node0.isDebugger());
1202:       assertFalse(node0.isAnd());
1203:       assertFalse(node0.isObjectLit());
1204:       assertFalse(node0.isCast());
1205:       assertFalse(node0.isInc());
1206:       assertFalse(node0.isFalse());
1207:       assertFalse(node0.isFunction());
1208:       assertFalse(node0.isThrow());
1209:       assertFalse(node1.isDo());
1210:       assertFalse(node1.isWhile());
1211:       assertFalse(node1.isContinue());
1212:       assertFalse(node1.hasMoreThanOneChild());
1213:       assertFalse(node1.isBlock());
1214:       assertFalse(node1.isLabel());
1215:       assertFalse(node1.isCall());
1216:       assertFalse(node1.isAssign());
1217:       assertFalse(node1.isLabelName());
1218:       assertFalse(node1.isStringKey());
1219:       assertFalse(node1.isNumber());
1220:       assertFalse(node1.isTypeOf());
1221:       assertFalse(node1.isParamList());
1222:       assertFalse(node1.isDec());
1223:       assertEquals(47, node1.getCharno());
1224:       assertFalse(node1.isScript());
1225:       assertFalse(node1.isDefaultCase());
1226:       assertFalse(node1.isTrue());
1227:       assertFalse(node1.isVoid());
1228:       assertFalse(node1.isArrayLit());
1229:       assertFalse(node1.isBreak());
1230:       assertFalse(node1.isExprResult());
1231:       assertFalse(node1.isGetElem());
1232:       assertFalse(node1.isEmpty());
1233:       assertFalse(node1.isDelProp());
1234:       assertFalse(node1.isName());
1235:       assertFalse(node1.isNull());
1236:       assertFalse(node1.isVar());
1237:       assertFalse(node1.isAdd());
1238:       assertFalse(node1.isAssignAdd());
1239:       assertFalse(node1.isOr());
1240:       assertFalse(node1.isNew());
1241:       assertFalse(node1.isCase());
1242:       assertTrue(node1.isReturn());
1243:       assertFalse(node1.isString());
1244:       assertEquals(4, node1.getType());
1245:       assertTrue(node1.hasChildren());
1246:       assertEquals(1, node1.getChildCount());
1247:       assertFalse(node1.isSwitch());
1248:       assertFalse(node1.isFor());
1249:       assertFalse(node1.isGetterDef());
1250:       assertFalse(node1.isComma());
1251:       assertFalse(node1.isHook());
1252:       assertTrue(node1.hasOneChild());
1253:       assertFalse(node1.isThis());
1254:       assertFalse(node1.isTry());
1255:       assertFalse(node1.isGetProp());
1256:       assertEquals(11616303, node1.getSourcePosition());
1257:       assertFalse(node1.isNot());
1258:       assertFalse(node1.isAnd());
1259:       assertFalse(node1.isObjectLit());
1260:       assertFalse(node1.isWith());
1261:       assertFalse(node1.isRegExp());
1262:       assertFalse(node1.isDebugger());
1263:       assertFalse(node1.isFunction());
1264:       assertFalse(node1.isCast());
1265:       assertFalse(node1.isCatch());
1266:       assertFalse(node1.isInstanceOf());
1267:       assertFalse(node1.isIf());
1268:       assertFalse(node1.isFalse());
1269:       assertFalse(node1.isNE());
1270:       assertFalse(node1.isThrow());
1271:       assertFalse(node1.isIn());
1272:       assertEquals(2836, node1.getLineno());
1273:       assertFalse(node1.isInc());
1274:       assertFalse(node1.isSetterDef());
1275:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1276:       assertNotSame(node0, node1);
1277:       assertNotSame(node1, node0);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1280:       assertEquals(50, Node.FREE_CALL);
1281:       assertEquals(52, Node.LENGTH);
1282:       assertEquals(40, Node.ORIGINALNAME_PROP);
1283:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1285:       assertEquals(39, Node.EMPTY_BLOCK);
1286:       assertEquals(57, Node.LAST_PROP);
1287:       assertEquals(30, Node.VAR_ARGS_NAME);
1288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1290:       assertEquals(12, Node.COLUMN_BITS);
1291:       assertEquals(4095, Node.COLUMN_MASK);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(55, Node.INFERRED_FUNCTION);
1294:       assertEquals(36, Node.QUOTED_PROP);
1295:       assertEquals(8, Node.FLAG_NO_THROWS);
1296:       assertEquals(37, Node.OPT_ARG_NAME);
1297:       assertEquals(48, Node.DIRECTIVES);
1298:       assertEquals(49, Node.DIRECT_EVAL);
1299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1300:       assertEquals(56, Node.CHANGE_TIME);
1301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1302:       assertEquals(29, Node.JSDOC_INFO_PROP);
1303:       assertEquals(53, Node.INPUT_ID);
1304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1305:       assertEquals(2, Node.POST_FLAG);
1306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1307:       assertEquals(47, Node.IS_DISPATCHER);
1308:       assertEquals(32, Node.INCRDECR_PROP);
1309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1310:       assertEquals(1, Node.DECR_FLAG);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(54, Node.SLASH_V);
1313:       assertEquals(43, Node.IS_CONSTANT_NAME);
1314:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1315:       assertEquals(50, Node.FREE_CALL);
1316:       assertEquals(48, Node.DIRECTIVES);
1317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1318:       assertEquals(52, Node.LENGTH);
1319:       assertEquals(57, Node.REFLECTED_OBJECT);
1320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(39, Node.EMPTY_BLOCK);
1323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1324:       assertEquals(55, Node.INFERRED_FUNCTION);
1325:       assertEquals(49, Node.DIRECT_EVAL);
1326:       assertEquals(1, Node.DECR_FLAG);
1327:       assertEquals(36, Node.QUOTED_PROP);
1328:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1330:       assertEquals(12, Node.COLUMN_BITS);
1331:       assertEquals(37, Node.OPT_ARG_NAME);
1332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(47, Node.IS_DISPATCHER);
1335:       assertEquals(2, Node.POST_FLAG);
1336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1337:       assertEquals(56, Node.CHANGE_TIME);
1338:       assertEquals(32, Node.INCRDECR_PROP);
1339:       assertEquals(46, Node.IS_NAMESPACE);
1340:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1341:       assertEquals(53, Node.INPUT_ID);
1342:       assertEquals(29, Node.JSDOC_INFO_PROP);
1343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1344:       assertEquals(57, Node.LAST_PROP);
1345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1346:       assertEquals(30, Node.VAR_ARGS_NAME);
1347:       assertEquals(54, Node.SLASH_V);
1348:       assertEquals(43, Node.IS_CONSTANT_NAME);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       
1351:       boolean boolean5 = node0.isLocalResultCall();
1352:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1353:       assertTrue(boolean5 == boolean3);
1354:       assertTrue(boolean5 == boolean4);
1355:       assertTrue(boolean5 == boolean2);
1356:       assertFalse(boolean5 == boolean0);
1357:       assertTrue(boolean5 == boolean1);
1358:       assertTrue(immutableList0.equals((Object)immutableList1));
1359:       assertTrue(immutableList0.equals((Object)immutableList2));
1360:       assertFalse(node0.equals((Object)node1));
1361:       assertFalse(boolean5);
1362:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1363:       assertEquals(0, arrayList0.size());
1364:       assertTrue(arrayList0.isEmpty());
1365:       assertFalse(listIterator0.hasNext());
1366:       assertFalse(listIterator0.hasPrevious());
1367:       assertEquals(0, immutableList0.size());
1368:       assertFalse(node0.isIn());
1369:       assertFalse(node0.isCase());
1370:       assertFalse(node0.isDelProp());
1371:       assertFalse(node0.isIf());
1372:       assertFalse(node0.isGetterDef());
1373:       assertFalse(node0.isString());
1374:       assertFalse(node0.isSwitch());
1375:       assertEquals((-1), node0.getCharno());
1376:       assertFalse(node0.isNE());
1377:       assertFalse(node0.isTry());
1378:       assertFalse(node0.isVoid());
1379:       assertFalse(node0.isRegExp());
1380:       assertFalse(node0.isComma());
1381:       assertFalse(node0.isFor());
1382:       assertFalse(node0.isHook());
1383:       assertFalse(node0.isThis());
1384:       assertEquals(0, node0.getChildCount());
1385:       assertFalse(node0.isBreak());
1386:       assertFalse(node0.isName());
1387:       assertEquals(83, node0.getType());
1388:       assertFalse(node0.isTrue());
1389:       assertFalse(node0.isStringKey());
1390:       assertFalse(node0.isNull());
1391:       assertFalse(node0.isNew());
1392:       assertFalse(node0.isArrayLit());
1393:       assertFalse(node0.isEmpty());
1394:       assertFalse(node0.isAdd());
1395:       assertFalse(node0.isDo());
1396:       assertFalse(node0.isDefaultCase());
1397:       assertFalse(node0.isVar());
1398:       assertFalse(node0.isLabel());
1399:       assertEquals((-1), node0.getLineno());
1400:       assertFalse(node0.isAssignAdd());
1401:       assertFalse(node0.isOr());
1402:       assertFalse(node0.hasMoreThanOneChild());
1403:       assertFalse(node0.isContinue());
1404:       assertFalse(node0.isLabelName());
1405:       assertFalse(node0.isNumber());
1406:       assertEquals((-1), node0.getSourcePosition());
1407:       assertFalse(node0.hasOneChild());
1408:       assertFalse(node0.isCall());
1409:       assertFalse(node0.isExprResult());
1410:       assertFalse(node0.isScript());
1411:       assertFalse(node0.isGetElem());
1412:       assertFalse(node0.hasChildren());
1413:       assertFalse(node0.isWhile());
1414:       assertFalse(node0.isDec());
1415:       assertFalse(node0.isAssign());
1416:       assertFalse(node0.isTypeOf());
1417:       assertFalse(node0.isWith());
1418:       assertFalse(node0.isBlock());
1419:       assertFalse(node0.isReturn());
1420:       assertFalse(node0.isInstanceOf());
1421:       assertTrue(node0.isParamList());
1422:       assertFalse(node0.isCatch());
1423:       assertFalse(node0.isGetProp());
1424:       assertFalse(node0.isSetterDef());
1425:       assertFalse(node0.isNot());
1426:       assertFalse(node0.isDebugger());
1427:       assertFalse(node0.isAnd());
1428:       assertFalse(node0.isObjectLit());
1429:       assertFalse(node0.isCast());
1430:       assertFalse(node0.isInc());
1431:       assertFalse(node0.isFalse());
1432:       assertFalse(node0.isFunction());
1433:       assertFalse(node0.isThrow());
1434:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1435:       assertNotSame(node0, node1);
1436:       assertEquals(57, Node.REFLECTED_OBJECT);
1437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1438:       assertEquals(50, Node.FREE_CALL);
1439:       assertEquals(52, Node.LENGTH);
1440:       assertEquals(40, Node.ORIGINALNAME_PROP);
1441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1443:       assertEquals(39, Node.EMPTY_BLOCK);
1444:       assertEquals(57, Node.LAST_PROP);
1445:       assertEquals(30, Node.VAR_ARGS_NAME);
1446:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1447:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1448:       assertEquals(12, Node.COLUMN_BITS);
1449:       assertEquals(4095, Node.COLUMN_MASK);
1450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1451:       assertEquals(55, Node.INFERRED_FUNCTION);
1452:       assertEquals(36, Node.QUOTED_PROP);
1453:       assertEquals(8, Node.FLAG_NO_THROWS);
1454:       assertEquals(37, Node.OPT_ARG_NAME);
1455:       assertEquals(48, Node.DIRECTIVES);
1456:       assertEquals(49, Node.DIRECT_EVAL);
1457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1458:       assertEquals(56, Node.CHANGE_TIME);
1459:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1460:       assertEquals(29, Node.JSDOC_INFO_PROP);
1461:       assertEquals(53, Node.INPUT_ID);
1462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1463:       assertEquals(2, Node.POST_FLAG);
1464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1465:       assertEquals(47, Node.IS_DISPATCHER);
1466:       assertEquals(32, Node.INCRDECR_PROP);
1467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1468:       assertEquals(1, Node.DECR_FLAG);
1469:       assertEquals(46, Node.IS_NAMESPACE);
1470:       assertEquals(54, Node.SLASH_V);
1471:       assertEquals(43, Node.IS_CONSTANT_NAME);
1472:       
1473:       boolean boolean6 = node1.isFunction();
1474:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1475:       assertTrue(boolean6 == boolean1);
1476:       assertTrue(boolean6 == boolean2);
1477:       assertTrue(boolean6 == boolean4);
1478:       assertTrue(boolean6 == boolean3);
1479:       assertFalse(boolean6 == boolean0);
1480:       assertTrue(boolean6 == boolean5);
1481:       assertTrue(immutableList0.equals((Object)immutableList1));
1482:       assertTrue(immutableList0.equals((Object)immutableList2));
1483:       assertFalse(node0.equals((Object)node1));
1484:       assertFalse(node1.equals((Object)node0));
1485:       assertFalse(boolean6);
1486:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1487:       assertEquals(0, arrayList0.size());
1488:       assertTrue(arrayList0.isEmpty());
1489:       assertFalse(listIterator0.hasNext());
1490:       assertFalse(listIterator0.hasPrevious());
1491:       assertEquals(0, immutableList0.size());
1492:       assertFalse(node0.isIn());
1493:       assertFalse(node0.isCase());
1494:       assertFalse(node0.isDelProp());
1495:       assertFalse(node0.isIf());
1496:       assertFalse(node0.isGetterDef());
1497:       assertFalse(node0.isString());
1498:       assertFalse(node0.isSwitch());
1499:       assertEquals((-1), node0.getCharno());
1500:       assertFalse(node0.isNE());
1501:       assertFalse(node0.isTry());
1502:       assertFalse(node0.isVoid());
1503:       assertFalse(node0.isRegExp());
1504:       assertFalse(node0.isComma());
1505:       assertFalse(node0.isFor());
1506:       assertFalse(node0.isHook());
1507:       assertFalse(node0.isThis());
1508:       assertEquals(0, node0.getChildCount());
1509:       assertFalse(node0.isBreak());
1510:       assertFalse(node0.isName());
1511:       assertEquals(83, node0.getType());
1512:       assertFalse(node0.isTrue());
1513:       assertFalse(node0.isStringKey());
1514:       assertFalse(node0.isNull());
1515:       assertFalse(node0.isNew());
1516:       assertFalse(node0.isArrayLit());
1517:       assertFalse(node0.isEmpty());
1518:       assertFalse(node0.isAdd());
1519:       assertFalse(node0.isDo());
1520:       assertFalse(node0.isDefaultCase());
1521:       assertFalse(node0.isVar());
1522:       assertFalse(node0.isLabel());
1523:       assertEquals((-1), node0.getLineno());
1524:       assertFalse(node0.isAssignAdd());
1525:       assertFalse(node0.isOr());
1526:       assertFalse(node0.hasMoreThanOneChild());
1527:       assertFalse(node0.isContinue());
1528:       assertFalse(node0.isLabelName());
1529:       assertFalse(node0.isNumber());
1530:       assertEquals((-1), node0.getSourcePosition());
1531:       assertFalse(node0.hasOneChild());
1532:       assertFalse(node0.isCall());
1533:       assertFalse(node0.isExprResult());
1534:       assertFalse(node0.isScript());
1535:       assertFalse(node0.isGetElem());
1536:       assertFalse(node0.hasChildren());
1537:       assertFalse(node0.isWhile());
1538:       assertFalse(node0.isDec());
1539:       assertFalse(node0.isAssign());
1540:       assertFalse(node0.isTypeOf());
1541:       assertFalse(node0.isWith());
1542:       assertFalse(node0.isBlock());
1543:       assertFalse(node0.isReturn());
1544:       assertFalse(node0.isInstanceOf());
1545:       assertTrue(node0.isParamList());
1546:       assertFalse(node0.isCatch());
1547:       assertFalse(node0.isGetProp());
1548:       assertFalse(node0.isSetterDef());
1549:       assertFalse(node0.isNot());
1550:       assertFalse(node0.isDebugger());
1551:       assertFalse(node0.isAnd());
1552:       assertFalse(node0.isObjectLit());
1553:       assertFalse(node0.isCast());
1554:       assertFalse(node0.isInc());
1555:       assertFalse(node0.isFalse());
1556:       assertFalse(node0.isFunction());
1557:       assertFalse(node0.isThrow());
1558:       assertFalse(node1.isDo());
1559:       assertFalse(node1.isWhile());
1560:       assertFalse(node1.isContinue());
1561:       assertFalse(node1.hasMoreThanOneChild());
1562:       assertFalse(node1.isBlock());
1563:       assertFalse(node1.isLabel());
1564:       assertFalse(node1.isCall());
1565:       assertFalse(node1.isAssign());
1566:       assertFalse(node1.isLabelName());
1567:       assertFalse(node1.isStringKey());
1568:       assertFalse(node1.isNumber());
1569:       assertFalse(node1.isTypeOf());
1570:       assertFalse(node1.isParamList());
1571:       assertFalse(node1.isDec());
1572:       assertEquals(47, node1.getCharno());
1573:       assertFalse(node1.isScript());
1574:       assertFalse(node1.isDefaultCase());
1575:       assertFalse(node1.isTrue());
1576:       assertFalse(node1.isVoid());
1577:       assertFalse(node1.isArrayLit());
1578:       assertFalse(node1.isBreak());
1579:       assertFalse(node1.isExprResult());
1580:       assertFalse(node1.isGetElem());
1581:       assertFalse(node1.isEmpty());
1582:       assertFalse(node1.isDelProp());
1583:       assertFalse(node1.isName());
1584:       assertFalse(node1.isNull());
1585:       assertFalse(node1.isVar());
1586:       assertFalse(node1.isAdd());
1587:       assertFalse(node1.isAssignAdd());
1588:       assertFalse(node1.isOr());
1589:       assertFalse(node1.isNew());
1590:       assertFalse(node1.isCase());
1591:       assertTrue(node1.isReturn());
1592:       assertFalse(node1.isString());
1593:       assertEquals(4, node1.getType());
1594:       assertTrue(node1.hasChildren());
1595:       assertEquals(1, node1.getChildCount());
1596:       assertFalse(node1.isSwitch());
1597:       assertFalse(node1.isFor());
1598:       assertFalse(node1.isGetterDef());
1599:       assertFalse(node1.isComma());
1600:       assertFalse(node1.isHook());
1601:       assertTrue(node1.hasOneChild());
1602:       assertFalse(node1.isThis());
1603:       assertFalse(node1.isTry());
1604:       assertFalse(node1.isGetProp());
1605:       assertEquals(11616303, node1.getSourcePosition());
1606:       assertFalse(node1.isNot());
1607:       assertFalse(node1.isAnd());
1608:       assertFalse(node1.isObjectLit());
1609:       assertFalse(node1.isWith());
1610:       assertFalse(node1.isRegExp());
1611:       assertFalse(node1.isDebugger());
1612:       assertFalse(node1.isFunction());
1613:       assertFalse(node1.isCast());
1614:       assertFalse(node1.isCatch());
1615:       assertFalse(node1.isInstanceOf());
1616:       assertFalse(node1.isIf());
1617:       assertFalse(node1.isFalse());
1618:       assertFalse(node1.isNE());
1619:       assertFalse(node1.isThrow());
1620:       assertFalse(node1.isIn());
1621:       assertEquals(2836, node1.getLineno());
1622:       assertFalse(node1.isInc());
1623:       assertFalse(node1.isSetterDef());
1624:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1625:       assertNotSame(node0, node1);
1626:       assertNotSame(node1, node0);
1627:       assertEquals(57, Node.REFLECTED_OBJECT);
1628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1629:       assertEquals(50, Node.FREE_CALL);
1630:       assertEquals(52, Node.LENGTH);
1631:       assertEquals(40, Node.ORIGINALNAME_PROP);
1632:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1634:       assertEquals(39, Node.EMPTY_BLOCK);
1635:       assertEquals(57, Node.LAST_PROP);
1636:       assertEquals(30, Node.VAR_ARGS_NAME);
1637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1639:       assertEquals(12, Node.COLUMN_BITS);
1640:       assertEquals(4095, Node.COLUMN_MASK);
1641:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1642:       assertEquals(55, Node.INFERRED_FUNCTION);
1643:       assertEquals(36, Node.QUOTED_PROP);
1644:       assertEquals(8, Node.FLAG_NO_THROWS);
1645:       assertEquals(37, Node.OPT_ARG_NAME);
1646:       assertEquals(48, Node.DIRECTIVES);
1647:       assertEquals(49, Node.DIRECT_EVAL);
1648:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1649:       assertEquals(56, Node.CHANGE_TIME);
1650:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1651:       assertEquals(29, Node.JSDOC_INFO_PROP);
1652:       assertEquals(53, Node.INPUT_ID);
1653:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1654:       assertEquals(2, Node.POST_FLAG);
1655:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1656:       assertEquals(47, Node.IS_DISPATCHER);
1657:       assertEquals(32, Node.INCRDECR_PROP);
1658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1659:       assertEquals(1, Node.DECR_FLAG);
1660:       assertEquals(46, Node.IS_NAMESPACE);
1661:       assertEquals(54, Node.SLASH_V);
1662:       assertEquals(43, Node.IS_CONSTANT_NAME);
1663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1664:       assertEquals(50, Node.FREE_CALL);
1665:       assertEquals(48, Node.DIRECTIVES);
1666:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1667:       assertEquals(52, Node.LENGTH);
1668:       assertEquals(57, Node.REFLECTED_OBJECT);
1669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1670:       assertEquals(8, Node.FLAG_NO_THROWS);
1671:       assertEquals(39, Node.EMPTY_BLOCK);
1672:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1673:       assertEquals(55, Node.INFERRED_FUNCTION);
1674:       assertEquals(49, Node.DIRECT_EVAL);
1675:       assertEquals(1, Node.DECR_FLAG);
1676:       assertEquals(36, Node.QUOTED_PROP);
1677:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1678:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1679:       assertEquals(12, Node.COLUMN_BITS);
1680:       assertEquals(37, Node.OPT_ARG_NAME);
1681:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1682:       assertEquals(4095, Node.COLUMN_MASK);
1683:       assertEquals(47, Node.IS_DISPATCHER);
1684:       assertEquals(2, Node.POST_FLAG);
1685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1686:       assertEquals(56, Node.CHANGE_TIME);
1687:       assertEquals(32, Node.INCRDECR_PROP);
1688:       assertEquals(46, Node.IS_NAMESPACE);
1689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1690:       assertEquals(53, Node.INPUT_ID);
1691:       assertEquals(29, Node.JSDOC_INFO_PROP);
1692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1693:       assertEquals(57, Node.LAST_PROP);
1694:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1695:       assertEquals(30, Node.VAR_ARGS_NAME);
1696:       assertEquals(54, Node.SLASH_V);
1697:       assertEquals(43, Node.IS_CONSTANT_NAME);
1698:       assertEquals(40, Node.ORIGINALNAME_PROP);
1699:   }
1700: }
RegularFileObject[/tmp/EvoSuite_304_1628159318054/com/google/javascript/rhino/Node_304_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_304_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_304_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_304_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:38.442 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(simpleErrorReporter1);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
assertNotNull(listIterator0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
assertNotNull(immutableList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = new Node(4, node0, 2836, 47);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertEquals(47, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isReturn());
assertFalse(node1.isString());
assertEquals(4, node1.getType());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isGetProp());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node1.isLabel();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertEquals(47, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isReturn());
assertFalse(node1.isString());
assertEquals(4, node1.getType());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isGetProp());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

ImmutableList<JSType> immutableList1 = immutableList0.reverse();
assertTrue(immutableList1.equals((Object)immutableList0));
assertNotNull(immutableList1);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());

ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList1.equals((Object)immutableList0));
assertTrue(immutableList2.equals((Object)immutableList0));
assertNotNull(immutableList2);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());
assertEquals(0, immutableList2.size());
assertSame(immutableList1, immutableList2);
assertSame(immutableList2, immutableList1);

boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertEquals(47, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isReturn());
assertFalse(node1.isString());
assertEquals(4, node1.getType());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isGetProp());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(templateType0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(templateType0.hasCachedValues());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertEquals("Object#Key", templateType0.getReferenceName());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.isNumberValueType());
assertTrue(templateType0.isTemplateType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isResolved());
assertTrue(templateType0.isObject());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

int int0 = Node.COLUMN_MASK;
assertEquals(4095, int0);

boolean boolean3 = node0.isNull();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean4 = node1.isString();
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertEquals(47, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isReturn());
assertFalse(node1.isString());
assertEquals(4, node1.getType());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isGetProp());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean5 = node0.isLocalResultCall();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean5);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean6 = node1.isFunction();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertFalse(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList0.equals((Object)immutableList2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean6);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertEquals(47, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isReturn());
assertFalse(node1.isString());
assertEquals(4, node1.getType());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isGetProp());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 10:28:39.000 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_316_1628159318824/com/google/javascript/rhino/Node_316_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_316_1628159318824/com/google/javascript/rhino/Node_316_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:39.000 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:39.000 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:39.000 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1195
[MASTER] 10:28:39.003 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_316_1628159318824/com/google/javascript/rhino/Node_316_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.ErrorReporter;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeNative;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import com.google.javascript.rhino.jstype.ObjectType;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_316_tmp__ESTest extends Node_316_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Node node0 = Node.newNumber(0.0);
28:       assertNotNull(node0);
29:       assertFalse(node0.isBlock());
30:       assertFalse(node0.isNew());
31:       assertFalse(node0.isAdd());
32:       assertFalse(node0.isVar());
33:       assertEquals(39, node0.getType());
34:       assertFalse(node0.isName());
35:       assertFalse(node0.isStringKey());
36:       assertFalse(node0.isContinue());
37:       assertFalse(node0.hasMoreThanOneChild());
38:       assertFalse(node0.isCall());
39:       assertFalse(node0.isParamList());
40:       assertFalse(node0.isTypeOf());
41:       assertEquals((-1), node0.getSourcePosition());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isReturn());
45:       assertFalse(node0.isWhile());
46:       assertFalse(node0.hasOneChild());
47:       assertFalse(node0.isTry());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isDebugger());
51:       assertFalse(node0.isAnd());
52:       assertFalse(node0.isIf());
53:       assertFalse(node0.isWith());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.isCast());
57:       assertEquals((-1), node0.getLineno());
58:       assertFalse(node0.isIn());
59:       assertFalse(node0.isNE());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isInc());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isSwitch());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isBreak());
68:       assertTrue(node0.isNumber());
69:       assertFalse(node0.isComma());
70:       assertFalse(node0.isThis());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isCase());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isObjectLit());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isGetProp());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isTrue());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isLabelName());
83:       assertFalse(node0.isDelProp());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isLabel());
88:       assertFalse(node0.isOr());
89:       assertFalse(node0.isAssignAdd());
90:       assertFalse(node0.isNull());
91:       assertEquals(0, node0.getChildCount());
92:       assertFalse(node0.isEmpty());
93:       assertFalse(node0.isDo());
94:       assertFalse(node0.isDefaultCase());
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
101:       assertEquals(8, Node.FLAG_NO_THROWS);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(56, Node.CHANGE_TIME);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(29, Node.JSDOC_INFO_PROP);
124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
125:       assertEquals(54, Node.SLASH_V);
126:       assertEquals(43, Node.IS_CONSTANT_NAME);
127:       assertEquals(47, Node.IS_DISPATCHER);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(30, Node.VAR_ARGS_NAME);
130:       assertEquals(40, Node.ORIGINALNAME_PROP);
131:       
132:       node0.setCharno(1709);
133:       assertFalse(node0.isBlock());
134:       assertFalse(node0.isNew());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isVar());
137:       assertEquals(39, node0.getType());
138:       assertFalse(node0.isName());
139:       assertFalse(node0.isStringKey());
140:       assertFalse(node0.isContinue());
141:       assertFalse(node0.hasMoreThanOneChild());
142:       assertFalse(node0.isCall());
143:       assertFalse(node0.isParamList());
144:       assertFalse(node0.isTypeOf());
145:       assertEquals((-1), node0.getSourcePosition());
146:       assertFalse(node0.isDec());
147:       assertFalse(node0.hasChildren());
148:       assertFalse(node0.isReturn());
149:       assertFalse(node0.isWhile());
150:       assertFalse(node0.hasOneChild());
151:       assertFalse(node0.isTry());
152:       assertFalse(node0.isFunction());
153:       assertFalse(node0.isRegExp());
154:       assertFalse(node0.isDebugger());
155:       assertFalse(node0.isAnd());
156:       assertFalse(node0.isIf());
157:       assertFalse(node0.isWith());
158:       assertFalse(node0.isCatch());
159:       assertFalse(node0.isInstanceOf());
160:       assertFalse(node0.isCast());
161:       assertEquals((-1), node0.getLineno());
162:       assertFalse(node0.isIn());
163:       assertFalse(node0.isNE());
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isInc());
166:       assertFalse(node0.isSetterDef());
167:       assertFalse(node0.isSwitch());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isHook());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isBreak());
172:       assertTrue(node0.isNumber());
173:       assertFalse(node0.isComma());
174:       assertFalse(node0.isThis());
175:       assertFalse(node0.isFor());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isNot());
178:       assertFalse(node0.isGetterDef());
179:       assertFalse(node0.isString());
180:       assertFalse(node0.isObjectLit());
181:       assertFalse(node0.isScript());
182:       assertFalse(node0.isGetProp());
183:       assertFalse(node0.isVoid());
184:       assertFalse(node0.isTrue());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isLabelName());
187:       assertFalse(node0.isDelProp());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isLabel());
192:       assertFalse(node0.isOr());
193:       assertFalse(node0.isAssignAdd());
194:       assertFalse(node0.isNull());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isEmpty());
197:       assertFalse(node0.isDo());
198:       assertFalse(node0.isDefaultCase());
199:       assertEquals(48, Node.DIRECTIVES);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(39, Node.EMPTY_BLOCK);
207:       assertEquals(53, Node.INPUT_ID);
208:       assertEquals(55, Node.INFERRED_FUNCTION);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(37, Node.OPT_ARG_NAME);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(4095, Node.COLUMN_MASK);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(46, Node.IS_NAMESPACE);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       assertEquals(47, Node.IS_DISPATCHER);
232:       assertEquals(2, Node.POST_FLAG);
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(40, Node.ORIGINALNAME_PROP);
235:       
236:       boolean boolean0 = node0.isEquivalentTo(node0);
237:       assertTrue(boolean0);
238:       assertFalse(node0.isBlock());
239:       assertFalse(node0.isNew());
240:       assertFalse(node0.isAdd());
241:       assertFalse(node0.isVar());
242:       assertEquals(39, node0.getType());
243:       assertFalse(node0.isName());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isContinue());
246:       assertFalse(node0.hasMoreThanOneChild());
247:       assertFalse(node0.isCall());
248:       assertFalse(node0.isParamList());
249:       assertFalse(node0.isTypeOf());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isDec());
252:       assertFalse(node0.hasChildren());
253:       assertFalse(node0.isReturn());
254:       assertFalse(node0.isWhile());
255:       assertFalse(node0.hasOneChild());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.isFunction());
258:       assertFalse(node0.isRegExp());
259:       assertFalse(node0.isDebugger());
260:       assertFalse(node0.isAnd());
261:       assertFalse(node0.isIf());
262:       assertFalse(node0.isWith());
263:       assertFalse(node0.isCatch());
264:       assertFalse(node0.isInstanceOf());
265:       assertFalse(node0.isCast());
266:       assertEquals((-1), node0.getLineno());
267:       assertFalse(node0.isIn());
268:       assertFalse(node0.isNE());
269:       assertFalse(node0.isThrow());
270:       assertFalse(node0.isInc());
271:       assertFalse(node0.isSetterDef());
272:       assertFalse(node0.isSwitch());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isHook());
275:       assertFalse(node0.isFalse());
276:       assertFalse(node0.isBreak());
277:       assertTrue(node0.isNumber());
278:       assertFalse(node0.isComma());
279:       assertFalse(node0.isThis());
280:       assertFalse(node0.isFor());
281:       assertFalse(node0.isCase());
282:       assertFalse(node0.isNot());
283:       assertFalse(node0.isGetterDef());
284:       assertFalse(node0.isString());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isScript());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isVoid());
289:       assertFalse(node0.isTrue());
290:       assertFalse(node0.isAssign());
291:       assertFalse(node0.isLabelName());
292:       assertFalse(node0.isDelProp());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isExprResult());
295:       assertFalse(node0.isGetElem());
296:       assertFalse(node0.isLabel());
297:       assertFalse(node0.isOr());
298:       assertFalse(node0.isAssignAdd());
299:       assertFalse(node0.isNull());
300:       assertEquals(0, node0.getChildCount());
301:       assertFalse(node0.isEmpty());
302:       assertFalse(node0.isDo());
303:       assertFalse(node0.isDefaultCase());
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
307:       assertEquals(36, Node.QUOTED_PROP);
308:       assertEquals(50, Node.FREE_CALL);
309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
310:       assertEquals(8, Node.FLAG_NO_THROWS);
311:       assertEquals(39, Node.EMPTY_BLOCK);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(55, Node.INFERRED_FUNCTION);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(37, Node.OPT_ARG_NAME);
321:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
322:       assertEquals(4095, Node.COLUMN_MASK);
323:       assertEquals(32, Node.INCRDECR_PROP);
324:       assertEquals(46, Node.IS_NAMESPACE);
325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(54, Node.SLASH_V);
335:       assertEquals(43, Node.IS_CONSTANT_NAME);
336:       assertEquals(47, Node.IS_DISPATCHER);
337:       assertEquals(2, Node.POST_FLAG);
338:       assertEquals(30, Node.VAR_ARGS_NAME);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       
341:       boolean boolean1 = node0.isNull();
342:       assertFalse(boolean1 == boolean0);
343:       assertFalse(boolean1);
344:       assertFalse(node0.isBlock());
345:       assertFalse(node0.isNew());
346:       assertFalse(node0.isAdd());
347:       assertFalse(node0.isVar());
348:       assertEquals(39, node0.getType());
349:       assertFalse(node0.isName());
350:       assertFalse(node0.isStringKey());
351:       assertFalse(node0.isContinue());
352:       assertFalse(node0.hasMoreThanOneChild());
353:       assertFalse(node0.isCall());
354:       assertFalse(node0.isParamList());
355:       assertFalse(node0.isTypeOf());
356:       assertEquals((-1), node0.getSourcePosition());
357:       assertFalse(node0.isDec());
358:       assertFalse(node0.hasChildren());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.isWhile());
361:       assertFalse(node0.hasOneChild());
362:       assertFalse(node0.isTry());
363:       assertFalse(node0.isFunction());
364:       assertFalse(node0.isRegExp());
365:       assertFalse(node0.isDebugger());
366:       assertFalse(node0.isAnd());
367:       assertFalse(node0.isIf());
368:       assertFalse(node0.isWith());
369:       assertFalse(node0.isCatch());
370:       assertFalse(node0.isInstanceOf());
371:       assertFalse(node0.isCast());
372:       assertEquals((-1), node0.getLineno());
373:       assertFalse(node0.isIn());
374:       assertFalse(node0.isNE());
375:       assertFalse(node0.isThrow());
376:       assertFalse(node0.isInc());
377:       assertFalse(node0.isSetterDef());
378:       assertFalse(node0.isSwitch());
379:       assertEquals((-1), node0.getCharno());
380:       assertFalse(node0.isHook());
381:       assertFalse(node0.isFalse());
382:       assertFalse(node0.isBreak());
383:       assertTrue(node0.isNumber());
384:       assertFalse(node0.isComma());
385:       assertFalse(node0.isThis());
386:       assertFalse(node0.isFor());
387:       assertFalse(node0.isCase());
388:       assertFalse(node0.isNot());
389:       assertFalse(node0.isGetterDef());
390:       assertFalse(node0.isString());
391:       assertFalse(node0.isObjectLit());
392:       assertFalse(node0.isScript());
393:       assertFalse(node0.isGetProp());
394:       assertFalse(node0.isVoid());
395:       assertFalse(node0.isTrue());
396:       assertFalse(node0.isAssign());
397:       assertFalse(node0.isLabelName());
398:       assertFalse(node0.isDelProp());
399:       assertFalse(node0.isArrayLit());
400:       assertFalse(node0.isExprResult());
401:       assertFalse(node0.isGetElem());
402:       assertFalse(node0.isLabel());
403:       assertFalse(node0.isOr());
404:       assertFalse(node0.isAssignAdd());
405:       assertFalse(node0.isNull());
406:       assertEquals(0, node0.getChildCount());
407:       assertFalse(node0.isEmpty());
408:       assertFalse(node0.isDo());
409:       assertFalse(node0.isDefaultCase());
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
412:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
413:       assertEquals(36, Node.QUOTED_PROP);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
416:       assertEquals(8, Node.FLAG_NO_THROWS);
417:       assertEquals(39, Node.EMPTY_BLOCK);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(57, Node.REFLECTED_OBJECT);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
424:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
428:       assertEquals(4095, Node.COLUMN_MASK);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(46, Node.IS_NAMESPACE);
431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
432:       assertEquals(12, Node.COLUMN_BITS);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(57, Node.LAST_PROP);
436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(29, Node.JSDOC_INFO_PROP);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(54, Node.SLASH_V);
441:       assertEquals(43, Node.IS_CONSTANT_NAME);
442:       assertEquals(47, Node.IS_DISPATCHER);
443:       assertEquals(2, Node.POST_FLAG);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertEquals(40, Node.ORIGINALNAME_PROP);
446:       
447:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(505);
448:       assertNotNull(node_SideEffectFlags0);
449:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
450:       assertEquals(505, node_SideEffectFlags0.valueOf());
451:       
452:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
453:       assertNotNull(node_SideEffectFlags1);
454:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
455:       assertEquals(504, node_SideEffectFlags0.valueOf());
456:       assertEquals(504, node_SideEffectFlags1.valueOf());
457:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
458:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
459:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
460:       
461:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
462:       assertNotNull(node_SideEffectFlags2);
463:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
464:       assertEquals(504, node_SideEffectFlags0.valueOf());
465:       assertEquals(504, node_SideEffectFlags1.valueOf());
466:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
467:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
468:       assertEquals(504, node_SideEffectFlags2.valueOf());
469:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
470:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
471:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
472:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
473:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
474:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
475:       
476:       int int0 = node0.getCharno();
477:       assertEquals((-1), int0);
478:       assertFalse(node0.isBlock());
479:       assertFalse(node0.isNew());
480:       assertFalse(node0.isAdd());
481:       assertFalse(node0.isVar());
482:       assertEquals(39, node0.getType());
483:       assertFalse(node0.isName());
484:       assertFalse(node0.isStringKey());
485:       assertFalse(node0.isContinue());
486:       assertFalse(node0.hasMoreThanOneChild());
487:       assertFalse(node0.isCall());
488:       assertFalse(node0.isParamList());
489:       assertFalse(node0.isTypeOf());
490:       assertEquals((-1), node0.getSourcePosition());
491:       assertFalse(node0.isDec());
492:       assertFalse(node0.hasChildren());
493:       assertFalse(node0.isReturn());
494:       assertFalse(node0.isWhile());
495:       assertFalse(node0.hasOneChild());
496:       assertFalse(node0.isTry());
497:       assertFalse(node0.isFunction());
498:       assertFalse(node0.isRegExp());
499:       assertFalse(node0.isDebugger());
500:       assertFalse(node0.isAnd());
501:       assertFalse(node0.isIf());
502:       assertFalse(node0.isWith());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.isInstanceOf());
505:       assertFalse(node0.isCast());
506:       assertEquals((-1), node0.getLineno());
507:       assertFalse(node0.isIn());
508:       assertFalse(node0.isNE());
509:       assertFalse(node0.isThrow());
510:       assertFalse(node0.isInc());
511:       assertFalse(node0.isSetterDef());
512:       assertFalse(node0.isSwitch());
513:       assertEquals((-1), node0.getCharno());
514:       assertFalse(node0.isHook());
515:       assertFalse(node0.isFalse());
516:       assertFalse(node0.isBreak());
517:       assertTrue(node0.isNumber());
518:       assertFalse(node0.isComma());
519:       assertFalse(node0.isThis());
520:       assertFalse(node0.isFor());
521:       assertFalse(node0.isCase());
522:       assertFalse(node0.isNot());
523:       assertFalse(node0.isGetterDef());
524:       assertFalse(node0.isString());
525:       assertFalse(node0.isObjectLit());
526:       assertFalse(node0.isScript());
527:       assertFalse(node0.isGetProp());
528:       assertFalse(node0.isVoid());
529:       assertFalse(node0.isTrue());
530:       assertFalse(node0.isAssign());
531:       assertFalse(node0.isLabelName());
532:       assertFalse(node0.isDelProp());
533:       assertFalse(node0.isArrayLit());
534:       assertFalse(node0.isExprResult());
535:       assertFalse(node0.isGetElem());
536:       assertFalse(node0.isLabel());
537:       assertFalse(node0.isOr());
538:       assertFalse(node0.isAssignAdd());
539:       assertFalse(node0.isNull());
540:       assertEquals(0, node0.getChildCount());
541:       assertFalse(node0.isEmpty());
542:       assertFalse(node0.isDo());
543:       assertFalse(node0.isDefaultCase());
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
546:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(50, Node.FREE_CALL);
549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
550:       assertEquals(8, Node.FLAG_NO_THROWS);
551:       assertEquals(39, Node.EMPTY_BLOCK);
552:       assertEquals(53, Node.INPUT_ID);
553:       assertEquals(55, Node.INFERRED_FUNCTION);
554:       assertEquals(52, Node.LENGTH);
555:       assertEquals(57, Node.REFLECTED_OBJECT);
556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
557:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
559:       assertEquals(49, Node.DIRECT_EVAL);
560:       assertEquals(37, Node.OPT_ARG_NAME);
561:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
562:       assertEquals(4095, Node.COLUMN_MASK);
563:       assertEquals(32, Node.INCRDECR_PROP);
564:       assertEquals(46, Node.IS_NAMESPACE);
565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(56, Node.CHANGE_TIME);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(57, Node.LAST_PROP);
570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
571:       assertEquals(1, Node.DECR_FLAG);
572:       assertEquals(29, Node.JSDOC_INFO_PROP);
573:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
574:       assertEquals(54, Node.SLASH_V);
575:       assertEquals(43, Node.IS_CONSTANT_NAME);
576:       assertEquals(47, Node.IS_DISPATCHER);
577:       assertEquals(2, Node.POST_FLAG);
578:       assertEquals(30, Node.VAR_ARGS_NAME);
579:       assertEquals(40, Node.ORIGINALNAME_PROP);
580:       
581:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
582:       assertNotNull(jSTypeRegistry0);
583:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
584:       
585:       JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
586:       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
587:       assertNotNull(jSType0);
588:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
589:       assertFalse(jSType0.isFunctionPrototypeType());
590:       assertFalse(jSType0.isTemplatizedType());
591:       assertFalse(jSType0.isNominalConstructor());
592:       assertFalse(jSType0.isConstructor());
593:       assertFalse(jSType0.isEnumElementType());
594:       assertFalse(jSType0.isOrdinaryFunction());
595:       assertFalse(jSType0.isVoidType());
596:       assertFalse(jSType0.isFunctionType());
597:       assertFalse(jSType0.isNumberValueType());
598:       assertFalse(jSType0.isNoResolvedType());
599:       assertFalse(jSType0.isEnumType());
600:       assertFalse(jSType0.isUnionType());
601:       assertFalse(jSType0.isRecordType());
602:       assertFalse(jSType0.isTemplateType());
603:       assertFalse(jSType0.isNoType());
604:       assertFalse(jSType0.isAllType());
605:       assertFalse(jSType0.isBooleanValueType());
606:       assertFalse(jSType0.isNoObjectType());
607:       assertFalse(jSType0.isStringValueType());
608:       assertTrue(jSType0.isNominalType());
609:       assertFalse(jSType0.isCheckedUnknownType());
610:       assertFalse(jSType0.isInterface());
611:       assertFalse(jSType0.isResolved());
612:       assertFalse(jSType0.isNullType());
613:       assertEquals(0, JSType.NOT_ENUMDECL);
614:       assertEquals(1, JSType.ENUMDECL);
615:       
616:       JSDocInfo jSDocInfo0 = new JSDocInfo();
617:       assertNotNull(jSDocInfo0);
618:       assertEquals("JSDocInfo", jSDocInfo0.toString());
619:       assertFalse(jSDocInfo0.isOverride());
620:       assertNull(jSDocInfo0.getVersion());
621:       assertFalse(jSDocInfo0.makesStructs());
622:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
623:       assertFalse(jSDocInfo0.isNgInject());
624:       assertFalse(jSDocInfo0.isWizaction());
625:       assertNull(jSDocInfo0.getVisibility());
626:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
627:       assertFalse(jSDocInfo0.isConstant());
628:       assertNull(jSDocInfo0.getMeaning());
629:       assertFalse(jSDocInfo0.isJaggerInject());
630:       assertFalse(jSDocInfo0.isConstructor());
631:       assertFalse(jSDocInfo0.isJavaDispatch());
632:       assertNull(jSDocInfo0.getDescription());
633:       assertFalse(jSDocInfo0.hasThisType());
634:       assertFalse(jSDocInfo0.isJaggerModule());
635:       assertFalse(jSDocInfo0.hasEnumParameterType());
636:       assertFalse(jSDocInfo0.isNoCompile());
637:       assertFalse(jSDocInfo0.isExport());
638:       assertNull(jSDocInfo0.getFileOverview());
639:       assertFalse(jSDocInfo0.isIdGenerator());
640:       assertFalse(jSDocInfo0.hasFileOverview());
641:       assertNull(jSDocInfo0.getBlockDescription());
642:       assertFalse(jSDocInfo0.isInterface());
643:       assertNull(jSDocInfo0.getDeprecationReason());
644:       assertNull(jSDocInfo0.getReturnDescription());
645:       assertFalse(jSDocInfo0.isDefine());
646:       assertFalse(jSDocInfo0.shouldPreserveTry());
647:       assertFalse(jSDocInfo0.isImplicitCast());
648:       assertNull(jSDocInfo0.getLicense());
649:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
650:       assertFalse(jSDocInfo0.hasBaseType());
651:       assertFalse(jSDocInfo0.isDisposes());
652:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
653:       assertEquals(0, jSDocInfo0.getParameterCount());
654:       assertFalse(jSDocInfo0.isJaggerProvide());
655:       assertFalse(jSDocInfo0.isStableIdGenerator());
656:       assertFalse(jSDocInfo0.isNoAlias());
657:       assertFalse(jSDocInfo0.hasReturnType());
658:       assertFalse(jSDocInfo0.isNoTypeCheck());
659:       assertFalse(jSDocInfo0.hasModifies());
660:       assertFalse(jSDocInfo0.isDeprecated());
661:       assertFalse(jSDocInfo0.isNoSideEffects());
662:       assertFalse(jSDocInfo0.isMappedIdGenerator());
663:       assertFalse(jSDocInfo0.containsDeclaration());
664:       assertFalse(jSDocInfo0.hasTypedefType());
665:       assertFalse(jSDocInfo0.hasType());
666:       assertNull(jSDocInfo0.getOriginalCommentString());
667:       assertFalse(jSDocInfo0.makesDicts());
668:       assertFalse(jSDocInfo0.isExterns());
669:       assertNull(jSDocInfo0.getLendsName());
670:       assertFalse(jSDocInfo0.isNoShadow());
671:       assertFalse(jSDocInfo0.isHidden());
672:       assertFalse(jSDocInfo0.isExpose());
673:       
674:       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
675:       assertNotNull(objectType0);
676:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
677:       assertEquals("JSDocInfo", jSDocInfo0.toString());
678:       assertFalse(jSDocInfo0.isOverride());
679:       assertNull(jSDocInfo0.getVersion());
680:       assertFalse(jSDocInfo0.makesStructs());
681:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
682:       assertFalse(jSDocInfo0.isNgInject());
683:       assertFalse(jSDocInfo0.isWizaction());
684:       assertNull(jSDocInfo0.getVisibility());
685:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
686:       assertFalse(jSDocInfo0.isConstant());
687:       assertNull(jSDocInfo0.getMeaning());
688:       assertFalse(jSDocInfo0.isJaggerInject());
689:       assertFalse(jSDocInfo0.isConstructor());
690:       assertFalse(jSDocInfo0.isJavaDispatch());
691:       assertNull(jSDocInfo0.getDescription());
692:       assertFalse(jSDocInfo0.hasThisType());
693:       assertFalse(jSDocInfo0.isJaggerModule());
694:       assertFalse(jSDocInfo0.hasEnumParameterType());
695:       assertFalse(jSDocInfo0.isNoCompile());
696:       assertFalse(jSDocInfo0.isExport());
697:       assertNull(jSDocInfo0.getFileOverview());
698:       assertFalse(jSDocInfo0.isIdGenerator());
699:       assertFalse(jSDocInfo0.hasFileOverview());
700:       assertNull(jSDocInfo0.getBlockDescription());
701:       assertFalse(jSDocInfo0.isInterface());
702:       assertNull(jSDocInfo0.getDeprecationReason());
703:       assertNull(jSDocInfo0.getReturnDescription());
704:       assertFalse(jSDocInfo0.isDefine());
705:       assertFalse(jSDocInfo0.shouldPreserveTry());
706:       assertFalse(jSDocInfo0.isImplicitCast());
707:       assertNull(jSDocInfo0.getLicense());
708:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
709:       assertFalse(jSDocInfo0.hasBaseType());
710:       assertFalse(jSDocInfo0.isDisposes());
711:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
712:       assertEquals(0, jSDocInfo0.getParameterCount());
713:       assertFalse(jSDocInfo0.isJaggerProvide());
714:       assertFalse(jSDocInfo0.isStableIdGenerator());
715:       assertFalse(jSDocInfo0.isNoAlias());
716:       assertFalse(jSDocInfo0.hasReturnType());
717:       assertFalse(jSDocInfo0.isNoTypeCheck());
718:       assertFalse(jSDocInfo0.hasModifies());
719:       assertFalse(jSDocInfo0.isDeprecated());
720:       assertFalse(jSDocInfo0.isNoSideEffects());
721:       assertFalse(jSDocInfo0.isMappedIdGenerator());
722:       assertFalse(jSDocInfo0.containsDeclaration());
723:       assertFalse(jSDocInfo0.hasTypedefType());
724:       assertFalse(jSDocInfo0.hasType());
725:       assertNull(jSDocInfo0.getOriginalCommentString());
726:       assertFalse(jSDocInfo0.makesDicts());
727:       assertFalse(jSDocInfo0.isExterns());
728:       assertNull(jSDocInfo0.getLendsName());
729:       assertFalse(jSDocInfo0.isNoShadow());
730:       assertFalse(jSDocInfo0.isHidden());
731:       assertFalse(jSDocInfo0.isExpose());
732:       assertFalse(objectType0.isRecordType());
733:       assertFalse(objectType0.isConstructor());
734:       assertFalse(objectType0.hasCachedValues());
735:       assertFalse(objectType0.isOrdinaryFunction());
736:       assertFalse(objectType0.isNativeObjectType());
737:       assertFalse(objectType0.isInterface());
738:       assertFalse(objectType0.isResolved());
739:       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
740:       assertFalse(objectType0.isNoType());
741:       assertFalse(objectType0.isNoObjectType());
742:       assertFalse(objectType0.isAllType());
743:       assertFalse(objectType0.isFunctionType());
744:       assertFalse(objectType0.isTemplateType());
745:       assertFalse(objectType0.isVoidType());
746:       assertFalse(objectType0.hasReferenceName());
747:       assertFalse(objectType0.isTemplatizedType());
748:       assertFalse(objectType0.isEnumElementType());
749:       assertFalse(objectType0.isNominalType());
750:       assertFalse(objectType0.isNominalConstructor());
751:       assertFalse(objectType0.isStringValueType());
752:       assertFalse(objectType0.isCheckedUnknownType());
753:       assertFalse(objectType0.isNullType());
754:       assertTrue(objectType0.isObject());
755:       assertFalse(objectType0.isBooleanValueType());
756:       assertFalse(objectType0.isFunctionPrototypeType());
757:       assertFalse(objectType0.isNumberValueType());
758:       assertFalse(objectType0.isNoResolvedType());
759:       assertFalse(objectType0.isUnionType());
760:       assertFalse(objectType0.isEnumType());
761:       assertEquals(1, JSType.ENUMDECL);
762:       assertEquals(0, JSType.NOT_ENUMDECL);
763:       
764:       Node node1 = new Node(1, 1, 31);
765:       assertFalse(node1.equals((Object)node0));
766:       assertNotNull(node1);
767:       assertFalse(node1.isComma());
768:       assertFalse(node1.isBreak());
769:       assertFalse(node1.isInstanceOf());
770:       assertFalse(node1.isGetProp());
771:       assertFalse(node1.isAnd());
772:       assertFalse(node1.isObjectLit());
773:       assertFalse(node1.isNot());
774:       assertEquals(4127, node1.getSourcePosition());
775:       assertFalse(node1.isExprResult());
776:       assertFalse(node1.isString());
777:       assertFalse(node1.hasOneChild());
778:       assertFalse(node1.isCase());
779:       assertFalse(node1.isScript());
780:       assertFalse(node1.isWith());
781:       assertFalse(node1.hasChildren());
782:       assertFalse(node1.isAssign());
783:       assertFalse(node1.isDec());
784:       assertFalse(node1.isHook());
785:       assertFalse(node1.isThis());
786:       assertFalse(node1.isNE());
787:       assertFalse(node1.isIf());
788:       assertFalse(node1.isIn());
789:       assertFalse(node1.isFunction());
790:       assertFalse(node1.isInc());
791:       assertFalse(node1.isContinue());
792:       assertFalse(node1.isThrow());
793:       assertFalse(node1.isCast());
794:       assertFalse(node1.isFalse());
795:       assertFalse(node1.isParamList());
796:       assertFalse(node1.isSetterDef());
797:       assertFalse(node1.isStringKey());
798:       assertFalse(node1.isName());
799:       assertFalse(node1.isNull());
800:       assertFalse(node1.isDebugger());
801:       assertFalse(node1.isTrue());
802:       assertFalse(node1.isVoid());
803:       assertFalse(node1.isTry());
804:       assertFalse(node1.isRegExp());
805:       assertFalse(node1.isCall());
806:       assertFalse(node1.isCatch());
807:       assertFalse(node1.hasMoreThanOneChild());
808:       assertFalse(node1.isWhile());
809:       assertFalse(node1.isFor());
810:       assertFalse(node1.isBlock());
811:       assertFalse(node1.isReturn());
812:       assertFalse(node1.isAssignAdd());
813:       assertFalse(node1.isTypeOf());
814:       assertFalse(node1.isNumber());
815:       assertFalse(node1.isDelProp());
816:       assertFalse(node1.isEmpty());
817:       assertEquals(1, node1.getLineno());
818:       assertFalse(node1.isGetElem());
819:       assertFalse(node1.isLabelName());
820:       assertFalse(node1.isGetterDef());
821:       assertFalse(node1.isOr());
822:       assertEquals(31, node1.getCharno());
823:       assertFalse(node1.isNew());
824:       assertEquals(1, node1.getType());
825:       assertFalse(node1.isDefaultCase());
826:       assertFalse(node1.isSwitch());
827:       assertFalse(node1.isDo());
828:       assertFalse(node1.isArrayLit());
829:       assertFalse(node1.isAdd());
830:       assertEquals(0, node1.getChildCount());
831:       assertFalse(node1.isVar());
832:       assertFalse(node1.isLabel());
833:       assertEquals(53, Node.INPUT_ID);
834:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
836:       assertEquals(29, Node.JSDOC_INFO_PROP);
837:       assertEquals(47, Node.IS_DISPATCHER);
838:       assertEquals(37, Node.OPT_ARG_NAME);
839:       assertEquals(48, Node.DIRECTIVES);
840:       assertEquals(4095, Node.COLUMN_MASK);
841:       assertEquals(8, Node.FLAG_NO_THROWS);
842:       assertEquals(39, Node.EMPTY_BLOCK);
843:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
844:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
845:       assertEquals(55, Node.INFERRED_FUNCTION);
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(57, Node.REFLECTED_OBJECT);
850:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(30, Node.VAR_ARGS_NAME);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(57, Node.LAST_PROP);
860:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(2, Node.POST_FLAG);
863:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
864:       assertEquals(50, Node.FREE_CALL);
865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
866:       assertEquals(46, Node.IS_NAMESPACE);
867:       assertEquals(54, Node.SLASH_V);
868:       assertEquals(43, Node.IS_CONSTANT_NAME);
869:       
870:       boolean boolean2 = node0.isEquivalentTo(node1, true, false, true);
871:       assertFalse(node0.equals((Object)node1));
872:       assertFalse(node1.equals((Object)node0));
873:       assertTrue(boolean2 == boolean1);
874:       assertFalse(boolean2 == boolean0);
875:       assertFalse(boolean2);
876:       assertFalse(node0.isBlock());
877:       assertFalse(node0.isNew());
878:       assertFalse(node0.isAdd());
879:       assertFalse(node0.isVar());
880:       assertEquals(39, node0.getType());
881:       assertFalse(node0.isName());
882:       assertFalse(node0.isStringKey());
883:       assertFalse(node0.isContinue());
884:       assertFalse(node0.hasMoreThanOneChild());
885:       assertFalse(node0.isCall());
886:       assertFalse(node0.isParamList());
887:       assertFalse(node0.isTypeOf());
888:       assertEquals((-1), node0.getSourcePosition());
889:       assertFalse(node0.isDec());
890:       assertFalse(node0.hasChildren());
891:       assertFalse(node0.isReturn());
892:       assertFalse(node0.isWhile());
893:       assertFalse(node0.hasOneChild());
894:       assertFalse(node0.isTry());
895:       assertFalse(node0.isFunction());
896:       assertFalse(node0.isRegExp());
897:       assertFalse(node0.isDebugger());
898:       assertFalse(node0.isAnd());
899:       assertFalse(node0.isIf());
900:       assertFalse(node0.isWith());
901:       assertFalse(node0.isCatch());
902:       assertFalse(node0.isInstanceOf());
903:       assertFalse(node0.isCast());
904:       assertEquals((-1), node0.getLineno());
905:       assertFalse(node0.isIn());
906:       assertFalse(node0.isNE());
907:       assertFalse(node0.isThrow());
908:       assertFalse(node0.isInc());
909:       assertFalse(node0.isSetterDef());
910:       assertFalse(node0.isSwitch());
911:       assertEquals((-1), node0.getCharno());
912:       assertFalse(node0.isHook());
913:       assertFalse(node0.isFalse());
914:       assertFalse(node0.isBreak());
915:       assertTrue(node0.isNumber());
916:       assertFalse(node0.isComma());
917:       assertFalse(node0.isThis());
918:       assertFalse(node0.isFor());
919:       assertFalse(node0.isCase());
920:       assertFalse(node0.isNot());
921:       assertFalse(node0.isGetterDef());
922:       assertFalse(node0.isString());
923:       assertFalse(node0.isObjectLit());
924:       assertFalse(node0.isScript());
925:       assertFalse(node0.isGetProp());
926:       assertFalse(node0.isVoid());
927:       assertFalse(node0.isTrue());
928:       assertFalse(node0.isAssign());
929:       assertFalse(node0.isLabelName());
930:       assertFalse(node0.isDelProp());
931:       assertFalse(node0.isArrayLit());
932:       assertFalse(node0.isExprResult());
933:       assertFalse(node0.isGetElem());
934:       assertFalse(node0.isLabel());
935:       assertFalse(node0.isOr());
936:       assertFalse(node0.isAssignAdd());
937:       assertFalse(node0.isNull());
938:       assertEquals(0, node0.getChildCount());
939:       assertFalse(node0.isEmpty());
940:       assertFalse(node0.isDo());
941:       assertFalse(node0.isDefaultCase());
942:       assertFalse(node1.isComma());
943:       assertFalse(node1.isBreak());
944:       assertFalse(node1.isInstanceOf());
945:       assertFalse(node1.isGetProp());
946:       assertFalse(node1.isAnd());
947:       assertFalse(node1.isObjectLit());
948:       assertFalse(node1.isNot());
949:       assertEquals(4127, node1.getSourcePosition());
950:       assertFalse(node1.isExprResult());
951:       assertFalse(node1.isString());
952:       assertFalse(node1.hasOneChild());
953:       assertFalse(node1.isCase());
954:       assertFalse(node1.isScript());
955:       assertFalse(node1.isWith());
956:       assertFalse(node1.hasChildren());
957:       assertFalse(node1.isAssign());
958:       assertFalse(node1.isDec());
959:       assertFalse(node1.isHook());
960:       assertFalse(node1.isThis());
961:       assertFalse(node1.isNE());
962:       assertFalse(node1.isIf());
963:       assertFalse(node1.isIn());
964:       assertFalse(node1.isFunction());
965:       assertFalse(node1.isInc());
966:       assertFalse(node1.isContinue());
967:       assertFalse(node1.isThrow());
968:       assertFalse(node1.isCast());
969:       assertFalse(node1.isFalse());
970:       assertFalse(node1.isParamList());
971:       assertFalse(node1.isSetterDef());
972:       assertFalse(node1.isStringKey());
973:       assertFalse(node1.isName());
974:       assertFalse(node1.isNull());
975:       assertFalse(node1.isDebugger());
976:       assertFalse(node1.isTrue());
977:       assertFalse(node1.isVoid());
978:       assertFalse(node1.isTry());
979:       assertFalse(node1.isRegExp());
980:       assertFalse(node1.isCall());
981:       assertFalse(node1.isCatch());
982:       assertFalse(node1.hasMoreThanOneChild());
983:       assertFalse(node1.isWhile());
984:       assertFalse(node1.isFor());
985:       assertFalse(node1.isBlock());
986:       assertFalse(node1.isReturn());
987:       assertFalse(node1.isAssignAdd());
988:       assertFalse(node1.isTypeOf());
989:       assertFalse(node1.isNumber());
990:       assertFalse(node1.isDelProp());
991:       assertFalse(node1.isEmpty());
992:       assertEquals(1, node1.getLineno());
993:       assertFalse(node1.isGetElem());
994:       assertFalse(node1.isLabelName());
995:       assertFalse(node1.isGetterDef());
996:       assertFalse(node1.isOr());
997:       assertEquals(31, node1.getCharno());
998:       assertFalse(node1.isNew());
999:       assertEquals(1, node1.getType());
1000:       assertFalse(node1.isDefaultCase());
1001:       assertFalse(node1.isSwitch());
1002:       assertFalse(node1.isDo());
1003:       assertFalse(node1.isArrayLit());
1004:       assertFalse(node1.isAdd());
1005:       assertEquals(0, node1.getChildCount());
1006:       assertFalse(node1.isVar());
1007:       assertFalse(node1.isLabel());
1008:       assertEquals(48, Node.DIRECTIVES);
1009:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1010:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1011:       assertEquals(36, Node.QUOTED_PROP);
1012:       assertEquals(50, Node.FREE_CALL);
1013:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1014:       assertEquals(8, Node.FLAG_NO_THROWS);
1015:       assertEquals(39, Node.EMPTY_BLOCK);
1016:       assertEquals(53, Node.INPUT_ID);
1017:       assertEquals(55, Node.INFERRED_FUNCTION);
1018:       assertEquals(52, Node.LENGTH);
1019:       assertEquals(57, Node.REFLECTED_OBJECT);
1020:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1021:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1022:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1023:       assertEquals(49, Node.DIRECT_EVAL);
1024:       assertEquals(37, Node.OPT_ARG_NAME);
1025:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1026:       assertEquals(4095, Node.COLUMN_MASK);
1027:       assertEquals(32, Node.INCRDECR_PROP);
1028:       assertEquals(46, Node.IS_NAMESPACE);
1029:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1030:       assertEquals(12, Node.COLUMN_BITS);
1031:       assertEquals(56, Node.CHANGE_TIME);
1032:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1033:       assertEquals(57, Node.LAST_PROP);
1034:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1035:       assertEquals(1, Node.DECR_FLAG);
1036:       assertEquals(29, Node.JSDOC_INFO_PROP);
1037:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1038:       assertEquals(54, Node.SLASH_V);
1039:       assertEquals(43, Node.IS_CONSTANT_NAME);
1040:       assertEquals(47, Node.IS_DISPATCHER);
1041:       assertEquals(2, Node.POST_FLAG);
1042:       assertEquals(30, Node.VAR_ARGS_NAME);
1043:       assertEquals(40, Node.ORIGINALNAME_PROP);
1044:       assertEquals(53, Node.INPUT_ID);
1045:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1047:       assertEquals(29, Node.JSDOC_INFO_PROP);
1048:       assertEquals(47, Node.IS_DISPATCHER);
1049:       assertEquals(37, Node.OPT_ARG_NAME);
1050:       assertEquals(48, Node.DIRECTIVES);
1051:       assertEquals(4095, Node.COLUMN_MASK);
1052:       assertEquals(8, Node.FLAG_NO_THROWS);
1053:       assertEquals(39, Node.EMPTY_BLOCK);
1054:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1055:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1056:       assertEquals(55, Node.INFERRED_FUNCTION);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(49, Node.DIRECT_EVAL);
1059:       assertEquals(36, Node.QUOTED_PROP);
1060:       assertEquals(57, Node.REFLECTED_OBJECT);
1061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1062:       assertEquals(56, Node.CHANGE_TIME);
1063:       assertEquals(52, Node.LENGTH);
1064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(40, Node.ORIGINALNAME_PROP);
1067:       assertEquals(30, Node.VAR_ARGS_NAME);
1068:       assertEquals(1, Node.DECR_FLAG);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(57, Node.LAST_PROP);
1071:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1072:       assertEquals(32, Node.INCRDECR_PROP);
1073:       assertEquals(2, Node.POST_FLAG);
1074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1075:       assertEquals(50, Node.FREE_CALL);
1076:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1077:       assertEquals(46, Node.IS_NAMESPACE);
1078:       assertEquals(54, Node.SLASH_V);
1079:       assertEquals(43, Node.IS_CONSTANT_NAME);
1080:       
1081:       int int1 = Node.COLUMN_MASK;
1082:       assertFalse(int1 == int0);
1083:       assertEquals(4095, int1);
1084:       
1085:       boolean boolean3 = node1.isAssignAdd();
1086:       assertTrue(boolean3 == boolean2);
1087:       assertTrue(boolean3 == boolean1);
1088:       assertFalse(boolean3 == boolean0);
1089:       assertFalse(node1.equals((Object)node0));
1090:       assertFalse(boolean3);
1091:       assertFalse(node1.isComma());
1092:       assertFalse(node1.isBreak());
1093:       assertFalse(node1.isInstanceOf());
1094:       assertFalse(node1.isGetProp());
1095:       assertFalse(node1.isAnd());
1096:       assertFalse(node1.isObjectLit());
1097:       assertFalse(node1.isNot());
1098:       assertEquals(4127, node1.getSourcePosition());
1099:       assertFalse(node1.isExprResult());
1100:       assertFalse(node1.isString());
1101:       assertFalse(node1.hasOneChild());
1102:       assertFalse(node1.isCase());
1103:       assertFalse(node1.isScript());
1104:       assertFalse(node1.isWith());
1105:       assertFalse(node1.hasChildren());
1106:       assertFalse(node1.isAssign());
1107:       assertFalse(node1.isDec());
1108:       assertFalse(node1.isHook());
1109:       assertFalse(node1.isThis());
1110:       assertFalse(node1.isNE());
1111:       assertFalse(node1.isIf());
1112:       assertFalse(node1.isIn());
1113:       assertFalse(node1.isFunction());
1114:       assertFalse(node1.isInc());
1115:       assertFalse(node1.isContinue());
1116:       assertFalse(node1.isThrow());
1117:       assertFalse(node1.isCast());
1118:       assertFalse(node1.isFalse());
1119:       assertFalse(node1.isParamList());
1120:       assertFalse(node1.isSetterDef());
1121:       assertFalse(node1.isStringKey());
1122:       assertFalse(node1.isName());
1123:       assertFalse(node1.isNull());
1124:       assertFalse(node1.isDebugger());
1125:       assertFalse(node1.isTrue());
1126:       assertFalse(node1.isVoid());
1127:       assertFalse(node1.isTry());
1128:       assertFalse(node1.isRegExp());
1129:       assertFalse(node1.isCall());
1130:       assertFalse(node1.isCatch());
1131:       assertFalse(node1.hasMoreThanOneChild());
1132:       assertFalse(node1.isWhile());
1133:       assertFalse(node1.isFor());
1134:       assertFalse(node1.isBlock());
1135:       assertFalse(node1.isReturn());
1136:       assertFalse(node1.isAssignAdd());
1137:       assertFalse(node1.isTypeOf());
1138:       assertFalse(node1.isNumber());
1139:       assertFalse(node1.isDelProp());
1140:       assertFalse(node1.isEmpty());
1141:       assertEquals(1, node1.getLineno());
1142:       assertFalse(node1.isGetElem());
1143:       assertFalse(node1.isLabelName());
1144:       assertFalse(node1.isGetterDef());
1145:       assertFalse(node1.isOr());
1146:       assertEquals(31, node1.getCharno());
1147:       assertFalse(node1.isNew());
1148:       assertEquals(1, node1.getType());
1149:       assertFalse(node1.isDefaultCase());
1150:       assertFalse(node1.isSwitch());
1151:       assertFalse(node1.isDo());
1152:       assertFalse(node1.isArrayLit());
1153:       assertFalse(node1.isAdd());
1154:       assertEquals(0, node1.getChildCount());
1155:       assertFalse(node1.isVar());
1156:       assertFalse(node1.isLabel());
1157:       assertEquals(53, Node.INPUT_ID);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(29, Node.JSDOC_INFO_PROP);
1161:       assertEquals(47, Node.IS_DISPATCHER);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(48, Node.DIRECTIVES);
1164:       assertEquals(4095, Node.COLUMN_MASK);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(39, Node.EMPTY_BLOCK);
1167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1168:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1169:       assertEquals(55, Node.INFERRED_FUNCTION);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(49, Node.DIRECT_EVAL);
1172:       assertEquals(36, Node.QUOTED_PROP);
1173:       assertEquals(57, Node.REFLECTED_OBJECT);
1174:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1175:       assertEquals(56, Node.CHANGE_TIME);
1176:       assertEquals(52, Node.LENGTH);
1177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1178:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1179:       assertEquals(40, Node.ORIGINALNAME_PROP);
1180:       assertEquals(30, Node.VAR_ARGS_NAME);
1181:       assertEquals(1, Node.DECR_FLAG);
1182:       assertEquals(12, Node.COLUMN_BITS);
1183:       assertEquals(57, Node.LAST_PROP);
1184:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1185:       assertEquals(32, Node.INCRDECR_PROP);
1186:       assertEquals(2, Node.POST_FLAG);
1187:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1188:       assertEquals(50, Node.FREE_CALL);
1189:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1190:       assertEquals(46, Node.IS_NAMESPACE);
1191:       assertEquals(54, Node.SLASH_V);
1192:       assertEquals(43, Node.IS_CONSTANT_NAME);
1193:       
1194:       Iterable<Node> iterable0 = node1.children();
1195:       assertFalse(iterable0.contains(node0));
1196:       assertFalse(node1.equals((Object)node0));
1197:       assertNotNull(iterable0);
1198:       assertFalse(node1.isComma());
1199:       assertFalse(node1.isBreak());
1200:       assertFalse(node1.isInstanceOf());
1201:       assertFalse(node1.isGetProp());
1202:       assertFalse(node1.isAnd());
1203:       assertFalse(node1.isObjectLit());
1204:       assertFalse(node1.isNot());
1205:       assertEquals(4127, node1.getSourcePosition());
1206:       assertFalse(node1.isExprResult());
1207:       assertFalse(node1.isString());
1208:       assertFalse(node1.hasOneChild());
1209:       assertFalse(node1.isCase());
1210:       assertFalse(node1.isScript());
1211:       assertFalse(node1.isWith());
1212:       assertFalse(node1.hasChildren());
1213:       assertFalse(node1.isAssign());
1214:       assertFalse(node1.isDec());
1215:       assertFalse(node1.isHook());
1216:       assertFalse(node1.isThis());
1217:       assertFalse(node1.isNE());
1218:       assertFalse(node1.isIf());
1219:       assertFalse(node1.isIn());
1220:       assertFalse(node1.isFunction());
1221:       assertFalse(node1.isInc());
1222:       assertFalse(node1.isContinue());
1223:       assertFalse(node1.isThrow());
1224:       assertFalse(node1.isCast());
1225:       assertFalse(node1.isFalse());
1226:       assertFalse(node1.isParamList());
1227:       assertFalse(node1.isSetterDef());
1228:       assertFalse(node1.isStringKey());
1229:       assertFalse(node1.isName());
1230:       assertFalse(node1.isNull());
1231:       assertFalse(node1.isDebugger());
1232:       assertFalse(node1.isTrue());
1233:       assertFalse(node1.isVoid());
1234:       assertFalse(node1.isTry());
1235:       assertFalse(node1.isRegExp());
1236:       assertFalse(node1.isCall());
1237:       assertFalse(node1.isCatch());
1238:       assertFalse(node1.hasMoreThanOneChild());
1239:       assertFalse(node1.isWhile());
1240:       assertFalse(node1.isFor());
1241:       assertFalse(node1.isBlock());
1242:       assertFalse(node1.isReturn());
1243:       assertFalse(node1.isAssignAdd());
1244:       assertFalse(node1.isTypeOf());
1245:       assertFalse(node1.isNumber());
1246:       assertFalse(node1.isDelProp());
1247:       assertFalse(node1.isEmpty());
1248:       assertEquals(1, node1.getLineno());
1249:       assertFalse(node1.isGetElem());
1250:       assertFalse(node1.isLabelName());
1251:       assertFalse(node1.isGetterDef());
1252:       assertFalse(node1.isOr());
1253:       assertEquals(31, node1.getCharno());
1254:       assertFalse(node1.isNew());
1255:       assertEquals(1, node1.getType());
1256:       assertFalse(node1.isDefaultCase());
1257:       assertFalse(node1.isSwitch());
1258:       assertFalse(node1.isDo());
1259:       assertFalse(node1.isArrayLit());
1260:       assertFalse(node1.isAdd());
1261:       assertEquals(0, node1.getChildCount());
1262:       assertFalse(node1.isVar());
1263:       assertFalse(node1.isLabel());
1264:       assertEquals(53, Node.INPUT_ID);
1265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1267:       assertEquals(29, Node.JSDOC_INFO_PROP);
1268:       assertEquals(47, Node.IS_DISPATCHER);
1269:       assertEquals(37, Node.OPT_ARG_NAME);
1270:       assertEquals(48, Node.DIRECTIVES);
1271:       assertEquals(4095, Node.COLUMN_MASK);
1272:       assertEquals(8, Node.FLAG_NO_THROWS);
1273:       assertEquals(39, Node.EMPTY_BLOCK);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1276:       assertEquals(55, Node.INFERRED_FUNCTION);
1277:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1278:       assertEquals(49, Node.DIRECT_EVAL);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(57, Node.REFLECTED_OBJECT);
1281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1282:       assertEquals(56, Node.CHANGE_TIME);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1286:       assertEquals(40, Node.ORIGINALNAME_PROP);
1287:       assertEquals(30, Node.VAR_ARGS_NAME);
1288:       assertEquals(1, Node.DECR_FLAG);
1289:       assertEquals(12, Node.COLUMN_BITS);
1290:       assertEquals(57, Node.LAST_PROP);
1291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1292:       assertEquals(32, Node.INCRDECR_PROP);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1295:       assertEquals(50, Node.FREE_CALL);
1296:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1297:       assertEquals(46, Node.IS_NAMESPACE);
1298:       assertEquals(54, Node.SLASH_V);
1299:       assertEquals(43, Node.IS_CONSTANT_NAME);
1300:       
1301:       boolean boolean4 = node0.isString();
1302:       assertFalse(node0.equals((Object)node1));
1303:       assertTrue(boolean4 == boolean2);
1304:       assertTrue(boolean4 == boolean1);
1305:       assertTrue(boolean4 == boolean3);
1306:       assertFalse(boolean4 == boolean0);
1307:       assertFalse(boolean4);
1308:       assertFalse(node0.isBlock());
1309:       assertFalse(node0.isNew());
1310:       assertFalse(node0.isAdd());
1311:       assertFalse(node0.isVar());
1312:       assertEquals(39, node0.getType());
1313:       assertFalse(node0.isName());
1314:       assertFalse(node0.isStringKey());
1315:       assertFalse(node0.isContinue());
1316:       assertFalse(node0.hasMoreThanOneChild());
1317:       assertFalse(node0.isCall());
1318:       assertFalse(node0.isParamList());
1319:       assertFalse(node0.isTypeOf());
1320:       assertEquals((-1), node0.getSourcePosition());
1321:       assertFalse(node0.isDec());
1322:       assertFalse(node0.hasChildren());
1323:       assertFalse(node0.isReturn());
1324:       assertFalse(node0.isWhile());
1325:       assertFalse(node0.hasOneChild());
1326:       assertFalse(node0.isTry());
1327:       assertFalse(node0.isFunction());
1328:       assertFalse(node0.isRegExp());
1329:       assertFalse(node0.isDebugger());
1330:       assertFalse(node0.isAnd());
1331:       assertFalse(node0.isIf());
1332:       assertFalse(node0.isWith());
1333:       assertFalse(node0.isCatch());
1334:       assertFalse(node0.isInstanceOf());
1335:       assertFalse(node0.isCast());
1336:       assertEquals((-1), node0.getLineno());
1337:       assertFalse(node0.isIn());
1338:       assertFalse(node0.isNE());
1339:       assertFalse(node0.isThrow());
1340:       assertFalse(node0.isInc());
1341:       assertFalse(node0.isSetterDef());
1342:       assertFalse(node0.isSwitch());
1343:       assertEquals((-1), node0.getCharno());
1344:       assertFalse(node0.isHook());
1345:       assertFalse(node0.isFalse());
1346:       assertFalse(node0.isBreak());
1347:       assertTrue(node0.isNumber());
1348:       assertFalse(node0.isComma());
1349:       assertFalse(node0.isThis());
1350:       assertFalse(node0.isFor());
1351:       assertFalse(node0.isCase());
1352:       assertFalse(node0.isNot());
1353:       assertFalse(node0.isGetterDef());
1354:       assertFalse(node0.isString());
1355:       assertFalse(node0.isObjectLit());
1356:       assertFalse(node0.isScript());
1357:       assertFalse(node0.isGetProp());
1358:       assertFalse(node0.isVoid());
1359:       assertFalse(node0.isTrue());
1360:       assertFalse(node0.isAssign());
1361:       assertFalse(node0.isLabelName());
1362:       assertFalse(node0.isDelProp());
1363:       assertFalse(node0.isArrayLit());
1364:       assertFalse(node0.isExprResult());
1365:       assertFalse(node0.isGetElem());
1366:       assertFalse(node0.isLabel());
1367:       assertFalse(node0.isOr());
1368:       assertFalse(node0.isAssignAdd());
1369:       assertFalse(node0.isNull());
1370:       assertEquals(0, node0.getChildCount());
1371:       assertFalse(node0.isEmpty());
1372:       assertFalse(node0.isDo());
1373:       assertFalse(node0.isDefaultCase());
1374:       assertEquals(48, Node.DIRECTIVES);
1375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1377:       assertEquals(36, Node.QUOTED_PROP);
1378:       assertEquals(50, Node.FREE_CALL);
1379:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1380:       assertEquals(8, Node.FLAG_NO_THROWS);
1381:       assertEquals(39, Node.EMPTY_BLOCK);
1382:       assertEquals(53, Node.INPUT_ID);
1383:       assertEquals(55, Node.INFERRED_FUNCTION);
1384:       assertEquals(52, Node.LENGTH);
1385:       assertEquals(57, Node.REFLECTED_OBJECT);
1386:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1387:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1389:       assertEquals(49, Node.DIRECT_EVAL);
1390:       assertEquals(37, Node.OPT_ARG_NAME);
1391:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1392:       assertEquals(4095, Node.COLUMN_MASK);
1393:       assertEquals(32, Node.INCRDECR_PROP);
1394:       assertEquals(46, Node.IS_NAMESPACE);
1395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1396:       assertEquals(12, Node.COLUMN_BITS);
1397:       assertEquals(56, Node.CHANGE_TIME);
1398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1399:       assertEquals(57, Node.LAST_PROP);
1400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1401:       assertEquals(1, Node.DECR_FLAG);
1402:       assertEquals(29, Node.JSDOC_INFO_PROP);
1403:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1404:       assertEquals(54, Node.SLASH_V);
1405:       assertEquals(43, Node.IS_CONSTANT_NAME);
1406:       assertEquals(47, Node.IS_DISPATCHER);
1407:       assertEquals(2, Node.POST_FLAG);
1408:       assertEquals(30, Node.VAR_ARGS_NAME);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:   }
1411: }
RegularFileObject[/tmp/EvoSuite_316_1628159318824/com/google/javascript/rhino/Node_316_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_316_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_316_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_316_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:39.046 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertNotNull(node0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.setCharno(1709);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node0.isEquivalentTo(node0);
assertTrue(boolean0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node0.isNull();
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(505);
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(505, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(504, node_SideEffectFlags0.valueOf());
assertEquals(504, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(504, node_SideEffectFlags0.valueOf());
assertEquals(504, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(504, node_SideEffectFlags2.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);

int int0 = node0.getCharno();
assertEquals((-1), int0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
assertNotNull(jSType0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isNoResolvedType());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isUnionType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isAllType());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isStringValueType());
assertTrue(jSType0.isNominalType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNullType());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertNotNull(jSDocInfo0);
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isOverride());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExpose());

ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
assertNotNull(objectType0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isOverride());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isExterns());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExpose());
assertFalse(objectType0.isRecordType());
assertFalse(objectType0.isConstructor());
assertFalse(objectType0.hasCachedValues());
assertFalse(objectType0.isOrdinaryFunction());
assertFalse(objectType0.isNativeObjectType());
assertFalse(objectType0.isInterface());
assertFalse(objectType0.isResolved());
assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
assertFalse(objectType0.isNoType());
assertFalse(objectType0.isNoObjectType());
assertFalse(objectType0.isAllType());
assertFalse(objectType0.isFunctionType());
assertFalse(objectType0.isTemplateType());
assertFalse(objectType0.isVoidType());
assertFalse(objectType0.hasReferenceName());
assertFalse(objectType0.isTemplatizedType());
assertFalse(objectType0.isEnumElementType());
assertFalse(objectType0.isNominalType());
assertFalse(objectType0.isNominalConstructor());
assertFalse(objectType0.isStringValueType());
assertFalse(objectType0.isCheckedUnknownType());
assertFalse(objectType0.isNullType());
assertTrue(objectType0.isObject());
assertFalse(objectType0.isBooleanValueType());
assertFalse(objectType0.isFunctionPrototypeType());
assertFalse(objectType0.isNumberValueType());
assertFalse(objectType0.isNoResolvedType());
assertFalse(objectType0.isUnionType());
assertFalse(objectType0.isEnumType());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

Node node1 = new Node(1, 1, 31);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(4127, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertEquals(31, node1.getCharno());
assertFalse(node1.isNew());
assertEquals(1, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean2 = node0.isEquivalentTo(node1, true, false, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(4127, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertEquals(31, node1.getCharno());
assertFalse(node1.isNew());
assertEquals(1, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

int int1 = Node.COLUMN_MASK;
assertFalse(int1 == int0);
assertEquals(4095, int1);

boolean boolean3 = node1.isAssignAdd();
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean3);
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(4127, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertEquals(31, node1.getCharno());
assertFalse(node1.isNew());
assertEquals(1, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(4127, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertEquals(1, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertEquals(31, node1.getCharno());
assertFalse(node1.isNew());
assertEquals(1, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean4 = node0.isString();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean0);
assertFalse(boolean4);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 10:28:43.031 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_357_1628159322844/com/google/javascript/rhino/Node_357_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_357_1628159322844/com/google/javascript/rhino/Node_357_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:43.031 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:43.031 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:43.032 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 986
[MASTER] 10:28:43.032 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_357_1628159322844/com/google/javascript/rhino/Node_357_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplatizedType;
16: import java.util.ArrayList;
17: import java.util.Collection;
18: import java.util.Iterator;
19: import java.util.List;
20: import java.util.ListIterator;
21: import org.evosuite.runtime.EvoRunner;
22: import org.evosuite.runtime.EvoRunnerParameters;
23: import org.evosuite.runtime.testdata.FileSystemHandling;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_357_tmp__ESTest extends Node_357_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
32:       assertNotNull(simpleErrorReporter0);
33:       
34:       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
35:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
36:       assertNotNull(simpleErrorReporter1);
37:       
38:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
39:       assertTrue(boolean0);
40:       
41:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
42:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
43:       assertNotNull(jSTypeRegistry0);
44:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
45:       
46:       ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
47:       assertNotNull(arrayList0);
48:       assertTrue(arrayList0.isEmpty());
49:       assertEquals(0, arrayList0.size());
50:       
51:       ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
52:       assertNotNull(listIterator0);
53:       assertTrue(arrayList0.isEmpty());
54:       assertEquals(0, arrayList0.size());
55:       assertFalse(listIterator0.hasPrevious());
56:       assertFalse(listIterator0.hasNext());
57:       
58:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
59:       assertNotNull(immutableList0);
60:       assertTrue(arrayList0.isEmpty());
61:       assertEquals(0, arrayList0.size());
62:       assertFalse(listIterator0.hasPrevious());
63:       assertFalse(listIterator0.hasNext());
64:       assertEquals(0, immutableList0.size());
65:       
66:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
67:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
68:       assertNotNull(node0);
69:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
70:       assertTrue(arrayList0.isEmpty());
71:       assertEquals(0, arrayList0.size());
72:       assertFalse(listIterator0.hasPrevious());
73:       assertFalse(listIterator0.hasNext());
74:       assertEquals(0, immutableList0.size());
75:       assertFalse(node0.isIn());
76:       assertFalse(node0.isSwitch());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isHook());
83:       assertEquals((-1), node0.getCharno());
84:       assertFalse(node0.isDebugger());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isTry());
88:       assertFalse(node0.isGetProp());
89:       assertFalse(node0.isCase());
90:       assertFalse(node0.isCatch());
91:       assertFalse(node0.isObjectLit());
92:       assertTrue(node0.isParamList());
93:       assertFalse(node0.isInstanceOf());
94:       assertFalse(node0.isAnd());
95:       assertFalse(node0.isWith());
96:       assertFalse(node0.isNot());
97:       assertFalse(node0.isFunction());
98:       assertFalse(node0.isRegExp());
99:       assertFalse(node0.isCast());
100:       assertFalse(node0.isFalse());
101:       assertFalse(node0.isThrow());
102:       assertFalse(node0.isInc());
103:       assertFalse(node0.isSetterDef());
104:       assertFalse(node0.hasMoreThanOneChild());
105:       assertFalse(node0.isContinue());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isOr());
109:       assertFalse(node0.isLabel());
110:       assertFalse(node0.isTypeOf());
111:       assertEquals((-1), node0.getLineno());
112:       assertFalse(node0.isLabelName());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.isCall());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isDec());
119:       assertEquals((-1), node0.getSourcePosition());
120:       assertFalse(node0.hasChildren());
121:       assertFalse(node0.isScript());
122:       assertFalse(node0.isNumber());
123:       assertFalse(node0.hasOneChild());
124:       assertEquals(0, node0.getChildCount());
125:       assertFalse(node0.isComma());
126:       assertFalse(node0.isTrue());
127:       assertFalse(node0.isVoid());
128:       assertFalse(node0.isNull());
129:       assertFalse(node0.isExprResult());
130:       assertFalse(node0.isName());
131:       assertFalse(node0.isArrayLit());
132:       assertFalse(node0.isBreak());
133:       assertFalse(node0.isVar());
134:       assertFalse(node0.isDefaultCase());
135:       assertFalse(node0.isAssignAdd());
136:       assertEquals(83, node0.getType());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isAdd());
139:       assertFalse(node0.isDo());
140:       assertFalse(node0.isNew());
141:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
143:       assertEquals(50, Node.FREE_CALL);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(8, Node.FLAG_NO_THROWS);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(1, Node.DECR_FLAG);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(12, Node.COLUMN_BITS);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(37, Node.OPT_ARG_NAME);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertEquals(56, Node.CHANGE_TIME);
165:       assertEquals(47, Node.IS_DISPATCHER);
166:       assertEquals(32, Node.INCRDECR_PROP);
167:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
168:       assertEquals(29, Node.JSDOC_INFO_PROP);
169:       assertEquals(53, Node.INPUT_ID);
170:       assertEquals(30, Node.VAR_ARGS_NAME);
171:       assertEquals(43, Node.IS_CONSTANT_NAME);
172:       assertEquals(51, Node.STATIC_SOURCE_FILE);
173:       assertEquals(57, Node.LAST_PROP);
174:       assertEquals(46, Node.IS_NAMESPACE);
175:       assertEquals(54, Node.SLASH_V);
176:       assertEquals(2, Node.POST_FLAG);
177:       assertEquals(40, Node.ORIGINALNAME_PROP);
178:       
179:       Node node1 = new Node(4, node0, 2836, 47);
180:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
181:       assertFalse(node1.equals((Object)node0));
182:       assertNotNull(node1);
183:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
184:       assertTrue(arrayList0.isEmpty());
185:       assertEquals(0, arrayList0.size());
186:       assertFalse(listIterator0.hasPrevious());
187:       assertFalse(listIterator0.hasNext());
188:       assertEquals(0, immutableList0.size());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isSwitch());
191:       assertFalse(node0.isNE());
192:       assertFalse(node0.isIf());
193:       assertFalse(node0.isDelProp());
194:       assertFalse(node0.isFor());
195:       assertFalse(node0.isGetterDef());
196:       assertFalse(node0.isHook());
197:       assertEquals((-1), node0.getCharno());
198:       assertFalse(node0.isDebugger());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isString());
201:       assertFalse(node0.isTry());
202:       assertFalse(node0.isGetProp());
203:       assertFalse(node0.isCase());
204:       assertFalse(node0.isCatch());
205:       assertFalse(node0.isObjectLit());
206:       assertTrue(node0.isParamList());
207:       assertFalse(node0.isInstanceOf());
208:       assertFalse(node0.isAnd());
209:       assertFalse(node0.isWith());
210:       assertFalse(node0.isNot());
211:       assertFalse(node0.isFunction());
212:       assertFalse(node0.isRegExp());
213:       assertFalse(node0.isCast());
214:       assertFalse(node0.isFalse());
215:       assertFalse(node0.isThrow());
216:       assertFalse(node0.isInc());
217:       assertFalse(node0.isSetterDef());
218:       assertFalse(node0.hasMoreThanOneChild());
219:       assertFalse(node0.isContinue());
220:       assertFalse(node0.isWhile());
221:       assertFalse(node0.isReturn());
222:       assertFalse(node0.isOr());
223:       assertFalse(node0.isLabel());
224:       assertFalse(node0.isTypeOf());
225:       assertEquals((-1), node0.getLineno());
226:       assertFalse(node0.isLabelName());
227:       assertFalse(node0.isGetElem());
228:       assertFalse(node0.isCall());
229:       assertFalse(node0.isStringKey());
230:       assertFalse(node0.isAssign());
231:       assertFalse(node0.isBlock());
232:       assertFalse(node0.isDec());
233:       assertEquals((-1), node0.getSourcePosition());
234:       assertFalse(node0.hasChildren());
235:       assertFalse(node0.isScript());
236:       assertFalse(node0.isNumber());
237:       assertFalse(node0.hasOneChild());
238:       assertEquals(0, node0.getChildCount());
239:       assertFalse(node0.isComma());
240:       assertFalse(node0.isTrue());
241:       assertFalse(node0.isVoid());
242:       assertFalse(node0.isNull());
243:       assertFalse(node0.isExprResult());
244:       assertFalse(node0.isName());
245:       assertFalse(node0.isArrayLit());
246:       assertFalse(node0.isBreak());
247:       assertFalse(node0.isVar());
248:       assertFalse(node0.isDefaultCase());
249:       assertFalse(node0.isAssignAdd());
250:       assertEquals(83, node0.getType());
251:       assertFalse(node0.isEmpty());
252:       assertFalse(node0.isAdd());
253:       assertFalse(node0.isDo());
254:       assertFalse(node0.isNew());
255:       assertFalse(node1.isArrayLit());
256:       assertFalse(node1.isDelProp());
257:       assertFalse(node1.isTry());
258:       assertFalse(node1.isVoid());
259:       assertFalse(node1.isRegExp());
260:       assertFalse(node1.isDefaultCase());
261:       assertTrue(node1.hasOneChild());
262:       assertFalse(node1.isFor());
263:       assertEquals(1, node1.getChildCount());
264:       assertFalse(node1.isFunction());
265:       assertFalse(node1.isCase());
266:       assertFalse(node1.isSwitch());
267:       assertFalse(node1.isParamList());
268:       assertFalse(node1.isString());
269:       assertFalse(node1.isDebugger());
270:       assertFalse(node1.isGetterDef());
271:       assertFalse(node1.isHook());
272:       assertEquals(11616303, node1.getSourcePosition());
273:       assertFalse(node1.isThrow());
274:       assertFalse(node1.isThis());
275:       assertFalse(node1.isBlock());
276:       assertTrue(node1.isReturn());
277:       assertFalse(node1.isFalse());
278:       assertFalse(node1.isContinue());
279:       assertFalse(node1.isInstanceOf());
280:       assertFalse(node1.isIn());
281:       assertFalse(node1.hasMoreThanOneChild());
282:       assertFalse(node1.isCatch());
283:       assertTrue(node1.hasChildren());
284:       assertFalse(node1.isIf());
285:       assertFalse(node1.isSetterDef());
286:       assertFalse(node1.isInc());
287:       assertFalse(node1.isNE());
288:       assertEquals(2836, node1.getLineno());
289:       assertFalse(node1.isCast());
290:       assertFalse(node1.isGetElem());
291:       assertFalse(node1.isLabelName());
292:       assertFalse(node1.isTypeOf());
293:       assertFalse(node1.isExprResult());
294:       assertFalse(node1.isLabel());
295:       assertFalse(node1.isWith());
296:       assertFalse(node1.isAssign());
297:       assertFalse(node1.isDec());
298:       assertFalse(node1.isAnd());
299:       assertFalse(node1.isGetProp());
300:       assertFalse(node1.isNumber());
301:       assertFalse(node1.isScript());
302:       assertFalse(node1.isObjectLit());
303:       assertFalse(node1.isNot());
304:       assertFalse(node1.isCall());
305:       assertFalse(node1.isStringKey());
306:       assertFalse(node1.isVar());
307:       assertFalse(node1.isName());
308:       assertFalse(node1.isNew());
309:       assertFalse(node1.isAdd());
310:       assertEquals(4, node1.getType());
311:       assertFalse(node1.isBreak());
312:       assertFalse(node1.isWhile());
313:       assertEquals(47, node1.getCharno());
314:       assertFalse(node1.isComma());
315:       assertFalse(node1.isAssignAdd());
316:       assertFalse(node1.isDo());
317:       assertFalse(node1.isNull());
318:       assertFalse(node1.isTrue());
319:       assertFalse(node1.isEmpty());
320:       assertFalse(node1.isOr());
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(50, Node.FREE_CALL);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(49, Node.DIRECT_EVAL);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(12, Node.COLUMN_BITS);
335:       assertEquals(48, Node.DIRECTIVES);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
338:       assertEquals(37, Node.OPT_ARG_NAME);
339:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
343:       assertEquals(56, Node.CHANGE_TIME);
344:       assertEquals(47, Node.IS_DISPATCHER);
345:       assertEquals(32, Node.INCRDECR_PROP);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(53, Node.INPUT_ID);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(43, Node.IS_CONSTANT_NAME);
351:       assertEquals(51, Node.STATIC_SOURCE_FILE);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(54, Node.SLASH_V);
355:       assertEquals(2, Node.POST_FLAG);
356:       assertEquals(40, Node.ORIGINALNAME_PROP);
357:       assertEquals(1, Node.DECR_FLAG);
358:       assertEquals(32, Node.INCRDECR_PROP);
359:       assertEquals(49, Node.DIRECT_EVAL);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(54, Node.SLASH_V);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(46, Node.IS_NAMESPACE);
366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
367:       assertEquals(57, Node.REFLECTED_OBJECT);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(4095, Node.COLUMN_MASK);
377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
378:       assertEquals(8, Node.FLAG_NO_THROWS);
379:       assertEquals(39, Node.EMPTY_BLOCK);
380:       assertEquals(48, Node.DIRECTIVES);
381:       assertEquals(43, Node.IS_CONSTANT_NAME);
382:       assertEquals(50, Node.FREE_CALL);
383:       assertEquals(36, Node.QUOTED_PROP);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
386:       assertEquals(29, Node.JSDOC_INFO_PROP);
387:       assertEquals(53, Node.INPUT_ID);
388:       assertEquals(2, Node.POST_FLAG);
389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
390:       assertEquals(57, Node.LAST_PROP);
391:       assertEquals(30, Node.VAR_ARGS_NAME);
392:       assertEquals(47, Node.IS_DISPATCHER);
393:       
394:       boolean boolean1 = node1.isLabel();
395:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
396:       assertFalse(node0.equals((Object)node1));
397:       assertFalse(node1.equals((Object)node0));
398:       assertFalse(boolean1 == boolean0);
399:       assertFalse(boolean1);
400:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
401:       assertTrue(arrayList0.isEmpty());
402:       assertEquals(0, arrayList0.size());
403:       assertFalse(listIterator0.hasPrevious());
404:       assertFalse(listIterator0.hasNext());
405:       assertEquals(0, immutableList0.size());
406:       assertFalse(node0.isIn());
407:       assertFalse(node0.isSwitch());
408:       assertFalse(node0.isNE());
409:       assertFalse(node0.isIf());
410:       assertFalse(node0.isDelProp());
411:       assertFalse(node0.isFor());
412:       assertFalse(node0.isGetterDef());
413:       assertFalse(node0.isHook());
414:       assertEquals((-1), node0.getCharno());
415:       assertFalse(node0.isDebugger());
416:       assertFalse(node0.isThis());
417:       assertFalse(node0.isString());
418:       assertFalse(node0.isTry());
419:       assertFalse(node0.isGetProp());
420:       assertFalse(node0.isCase());
421:       assertFalse(node0.isCatch());
422:       assertFalse(node0.isObjectLit());
423:       assertTrue(node0.isParamList());
424:       assertFalse(node0.isInstanceOf());
425:       assertFalse(node0.isAnd());
426:       assertFalse(node0.isWith());
427:       assertFalse(node0.isNot());
428:       assertFalse(node0.isFunction());
429:       assertFalse(node0.isRegExp());
430:       assertFalse(node0.isCast());
431:       assertFalse(node0.isFalse());
432:       assertFalse(node0.isThrow());
433:       assertFalse(node0.isInc());
434:       assertFalse(node0.isSetterDef());
435:       assertFalse(node0.hasMoreThanOneChild());
436:       assertFalse(node0.isContinue());
437:       assertFalse(node0.isWhile());
438:       assertFalse(node0.isReturn());
439:       assertFalse(node0.isOr());
440:       assertFalse(node0.isLabel());
441:       assertFalse(node0.isTypeOf());
442:       assertEquals((-1), node0.getLineno());
443:       assertFalse(node0.isLabelName());
444:       assertFalse(node0.isGetElem());
445:       assertFalse(node0.isCall());
446:       assertFalse(node0.isStringKey());
447:       assertFalse(node0.isAssign());
448:       assertFalse(node0.isBlock());
449:       assertFalse(node0.isDec());
450:       assertEquals((-1), node0.getSourcePosition());
451:       assertFalse(node0.hasChildren());
452:       assertFalse(node0.isScript());
453:       assertFalse(node0.isNumber());
454:       assertFalse(node0.hasOneChild());
455:       assertEquals(0, node0.getChildCount());
456:       assertFalse(node0.isComma());
457:       assertFalse(node0.isTrue());
458:       assertFalse(node0.isVoid());
459:       assertFalse(node0.isNull());
460:       assertFalse(node0.isExprResult());
461:       assertFalse(node0.isName());
462:       assertFalse(node0.isArrayLit());
463:       assertFalse(node0.isBreak());
464:       assertFalse(node0.isVar());
465:       assertFalse(node0.isDefaultCase());
466:       assertFalse(node0.isAssignAdd());
467:       assertEquals(83, node0.getType());
468:       assertFalse(node0.isEmpty());
469:       assertFalse(node0.isAdd());
470:       assertFalse(node0.isDo());
471:       assertFalse(node0.isNew());
472:       assertFalse(node1.isArrayLit());
473:       assertFalse(node1.isDelProp());
474:       assertFalse(node1.isTry());
475:       assertFalse(node1.isVoid());
476:       assertFalse(node1.isRegExp());
477:       assertFalse(node1.isDefaultCase());
478:       assertTrue(node1.hasOneChild());
479:       assertFalse(node1.isFor());
480:       assertEquals(1, node1.getChildCount());
481:       assertFalse(node1.isFunction());
482:       assertFalse(node1.isCase());
483:       assertFalse(node1.isSwitch());
484:       assertFalse(node1.isParamList());
485:       assertFalse(node1.isString());
486:       assertFalse(node1.isDebugger());
487:       assertFalse(node1.isGetterDef());
488:       assertFalse(node1.isHook());
489:       assertEquals(11616303, node1.getSourcePosition());
490:       assertFalse(node1.isThrow());
491:       assertFalse(node1.isThis());
492:       assertFalse(node1.isBlock());
493:       assertTrue(node1.isReturn());
494:       assertFalse(node1.isFalse());
495:       assertFalse(node1.isContinue());
496:       assertFalse(node1.isInstanceOf());
497:       assertFalse(node1.isIn());
498:       assertFalse(node1.hasMoreThanOneChild());
499:       assertFalse(node1.isCatch());
500:       assertTrue(node1.hasChildren());
501:       assertFalse(node1.isIf());
502:       assertFalse(node1.isSetterDef());
503:       assertFalse(node1.isInc());
504:       assertFalse(node1.isNE());
505:       assertEquals(2836, node1.getLineno());
506:       assertFalse(node1.isCast());
507:       assertFalse(node1.isGetElem());
508:       assertFalse(node1.isLabelName());
509:       assertFalse(node1.isTypeOf());
510:       assertFalse(node1.isExprResult());
511:       assertFalse(node1.isLabel());
512:       assertFalse(node1.isWith());
513:       assertFalse(node1.isAssign());
514:       assertFalse(node1.isDec());
515:       assertFalse(node1.isAnd());
516:       assertFalse(node1.isGetProp());
517:       assertFalse(node1.isNumber());
518:       assertFalse(node1.isScript());
519:       assertFalse(node1.isObjectLit());
520:       assertFalse(node1.isNot());
521:       assertFalse(node1.isCall());
522:       assertFalse(node1.isStringKey());
523:       assertFalse(node1.isVar());
524:       assertFalse(node1.isName());
525:       assertFalse(node1.isNew());
526:       assertFalse(node1.isAdd());
527:       assertEquals(4, node1.getType());
528:       assertFalse(node1.isBreak());
529:       assertFalse(node1.isWhile());
530:       assertEquals(47, node1.getCharno());
531:       assertFalse(node1.isComma());
532:       assertFalse(node1.isAssignAdd());
533:       assertFalse(node1.isDo());
534:       assertFalse(node1.isNull());
535:       assertFalse(node1.isTrue());
536:       assertFalse(node1.isEmpty());
537:       assertFalse(node1.isOr());
538:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
539:       assertNotSame(node0, node1);
540:       assertNotSame(node1, node0);
541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
545:       assertEquals(52, Node.LENGTH);
546:       assertEquals(8, Node.FLAG_NO_THROWS);
547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
548:       assertEquals(55, Node.INFERRED_FUNCTION);
549:       assertEquals(39, Node.EMPTY_BLOCK);
550:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
551:       assertEquals(1, Node.DECR_FLAG);
552:       assertEquals(49, Node.DIRECT_EVAL);
553:       assertEquals(36, Node.QUOTED_PROP);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(48, Node.DIRECTIVES);
556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(37, Node.OPT_ARG_NAME);
559:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
560:       assertEquals(4095, Node.COLUMN_MASK);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
563:       assertEquals(56, Node.CHANGE_TIME);
564:       assertEquals(47, Node.IS_DISPATCHER);
565:       assertEquals(32, Node.INCRDECR_PROP);
566:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(53, Node.INPUT_ID);
569:       assertEquals(30, Node.VAR_ARGS_NAME);
570:       assertEquals(43, Node.IS_CONSTANT_NAME);
571:       assertEquals(51, Node.STATIC_SOURCE_FILE);
572:       assertEquals(57, Node.LAST_PROP);
573:       assertEquals(46, Node.IS_NAMESPACE);
574:       assertEquals(54, Node.SLASH_V);
575:       assertEquals(2, Node.POST_FLAG);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(1, Node.DECR_FLAG);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(49, Node.DIRECT_EVAL);
580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(54, Node.SLASH_V);
583:       assertEquals(56, Node.CHANGE_TIME);
584:       assertEquals(52, Node.LENGTH);
585:       assertEquals(46, Node.IS_NAMESPACE);
586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
587:       assertEquals(57, Node.REFLECTED_OBJECT);
588:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
589:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
592:       assertEquals(12, Node.COLUMN_BITS);
593:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
594:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
595:       assertEquals(55, Node.INFERRED_FUNCTION);
596:       assertEquals(4095, Node.COLUMN_MASK);
597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
598:       assertEquals(8, Node.FLAG_NO_THROWS);
599:       assertEquals(39, Node.EMPTY_BLOCK);
600:       assertEquals(48, Node.DIRECTIVES);
601:       assertEquals(43, Node.IS_CONSTANT_NAME);
602:       assertEquals(50, Node.FREE_CALL);
603:       assertEquals(36, Node.QUOTED_PROP);
604:       assertEquals(40, Node.ORIGINALNAME_PROP);
605:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
606:       assertEquals(29, Node.JSDOC_INFO_PROP);
607:       assertEquals(53, Node.INPUT_ID);
608:       assertEquals(2, Node.POST_FLAG);
609:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
610:       assertEquals(57, Node.LAST_PROP);
611:       assertEquals(30, Node.VAR_ARGS_NAME);
612:       assertEquals(47, Node.IS_DISPATCHER);
613:       
614:       ImmutableList<JSType> immutableList1 = immutableList0.reverse();
615:       assertTrue(immutableList1.equals((Object)immutableList0));
616:       assertNotNull(immutableList1);
617:       assertTrue(arrayList0.isEmpty());
618:       assertEquals(0, arrayList0.size());
619:       assertFalse(listIterator0.hasPrevious());
620:       assertFalse(listIterator0.hasNext());
621:       assertEquals(0, immutableList0.size());
622:       assertEquals(0, immutableList1.size());
623:       
624:       ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
625:       assertTrue(immutableList0.equals((Object)immutableList1));
626:       assertTrue(immutableList1.equals((Object)immutableList0));
627:       assertTrue(immutableList2.equals((Object)immutableList0));
628:       assertNotNull(immutableList2);
629:       assertTrue(arrayList0.isEmpty());
630:       assertEquals(0, arrayList0.size());
631:       assertFalse(listIterator0.hasPrevious());
632:       assertFalse(listIterator0.hasNext());
633:       assertEquals(0, immutableList0.size());
634:       assertEquals(0, immutableList1.size());
635:       assertEquals(0, immutableList2.size());
636:       assertSame(immutableList1, immutableList2);
637:       assertSame(immutableList2, immutableList1);
638:       
639:       boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
640:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
641:       assertTrue(immutableList0.equals((Object)immutableList2));
642:       assertTrue(immutableList0.equals((Object)immutableList1));
643:       assertFalse(node0.equals((Object)node1));
644:       assertFalse(node1.equals((Object)node0));
645:       assertFalse(boolean2 == boolean0);
646:       assertTrue(boolean2 == boolean1);
647:       assertFalse(boolean2);
648:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
649:       assertTrue(arrayList0.isEmpty());
650:       assertEquals(0, arrayList0.size());
651:       assertFalse(listIterator0.hasPrevious());
652:       assertFalse(listIterator0.hasNext());
653:       assertEquals(0, immutableList0.size());
654:       assertFalse(node0.isIn());
655:       assertFalse(node0.isSwitch());
656:       assertFalse(node0.isNE());
657:       assertFalse(node0.isIf());
658:       assertFalse(node0.isDelProp());
659:       assertFalse(node0.isFor());
660:       assertFalse(node0.isGetterDef());
661:       assertFalse(node0.isHook());
662:       assertEquals((-1), node0.getCharno());
663:       assertFalse(node0.isDebugger());
664:       assertFalse(node0.isThis());
665:       assertFalse(node0.isString());
666:       assertFalse(node0.isTry());
667:       assertFalse(node0.isGetProp());
668:       assertFalse(node0.isCase());
669:       assertFalse(node0.isCatch());
670:       assertFalse(node0.isObjectLit());
671:       assertTrue(node0.isParamList());
672:       assertFalse(node0.isInstanceOf());
673:       assertFalse(node0.isAnd());
674:       assertFalse(node0.isWith());
675:       assertFalse(node0.isNot());
676:       assertFalse(node0.isFunction());
677:       assertFalse(node0.isRegExp());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isFalse());
680:       assertFalse(node0.isThrow());
681:       assertFalse(node0.isInc());
682:       assertFalse(node0.isSetterDef());
683:       assertFalse(node0.hasMoreThanOneChild());
684:       assertFalse(node0.isContinue());
685:       assertFalse(node0.isWhile());
686:       assertFalse(node0.isReturn());
687:       assertFalse(node0.isOr());
688:       assertFalse(node0.isLabel());
689:       assertFalse(node0.isTypeOf());
690:       assertEquals((-1), node0.getLineno());
691:       assertFalse(node0.isLabelName());
692:       assertFalse(node0.isGetElem());
693:       assertFalse(node0.isCall());
694:       assertFalse(node0.isStringKey());
695:       assertFalse(node0.isAssign());
696:       assertFalse(node0.isBlock());
697:       assertFalse(node0.isDec());
698:       assertEquals((-1), node0.getSourcePosition());
699:       assertFalse(node0.hasChildren());
700:       assertFalse(node0.isScript());
701:       assertFalse(node0.isNumber());
702:       assertFalse(node0.hasOneChild());
703:       assertEquals(0, node0.getChildCount());
704:       assertFalse(node0.isComma());
705:       assertFalse(node0.isTrue());
706:       assertFalse(node0.isVoid());
707:       assertFalse(node0.isNull());
708:       assertFalse(node0.isExprResult());
709:       assertFalse(node0.isName());
710:       assertFalse(node0.isArrayLit());
711:       assertFalse(node0.isBreak());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isDefaultCase());
714:       assertFalse(node0.isAssignAdd());
715:       assertEquals(83, node0.getType());
716:       assertFalse(node0.isEmpty());
717:       assertFalse(node0.isAdd());
718:       assertFalse(node0.isDo());
719:       assertFalse(node0.isNew());
720:       assertFalse(node1.isArrayLit());
721:       assertFalse(node1.isDelProp());
722:       assertFalse(node1.isTry());
723:       assertFalse(node1.isVoid());
724:       assertFalse(node1.isRegExp());
725:       assertFalse(node1.isDefaultCase());
726:       assertTrue(node1.hasOneChild());
727:       assertFalse(node1.isFor());
728:       assertEquals(1, node1.getChildCount());
729:       assertFalse(node1.isFunction());
730:       assertFalse(node1.isCase());
731:       assertFalse(node1.isSwitch());
732:       assertFalse(node1.isParamList());
733:       assertFalse(node1.isString());
734:       assertFalse(node1.isDebugger());
735:       assertFalse(node1.isGetterDef());
736:       assertFalse(node1.isHook());
737:       assertEquals(11616303, node1.getSourcePosition());
738:       assertFalse(node1.isThrow());
739:       assertFalse(node1.isThis());
740:       assertFalse(node1.isBlock());
741:       assertTrue(node1.isReturn());
742:       assertFalse(node1.isFalse());
743:       assertFalse(node1.isContinue());
744:       assertFalse(node1.isInstanceOf());
745:       assertFalse(node1.isIn());
746:       assertFalse(node1.hasMoreThanOneChild());
747:       assertFalse(node1.isCatch());
748:       assertTrue(node1.hasChildren());
749:       assertFalse(node1.isIf());
750:       assertFalse(node1.isSetterDef());
751:       assertFalse(node1.isInc());
752:       assertFalse(node1.isNE());
753:       assertEquals(2836, node1.getLineno());
754:       assertFalse(node1.isCast());
755:       assertFalse(node1.isGetElem());
756:       assertFalse(node1.isLabelName());
757:       assertFalse(node1.isTypeOf());
758:       assertFalse(node1.isExprResult());
759:       assertFalse(node1.isLabel());
760:       assertFalse(node1.isWith());
761:       assertFalse(node1.isAssign());
762:       assertFalse(node1.isDec());
763:       assertFalse(node1.isAnd());
764:       assertFalse(node1.isGetProp());
765:       assertFalse(node1.isNumber());
766:       assertFalse(node1.isScript());
767:       assertFalse(node1.isObjectLit());
768:       assertFalse(node1.isNot());
769:       assertFalse(node1.isCall());
770:       assertFalse(node1.isStringKey());
771:       assertFalse(node1.isVar());
772:       assertFalse(node1.isName());
773:       assertFalse(node1.isNew());
774:       assertFalse(node1.isAdd());
775:       assertEquals(4, node1.getType());
776:       assertFalse(node1.isBreak());
777:       assertFalse(node1.isWhile());
778:       assertEquals(47, node1.getCharno());
779:       assertFalse(node1.isComma());
780:       assertFalse(node1.isAssignAdd());
781:       assertFalse(node1.isDo());
782:       assertFalse(node1.isNull());
783:       assertFalse(node1.isTrue());
784:       assertFalse(node1.isEmpty());
785:       assertFalse(node1.isOr());
786:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
787:       assertNotSame(node0, node1);
788:       assertNotSame(node1, node0);
789:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
790:       assertEquals(50, Node.FREE_CALL);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(15, Node.NO_SIDE_EFFECTS);
796:       assertEquals(55, Node.INFERRED_FUNCTION);
797:       assertEquals(39, Node.EMPTY_BLOCK);
798:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
799:       assertEquals(1, Node.DECR_FLAG);
800:       assertEquals(49, Node.DIRECT_EVAL);
801:       assertEquals(36, Node.QUOTED_PROP);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(48, Node.DIRECTIVES);
804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
806:       assertEquals(37, Node.OPT_ARG_NAME);
807:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
808:       assertEquals(4095, Node.COLUMN_MASK);
809:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
810:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
811:       assertEquals(56, Node.CHANGE_TIME);
812:       assertEquals(47, Node.IS_DISPATCHER);
813:       assertEquals(32, Node.INCRDECR_PROP);
814:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
815:       assertEquals(29, Node.JSDOC_INFO_PROP);
816:       assertEquals(53, Node.INPUT_ID);
817:       assertEquals(30, Node.VAR_ARGS_NAME);
818:       assertEquals(43, Node.IS_CONSTANT_NAME);
819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
820:       assertEquals(57, Node.LAST_PROP);
821:       assertEquals(46, Node.IS_NAMESPACE);
822:       assertEquals(54, Node.SLASH_V);
823:       assertEquals(2, Node.POST_FLAG);
824:       assertEquals(40, Node.ORIGINALNAME_PROP);
825:       assertEquals(1, Node.DECR_FLAG);
826:       assertEquals(32, Node.INCRDECR_PROP);
827:       assertEquals(49, Node.DIRECT_EVAL);
828:       assertEquals(15, Node.NO_SIDE_EFFECTS);
829:       assertEquals(37, Node.OPT_ARG_NAME);
830:       assertEquals(54, Node.SLASH_V);
831:       assertEquals(56, Node.CHANGE_TIME);
832:       assertEquals(52, Node.LENGTH);
833:       assertEquals(46, Node.IS_NAMESPACE);
834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
835:       assertEquals(57, Node.REFLECTED_OBJECT);
836:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
837:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
840:       assertEquals(12, Node.COLUMN_BITS);
841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(4095, Node.COLUMN_MASK);
845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
846:       assertEquals(8, Node.FLAG_NO_THROWS);
847:       assertEquals(39, Node.EMPTY_BLOCK);
848:       assertEquals(48, Node.DIRECTIVES);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(36, Node.QUOTED_PROP);
852:       assertEquals(40, Node.ORIGINALNAME_PROP);
853:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
854:       assertEquals(29, Node.JSDOC_INFO_PROP);
855:       assertEquals(53, Node.INPUT_ID);
856:       assertEquals(2, Node.POST_FLAG);
857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(30, Node.VAR_ARGS_NAME);
860:       assertEquals(47, Node.IS_DISPATCHER);
861:       
862:       int int0 = Node.COLUMN_MASK;
863:       assertEquals(4095, int0);
864:       
865:       boolean boolean3 = node0.isNull();
866:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
867:       assertTrue(immutableList0.equals((Object)immutableList2));
868:       assertTrue(immutableList0.equals((Object)immutableList1));
869:       assertFalse(node0.equals((Object)node1));
870:       assertTrue(boolean3 == boolean2);
871:       assertTrue(boolean3 == boolean1);
872:       assertFalse(boolean3 == boolean0);
873:       assertFalse(boolean3);
874:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
875:       assertTrue(arrayList0.isEmpty());
876:       assertEquals(0, arrayList0.size());
877:       assertFalse(listIterator0.hasPrevious());
878:       assertFalse(listIterator0.hasNext());
879:       assertEquals(0, immutableList0.size());
880:       assertFalse(node0.isIn());
881:       assertFalse(node0.isSwitch());
882:       assertFalse(node0.isNE());
883:       assertFalse(node0.isIf());
884:       assertFalse(node0.isDelProp());
885:       assertFalse(node0.isFor());
886:       assertFalse(node0.isGetterDef());
887:       assertFalse(node0.isHook());
888:       assertEquals((-1), node0.getCharno());
889:       assertFalse(node0.isDebugger());
890:       assertFalse(node0.isThis());
891:       assertFalse(node0.isString());
892:       assertFalse(node0.isTry());
893:       assertFalse(node0.isGetProp());
894:       assertFalse(node0.isCase());
895:       assertFalse(node0.isCatch());
896:       assertFalse(node0.isObjectLit());
897:       assertTrue(node0.isParamList());
898:       assertFalse(node0.isInstanceOf());
899:       assertFalse(node0.isAnd());
900:       assertFalse(node0.isWith());
901:       assertFalse(node0.isNot());
902:       assertFalse(node0.isFunction());
903:       assertFalse(node0.isRegExp());
904:       assertFalse(node0.isCast());
905:       assertFalse(node0.isFalse());
906:       assertFalse(node0.isThrow());
907:       assertFalse(node0.isInc());
908:       assertFalse(node0.isSetterDef());
909:       assertFalse(node0.hasMoreThanOneChild());
910:       assertFalse(node0.isContinue());
911:       assertFalse(node0.isWhile());
912:       assertFalse(node0.isReturn());
913:       assertFalse(node0.isOr());
914:       assertFalse(node0.isLabel());
915:       assertFalse(node0.isTypeOf());
916:       assertEquals((-1), node0.getLineno());
917:       assertFalse(node0.isLabelName());
918:       assertFalse(node0.isGetElem());
919:       assertFalse(node0.isCall());
920:       assertFalse(node0.isStringKey());
921:       assertFalse(node0.isAssign());
922:       assertFalse(node0.isBlock());
923:       assertFalse(node0.isDec());
924:       assertEquals((-1), node0.getSourcePosition());
925:       assertFalse(node0.hasChildren());
926:       assertFalse(node0.isScript());
927:       assertFalse(node0.isNumber());
928:       assertFalse(node0.hasOneChild());
929:       assertEquals(0, node0.getChildCount());
930:       assertFalse(node0.isComma());
931:       assertFalse(node0.isTrue());
932:       assertFalse(node0.isVoid());
933:       assertFalse(node0.isNull());
934:       assertFalse(node0.isExprResult());
935:       assertFalse(node0.isName());
936:       assertFalse(node0.isArrayLit());
937:       assertFalse(node0.isBreak());
938:       assertFalse(node0.isVar());
939:       assertFalse(node0.isDefaultCase());
940:       assertFalse(node0.isAssignAdd());
941:       assertEquals(83, node0.getType());
942:       assertFalse(node0.isEmpty());
943:       assertFalse(node0.isAdd());
944:       assertFalse(node0.isDo());
945:       assertFalse(node0.isNew());
946:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
947:       assertNotSame(node0, node1);
948:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
949:       assertEquals(50, Node.FREE_CALL);
950:       assertEquals(57, Node.REFLECTED_OBJECT);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(52, Node.LENGTH);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
958:       assertEquals(1, Node.DECR_FLAG);
959:       assertEquals(49, Node.DIRECT_EVAL);
960:       assertEquals(36, Node.QUOTED_PROP);
961:       assertEquals(12, Node.COLUMN_BITS);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
964:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
965:       assertEquals(37, Node.OPT_ARG_NAME);
966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
967:       assertEquals(4095, Node.COLUMN_MASK);
968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
970:       assertEquals(56, Node.CHANGE_TIME);
971:       assertEquals(47, Node.IS_DISPATCHER);
972:       assertEquals(32, Node.INCRDECR_PROP);
973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
974:       assertEquals(29, Node.JSDOC_INFO_PROP);
975:       assertEquals(53, Node.INPUT_ID);
976:       assertEquals(30, Node.VAR_ARGS_NAME);
977:       assertEquals(43, Node.IS_CONSTANT_NAME);
978:       assertEquals(51, Node.STATIC_SOURCE_FILE);
979:       assertEquals(57, Node.LAST_PROP);
980:       assertEquals(46, Node.IS_NAMESPACE);
981:       assertEquals(54, Node.SLASH_V);
982:       assertEquals(2, Node.POST_FLAG);
983:       assertEquals(40, Node.ORIGINALNAME_PROP);
984:       
985:       Iterable<Node> iterable0 = node0.children();
986:       assertFalse(iterable0.contains(node0));
987:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
988:       assertTrue(immutableList0.equals((Object)immutableList2));
989:       assertTrue(immutableList0.equals((Object)immutableList1));
990:       assertFalse(node0.equals((Object)node1));
991:       assertNotNull(iterable0);
992:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
993:       assertTrue(arrayList0.isEmpty());
994:       assertEquals(0, arrayList0.size());
995:       assertFalse(listIterator0.hasPrevious());
996:       assertFalse(listIterator0.hasNext());
997:       assertEquals(0, immutableList0.size());
998:       assertFalse(node0.isIn());
999:       assertFalse(node0.isSwitch());
1000:       assertFalse(node0.isNE());
1001:       assertFalse(node0.isIf());
1002:       assertFalse(node0.isDelProp());
1003:       assertFalse(node0.isFor());
1004:       assertFalse(node0.isGetterDef());
1005:       assertFalse(node0.isHook());
1006:       assertEquals((-1), node0.getCharno());
1007:       assertFalse(node0.isDebugger());
1008:       assertFalse(node0.isThis());
1009:       assertFalse(node0.isString());
1010:       assertFalse(node0.isTry());
1011:       assertFalse(node0.isGetProp());
1012:       assertFalse(node0.isCase());
1013:       assertFalse(node0.isCatch());
1014:       assertFalse(node0.isObjectLit());
1015:       assertTrue(node0.isParamList());
1016:       assertFalse(node0.isInstanceOf());
1017:       assertFalse(node0.isAnd());
1018:       assertFalse(node0.isWith());
1019:       assertFalse(node0.isNot());
1020:       assertFalse(node0.isFunction());
1021:       assertFalse(node0.isRegExp());
1022:       assertFalse(node0.isCast());
1023:       assertFalse(node0.isFalse());
1024:       assertFalse(node0.isThrow());
1025:       assertFalse(node0.isInc());
1026:       assertFalse(node0.isSetterDef());
1027:       assertFalse(node0.hasMoreThanOneChild());
1028:       assertFalse(node0.isContinue());
1029:       assertFalse(node0.isWhile());
1030:       assertFalse(node0.isReturn());
1031:       assertFalse(node0.isOr());
1032:       assertFalse(node0.isLabel());
1033:       assertFalse(node0.isTypeOf());
1034:       assertEquals((-1), node0.getLineno());
1035:       assertFalse(node0.isLabelName());
1036:       assertFalse(node0.isGetElem());
1037:       assertFalse(node0.isCall());
1038:       assertFalse(node0.isStringKey());
1039:       assertFalse(node0.isAssign());
1040:       assertFalse(node0.isBlock());
1041:       assertFalse(node0.isDec());
1042:       assertEquals((-1), node0.getSourcePosition());
1043:       assertFalse(node0.hasChildren());
1044:       assertFalse(node0.isScript());
1045:       assertFalse(node0.isNumber());
1046:       assertFalse(node0.hasOneChild());
1047:       assertEquals(0, node0.getChildCount());
1048:       assertFalse(node0.isComma());
1049:       assertFalse(node0.isTrue());
1050:       assertFalse(node0.isVoid());
1051:       assertFalse(node0.isNull());
1052:       assertFalse(node0.isExprResult());
1053:       assertFalse(node0.isName());
1054:       assertFalse(node0.isArrayLit());
1055:       assertFalse(node0.isBreak());
1056:       assertFalse(node0.isVar());
1057:       assertFalse(node0.isDefaultCase());
1058:       assertFalse(node0.isAssignAdd());
1059:       assertEquals(83, node0.getType());
1060:       assertFalse(node0.isEmpty());
1061:       assertFalse(node0.isAdd());
1062:       assertFalse(node0.isDo());
1063:       assertFalse(node0.isNew());
1064:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1065:       assertNotSame(node0, node1);
1066:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1067:       assertEquals(50, Node.FREE_CALL);
1068:       assertEquals(57, Node.REFLECTED_OBJECT);
1069:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1070:       assertEquals(52, Node.LENGTH);
1071:       assertEquals(8, Node.FLAG_NO_THROWS);
1072:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1073:       assertEquals(55, Node.INFERRED_FUNCTION);
1074:       assertEquals(39, Node.EMPTY_BLOCK);
1075:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1076:       assertEquals(1, Node.DECR_FLAG);
1077:       assertEquals(49, Node.DIRECT_EVAL);
1078:       assertEquals(36, Node.QUOTED_PROP);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(48, Node.DIRECTIVES);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1083:       assertEquals(37, Node.OPT_ARG_NAME);
1084:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1085:       assertEquals(4095, Node.COLUMN_MASK);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1088:       assertEquals(56, Node.CHANGE_TIME);
1089:       assertEquals(47, Node.IS_DISPATCHER);
1090:       assertEquals(32, Node.INCRDECR_PROP);
1091:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1092:       assertEquals(29, Node.JSDOC_INFO_PROP);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(43, Node.IS_CONSTANT_NAME);
1096:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1097:       assertEquals(57, Node.LAST_PROP);
1098:       assertEquals(46, Node.IS_NAMESPACE);
1099:       assertEquals(54, Node.SLASH_V);
1100:       assertEquals(2, Node.POST_FLAG);
1101:       assertEquals(40, Node.ORIGINALNAME_PROP);
1102:       
1103:       boolean boolean4 = node1.isString();
1104:       assertTrue(boolean4 == boolean3);
1105:       assertTrue(boolean4 == boolean1);
1106:       assertTrue(boolean4 == boolean2);
1107:       assertFalse(boolean4 == boolean0);
1108:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1109:       assertTrue(immutableList0.equals((Object)immutableList2));
1110:       assertTrue(immutableList0.equals((Object)immutableList1));
1111:       assertFalse(node0.equals((Object)node1));
1112:       assertFalse(node1.equals((Object)node0));
1113:       assertFalse(boolean4);
1114:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1115:       assertTrue(arrayList0.isEmpty());
1116:       assertEquals(0, arrayList0.size());
1117:       assertFalse(listIterator0.hasPrevious());
1118:       assertFalse(listIterator0.hasNext());
1119:       assertEquals(0, immutableList0.size());
1120:       assertFalse(node0.isIn());
1121:       assertFalse(node0.isSwitch());
1122:       assertFalse(node0.isNE());
1123:       assertFalse(node0.isIf());
1124:       assertFalse(node0.isDelProp());
1125:       assertFalse(node0.isFor());
1126:       assertFalse(node0.isGetterDef());
1127:       assertFalse(node0.isHook());
1128:       assertEquals((-1), node0.getCharno());
1129:       assertFalse(node0.isDebugger());
1130:       assertFalse(node0.isThis());
1131:       assertFalse(node0.isString());
1132:       assertFalse(node0.isTry());
1133:       assertFalse(node0.isGetProp());
1134:       assertFalse(node0.isCase());
1135:       assertFalse(node0.isCatch());
1136:       assertFalse(node0.isObjectLit());
1137:       assertTrue(node0.isParamList());
1138:       assertFalse(node0.isInstanceOf());
1139:       assertFalse(node0.isAnd());
1140:       assertFalse(node0.isWith());
1141:       assertFalse(node0.isNot());
1142:       assertFalse(node0.isFunction());
1143:       assertFalse(node0.isRegExp());
1144:       assertFalse(node0.isCast());
1145:       assertFalse(node0.isFalse());
1146:       assertFalse(node0.isThrow());
1147:       assertFalse(node0.isInc());
1148:       assertFalse(node0.isSetterDef());
1149:       assertFalse(node0.hasMoreThanOneChild());
1150:       assertFalse(node0.isContinue());
1151:       assertFalse(node0.isWhile());
1152:       assertFalse(node0.isReturn());
1153:       assertFalse(node0.isOr());
1154:       assertFalse(node0.isLabel());
1155:       assertFalse(node0.isTypeOf());
1156:       assertEquals((-1), node0.getLineno());
1157:       assertFalse(node0.isLabelName());
1158:       assertFalse(node0.isGetElem());
1159:       assertFalse(node0.isCall());
1160:       assertFalse(node0.isStringKey());
1161:       assertFalse(node0.isAssign());
1162:       assertFalse(node0.isBlock());
1163:       assertFalse(node0.isDec());
1164:       assertEquals((-1), node0.getSourcePosition());
1165:       assertFalse(node0.hasChildren());
1166:       assertFalse(node0.isScript());
1167:       assertFalse(node0.isNumber());
1168:       assertFalse(node0.hasOneChild());
1169:       assertEquals(0, node0.getChildCount());
1170:       assertFalse(node0.isComma());
1171:       assertFalse(node0.isTrue());
1172:       assertFalse(node0.isVoid());
1173:       assertFalse(node0.isNull());
1174:       assertFalse(node0.isExprResult());
1175:       assertFalse(node0.isName());
1176:       assertFalse(node0.isArrayLit());
1177:       assertFalse(node0.isBreak());
1178:       assertFalse(node0.isVar());
1179:       assertFalse(node0.isDefaultCase());
1180:       assertFalse(node0.isAssignAdd());
1181:       assertEquals(83, node0.getType());
1182:       assertFalse(node0.isEmpty());
1183:       assertFalse(node0.isAdd());
1184:       assertFalse(node0.isDo());
1185:       assertFalse(node0.isNew());
1186:       assertFalse(node1.isArrayLit());
1187:       assertFalse(node1.isDelProp());
1188:       assertFalse(node1.isTry());
1189:       assertFalse(node1.isVoid());
1190:       assertFalse(node1.isRegExp());
1191:       assertFalse(node1.isDefaultCase());
1192:       assertTrue(node1.hasOneChild());
1193:       assertFalse(node1.isFor());
1194:       assertEquals(1, node1.getChildCount());
1195:       assertFalse(node1.isFunction());
1196:       assertFalse(node1.isCase());
1197:       assertFalse(node1.isSwitch());
1198:       assertFalse(node1.isParamList());
1199:       assertFalse(node1.isString());
1200:       assertFalse(node1.isDebugger());
1201:       assertFalse(node1.isGetterDef());
1202:       assertFalse(node1.isHook());
1203:       assertEquals(11616303, node1.getSourcePosition());
1204:       assertFalse(node1.isThrow());
1205:       assertFalse(node1.isThis());
1206:       assertFalse(node1.isBlock());
1207:       assertTrue(node1.isReturn());
1208:       assertFalse(node1.isFalse());
1209:       assertFalse(node1.isContinue());
1210:       assertFalse(node1.isInstanceOf());
1211:       assertFalse(node1.isIn());
1212:       assertFalse(node1.hasMoreThanOneChild());
1213:       assertFalse(node1.isCatch());
1214:       assertTrue(node1.hasChildren());
1215:       assertFalse(node1.isIf());
1216:       assertFalse(node1.isSetterDef());
1217:       assertFalse(node1.isInc());
1218:       assertFalse(node1.isNE());
1219:       assertEquals(2836, node1.getLineno());
1220:       assertFalse(node1.isCast());
1221:       assertFalse(node1.isGetElem());
1222:       assertFalse(node1.isLabelName());
1223:       assertFalse(node1.isTypeOf());
1224:       assertFalse(node1.isExprResult());
1225:       assertFalse(node1.isLabel());
1226:       assertFalse(node1.isWith());
1227:       assertFalse(node1.isAssign());
1228:       assertFalse(node1.isDec());
1229:       assertFalse(node1.isAnd());
1230:       assertFalse(node1.isGetProp());
1231:       assertFalse(node1.isNumber());
1232:       assertFalse(node1.isScript());
1233:       assertFalse(node1.isObjectLit());
1234:       assertFalse(node1.isNot());
1235:       assertFalse(node1.isCall());
1236:       assertFalse(node1.isStringKey());
1237:       assertFalse(node1.isVar());
1238:       assertFalse(node1.isName());
1239:       assertFalse(node1.isNew());
1240:       assertFalse(node1.isAdd());
1241:       assertEquals(4, node1.getType());
1242:       assertFalse(node1.isBreak());
1243:       assertFalse(node1.isWhile());
1244:       assertEquals(47, node1.getCharno());
1245:       assertFalse(node1.isComma());
1246:       assertFalse(node1.isAssignAdd());
1247:       assertFalse(node1.isDo());
1248:       assertFalse(node1.isNull());
1249:       assertFalse(node1.isTrue());
1250:       assertFalse(node1.isEmpty());
1251:       assertFalse(node1.isOr());
1252:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1253:       assertNotSame(node0, node1);
1254:       assertNotSame(node1, node0);
1255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1256:       assertEquals(50, Node.FREE_CALL);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1259:       assertEquals(52, Node.LENGTH);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1262:       assertEquals(55, Node.INFERRED_FUNCTION);
1263:       assertEquals(39, Node.EMPTY_BLOCK);
1264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1265:       assertEquals(1, Node.DECR_FLAG);
1266:       assertEquals(49, Node.DIRECT_EVAL);
1267:       assertEquals(36, Node.QUOTED_PROP);
1268:       assertEquals(12, Node.COLUMN_BITS);
1269:       assertEquals(48, Node.DIRECTIVES);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1272:       assertEquals(37, Node.OPT_ARG_NAME);
1273:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1274:       assertEquals(4095, Node.COLUMN_MASK);
1275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1277:       assertEquals(56, Node.CHANGE_TIME);
1278:       assertEquals(47, Node.IS_DISPATCHER);
1279:       assertEquals(32, Node.INCRDECR_PROP);
1280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1281:       assertEquals(29, Node.JSDOC_INFO_PROP);
1282:       assertEquals(53, Node.INPUT_ID);
1283:       assertEquals(30, Node.VAR_ARGS_NAME);
1284:       assertEquals(43, Node.IS_CONSTANT_NAME);
1285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1286:       assertEquals(57, Node.LAST_PROP);
1287:       assertEquals(46, Node.IS_NAMESPACE);
1288:       assertEquals(54, Node.SLASH_V);
1289:       assertEquals(2, Node.POST_FLAG);
1290:       assertEquals(40, Node.ORIGINALNAME_PROP);
1291:       assertEquals(1, Node.DECR_FLAG);
1292:       assertEquals(32, Node.INCRDECR_PROP);
1293:       assertEquals(49, Node.DIRECT_EVAL);
1294:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1295:       assertEquals(37, Node.OPT_ARG_NAME);
1296:       assertEquals(54, Node.SLASH_V);
1297:       assertEquals(56, Node.CHANGE_TIME);
1298:       assertEquals(52, Node.LENGTH);
1299:       assertEquals(46, Node.IS_NAMESPACE);
1300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1301:       assertEquals(57, Node.REFLECTED_OBJECT);
1302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1306:       assertEquals(12, Node.COLUMN_BITS);
1307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1309:       assertEquals(55, Node.INFERRED_FUNCTION);
1310:       assertEquals(4095, Node.COLUMN_MASK);
1311:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1312:       assertEquals(8, Node.FLAG_NO_THROWS);
1313:       assertEquals(39, Node.EMPTY_BLOCK);
1314:       assertEquals(48, Node.DIRECTIVES);
1315:       assertEquals(43, Node.IS_CONSTANT_NAME);
1316:       assertEquals(50, Node.FREE_CALL);
1317:       assertEquals(36, Node.QUOTED_PROP);
1318:       assertEquals(40, Node.ORIGINALNAME_PROP);
1319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1320:       assertEquals(29, Node.JSDOC_INFO_PROP);
1321:       assertEquals(53, Node.INPUT_ID);
1322:       assertEquals(2, Node.POST_FLAG);
1323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1324:       assertEquals(57, Node.LAST_PROP);
1325:       assertEquals(30, Node.VAR_ARGS_NAME);
1326:       assertEquals(47, Node.IS_DISPATCHER);
1327:       
1328:       node1.removeChild(node0);
1329:       assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
1330:       assertTrue(immutableList0.equals((Object)immutableList2));
1331:       assertTrue(immutableList0.equals((Object)immutableList1));
1332:       assertFalse(node0.equals((Object)node1));
1333:       assertFalse(node1.equals((Object)node0));
1334:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1335:       assertTrue(arrayList0.isEmpty());
1336:       assertEquals(0, arrayList0.size());
1337:       assertFalse(listIterator0.hasPrevious());
1338:       assertFalse(listIterator0.hasNext());
1339:       assertEquals(0, immutableList0.size());
1340:       assertFalse(node0.isIn());
1341:       assertFalse(node0.isSwitch());
1342:       assertFalse(node0.isNE());
1343:       assertFalse(node0.isIf());
1344:       assertFalse(node0.isDelProp());
1345:       assertFalse(node0.isFor());
1346:       assertFalse(node0.isGetterDef());
1347:       assertFalse(node0.isHook());
1348:       assertEquals((-1), node0.getCharno());
1349:       assertFalse(node0.isDebugger());
1350:       assertFalse(node0.isThis());
1351:       assertFalse(node0.isString());
1352:       assertFalse(node0.isTry());
1353:       assertFalse(node0.isGetProp());
1354:       assertFalse(node0.isCase());
1355:       assertFalse(node0.isCatch());
1356:       assertFalse(node0.isObjectLit());
1357:       assertTrue(node0.isParamList());
1358:       assertFalse(node0.isInstanceOf());
1359:       assertFalse(node0.isAnd());
1360:       assertFalse(node0.isWith());
1361:       assertFalse(node0.isNot());
1362:       assertFalse(node0.isFunction());
1363:       assertFalse(node0.isRegExp());
1364:       assertFalse(node0.isCast());
1365:       assertFalse(node0.isFalse());
1366:       assertFalse(node0.isThrow());
1367:       assertFalse(node0.isInc());
1368:       assertFalse(node0.isSetterDef());
1369:       assertFalse(node0.hasMoreThanOneChild());
1370:       assertFalse(node0.isContinue());
1371:       assertFalse(node0.isWhile());
1372:       assertFalse(node0.isReturn());
1373:       assertFalse(node0.isOr());
1374:       assertFalse(node0.isLabel());
1375:       assertFalse(node0.isTypeOf());
1376:       assertEquals((-1), node0.getLineno());
1377:       assertFalse(node0.isLabelName());
1378:       assertFalse(node0.isGetElem());
1379:       assertFalse(node0.isCall());
1380:       assertFalse(node0.isStringKey());
1381:       assertFalse(node0.isAssign());
1382:       assertFalse(node0.isBlock());
1383:       assertFalse(node0.isDec());
1384:       assertEquals((-1), node0.getSourcePosition());
1385:       assertFalse(node0.hasChildren());
1386:       assertFalse(node0.isScript());
1387:       assertFalse(node0.isNumber());
1388:       assertFalse(node0.hasOneChild());
1389:       assertEquals(0, node0.getChildCount());
1390:       assertFalse(node0.isComma());
1391:       assertFalse(node0.isTrue());
1392:       assertFalse(node0.isVoid());
1393:       assertFalse(node0.isNull());
1394:       assertFalse(node0.isExprResult());
1395:       assertFalse(node0.isName());
1396:       assertFalse(node0.isArrayLit());
1397:       assertFalse(node0.isBreak());
1398:       assertFalse(node0.isVar());
1399:       assertFalse(node0.isDefaultCase());
1400:       assertFalse(node0.isAssignAdd());
1401:       assertEquals(83, node0.getType());
1402:       assertFalse(node0.isEmpty());
1403:       assertFalse(node0.isAdd());
1404:       assertFalse(node0.isDo());
1405:       assertFalse(node0.isNew());
1406:       assertFalse(node1.isArrayLit());
1407:       assertFalse(node1.isDelProp());
1408:       assertFalse(node1.isTry());
1409:       assertFalse(node1.isVoid());
1410:       assertFalse(node1.isRegExp());
1411:       assertFalse(node1.isDefaultCase());
1412:       assertFalse(node1.isFor());
1413:       assertFalse(node1.isFunction());
1414:       assertFalse(node1.isCase());
1415:       assertFalse(node1.isSwitch());
1416:       assertFalse(node1.isParamList());
1417:       assertFalse(node1.isString());
1418:       assertFalse(node1.isDebugger());
1419:       assertFalse(node1.isGetterDef());
1420:       assertFalse(node1.isHook());
1421:       assertEquals(11616303, node1.getSourcePosition());
1422:       assertFalse(node1.isThrow());
1423:       assertFalse(node1.isThis());
1424:       assertFalse(node1.isBlock());
1425:       assertTrue(node1.isReturn());
1426:       assertFalse(node1.isFalse());
1427:       assertFalse(node1.isContinue());
1428:       assertFalse(node1.isInstanceOf());
1429:       assertFalse(node1.isIn());
1430:       assertFalse(node1.hasMoreThanOneChild());
1431:       assertFalse(node1.isCatch());
1432:       assertFalse(node1.isIf());
1433:       assertFalse(node1.isSetterDef());
1434:       assertFalse(node1.isInc());
1435:       assertFalse(node1.isNE());
1436:       assertEquals(2836, node1.getLineno());
1437:       assertFalse(node1.hasOneChild());
1438:       assertFalse(node1.isCast());
1439:       assertFalse(node1.isGetElem());
1440:       assertFalse(node1.isLabelName());
1441:       assertFalse(node1.isTypeOf());
1442:       assertFalse(node1.hasChildren());
1443:       assertFalse(node1.isExprResult());
1444:       assertFalse(node1.isLabel());
1445:       assertFalse(node1.isWith());
1446:       assertFalse(node1.isAssign());
1447:       assertFalse(node1.isDec());
1448:       assertFalse(node1.isAnd());
1449:       assertFalse(node1.isGetProp());
1450:       assertFalse(node1.isNumber());
1451:       assertFalse(node1.isScript());
1452:       assertFalse(node1.isObjectLit());
1453:       assertFalse(node1.isNot());
1454:       assertFalse(node1.isCall());
1455:       assertFalse(node1.isStringKey());
1456:       assertFalse(node1.isVar());
1457:       assertFalse(node1.isName());
1458:       assertFalse(node1.isNew());
1459:       assertFalse(node1.isAdd());
1460:       assertEquals(4, node1.getType());
1461:       assertFalse(node1.isBreak());
1462:       assertFalse(node1.isWhile());
1463:       assertEquals(47, node1.getCharno());
1464:       assertFalse(node1.isComma());
1465:       assertEquals(0, node1.getChildCount());
1466:       assertFalse(node1.isAssignAdd());
1467:       assertFalse(node1.isDo());
1468:       assertFalse(node1.isNull());
1469:       assertFalse(node1.isTrue());
1470:       assertFalse(node1.isEmpty());
1471:       assertFalse(node1.isOr());
1472:       assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
1473:       assertNotSame(node0, node1);
1474:       assertNotSame(node1, node0);
1475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1476:       assertEquals(50, Node.FREE_CALL);
1477:       assertEquals(57, Node.REFLECTED_OBJECT);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(52, Node.LENGTH);
1480:       assertEquals(8, Node.FLAG_NO_THROWS);
1481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(39, Node.EMPTY_BLOCK);
1484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1485:       assertEquals(1, Node.DECR_FLAG);
1486:       assertEquals(49, Node.DIRECT_EVAL);
1487:       assertEquals(36, Node.QUOTED_PROP);
1488:       assertEquals(12, Node.COLUMN_BITS);
1489:       assertEquals(48, Node.DIRECTIVES);
1490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1491:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1492:       assertEquals(37, Node.OPT_ARG_NAME);
1493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1494:       assertEquals(4095, Node.COLUMN_MASK);
1495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1496:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1497:       assertEquals(56, Node.CHANGE_TIME);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(32, Node.INCRDECR_PROP);
1500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1501:       assertEquals(29, Node.JSDOC_INFO_PROP);
1502:       assertEquals(53, Node.INPUT_ID);
1503:       assertEquals(30, Node.VAR_ARGS_NAME);
1504:       assertEquals(43, Node.IS_CONSTANT_NAME);
1505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1506:       assertEquals(57, Node.LAST_PROP);
1507:       assertEquals(46, Node.IS_NAMESPACE);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(2, Node.POST_FLAG);
1510:       assertEquals(40, Node.ORIGINALNAME_PROP);
1511:       assertEquals(1, Node.DECR_FLAG);
1512:       assertEquals(32, Node.INCRDECR_PROP);
1513:       assertEquals(49, Node.DIRECT_EVAL);
1514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1515:       assertEquals(37, Node.OPT_ARG_NAME);
1516:       assertEquals(54, Node.SLASH_V);
1517:       assertEquals(56, Node.CHANGE_TIME);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(46, Node.IS_NAMESPACE);
1520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1521:       assertEquals(57, Node.REFLECTED_OBJECT);
1522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1524:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1526:       assertEquals(12, Node.COLUMN_BITS);
1527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1529:       assertEquals(55, Node.INFERRED_FUNCTION);
1530:       assertEquals(4095, Node.COLUMN_MASK);
1531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1532:       assertEquals(8, Node.FLAG_NO_THROWS);
1533:       assertEquals(39, Node.EMPTY_BLOCK);
1534:       assertEquals(48, Node.DIRECTIVES);
1535:       assertEquals(43, Node.IS_CONSTANT_NAME);
1536:       assertEquals(50, Node.FREE_CALL);
1537:       assertEquals(36, Node.QUOTED_PROP);
1538:       assertEquals(40, Node.ORIGINALNAME_PROP);
1539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1540:       assertEquals(29, Node.JSDOC_INFO_PROP);
1541:       assertEquals(53, Node.INPUT_ID);
1542:       assertEquals(2, Node.POST_FLAG);
1543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1544:       assertEquals(57, Node.LAST_PROP);
1545:       assertEquals(30, Node.VAR_ARGS_NAME);
1546:       assertEquals(47, Node.IS_DISPATCHER);
1547:   }
1548: }
RegularFileObject[/tmp/EvoSuite_357_1628159322844/com/google/javascript/rhino/Node_357_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_357_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_357_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_357_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.AbstractIndexedListIterator",
336:       "com.google.common.collect.Iterators$11",
337:       "com.google.common.collect.Platform",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.jstype.TernaryValue",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
361:     );
362:   }
363: }

[MASTER] 10:28:43.104 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(simpleErrorReporter1);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<TemplatizedType> arrayList0 = new ArrayList<TemplatizedType>();
assertNotNull(arrayList0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());

ListIterator<TemplatizedType> listIterator0 = arrayList0.listIterator(0);
assertNotNull(listIterator0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
assertNotNull(immutableList0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = new Node(4, node0, 2836, 47);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertTrue(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(4, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertEquals(47, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node1.isLabel();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertTrue(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(4, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertEquals(47, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

ImmutableList<JSType> immutableList1 = immutableList0.reverse();
assertTrue(immutableList1.equals((Object)immutableList0));
assertNotNull(immutableList1);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());

ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
assertTrue(immutableList0.equals((Object)immutableList1));
assertTrue(immutableList1.equals((Object)immutableList0));
assertTrue(immutableList2.equals((Object)immutableList0));
assertNotNull(immutableList2);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertEquals(0, immutableList1.size());
assertEquals(0, immutableList2.size());
assertSame(immutableList1, immutableList2);
assertSame(immutableList2, immutableList1);

boolean boolean2 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertTrue(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(4, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertEquals(47, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

int int0 = Node.COLUMN_MASK;
assertEquals(4095, int0);

boolean boolean3 = node0.isNull();
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean4 = node1.isString();
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertTrue(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertEquals(2836, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(4, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertEquals(47, node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

node1.removeChild(node0);
assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
assertTrue(immutableList0.equals((Object)immutableList2));
assertTrue(immutableList0.equals((Object)immutableList1));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasPrevious());
assertFalse(listIterator0.hasNext());
assertEquals(0, immutableList0.size());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertEquals(11616303, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertTrue(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertEquals(2836, node1.getLineno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(4, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertEquals(47, node1.getCharno());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/14
* Done!

* Computation finished
