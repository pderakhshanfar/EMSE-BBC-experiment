* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 11441
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3833910649
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:44:04.934 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:44:50.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:44:52.242 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:49:23.473 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 687 generations, 284548 statements, best individual has fitness: 2442.0
* Minimizing test suite
[MASTER] 10:55:39.571 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 807
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 639
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 111
* Number of covered goals: 111
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 530
* Number of covered goals: 485
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 4536
* Number of covered goals: 2543
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 605
* Generated 1291 tests with total length 13514
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:57:15.670 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6800833333333334% of time used, but only 102/1291 tests minimized), falling back to using all assertions
[MASTER] 10:57:34.924 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 10:57:48.814 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 10:57:56.531 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_168_1628161076510/com/google/javascript/rhino/Node_168_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_168_1628161076510/com/google/javascript/rhino/Node_168_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:56.531 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:56.531 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:56.533 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:57:56.534 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_168_1628161076510/com/google/javascript/rhino/Node_168_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:56 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_168_tmp__ESTest extends Node_168_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(103, 103, 103);
21:       assertEquals(40, Node.ORIGINALNAME_PROP);
22:       assertEquals(57, Node.REFLECTED_OBJECT);
23:       assertEquals(54, Node.SLASH_V);
24:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(4095, Node.COLUMN_MASK);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(43, Node.IS_CONSTANT_NAME);
36:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
37:       assertEquals(50, Node.FREE_CALL);
38:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(56, Node.CHANGE_TIME);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(47, Node.IS_DISPATCHER);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(39, Node.EMPTY_BLOCK);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
54:       assertEquals(29, Node.JSDOC_INFO_PROP);
55:       assertEquals(52, Node.LENGTH);
56:       assertEquals(53, Node.INPUT_ID);
57:       assertFalse(node0.isNot());
58:       assertEquals(103, node0.getCharno());
59:       assertFalse(node0.isAnd());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isLabelName());
65:       assertFalse(node0.isThrow());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isContinue());
69:       assertFalse(node0.isDo());
70:       assertEquals(103, node0.getType());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isString());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isTypeOf());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isTry());
92:       assertFalse(node0.isSetterDef());
93:       assertFalse(node0.isTrue());
94:       assertFalse(node0.isDebugger());
95:       assertFalse(node0.isStringKey());
96:       assertFalse(node0.isEmpty());
97:       assertEquals(103, node0.getLineno());
98:       assertFalse(node0.isArrayLit());
99:       assertFalse(node0.isVar());
100:       assertFalse(node0.isParamList());
101:       assertEquals(0, node0.getChildCount());
102:       assertFalse(node0.isFunction());
103:       assertFalse(node0.isCase());
104:       assertFalse(node0.isSwitch());
105:       assertFalse(node0.isInc());
106:       assertEquals(421991, node0.getSourcePosition());
107:       assertFalse(node0.isNumber());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isIn());
110:       assertFalse(node0.isFor());
111:       assertFalse(node0.hasOneChild());
112:       assertFalse(node0.isHook());
113:       assertFalse(node0.isNE());
114:       assertFalse(node0.isIf());
115:       assertFalse(node0.isBlock());
116:       assertFalse(node0.isThis());
117:       assertTrue(node0.isDec());
118:       assertFalse(node0.isRegExp());
119:       assertFalse(node0.isInstanceOf());
120:       assertFalse(node0.isCatch());
121:       assertFalse(node0.hasMoreThanOneChild());
122:       assertFalse(node0.isWith());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(54, Node.SLASH_V);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(46, Node.IS_NAMESPACE);
141:       assertEquals(43, Node.IS_CONSTANT_NAME);
142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
143:       assertEquals(50, Node.FREE_CALL);
144:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(56, Node.CHANGE_TIME);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(47, Node.IS_DISPATCHER);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(55, Node.INFERRED_FUNCTION);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(36, Node.QUOTED_PROP);
159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
160:       assertEquals(29, Node.JSDOC_INFO_PROP);
161:       assertEquals(52, Node.LENGTH);
162:       assertEquals(53, Node.INPUT_ID);
163:       assertFalse(node0.isNot());
164:       assertEquals(103, node0.getCharno());
165:       assertFalse(node0.isAnd());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isScript());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isContinue());
175:       assertFalse(node0.isDo());
176:       assertEquals(103, node0.getType());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isNew());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isString());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isGetElem());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isCall());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.hasChildren());
189:       assertFalse(node0.isNull());
190:       assertFalse(node0.isDelProp());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isExprResult());
194:       assertFalse(node0.isComma());
195:       assertFalse(node0.isTypeOf());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isTry());
198:       assertFalse(node0.isSetterDef());
199:       assertFalse(node0.isTrue());
200:       assertFalse(node0.isDebugger());
201:       assertFalse(node0.isStringKey());
202:       assertFalse(node0.isEmpty());
203:       assertEquals(103, node0.getLineno());
204:       assertFalse(node0.isArrayLit());
205:       assertFalse(node0.isVar());
206:       assertFalse(node0.isParamList());
207:       assertEquals(0, node0.getChildCount());
208:       assertFalse(node0.isFunction());
209:       assertFalse(node0.isCase());
210:       assertFalse(node0.isSwitch());
211:       assertFalse(node0.isInc());
212:       assertEquals(421991, node0.getSourcePosition());
213:       assertFalse(node0.isNumber());
214:       assertFalse(node0.isGetterDef());
215:       assertFalse(node0.isIn());
216:       assertFalse(node0.isFor());
217:       assertFalse(node0.hasOneChild());
218:       assertFalse(node0.isHook());
219:       assertFalse(node0.isNE());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isBlock());
222:       assertFalse(node0.isThis());
223:       assertTrue(node0.isDec());
224:       assertFalse(node0.isRegExp());
225:       assertFalse(node0.isInstanceOf());
226:       assertFalse(node0.isCatch());
227:       assertFalse(node0.hasMoreThanOneChild());
228:       assertFalse(node0.isWith());
229:       assertNotNull(iterable0);
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_168_1628161076510/com/google/javascript/rhino/Node_168_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_168_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_168_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_168_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.Platform",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.JSDocInfo$Marker",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 10:57:56.536 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(103, 103, 103);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isNot());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertEquals(103, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertEquals(103, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals(421991, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertTrue(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isNot());
assertEquals(103, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertEquals(103, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertEquals(103, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals(421991, node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertTrue(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNotNull(iterable0);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/23
* Done!

* Computation finished
