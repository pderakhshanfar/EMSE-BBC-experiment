* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 2528
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 4237659525
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:34.199 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:45:39.024 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V
[MASTER] 09:45:39.028 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:39.028 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:39.038 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5145: com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z:1517 - ReplaceComparisonOperator != -> <
[MASTER] 09:45:39.047 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4914: com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;:1334 - ReplaceComparisonOperator <= -> <
[MASTER] 09:45:39.077 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:39.101 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:39.101 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:39.111 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true
[MASTER] 09:45:39.126 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:39.132 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch in context: com.google.javascript.rhino.Node:<init>(I[Lcom/google/javascript/rhino/Node;II)V
[MASTER] 09:48:47.034 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 09:50:47.091 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 09:50:56.030 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumElementType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 09:51:17.237 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
Number of times BBC is called in total: 0
* Search finished after 605s and 714 generations, 304216 statements, best individual has fitness: 2586.0
* Minimizing test suite
[MASTER] 09:56:57.671 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 801
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 622
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 476
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 4536
* Number of covered goals: 2443
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 590
* Generated 1185 tests with total length 12797
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:58:15.395 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6923% of time used, but only 103/1185 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 19%
[MASTER] 09:58:34.005 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 09:58:47.310 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 09:58:52.394 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_126_1628157532246/com/google/javascript/rhino/Node_126_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_126_1628157532246/com/google/javascript/rhino/Node_126_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:52.394 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:52.395 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:52.397 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 994
[MASTER] 09:58:52.399 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_126_1628157532246/com/google/javascript/rhino/Node_126_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.StaticSourceFile;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_126_tmp__ESTest extends Node_126_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("l:kU9Ci.A");
24:       assertNotNull(node0);
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isCall());
27:       assertFalse(node0.isVar());
28:       assertFalse(node0.isSetterDef());
29:       assertFalse(node0.isBlock());
30:       assertFalse(node0.isAdd());
31:       assertFalse(node0.isDo());
32:       assertFalse(node0.isWhile());
33:       assertFalse(node0.isNew());
34:       assertTrue(node0.isString());
35:       assertFalse(node0.isContinue());
36:       assertEquals(40, node0.getType());
37:       assertFalse(node0.isLabel());
38:       assertEquals(0, node0.getChildCount());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isDebugger());
41:       assertFalse(node0.isParamList());
42:       assertFalse(node0.isLabelName());
43:       assertFalse(node0.isArrayLit());
44:       assertFalse(node0.isGetElem());
45:       assertFalse(node0.isEmpty());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isDec());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.hasChildren());
50:       assertFalse(node0.isAssignAdd());
51:       assertFalse(node0.isDefaultCase());
52:       assertFalse(node0.isReturn());
53:       assertFalse(node0.isOr());
54:       assertFalse(node0.isTrue());
55:       assertFalse(node0.isNull());
56:       assertFalse(node0.isExprResult());
57:       assertFalse(node0.isBreak());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isComma());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isThis());
67:       assertFalse(node0.isGetProp());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isAnd());
70:       assertFalse(node0.isNot());
71:       assertFalse(node0.isObjectLit());
72:       assertFalse(node0.isSwitch());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isCast());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isNumber());
77:       assertFalse(node0.isGetterDef());
78:       assertFalse(node0.isFunction());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isCatch());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isIn());
87:       assertFalse(node0.isRegExp());
88:       assertFalse(node0.isNE());
89:       assertEquals((-1), node0.getLineno());
90:       assertFalse(node0.isIf());
91:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
96:       assertEquals(4095, Node.COLUMN_MASK);
97:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
103:       assertEquals(1, Node.DECR_FLAG);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(32, Node.INCRDECR_PROP);
109:       assertEquals(46, Node.IS_NAMESPACE);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(2, Node.POST_FLAG);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(47, Node.IS_DISPATCHER);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(55, Node.INFERRED_FUNCTION);
124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(52, Node.LENGTH);
127:       
128:       node0.setVarArgs(true);
129:       assertFalse(node0.isStringKey());
130:       assertFalse(node0.isCall());
131:       assertFalse(node0.isVar());
132:       assertFalse(node0.isSetterDef());
133:       assertFalse(node0.isBlock());
134:       assertFalse(node0.isAdd());
135:       assertFalse(node0.isDo());
136:       assertFalse(node0.isWhile());
137:       assertFalse(node0.isNew());
138:       assertTrue(node0.isString());
139:       assertFalse(node0.isContinue());
140:       assertEquals(40, node0.getType());
141:       assertFalse(node0.isLabel());
142:       assertEquals(0, node0.getChildCount());
143:       assertEquals((-1), node0.getSourcePosition());
144:       assertFalse(node0.isDebugger());
145:       assertFalse(node0.isParamList());
146:       assertFalse(node0.isLabelName());
147:       assertFalse(node0.isArrayLit());
148:       assertFalse(node0.isGetElem());
149:       assertFalse(node0.isEmpty());
150:       assertFalse(node0.isAssign());
151:       assertFalse(node0.isDec());
152:       assertFalse(node0.isTypeOf());
153:       assertFalse(node0.hasChildren());
154:       assertFalse(node0.isAssignAdd());
155:       assertFalse(node0.isDefaultCase());
156:       assertFalse(node0.isReturn());
157:       assertFalse(node0.isOr());
158:       assertFalse(node0.isTrue());
159:       assertFalse(node0.isNull());
160:       assertFalse(node0.isExprResult());
161:       assertFalse(node0.isBreak());
162:       assertFalse(node0.isVoid());
163:       assertFalse(node0.isDelProp());
164:       assertFalse(node0.isName());
165:       assertFalse(node0.isThrow());
166:       assertFalse(node0.isHook());
167:       assertFalse(node0.isFalse());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isInc());
170:       assertFalse(node0.isThis());
171:       assertFalse(node0.isGetProp());
172:       assertFalse(node0.isCase());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isNot());
175:       assertFalse(node0.isObjectLit());
176:       assertFalse(node0.isSwitch());
177:       assertEquals((-1), node0.getCharno());
178:       assertFalse(node0.isCast());
179:       assertFalse(node0.isFor());
180:       assertFalse(node0.isNumber());
181:       assertFalse(node0.isGetterDef());
182:       assertFalse(node0.isFunction());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.hasOneChild());
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isInstanceOf());
189:       assertFalse(node0.isWith());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isNE());
193:       assertEquals((-1), node0.getLineno());
194:       assertFalse(node0.isIf());
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
202:       assertEquals(40, Node.ORIGINALNAME_PROP);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(32, Node.INCRDECR_PROP);
213:       assertEquals(46, Node.IS_NAMESPACE);
214:       assertEquals(12, Node.COLUMN_BITS);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(2, Node.POST_FLAG);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(55, Node.INFERRED_FUNCTION);
228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(52, Node.LENGTH);
231:       
232:       boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
233:       assertTrue(boolean0);
234:       assertFalse(node0.isStringKey());
235:       assertFalse(node0.isCall());
236:       assertFalse(node0.isVar());
237:       assertFalse(node0.isSetterDef());
238:       assertFalse(node0.isBlock());
239:       assertFalse(node0.isAdd());
240:       assertFalse(node0.isDo());
241:       assertFalse(node0.isWhile());
242:       assertFalse(node0.isNew());
243:       assertTrue(node0.isString());
244:       assertFalse(node0.isContinue());
245:       assertEquals(40, node0.getType());
246:       assertFalse(node0.isLabel());
247:       assertEquals(0, node0.getChildCount());
248:       assertEquals((-1), node0.getSourcePosition());
249:       assertFalse(node0.isDebugger());
250:       assertFalse(node0.isParamList());
251:       assertFalse(node0.isLabelName());
252:       assertFalse(node0.isArrayLit());
253:       assertFalse(node0.isGetElem());
254:       assertFalse(node0.isEmpty());
255:       assertFalse(node0.isAssign());
256:       assertFalse(node0.isDec());
257:       assertFalse(node0.isTypeOf());
258:       assertFalse(node0.hasChildren());
259:       assertFalse(node0.isAssignAdd());
260:       assertFalse(node0.isDefaultCase());
261:       assertFalse(node0.isReturn());
262:       assertFalse(node0.isOr());
263:       assertFalse(node0.isTrue());
264:       assertFalse(node0.isNull());
265:       assertFalse(node0.isExprResult());
266:       assertFalse(node0.isBreak());
267:       assertFalse(node0.isVoid());
268:       assertFalse(node0.isDelProp());
269:       assertFalse(node0.isName());
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isHook());
272:       assertFalse(node0.isFalse());
273:       assertFalse(node0.isComma());
274:       assertFalse(node0.isInc());
275:       assertFalse(node0.isThis());
276:       assertFalse(node0.isGetProp());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isNot());
280:       assertFalse(node0.isObjectLit());
281:       assertFalse(node0.isSwitch());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isCast());
284:       assertFalse(node0.isFor());
285:       assertFalse(node0.isNumber());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isFunction());
288:       assertFalse(node0.isScript());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isTry());
291:       assertFalse(node0.isCatch());
292:       assertFalse(node0.hasMoreThanOneChild());
293:       assertFalse(node0.isInstanceOf());
294:       assertFalse(node0.isWith());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isRegExp());
297:       assertFalse(node0.isNE());
298:       assertEquals((-1), node0.getLineno());
299:       assertFalse(node0.isIf());
300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
307:       assertEquals(40, Node.ORIGINALNAME_PROP);
308:       assertEquals(50, Node.FREE_CALL);
309:       assertEquals(54, Node.SLASH_V);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(49, Node.DIRECT_EVAL);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(57, Node.LAST_PROP);
317:       assertEquals(32, Node.INCRDECR_PROP);
318:       assertEquals(46, Node.IS_NAMESPACE);
319:       assertEquals(12, Node.COLUMN_BITS);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(39, Node.EMPTY_BLOCK);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertEquals(55, Node.INFERRED_FUNCTION);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(52, Node.LENGTH);
336:       
337:       InputId inputId0 = new InputId("com.google.common.collect.LinkedHashMultimap");
338:       assertNotNull(inputId0);
339:       assertEquals("com.google.common.collect.LinkedHashMultimap", inputId0.getIdName());
340:       
341:       InputId inputId1 = new InputId("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
342:       assertNotNull(inputId1);
343:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
344:       assertFalse(inputId1.equals((Object)inputId0));
345:       
346:       String string0 = inputId1.toString();
347:       assertNotNull(string0);
348:       assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string0);
349:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
350:       assertFalse(inputId1.equals((Object)inputId0));
351:       assertNotSame(inputId1, inputId0);
352:       
353:       String string1 = inputId1.toString();
354:       assertNotNull(string1);
355:       assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string1);
356:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
357:       assertFalse(inputId1.equals((Object)inputId0));
358:       assertTrue(string1.equals((Object)string0));
359:       assertNotSame(inputId1, inputId0);
360:       
361:       Node node1 = new Node(46, node0, 9, 50);
362:       assertNotNull(node1);
363:       assertFalse(node0.isStringKey());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isVar());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isBlock());
368:       assertFalse(node0.isAdd());
369:       assertFalse(node0.isDo());
370:       assertFalse(node0.isWhile());
371:       assertFalse(node0.isNew());
372:       assertTrue(node0.isString());
373:       assertFalse(node0.isContinue());
374:       assertEquals(40, node0.getType());
375:       assertFalse(node0.isLabel());
376:       assertEquals(0, node0.getChildCount());
377:       assertEquals((-1), node0.getSourcePosition());
378:       assertFalse(node0.isDebugger());
379:       assertFalse(node0.isParamList());
380:       assertFalse(node0.isLabelName());
381:       assertFalse(node0.isArrayLit());
382:       assertFalse(node0.isGetElem());
383:       assertFalse(node0.isEmpty());
384:       assertFalse(node0.isAssign());
385:       assertFalse(node0.isDec());
386:       assertFalse(node0.isTypeOf());
387:       assertFalse(node0.hasChildren());
388:       assertFalse(node0.isAssignAdd());
389:       assertFalse(node0.isDefaultCase());
390:       assertFalse(node0.isReturn());
391:       assertFalse(node0.isOr());
392:       assertFalse(node0.isTrue());
393:       assertFalse(node0.isNull());
394:       assertFalse(node0.isExprResult());
395:       assertFalse(node0.isBreak());
396:       assertFalse(node0.isVoid());
397:       assertFalse(node0.isDelProp());
398:       assertFalse(node0.isName());
399:       assertFalse(node0.isThrow());
400:       assertFalse(node0.isHook());
401:       assertFalse(node0.isFalse());
402:       assertFalse(node0.isComma());
403:       assertFalse(node0.isInc());
404:       assertFalse(node0.isThis());
405:       assertFalse(node0.isGetProp());
406:       assertFalse(node0.isCase());
407:       assertFalse(node0.isAnd());
408:       assertFalse(node0.isNot());
409:       assertFalse(node0.isObjectLit());
410:       assertFalse(node0.isSwitch());
411:       assertEquals((-1), node0.getCharno());
412:       assertFalse(node0.isCast());
413:       assertFalse(node0.isFor());
414:       assertFalse(node0.isNumber());
415:       assertFalse(node0.isGetterDef());
416:       assertFalse(node0.isFunction());
417:       assertFalse(node0.isScript());
418:       assertFalse(node0.hasOneChild());
419:       assertFalse(node0.isTry());
420:       assertFalse(node0.isCatch());
421:       assertFalse(node0.hasMoreThanOneChild());
422:       assertFalse(node0.isInstanceOf());
423:       assertFalse(node0.isWith());
424:       assertFalse(node0.isIn());
425:       assertFalse(node0.isRegExp());
426:       assertFalse(node0.isNE());
427:       assertEquals((-1), node0.getLineno());
428:       assertFalse(node0.isIf());
429:       assertFalse(node1.isCatch());
430:       assertFalse(node1.isNull());
431:       assertFalse(node1.isSetterDef());
432:       assertFalse(node1.isTrue());
433:       assertFalse(node1.isParamList());
434:       assertEquals(36914, node1.getSourcePosition());
435:       assertFalse(node1.isDebugger());
436:       assertFalse(node1.isCall());
437:       assertFalse(node1.isTry());
438:       assertFalse(node1.isName());
439:       assertFalse(node1.isVoid());
440:       assertFalse(node1.isDelProp());
441:       assertFalse(node1.isRegExp());
442:       assertFalse(node1.isWhile());
443:       assertFalse(node1.isFor());
444:       assertFalse(node1.isBlock());
445:       assertTrue(node1.hasOneChild());
446:       assertEquals(9, node1.getLineno());
447:       assertEquals(1, node1.getChildCount());
448:       assertFalse(node1.isCase());
449:       assertFalse(node1.isAssignAdd());
450:       assertFalse(node1.isDo());
451:       assertFalse(node1.isNumber());
452:       assertFalse(node1.isSwitch());
453:       assertFalse(node1.isGetterDef());
454:       assertFalse(node1.isOr());
455:       assertFalse(node1.isVar());
456:       assertFalse(node1.isArrayLit());
457:       assertFalse(node1.isStringKey());
458:       assertFalse(node1.isEmpty());
459:       assertFalse(node1.isAdd());
460:       assertFalse(node1.isNew());
461:       assertFalse(node1.isLabelName());
462:       assertFalse(node1.isDefaultCase());
463:       assertFalse(node1.isLabel());
464:       assertFalse(node1.isAnd());
465:       assertFalse(node1.isInstanceOf());
466:       assertFalse(node1.isGetProp());
467:       assertEquals(46, node1.getType());
468:       assertFalse(node1.isScript());
469:       assertFalse(node1.isObjectLit());
470:       assertFalse(node1.isNot());
471:       assertFalse(node1.isHook());
472:       assertFalse(node1.isGetElem());
473:       assertFalse(node1.isBreak());
474:       assertFalse(node1.isTypeOf());
475:       assertFalse(node1.isThis());
476:       assertFalse(node1.isExprResult());
477:       assertFalse(node1.isReturn());
478:       assertFalse(node1.isWith());
479:       assertFalse(node1.isComma());
480:       assertFalse(node1.isAssign());
481:       assertFalse(node1.isDec());
482:       assertFalse(node1.isIn());
483:       assertFalse(node1.hasMoreThanOneChild());
484:       assertFalse(node1.isContinue());
485:       assertTrue(node1.hasChildren());
486:       assertFalse(node1.isIf());
487:       assertFalse(node1.isInc());
488:       assertFalse(node1.isString());
489:       assertFalse(node1.isNE());
490:       assertFalse(node1.isThrow());
491:       assertFalse(node1.isCast());
492:       assertEquals(50, node1.getCharno());
493:       assertFalse(node1.isFalse());
494:       assertFalse(node1.isFunction());
495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
496:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
497:       assertEquals(43, Node.IS_CONSTANT_NAME);
498:       assertEquals(48, Node.DIRECTIVES);
499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
500:       assertEquals(4095, Node.COLUMN_MASK);
501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
502:       assertEquals(40, Node.ORIGINALNAME_PROP);
503:       assertEquals(50, Node.FREE_CALL);
504:       assertEquals(54, Node.SLASH_V);
505:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
507:       assertEquals(1, Node.DECR_FLAG);
508:       assertEquals(30, Node.VAR_ARGS_NAME);
509:       assertEquals(49, Node.DIRECT_EVAL);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertEquals(32, Node.INCRDECR_PROP);
513:       assertEquals(46, Node.IS_NAMESPACE);
514:       assertEquals(12, Node.COLUMN_BITS);
515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
516:       assertEquals(2, Node.POST_FLAG);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertEquals(47, Node.IS_DISPATCHER);
519:       assertEquals(57, Node.REFLECTED_OBJECT);
520:       assertEquals(56, Node.CHANGE_TIME);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(53, Node.INPUT_ID);
525:       assertEquals(36, Node.QUOTED_PROP);
526:       assertEquals(15, Node.NO_SIDE_EFFECTS);
527:       assertEquals(55, Node.INFERRED_FUNCTION);
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(29, Node.JSDOC_INFO_PROP);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(29, Node.JSDOC_INFO_PROP);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
534:       assertEquals(2, Node.POST_FLAG);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
541:       assertEquals(12, Node.COLUMN_BITS);
542:       assertEquals(4095, Node.COLUMN_MASK);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(37, Node.OPT_ARG_NAME);
545:       assertEquals(8, Node.FLAG_NO_THROWS);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(49, Node.DIRECT_EVAL);
549:       assertEquals(56, Node.CHANGE_TIME);
550:       assertEquals(40, Node.ORIGINALNAME_PROP);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
553:       assertEquals(50, Node.FREE_CALL);
554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
555:       assertEquals(52, Node.LENGTH);
556:       assertEquals(39, Node.EMPTY_BLOCK);
557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(1, Node.DECR_FLAG);
562:       assertEquals(51, Node.STATIC_SOURCE_FILE);
563:       assertEquals(30, Node.VAR_ARGS_NAME);
564:       assertEquals(54, Node.SLASH_V);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(43, Node.IS_CONSTANT_NAME);
567:       assertFalse(node1.equals((Object)node0));
568:       
569:       node1.setInputId(inputId1);
570:       assertFalse(node0.isStringKey());
571:       assertFalse(node0.isCall());
572:       assertFalse(node0.isVar());
573:       assertFalse(node0.isSetterDef());
574:       assertFalse(node0.isBlock());
575:       assertFalse(node0.isAdd());
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isWhile());
578:       assertFalse(node0.isNew());
579:       assertTrue(node0.isString());
580:       assertFalse(node0.isContinue());
581:       assertEquals(40, node0.getType());
582:       assertFalse(node0.isLabel());
583:       assertEquals(0, node0.getChildCount());
584:       assertEquals((-1), node0.getSourcePosition());
585:       assertFalse(node0.isDebugger());
586:       assertFalse(node0.isParamList());
587:       assertFalse(node0.isLabelName());
588:       assertFalse(node0.isArrayLit());
589:       assertFalse(node0.isGetElem());
590:       assertFalse(node0.isEmpty());
591:       assertFalse(node0.isAssign());
592:       assertFalse(node0.isDec());
593:       assertFalse(node0.isTypeOf());
594:       assertFalse(node0.hasChildren());
595:       assertFalse(node0.isAssignAdd());
596:       assertFalse(node0.isDefaultCase());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isOr());
599:       assertFalse(node0.isTrue());
600:       assertFalse(node0.isNull());
601:       assertFalse(node0.isExprResult());
602:       assertFalse(node0.isBreak());
603:       assertFalse(node0.isVoid());
604:       assertFalse(node0.isDelProp());
605:       assertFalse(node0.isName());
606:       assertFalse(node0.isThrow());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isFalse());
609:       assertFalse(node0.isComma());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isThis());
612:       assertFalse(node0.isGetProp());
613:       assertFalse(node0.isCase());
614:       assertFalse(node0.isAnd());
615:       assertFalse(node0.isNot());
616:       assertFalse(node0.isObjectLit());
617:       assertFalse(node0.isSwitch());
618:       assertEquals((-1), node0.getCharno());
619:       assertFalse(node0.isCast());
620:       assertFalse(node0.isFor());
621:       assertFalse(node0.isNumber());
622:       assertFalse(node0.isGetterDef());
623:       assertFalse(node0.isFunction());
624:       assertFalse(node0.isScript());
625:       assertFalse(node0.hasOneChild());
626:       assertFalse(node0.isTry());
627:       assertFalse(node0.isCatch());
628:       assertFalse(node0.hasMoreThanOneChild());
629:       assertFalse(node0.isInstanceOf());
630:       assertFalse(node0.isWith());
631:       assertFalse(node0.isIn());
632:       assertFalse(node0.isRegExp());
633:       assertFalse(node0.isNE());
634:       assertEquals((-1), node0.getLineno());
635:       assertFalse(node0.isIf());
636:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
637:       assertFalse(node1.isCatch());
638:       assertFalse(node1.isNull());
639:       assertFalse(node1.isSetterDef());
640:       assertFalse(node1.isTrue());
641:       assertFalse(node1.isParamList());
642:       assertEquals(36914, node1.getSourcePosition());
643:       assertFalse(node1.isDebugger());
644:       assertFalse(node1.isCall());
645:       assertFalse(node1.isTry());
646:       assertFalse(node1.isName());
647:       assertFalse(node1.isVoid());
648:       assertFalse(node1.isDelProp());
649:       assertFalse(node1.isRegExp());
650:       assertFalse(node1.isWhile());
651:       assertFalse(node1.isFor());
652:       assertFalse(node1.isBlock());
653:       assertTrue(node1.hasOneChild());
654:       assertEquals(9, node1.getLineno());
655:       assertEquals(1, node1.getChildCount());
656:       assertFalse(node1.isCase());
657:       assertFalse(node1.isAssignAdd());
658:       assertFalse(node1.isDo());
659:       assertFalse(node1.isNumber());
660:       assertFalse(node1.isSwitch());
661:       assertFalse(node1.isGetterDef());
662:       assertFalse(node1.isOr());
663:       assertFalse(node1.isVar());
664:       assertFalse(node1.isArrayLit());
665:       assertFalse(node1.isStringKey());
666:       assertFalse(node1.isEmpty());
667:       assertFalse(node1.isAdd());
668:       assertFalse(node1.isNew());
669:       assertFalse(node1.isLabelName());
670:       assertFalse(node1.isDefaultCase());
671:       assertFalse(node1.isLabel());
672:       assertFalse(node1.isAnd());
673:       assertFalse(node1.isInstanceOf());
674:       assertFalse(node1.isGetProp());
675:       assertEquals(46, node1.getType());
676:       assertFalse(node1.isScript());
677:       assertFalse(node1.isObjectLit());
678:       assertFalse(node1.isNot());
679:       assertFalse(node1.isHook());
680:       assertFalse(node1.isGetElem());
681:       assertFalse(node1.isBreak());
682:       assertFalse(node1.isTypeOf());
683:       assertFalse(node1.isThis());
684:       assertFalse(node1.isExprResult());
685:       assertFalse(node1.isReturn());
686:       assertFalse(node1.isWith());
687:       assertFalse(node1.isComma());
688:       assertFalse(node1.isAssign());
689:       assertFalse(node1.isDec());
690:       assertFalse(node1.isIn());
691:       assertFalse(node1.hasMoreThanOneChild());
692:       assertFalse(node1.isContinue());
693:       assertTrue(node1.hasChildren());
694:       assertFalse(node1.isIf());
695:       assertFalse(node1.isInc());
696:       assertFalse(node1.isString());
697:       assertFalse(node1.isNE());
698:       assertFalse(node1.isThrow());
699:       assertFalse(node1.isCast());
700:       assertEquals(50, node1.getCharno());
701:       assertFalse(node1.isFalse());
702:       assertFalse(node1.isFunction());
703:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
704:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
705:       assertEquals(43, Node.IS_CONSTANT_NAME);
706:       assertEquals(48, Node.DIRECTIVES);
707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
708:       assertEquals(4095, Node.COLUMN_MASK);
709:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
710:       assertEquals(40, Node.ORIGINALNAME_PROP);
711:       assertEquals(50, Node.FREE_CALL);
712:       assertEquals(54, Node.SLASH_V);
713:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
714:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
715:       assertEquals(1, Node.DECR_FLAG);
716:       assertEquals(30, Node.VAR_ARGS_NAME);
717:       assertEquals(49, Node.DIRECT_EVAL);
718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
719:       assertEquals(57, Node.LAST_PROP);
720:       assertEquals(32, Node.INCRDECR_PROP);
721:       assertEquals(46, Node.IS_NAMESPACE);
722:       assertEquals(12, Node.COLUMN_BITS);
723:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
724:       assertEquals(2, Node.POST_FLAG);
725:       assertEquals(37, Node.OPT_ARG_NAME);
726:       assertEquals(47, Node.IS_DISPATCHER);
727:       assertEquals(57, Node.REFLECTED_OBJECT);
728:       assertEquals(56, Node.CHANGE_TIME);
729:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(53, Node.INPUT_ID);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
737:       assertEquals(29, Node.JSDOC_INFO_PROP);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(29, Node.JSDOC_INFO_PROP);
740:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
742:       assertEquals(2, Node.POST_FLAG);
743:       assertEquals(53, Node.INPUT_ID);
744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
745:       assertEquals(47, Node.IS_DISPATCHER);
746:       assertEquals(32, Node.INCRDECR_PROP);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
749:       assertEquals(12, Node.COLUMN_BITS);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
752:       assertEquals(37, Node.OPT_ARG_NAME);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(48, Node.DIRECTIVES);
755:       assertEquals(36, Node.QUOTED_PROP);
756:       assertEquals(49, Node.DIRECT_EVAL);
757:       assertEquals(56, Node.CHANGE_TIME);
758:       assertEquals(40, Node.ORIGINALNAME_PROP);
759:       assertEquals(57, Node.REFLECTED_OBJECT);
760:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
761:       assertEquals(50, Node.FREE_CALL);
762:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
763:       assertEquals(52, Node.LENGTH);
764:       assertEquals(39, Node.EMPTY_BLOCK);
765:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
767:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
768:       assertEquals(57, Node.LAST_PROP);
769:       assertEquals(1, Node.DECR_FLAG);
770:       assertEquals(51, Node.STATIC_SOURCE_FILE);
771:       assertEquals(30, Node.VAR_ARGS_NAME);
772:       assertEquals(54, Node.SLASH_V);
773:       assertEquals(46, Node.IS_NAMESPACE);
774:       assertEquals(43, Node.IS_CONSTANT_NAME);
775:       assertFalse(node0.equals((Object)node1));
776:       assertFalse(inputId1.equals((Object)inputId0));
777:       assertFalse(node1.equals((Object)node0));
778:       assertNotSame(inputId1, inputId0);
779:       
780:       boolean boolean1 = node0.isEmpty();
781:       assertFalse(boolean1);
782:       assertFalse(node0.isStringKey());
783:       assertFalse(node0.isCall());
784:       assertFalse(node0.isVar());
785:       assertFalse(node0.isSetterDef());
786:       assertFalse(node0.isBlock());
787:       assertFalse(node0.isAdd());
788:       assertFalse(node0.isDo());
789:       assertFalse(node0.isWhile());
790:       assertFalse(node0.isNew());
791:       assertTrue(node0.isString());
792:       assertFalse(node0.isContinue());
793:       assertEquals(40, node0.getType());
794:       assertFalse(node0.isLabel());
795:       assertEquals(0, node0.getChildCount());
796:       assertEquals((-1), node0.getSourcePosition());
797:       assertFalse(node0.isDebugger());
798:       assertFalse(node0.isParamList());
799:       assertFalse(node0.isLabelName());
800:       assertFalse(node0.isArrayLit());
801:       assertFalse(node0.isGetElem());
802:       assertFalse(node0.isEmpty());
803:       assertFalse(node0.isAssign());
804:       assertFalse(node0.isDec());
805:       assertFalse(node0.isTypeOf());
806:       assertFalse(node0.hasChildren());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isDefaultCase());
809:       assertFalse(node0.isReturn());
810:       assertFalse(node0.isOr());
811:       assertFalse(node0.isTrue());
812:       assertFalse(node0.isNull());
813:       assertFalse(node0.isExprResult());
814:       assertFalse(node0.isBreak());
815:       assertFalse(node0.isVoid());
816:       assertFalse(node0.isDelProp());
817:       assertFalse(node0.isName());
818:       assertFalse(node0.isThrow());
819:       assertFalse(node0.isHook());
820:       assertFalse(node0.isFalse());
821:       assertFalse(node0.isComma());
822:       assertFalse(node0.isInc());
823:       assertFalse(node0.isThis());
824:       assertFalse(node0.isGetProp());
825:       assertFalse(node0.isCase());
826:       assertFalse(node0.isAnd());
827:       assertFalse(node0.isNot());
828:       assertFalse(node0.isObjectLit());
829:       assertFalse(node0.isSwitch());
830:       assertEquals((-1), node0.getCharno());
831:       assertFalse(node0.isCast());
832:       assertFalse(node0.isFor());
833:       assertFalse(node0.isNumber());
834:       assertFalse(node0.isGetterDef());
835:       assertFalse(node0.isFunction());
836:       assertFalse(node0.isScript());
837:       assertFalse(node0.hasOneChild());
838:       assertFalse(node0.isTry());
839:       assertFalse(node0.isCatch());
840:       assertFalse(node0.hasMoreThanOneChild());
841:       assertFalse(node0.isInstanceOf());
842:       assertFalse(node0.isWith());
843:       assertFalse(node0.isIn());
844:       assertFalse(node0.isRegExp());
845:       assertFalse(node0.isNE());
846:       assertEquals((-1), node0.getLineno());
847:       assertFalse(node0.isIf());
848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(43, Node.IS_CONSTANT_NAME);
851:       assertEquals(48, Node.DIRECTIVES);
852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
853:       assertEquals(4095, Node.COLUMN_MASK);
854:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(50, Node.FREE_CALL);
857:       assertEquals(54, Node.SLASH_V);
858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
859:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
860:       assertEquals(1, Node.DECR_FLAG);
861:       assertEquals(30, Node.VAR_ARGS_NAME);
862:       assertEquals(49, Node.DIRECT_EVAL);
863:       assertEquals(51, Node.STATIC_SOURCE_FILE);
864:       assertEquals(57, Node.LAST_PROP);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       assertEquals(46, Node.IS_NAMESPACE);
867:       assertEquals(12, Node.COLUMN_BITS);
868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
869:       assertEquals(2, Node.POST_FLAG);
870:       assertEquals(37, Node.OPT_ARG_NAME);
871:       assertEquals(47, Node.IS_DISPATCHER);
872:       assertEquals(57, Node.REFLECTED_OBJECT);
873:       assertEquals(56, Node.CHANGE_TIME);
874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
875:       assertEquals(8, Node.FLAG_NO_THROWS);
876:       assertEquals(39, Node.EMPTY_BLOCK);
877:       assertEquals(53, Node.INPUT_ID);
878:       assertEquals(36, Node.QUOTED_PROP);
879:       assertEquals(15, Node.NO_SIDE_EFFECTS);
880:       assertEquals(55, Node.INFERRED_FUNCTION);
881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
882:       assertEquals(29, Node.JSDOC_INFO_PROP);
883:       assertEquals(52, Node.LENGTH);
884:       assertFalse(node0.equals((Object)node1));
885:       assertFalse(boolean1 == boolean0);
886:       
887:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
888:       assertNull(staticSourceFile0);
889:       assertFalse(node0.isStringKey());
890:       assertFalse(node0.isCall());
891:       assertFalse(node0.isVar());
892:       assertFalse(node0.isSetterDef());
893:       assertFalse(node0.isBlock());
894:       assertFalse(node0.isAdd());
895:       assertFalse(node0.isDo());
896:       assertFalse(node0.isWhile());
897:       assertFalse(node0.isNew());
898:       assertTrue(node0.isString());
899:       assertFalse(node0.isContinue());
900:       assertEquals(40, node0.getType());
901:       assertFalse(node0.isLabel());
902:       assertEquals(0, node0.getChildCount());
903:       assertEquals((-1), node0.getSourcePosition());
904:       assertFalse(node0.isDebugger());
905:       assertFalse(node0.isParamList());
906:       assertFalse(node0.isLabelName());
907:       assertFalse(node0.isArrayLit());
908:       assertFalse(node0.isGetElem());
909:       assertFalse(node0.isEmpty());
910:       assertFalse(node0.isAssign());
911:       assertFalse(node0.isDec());
912:       assertFalse(node0.isTypeOf());
913:       assertFalse(node0.hasChildren());
914:       assertFalse(node0.isAssignAdd());
915:       assertFalse(node0.isDefaultCase());
916:       assertFalse(node0.isReturn());
917:       assertFalse(node0.isOr());
918:       assertFalse(node0.isTrue());
919:       assertFalse(node0.isNull());
920:       assertFalse(node0.isExprResult());
921:       assertFalse(node0.isBreak());
922:       assertFalse(node0.isVoid());
923:       assertFalse(node0.isDelProp());
924:       assertFalse(node0.isName());
925:       assertFalse(node0.isThrow());
926:       assertFalse(node0.isHook());
927:       assertFalse(node0.isFalse());
928:       assertFalse(node0.isComma());
929:       assertFalse(node0.isInc());
930:       assertFalse(node0.isThis());
931:       assertFalse(node0.isGetProp());
932:       assertFalse(node0.isCase());
933:       assertFalse(node0.isAnd());
934:       assertFalse(node0.isNot());
935:       assertFalse(node0.isObjectLit());
936:       assertFalse(node0.isSwitch());
937:       assertEquals((-1), node0.getCharno());
938:       assertFalse(node0.isCast());
939:       assertFalse(node0.isFor());
940:       assertFalse(node0.isNumber());
941:       assertFalse(node0.isGetterDef());
942:       assertFalse(node0.isFunction());
943:       assertFalse(node0.isScript());
944:       assertFalse(node0.hasOneChild());
945:       assertFalse(node0.isTry());
946:       assertFalse(node0.isCatch());
947:       assertFalse(node0.hasMoreThanOneChild());
948:       assertFalse(node0.isInstanceOf());
949:       assertFalse(node0.isWith());
950:       assertFalse(node0.isIn());
951:       assertFalse(node0.isRegExp());
952:       assertFalse(node0.isNE());
953:       assertEquals((-1), node0.getLineno());
954:       assertFalse(node0.isIf());
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
960:       assertEquals(4095, Node.COLUMN_MASK);
961:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertEquals(50, Node.FREE_CALL);
964:       assertEquals(54, Node.SLASH_V);
965:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
966:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
967:       assertEquals(1, Node.DECR_FLAG);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(32, Node.INCRDECR_PROP);
973:       assertEquals(46, Node.IS_NAMESPACE);
974:       assertEquals(12, Node.COLUMN_BITS);
975:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
976:       assertEquals(2, Node.POST_FLAG);
977:       assertEquals(37, Node.OPT_ARG_NAME);
978:       assertEquals(47, Node.IS_DISPATCHER);
979:       assertEquals(57, Node.REFLECTED_OBJECT);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
982:       assertEquals(8, Node.FLAG_NO_THROWS);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(53, Node.INPUT_ID);
985:       assertEquals(36, Node.QUOTED_PROP);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(55, Node.INFERRED_FUNCTION);
988:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
989:       assertEquals(29, Node.JSDOC_INFO_PROP);
990:       assertEquals(52, Node.LENGTH);
991:       assertFalse(node0.equals((Object)node1));
992:       
993:       Iterable<Node> iterable0 = node0.children();
994:       assertFalse(iterable0.contains(node0));
995:       assertNotNull(iterable0);
996:       assertFalse(node0.isStringKey());
997:       assertFalse(node0.isCall());
998:       assertFalse(node0.isVar());
999:       assertFalse(node0.isSetterDef());
1000:       assertFalse(node0.isBlock());
1001:       assertFalse(node0.isAdd());
1002:       assertFalse(node0.isDo());
1003:       assertFalse(node0.isWhile());
1004:       assertFalse(node0.isNew());
1005:       assertTrue(node0.isString());
1006:       assertFalse(node0.isContinue());
1007:       assertEquals(40, node0.getType());
1008:       assertFalse(node0.isLabel());
1009:       assertEquals(0, node0.getChildCount());
1010:       assertEquals((-1), node0.getSourcePosition());
1011:       assertFalse(node0.isDebugger());
1012:       assertFalse(node0.isParamList());
1013:       assertFalse(node0.isLabelName());
1014:       assertFalse(node0.isArrayLit());
1015:       assertFalse(node0.isGetElem());
1016:       assertFalse(node0.isEmpty());
1017:       assertFalse(node0.isAssign());
1018:       assertFalse(node0.isDec());
1019:       assertFalse(node0.isTypeOf());
1020:       assertFalse(node0.hasChildren());
1021:       assertFalse(node0.isAssignAdd());
1022:       assertFalse(node0.isDefaultCase());
1023:       assertFalse(node0.isReturn());
1024:       assertFalse(node0.isOr());
1025:       assertFalse(node0.isTrue());
1026:       assertFalse(node0.isNull());
1027:       assertFalse(node0.isExprResult());
1028:       assertFalse(node0.isBreak());
1029:       assertFalse(node0.isVoid());
1030:       assertFalse(node0.isDelProp());
1031:       assertFalse(node0.isName());
1032:       assertFalse(node0.isThrow());
1033:       assertFalse(node0.isHook());
1034:       assertFalse(node0.isFalse());
1035:       assertFalse(node0.isComma());
1036:       assertFalse(node0.isInc());
1037:       assertFalse(node0.isThis());
1038:       assertFalse(node0.isGetProp());
1039:       assertFalse(node0.isCase());
1040:       assertFalse(node0.isAnd());
1041:       assertFalse(node0.isNot());
1042:       assertFalse(node0.isObjectLit());
1043:       assertFalse(node0.isSwitch());
1044:       assertEquals((-1), node0.getCharno());
1045:       assertFalse(node0.isCast());
1046:       assertFalse(node0.isFor());
1047:       assertFalse(node0.isNumber());
1048:       assertFalse(node0.isGetterDef());
1049:       assertFalse(node0.isFunction());
1050:       assertFalse(node0.isScript());
1051:       assertFalse(node0.hasOneChild());
1052:       assertFalse(node0.isTry());
1053:       assertFalse(node0.isCatch());
1054:       assertFalse(node0.hasMoreThanOneChild());
1055:       assertFalse(node0.isInstanceOf());
1056:       assertFalse(node0.isWith());
1057:       assertFalse(node0.isIn());
1058:       assertFalse(node0.isRegExp());
1059:       assertFalse(node0.isNE());
1060:       assertEquals((-1), node0.getLineno());
1061:       assertFalse(node0.isIf());
1062:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1063:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1064:       assertEquals(43, Node.IS_CONSTANT_NAME);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1067:       assertEquals(4095, Node.COLUMN_MASK);
1068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(50, Node.FREE_CALL);
1071:       assertEquals(54, Node.SLASH_V);
1072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1074:       assertEquals(1, Node.DECR_FLAG);
1075:       assertEquals(30, Node.VAR_ARGS_NAME);
1076:       assertEquals(49, Node.DIRECT_EVAL);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(57, Node.LAST_PROP);
1079:       assertEquals(32, Node.INCRDECR_PROP);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(12, Node.COLUMN_BITS);
1082:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1083:       assertEquals(2, Node.POST_FLAG);
1084:       assertEquals(37, Node.OPT_ARG_NAME);
1085:       assertEquals(47, Node.IS_DISPATCHER);
1086:       assertEquals(57, Node.REFLECTED_OBJECT);
1087:       assertEquals(56, Node.CHANGE_TIME);
1088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1089:       assertEquals(8, Node.FLAG_NO_THROWS);
1090:       assertEquals(39, Node.EMPTY_BLOCK);
1091:       assertEquals(53, Node.INPUT_ID);
1092:       assertEquals(36, Node.QUOTED_PROP);
1093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1094:       assertEquals(55, Node.INFERRED_FUNCTION);
1095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1096:       assertEquals(29, Node.JSDOC_INFO_PROP);
1097:       assertEquals(52, Node.LENGTH);
1098:       assertFalse(node0.equals((Object)node1));
1099:       
1100:       try { 
1101:         node1.setString((String) null);
1102:         fail("Expecting exception: UnsupportedOperationException");
1103:       
1104:       } catch(UnsupportedOperationException e) {
1105:          //
1106:          // SHNE 9 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000006] is not a string node
1107:          //
1108:          verifyException("com.google.javascript.rhino.Node", e);
1109:       }
1110:   }
1111: }
RegularFileObject[/tmp/EvoSuite_126_1628157532246/com/google/javascript/rhino/Node_126_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_126_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_126_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_126_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.NamedType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.javascript.rhino.JSDocInfo$Marker",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Platform",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 09:58:52.424 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("l:kU9Ci.A");
assertNotNull(node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

node0.setVarArgs(true);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
assertTrue(boolean0);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

InputId inputId0 = new InputId("com.google.common.collect.LinkedHashMultimap");
assertNotNull(inputId0);
assertEquals("com.google.common.collect.LinkedHashMultimap", inputId0.getIdName());

InputId inputId1 = new InputId("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
assertNotNull(inputId1);
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(inputId1.equals((Object)inputId0));

String string0 = inputId1.toString();
assertNotNull(string0);
assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string0);
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(inputId1.equals((Object)inputId0));
assertNotSame(inputId1, inputId0);

String string1 = inputId1.toString();
assertNotNull(string1);
assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string1);
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(inputId1.equals((Object)inputId0));
assertTrue(string1.equals((Object)string0));
assertNotSame(inputId1, inputId0);

Node node1 = new Node(46, node0, 9, 50);
assertNotNull(node1);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertEquals(36914, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertTrue(node1.hasOneChild());
assertEquals(9, node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertEquals(46, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals(50, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));

node1.setInputId(inputId1);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertEquals(36914, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertTrue(node1.hasOneChild());
assertEquals(9, node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertEquals(46, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals(50, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(inputId1.equals((Object)inputId0));
assertFalse(node1.equals((Object)node0));
assertNotSame(inputId1, inputId0);

boolean boolean1 = node0.isEmpty();
assertFalse(boolean1);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertNull(staticSourceFile0);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertFalse(node0.equals((Object)node1));

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertFalse(node0.equals((Object)node1));

node1.setString((String) null);

[MASTER] 09:59:03.449 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_271_1628157543423/com/google/javascript/rhino/Node_271_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_271_1628157543423/com/google/javascript/rhino/Node_271_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:03.449 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:03.449 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:03.450 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 235
[MASTER] 09:59:03.451 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_271_1628157543423/com/google/javascript/rhino/Node_271_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:03 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.io.File;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.mock.java.io.MockFile;
16: import org.evosuite.runtime.mock.java.io.MockFileWriter;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_271_tmp__ESTest extends Node_271_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newNumber(0.0, 77, 0);
25:       assertNotNull(node0);
26:       assertFalse(node0.isNull());
27:       assertFalse(node0.isSetterDef());
28:       assertFalse(node0.isVar());
29:       assertEquals(0, node0.getChildCount());
30:       assertFalse(node0.isBlock());
31:       assertFalse(node0.isDefaultCase());
32:       assertFalse(node0.isRegExp());
33:       assertFalse(node0.isTrue());
34:       assertFalse(node0.isVoid());
35:       assertFalse(node0.isNew());
36:       assertFalse(node0.isAdd());
37:       assertFalse(node0.isCatch());
38:       assertFalse(node0.isCall());
39:       assertFalse(node0.isName());
40:       assertFalse(node0.isIf());
41:       assertFalse(node0.isNE());
42:       assertFalse(node0.isTypeOf());
43:       assertFalse(node0.isDelProp());
44:       assertFalse(node0.hasChildren());
45:       assertFalse(node0.isDec());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isGetElem());
48:       assertFalse(node0.isIn());
49:       assertTrue(node0.isNumber());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isWhile());
52:       assertFalse(node0.isFunction());
53:       assertFalse(node0.isDebugger());
54:       assertFalse(node0.isNot());
55:       assertFalse(node0.isContinue());
56:       assertFalse(node0.isString());
57:       assertFalse(node0.isCast());
58:       assertFalse(node0.isObjectLit());
59:       assertFalse(node0.isAnd());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isBreak());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isFalse());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isThrow());
68:       assertEquals(0, node0.getCharno());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isGetterDef());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.hasMoreThanOneChild());
76:       assertEquals(77, node0.getLineno());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isTry());
81:       assertEquals(39, node0.getType());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.isScript());
86:       assertFalse(node0.isSwitch());
87:       assertEquals(315392, node0.getSourcePosition());
88:       assertFalse(node0.isArrayLit());
89:       assertFalse(node0.isLabelName());
90:       assertFalse(node0.isStringKey());
91:       assertFalse(node0.isParamList());
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(4095, Node.COLUMN_MASK);
97:       assertEquals(37, Node.OPT_ARG_NAME);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(8, Node.FLAG_NO_THROWS);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
107:       assertEquals(29, Node.JSDOC_INFO_PROP);
108:       assertEquals(53, Node.INPUT_ID);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(49, Node.DIRECT_EVAL);
119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(12, Node.COLUMN_BITS);
123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
124:       assertEquals(1, Node.DECR_FLAG);
125:       assertEquals(50, Node.FREE_CALL);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
128:       
129:       boolean boolean0 = node0.isEmpty();
130:       assertFalse(boolean0);
131:       assertFalse(node0.isNull());
132:       assertFalse(node0.isSetterDef());
133:       assertFalse(node0.isVar());
134:       assertEquals(0, node0.getChildCount());
135:       assertFalse(node0.isBlock());
136:       assertFalse(node0.isDefaultCase());
137:       assertFalse(node0.isRegExp());
138:       assertFalse(node0.isTrue());
139:       assertFalse(node0.isVoid());
140:       assertFalse(node0.isNew());
141:       assertFalse(node0.isAdd());
142:       assertFalse(node0.isCatch());
143:       assertFalse(node0.isCall());
144:       assertFalse(node0.isName());
145:       assertFalse(node0.isIf());
146:       assertFalse(node0.isNE());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.isDelProp());
149:       assertFalse(node0.hasChildren());
150:       assertFalse(node0.isDec());
151:       assertFalse(node0.isAssign());
152:       assertFalse(node0.isGetElem());
153:       assertFalse(node0.isIn());
154:       assertTrue(node0.isNumber());
155:       assertFalse(node0.isReturn());
156:       assertFalse(node0.isWhile());
157:       assertFalse(node0.isFunction());
158:       assertFalse(node0.isDebugger());
159:       assertFalse(node0.isNot());
160:       assertFalse(node0.isContinue());
161:       assertFalse(node0.isString());
162:       assertFalse(node0.isCast());
163:       assertFalse(node0.isObjectLit());
164:       assertFalse(node0.isAnd());
165:       assertFalse(node0.isThis());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isThrow());
173:       assertEquals(0, node0.getCharno());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isExprResult());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isGetterDef());
178:       assertFalse(node0.isEmpty());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.hasMoreThanOneChild());
181:       assertEquals(77, node0.getLineno());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isCase());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.isTry());
186:       assertEquals(39, node0.getType());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isLabel());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isSwitch());
192:       assertEquals(315392, node0.getSourcePosition());
193:       assertFalse(node0.isArrayLit());
194:       assertFalse(node0.isLabelName());
195:       assertFalse(node0.isStringKey());
196:       assertFalse(node0.isParamList());
197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
198:       assertEquals(43, Node.IS_CONSTANT_NAME);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
201:       assertEquals(4095, Node.COLUMN_MASK);
202:       assertEquals(37, Node.OPT_ARG_NAME);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(8, Node.FLAG_NO_THROWS);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
215:       assertEquals(39, Node.EMPTY_BLOCK);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(49, Node.DIRECT_EVAL);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(1, Node.DECR_FLAG);
230:       assertEquals(50, Node.FREE_CALL);
231:       assertEquals(32, Node.INCRDECR_PROP);
232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
233:       
234:       Iterable<Node> iterable0 = node0.children();
235:       assertFalse(iterable0.contains(node0));
236:       assertNotNull(iterable0);
237:       assertFalse(node0.isNull());
238:       assertFalse(node0.isSetterDef());
239:       assertFalse(node0.isVar());
240:       assertEquals(0, node0.getChildCount());
241:       assertFalse(node0.isBlock());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isRegExp());
244:       assertFalse(node0.isTrue());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isNew());
247:       assertFalse(node0.isAdd());
248:       assertFalse(node0.isCatch());
249:       assertFalse(node0.isCall());
250:       assertFalse(node0.isName());
251:       assertFalse(node0.isIf());
252:       assertFalse(node0.isNE());
253:       assertFalse(node0.isTypeOf());
254:       assertFalse(node0.isDelProp());
255:       assertFalse(node0.hasChildren());
256:       assertFalse(node0.isDec());
257:       assertFalse(node0.isAssign());
258:       assertFalse(node0.isGetElem());
259:       assertFalse(node0.isIn());
260:       assertTrue(node0.isNumber());
261:       assertFalse(node0.isReturn());
262:       assertFalse(node0.isWhile());
263:       assertFalse(node0.isFunction());
264:       assertFalse(node0.isDebugger());
265:       assertFalse(node0.isNot());
266:       assertFalse(node0.isContinue());
267:       assertFalse(node0.isString());
268:       assertFalse(node0.isCast());
269:       assertFalse(node0.isObjectLit());
270:       assertFalse(node0.isAnd());
271:       assertFalse(node0.isThis());
272:       assertFalse(node0.isGetProp());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isComma());
275:       assertFalse(node0.isFalse());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isHook());
278:       assertFalse(node0.isThrow());
279:       assertEquals(0, node0.getCharno());
280:       assertFalse(node0.isInc());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isWith());
283:       assertFalse(node0.isGetterDef());
284:       assertFalse(node0.isEmpty());
285:       assertFalse(node0.isOr());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertEquals(77, node0.getLineno());
288:       assertFalse(node0.hasOneChild());
289:       assertFalse(node0.isCase());
290:       assertFalse(node0.isFor());
291:       assertFalse(node0.isTry());
292:       assertEquals(39, node0.getType());
293:       assertFalse(node0.isAssignAdd());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isLabel());
296:       assertFalse(node0.isScript());
297:       assertFalse(node0.isSwitch());
298:       assertEquals(315392, node0.getSourcePosition());
299:       assertFalse(node0.isArrayLit());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isStringKey());
302:       assertFalse(node0.isParamList());
303:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(37, Node.OPT_ARG_NAME);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
311:       assertEquals(2, Node.POST_FLAG);
312:       assertEquals(8, Node.FLAG_NO_THROWS);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
321:       assertEquals(39, Node.EMPTY_BLOCK);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(52, Node.LENGTH);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
327:       assertEquals(57, Node.REFLECTED_OBJECT);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(49, Node.DIRECT_EVAL);
330:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(1, Node.DECR_FLAG);
336:       assertEquals(50, Node.FREE_CALL);
337:       assertEquals(32, Node.INCRDECR_PROP);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       
340:       MockFile mockFile0 = new MockFile("");
341:       assertNotNull(mockFile0);
342:       
343:       boolean boolean1 = mockFile0.setExecutable(false, true);
344:       assertTrue(boolean1);
345:       assertEquals("", mockFile0.toString());
346:       assertEquals(0L, mockFile0.getUsableSpace());
347:       assertTrue(mockFile0.canWrite());
348:       assertTrue(mockFile0.canRead());
349:       assertFalse(mockFile0.canExecute());
350:       assertNull(mockFile0.getParent());
351:       assertEquals(0L, mockFile0.getTotalSpace());
352:       assertEquals(1392409281320L, mockFile0.lastModified());
353:       assertEquals(0L, mockFile0.getFreeSpace());
354:       assertTrue(mockFile0.exists());
355:       assertFalse(mockFile0.isFile());
356:       assertEquals(0L, mockFile0.length());
357:       assertFalse(mockFile0.isAbsolute());
358:       assertEquals("", mockFile0.getName());
359:       assertFalse(mockFile0.isHidden());
360:       assertTrue(mockFile0.isDirectory());
361:       assertFalse(boolean1 == boolean0);
362:       
363:       // Undeclared exception!
364:       try { 
365:         MockFile.createTempFile((String) null, "6$m=g'dGRlg.gILx", (File) mockFile0);
366:         fail("Expecting exception: NullPointerException");
367:       
368:       } catch(NullPointerException e) {
369:          //
370:          // no message in exception (getMessage() returned null)
371:          //
372:          verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
373:       }
374:   }
375: }
RegularFileObject[/tmp/EvoSuite_271_1628157543423/com/google/javascript/rhino/Node_271_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:03 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_271_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_271_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_271_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.NamedType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.javascript.rhino.JSDocInfo$Marker",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Platform",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 09:59:03.454 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 77, 0);
assertNotNull(node0);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(77, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals(315392, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node0.isEmpty();
assertFalse(boolean0);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(77, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals(315392, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(77, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals(315392, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

MockFile mockFile0 = new MockFile("");
assertNotNull(mockFile0);

boolean boolean1 = mockFile0.setExecutable(false, true);
assertTrue(boolean1);
assertEquals("", mockFile0.toString());
assertEquals(0L, mockFile0.getUsableSpace());
assertTrue(mockFile0.canWrite());
assertTrue(mockFile0.canRead());
assertFalse(mockFile0.canExecute());
assertNull(mockFile0.getParent());
assertEquals(0L, mockFile0.getTotalSpace());
assertEquals(1392409281320L, mockFile0.lastModified());
assertEquals(0L, mockFile0.getFreeSpace());
assertTrue(mockFile0.exists());
assertFalse(mockFile0.isFile());
assertEquals(0L, mockFile0.length());
assertFalse(mockFile0.isAbsolute());
assertEquals("", mockFile0.getName());
assertFalse(mockFile0.isHidden());
assertTrue(mockFile0.isDirectory());
assertFalse(boolean1 == boolean0);

MockFile.createTempFile((String) null, "6$m=g'dGRlg.gILx", (File) mockFile0);

[MASTER] 09:59:06.553 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_314_1628157546470/com/google/javascript/rhino/Node_314_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_314_1628157546470/com/google/javascript/rhino/Node_314_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:06.553 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:06.553 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:06.554 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 628
[MASTER] 09:59:06.555 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_314_1628157546470/com/google/javascript/rhino/Node_314_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import java.util.LinkedList;
17: import java.util.Set;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_314_tmp__ESTest extends Node_314_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Node node0 = new Node(16);
28:       assertNotNull(node0);
29:       assertFalse(node0.isGetElem());
30:       assertFalse(node0.isCast());
31:       assertEquals((-1), node0.getSourcePosition());
32:       assertFalse(node0.isNumber());
33:       assertFalse(node0.isTypeOf());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.hasChildren());
36:       assertFalse(node0.isAssign());
37:       assertFalse(node0.isExprResult());
38:       assertEquals((-1), node0.getLineno());
39:       assertFalse(node0.isLabelName());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.isOr());
42:       assertFalse(node0.isNew());
43:       assertFalse(node0.isAssignAdd());
44:       assertFalse(node0.isLabel());
45:       assertFalse(node0.isAdd());
46:       assertFalse(node0.isDo());
47:       assertFalse(node0.isStringKey());
48:       assertFalse(node0.isVar());
49:       assertFalse(node0.isHook());
50:       assertEquals((-1), node0.getCharno());
51:       assertFalse(node0.isParamList());
52:       assertFalse(node0.isSwitch());
53:       assertFalse(node0.isCase());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.hasMoreThanOneChild());
57:       assertFalse(node0.isWith());
58:       assertFalse(node0.isRegExp());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.hasOneChild());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isEmpty());
66:       assertFalse(node0.isGetterDef());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isTrue());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isArrayLit());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isIn());
75:       assertFalse(node0.isFunction());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isSetterDef());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isCall());
83:       assertFalse(node0.isThrow());
84:       assertFalse(node0.isNull());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isBreak());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isString());
89:       assertFalse(node0.isWhile());
90:       assertFalse(node0.isObjectLit());
91:       assertFalse(node0.isNot());
92:       assertEquals(16, node0.getType());
93:       assertFalse(node0.isGetProp());
94:       assertFalse(node0.isReturn());
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(32, Node.INCRDECR_PROP);
104:       assertEquals(46, Node.IS_NAMESPACE);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(29, Node.JSDOC_INFO_PROP);
108:       assertEquals(50, Node.FREE_CALL);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(40, Node.ORIGINALNAME_PROP);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
125:       assertEquals(56, Node.CHANGE_TIME);
126:       assertEquals(48, Node.DIRECTIVES);
127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
128:       assertEquals(37, Node.OPT_ARG_NAME);
129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       
132:       boolean boolean0 = node0.isWith();
133:       assertFalse(boolean0);
134:       assertFalse(node0.isGetElem());
135:       assertFalse(node0.isCast());
136:       assertEquals((-1), node0.getSourcePosition());
137:       assertFalse(node0.isNumber());
138:       assertFalse(node0.isTypeOf());
139:       assertFalse(node0.isDec());
140:       assertFalse(node0.hasChildren());
141:       assertFalse(node0.isAssign());
142:       assertFalse(node0.isExprResult());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.isLabelName());
145:       assertFalse(node0.isContinue());
146:       assertFalse(node0.isOr());
147:       assertFalse(node0.isNew());
148:       assertFalse(node0.isAssignAdd());
149:       assertFalse(node0.isLabel());
150:       assertFalse(node0.isAdd());
151:       assertFalse(node0.isDo());
152:       assertFalse(node0.isStringKey());
153:       assertFalse(node0.isVar());
154:       assertFalse(node0.isHook());
155:       assertEquals((-1), node0.getCharno());
156:       assertFalse(node0.isParamList());
157:       assertFalse(node0.isSwitch());
158:       assertFalse(node0.isCase());
159:       assertFalse(node0.isCatch());
160:       assertFalse(node0.isInstanceOf());
161:       assertFalse(node0.hasMoreThanOneChild());
162:       assertFalse(node0.isWith());
163:       assertFalse(node0.isRegExp());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isThis());
166:       assertFalse(node0.isScript());
167:       assertFalse(node0.hasOneChild());
168:       assertFalse(node0.isTry());
169:       assertFalse(node0.isFor());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.isGetterDef());
172:       assertFalse(node0.isDebugger());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isNE());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isArrayLit());
177:       assertFalse(node0.isVoid());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isIn());
180:       assertFalse(node0.isFunction());
181:       assertEquals(0, node0.getChildCount());
182:       assertFalse(node0.isSetterDef());
183:       assertFalse(node0.isInc());
184:       assertFalse(node0.isDefaultCase());
185:       assertFalse(node0.isName());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isThrow());
189:       assertFalse(node0.isNull());
190:       assertFalse(node0.isComma());
191:       assertFalse(node0.isBreak());
192:       assertFalse(node0.isAnd());
193:       assertFalse(node0.isString());
194:       assertFalse(node0.isWhile());
195:       assertFalse(node0.isObjectLit());
196:       assertFalse(node0.isNot());
197:       assertEquals(16, node0.getType());
198:       assertFalse(node0.isGetProp());
199:       assertFalse(node0.isReturn());
200:       assertEquals(30, Node.VAR_ARGS_NAME);
201:       assertEquals(49, Node.DIRECT_EVAL);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(1, Node.DECR_FLAG);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(54, Node.SLASH_V);
206:       assertEquals(57, Node.LAST_PROP);
207:       assertEquals(52, Node.LENGTH);
208:       assertEquals(32, Node.INCRDECR_PROP);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(50, Node.FREE_CALL);
214:       assertEquals(47, Node.IS_DISPATCHER);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(2, Node.POST_FLAG);
217:       assertEquals(40, Node.ORIGINALNAME_PROP);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(43, Node.IS_CONSTANT_NAME);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(56, Node.CHANGE_TIME);
231:       assertEquals(48, Node.DIRECTIVES);
232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
233:       assertEquals(37, Node.OPT_ARG_NAME);
234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
235:       assertEquals(4095, Node.COLUMN_MASK);
236:       
237:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
238:       assertNotNull(jSTypeRegistry0);
239:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
240:       
241:       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
242:       assertNotNull(linkedList0);
243:       assertEquals(0, linkedList0.size());
244:       
245:       JSDocInfo jSDocInfo0 = new JSDocInfo(true);
246:       assertNotNull(jSDocInfo0);
247:       assertFalse(jSDocInfo0.isConstant());
248:       assertNull(jSDocInfo0.getVisibility());
249:       assertNull(jSDocInfo0.getMeaning());
250:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
251:       assertNull(jSDocInfo0.getFileOverview());
252:       assertFalse(jSDocInfo0.hasThisType());
253:       assertFalse(jSDocInfo0.containsDeclaration());
254:       assertFalse(jSDocInfo0.isConstructor());
255:       assertFalse(jSDocInfo0.hasModifies());
256:       assertFalse(jSDocInfo0.isExpose());
257:       assertFalse(jSDocInfo0.isJaggerInject());
258:       assertNull(jSDocInfo0.getLendsName());
259:       assertFalse(jSDocInfo0.isNoShadow());
260:       assertFalse(jSDocInfo0.isIdGenerator());
261:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
262:       assertNull(jSDocInfo0.getBlockDescription());
263:       assertFalse(jSDocInfo0.isInterface());
264:       assertFalse(jSDocInfo0.isNgInject());
265:       assertFalse(jSDocInfo0.isNoAlias());
266:       assertEquals(0, jSDocInfo0.getParameterCount());
267:       assertEquals("JSDocInfo", jSDocInfo0.toString());
268:       assertFalse(jSDocInfo0.isNoCompile());
269:       assertFalse(jSDocInfo0.hasEnumParameterType());
270:       assertFalse(jSDocInfo0.isDefine());
271:       assertFalse(jSDocInfo0.hasReturnType());
272:       assertNull(jSDocInfo0.getDescription());
273:       assertFalse(jSDocInfo0.shouldPreserveTry());
274:       assertFalse(jSDocInfo0.makesStructs());
275:       assertNull(jSDocInfo0.getOriginalCommentString());
276:       assertFalse(jSDocInfo0.hasType());
277:       assertFalse(jSDocInfo0.isJavaDispatch());
278:       assertFalse(jSDocInfo0.isNoSideEffects());
279:       assertFalse(jSDocInfo0.isDisposes());
280:       assertFalse(jSDocInfo0.makesDicts());
281:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
282:       assertFalse(jSDocInfo0.isImplicitCast());
283:       assertFalse(jSDocInfo0.isHidden());
284:       assertNull(jSDocInfo0.getDeprecationReason());
285:       assertFalse(jSDocInfo0.hasFileOverview());
286:       assertFalse(jSDocInfo0.isMappedIdGenerator());
287:       assertFalse(jSDocInfo0.isDeprecated());
288:       assertFalse(jSDocInfo0.isExterns());
289:       assertFalse(jSDocInfo0.isOverride());
290:       assertFalse(jSDocInfo0.isWizaction());
291:       assertFalse(jSDocInfo0.isExport());
292:       assertNull(jSDocInfo0.getVersion());
293:       assertFalse(jSDocInfo0.isJaggerModule());
294:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
295:       assertFalse(jSDocInfo0.hasTypedefType());
296:       assertNull(jSDocInfo0.getReturnDescription());
297:       assertFalse(jSDocInfo0.isNoTypeCheck());
298:       assertFalse(jSDocInfo0.isJaggerProvide());
299:       assertFalse(jSDocInfo0.hasBaseType());
300:       assertFalse(jSDocInfo0.isStableIdGenerator());
301:       assertNull(jSDocInfo0.getLicense());
302:       
303:       Set<String> set0 = jSDocInfo0.getModifies();
304:       assertNotNull(set0);
305:       assertFalse(jSDocInfo0.isConstant());
306:       assertNull(jSDocInfo0.getVisibility());
307:       assertNull(jSDocInfo0.getMeaning());
308:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
309:       assertNull(jSDocInfo0.getFileOverview());
310:       assertFalse(jSDocInfo0.hasThisType());
311:       assertFalse(jSDocInfo0.containsDeclaration());
312:       assertFalse(jSDocInfo0.isConstructor());
313:       assertFalse(jSDocInfo0.hasModifies());
314:       assertFalse(jSDocInfo0.isExpose());
315:       assertFalse(jSDocInfo0.isJaggerInject());
316:       assertNull(jSDocInfo0.getLendsName());
317:       assertFalse(jSDocInfo0.isNoShadow());
318:       assertFalse(jSDocInfo0.isIdGenerator());
319:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
320:       assertNull(jSDocInfo0.getBlockDescription());
321:       assertFalse(jSDocInfo0.isInterface());
322:       assertFalse(jSDocInfo0.isNgInject());
323:       assertFalse(jSDocInfo0.isNoAlias());
324:       assertEquals(0, jSDocInfo0.getParameterCount());
325:       assertEquals("JSDocInfo", jSDocInfo0.toString());
326:       assertFalse(jSDocInfo0.isNoCompile());
327:       assertFalse(jSDocInfo0.hasEnumParameterType());
328:       assertFalse(jSDocInfo0.isDefine());
329:       assertFalse(jSDocInfo0.hasReturnType());
330:       assertNull(jSDocInfo0.getDescription());
331:       assertFalse(jSDocInfo0.shouldPreserveTry());
332:       assertFalse(jSDocInfo0.makesStructs());
333:       assertNull(jSDocInfo0.getOriginalCommentString());
334:       assertFalse(jSDocInfo0.hasType());
335:       assertFalse(jSDocInfo0.isJavaDispatch());
336:       assertFalse(jSDocInfo0.isNoSideEffects());
337:       assertFalse(jSDocInfo0.isDisposes());
338:       assertFalse(jSDocInfo0.makesDicts());
339:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
340:       assertFalse(jSDocInfo0.isImplicitCast());
341:       assertFalse(jSDocInfo0.isHidden());
342:       assertNull(jSDocInfo0.getDeprecationReason());
343:       assertFalse(jSDocInfo0.hasFileOverview());
344:       assertFalse(jSDocInfo0.isMappedIdGenerator());
345:       assertFalse(jSDocInfo0.isDeprecated());
346:       assertFalse(jSDocInfo0.isExterns());
347:       assertFalse(jSDocInfo0.isOverride());
348:       assertFalse(jSDocInfo0.isWizaction());
349:       assertFalse(jSDocInfo0.isExport());
350:       assertNull(jSDocInfo0.getVersion());
351:       assertFalse(jSDocInfo0.isJaggerModule());
352:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
353:       assertFalse(jSDocInfo0.hasTypedefType());
354:       assertNull(jSDocInfo0.getReturnDescription());
355:       assertFalse(jSDocInfo0.isNoTypeCheck());
356:       assertFalse(jSDocInfo0.isJaggerProvide());
357:       assertFalse(jSDocInfo0.hasBaseType());
358:       assertFalse(jSDocInfo0.isStableIdGenerator());
359:       assertNull(jSDocInfo0.getLicense());
360:       assertEquals(0, set0.size());
361:       assertTrue(set0.isEmpty());
362:       
363:       Node node1 = node0.setJSDocInfo(jSDocInfo0);
364:       assertNotNull(node1);
365:       assertFalse(node0.isGetElem());
366:       assertFalse(node0.isCast());
367:       assertEquals((-1), node0.getSourcePosition());
368:       assertFalse(node0.isNumber());
369:       assertFalse(node0.isTypeOf());
370:       assertFalse(node0.isDec());
371:       assertFalse(node0.hasChildren());
372:       assertFalse(node0.isAssign());
373:       assertFalse(node0.isExprResult());
374:       assertEquals((-1), node0.getLineno());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isContinue());
377:       assertFalse(node0.isOr());
378:       assertFalse(node0.isNew());
379:       assertFalse(node0.isAssignAdd());
380:       assertFalse(node0.isLabel());
381:       assertFalse(node0.isAdd());
382:       assertFalse(node0.isDo());
383:       assertFalse(node0.isStringKey());
384:       assertFalse(node0.isVar());
385:       assertFalse(node0.isHook());
386:       assertEquals((-1), node0.getCharno());
387:       assertFalse(node0.isParamList());
388:       assertFalse(node0.isSwitch());
389:       assertFalse(node0.isCase());
390:       assertFalse(node0.isCatch());
391:       assertFalse(node0.isInstanceOf());
392:       assertFalse(node0.hasMoreThanOneChild());
393:       assertFalse(node0.isWith());
394:       assertFalse(node0.isRegExp());
395:       assertFalse(node0.isBlock());
396:       assertFalse(node0.isThis());
397:       assertFalse(node0.isScript());
398:       assertFalse(node0.hasOneChild());
399:       assertFalse(node0.isTry());
400:       assertFalse(node0.isFor());
401:       assertFalse(node0.isEmpty());
402:       assertFalse(node0.isGetterDef());
403:       assertFalse(node0.isDebugger());
404:       assertFalse(node0.isTrue());
405:       assertFalse(node0.isNE());
406:       assertFalse(node0.isIf());
407:       assertFalse(node0.isArrayLit());
408:       assertFalse(node0.isVoid());
409:       assertFalse(node0.isDelProp());
410:       assertFalse(node0.isIn());
411:       assertFalse(node0.isFunction());
412:       assertEquals(0, node0.getChildCount());
413:       assertFalse(node0.isSetterDef());
414:       assertFalse(node0.isInc());
415:       assertFalse(node0.isDefaultCase());
416:       assertFalse(node0.isName());
417:       assertFalse(node0.isFalse());
418:       assertFalse(node0.isCall());
419:       assertFalse(node0.isThrow());
420:       assertFalse(node0.isNull());
421:       assertFalse(node0.isComma());
422:       assertFalse(node0.isBreak());
423:       assertFalse(node0.isAnd());
424:       assertFalse(node0.isString());
425:       assertFalse(node0.isWhile());
426:       assertFalse(node0.isObjectLit());
427:       assertFalse(node0.isNot());
428:       assertEquals(16, node0.getType());
429:       assertFalse(node0.isGetProp());
430:       assertFalse(node0.isReturn());
431:       assertFalse(jSDocInfo0.isConstant());
432:       assertNull(jSDocInfo0.getVisibility());
433:       assertNull(jSDocInfo0.getMeaning());
434:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
435:       assertNull(jSDocInfo0.getFileOverview());
436:       assertFalse(jSDocInfo0.hasThisType());
437:       assertFalse(jSDocInfo0.containsDeclaration());
438:       assertFalse(jSDocInfo0.isConstructor());
439:       assertFalse(jSDocInfo0.hasModifies());
440:       assertFalse(jSDocInfo0.isExpose());
441:       assertFalse(jSDocInfo0.isJaggerInject());
442:       assertNull(jSDocInfo0.getLendsName());
443:       assertFalse(jSDocInfo0.isNoShadow());
444:       assertFalse(jSDocInfo0.isIdGenerator());
445:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
446:       assertNull(jSDocInfo0.getBlockDescription());
447:       assertFalse(jSDocInfo0.isInterface());
448:       assertFalse(jSDocInfo0.isNgInject());
449:       assertFalse(jSDocInfo0.isNoAlias());
450:       assertEquals(0, jSDocInfo0.getParameterCount());
451:       assertEquals("JSDocInfo", jSDocInfo0.toString());
452:       assertFalse(jSDocInfo0.isNoCompile());
453:       assertFalse(jSDocInfo0.hasEnumParameterType());
454:       assertFalse(jSDocInfo0.isDefine());
455:       assertFalse(jSDocInfo0.hasReturnType());
456:       assertNull(jSDocInfo0.getDescription());
457:       assertFalse(jSDocInfo0.shouldPreserveTry());
458:       assertFalse(jSDocInfo0.makesStructs());
459:       assertNull(jSDocInfo0.getOriginalCommentString());
460:       assertFalse(jSDocInfo0.hasType());
461:       assertFalse(jSDocInfo0.isJavaDispatch());
462:       assertFalse(jSDocInfo0.isNoSideEffects());
463:       assertFalse(jSDocInfo0.isDisposes());
464:       assertFalse(jSDocInfo0.makesDicts());
465:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
466:       assertFalse(jSDocInfo0.isImplicitCast());
467:       assertFalse(jSDocInfo0.isHidden());
468:       assertNull(jSDocInfo0.getDeprecationReason());
469:       assertFalse(jSDocInfo0.hasFileOverview());
470:       assertFalse(jSDocInfo0.isMappedIdGenerator());
471:       assertFalse(jSDocInfo0.isDeprecated());
472:       assertFalse(jSDocInfo0.isExterns());
473:       assertFalse(jSDocInfo0.isOverride());
474:       assertFalse(jSDocInfo0.isWizaction());
475:       assertFalse(jSDocInfo0.isExport());
476:       assertNull(jSDocInfo0.getVersion());
477:       assertFalse(jSDocInfo0.isJaggerModule());
478:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
479:       assertFalse(jSDocInfo0.hasTypedefType());
480:       assertNull(jSDocInfo0.getReturnDescription());
481:       assertFalse(jSDocInfo0.isNoTypeCheck());
482:       assertFalse(jSDocInfo0.isJaggerProvide());
483:       assertFalse(jSDocInfo0.hasBaseType());
484:       assertFalse(jSDocInfo0.isStableIdGenerator());
485:       assertNull(jSDocInfo0.getLicense());
486:       assertFalse(node1.hasOneChild());
487:       assertFalse(node1.isScript());
488:       assertFalse(node1.isExprResult());
489:       assertFalse(node1.isCast());
490:       assertFalse(node1.isWith());
491:       assertFalse(node1.isAssign());
492:       assertFalse(node1.isDec());
493:       assertFalse(node1.hasChildren());
494:       assertFalse(node1.isLabel());
495:       assertFalse(node1.isGetProp());
496:       assertFalse(node1.isNumber());
497:       assertFalse(node1.isContinue());
498:       assertFalse(node1.isObjectLit());
499:       assertFalse(node1.isNot());
500:       assertFalse(node1.isLabelName());
501:       assertEquals((-1), node1.getSourcePosition());
502:       assertFalse(node1.isAnd());
503:       assertFalse(node1.isBlock());
504:       assertEquals((-1), node1.getCharno());
505:       assertFalse(node1.isInc());
506:       assertFalse(node1.isCase());
507:       assertFalse(node1.isFalse());
508:       assertFalse(node1.isHook());
509:       assertFalse(node1.isThis());
510:       assertFalse(node1.isThrow());
511:       assertEquals((-1), node1.getLineno());
512:       assertFalse(node1.isIn());
513:       assertFalse(node1.isSetterDef());
514:       assertFalse(node1.hasMoreThanOneChild());
515:       assertFalse(node1.isCatch());
516:       assertFalse(node1.isInstanceOf());
517:       assertFalse(node1.isIf());
518:       assertFalse(node1.isNE());
519:       assertFalse(node1.isTry());
520:       assertFalse(node1.isVoid());
521:       assertFalse(node1.isDebugger());
522:       assertFalse(node1.isFunction());
523:       assertFalse(node1.isRegExp());
524:       assertFalse(node1.isArrayLit());
525:       assertFalse(node1.isFor());
526:       assertFalse(node1.isEmpty());
527:       assertFalse(node1.isDefaultCase());
528:       assertEquals(16, node1.getType());
529:       assertEquals(0, node1.getChildCount());
530:       assertFalse(node1.isGetterDef());
531:       assertFalse(node1.isSwitch());
532:       assertFalse(node1.isParamList());
533:       assertFalse(node1.isStringKey());
534:       assertFalse(node1.isAdd());
535:       assertFalse(node1.isNew());
536:       assertFalse(node1.isCall());
537:       assertFalse(node1.isString());
538:       assertFalse(node1.isDo());
539:       assertFalse(node1.isVar());
540:       assertFalse(node1.isWhile());
541:       assertFalse(node1.isAssignAdd());
542:       assertFalse(node1.isReturn());
543:       assertFalse(node1.isComma());
544:       assertFalse(node1.isOr());
545:       assertFalse(node1.isTypeOf());
546:       assertFalse(node1.isBreak());
547:       assertFalse(node1.isName());
548:       assertFalse(node1.isGetElem());
549:       assertFalse(node1.isDelProp());
550:       assertFalse(node1.isNull());
551:       assertFalse(node1.isTrue());
552:       assertEquals(30, Node.VAR_ARGS_NAME);
553:       assertEquals(49, Node.DIRECT_EVAL);
554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(12, Node.COLUMN_BITS);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(57, Node.LAST_PROP);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(32, Node.INCRDECR_PROP);
561:       assertEquals(46, Node.IS_NAMESPACE);
562:       assertEquals(57, Node.REFLECTED_OBJECT);
563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
564:       assertEquals(29, Node.JSDOC_INFO_PROP);
565:       assertEquals(50, Node.FREE_CALL);
566:       assertEquals(47, Node.IS_DISPATCHER);
567:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(40, Node.ORIGINALNAME_PROP);
570:       assertEquals(36, Node.QUOTED_PROP);
571:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
572:       assertEquals(43, Node.IS_CONSTANT_NAME);
573:       assertEquals(53, Node.INPUT_ID);
574:       assertEquals(55, Node.INFERRED_FUNCTION);
575:       assertEquals(8, Node.FLAG_NO_THROWS);
576:       assertEquals(39, Node.EMPTY_BLOCK);
577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
580:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(48, Node.DIRECTIVES);
584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
585:       assertEquals(37, Node.OPT_ARG_NAME);
586:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
587:       assertEquals(4095, Node.COLUMN_MASK);
588:       assertEquals(32, Node.INCRDECR_PROP);
589:       assertEquals(46, Node.IS_NAMESPACE);
590:       assertEquals(2, Node.POST_FLAG);
591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
592:       assertEquals(12, Node.COLUMN_BITS);
593:       assertEquals(47, Node.IS_DISPATCHER);
594:       assertEquals(30, Node.VAR_ARGS_NAME);
595:       assertEquals(49, Node.DIRECT_EVAL);
596:       assertEquals(56, Node.CHANGE_TIME);
597:       assertEquals(37, Node.OPT_ARG_NAME);
598:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
599:       assertEquals(54, Node.SLASH_V);
600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
601:       assertEquals(50, Node.FREE_CALL);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(1, Node.DECR_FLAG);
604:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
605:       assertEquals(4095, Node.COLUMN_MASK);
606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
607:       assertEquals(8, Node.FLAG_NO_THROWS);
608:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
609:       assertEquals(43, Node.IS_CONSTANT_NAME);
610:       assertEquals(40, Node.ORIGINALNAME_PROP);
611:       assertEquals(48, Node.DIRECTIVES);
612:       assertEquals(52, Node.LENGTH);
613:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
614:       assertEquals(36, Node.QUOTED_PROP);
615:       assertEquals(57, Node.REFLECTED_OBJECT);
616:       assertEquals(29, Node.JSDOC_INFO_PROP);
617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(39, Node.EMPTY_BLOCK);
620:       assertEquals(55, Node.INFERRED_FUNCTION);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
624:       assertSame(node0, node1);
625:       assertSame(node1, node0);
626:       
627:       Iterable<Node> iterable0 = node0.children();
628:       assertFalse(iterable0.contains(node1));
629:       assertNotNull(iterable0);
630:       assertFalse(node0.isGetElem());
631:       assertFalse(node0.isCast());
632:       assertEquals((-1), node0.getSourcePosition());
633:       assertFalse(node0.isNumber());
634:       assertFalse(node0.isTypeOf());
635:       assertFalse(node0.isDec());
636:       assertFalse(node0.hasChildren());
637:       assertFalse(node0.isAssign());
638:       assertFalse(node0.isExprResult());
639:       assertEquals((-1), node0.getLineno());
640:       assertFalse(node0.isLabelName());
641:       assertFalse(node0.isContinue());
642:       assertFalse(node0.isOr());
643:       assertFalse(node0.isNew());
644:       assertFalse(node0.isAssignAdd());
645:       assertFalse(node0.isLabel());
646:       assertFalse(node0.isAdd());
647:       assertFalse(node0.isDo());
648:       assertFalse(node0.isStringKey());
649:       assertFalse(node0.isVar());
650:       assertFalse(node0.isHook());
651:       assertEquals((-1), node0.getCharno());
652:       assertFalse(node0.isParamList());
653:       assertFalse(node0.isSwitch());
654:       assertFalse(node0.isCase());
655:       assertFalse(node0.isCatch());
656:       assertFalse(node0.isInstanceOf());
657:       assertFalse(node0.hasMoreThanOneChild());
658:       assertFalse(node0.isWith());
659:       assertFalse(node0.isRegExp());
660:       assertFalse(node0.isBlock());
661:       assertFalse(node0.isThis());
662:       assertFalse(node0.isScript());
663:       assertFalse(node0.hasOneChild());
664:       assertFalse(node0.isTry());
665:       assertFalse(node0.isFor());
666:       assertFalse(node0.isEmpty());
667:       assertFalse(node0.isGetterDef());
668:       assertFalse(node0.isDebugger());
669:       assertFalse(node0.isTrue());
670:       assertFalse(node0.isNE());
671:       assertFalse(node0.isIf());
672:       assertFalse(node0.isArrayLit());
673:       assertFalse(node0.isVoid());
674:       assertFalse(node0.isDelProp());
675:       assertFalse(node0.isIn());
676:       assertFalse(node0.isFunction());
677:       assertEquals(0, node0.getChildCount());
678:       assertFalse(node0.isSetterDef());
679:       assertFalse(node0.isInc());
680:       assertFalse(node0.isDefaultCase());
681:       assertFalse(node0.isName());
682:       assertFalse(node0.isFalse());
683:       assertFalse(node0.isCall());
684:       assertFalse(node0.isThrow());
685:       assertFalse(node0.isNull());
686:       assertFalse(node0.isComma());
687:       assertFalse(node0.isBreak());
688:       assertFalse(node0.isAnd());
689:       assertFalse(node0.isString());
690:       assertFalse(node0.isWhile());
691:       assertFalse(node0.isObjectLit());
692:       assertFalse(node0.isNot());
693:       assertEquals(16, node0.getType());
694:       assertFalse(node0.isGetProp());
695:       assertFalse(node0.isReturn());
696:       assertEquals(30, Node.VAR_ARGS_NAME);
697:       assertEquals(49, Node.DIRECT_EVAL);
698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
699:       assertEquals(1, Node.DECR_FLAG);
700:       assertEquals(12, Node.COLUMN_BITS);
701:       assertEquals(54, Node.SLASH_V);
702:       assertEquals(57, Node.LAST_PROP);
703:       assertEquals(52, Node.LENGTH);
704:       assertEquals(32, Node.INCRDECR_PROP);
705:       assertEquals(46, Node.IS_NAMESPACE);
706:       assertEquals(57, Node.REFLECTED_OBJECT);
707:       assertEquals(51, Node.STATIC_SOURCE_FILE);
708:       assertEquals(29, Node.JSDOC_INFO_PROP);
709:       assertEquals(50, Node.FREE_CALL);
710:       assertEquals(47, Node.IS_DISPATCHER);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(2, Node.POST_FLAG);
713:       assertEquals(40, Node.ORIGINALNAME_PROP);
714:       assertEquals(36, Node.QUOTED_PROP);
715:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
716:       assertEquals(43, Node.IS_CONSTANT_NAME);
717:       assertEquals(53, Node.INPUT_ID);
718:       assertEquals(55, Node.INFERRED_FUNCTION);
719:       assertEquals(8, Node.FLAG_NO_THROWS);
720:       assertEquals(39, Node.EMPTY_BLOCK);
721:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
725:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
726:       assertEquals(56, Node.CHANGE_TIME);
727:       assertEquals(48, Node.DIRECTIVES);
728:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
729:       assertEquals(37, Node.OPT_ARG_NAME);
730:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
731:       assertEquals(4095, Node.COLUMN_MASK);
732:       assertSame(node0, node1);
733:       
734:       String string0 = node0.getQualifiedName();
735:       assertNull(string0);
736:       assertFalse(node0.isGetElem());
737:       assertFalse(node0.isCast());
738:       assertEquals((-1), node0.getSourcePosition());
739:       assertFalse(node0.isNumber());
740:       assertFalse(node0.isTypeOf());
741:       assertFalse(node0.isDec());
742:       assertFalse(node0.hasChildren());
743:       assertFalse(node0.isAssign());
744:       assertFalse(node0.isExprResult());
745:       assertEquals((-1), node0.getLineno());
746:       assertFalse(node0.isLabelName());
747:       assertFalse(node0.isContinue());
748:       assertFalse(node0.isOr());
749:       assertFalse(node0.isNew());
750:       assertFalse(node0.isAssignAdd());
751:       assertFalse(node0.isLabel());
752:       assertFalse(node0.isAdd());
753:       assertFalse(node0.isDo());
754:       assertFalse(node0.isStringKey());
755:       assertFalse(node0.isVar());
756:       assertFalse(node0.isHook());
757:       assertEquals((-1), node0.getCharno());
758:       assertFalse(node0.isParamList());
759:       assertFalse(node0.isSwitch());
760:       assertFalse(node0.isCase());
761:       assertFalse(node0.isCatch());
762:       assertFalse(node0.isInstanceOf());
763:       assertFalse(node0.hasMoreThanOneChild());
764:       assertFalse(node0.isWith());
765:       assertFalse(node0.isRegExp());
766:       assertFalse(node0.isBlock());
767:       assertFalse(node0.isThis());
768:       assertFalse(node0.isScript());
769:       assertFalse(node0.hasOneChild());
770:       assertFalse(node0.isTry());
771:       assertFalse(node0.isFor());
772:       assertFalse(node0.isEmpty());
773:       assertFalse(node0.isGetterDef());
774:       assertFalse(node0.isDebugger());
775:       assertFalse(node0.isTrue());
776:       assertFalse(node0.isNE());
777:       assertFalse(node0.isIf());
778:       assertFalse(node0.isArrayLit());
779:       assertFalse(node0.isVoid());
780:       assertFalse(node0.isDelProp());
781:       assertFalse(node0.isIn());
782:       assertFalse(node0.isFunction());
783:       assertEquals(0, node0.getChildCount());
784:       assertFalse(node0.isSetterDef());
785:       assertFalse(node0.isInc());
786:       assertFalse(node0.isDefaultCase());
787:       assertFalse(node0.isName());
788:       assertFalse(node0.isFalse());
789:       assertFalse(node0.isCall());
790:       assertFalse(node0.isThrow());
791:       assertFalse(node0.isNull());
792:       assertFalse(node0.isComma());
793:       assertFalse(node0.isBreak());
794:       assertFalse(node0.isAnd());
795:       assertFalse(node0.isString());
796:       assertFalse(node0.isWhile());
797:       assertFalse(node0.isObjectLit());
798:       assertFalse(node0.isNot());
799:       assertEquals(16, node0.getType());
800:       assertFalse(node0.isGetProp());
801:       assertFalse(node0.isReturn());
802:       assertEquals(30, Node.VAR_ARGS_NAME);
803:       assertEquals(49, Node.DIRECT_EVAL);
804:       assertEquals(15, Node.NO_SIDE_EFFECTS);
805:       assertEquals(1, Node.DECR_FLAG);
806:       assertEquals(12, Node.COLUMN_BITS);
807:       assertEquals(54, Node.SLASH_V);
808:       assertEquals(57, Node.LAST_PROP);
809:       assertEquals(52, Node.LENGTH);
810:       assertEquals(32, Node.INCRDECR_PROP);
811:       assertEquals(46, Node.IS_NAMESPACE);
812:       assertEquals(57, Node.REFLECTED_OBJECT);
813:       assertEquals(51, Node.STATIC_SOURCE_FILE);
814:       assertEquals(29, Node.JSDOC_INFO_PROP);
815:       assertEquals(50, Node.FREE_CALL);
816:       assertEquals(47, Node.IS_DISPATCHER);
817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
818:       assertEquals(2, Node.POST_FLAG);
819:       assertEquals(40, Node.ORIGINALNAME_PROP);
820:       assertEquals(36, Node.QUOTED_PROP);
821:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
822:       assertEquals(43, Node.IS_CONSTANT_NAME);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(55, Node.INFERRED_FUNCTION);
825:       assertEquals(8, Node.FLAG_NO_THROWS);
826:       assertEquals(39, Node.EMPTY_BLOCK);
827:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
829:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
831:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
832:       assertEquals(56, Node.CHANGE_TIME);
833:       assertEquals(48, Node.DIRECTIVES);
834:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertSame(node0, node1);
839:       
840:       boolean boolean1 = node0.isCast();
841:       assertFalse(boolean1);
842:       assertFalse(node0.isGetElem());
843:       assertFalse(node0.isCast());
844:       assertEquals((-1), node0.getSourcePosition());
845:       assertFalse(node0.isNumber());
846:       assertFalse(node0.isTypeOf());
847:       assertFalse(node0.isDec());
848:       assertFalse(node0.hasChildren());
849:       assertFalse(node0.isAssign());
850:       assertFalse(node0.isExprResult());
851:       assertEquals((-1), node0.getLineno());
852:       assertFalse(node0.isLabelName());
853:       assertFalse(node0.isContinue());
854:       assertFalse(node0.isOr());
855:       assertFalse(node0.isNew());
856:       assertFalse(node0.isAssignAdd());
857:       assertFalse(node0.isLabel());
858:       assertFalse(node0.isAdd());
859:       assertFalse(node0.isDo());
860:       assertFalse(node0.isStringKey());
861:       assertFalse(node0.isVar());
862:       assertFalse(node0.isHook());
863:       assertEquals((-1), node0.getCharno());
864:       assertFalse(node0.isParamList());
865:       assertFalse(node0.isSwitch());
866:       assertFalse(node0.isCase());
867:       assertFalse(node0.isCatch());
868:       assertFalse(node0.isInstanceOf());
869:       assertFalse(node0.hasMoreThanOneChild());
870:       assertFalse(node0.isWith());
871:       assertFalse(node0.isRegExp());
872:       assertFalse(node0.isBlock());
873:       assertFalse(node0.isThis());
874:       assertFalse(node0.isScript());
875:       assertFalse(node0.hasOneChild());
876:       assertFalse(node0.isTry());
877:       assertFalse(node0.isFor());
878:       assertFalse(node0.isEmpty());
879:       assertFalse(node0.isGetterDef());
880:       assertFalse(node0.isDebugger());
881:       assertFalse(node0.isTrue());
882:       assertFalse(node0.isNE());
883:       assertFalse(node0.isIf());
884:       assertFalse(node0.isArrayLit());
885:       assertFalse(node0.isVoid());
886:       assertFalse(node0.isDelProp());
887:       assertFalse(node0.isIn());
888:       assertFalse(node0.isFunction());
889:       assertEquals(0, node0.getChildCount());
890:       assertFalse(node0.isSetterDef());
891:       assertFalse(node0.isInc());
892:       assertFalse(node0.isDefaultCase());
893:       assertFalse(node0.isName());
894:       assertFalse(node0.isFalse());
895:       assertFalse(node0.isCall());
896:       assertFalse(node0.isThrow());
897:       assertFalse(node0.isNull());
898:       assertFalse(node0.isComma());
899:       assertFalse(node0.isBreak());
900:       assertFalse(node0.isAnd());
901:       assertFalse(node0.isString());
902:       assertFalse(node0.isWhile());
903:       assertFalse(node0.isObjectLit());
904:       assertFalse(node0.isNot());
905:       assertEquals(16, node0.getType());
906:       assertFalse(node0.isGetProp());
907:       assertFalse(node0.isReturn());
908:       assertEquals(30, Node.VAR_ARGS_NAME);
909:       assertEquals(49, Node.DIRECT_EVAL);
910:       assertEquals(15, Node.NO_SIDE_EFFECTS);
911:       assertEquals(1, Node.DECR_FLAG);
912:       assertEquals(12, Node.COLUMN_BITS);
913:       assertEquals(54, Node.SLASH_V);
914:       assertEquals(57, Node.LAST_PROP);
915:       assertEquals(52, Node.LENGTH);
916:       assertEquals(32, Node.INCRDECR_PROP);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(57, Node.REFLECTED_OBJECT);
919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
920:       assertEquals(29, Node.JSDOC_INFO_PROP);
921:       assertEquals(50, Node.FREE_CALL);
922:       assertEquals(47, Node.IS_DISPATCHER);
923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
924:       assertEquals(2, Node.POST_FLAG);
925:       assertEquals(40, Node.ORIGINALNAME_PROP);
926:       assertEquals(36, Node.QUOTED_PROP);
927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
928:       assertEquals(43, Node.IS_CONSTANT_NAME);
929:       assertEquals(53, Node.INPUT_ID);
930:       assertEquals(55, Node.INFERRED_FUNCTION);
931:       assertEquals(8, Node.FLAG_NO_THROWS);
932:       assertEquals(39, Node.EMPTY_BLOCK);
933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
937:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
938:       assertEquals(56, Node.CHANGE_TIME);
939:       assertEquals(48, Node.DIRECTIVES);
940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
943:       assertEquals(4095, Node.COLUMN_MASK);
944:       assertTrue(boolean1 == boolean0);
945:       assertSame(node0, node1);
946:       
947:       Node node2 = Node.newString(47, "Object#Element", 1, 33);
948:       assertNotNull(node2);
949:       assertFalse(node2.isComma());
950:       assertFalse(node2.isAnd());
951:       assertFalse(node2.isThis());
952:       assertFalse(node2.isNot());
953:       assertFalse(node2.isObjectLit());
954:       assertFalse(node2.isGetProp());
955:       assertFalse(node2.isScript());
956:       assertFalse(node2.isSwitch());
957:       assertFalse(node2.isThrow());
958:       assertFalse(node2.isLabelName());
959:       assertFalse(node2.isFalse());
960:       assertFalse(node2.isCast());
961:       assertFalse(node2.isReturn());
962:       assertFalse(node2.isAssignAdd());
963:       assertFalse(node2.isLabel());
964:       assertFalse(node2.isOr());
965:       assertFalse(node2.isString());
966:       assertFalse(node2.isWhile());
967:       assertFalse(node2.isDo());
968:       assertFalse(node2.isAdd());
969:       assertFalse(node2.isEmpty());
970:       assertTrue(node2.isRegExp());
971:       assertFalse(node2.isVoid());
972:       assertFalse(node2.isTrue());
973:       assertFalse(node2.isDelProp());
974:       assertFalse(node2.hasChildren());
975:       assertFalse(node2.isBreak());
976:       assertFalse(node2.isName());
977:       assertFalse(node2.isTypeOf());
978:       assertFalse(node2.isAssign());
979:       assertFalse(node2.isDec());
980:       assertFalse(node2.isCall());
981:       assertFalse(node2.isExprResult());
982:       assertFalse(node2.isGetElem());
983:       assertEquals(1, node2.getLineno());
984:       assertEquals(0, node2.getChildCount());
985:       assertFalse(node2.isParamList());
986:       assertFalse(node2.isNull());
987:       assertFalse(node2.isDefaultCase());
988:       assertEquals(4129, node2.getSourcePosition());
989:       assertFalse(node2.isSetterDef());
990:       assertFalse(node2.isNew());
991:       assertFalse(node2.isArrayLit());
992:       assertFalse(node2.isDebugger());
993:       assertFalse(node2.isVar());
994:       assertFalse(node2.isStringKey());
995:       assertFalse(node2.isContinue());
996:       assertFalse(node2.isFunction());
997:       assertFalse(node2.isIn());
998:       assertEquals(47, node2.getType());
999:       assertFalse(node2.isNE());
1000:       assertFalse(node2.isGetterDef());
1001:       assertFalse(node2.isNumber());
1002:       assertFalse(node2.isCase());
1003:       assertFalse(node2.isInc());
1004:       assertFalse(node2.isHook());
1005:       assertFalse(node2.hasOneChild());
1006:       assertFalse(node2.isTry());
1007:       assertEquals(33, node2.getCharno());
1008:       assertFalse(node2.isFor());
1009:       assertFalse(node2.isBlock());
1010:       assertFalse(node2.isIf());
1011:       assertFalse(node2.isWith());
1012:       assertFalse(node2.hasMoreThanOneChild());
1013:       assertFalse(node2.isCatch());
1014:       assertFalse(node2.isInstanceOf());
1015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1016:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1017:       assertEquals(53, Node.INPUT_ID);
1018:       assertEquals(29, Node.JSDOC_INFO_PROP);
1019:       assertEquals(2, Node.POST_FLAG);
1020:       assertEquals(47, Node.IS_DISPATCHER);
1021:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1022:       assertEquals(12, Node.COLUMN_BITS);
1023:       assertEquals(32, Node.INCRDECR_PROP);
1024:       assertEquals(46, Node.IS_NAMESPACE);
1025:       assertEquals(1, Node.DECR_FLAG);
1026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1027:       assertEquals(43, Node.IS_CONSTANT_NAME);
1028:       assertEquals(50, Node.FREE_CALL);
1029:       assertEquals(54, Node.SLASH_V);
1030:       assertEquals(57, Node.REFLECTED_OBJECT);
1031:       assertEquals(52, Node.LENGTH);
1032:       assertEquals(40, Node.ORIGINALNAME_PROP);
1033:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1034:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1035:       assertEquals(57, Node.LAST_PROP);
1036:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1037:       assertEquals(30, Node.VAR_ARGS_NAME);
1038:       assertEquals(55, Node.INFERRED_FUNCTION);
1039:       assertEquals(4095, Node.COLUMN_MASK);
1040:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1041:       assertEquals(48, Node.DIRECTIVES);
1042:       assertEquals(49, Node.DIRECT_EVAL);
1043:       assertEquals(37, Node.OPT_ARG_NAME);
1044:       assertEquals(39, Node.EMPTY_BLOCK);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(36, Node.QUOTED_PROP);
1048:       assertEquals(8, Node.FLAG_NO_THROWS);
1049:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1050:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1051:       assertFalse(node2.equals((Object)node0));
1052:       assertFalse(node2.equals((Object)node1));
1053:       
1054:       // Undeclared exception!
1055:       try { 
1056:         node0.removeChild(node1);
1057:         fail("Expecting exception: NullPointerException");
1058:       
1059:       } catch(NullPointerException e) {
1060:          //
1061:          // no message in exception (getMessage() returned null)
1062:          //
1063:          verifyException("com.google.javascript.rhino.Node", e);
1064:       }
1065:   }
1066: }
RegularFileObject[/tmp/EvoSuite_314_1628157546470/com/google/javascript/rhino/Node_314_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_314_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_314_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_314_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.NamedType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.javascript.rhino.JSDocInfo$Marker",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Platform",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 09:59:06.607 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(16);
assertNotNull(node0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(16, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean0 = node0.isWith();
assertFalse(boolean0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(16, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

JSDocInfo jSDocInfo0 = new JSDocInfo(true);
assertNotNull(jSDocInfo0);
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());

Set<String> set0 = jSDocInfo0.getModifies();
assertNotNull(set0);
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());

Node node1 = node0.setJSDocInfo(jSDocInfo0);
assertNotNull(node1);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(16, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(16, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertSame(node0, node1);
assertSame(node1, node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(16, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertSame(node0, node1);

String string0 = node0.getQualifiedName();
assertNull(string0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(16, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertSame(node0, node1);

boolean boolean1 = node0.isCast();
assertFalse(boolean1);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(16, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean1 == boolean0);
assertSame(node0, node1);

Node node2 = Node.newString(47, "Object#Element", 1, 33);
assertNotNull(node2);
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertTrue(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals(1, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertEquals(4129, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertEquals(47, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertEquals(33, node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node0.removeChild(node1);

[MASTER] 09:59:12.086 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_359_1628157551568/com/google/javascript/rhino/Node_359_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_359_1628157551568/com/google/javascript/rhino/Node_359_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:12.086 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:12.086 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:12.088 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2465
[MASTER] 09:59:12.089 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_359_1628157551568/com/google/javascript/rhino/Node_359_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_359_tmp__ESTest extends Node_359_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(0, "~sq`cI[jn", 0, 29);
23:       assertNotNull(node0);
24:       assertFalse(node0.isInstanceOf());
25:       assertFalse(node0.isObjectLit());
26:       assertFalse(node0.isComma());
27:       assertFalse(node0.isNot());
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.isScript());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isThrow());
32:       assertFalse(node0.isGetProp());
33:       assertFalse(node0.hasOneChild());
34:       assertFalse(node0.isCast());
35:       assertFalse(node0.isFalse());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isLabelName());
38:       assertFalse(node0.isSwitch());
39:       assertFalse(node0.isIn());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.isNumber());
42:       assertFalse(node0.hasMoreThanOneChild());
43:       assertFalse(node0.isFor());
44:       assertFalse(node0.isInc());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.isBlock());
48:       assertEquals(29, node0.getCharno());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isIf());
51:       assertFalse(node0.isNE());
52:       assertEquals(0, node0.getChildCount());
53:       assertEquals(0, node0.getLineno());
54:       assertFalse(node0.isCatch());
55:       assertEquals(29, node0.getSourcePosition());
56:       assertFalse(node0.isDefaultCase());
57:       assertFalse(node0.isSetterDef());
58:       assertFalse(node0.isTry());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isOr());
70:       assertFalse(node0.hasChildren());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.isWhile());
74:       assertFalse(node0.isEmpty());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isAssignAdd());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isCall());
80:       assertEquals(0, node0.getType());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isDelProp());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isNull());
85:       assertFalse(node0.isTrue());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isVoid());
89:       assertFalse(node0.isName());
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(56, Node.CHANGE_TIME);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(39, Node.EMPTY_BLOCK);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(29, Node.JSDOC_INFO_PROP);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
123:       assertEquals(52, Node.LENGTH);
124:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
125:       assertEquals(55, Node.INFERRED_FUNCTION);
126:       
127:       Node node1 = Node.newString(30, "~sq`cI[jn", 57, 40);
128:       assertNotNull(node1);
129:       assertFalse(node1.isCatch());
130:       assertEquals(0, node1.getChildCount());
131:       assertFalse(node1.isRegExp());
132:       assertFalse(node1.isSetterDef());
133:       assertFalse(node1.isDefaultCase());
134:       assertFalse(node1.isTry());
135:       assertFalse(node1.isFor());
136:       assertFalse(node1.isEmpty());
137:       assertFalse(node1.isCall());
138:       assertFalse(node1.isNE());
139:       assertFalse(node1.isTrue());
140:       assertFalse(node1.isNull());
141:       assertFalse(node1.isIf());
142:       assertFalse(node1.isVoid());
143:       assertFalse(node1.isDelProp());
144:       assertFalse(node1.isName());
145:       assertFalse(node1.isContinue());
146:       assertEquals(57, node1.getLineno());
147:       assertEquals(233512, node1.getSourcePosition());
148:       assertFalse(node1.isReturn());
149:       assertFalse(node1.isString());
150:       assertFalse(node1.isIn());
151:       assertFalse(node1.hasChildren());
152:       assertFalse(node1.isInc());
153:       assertFalse(node1.isWhile());
154:       assertFalse(node1.isCast());
155:       assertFalse(node1.isThrow());
156:       assertTrue(node1.isNew());
157:       assertFalse(node1.isFalse());
158:       assertFalse(node1.isFunction());
159:       assertFalse(node1.isDebugger());
160:       assertFalse(node1.isAnd());
161:       assertFalse(node1.isInstanceOf());
162:       assertFalse(node1.isNot());
163:       assertFalse(node1.isWith());
164:       assertFalse(node1.isObjectLit());
165:       assertFalse(node1.isComma());
166:       assertFalse(node1.isThis());
167:       assertFalse(node1.isGetProp());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.hasOneChild());
170:       assertFalse(node1.isGetElem());
171:       assertFalse(node1.isHook());
172:       assertFalse(node1.isAssign());
173:       assertFalse(node1.isDec());
174:       assertFalse(node1.isTypeOf());
175:       assertFalse(node1.isBreak());
176:       assertFalse(node1.isExprResult());
177:       assertEquals(40, node1.getCharno());
178:       assertFalse(node1.hasMoreThanOneChild());
179:       assertFalse(node1.isOr());
180:       assertFalse(node1.isLabel());
181:       assertFalse(node1.isBlock());
182:       assertFalse(node1.isAdd());
183:       assertFalse(node1.isAssignAdd());
184:       assertFalse(node1.isDo());
185:       assertFalse(node1.isCase());
186:       assertFalse(node1.isArrayLit());
187:       assertFalse(node1.isStringKey());
188:       assertFalse(node1.isVar());
189:       assertFalse(node1.isNumber());
190:       assertFalse(node1.isGetterDef());
191:       assertFalse(node1.isSwitch());
192:       assertFalse(node1.isParamList());
193:       assertFalse(node1.isLabelName());
194:       assertEquals(30, node1.getType());
195:       assertEquals(47, Node.IS_DISPATCHER);
196:       assertEquals(56, Node.CHANGE_TIME);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(37, Node.OPT_ARG_NAME);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(49, Node.DIRECT_EVAL);
203:       assertEquals(57, Node.LAST_PROP);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(39, Node.EMPTY_BLOCK);
207:       assertEquals(53, Node.INPUT_ID);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(40, Node.ORIGINALNAME_PROP);
215:       assertEquals(50, Node.FREE_CALL);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
218:       assertEquals(48, Node.DIRECTIVES);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(1, Node.DECR_FLAG);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       
232:       Node node2 = new Node(31, node1, node0, node1);
233:       assertNotNull(node2);
234:       assertFalse(node0.isInstanceOf());
235:       assertFalse(node0.isObjectLit());
236:       assertFalse(node0.isComma());
237:       assertFalse(node0.isNot());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isScript());
240:       assertFalse(node0.isThis());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isGetProp());
243:       assertFalse(node0.hasOneChild());
244:       assertFalse(node0.isCast());
245:       assertFalse(node0.isFalse());
246:       assertFalse(node0.isAnd());
247:       assertFalse(node0.isLabelName());
248:       assertFalse(node0.isSwitch());
249:       assertFalse(node0.isIn());
250:       assertFalse(node0.isContinue());
251:       assertFalse(node0.isNumber());
252:       assertFalse(node0.hasMoreThanOneChild());
253:       assertFalse(node0.isFor());
254:       assertFalse(node0.isInc());
255:       assertFalse(node0.isCase());
256:       assertFalse(node0.isHook());
257:       assertFalse(node0.isBlock());
258:       assertEquals(29, node0.getCharno());
259:       assertFalse(node0.isRegExp());
260:       assertFalse(node0.isIf());
261:       assertFalse(node0.isNE());
262:       assertEquals(0, node0.getChildCount());
263:       assertEquals(0, node0.getLineno());
264:       assertFalse(node0.isCatch());
265:       assertEquals(29, node0.getSourcePosition());
266:       assertFalse(node0.isDefaultCase());
267:       assertFalse(node0.isSetterDef());
268:       assertFalse(node0.isTry());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isArrayLit());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isFunction());
273:       assertFalse(node0.isGetterDef());
274:       assertFalse(node0.isStringKey());
275:       assertFalse(node0.isParamList());
276:       assertFalse(node0.isLabel());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.isTypeOf());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.hasChildren());
281:       assertFalse(node0.isString());
282:       assertFalse(node0.isDec());
283:       assertFalse(node0.isWhile());
284:       assertFalse(node0.isEmpty());
285:       assertFalse(node0.isNew());
286:       assertFalse(node0.isAssignAdd());
287:       assertFalse(node0.isDo());
288:       assertFalse(node0.isAdd());
289:       assertFalse(node0.isCall());
290:       assertEquals(0, node0.getType());
291:       assertFalse(node0.isAssign());
292:       assertFalse(node0.isDelProp());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isNull());
295:       assertFalse(node0.isTrue());
296:       assertFalse(node0.isGetElem());
297:       assertFalse(node0.isExprResult());
298:       assertFalse(node0.isVoid());
299:       assertFalse(node0.isName());
300:       assertFalse(node1.isCatch());
301:       assertEquals(0, node1.getChildCount());
302:       assertFalse(node1.isRegExp());
303:       assertFalse(node1.isSetterDef());
304:       assertFalse(node1.isDefaultCase());
305:       assertFalse(node1.isTry());
306:       assertFalse(node1.isFor());
307:       assertFalse(node1.isEmpty());
308:       assertFalse(node1.isCall());
309:       assertFalse(node1.isNE());
310:       assertFalse(node1.isTrue());
311:       assertFalse(node1.isNull());
312:       assertFalse(node1.isIf());
313:       assertFalse(node1.isVoid());
314:       assertFalse(node1.isDelProp());
315:       assertFalse(node1.isName());
316:       assertFalse(node1.isContinue());
317:       assertEquals(57, node1.getLineno());
318:       assertEquals(233512, node1.getSourcePosition());
319:       assertFalse(node1.isReturn());
320:       assertFalse(node1.isString());
321:       assertFalse(node1.isIn());
322:       assertFalse(node1.hasChildren());
323:       assertFalse(node1.isInc());
324:       assertFalse(node1.isWhile());
325:       assertFalse(node1.isCast());
326:       assertFalse(node1.isThrow());
327:       assertTrue(node1.isNew());
328:       assertFalse(node1.isFalse());
329:       assertFalse(node1.isFunction());
330:       assertFalse(node1.isDebugger());
331:       assertFalse(node1.isAnd());
332:       assertFalse(node1.isInstanceOf());
333:       assertFalse(node1.isNot());
334:       assertFalse(node1.isWith());
335:       assertFalse(node1.isObjectLit());
336:       assertFalse(node1.isComma());
337:       assertFalse(node1.isThis());
338:       assertFalse(node1.isGetProp());
339:       assertFalse(node1.isScript());
340:       assertFalse(node1.hasOneChild());
341:       assertFalse(node1.isGetElem());
342:       assertFalse(node1.isHook());
343:       assertFalse(node1.isAssign());
344:       assertFalse(node1.isDec());
345:       assertFalse(node1.isTypeOf());
346:       assertFalse(node1.isBreak());
347:       assertFalse(node1.isExprResult());
348:       assertEquals(40, node1.getCharno());
349:       assertFalse(node1.hasMoreThanOneChild());
350:       assertFalse(node1.isOr());
351:       assertFalse(node1.isLabel());
352:       assertFalse(node1.isBlock());
353:       assertFalse(node1.isAdd());
354:       assertFalse(node1.isAssignAdd());
355:       assertFalse(node1.isDo());
356:       assertFalse(node1.isCase());
357:       assertFalse(node1.isArrayLit());
358:       assertFalse(node1.isStringKey());
359:       assertFalse(node1.isVar());
360:       assertFalse(node1.isNumber());
361:       assertFalse(node1.isGetterDef());
362:       assertFalse(node1.isSwitch());
363:       assertFalse(node1.isParamList());
364:       assertFalse(node1.isLabelName());
365:       assertEquals(30, node1.getType());
366:       assertEquals(1, node2.getChildCount());
367:       assertTrue(node2.hasChildren());
368:       assertFalse(node2.isIn());
369:       assertFalse(node2.isNE());
370:       assertFalse(node2.isIf());
371:       assertFalse(node2.isSwitch());
372:       assertFalse(node2.isArrayLit());
373:       assertFalse(node2.isTry());
374:       assertFalse(node2.isRegExp());
375:       assertFalse(node2.isHook());
376:       assertEquals((-1), node2.getCharno());
377:       assertFalse(node2.isDebugger());
378:       assertFalse(node2.isString());
379:       assertTrue(node2.hasOneChild());
380:       assertFalse(node2.isFor());
381:       assertFalse(node2.isGetterDef());
382:       assertFalse(node2.isCase());
383:       assertFalse(node2.isGetProp());
384:       assertFalse(node2.isInstanceOf());
385:       assertFalse(node2.isThis());
386:       assertFalse(node2.isObjectLit());
387:       assertFalse(node2.isWith());
388:       assertFalse(node2.isFalse());
389:       assertFalse(node2.isAnd());
390:       assertFalse(node2.isCatch());
391:       assertFalse(node2.isFunction());
392:       assertFalse(node2.isThrow());
393:       assertFalse(node2.isSetterDef());
394:       assertFalse(node2.isInc());
395:       assertFalse(node2.isReturn());
396:       assertEquals((-1), node2.getLineno());
397:       assertFalse(node2.isOr());
398:       assertFalse(node2.isAssignAdd());
399:       assertFalse(node2.hasMoreThanOneChild());
400:       assertFalse(node2.isTypeOf());
401:       assertEquals((-1), node2.getSourcePosition());
402:       assertFalse(node2.isDec());
403:       assertTrue(node2.isDelProp());
404:       assertFalse(node2.isLabel());
405:       assertFalse(node2.isAssign());
406:       assertFalse(node2.isLabelName());
407:       assertFalse(node2.isContinue());
408:       assertFalse(node2.isCast());
409:       assertFalse(node2.isGetElem());
410:       assertEquals(31, node2.getType());
411:       assertFalse(node2.isBlock());
412:       assertFalse(node2.isWhile());
413:       assertFalse(node2.isNot());
414:       assertFalse(node2.isNumber());
415:       assertFalse(node2.isScript());
416:       assertFalse(node2.isComma());
417:       assertFalse(node2.isParamList());
418:       assertFalse(node2.isNull());
419:       assertFalse(node2.isName());
420:       assertFalse(node2.isStringKey());
421:       assertFalse(node2.isCall());
422:       assertFalse(node2.isExprResult());
423:       assertFalse(node2.isVoid());
424:       assertFalse(node2.isBreak());
425:       assertFalse(node2.isAdd());
426:       assertFalse(node2.isTrue());
427:       assertFalse(node2.isVar());
428:       assertFalse(node2.isEmpty());
429:       assertFalse(node2.isDo());
430:       assertFalse(node2.isDefaultCase());
431:       assertFalse(node2.isNew());
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
434:       assertEquals(56, Node.CHANGE_TIME);
435:       assertEquals(43, Node.IS_CONSTANT_NAME);
436:       assertEquals(47, Node.IS_DISPATCHER);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(2, Node.POST_FLAG);
439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
440:       assertEquals(12, Node.COLUMN_BITS);
441:       assertEquals(4095, Node.COLUMN_MASK);
442:       assertEquals(32, Node.INCRDECR_PROP);
443:       assertEquals(1, Node.DECR_FLAG);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
446:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
447:       assertEquals(50, Node.FREE_CALL);
448:       assertEquals(57, Node.REFLECTED_OBJECT);
449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
450:       assertEquals(54, Node.SLASH_V);
451:       assertEquals(48, Node.DIRECTIVES);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(49, Node.DIRECT_EVAL);
456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
457:       assertEquals(36, Node.QUOTED_PROP);
458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
459:       assertEquals(8, Node.FLAG_NO_THROWS);
460:       assertEquals(39, Node.EMPTY_BLOCK);
461:       assertEquals(57, Node.LAST_PROP);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(53, Node.INPUT_ID);
464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(47, Node.IS_DISPATCHER);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(2, Node.POST_FLAG);
471:       assertEquals(37, Node.OPT_ARG_NAME);
472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
474:       assertEquals(30, Node.VAR_ARGS_NAME);
475:       assertEquals(49, Node.DIRECT_EVAL);
476:       assertEquals(57, Node.LAST_PROP);
477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(39, Node.EMPTY_BLOCK);
480:       assertEquals(53, Node.INPUT_ID);
481:       assertEquals(36, Node.QUOTED_PROP);
482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
483:       assertEquals(55, Node.INFERRED_FUNCTION);
484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
485:       assertEquals(29, Node.JSDOC_INFO_PROP);
486:       assertEquals(52, Node.LENGTH);
487:       assertEquals(40, Node.ORIGINALNAME_PROP);
488:       assertEquals(50, Node.FREE_CALL);
489:       assertEquals(57, Node.REFLECTED_OBJECT);
490:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
491:       assertEquals(48, Node.DIRECTIVES);
492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
493:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(1, Node.DECR_FLAG);
496:       assertEquals(51, Node.STATIC_SOURCE_FILE);
497:       assertEquals(32, Node.INCRDECR_PROP);
498:       assertEquals(46, Node.IS_NAMESPACE);
499:       assertEquals(12, Node.COLUMN_BITS);
500:       assertEquals(43, Node.IS_CONSTANT_NAME);
501:       assertEquals(54, Node.SLASH_V);
502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
504:       assertEquals(40, Node.ORIGINALNAME_PROP);
505:       assertEquals(57, Node.REFLECTED_OBJECT);
506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
507:       assertEquals(39, Node.EMPTY_BLOCK);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
510:       assertEquals(52, Node.LENGTH);
511:       assertEquals(8, Node.FLAG_NO_THROWS);
512:       assertEquals(50, Node.FREE_CALL);
513:       assertEquals(4095, Node.COLUMN_MASK);
514:       assertEquals(12, Node.COLUMN_BITS);
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(1, Node.DECR_FLAG);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertEquals(49, Node.DIRECT_EVAL);
519:       assertEquals(32, Node.INCRDECR_PROP);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
523:       assertEquals(53, Node.INPUT_ID);
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(56, Node.CHANGE_TIME);
526:       assertEquals(43, Node.IS_CONSTANT_NAME);
527:       assertEquals(36, Node.QUOTED_PROP);
528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
529:       assertEquals(29, Node.JSDOC_INFO_PROP);
530:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
532:       assertEquals(55, Node.INFERRED_FUNCTION);
533:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
534:       assertEquals(46, Node.IS_NAMESPACE);
535:       assertEquals(57, Node.LAST_PROP);
536:       assertEquals(47, Node.IS_DISPATCHER);
537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
538:       assertEquals(2, Node.POST_FLAG);
539:       assertEquals(30, Node.VAR_ARGS_NAME);
540:       
541:       boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
542:       assertFalse(boolean0);
543:       assertFalse(node0.isInstanceOf());
544:       assertFalse(node0.isObjectLit());
545:       assertFalse(node0.isComma());
546:       assertFalse(node0.isNot());
547:       assertFalse(node0.isWith());
548:       assertFalse(node0.isScript());
549:       assertFalse(node0.isThis());
550:       assertFalse(node0.isThrow());
551:       assertFalse(node0.isGetProp());
552:       assertFalse(node0.hasOneChild());
553:       assertFalse(node0.isCast());
554:       assertFalse(node0.isFalse());
555:       assertFalse(node0.isAnd());
556:       assertFalse(node0.isLabelName());
557:       assertFalse(node0.isSwitch());
558:       assertFalse(node0.isIn());
559:       assertFalse(node0.isContinue());
560:       assertFalse(node0.isNumber());
561:       assertFalse(node0.hasMoreThanOneChild());
562:       assertFalse(node0.isFor());
563:       assertFalse(node0.isInc());
564:       assertFalse(node0.isCase());
565:       assertFalse(node0.isHook());
566:       assertFalse(node0.isBlock());
567:       assertEquals(29, node0.getCharno());
568:       assertFalse(node0.isRegExp());
569:       assertFalse(node0.isIf());
570:       assertFalse(node0.isNE());
571:       assertEquals(0, node0.getChildCount());
572:       assertEquals(0, node0.getLineno());
573:       assertFalse(node0.isCatch());
574:       assertEquals(29, node0.getSourcePosition());
575:       assertFalse(node0.isDefaultCase());
576:       assertFalse(node0.isSetterDef());
577:       assertFalse(node0.isTry());
578:       assertFalse(node0.isVar());
579:       assertFalse(node0.isArrayLit());
580:       assertFalse(node0.isDebugger());
581:       assertFalse(node0.isFunction());
582:       assertFalse(node0.isGetterDef());
583:       assertFalse(node0.isStringKey());
584:       assertFalse(node0.isParamList());
585:       assertFalse(node0.isLabel());
586:       assertFalse(node0.isReturn());
587:       assertFalse(node0.isTypeOf());
588:       assertFalse(node0.isOr());
589:       assertFalse(node0.hasChildren());
590:       assertFalse(node0.isString());
591:       assertFalse(node0.isDec());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.isEmpty());
594:       assertFalse(node0.isNew());
595:       assertFalse(node0.isAssignAdd());
596:       assertFalse(node0.isDo());
597:       assertFalse(node0.isAdd());
598:       assertFalse(node0.isCall());
599:       assertEquals(0, node0.getType());
600:       assertFalse(node0.isAssign());
601:       assertFalse(node0.isDelProp());
602:       assertFalse(node0.isBreak());
603:       assertFalse(node0.isNull());
604:       assertFalse(node0.isTrue());
605:       assertFalse(node0.isGetElem());
606:       assertFalse(node0.isExprResult());
607:       assertFalse(node0.isVoid());
608:       assertFalse(node0.isName());
609:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
610:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
611:       assertEquals(56, Node.CHANGE_TIME);
612:       assertEquals(43, Node.IS_CONSTANT_NAME);
613:       assertEquals(47, Node.IS_DISPATCHER);
614:       assertEquals(37, Node.OPT_ARG_NAME);
615:       assertEquals(2, Node.POST_FLAG);
616:       assertEquals(51, Node.STATIC_SOURCE_FILE);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(4095, Node.COLUMN_MASK);
619:       assertEquals(32, Node.INCRDECR_PROP);
620:       assertEquals(1, Node.DECR_FLAG);
621:       assertEquals(46, Node.IS_NAMESPACE);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
624:       assertEquals(50, Node.FREE_CALL);
625:       assertEquals(57, Node.REFLECTED_OBJECT);
626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
627:       assertEquals(54, Node.SLASH_V);
628:       assertEquals(48, Node.DIRECTIVES);
629:       assertEquals(30, Node.VAR_ARGS_NAME);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(57, Node.LAST_PROP);
639:       assertEquals(29, Node.JSDOC_INFO_PROP);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
642:       assertEquals(52, Node.LENGTH);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(55, Node.INFERRED_FUNCTION);
645:       
646:       boolean boolean1 = node2.isInc();
647:       assertFalse(boolean1);
648:       assertFalse(node0.isInstanceOf());
649:       assertFalse(node0.isObjectLit());
650:       assertFalse(node0.isComma());
651:       assertFalse(node0.isNot());
652:       assertFalse(node0.isWith());
653:       assertFalse(node0.isScript());
654:       assertFalse(node0.isThis());
655:       assertFalse(node0.isThrow());
656:       assertFalse(node0.isGetProp());
657:       assertFalse(node0.hasOneChild());
658:       assertFalse(node0.isCast());
659:       assertFalse(node0.isFalse());
660:       assertFalse(node0.isAnd());
661:       assertFalse(node0.isLabelName());
662:       assertFalse(node0.isSwitch());
663:       assertFalse(node0.isIn());
664:       assertFalse(node0.isContinue());
665:       assertFalse(node0.isNumber());
666:       assertFalse(node0.hasMoreThanOneChild());
667:       assertFalse(node0.isFor());
668:       assertFalse(node0.isInc());
669:       assertFalse(node0.isCase());
670:       assertFalse(node0.isHook());
671:       assertFalse(node0.isBlock());
672:       assertEquals(29, node0.getCharno());
673:       assertFalse(node0.isRegExp());
674:       assertFalse(node0.isIf());
675:       assertFalse(node0.isNE());
676:       assertEquals(0, node0.getChildCount());
677:       assertEquals(0, node0.getLineno());
678:       assertFalse(node0.isCatch());
679:       assertEquals(29, node0.getSourcePosition());
680:       assertFalse(node0.isDefaultCase());
681:       assertFalse(node0.isSetterDef());
682:       assertFalse(node0.isTry());
683:       assertFalse(node0.isVar());
684:       assertFalse(node0.isArrayLit());
685:       assertFalse(node0.isDebugger());
686:       assertFalse(node0.isFunction());
687:       assertFalse(node0.isGetterDef());
688:       assertFalse(node0.isStringKey());
689:       assertFalse(node0.isParamList());
690:       assertFalse(node0.isLabel());
691:       assertFalse(node0.isReturn());
692:       assertFalse(node0.isTypeOf());
693:       assertFalse(node0.isOr());
694:       assertFalse(node0.hasChildren());
695:       assertFalse(node0.isString());
696:       assertFalse(node0.isDec());
697:       assertFalse(node0.isWhile());
698:       assertFalse(node0.isEmpty());
699:       assertFalse(node0.isNew());
700:       assertFalse(node0.isAssignAdd());
701:       assertFalse(node0.isDo());
702:       assertFalse(node0.isAdd());
703:       assertFalse(node0.isCall());
704:       assertEquals(0, node0.getType());
705:       assertFalse(node0.isAssign());
706:       assertFalse(node0.isDelProp());
707:       assertFalse(node0.isBreak());
708:       assertFalse(node0.isNull());
709:       assertFalse(node0.isTrue());
710:       assertFalse(node0.isGetElem());
711:       assertFalse(node0.isExprResult());
712:       assertFalse(node0.isVoid());
713:       assertFalse(node0.isName());
714:       assertFalse(node1.isCatch());
715:       assertEquals(0, node1.getChildCount());
716:       assertFalse(node1.isRegExp());
717:       assertFalse(node1.isSetterDef());
718:       assertFalse(node1.isDefaultCase());
719:       assertFalse(node1.isTry());
720:       assertFalse(node1.isFor());
721:       assertFalse(node1.isEmpty());
722:       assertFalse(node1.isCall());
723:       assertFalse(node1.isNE());
724:       assertFalse(node1.isTrue());
725:       assertFalse(node1.isNull());
726:       assertFalse(node1.isIf());
727:       assertFalse(node1.isVoid());
728:       assertFalse(node1.isDelProp());
729:       assertFalse(node1.isName());
730:       assertFalse(node1.isContinue());
731:       assertEquals(57, node1.getLineno());
732:       assertEquals(233512, node1.getSourcePosition());
733:       assertFalse(node1.isReturn());
734:       assertFalse(node1.isString());
735:       assertFalse(node1.isIn());
736:       assertFalse(node1.hasChildren());
737:       assertFalse(node1.isInc());
738:       assertFalse(node1.isWhile());
739:       assertFalse(node1.isCast());
740:       assertFalse(node1.isThrow());
741:       assertTrue(node1.isNew());
742:       assertFalse(node1.isFalse());
743:       assertFalse(node1.isFunction());
744:       assertFalse(node1.isDebugger());
745:       assertFalse(node1.isAnd());
746:       assertFalse(node1.isInstanceOf());
747:       assertFalse(node1.isNot());
748:       assertFalse(node1.isWith());
749:       assertFalse(node1.isObjectLit());
750:       assertFalse(node1.isComma());
751:       assertFalse(node1.isThis());
752:       assertFalse(node1.isGetProp());
753:       assertFalse(node1.isScript());
754:       assertFalse(node1.hasOneChild());
755:       assertFalse(node1.isGetElem());
756:       assertFalse(node1.isHook());
757:       assertFalse(node1.isAssign());
758:       assertFalse(node1.isDec());
759:       assertFalse(node1.isTypeOf());
760:       assertFalse(node1.isBreak());
761:       assertFalse(node1.isExprResult());
762:       assertEquals(40, node1.getCharno());
763:       assertFalse(node1.hasMoreThanOneChild());
764:       assertFalse(node1.isOr());
765:       assertFalse(node1.isLabel());
766:       assertFalse(node1.isBlock());
767:       assertFalse(node1.isAdd());
768:       assertFalse(node1.isAssignAdd());
769:       assertFalse(node1.isDo());
770:       assertFalse(node1.isCase());
771:       assertFalse(node1.isArrayLit());
772:       assertFalse(node1.isStringKey());
773:       assertFalse(node1.isVar());
774:       assertFalse(node1.isNumber());
775:       assertFalse(node1.isGetterDef());
776:       assertFalse(node1.isSwitch());
777:       assertFalse(node1.isParamList());
778:       assertFalse(node1.isLabelName());
779:       assertEquals(30, node1.getType());
780:       assertEquals(1, node2.getChildCount());
781:       assertTrue(node2.hasChildren());
782:       assertFalse(node2.isIn());
783:       assertFalse(node2.isNE());
784:       assertFalse(node2.isIf());
785:       assertFalse(node2.isSwitch());
786:       assertFalse(node2.isArrayLit());
787:       assertFalse(node2.isTry());
788:       assertFalse(node2.isRegExp());
789:       assertFalse(node2.isHook());
790:       assertEquals((-1), node2.getCharno());
791:       assertFalse(node2.isDebugger());
792:       assertFalse(node2.isString());
793:       assertTrue(node2.hasOneChild());
794:       assertFalse(node2.isFor());
795:       assertFalse(node2.isGetterDef());
796:       assertFalse(node2.isCase());
797:       assertFalse(node2.isGetProp());
798:       assertFalse(node2.isInstanceOf());
799:       assertFalse(node2.isThis());
800:       assertFalse(node2.isObjectLit());
801:       assertFalse(node2.isWith());
802:       assertFalse(node2.isFalse());
803:       assertFalse(node2.isAnd());
804:       assertFalse(node2.isCatch());
805:       assertFalse(node2.isFunction());
806:       assertFalse(node2.isThrow());
807:       assertFalse(node2.isSetterDef());
808:       assertFalse(node2.isInc());
809:       assertFalse(node2.isReturn());
810:       assertEquals((-1), node2.getLineno());
811:       assertFalse(node2.isOr());
812:       assertFalse(node2.isAssignAdd());
813:       assertFalse(node2.hasMoreThanOneChild());
814:       assertFalse(node2.isTypeOf());
815:       assertEquals((-1), node2.getSourcePosition());
816:       assertFalse(node2.isDec());
817:       assertTrue(node2.isDelProp());
818:       assertFalse(node2.isLabel());
819:       assertFalse(node2.isAssign());
820:       assertFalse(node2.isLabelName());
821:       assertFalse(node2.isContinue());
822:       assertFalse(node2.isCast());
823:       assertFalse(node2.isGetElem());
824:       assertEquals(31, node2.getType());
825:       assertFalse(node2.isBlock());
826:       assertFalse(node2.isWhile());
827:       assertFalse(node2.isNot());
828:       assertFalse(node2.isNumber());
829:       assertFalse(node2.isScript());
830:       assertFalse(node2.isComma());
831:       assertFalse(node2.isParamList());
832:       assertFalse(node2.isNull());
833:       assertFalse(node2.isName());
834:       assertFalse(node2.isStringKey());
835:       assertFalse(node2.isCall());
836:       assertFalse(node2.isExprResult());
837:       assertFalse(node2.isVoid());
838:       assertFalse(node2.isBreak());
839:       assertFalse(node2.isAdd());
840:       assertFalse(node2.isTrue());
841:       assertFalse(node2.isVar());
842:       assertFalse(node2.isEmpty());
843:       assertFalse(node2.isDo());
844:       assertFalse(node2.isDefaultCase());
845:       assertFalse(node2.isNew());
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
848:       assertEquals(56, Node.CHANGE_TIME);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(47, Node.IS_DISPATCHER);
851:       assertEquals(37, Node.OPT_ARG_NAME);
852:       assertEquals(2, Node.POST_FLAG);
853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
854:       assertEquals(12, Node.COLUMN_BITS);
855:       assertEquals(4095, Node.COLUMN_MASK);
856:       assertEquals(32, Node.INCRDECR_PROP);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(46, Node.IS_NAMESPACE);
859:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
861:       assertEquals(50, Node.FREE_CALL);
862:       assertEquals(57, Node.REFLECTED_OBJECT);
863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
864:       assertEquals(54, Node.SLASH_V);
865:       assertEquals(48, Node.DIRECTIVES);
866:       assertEquals(30, Node.VAR_ARGS_NAME);
867:       assertEquals(40, Node.ORIGINALNAME_PROP);
868:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
869:       assertEquals(49, Node.DIRECT_EVAL);
870:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
871:       assertEquals(36, Node.QUOTED_PROP);
872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
873:       assertEquals(8, Node.FLAG_NO_THROWS);
874:       assertEquals(39, Node.EMPTY_BLOCK);
875:       assertEquals(57, Node.LAST_PROP);
876:       assertEquals(29, Node.JSDOC_INFO_PROP);
877:       assertEquals(53, Node.INPUT_ID);
878:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
879:       assertEquals(52, Node.LENGTH);
880:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
881:       assertEquals(55, Node.INFERRED_FUNCTION);
882:       assertEquals(47, Node.IS_DISPATCHER);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(37, Node.OPT_ARG_NAME);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(30, Node.VAR_ARGS_NAME);
889:       assertEquals(49, Node.DIRECT_EVAL);
890:       assertEquals(57, Node.LAST_PROP);
891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(39, Node.EMPTY_BLOCK);
894:       assertEquals(53, Node.INPUT_ID);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(15, Node.NO_SIDE_EFFECTS);
897:       assertEquals(55, Node.INFERRED_FUNCTION);
898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
899:       assertEquals(29, Node.JSDOC_INFO_PROP);
900:       assertEquals(52, Node.LENGTH);
901:       assertEquals(40, Node.ORIGINALNAME_PROP);
902:       assertEquals(50, Node.FREE_CALL);
903:       assertEquals(57, Node.REFLECTED_OBJECT);
904:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
905:       assertEquals(48, Node.DIRECTIVES);
906:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
907:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
908:       assertEquals(4095, Node.COLUMN_MASK);
909:       assertEquals(1, Node.DECR_FLAG);
910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
911:       assertEquals(32, Node.INCRDECR_PROP);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(12, Node.COLUMN_BITS);
914:       assertEquals(43, Node.IS_CONSTANT_NAME);
915:       assertEquals(54, Node.SLASH_V);
916:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertEquals(57, Node.REFLECTED_OBJECT);
920:       assertEquals(15, Node.NO_SIDE_EFFECTS);
921:       assertEquals(39, Node.EMPTY_BLOCK);
922:       assertEquals(54, Node.SLASH_V);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(52, Node.LENGTH);
925:       assertEquals(8, Node.FLAG_NO_THROWS);
926:       assertEquals(50, Node.FREE_CALL);
927:       assertEquals(4095, Node.COLUMN_MASK);
928:       assertEquals(12, Node.COLUMN_BITS);
929:       assertEquals(48, Node.DIRECTIVES);
930:       assertEquals(1, Node.DECR_FLAG);
931:       assertEquals(37, Node.OPT_ARG_NAME);
932:       assertEquals(49, Node.DIRECT_EVAL);
933:       assertEquals(32, Node.INCRDECR_PROP);
934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
935:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(53, Node.INPUT_ID);
938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
939:       assertEquals(56, Node.CHANGE_TIME);
940:       assertEquals(43, Node.IS_CONSTANT_NAME);
941:       assertEquals(36, Node.QUOTED_PROP);
942:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
943:       assertEquals(29, Node.JSDOC_INFO_PROP);
944:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
946:       assertEquals(55, Node.INFERRED_FUNCTION);
947:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
948:       assertEquals(46, Node.IS_NAMESPACE);
949:       assertEquals(57, Node.LAST_PROP);
950:       assertEquals(47, Node.IS_DISPATCHER);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(30, Node.VAR_ARGS_NAME);
954:       
955:       node1.setCharno(1635);
956:       assertFalse(node1.isCatch());
957:       assertEquals(0, node1.getChildCount());
958:       assertFalse(node1.isRegExp());
959:       assertFalse(node1.isSetterDef());
960:       assertEquals(235107, node1.getSourcePosition());
961:       assertFalse(node1.isDefaultCase());
962:       assertFalse(node1.isTry());
963:       assertFalse(node1.isFor());
964:       assertFalse(node1.isEmpty());
965:       assertFalse(node1.isCall());
966:       assertFalse(node1.isNE());
967:       assertFalse(node1.isTrue());
968:       assertFalse(node1.isNull());
969:       assertFalse(node1.isIf());
970:       assertFalse(node1.isVoid());
971:       assertFalse(node1.isDelProp());
972:       assertFalse(node1.isName());
973:       assertFalse(node1.isContinue());
974:       assertEquals(57, node1.getLineno());
975:       assertFalse(node1.isReturn());
976:       assertFalse(node1.isString());
977:       assertFalse(node1.isIn());
978:       assertFalse(node1.hasChildren());
979:       assertFalse(node1.isInc());
980:       assertFalse(node1.isWhile());
981:       assertFalse(node1.isCast());
982:       assertFalse(node1.isThrow());
983:       assertTrue(node1.isNew());
984:       assertFalse(node1.isFalse());
985:       assertFalse(node1.isFunction());
986:       assertFalse(node1.isDebugger());
987:       assertFalse(node1.isAnd());
988:       assertFalse(node1.isInstanceOf());
989:       assertFalse(node1.isNot());
990:       assertFalse(node1.isWith());
991:       assertFalse(node1.isObjectLit());
992:       assertFalse(node1.isComma());
993:       assertFalse(node1.isThis());
994:       assertFalse(node1.isGetProp());
995:       assertFalse(node1.isScript());
996:       assertFalse(node1.hasOneChild());
997:       assertFalse(node1.isGetElem());
998:       assertFalse(node1.isHook());
999:       assertFalse(node1.isAssign());
1000:       assertFalse(node1.isDec());
1001:       assertFalse(node1.isTypeOf());
1002:       assertFalse(node1.isBreak());
1003:       assertFalse(node1.isExprResult());
1004:       assertEquals(1635, node1.getCharno());
1005:       assertFalse(node1.hasMoreThanOneChild());
1006:       assertFalse(node1.isOr());
1007:       assertFalse(node1.isLabel());
1008:       assertFalse(node1.isBlock());
1009:       assertFalse(node1.isAdd());
1010:       assertFalse(node1.isAssignAdd());
1011:       assertFalse(node1.isDo());
1012:       assertFalse(node1.isCase());
1013:       assertFalse(node1.isArrayLit());
1014:       assertFalse(node1.isStringKey());
1015:       assertFalse(node1.isVar());
1016:       assertFalse(node1.isNumber());
1017:       assertFalse(node1.isGetterDef());
1018:       assertFalse(node1.isSwitch());
1019:       assertFalse(node1.isParamList());
1020:       assertFalse(node1.isLabelName());
1021:       assertEquals(30, node1.getType());
1022:       assertEquals(47, Node.IS_DISPATCHER);
1023:       assertEquals(56, Node.CHANGE_TIME);
1024:       assertEquals(2, Node.POST_FLAG);
1025:       assertEquals(37, Node.OPT_ARG_NAME);
1026:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1027:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1028:       assertEquals(30, Node.VAR_ARGS_NAME);
1029:       assertEquals(49, Node.DIRECT_EVAL);
1030:       assertEquals(57, Node.LAST_PROP);
1031:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1032:       assertEquals(8, Node.FLAG_NO_THROWS);
1033:       assertEquals(39, Node.EMPTY_BLOCK);
1034:       assertEquals(53, Node.INPUT_ID);
1035:       assertEquals(36, Node.QUOTED_PROP);
1036:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1037:       assertEquals(55, Node.INFERRED_FUNCTION);
1038:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1039:       assertEquals(29, Node.JSDOC_INFO_PROP);
1040:       assertEquals(52, Node.LENGTH);
1041:       assertEquals(40, Node.ORIGINALNAME_PROP);
1042:       assertEquals(50, Node.FREE_CALL);
1043:       assertEquals(57, Node.REFLECTED_OBJECT);
1044:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1045:       assertEquals(48, Node.DIRECTIVES);
1046:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1047:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(1, Node.DECR_FLAG);
1050:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1051:       assertEquals(32, Node.INCRDECR_PROP);
1052:       assertEquals(46, Node.IS_NAMESPACE);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(43, Node.IS_CONSTANT_NAME);
1055:       assertEquals(54, Node.SLASH_V);
1056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1058:       
1059:       boolean boolean2 = node1.mayMutateGlobalStateOrThrow();
1060:       assertTrue(boolean2);
1061:       assertFalse(node1.isCatch());
1062:       assertEquals(0, node1.getChildCount());
1063:       assertFalse(node1.isRegExp());
1064:       assertFalse(node1.isSetterDef());
1065:       assertEquals(235107, node1.getSourcePosition());
1066:       assertFalse(node1.isDefaultCase());
1067:       assertFalse(node1.isTry());
1068:       assertFalse(node1.isFor());
1069:       assertFalse(node1.isEmpty());
1070:       assertFalse(node1.isCall());
1071:       assertFalse(node1.isNE());
1072:       assertFalse(node1.isTrue());
1073:       assertFalse(node1.isNull());
1074:       assertFalse(node1.isIf());
1075:       assertFalse(node1.isVoid());
1076:       assertFalse(node1.isDelProp());
1077:       assertFalse(node1.isName());
1078:       assertFalse(node1.isContinue());
1079:       assertEquals(57, node1.getLineno());
1080:       assertFalse(node1.isReturn());
1081:       assertFalse(node1.isString());
1082:       assertFalse(node1.isIn());
1083:       assertFalse(node1.hasChildren());
1084:       assertFalse(node1.isInc());
1085:       assertFalse(node1.isWhile());
1086:       assertFalse(node1.isCast());
1087:       assertFalse(node1.isThrow());
1088:       assertTrue(node1.isNew());
1089:       assertFalse(node1.isFalse());
1090:       assertFalse(node1.isFunction());
1091:       assertFalse(node1.isDebugger());
1092:       assertFalse(node1.isAnd());
1093:       assertFalse(node1.isInstanceOf());
1094:       assertFalse(node1.isNot());
1095:       assertFalse(node1.isWith());
1096:       assertFalse(node1.isObjectLit());
1097:       assertFalse(node1.isComma());
1098:       assertFalse(node1.isThis());
1099:       assertFalse(node1.isGetProp());
1100:       assertFalse(node1.isScript());
1101:       assertFalse(node1.hasOneChild());
1102:       assertFalse(node1.isGetElem());
1103:       assertFalse(node1.isHook());
1104:       assertFalse(node1.isAssign());
1105:       assertFalse(node1.isDec());
1106:       assertFalse(node1.isTypeOf());
1107:       assertFalse(node1.isBreak());
1108:       assertFalse(node1.isExprResult());
1109:       assertEquals(1635, node1.getCharno());
1110:       assertFalse(node1.hasMoreThanOneChild());
1111:       assertFalse(node1.isOr());
1112:       assertFalse(node1.isLabel());
1113:       assertFalse(node1.isBlock());
1114:       assertFalse(node1.isAdd());
1115:       assertFalse(node1.isAssignAdd());
1116:       assertFalse(node1.isDo());
1117:       assertFalse(node1.isCase());
1118:       assertFalse(node1.isArrayLit());
1119:       assertFalse(node1.isStringKey());
1120:       assertFalse(node1.isVar());
1121:       assertFalse(node1.isNumber());
1122:       assertFalse(node1.isGetterDef());
1123:       assertFalse(node1.isSwitch());
1124:       assertFalse(node1.isParamList());
1125:       assertFalse(node1.isLabelName());
1126:       assertEquals(30, node1.getType());
1127:       assertEquals(47, Node.IS_DISPATCHER);
1128:       assertEquals(56, Node.CHANGE_TIME);
1129:       assertEquals(2, Node.POST_FLAG);
1130:       assertEquals(37, Node.OPT_ARG_NAME);
1131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(49, Node.DIRECT_EVAL);
1135:       assertEquals(57, Node.LAST_PROP);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(8, Node.FLAG_NO_THROWS);
1138:       assertEquals(39, Node.EMPTY_BLOCK);
1139:       assertEquals(53, Node.INPUT_ID);
1140:       assertEquals(36, Node.QUOTED_PROP);
1141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1144:       assertEquals(29, Node.JSDOC_INFO_PROP);
1145:       assertEquals(52, Node.LENGTH);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(50, Node.FREE_CALL);
1148:       assertEquals(57, Node.REFLECTED_OBJECT);
1149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1150:       assertEquals(48, Node.DIRECTIVES);
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(1, Node.DECR_FLAG);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(32, Node.INCRDECR_PROP);
1157:       assertEquals(46, Node.IS_NAMESPACE);
1158:       assertEquals(12, Node.COLUMN_BITS);
1159:       assertEquals(43, Node.IS_CONSTANT_NAME);
1160:       assertEquals(54, Node.SLASH_V);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1163:       
1164:       boolean boolean3 = node2.isEquivalentToTyped(node1);
1165:       assertFalse(boolean3);
1166:       assertFalse(node0.isInstanceOf());
1167:       assertFalse(node0.isObjectLit());
1168:       assertFalse(node0.isComma());
1169:       assertFalse(node0.isNot());
1170:       assertFalse(node0.isWith());
1171:       assertFalse(node0.isScript());
1172:       assertFalse(node0.isThis());
1173:       assertFalse(node0.isThrow());
1174:       assertFalse(node0.isGetProp());
1175:       assertFalse(node0.hasOneChild());
1176:       assertFalse(node0.isCast());
1177:       assertFalse(node0.isFalse());
1178:       assertFalse(node0.isAnd());
1179:       assertFalse(node0.isLabelName());
1180:       assertFalse(node0.isSwitch());
1181:       assertFalse(node0.isIn());
1182:       assertFalse(node0.isContinue());
1183:       assertFalse(node0.isNumber());
1184:       assertFalse(node0.hasMoreThanOneChild());
1185:       assertFalse(node0.isFor());
1186:       assertFalse(node0.isInc());
1187:       assertFalse(node0.isCase());
1188:       assertFalse(node0.isHook());
1189:       assertFalse(node0.isBlock());
1190:       assertEquals(29, node0.getCharno());
1191:       assertFalse(node0.isRegExp());
1192:       assertFalse(node0.isIf());
1193:       assertFalse(node0.isNE());
1194:       assertEquals(0, node0.getChildCount());
1195:       assertEquals(0, node0.getLineno());
1196:       assertFalse(node0.isCatch());
1197:       assertEquals(29, node0.getSourcePosition());
1198:       assertFalse(node0.isDefaultCase());
1199:       assertFalse(node0.isSetterDef());
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isVar());
1202:       assertFalse(node0.isArrayLit());
1203:       assertFalse(node0.isDebugger());
1204:       assertFalse(node0.isFunction());
1205:       assertFalse(node0.isGetterDef());
1206:       assertFalse(node0.isStringKey());
1207:       assertFalse(node0.isParamList());
1208:       assertFalse(node0.isLabel());
1209:       assertFalse(node0.isReturn());
1210:       assertFalse(node0.isTypeOf());
1211:       assertFalse(node0.isOr());
1212:       assertFalse(node0.hasChildren());
1213:       assertFalse(node0.isString());
1214:       assertFalse(node0.isDec());
1215:       assertFalse(node0.isWhile());
1216:       assertFalse(node0.isEmpty());
1217:       assertFalse(node0.isNew());
1218:       assertFalse(node0.isAssignAdd());
1219:       assertFalse(node0.isDo());
1220:       assertFalse(node0.isAdd());
1221:       assertFalse(node0.isCall());
1222:       assertEquals(0, node0.getType());
1223:       assertFalse(node0.isAssign());
1224:       assertFalse(node0.isDelProp());
1225:       assertFalse(node0.isBreak());
1226:       assertFalse(node0.isNull());
1227:       assertFalse(node0.isTrue());
1228:       assertFalse(node0.isGetElem());
1229:       assertFalse(node0.isExprResult());
1230:       assertFalse(node0.isVoid());
1231:       assertFalse(node0.isName());
1232:       assertFalse(node1.isCatch());
1233:       assertEquals(0, node1.getChildCount());
1234:       assertFalse(node1.isRegExp());
1235:       assertFalse(node1.isSetterDef());
1236:       assertEquals(235107, node1.getSourcePosition());
1237:       assertFalse(node1.isDefaultCase());
1238:       assertFalse(node1.isTry());
1239:       assertFalse(node1.isFor());
1240:       assertFalse(node1.isEmpty());
1241:       assertFalse(node1.isCall());
1242:       assertFalse(node1.isNE());
1243:       assertFalse(node1.isTrue());
1244:       assertFalse(node1.isNull());
1245:       assertFalse(node1.isIf());
1246:       assertFalse(node1.isVoid());
1247:       assertFalse(node1.isDelProp());
1248:       assertFalse(node1.isName());
1249:       assertFalse(node1.isContinue());
1250:       assertEquals(57, node1.getLineno());
1251:       assertFalse(node1.isReturn());
1252:       assertFalse(node1.isString());
1253:       assertFalse(node1.isIn());
1254:       assertFalse(node1.hasChildren());
1255:       assertFalse(node1.isInc());
1256:       assertFalse(node1.isWhile());
1257:       assertFalse(node1.isCast());
1258:       assertFalse(node1.isThrow());
1259:       assertTrue(node1.isNew());
1260:       assertFalse(node1.isFalse());
1261:       assertFalse(node1.isFunction());
1262:       assertFalse(node1.isDebugger());
1263:       assertFalse(node1.isAnd());
1264:       assertFalse(node1.isInstanceOf());
1265:       assertFalse(node1.isNot());
1266:       assertFalse(node1.isWith());
1267:       assertFalse(node1.isObjectLit());
1268:       assertFalse(node1.isComma());
1269:       assertFalse(node1.isThis());
1270:       assertFalse(node1.isGetProp());
1271:       assertFalse(node1.isScript());
1272:       assertFalse(node1.hasOneChild());
1273:       assertFalse(node1.isGetElem());
1274:       assertFalse(node1.isHook());
1275:       assertFalse(node1.isAssign());
1276:       assertFalse(node1.isDec());
1277:       assertFalse(node1.isTypeOf());
1278:       assertFalse(node1.isBreak());
1279:       assertFalse(node1.isExprResult());
1280:       assertEquals(1635, node1.getCharno());
1281:       assertFalse(node1.hasMoreThanOneChild());
1282:       assertFalse(node1.isOr());
1283:       assertFalse(node1.isLabel());
1284:       assertFalse(node1.isBlock());
1285:       assertFalse(node1.isAdd());
1286:       assertFalse(node1.isAssignAdd());
1287:       assertFalse(node1.isDo());
1288:       assertFalse(node1.isCase());
1289:       assertFalse(node1.isArrayLit());
1290:       assertFalse(node1.isStringKey());
1291:       assertFalse(node1.isVar());
1292:       assertFalse(node1.isNumber());
1293:       assertFalse(node1.isGetterDef());
1294:       assertFalse(node1.isSwitch());
1295:       assertFalse(node1.isParamList());
1296:       assertFalse(node1.isLabelName());
1297:       assertEquals(30, node1.getType());
1298:       assertEquals(1, node2.getChildCount());
1299:       assertTrue(node2.hasChildren());
1300:       assertFalse(node2.isIn());
1301:       assertFalse(node2.isNE());
1302:       assertFalse(node2.isIf());
1303:       assertFalse(node2.isSwitch());
1304:       assertFalse(node2.isArrayLit());
1305:       assertFalse(node2.isTry());
1306:       assertFalse(node2.isRegExp());
1307:       assertFalse(node2.isHook());
1308:       assertEquals((-1), node2.getCharno());
1309:       assertFalse(node2.isDebugger());
1310:       assertFalse(node2.isString());
1311:       assertTrue(node2.hasOneChild());
1312:       assertFalse(node2.isFor());
1313:       assertFalse(node2.isGetterDef());
1314:       assertFalse(node2.isCase());
1315:       assertFalse(node2.isGetProp());
1316:       assertFalse(node2.isInstanceOf());
1317:       assertFalse(node2.isThis());
1318:       assertFalse(node2.isObjectLit());
1319:       assertFalse(node2.isWith());
1320:       assertFalse(node2.isFalse());
1321:       assertFalse(node2.isAnd());
1322:       assertFalse(node2.isCatch());
1323:       assertFalse(node2.isFunction());
1324:       assertFalse(node2.isThrow());
1325:       assertFalse(node2.isSetterDef());
1326:       assertFalse(node2.isInc());
1327:       assertFalse(node2.isReturn());
1328:       assertEquals((-1), node2.getLineno());
1329:       assertFalse(node2.isOr());
1330:       assertFalse(node2.isAssignAdd());
1331:       assertFalse(node2.hasMoreThanOneChild());
1332:       assertFalse(node2.isTypeOf());
1333:       assertEquals((-1), node2.getSourcePosition());
1334:       assertFalse(node2.isDec());
1335:       assertTrue(node2.isDelProp());
1336:       assertFalse(node2.isLabel());
1337:       assertFalse(node2.isAssign());
1338:       assertFalse(node2.isLabelName());
1339:       assertFalse(node2.isContinue());
1340:       assertFalse(node2.isCast());
1341:       assertFalse(node2.isGetElem());
1342:       assertEquals(31, node2.getType());
1343:       assertFalse(node2.isBlock());
1344:       assertFalse(node2.isWhile());
1345:       assertFalse(node2.isNot());
1346:       assertFalse(node2.isNumber());
1347:       assertFalse(node2.isScript());
1348:       assertFalse(node2.isComma());
1349:       assertFalse(node2.isParamList());
1350:       assertFalse(node2.isNull());
1351:       assertFalse(node2.isName());
1352:       assertFalse(node2.isStringKey());
1353:       assertFalse(node2.isCall());
1354:       assertFalse(node2.isExprResult());
1355:       assertFalse(node2.isVoid());
1356:       assertFalse(node2.isBreak());
1357:       assertFalse(node2.isAdd());
1358:       assertFalse(node2.isTrue());
1359:       assertFalse(node2.isVar());
1360:       assertFalse(node2.isEmpty());
1361:       assertFalse(node2.isDo());
1362:       assertFalse(node2.isDefaultCase());
1363:       assertFalse(node2.isNew());
1364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1366:       assertEquals(56, Node.CHANGE_TIME);
1367:       assertEquals(43, Node.IS_CONSTANT_NAME);
1368:       assertEquals(47, Node.IS_DISPATCHER);
1369:       assertEquals(37, Node.OPT_ARG_NAME);
1370:       assertEquals(2, Node.POST_FLAG);
1371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1372:       assertEquals(12, Node.COLUMN_BITS);
1373:       assertEquals(4095, Node.COLUMN_MASK);
1374:       assertEquals(32, Node.INCRDECR_PROP);
1375:       assertEquals(1, Node.DECR_FLAG);
1376:       assertEquals(46, Node.IS_NAMESPACE);
1377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1378:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1379:       assertEquals(50, Node.FREE_CALL);
1380:       assertEquals(57, Node.REFLECTED_OBJECT);
1381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1382:       assertEquals(54, Node.SLASH_V);
1383:       assertEquals(48, Node.DIRECTIVES);
1384:       assertEquals(30, Node.VAR_ARGS_NAME);
1385:       assertEquals(40, Node.ORIGINALNAME_PROP);
1386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1387:       assertEquals(49, Node.DIRECT_EVAL);
1388:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1389:       assertEquals(36, Node.QUOTED_PROP);
1390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1391:       assertEquals(8, Node.FLAG_NO_THROWS);
1392:       assertEquals(39, Node.EMPTY_BLOCK);
1393:       assertEquals(57, Node.LAST_PROP);
1394:       assertEquals(29, Node.JSDOC_INFO_PROP);
1395:       assertEquals(53, Node.INPUT_ID);
1396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1397:       assertEquals(52, Node.LENGTH);
1398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1399:       assertEquals(55, Node.INFERRED_FUNCTION);
1400:       assertEquals(47, Node.IS_DISPATCHER);
1401:       assertEquals(56, Node.CHANGE_TIME);
1402:       assertEquals(2, Node.POST_FLAG);
1403:       assertEquals(37, Node.OPT_ARG_NAME);
1404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1406:       assertEquals(30, Node.VAR_ARGS_NAME);
1407:       assertEquals(49, Node.DIRECT_EVAL);
1408:       assertEquals(57, Node.LAST_PROP);
1409:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1410:       assertEquals(8, Node.FLAG_NO_THROWS);
1411:       assertEquals(39, Node.EMPTY_BLOCK);
1412:       assertEquals(53, Node.INPUT_ID);
1413:       assertEquals(36, Node.QUOTED_PROP);
1414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1415:       assertEquals(55, Node.INFERRED_FUNCTION);
1416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1417:       assertEquals(29, Node.JSDOC_INFO_PROP);
1418:       assertEquals(52, Node.LENGTH);
1419:       assertEquals(40, Node.ORIGINALNAME_PROP);
1420:       assertEquals(50, Node.FREE_CALL);
1421:       assertEquals(57, Node.REFLECTED_OBJECT);
1422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1423:       assertEquals(48, Node.DIRECTIVES);
1424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1426:       assertEquals(4095, Node.COLUMN_MASK);
1427:       assertEquals(1, Node.DECR_FLAG);
1428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1429:       assertEquals(32, Node.INCRDECR_PROP);
1430:       assertEquals(46, Node.IS_NAMESPACE);
1431:       assertEquals(12, Node.COLUMN_BITS);
1432:       assertEquals(43, Node.IS_CONSTANT_NAME);
1433:       assertEquals(54, Node.SLASH_V);
1434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1436:       assertEquals(40, Node.ORIGINALNAME_PROP);
1437:       assertEquals(57, Node.REFLECTED_OBJECT);
1438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1439:       assertEquals(39, Node.EMPTY_BLOCK);
1440:       assertEquals(54, Node.SLASH_V);
1441:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1442:       assertEquals(52, Node.LENGTH);
1443:       assertEquals(8, Node.FLAG_NO_THROWS);
1444:       assertEquals(50, Node.FREE_CALL);
1445:       assertEquals(4095, Node.COLUMN_MASK);
1446:       assertEquals(12, Node.COLUMN_BITS);
1447:       assertEquals(48, Node.DIRECTIVES);
1448:       assertEquals(1, Node.DECR_FLAG);
1449:       assertEquals(37, Node.OPT_ARG_NAME);
1450:       assertEquals(49, Node.DIRECT_EVAL);
1451:       assertEquals(32, Node.INCRDECR_PROP);
1452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1454:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1455:       assertEquals(53, Node.INPUT_ID);
1456:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1457:       assertEquals(56, Node.CHANGE_TIME);
1458:       assertEquals(43, Node.IS_CONSTANT_NAME);
1459:       assertEquals(36, Node.QUOTED_PROP);
1460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1461:       assertEquals(29, Node.JSDOC_INFO_PROP);
1462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1464:       assertEquals(55, Node.INFERRED_FUNCTION);
1465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1466:       assertEquals(46, Node.IS_NAMESPACE);
1467:       assertEquals(57, Node.LAST_PROP);
1468:       assertEquals(47, Node.IS_DISPATCHER);
1469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1470:       assertEquals(2, Node.POST_FLAG);
1471:       assertEquals(30, Node.VAR_ARGS_NAME);
1472:       
1473:       String string0 = node2.toStringTree();
1474:       assertNotNull(string0);
1475:       assertEquals("DELPROP\n    NEW ~sq`cI[jn 57\n", string0);
1476:       assertFalse(node0.isInstanceOf());
1477:       assertFalse(node0.isObjectLit());
1478:       assertFalse(node0.isComma());
1479:       assertFalse(node0.isNot());
1480:       assertFalse(node0.isWith());
1481:       assertFalse(node0.isScript());
1482:       assertFalse(node0.isThis());
1483:       assertFalse(node0.isThrow());
1484:       assertFalse(node0.isGetProp());
1485:       assertFalse(node0.hasOneChild());
1486:       assertFalse(node0.isCast());
1487:       assertFalse(node0.isFalse());
1488:       assertFalse(node0.isAnd());
1489:       assertFalse(node0.isLabelName());
1490:       assertFalse(node0.isSwitch());
1491:       assertFalse(node0.isIn());
1492:       assertFalse(node0.isContinue());
1493:       assertFalse(node0.isNumber());
1494:       assertFalse(node0.hasMoreThanOneChild());
1495:       assertFalse(node0.isFor());
1496:       assertFalse(node0.isInc());
1497:       assertFalse(node0.isCase());
1498:       assertFalse(node0.isHook());
1499:       assertFalse(node0.isBlock());
1500:       assertEquals(29, node0.getCharno());
1501:       assertFalse(node0.isRegExp());
1502:       assertFalse(node0.isIf());
1503:       assertFalse(node0.isNE());
1504:       assertEquals(0, node0.getChildCount());
1505:       assertEquals(0, node0.getLineno());
1506:       assertFalse(node0.isCatch());
1507:       assertEquals(29, node0.getSourcePosition());
1508:       assertFalse(node0.isDefaultCase());
1509:       assertFalse(node0.isSetterDef());
1510:       assertFalse(node0.isTry());
1511:       assertFalse(node0.isVar());
1512:       assertFalse(node0.isArrayLit());
1513:       assertFalse(node0.isDebugger());
1514:       assertFalse(node0.isFunction());
1515:       assertFalse(node0.isGetterDef());
1516:       assertFalse(node0.isStringKey());
1517:       assertFalse(node0.isParamList());
1518:       assertFalse(node0.isLabel());
1519:       assertFalse(node0.isReturn());
1520:       assertFalse(node0.isTypeOf());
1521:       assertFalse(node0.isOr());
1522:       assertFalse(node0.hasChildren());
1523:       assertFalse(node0.isString());
1524:       assertFalse(node0.isDec());
1525:       assertFalse(node0.isWhile());
1526:       assertFalse(node0.isEmpty());
1527:       assertFalse(node0.isNew());
1528:       assertFalse(node0.isAssignAdd());
1529:       assertFalse(node0.isDo());
1530:       assertFalse(node0.isAdd());
1531:       assertFalse(node0.isCall());
1532:       assertEquals(0, node0.getType());
1533:       assertFalse(node0.isAssign());
1534:       assertFalse(node0.isDelProp());
1535:       assertFalse(node0.isBreak());
1536:       assertFalse(node0.isNull());
1537:       assertFalse(node0.isTrue());
1538:       assertFalse(node0.isGetElem());
1539:       assertFalse(node0.isExprResult());
1540:       assertFalse(node0.isVoid());
1541:       assertFalse(node0.isName());
1542:       assertFalse(node1.isCatch());
1543:       assertEquals(0, node1.getChildCount());
1544:       assertFalse(node1.isRegExp());
1545:       assertFalse(node1.isSetterDef());
1546:       assertEquals(235107, node1.getSourcePosition());
1547:       assertFalse(node1.isDefaultCase());
1548:       assertFalse(node1.isTry());
1549:       assertFalse(node1.isFor());
1550:       assertFalse(node1.isEmpty());
1551:       assertFalse(node1.isCall());
1552:       assertFalse(node1.isNE());
1553:       assertFalse(node1.isTrue());
1554:       assertFalse(node1.isNull());
1555:       assertFalse(node1.isIf());
1556:       assertFalse(node1.isVoid());
1557:       assertFalse(node1.isDelProp());
1558:       assertFalse(node1.isName());
1559:       assertFalse(node1.isContinue());
1560:       assertEquals(57, node1.getLineno());
1561:       assertFalse(node1.isReturn());
1562:       assertFalse(node1.isString());
1563:       assertFalse(node1.isIn());
1564:       assertFalse(node1.hasChildren());
1565:       assertFalse(node1.isInc());
1566:       assertFalse(node1.isWhile());
1567:       assertFalse(node1.isCast());
1568:       assertFalse(node1.isThrow());
1569:       assertTrue(node1.isNew());
1570:       assertFalse(node1.isFalse());
1571:       assertFalse(node1.isFunction());
1572:       assertFalse(node1.isDebugger());
1573:       assertFalse(node1.isAnd());
1574:       assertFalse(node1.isInstanceOf());
1575:       assertFalse(node1.isNot());
1576:       assertFalse(node1.isWith());
1577:       assertFalse(node1.isObjectLit());
1578:       assertFalse(node1.isComma());
1579:       assertFalse(node1.isThis());
1580:       assertFalse(node1.isGetProp());
1581:       assertFalse(node1.isScript());
1582:       assertFalse(node1.hasOneChild());
1583:       assertFalse(node1.isGetElem());
1584:       assertFalse(node1.isHook());
1585:       assertFalse(node1.isAssign());
1586:       assertFalse(node1.isDec());
1587:       assertFalse(node1.isTypeOf());
1588:       assertFalse(node1.isBreak());
1589:       assertFalse(node1.isExprResult());
1590:       assertEquals(1635, node1.getCharno());
1591:       assertFalse(node1.hasMoreThanOneChild());
1592:       assertFalse(node1.isOr());
1593:       assertFalse(node1.isLabel());
1594:       assertFalse(node1.isBlock());
1595:       assertFalse(node1.isAdd());
1596:       assertFalse(node1.isAssignAdd());
1597:       assertFalse(node1.isDo());
1598:       assertFalse(node1.isCase());
1599:       assertFalse(node1.isArrayLit());
1600:       assertFalse(node1.isStringKey());
1601:       assertFalse(node1.isVar());
1602:       assertFalse(node1.isNumber());
1603:       assertFalse(node1.isGetterDef());
1604:       assertFalse(node1.isSwitch());
1605:       assertFalse(node1.isParamList());
1606:       assertFalse(node1.isLabelName());
1607:       assertEquals(30, node1.getType());
1608:       assertEquals(1, node2.getChildCount());
1609:       assertTrue(node2.hasChildren());
1610:       assertFalse(node2.isIn());
1611:       assertFalse(node2.isNE());
1612:       assertFalse(node2.isIf());
1613:       assertFalse(node2.isSwitch());
1614:       assertFalse(node2.isArrayLit());
1615:       assertFalse(node2.isTry());
1616:       assertFalse(node2.isRegExp());
1617:       assertFalse(node2.isHook());
1618:       assertEquals((-1), node2.getCharno());
1619:       assertFalse(node2.isDebugger());
1620:       assertFalse(node2.isString());
1621:       assertTrue(node2.hasOneChild());
1622:       assertFalse(node2.isFor());
1623:       assertFalse(node2.isGetterDef());
1624:       assertFalse(node2.isCase());
1625:       assertFalse(node2.isGetProp());
1626:       assertFalse(node2.isInstanceOf());
1627:       assertFalse(node2.isThis());
1628:       assertFalse(node2.isObjectLit());
1629:       assertFalse(node2.isWith());
1630:       assertFalse(node2.isFalse());
1631:       assertFalse(node2.isAnd());
1632:       assertFalse(node2.isCatch());
1633:       assertFalse(node2.isFunction());
1634:       assertFalse(node2.isThrow());
1635:       assertFalse(node2.isSetterDef());
1636:       assertFalse(node2.isInc());
1637:       assertFalse(node2.isReturn());
1638:       assertEquals((-1), node2.getLineno());
1639:       assertFalse(node2.isOr());
1640:       assertFalse(node2.isAssignAdd());
1641:       assertFalse(node2.hasMoreThanOneChild());
1642:       assertFalse(node2.isTypeOf());
1643:       assertEquals((-1), node2.getSourcePosition());
1644:       assertFalse(node2.isDec());
1645:       assertTrue(node2.isDelProp());
1646:       assertFalse(node2.isLabel());
1647:       assertFalse(node2.isAssign());
1648:       assertFalse(node2.isLabelName());
1649:       assertFalse(node2.isContinue());
1650:       assertFalse(node2.isCast());
1651:       assertFalse(node2.isGetElem());
1652:       assertEquals(31, node2.getType());
1653:       assertFalse(node2.isBlock());
1654:       assertFalse(node2.isWhile());
1655:       assertFalse(node2.isNot());
1656:       assertFalse(node2.isNumber());
1657:       assertFalse(node2.isScript());
1658:       assertFalse(node2.isComma());
1659:       assertFalse(node2.isParamList());
1660:       assertFalse(node2.isNull());
1661:       assertFalse(node2.isName());
1662:       assertFalse(node2.isStringKey());
1663:       assertFalse(node2.isCall());
1664:       assertFalse(node2.isExprResult());
1665:       assertFalse(node2.isVoid());
1666:       assertFalse(node2.isBreak());
1667:       assertFalse(node2.isAdd());
1668:       assertFalse(node2.isTrue());
1669:       assertFalse(node2.isVar());
1670:       assertFalse(node2.isEmpty());
1671:       assertFalse(node2.isDo());
1672:       assertFalse(node2.isDefaultCase());
1673:       assertFalse(node2.isNew());
1674:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1675:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1676:       assertEquals(56, Node.CHANGE_TIME);
1677:       assertEquals(43, Node.IS_CONSTANT_NAME);
1678:       assertEquals(47, Node.IS_DISPATCHER);
1679:       assertEquals(37, Node.OPT_ARG_NAME);
1680:       assertEquals(2, Node.POST_FLAG);
1681:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1682:       assertEquals(12, Node.COLUMN_BITS);
1683:       assertEquals(4095, Node.COLUMN_MASK);
1684:       assertEquals(32, Node.INCRDECR_PROP);
1685:       assertEquals(1, Node.DECR_FLAG);
1686:       assertEquals(46, Node.IS_NAMESPACE);
1687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1688:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1689:       assertEquals(50, Node.FREE_CALL);
1690:       assertEquals(57, Node.REFLECTED_OBJECT);
1691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1692:       assertEquals(54, Node.SLASH_V);
1693:       assertEquals(48, Node.DIRECTIVES);
1694:       assertEquals(30, Node.VAR_ARGS_NAME);
1695:       assertEquals(40, Node.ORIGINALNAME_PROP);
1696:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1697:       assertEquals(49, Node.DIRECT_EVAL);
1698:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1699:       assertEquals(36, Node.QUOTED_PROP);
1700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1701:       assertEquals(8, Node.FLAG_NO_THROWS);
1702:       assertEquals(39, Node.EMPTY_BLOCK);
1703:       assertEquals(57, Node.LAST_PROP);
1704:       assertEquals(29, Node.JSDOC_INFO_PROP);
1705:       assertEquals(53, Node.INPUT_ID);
1706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1707:       assertEquals(52, Node.LENGTH);
1708:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1709:       assertEquals(55, Node.INFERRED_FUNCTION);
1710:       assertEquals(47, Node.IS_DISPATCHER);
1711:       assertEquals(56, Node.CHANGE_TIME);
1712:       assertEquals(2, Node.POST_FLAG);
1713:       assertEquals(37, Node.OPT_ARG_NAME);
1714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1716:       assertEquals(30, Node.VAR_ARGS_NAME);
1717:       assertEquals(49, Node.DIRECT_EVAL);
1718:       assertEquals(57, Node.LAST_PROP);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(8, Node.FLAG_NO_THROWS);
1721:       assertEquals(39, Node.EMPTY_BLOCK);
1722:       assertEquals(53, Node.INPUT_ID);
1723:       assertEquals(36, Node.QUOTED_PROP);
1724:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1725:       assertEquals(55, Node.INFERRED_FUNCTION);
1726:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1727:       assertEquals(29, Node.JSDOC_INFO_PROP);
1728:       assertEquals(52, Node.LENGTH);
1729:       assertEquals(40, Node.ORIGINALNAME_PROP);
1730:       assertEquals(50, Node.FREE_CALL);
1731:       assertEquals(57, Node.REFLECTED_OBJECT);
1732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1733:       assertEquals(48, Node.DIRECTIVES);
1734:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1735:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1736:       assertEquals(4095, Node.COLUMN_MASK);
1737:       assertEquals(1, Node.DECR_FLAG);
1738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1739:       assertEquals(32, Node.INCRDECR_PROP);
1740:       assertEquals(46, Node.IS_NAMESPACE);
1741:       assertEquals(12, Node.COLUMN_BITS);
1742:       assertEquals(43, Node.IS_CONSTANT_NAME);
1743:       assertEquals(54, Node.SLASH_V);
1744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1746:       assertEquals(40, Node.ORIGINALNAME_PROP);
1747:       assertEquals(57, Node.REFLECTED_OBJECT);
1748:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1749:       assertEquals(39, Node.EMPTY_BLOCK);
1750:       assertEquals(54, Node.SLASH_V);
1751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1752:       assertEquals(52, Node.LENGTH);
1753:       assertEquals(8, Node.FLAG_NO_THROWS);
1754:       assertEquals(50, Node.FREE_CALL);
1755:       assertEquals(4095, Node.COLUMN_MASK);
1756:       assertEquals(12, Node.COLUMN_BITS);
1757:       assertEquals(48, Node.DIRECTIVES);
1758:       assertEquals(1, Node.DECR_FLAG);
1759:       assertEquals(37, Node.OPT_ARG_NAME);
1760:       assertEquals(49, Node.DIRECT_EVAL);
1761:       assertEquals(32, Node.INCRDECR_PROP);
1762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1763:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1764:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1765:       assertEquals(53, Node.INPUT_ID);
1766:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1767:       assertEquals(56, Node.CHANGE_TIME);
1768:       assertEquals(43, Node.IS_CONSTANT_NAME);
1769:       assertEquals(36, Node.QUOTED_PROP);
1770:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1771:       assertEquals(29, Node.JSDOC_INFO_PROP);
1772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1773:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1774:       assertEquals(55, Node.INFERRED_FUNCTION);
1775:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1776:       assertEquals(46, Node.IS_NAMESPACE);
1777:       assertEquals(57, Node.LAST_PROP);
1778:       assertEquals(47, Node.IS_DISPATCHER);
1779:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1780:       assertEquals(2, Node.POST_FLAG);
1781:       assertEquals(30, Node.VAR_ARGS_NAME);
1782:       
1783:       Node node3 = node2.copyInformationFromForTree(node1);
1784:       assertNotNull(node3);
1785:       assertFalse(node0.isInstanceOf());
1786:       assertFalse(node0.isObjectLit());
1787:       assertFalse(node0.isComma());
1788:       assertFalse(node0.isNot());
1789:       assertFalse(node0.isWith());
1790:       assertFalse(node0.isScript());
1791:       assertFalse(node0.isThis());
1792:       assertFalse(node0.isThrow());
1793:       assertFalse(node0.isGetProp());
1794:       assertFalse(node0.hasOneChild());
1795:       assertFalse(node0.isCast());
1796:       assertFalse(node0.isFalse());
1797:       assertFalse(node0.isAnd());
1798:       assertFalse(node0.isLabelName());
1799:       assertFalse(node0.isSwitch());
1800:       assertFalse(node0.isIn());
1801:       assertFalse(node0.isContinue());
1802:       assertFalse(node0.isNumber());
1803:       assertFalse(node0.hasMoreThanOneChild());
1804:       assertFalse(node0.isFor());
1805:       assertFalse(node0.isInc());
1806:       assertFalse(node0.isCase());
1807:       assertFalse(node0.isHook());
1808:       assertFalse(node0.isBlock());
1809:       assertEquals(29, node0.getCharno());
1810:       assertFalse(node0.isRegExp());
1811:       assertFalse(node0.isIf());
1812:       assertFalse(node0.isNE());
1813:       assertEquals(0, node0.getChildCount());
1814:       assertEquals(0, node0.getLineno());
1815:       assertFalse(node0.isCatch());
1816:       assertEquals(29, node0.getSourcePosition());
1817:       assertFalse(node0.isDefaultCase());
1818:       assertFalse(node0.isSetterDef());
1819:       assertFalse(node0.isTry());
1820:       assertFalse(node0.isVar());
1821:       assertFalse(node0.isArrayLit());
1822:       assertFalse(node0.isDebugger());
1823:       assertFalse(node0.isFunction());
1824:       assertFalse(node0.isGetterDef());
1825:       assertFalse(node0.isStringKey());
1826:       assertFalse(node0.isParamList());
1827:       assertFalse(node0.isLabel());
1828:       assertFalse(node0.isReturn());
1829:       assertFalse(node0.isTypeOf());
1830:       assertFalse(node0.isOr());
1831:       assertFalse(node0.hasChildren());
1832:       assertFalse(node0.isString());
1833:       assertFalse(node0.isDec());
1834:       assertFalse(node0.isWhile());
1835:       assertFalse(node0.isEmpty());
1836:       assertFalse(node0.isNew());
1837:       assertFalse(node0.isAssignAdd());
1838:       assertFalse(node0.isDo());
1839:       assertFalse(node0.isAdd());
1840:       assertFalse(node0.isCall());
1841:       assertEquals(0, node0.getType());
1842:       assertFalse(node0.isAssign());
1843:       assertFalse(node0.isDelProp());
1844:       assertFalse(node0.isBreak());
1845:       assertFalse(node0.isNull());
1846:       assertFalse(node0.isTrue());
1847:       assertFalse(node0.isGetElem());
1848:       assertFalse(node0.isExprResult());
1849:       assertFalse(node0.isVoid());
1850:       assertFalse(node0.isName());
1851:       assertFalse(node1.isCatch());
1852:       assertEquals(0, node1.getChildCount());
1853:       assertFalse(node1.isRegExp());
1854:       assertFalse(node1.isSetterDef());
1855:       assertEquals(235107, node1.getSourcePosition());
1856:       assertFalse(node1.isDefaultCase());
1857:       assertFalse(node1.isTry());
1858:       assertFalse(node1.isFor());
1859:       assertFalse(node1.isEmpty());
1860:       assertFalse(node1.isCall());
1861:       assertFalse(node1.isNE());
1862:       assertFalse(node1.isTrue());
1863:       assertFalse(node1.isNull());
1864:       assertFalse(node1.isIf());
1865:       assertFalse(node1.isVoid());
1866:       assertFalse(node1.isDelProp());
1867:       assertFalse(node1.isName());
1868:       assertFalse(node1.isContinue());
1869:       assertEquals(57, node1.getLineno());
1870:       assertFalse(node1.isReturn());
1871:       assertFalse(node1.isString());
1872:       assertFalse(node1.isIn());
1873:       assertFalse(node1.hasChildren());
1874:       assertFalse(node1.isInc());
1875:       assertFalse(node1.isWhile());
1876:       assertFalse(node1.isCast());
1877:       assertFalse(node1.isThrow());
1878:       assertTrue(node1.isNew());
1879:       assertFalse(node1.isFalse());
1880:       assertFalse(node1.isFunction());
1881:       assertFalse(node1.isDebugger());
1882:       assertFalse(node1.isAnd());
1883:       assertFalse(node1.isInstanceOf());
1884:       assertFalse(node1.isNot());
1885:       assertFalse(node1.isWith());
1886:       assertFalse(node1.isObjectLit());
1887:       assertFalse(node1.isComma());
1888:       assertFalse(node1.isThis());
1889:       assertFalse(node1.isGetProp());
1890:       assertFalse(node1.isScript());
1891:       assertFalse(node1.hasOneChild());
1892:       assertFalse(node1.isGetElem());
1893:       assertFalse(node1.isHook());
1894:       assertFalse(node1.isAssign());
1895:       assertFalse(node1.isDec());
1896:       assertFalse(node1.isTypeOf());
1897:       assertFalse(node1.isBreak());
1898:       assertFalse(node1.isExprResult());
1899:       assertEquals(1635, node1.getCharno());
1900:       assertFalse(node1.hasMoreThanOneChild());
1901:       assertFalse(node1.isOr());
1902:       assertFalse(node1.isLabel());
1903:       assertFalse(node1.isBlock());
1904:       assertFalse(node1.isAdd());
1905:       assertFalse(node1.isAssignAdd());
1906:       assertFalse(node1.isDo());
1907:       assertFalse(node1.isCase());
1908:       assertFalse(node1.isArrayLit());
1909:       assertFalse(node1.isStringKey());
1910:       assertFalse(node1.isVar());
1911:       assertFalse(node1.isNumber());
1912:       assertFalse(node1.isGetterDef());
1913:       assertFalse(node1.isSwitch());
1914:       assertFalse(node1.isParamList());
1915:       assertFalse(node1.isLabelName());
1916:       assertEquals(30, node1.getType());
1917:       assertEquals(1, node2.getChildCount());
1918:       assertTrue(node2.hasChildren());
1919:       assertFalse(node2.isIn());
1920:       assertFalse(node2.isNE());
1921:       assertFalse(node2.isIf());
1922:       assertFalse(node2.isSwitch());
1923:       assertFalse(node2.isArrayLit());
1924:       assertFalse(node2.isTry());
1925:       assertFalse(node2.isRegExp());
1926:       assertFalse(node2.isHook());
1927:       assertFalse(node2.isDebugger());
1928:       assertFalse(node2.isString());
1929:       assertTrue(node2.hasOneChild());
1930:       assertFalse(node2.isFor());
1931:       assertFalse(node2.isGetterDef());
1932:       assertEquals(235107, node2.getSourcePosition());
1933:       assertFalse(node2.isCase());
1934:       assertFalse(node2.isGetProp());
1935:       assertFalse(node2.isInstanceOf());
1936:       assertFalse(node2.isThis());
1937:       assertFalse(node2.isObjectLit());
1938:       assertEquals(1635, node2.getCharno());
1939:       assertFalse(node2.isWith());
1940:       assertFalse(node2.isFalse());
1941:       assertFalse(node2.isAnd());
1942:       assertFalse(node2.isCatch());
1943:       assertFalse(node2.isFunction());
1944:       assertFalse(node2.isThrow());
1945:       assertFalse(node2.isSetterDef());
1946:       assertFalse(node2.isInc());
1947:       assertFalse(node2.isReturn());
1948:       assertFalse(node2.isOr());
1949:       assertFalse(node2.isAssignAdd());
1950:       assertFalse(node2.hasMoreThanOneChild());
1951:       assertFalse(node2.isTypeOf());
1952:       assertFalse(node2.isDec());
1953:       assertEquals(57, node2.getLineno());
1954:       assertTrue(node2.isDelProp());
1955:       assertFalse(node2.isLabel());
1956:       assertFalse(node2.isAssign());
1957:       assertFalse(node2.isLabelName());
1958:       assertFalse(node2.isContinue());
1959:       assertFalse(node2.isCast());
1960:       assertFalse(node2.isGetElem());
1961:       assertEquals(31, node2.getType());
1962:       assertFalse(node2.isBlock());
1963:       assertFalse(node2.isWhile());
1964:       assertFalse(node2.isNot());
1965:       assertFalse(node2.isNumber());
1966:       assertFalse(node2.isScript());
1967:       assertFalse(node2.isComma());
1968:       assertFalse(node2.isParamList());
1969:       assertFalse(node2.isNull());
1970:       assertFalse(node2.isName());
1971:       assertFalse(node2.isStringKey());
1972:       assertFalse(node2.isCall());
1973:       assertFalse(node2.isExprResult());
1974:       assertFalse(node2.isVoid());
1975:       assertFalse(node2.isBreak());
1976:       assertFalse(node2.isAdd());
1977:       assertFalse(node2.isTrue());
1978:       assertFalse(node2.isVar());
1979:       assertFalse(node2.isEmpty());
1980:       assertFalse(node2.isDo());
1981:       assertFalse(node2.isDefaultCase());
1982:       assertFalse(node2.isNew());
1983:       assertFalse(node3.isRegExp());
1984:       assertFalse(node3.isDefaultCase());
1985:       assertFalse(node3.isDebugger());
1986:       assertFalse(node3.isFunction());
1987:       assertFalse(node3.isVoid());
1988:       assertFalse(node3.isCatch());
1989:       assertFalse(node3.isTry());
1990:       assertEquals(235107, node3.getSourcePosition());
1991:       assertTrue(node3.hasOneChild());
1992:       assertFalse(node3.isFor());
1993:       assertFalse(node3.isGetterDef());
1994:       assertFalse(node3.isArrayLit());
1995:       assertFalse(node3.isStringKey());
1996:       assertFalse(node3.isParamList());
1997:       assertFalse(node3.isSwitch());
1998:       assertFalse(node3.isDo());
1999:       assertFalse(node3.isNew());
2000:       assertFalse(node3.isString());
2001:       assertFalse(node3.isAdd());
2002:       assertFalse(node3.isAssignAdd());
2003:       assertFalse(node3.isLabel());
2004:       assertFalse(node3.isWhile());
2005:       assertFalse(node3.isReturn());
2006:       assertFalse(node3.isVar());
2007:       assertFalse(node3.isNull());
2008:       assertFalse(node3.isTypeOf());
2009:       assertFalse(node3.isDec());
2010:       assertFalse(node3.isBreak());
2011:       assertFalse(node3.isComma());
2012:       assertFalse(node3.isAssign());
2013:       assertFalse(node3.isGetElem());
2014:       assertFalse(node3.isCall());
2015:       assertFalse(node3.isEmpty());
2016:       assertFalse(node3.isOr());
2017:       assertFalse(node3.isName());
2018:       assertFalse(node3.isTrue());
2019:       assertFalse(node3.isNot());
2020:       assertFalse(node3.isWith());
2021:       assertFalse(node3.isExprResult());
2022:       assertFalse(node3.isScript());
2023:       assertFalse(node3.isInstanceOf());
2024:       assertFalse(node3.isThis());
2025:       assertFalse(node3.isNumber());
2026:       assertFalse(node3.isLabelName());
2027:       assertFalse(node3.isFalse());
2028:       assertFalse(node3.isGetProp());
2029:       assertFalse(node3.isCast());
2030:       assertFalse(node3.isObjectLit());
2031:       assertFalse(node3.isAnd());
2032:       assertFalse(node3.isCase());
2033:       assertEquals(31, node3.getType());
2034:       assertFalse(node3.isContinue());
2035:       assertFalse(node3.isInc());
2036:       assertFalse(node3.isHook());
2037:       assertFalse(node3.hasMoreThanOneChild());
2038:       assertEquals(1, node3.getChildCount());
2039:       assertFalse(node3.isBlock());
2040:       assertFalse(node3.isThrow());
2041:       assertFalse(node3.isIf());
2042:       assertFalse(node3.isSetterDef());
2043:       assertTrue(node3.hasChildren());
2044:       assertFalse(node3.isIn());
2045:       assertEquals(57, node3.getLineno());
2046:       assertTrue(node3.isDelProp());
2047:       assertEquals(1635, node3.getCharno());
2048:       assertFalse(node3.isNE());
2049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2050:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2051:       assertEquals(56, Node.CHANGE_TIME);
2052:       assertEquals(43, Node.IS_CONSTANT_NAME);
2053:       assertEquals(47, Node.IS_DISPATCHER);
2054:       assertEquals(37, Node.OPT_ARG_NAME);
2055:       assertEquals(2, Node.POST_FLAG);
2056:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2057:       assertEquals(12, Node.COLUMN_BITS);
2058:       
2059:       int int0 = node3.getSourceOffset();
2060:       assertEquals((-1), int0);
2061:       assertFalse(node0.isInstanceOf());
2062:       assertFalse(node0.isObjectLit());
2063:       assertFalse(node0.isComma());
2064:       assertFalse(node0.isNot());
2065:       assertFalse(node0.isWith());
2066:       assertFalse(node0.isScript());
2067:       assertFalse(node0.isThis());
2068:       assertFalse(node0.isThrow());
2069:       assertFalse(node0.isGetProp());
2070:       assertFalse(node0.hasOneChild());
2071:       assertFalse(node0.isCast());
2072:       assertFalse(node0.isFalse());
2073:       assertFalse(node0.isAnd());
2074:       assertFalse(node0.isLabelName());
2075:       assertFalse(node0.isSwitch());
2076:       assertFalse(node0.isIn());
2077:       assertFalse(node0.isContinue());
2078:       assertFalse(node0.isNumber());
2079:       assertFalse(node0.hasMoreThanOneChild());
2080:       assertFalse(node0.isFor());
2081:       assertFalse(node0.isInc());
2082:       assertFalse(node0.isCase());
2083:       assertFalse(node0.isHook());
2084:       assertFalse(node0.isBlock());
2085:       assertEquals(29, node0.getCharno());
2086:       assertFalse(node0.isRegExp());
2087:       assertFalse(node0.isIf());
2088:       assertFalse(node0.isNE());
2089:       assertEquals(0, node0.getChildCount());
2090:       assertEquals(0, node0.getLineno());
2091:       assertFalse(node0.isCatch());
2092:       assertEquals(29, node0.getSourcePosition());
2093:       assertFalse(node0.isDefaultCase());
2094:       assertFalse(node0.isSetterDef());
2095:       assertFalse(node0.isTry());
2096:       assertFalse(node0.isVar());
2097:       assertFalse(node0.isArrayLit());
2098:       assertFalse(node0.isDebugger());
2099:       assertFalse(node0.isFunction());
2100:       assertFalse(node0.isGetterDef());
2101:       assertFalse(node0.isStringKey());
2102:       assertFalse(node0.isParamList());
2103:       assertFalse(node0.isLabel());
2104:       assertFalse(node0.isReturn());
2105:       assertFalse(node0.isTypeOf());
2106:       assertFalse(node0.isOr());
2107:       assertFalse(node0.hasChildren());
2108:       assertFalse(node0.isString());
2109:       assertFalse(node0.isDec());
2110:       assertFalse(node0.isWhile());
2111:       assertFalse(node0.isEmpty());
2112:       assertFalse(node0.isNew());
2113:       assertFalse(node0.isAssignAdd());
2114:       assertFalse(node0.isDo());
2115:       assertFalse(node0.isAdd());
2116:       assertFalse(node0.isCall());
2117:       assertEquals(0, node0.getType());
2118:       assertFalse(node0.isAssign());
2119:       assertFalse(node0.isDelProp());
2120:       assertFalse(node0.isBreak());
2121:       assertFalse(node0.isNull());
2122:       assertFalse(node0.isTrue());
2123:       assertFalse(node0.isGetElem());
2124:       assertFalse(node0.isExprResult());
2125:       assertFalse(node0.isVoid());
2126:       assertFalse(node0.isName());
2127:       assertFalse(node1.isCatch());
2128:       assertEquals(0, node1.getChildCount());
2129:       assertFalse(node1.isRegExp());
2130:       assertFalse(node1.isSetterDef());
2131:       assertEquals(235107, node1.getSourcePosition());
2132:       assertFalse(node1.isDefaultCase());
2133:       assertFalse(node1.isTry());
2134:       assertFalse(node1.isFor());
2135:       assertFalse(node1.isEmpty());
2136:       assertFalse(node1.isCall());
2137:       assertFalse(node1.isNE());
2138:       assertFalse(node1.isTrue());
2139:       assertFalse(node1.isNull());
2140:       assertFalse(node1.isIf());
2141:       assertFalse(node1.isVoid());
2142:       assertFalse(node1.isDelProp());
2143:       assertFalse(node1.isName());
2144:       assertFalse(node1.isContinue());
2145:       assertEquals(57, node1.getLineno());
2146:       assertFalse(node1.isReturn());
2147:       assertFalse(node1.isString());
2148:       assertFalse(node1.isIn());
2149:       assertFalse(node1.hasChildren());
2150:       assertFalse(node1.isInc());
2151:       assertFalse(node1.isWhile());
2152:       assertFalse(node1.isCast());
2153:       assertFalse(node1.isThrow());
2154:       assertTrue(node1.isNew());
2155:       assertFalse(node1.isFalse());
2156:       assertFalse(node1.isFunction());
2157:       assertFalse(node1.isDebugger());
2158:       assertFalse(node1.isAnd());
2159:       assertFalse(node1.isInstanceOf());
2160:       assertFalse(node1.isNot());
2161:       assertFalse(node1.isWith());
2162:       assertFalse(node1.isObjectLit());
2163:       assertFalse(node1.isComma());
2164:       assertFalse(node1.isThis());
2165:       assertFalse(node1.isGetProp());
2166:       assertFalse(node1.isScript());
2167:       assertFalse(node1.hasOneChild());
2168:       assertFalse(node1.isGetElem());
2169:       assertFalse(node1.isHook());
2170:       assertFalse(node1.isAssign());
2171:       assertFalse(node1.isDec());
2172:       assertFalse(node1.isTypeOf());
2173:       assertFalse(node1.isBreak());
2174:       assertFalse(node1.isExprResult());
2175:       assertEquals(1635, node1.getCharno());
2176:       assertFalse(node1.hasMoreThanOneChild());
2177:       assertFalse(node1.isOr());
2178:       assertFalse(node1.isLabel());
2179:       assertFalse(node1.isBlock());
2180:       assertFalse(node1.isAdd());
2181:       assertFalse(node1.isAssignAdd());
2182:       assertFalse(node1.isDo());
2183:       assertFalse(node1.isCase());
2184:       assertFalse(node1.isArrayLit());
2185:       assertFalse(node1.isStringKey());
2186:       assertFalse(node1.isVar());
2187:       assertFalse(node1.isNumber());
2188:       assertFalse(node1.isGetterDef());
2189:       assertFalse(node1.isSwitch());
2190:       assertFalse(node1.isParamList());
2191:       assertFalse(node1.isLabelName());
2192:       assertEquals(30, node1.getType());
2193:       assertEquals(1, node2.getChildCount());
2194:       assertTrue(node2.hasChildren());
2195:       assertFalse(node2.isIn());
2196:       assertFalse(node2.isNE());
2197:       assertFalse(node2.isIf());
2198:       assertFalse(node2.isSwitch());
2199:       assertFalse(node2.isArrayLit());
2200:       assertFalse(node2.isTry());
2201:       assertFalse(node2.isRegExp());
2202:       assertFalse(node2.isHook());
2203:       assertFalse(node2.isDebugger());
2204:       assertFalse(node2.isString());
2205:       assertTrue(node2.hasOneChild());
2206:       assertFalse(node2.isFor());
2207:       assertFalse(node2.isGetterDef());
2208:       assertEquals(235107, node2.getSourcePosition());
2209:       assertFalse(node2.isCase());
2210:       assertFalse(node2.isGetProp());
2211:       assertFalse(node2.isInstanceOf());
2212:       assertFalse(node2.isThis());
2213:       assertFalse(node2.isObjectLit());
2214:       assertEquals(1635, node2.getCharno());
2215:       assertFalse(node2.isWith());
2216:       assertFalse(node2.isFalse());
2217:       assertFalse(node2.isAnd());
2218:       assertFalse(node2.isCatch());
2219:       assertFalse(node2.isFunction());
2220:       assertFalse(node2.isThrow());
2221:       assertFalse(node2.isSetterDef());
2222:       assertFalse(node2.isInc());
2223:       assertFalse(node2.isReturn());
2224:       assertFalse(node2.isOr());
2225:       assertFalse(node2.isAssignAdd());
2226:       assertFalse(node2.hasMoreThanOneChild());
2227:       assertFalse(node2.isTypeOf());
2228:       assertFalse(node2.isDec());
2229:       assertEquals(57, node2.getLineno());
2230:       assertTrue(node2.isDelProp());
2231:       assertFalse(node2.isLabel());
2232:       assertFalse(node2.isAssign());
2233:       assertFalse(node2.isLabelName());
2234:       assertFalse(node2.isContinue());
2235:       assertFalse(node2.isCast());
2236:       assertFalse(node2.isGetElem());
2237:       assertEquals(31, node2.getType());
2238:       assertFalse(node2.isBlock());
2239:       assertFalse(node2.isWhile());
2240:       assertFalse(node2.isNot());
2241:       assertFalse(node2.isNumber());
2242:       assertFalse(node2.isScript());
2243:       assertFalse(node2.isComma());
2244:       assertFalse(node2.isParamList());
2245:       assertFalse(node2.isNull());
2246:       assertFalse(node2.isName());
2247:       assertFalse(node2.isStringKey());
2248:       assertFalse(node2.isCall());
2249:       assertFalse(node2.isExprResult());
2250:       assertFalse(node2.isVoid());
2251:       assertFalse(node2.isBreak());
2252:       assertFalse(node2.isAdd());
2253:       assertFalse(node2.isTrue());
2254:       assertFalse(node2.isVar());
2255:       assertFalse(node2.isEmpty());
2256:       assertFalse(node2.isDo());
2257:       assertFalse(node2.isDefaultCase());
2258:       assertFalse(node2.isNew());
2259:       assertFalse(node3.isRegExp());
2260:       assertFalse(node3.isDefaultCase());
2261:       assertFalse(node3.isDebugger());
2262:       assertFalse(node3.isFunction());
2263:       assertFalse(node3.isVoid());
2264:       assertFalse(node3.isCatch());
2265:       assertFalse(node3.isTry());
2266:       assertEquals(235107, node3.getSourcePosition());
2267:       assertTrue(node3.hasOneChild());
2268:       assertFalse(node3.isFor());
2269:       assertFalse(node3.isGetterDef());
2270:       assertFalse(node3.isArrayLit());
2271:       assertFalse(node3.isStringKey());
2272:       assertFalse(node3.isParamList());
2273:       assertFalse(node3.isSwitch());
2274:       assertFalse(node3.isDo());
2275:       assertFalse(node3.isNew());
2276:       assertFalse(node3.isString());
2277:       assertFalse(node3.isAdd());
2278:       assertFalse(node3.isAssignAdd());
2279:       assertFalse(node3.isLabel());
2280:       assertFalse(node3.isWhile());
2281:       assertFalse(node3.isReturn());
2282:       assertFalse(node3.isVar());
2283:       assertFalse(node3.isNull());
2284:       assertFalse(node3.isTypeOf());
2285:       assertFalse(node3.isDec());
2286:       assertFalse(node3.isBreak());
2287:       assertFalse(node3.isComma());
2288:       assertFalse(node3.isAssign());
2289:       assertFalse(node3.isGetElem());
2290:       assertFalse(node3.isCall());
2291:       assertFalse(node3.isEmpty());
2292:       assertFalse(node3.isOr());
2293:       assertFalse(node3.isName());
2294:       assertFalse(node3.isTrue());
2295:       assertFalse(node3.isNot());
2296:       assertFalse(node3.isWith());
2297:       assertFalse(node3.isExprResult());
2298:       assertFalse(node3.isScript());
2299:       assertFalse(node3.isInstanceOf());
2300:       assertFalse(node3.isThis());
2301:       assertFalse(node3.isNumber());
2302:       assertFalse(node3.isLabelName());
2303:       assertFalse(node3.isFalse());
2304:       assertFalse(node3.isGetProp());
2305:       assertFalse(node3.isCast());
2306:       assertFalse(node3.isObjectLit());
2307:       assertFalse(node3.isAnd());
2308:       assertFalse(node3.isCase());
2309:       assertEquals(31, node3.getType());
2310:       assertFalse(node3.isContinue());
2311:       assertFalse(node3.isInc());
2312:       assertFalse(node3.isHook());
2313:       assertFalse(node3.hasMoreThanOneChild());
2314:       assertEquals(1, node3.getChildCount());
2315:       assertFalse(node3.isBlock());
2316:       assertFalse(node3.isThrow());
2317:       assertFalse(node3.isIf());
2318:       assertFalse(node3.isSetterDef());
2319:       assertTrue(node3.hasChildren());
2320:       assertFalse(node3.isIn());
2321:       assertEquals(57, node3.getLineno());
2322:       assertTrue(node3.isDelProp());
2323:       assertEquals(1635, node3.getCharno());
2324:       assertFalse(node3.isNE());
2325:       
2326:       boolean boolean4 = node1.isAnd();
2327:       assertFalse(boolean4);
2328:       assertFalse(node1.isCatch());
2329:       assertEquals(0, node1.getChildCount());
2330:       assertFalse(node1.isRegExp());
2331:       assertFalse(node1.isSetterDef());
2332:       assertEquals(235107, node1.getSourcePosition());
2333:       assertFalse(node1.isDefaultCase());
2334:       assertFalse(node1.isTry());
2335:       assertFalse(node1.isFor());
2336:       assertFalse(node1.isEmpty());
2337:       assertFalse(node1.isCall());
2338:       assertFalse(node1.isNE());
2339:       assertFalse(node1.isTrue());
2340:       assertFalse(node1.isNull());
2341:       assertFalse(node1.isIf());
2342:       assertFalse(node1.isVoid());
2343:       assertFalse(node1.isDelProp());
2344:       assertFalse(node1.isName());
2345:       assertFalse(node1.isContinue());
2346:       assertEquals(57, node1.getLineno());
2347:       assertFalse(node1.isReturn());
2348:       assertFalse(node1.isString());
2349:       assertFalse(node1.isIn());
2350:       assertFalse(node1.hasChildren());
2351:       assertFalse(node1.isInc());
2352:       assertFalse(node1.isWhile());
2353:       assertFalse(node1.isCast());
2354:       assertFalse(node1.isThrow());
2355:       assertTrue(node1.isNew());
2356:       assertFalse(node1.isFalse());
2357:       assertFalse(node1.isFunction());
2358:       assertFalse(node1.isDebugger());
2359:       assertFalse(node1.isAnd());
2360:       assertFalse(node1.isInstanceOf());
2361:       assertFalse(node1.isNot());
2362:       assertFalse(node1.isWith());
2363:       assertFalse(node1.isObjectLit());
2364:       assertFalse(node1.isComma());
2365:       assertFalse(node1.isThis());
2366:       assertFalse(node1.isGetProp());
2367:       assertFalse(node1.isScript());
2368:       assertFalse(node1.hasOneChild());
2369:       assertFalse(node1.isGetElem());
2370:       assertFalse(node1.isHook());
2371:       assertFalse(node1.isAssign());
2372:       assertFalse(node1.isDec());
2373:       assertFalse(node1.isTypeOf());
2374:       assertFalse(node1.isBreak());
2375:       assertFalse(node1.isExprResult());
2376:       assertEquals(1635, node1.getCharno());
2377:       assertFalse(node1.hasMoreThanOneChild());
2378:       assertFalse(node1.isOr());
2379:       assertFalse(node1.isLabel());
2380:       assertFalse(node1.isBlock());
2381:       assertFalse(node1.isAdd());
2382:       assertFalse(node1.isAssignAdd());
2383:       assertFalse(node1.isDo());
2384:       assertFalse(node1.isCase());
2385:       assertFalse(node1.isArrayLit());
2386:       assertFalse(node1.isStringKey());
2387:       assertFalse(node1.isVar());
2388:       assertFalse(node1.isNumber());
2389:       assertFalse(node1.isGetterDef());
2390:       assertFalse(node1.isSwitch());
2391:       assertFalse(node1.isParamList());
2392:       assertFalse(node1.isLabelName());
2393:       assertEquals(30, node1.getType());
2394:       
2395:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
2396:       assertNull(staticSourceFile0);
2397:       assertFalse(node0.isInstanceOf());
2398:       assertFalse(node0.isObjectLit());
2399:       assertFalse(node0.isComma());
2400:       assertFalse(node0.isNot());
2401:       assertFalse(node0.isWith());
2402:       assertFalse(node0.isScript());
2403:       assertFalse(node0.isThis());
2404:       assertFalse(node0.isThrow());
2405:       assertFalse(node0.isGetProp());
2406:       assertFalse(node0.hasOneChild());
2407:       assertFalse(node0.isCast());
2408:       assertFalse(node0.isFalse());
2409:       assertFalse(node0.isAnd());
2410:       assertFalse(node0.isLabelName());
2411:       assertFalse(node0.isSwitch());
2412:       assertFalse(node0.isIn());
2413:       assertFalse(node0.isContinue());
2414:       assertFalse(node0.isNumber());
2415:       assertFalse(node0.hasMoreThanOneChild());
2416:       assertFalse(node0.isFor());
2417:       assertFalse(node0.isInc());
2418:       assertFalse(node0.isCase());
2419:       assertFalse(node0.isHook());
2420:       assertFalse(node0.isBlock());
2421:       assertEquals(29, node0.getCharno());
2422:       assertFalse(node0.isRegExp());
2423:       assertFalse(node0.isIf());
2424:       assertFalse(node0.isNE());
2425:       assertEquals(0, node0.getChildCount());
2426:       assertEquals(0, node0.getLineno());
2427:       assertFalse(node0.isCatch());
2428:       assertEquals(29, node0.getSourcePosition());
2429:       assertFalse(node0.isDefaultCase());
2430:       assertFalse(node0.isSetterDef());
2431:       assertFalse(node0.isTry());
2432:       assertFalse(node0.isVar());
2433:       assertFalse(node0.isArrayLit());
2434:       assertFalse(node0.isDebugger());
2435:       assertFalse(node0.isFunction());
2436:       assertFalse(node0.isGetterDef());
2437:       assertFalse(node0.isStringKey());
2438:       assertFalse(node0.isParamList());
2439:       assertFalse(node0.isLabel());
2440:       assertFalse(node0.isReturn());
2441:       assertFalse(node0.isTypeOf());
2442:       assertFalse(node0.isOr());
2443:       assertFalse(node0.hasChildren());
2444:       assertFalse(node0.isString());
2445:       assertFalse(node0.isDec());
2446:       assertFalse(node0.isWhile());
2447:       assertFalse(node0.isEmpty());
2448:       assertFalse(node0.isNew());
2449:       assertFalse(node0.isAssignAdd());
2450:       assertFalse(node0.isDo());
2451:       assertFalse(node0.isAdd());
2452:       assertFalse(node0.isCall());
2453:       assertEquals(0, node0.getType());
2454:       assertFalse(node0.isAssign());
2455:       assertFalse(node0.isDelProp());
2456:       assertFalse(node0.isBreak());
2457:       assertFalse(node0.isNull());
2458:       assertFalse(node0.isTrue());
2459:       assertFalse(node0.isGetElem());
2460:       assertFalse(node0.isExprResult());
2461:       assertFalse(node0.isVoid());
2462:       assertFalse(node0.isName());
2463:       
2464:       Iterable<Node> iterable0 = node1.children();
2465:       assertFalse(iterable0.contains(node0));
2466:       assertNotNull(iterable0);
2467:       assertFalse(node1.isCatch());
2468:       assertEquals(0, node1.getChildCount());
2469:       assertFalse(node1.isRegExp());
2470:       assertFalse(node1.isSetterDef());
2471:       assertEquals(235107, node1.getSourcePosition());
2472:       assertFalse(node1.isDefaultCase());
2473:       assertFalse(node1.isTry());
2474:       assertFalse(node1.isFor());
2475:       assertFalse(node1.isEmpty());
2476:       assertFalse(node1.isCall());
2477:       assertFalse(node1.isNE());
2478:       assertFalse(node1.isTrue());
2479:       assertFalse(node1.isNull());
2480:       assertFalse(node1.isIf());
2481:       assertFalse(node1.isVoid());
2482:       assertFalse(node1.isDelProp());
2483:       assertFalse(node1.isName());
2484:       assertFalse(node1.isContinue());
2485:       assertEquals(57, node1.getLineno());
2486:       assertFalse(node1.isReturn());
2487:       assertFalse(node1.isString());
2488:       assertFalse(node1.isIn());
2489:       assertFalse(node1.hasChildren());
2490:       assertFalse(node1.isInc());
2491:       assertFalse(node1.isWhile());
2492:       assertFalse(node1.isCast());
2493:       assertFalse(node1.isThrow());
2494:       assertTrue(node1.isNew());
2495:       assertFalse(node1.isFalse());
2496:       assertFalse(node1.isFunction());
2497:       assertFalse(node1.isDebugger());
2498:       assertFalse(node1.isAnd());
2499:       assertFalse(node1.isInstanceOf());
2500:       assertFalse(node1.isNot());
2501:       assertFalse(node1.isWith());
2502:       assertFalse(node1.isObjectLit());
2503:       assertFalse(node1.isComma());
2504:       assertFalse(node1.isThis());
2505:       assertFalse(node1.isGetProp());
2506:       assertFalse(node1.isScript());
2507:       assertFalse(node1.hasOneChild());
2508:       assertFalse(node1.isGetElem());
2509:       assertFalse(node1.isHook());
2510:       assertFalse(node1.isAssign());
2511:       assertFalse(node1.isDec());
2512:       assertFalse(node1.isTypeOf());
2513:       assertFalse(node1.isBreak());
2514:       assertFalse(node1.isExprResult());
2515:       assertEquals(1635, node1.getCharno());
2516:       assertFalse(node1.hasMoreThanOneChild());
2517:       assertFalse(node1.isOr());
2518:       assertFalse(node1.isLabel());
2519:       assertFalse(node1.isBlock());
2520:       assertFalse(node1.isAdd());
2521:       assertFalse(node1.isAssignAdd());
2522:       assertFalse(node1.isDo());
2523:       assertFalse(node1.isCase());
2524:       assertFalse(node1.isArrayLit());
2525:       assertFalse(node1.isStringKey());
2526:       assertFalse(node1.isVar());
2527:       assertFalse(node1.isNumber());
2528:       assertFalse(node1.isGetterDef());
2529:       assertFalse(node1.isSwitch());
2530:       assertFalse(node1.isParamList());
2531:       assertFalse(node1.isLabelName());
2532:       assertEquals(30, node1.getType());
2533:       
2534:       try { 
2535:         node3.setString("/j4{m(k,3|K^D");
2536:         fail("Expecting exception: UnsupportedOperationException");
2537:       
2538:       } catch(UnsupportedOperationException e) {
2539:          //
2540:          // DELPROP 57 is not a string node
2541:          //
2542:          verifyException("com.google.javascript.rhino.Node", e);
2543:       }
2544:   }
2545: }
RegularFileObject[/tmp/EvoSuite_359_1628157551568/com/google/javascript/rhino/Node_359_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_359_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_359_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_359_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.NamedType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.javascript.rhino.JSDocInfo$Marker",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Platform",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 09:59:12.242 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(0, "~sq`cI[jn", 0, 29);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);

Node node1 = Node.newString(30, "~sq`cI[jn", 57, 40);
assertNotNull(node1);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertEquals(233512, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(40, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node2 = new Node(31, node1, node0, node1);
assertNotNull(node2);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertEquals(233512, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(40, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals(31, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
assertFalse(boolean0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);

boolean boolean1 = node2.isInc();
assertFalse(boolean1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertEquals(233512, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(40, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals(31, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node1.setCharno(1635);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean2 = node1.mayMutateGlobalStateOrThrow();
assertTrue(boolean2);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean3 = node2.isEquivalentToTyped(node1);
assertFalse(boolean3);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals(31, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

String string0 = node2.toStringTree();
assertNotNull(string0);
assertEquals("DELPROP\n    NEW ~sq`cI[jn 57\n", string0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals(31, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node3 = node2.copyInformationFromForTree(node1);
assertNotNull(node3);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertEquals(235107, node2.getSourcePosition());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertEquals(1635, node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals(57, node2.getLineno());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals(31, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertEquals(235107, node3.getSourcePosition());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isVar());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isCase());
assertEquals(31, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isBlock());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertTrue(node3.hasChildren());
assertFalse(node3.isIn());
assertEquals(57, node3.getLineno());
assertTrue(node3.isDelProp());
assertEquals(1635, node3.getCharno());
assertFalse(node3.isNE());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);

int int0 = node3.getSourceOffset();
assertEquals((-1), int0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertEquals(235107, node2.getSourcePosition());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertEquals(1635, node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals(57, node2.getLineno());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals(31, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isComma());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertEquals(235107, node3.getSourcePosition());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isVar());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isCase());
assertEquals(31, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isBlock());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertTrue(node3.hasChildren());
assertFalse(node3.isIn());
assertEquals(57, node3.getLineno());
assertTrue(node3.isDelProp());
assertEquals(1635, node3.getCharno());
assertFalse(node3.isNE());

boolean boolean4 = node1.isAnd();
assertFalse(boolean4);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertNull(staticSourceFile0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(29, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCatch());
assertEquals(29, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertEquals(235107, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(57, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals(1635, node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(30, node1.getType());

node3.setString("/j4{m(k,3|K^D");

[MASTER] 09:59:15.919 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_397_1628157555813/com/google/javascript/rhino/Node_397_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_397_1628157555813/com/google/javascript/rhino/Node_397_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:15.919 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:15.919 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:15.919 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 440
[MASTER] 09:59:15.920 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_397_1628157555813/com/google/javascript/rhino/Node_397_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:15 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_397_tmp__ESTest extends Node_397_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10");
21:       assertNotNull(node0);
22:       assertFalse(node0.isWhile());
23:       assertFalse(node0.isDo());
24:       assertFalse(node0.isContinue());
25:       assertFalse(node0.isNew());
26:       assertFalse(node0.isAdd());
27:       assertEquals((-1), node0.getLineno());
28:       assertFalse(node0.isOr());
29:       assertFalse(node0.isStringKey());
30:       assertFalse(node0.hasChildren());
31:       assertFalse(node0.isNumber());
32:       assertFalse(node0.isDec());
33:       assertEquals((-1), node0.getSourcePosition());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isName());
36:       assertFalse(node0.isTypeOf());
37:       assertFalse(node0.isCall());
38:       assertFalse(node0.isGetElem());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.hasMoreThanOneChild());
41:       assertTrue(node0.isString());
42:       assertFalse(node0.isReturn());
43:       assertFalse(node0.isBlock());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isWith());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isFunction());
48:       assertFalse(node0.isCatch());
49:       assertFalse(node0.isObjectLit());
50:       assertFalse(node0.isAnd());
51:       assertFalse(node0.isDebugger());
52:       assertFalse(node0.isFalse());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isThrow());
56:       assertEquals(40, node0.getType());
57:       assertFalse(node0.isSwitch());
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isInc());
60:       assertFalse(node0.isIn());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isGetProp());
68:       assertFalse(node0.isInstanceOf());
69:       assertFalse(node0.isTry());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isHook());
73:       assertFalse(node0.isThis());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isScript());
77:       assertFalse(node0.isExprResult());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isTrue());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isLabelName());
83:       assertFalse(node0.isEmpty());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isVar());
87:       assertFalse(node0.isLabel());
88:       assertEquals(8, Node.FLAG_NO_THROWS);
89:       assertEquals(39, Node.EMPTY_BLOCK);
90:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
91:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(4095, Node.COLUMN_MASK);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(32, Node.INCRDECR_PROP);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(40, Node.ORIGINALNAME_PROP);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       
125:       boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
126:       assertFalse(boolean0);
127:       assertFalse(node0.isWhile());
128:       assertFalse(node0.isDo());
129:       assertFalse(node0.isContinue());
130:       assertFalse(node0.isNew());
131:       assertFalse(node0.isAdd());
132:       assertEquals((-1), node0.getLineno());
133:       assertFalse(node0.isOr());
134:       assertFalse(node0.isStringKey());
135:       assertFalse(node0.hasChildren());
136:       assertFalse(node0.isNumber());
137:       assertFalse(node0.isDec());
138:       assertEquals((-1), node0.getSourcePosition());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.isName());
141:       assertFalse(node0.isTypeOf());
142:       assertFalse(node0.isCall());
143:       assertFalse(node0.isGetElem());
144:       assertFalse(node0.hasOneChild());
145:       assertFalse(node0.hasMoreThanOneChild());
146:       assertTrue(node0.isString());
147:       assertFalse(node0.isReturn());
148:       assertFalse(node0.isBlock());
149:       assertFalse(node0.isNot());
150:       assertFalse(node0.isWith());
151:       assertFalse(node0.isRegExp());
152:       assertFalse(node0.isFunction());
153:       assertFalse(node0.isCatch());
154:       assertFalse(node0.isObjectLit());
155:       assertFalse(node0.isAnd());
156:       assertFalse(node0.isDebugger());
157:       assertFalse(node0.isFalse());
158:       assertFalse(node0.isSetterDef());
159:       assertFalse(node0.isCast());
160:       assertFalse(node0.isThrow());
161:       assertEquals(40, node0.getType());
162:       assertFalse(node0.isSwitch());
163:       assertFalse(node0.isCase());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isIn());
166:       assertEquals((-1), node0.getCharno());
167:       assertFalse(node0.isNE());
168:       assertFalse(node0.isIf());
169:       assertFalse(node0.isBreak());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isGetProp());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isTry());
175:       assertFalse(node0.isComma());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isHook());
178:       assertFalse(node0.isThis());
179:       assertFalse(node0.isDefaultCase());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isScript());
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isTrue());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isLabelName());
188:       assertFalse(node0.isEmpty());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isAssignAdd());
191:       assertFalse(node0.isVar());
192:       assertFalse(node0.isLabel());
193:       assertEquals(8, Node.FLAG_NO_THROWS);
194:       assertEquals(39, Node.EMPTY_BLOCK);
195:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
200:       assertEquals(55, Node.INFERRED_FUNCTION);
201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
202:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(2, Node.POST_FLAG);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(47, Node.IS_DISPATCHER);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(51, Node.STATIC_SOURCE_FILE);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
219:       assertEquals(29, Node.JSDOC_INFO_PROP);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(32, Node.INCRDECR_PROP);
222:       assertEquals(1, Node.DECR_FLAG);
223:       assertEquals(57, Node.LAST_PROP);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(40, Node.ORIGINALNAME_PROP);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       
230:       int int0 = node0.getSourceOffset();
231:       assertEquals((-1), int0);
232:       assertFalse(node0.isWhile());
233:       assertFalse(node0.isDo());
234:       assertFalse(node0.isContinue());
235:       assertFalse(node0.isNew());
236:       assertFalse(node0.isAdd());
237:       assertEquals((-1), node0.getLineno());
238:       assertFalse(node0.isOr());
239:       assertFalse(node0.isStringKey());
240:       assertFalse(node0.hasChildren());
241:       assertFalse(node0.isNumber());
242:       assertFalse(node0.isDec());
243:       assertEquals((-1), node0.getSourcePosition());
244:       assertFalse(node0.isAssign());
245:       assertFalse(node0.isName());
246:       assertFalse(node0.isTypeOf());
247:       assertFalse(node0.isCall());
248:       assertFalse(node0.isGetElem());
249:       assertFalse(node0.hasOneChild());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertTrue(node0.isString());
252:       assertFalse(node0.isReturn());
253:       assertFalse(node0.isBlock());
254:       assertFalse(node0.isNot());
255:       assertFalse(node0.isWith());
256:       assertFalse(node0.isRegExp());
257:       assertFalse(node0.isFunction());
258:       assertFalse(node0.isCatch());
259:       assertFalse(node0.isObjectLit());
260:       assertFalse(node0.isAnd());
261:       assertFalse(node0.isDebugger());
262:       assertFalse(node0.isFalse());
263:       assertFalse(node0.isSetterDef());
264:       assertFalse(node0.isCast());
265:       assertFalse(node0.isThrow());
266:       assertEquals(40, node0.getType());
267:       assertFalse(node0.isSwitch());
268:       assertFalse(node0.isCase());
269:       assertFalse(node0.isInc());
270:       assertFalse(node0.isIn());
271:       assertEquals((-1), node0.getCharno());
272:       assertFalse(node0.isNE());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isBreak());
275:       assertFalse(node0.isGetterDef());
276:       assertFalse(node0.isDelProp());
277:       assertFalse(node0.isGetProp());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isTry());
280:       assertFalse(node0.isComma());
281:       assertFalse(node0.isFor());
282:       assertFalse(node0.isHook());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isDefaultCase());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isScript());
287:       assertFalse(node0.isExprResult());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.isParamList());
290:       assertFalse(node0.isTrue());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isLabelName());
293:       assertFalse(node0.isEmpty());
294:       assertEquals(0, node0.getChildCount());
295:       assertFalse(node0.isAssignAdd());
296:       assertFalse(node0.isVar());
297:       assertFalse(node0.isLabel());
298:       assertEquals(8, Node.FLAG_NO_THROWS);
299:       assertEquals(39, Node.EMPTY_BLOCK);
300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(55, Node.INFERRED_FUNCTION);
306:       assertEquals(15, Node.NO_SIDE_EFFECTS);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(52, Node.LENGTH);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(36, Node.QUOTED_PROP);
311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
312:       assertEquals(4095, Node.COLUMN_MASK);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(49, Node.DIRECT_EVAL);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(51, Node.STATIC_SOURCE_FILE);
322:       assertEquals(12, Node.COLUMN_BITS);
323:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(53, Node.INPUT_ID);
326:       assertEquals(32, Node.INCRDECR_PROP);
327:       assertEquals(1, Node.DECR_FLAG);
328:       assertEquals(57, Node.LAST_PROP);
329:       assertEquals(54, Node.SLASH_V);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(40, Node.ORIGINALNAME_PROP);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       
335:       node0.setSourceFileForTesting("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10");
336:       assertFalse(node0.isWhile());
337:       assertFalse(node0.isDo());
338:       assertFalse(node0.isContinue());
339:       assertFalse(node0.isNew());
340:       assertFalse(node0.isAdd());
341:       assertEquals((-1), node0.getLineno());
342:       assertFalse(node0.isOr());
343:       assertFalse(node0.isStringKey());
344:       assertFalse(node0.hasChildren());
345:       assertFalse(node0.isNumber());
346:       assertFalse(node0.isDec());
347:       assertEquals((-1), node0.getSourcePosition());
348:       assertFalse(node0.isAssign());
349:       assertFalse(node0.isName());
350:       assertFalse(node0.isTypeOf());
351:       assertFalse(node0.isCall());
352:       assertFalse(node0.isGetElem());
353:       assertFalse(node0.hasOneChild());
354:       assertFalse(node0.hasMoreThanOneChild());
355:       assertTrue(node0.isString());
356:       assertFalse(node0.isReturn());
357:       assertFalse(node0.isBlock());
358:       assertFalse(node0.isNot());
359:       assertFalse(node0.isWith());
360:       assertFalse(node0.isRegExp());
361:       assertFalse(node0.isFunction());
362:       assertFalse(node0.isCatch());
363:       assertFalse(node0.isObjectLit());
364:       assertFalse(node0.isAnd());
365:       assertFalse(node0.isDebugger());
366:       assertFalse(node0.isFalse());
367:       assertFalse(node0.isSetterDef());
368:       assertFalse(node0.isCast());
369:       assertFalse(node0.isThrow());
370:       assertEquals(40, node0.getType());
371:       assertFalse(node0.isSwitch());
372:       assertFalse(node0.isCase());
373:       assertFalse(node0.isInc());
374:       assertFalse(node0.isIn());
375:       assertEquals((-1), node0.getCharno());
376:       assertFalse(node0.isNE());
377:       assertFalse(node0.isIf());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isGetterDef());
380:       assertFalse(node0.isDelProp());
381:       assertFalse(node0.isGetProp());
382:       assertFalse(node0.isInstanceOf());
383:       assertFalse(node0.isTry());
384:       assertFalse(node0.isComma());
385:       assertFalse(node0.isFor());
386:       assertFalse(node0.isHook());
387:       assertFalse(node0.isThis());
388:       assertFalse(node0.isDefaultCase());
389:       assertFalse(node0.isVoid());
390:       assertFalse(node0.isScript());
391:       assertFalse(node0.isExprResult());
392:       assertFalse(node0.isArrayLit());
393:       assertFalse(node0.isParamList());
394:       assertFalse(node0.isTrue());
395:       assertFalse(node0.isNull());
396:       assertFalse(node0.isLabelName());
397:       assertFalse(node0.isEmpty());
398:       assertEquals(0, node0.getChildCount());
399:       assertFalse(node0.isAssignAdd());
400:       assertFalse(node0.isVar());
401:       assertFalse(node0.isLabel());
402:       assertEquals(8, Node.FLAG_NO_THROWS);
403:       assertEquals(39, Node.EMPTY_BLOCK);
404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
406:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
407:       assertEquals(50, Node.FREE_CALL);
408:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
409:       assertEquals(55, Node.INFERRED_FUNCTION);
410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(52, Node.LENGTH);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(36, Node.QUOTED_PROP);
415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(49, Node.DIRECT_EVAL);
419:       assertEquals(48, Node.DIRECTIVES);
420:       assertEquals(37, Node.OPT_ARG_NAME);
421:       assertEquals(2, Node.POST_FLAG);
422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
423:       assertEquals(47, Node.IS_DISPATCHER);
424:       assertEquals(56, Node.CHANGE_TIME);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(12, Node.COLUMN_BITS);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(29, Node.JSDOC_INFO_PROP);
429:       assertEquals(53, Node.INPUT_ID);
430:       assertEquals(32, Node.INCRDECR_PROP);
431:       assertEquals(1, Node.DECR_FLAG);
432:       assertEquals(57, Node.LAST_PROP);
433:       assertEquals(54, Node.SLASH_V);
434:       assertEquals(43, Node.IS_CONSTANT_NAME);
435:       assertEquals(30, Node.VAR_ARGS_NAME);
436:       assertEquals(40, Node.ORIGINALNAME_PROP);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       
439:       Iterable<Node> iterable0 = node0.children();
440:       assertFalse(iterable0.contains(node0));
441:       assertNotNull(iterable0);
442:       assertFalse(node0.isWhile());
443:       assertFalse(node0.isDo());
444:       assertFalse(node0.isContinue());
445:       assertFalse(node0.isNew());
446:       assertFalse(node0.isAdd());
447:       assertEquals((-1), node0.getLineno());
448:       assertFalse(node0.isOr());
449:       assertFalse(node0.isStringKey());
450:       assertFalse(node0.hasChildren());
451:       assertFalse(node0.isNumber());
452:       assertFalse(node0.isDec());
453:       assertEquals((-1), node0.getSourcePosition());
454:       assertFalse(node0.isAssign());
455:       assertFalse(node0.isName());
456:       assertFalse(node0.isTypeOf());
457:       assertFalse(node0.isCall());
458:       assertFalse(node0.isGetElem());
459:       assertFalse(node0.hasOneChild());
460:       assertFalse(node0.hasMoreThanOneChild());
461:       assertTrue(node0.isString());
462:       assertFalse(node0.isReturn());
463:       assertFalse(node0.isBlock());
464:       assertFalse(node0.isNot());
465:       assertFalse(node0.isWith());
466:       assertFalse(node0.isRegExp());
467:       assertFalse(node0.isFunction());
468:       assertFalse(node0.isCatch());
469:       assertFalse(node0.isObjectLit());
470:       assertFalse(node0.isAnd());
471:       assertFalse(node0.isDebugger());
472:       assertFalse(node0.isFalse());
473:       assertFalse(node0.isSetterDef());
474:       assertFalse(node0.isCast());
475:       assertFalse(node0.isThrow());
476:       assertEquals(40, node0.getType());
477:       assertFalse(node0.isSwitch());
478:       assertFalse(node0.isCase());
479:       assertFalse(node0.isInc());
480:       assertFalse(node0.isIn());
481:       assertEquals((-1), node0.getCharno());
482:       assertFalse(node0.isNE());
483:       assertFalse(node0.isIf());
484:       assertFalse(node0.isBreak());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isDelProp());
487:       assertFalse(node0.isGetProp());
488:       assertFalse(node0.isInstanceOf());
489:       assertFalse(node0.isTry());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isFor());
492:       assertFalse(node0.isHook());
493:       assertFalse(node0.isThis());
494:       assertFalse(node0.isDefaultCase());
495:       assertFalse(node0.isVoid());
496:       assertFalse(node0.isScript());
497:       assertFalse(node0.isExprResult());
498:       assertFalse(node0.isArrayLit());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isTrue());
501:       assertFalse(node0.isNull());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isEmpty());
504:       assertEquals(0, node0.getChildCount());
505:       assertFalse(node0.isAssignAdd());
506:       assertFalse(node0.isVar());
507:       assertFalse(node0.isLabel());
508:       assertEquals(8, Node.FLAG_NO_THROWS);
509:       assertEquals(39, Node.EMPTY_BLOCK);
510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
513:       assertEquals(50, Node.FREE_CALL);
514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
515:       assertEquals(55, Node.INFERRED_FUNCTION);
516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
518:       assertEquals(52, Node.LENGTH);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(36, Node.QUOTED_PROP);
521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
522:       assertEquals(4095, Node.COLUMN_MASK);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(48, Node.DIRECTIVES);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(2, Node.POST_FLAG);
528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
529:       assertEquals(47, Node.IS_DISPATCHER);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
532:       assertEquals(12, Node.COLUMN_BITS);
533:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
534:       assertEquals(29, Node.JSDOC_INFO_PROP);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(32, Node.INCRDECR_PROP);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(54, Node.SLASH_V);
540:       assertEquals(43, Node.IS_CONSTANT_NAME);
541:       assertEquals(30, Node.VAR_ARGS_NAME);
542:       assertEquals(40, Node.ORIGINALNAME_PROP);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       
545:       String string0 = node0.toStringTree();
546:       assertNotNull(string0);
547:       assertFalse(node0.isWhile());
548:       assertFalse(node0.isDo());
549:       assertFalse(node0.isContinue());
550:       assertFalse(node0.isNew());
551:       assertFalse(node0.isAdd());
552:       assertEquals((-1), node0.getLineno());
553:       assertFalse(node0.isOr());
554:       assertFalse(node0.isStringKey());
555:       assertFalse(node0.hasChildren());
556:       assertFalse(node0.isNumber());
557:       assertFalse(node0.isDec());
558:       assertEquals((-1), node0.getSourcePosition());
559:       assertFalse(node0.isAssign());
560:       assertFalse(node0.isName());
561:       assertFalse(node0.isTypeOf());
562:       assertFalse(node0.isCall());
563:       assertFalse(node0.isGetElem());
564:       assertFalse(node0.hasOneChild());
565:       assertFalse(node0.hasMoreThanOneChild());
566:       assertTrue(node0.isString());
567:       assertFalse(node0.isReturn());
568:       assertFalse(node0.isBlock());
569:       assertFalse(node0.isNot());
570:       assertFalse(node0.isWith());
571:       assertFalse(node0.isRegExp());
572:       assertFalse(node0.isFunction());
573:       assertFalse(node0.isCatch());
574:       assertFalse(node0.isObjectLit());
575:       assertFalse(node0.isAnd());
576:       assertFalse(node0.isDebugger());
577:       assertFalse(node0.isFalse());
578:       assertFalse(node0.isSetterDef());
579:       assertFalse(node0.isCast());
580:       assertFalse(node0.isThrow());
581:       assertEquals(40, node0.getType());
582:       assertFalse(node0.isSwitch());
583:       assertFalse(node0.isCase());
584:       assertFalse(node0.isInc());
585:       assertFalse(node0.isIn());
586:       assertEquals((-1), node0.getCharno());
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isIf());
589:       assertFalse(node0.isBreak());
590:       assertFalse(node0.isGetterDef());
591:       assertFalse(node0.isDelProp());
592:       assertFalse(node0.isGetProp());
593:       assertFalse(node0.isInstanceOf());
594:       assertFalse(node0.isTry());
595:       assertFalse(node0.isComma());
596:       assertFalse(node0.isFor());
597:       assertFalse(node0.isHook());
598:       assertFalse(node0.isThis());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isVoid());
601:       assertFalse(node0.isScript());
602:       assertFalse(node0.isExprResult());
603:       assertFalse(node0.isArrayLit());
604:       assertFalse(node0.isParamList());
605:       assertFalse(node0.isTrue());
606:       assertFalse(node0.isNull());
607:       assertFalse(node0.isLabelName());
608:       assertFalse(node0.isEmpty());
609:       assertEquals(0, node0.getChildCount());
610:       assertFalse(node0.isAssignAdd());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isLabel());
613:       assertEquals(8, Node.FLAG_NO_THROWS);
614:       assertEquals(39, Node.EMPTY_BLOCK);
615:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
616:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
618:       assertEquals(50, Node.FREE_CALL);
619:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
620:       assertEquals(55, Node.INFERRED_FUNCTION);
621:       assertEquals(15, Node.NO_SIDE_EFFECTS);
622:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
623:       assertEquals(52, Node.LENGTH);
624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
625:       assertEquals(36, Node.QUOTED_PROP);
626:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(57, Node.REFLECTED_OBJECT);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(48, Node.DIRECTIVES);
631:       assertEquals(37, Node.OPT_ARG_NAME);
632:       assertEquals(2, Node.POST_FLAG);
633:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(56, Node.CHANGE_TIME);
636:       assertEquals(51, Node.STATIC_SOURCE_FILE);
637:       assertEquals(12, Node.COLUMN_BITS);
638:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
639:       assertEquals(29, Node.JSDOC_INFO_PROP);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(1, Node.DECR_FLAG);
643:       assertEquals(57, Node.LAST_PROP);
644:       assertEquals(54, Node.SLASH_V);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(30, Node.VAR_ARGS_NAME);
647:       assertEquals(40, Node.ORIGINALNAME_PROP);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       
650:       Node node1 = new Node(57, node0, 6003, 52);
651:       assertNotNull(node1);
652:       assertFalse(node0.isWhile());
653:       assertFalse(node0.isDo());
654:       assertFalse(node0.isContinue());
655:       assertFalse(node0.isNew());
656:       assertFalse(node0.isAdd());
657:       assertEquals((-1), node0.getLineno());
658:       assertFalse(node0.isOr());
659:       assertFalse(node0.isStringKey());
660:       assertFalse(node0.hasChildren());
661:       assertFalse(node0.isNumber());
662:       assertFalse(node0.isDec());
663:       assertEquals((-1), node0.getSourcePosition());
664:       assertFalse(node0.isAssign());
665:       assertFalse(node0.isName());
666:       assertFalse(node0.isTypeOf());
667:       assertFalse(node0.isCall());
668:       assertFalse(node0.isGetElem());
669:       assertFalse(node0.hasOneChild());
670:       assertFalse(node0.hasMoreThanOneChild());
671:       assertTrue(node0.isString());
672:       assertFalse(node0.isReturn());
673:       assertFalse(node0.isBlock());
674:       assertFalse(node0.isNot());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isRegExp());
677:       assertFalse(node0.isFunction());
678:       assertFalse(node0.isCatch());
679:       assertFalse(node0.isObjectLit());
680:       assertFalse(node0.isAnd());
681:       assertFalse(node0.isDebugger());
682:       assertFalse(node0.isFalse());
683:       assertFalse(node0.isSetterDef());
684:       assertFalse(node0.isCast());
685:       assertFalse(node0.isThrow());
686:       assertEquals(40, node0.getType());
687:       assertFalse(node0.isSwitch());
688:       assertFalse(node0.isCase());
689:       assertFalse(node0.isInc());
690:       assertFalse(node0.isIn());
691:       assertEquals((-1), node0.getCharno());
692:       assertFalse(node0.isNE());
693:       assertFalse(node0.isIf());
694:       assertFalse(node0.isBreak());
695:       assertFalse(node0.isGetterDef());
696:       assertFalse(node0.isDelProp());
697:       assertFalse(node0.isGetProp());
698:       assertFalse(node0.isInstanceOf());
699:       assertFalse(node0.isTry());
700:       assertFalse(node0.isComma());
701:       assertFalse(node0.isFor());
702:       assertFalse(node0.isHook());
703:       assertFalse(node0.isThis());
704:       assertFalse(node0.isDefaultCase());
705:       assertFalse(node0.isVoid());
706:       assertFalse(node0.isScript());
707:       assertFalse(node0.isExprResult());
708:       assertFalse(node0.isArrayLit());
709:       assertFalse(node0.isParamList());
710:       assertFalse(node0.isTrue());
711:       assertFalse(node0.isNull());
712:       assertFalse(node0.isLabelName());
713:       assertFalse(node0.isEmpty());
714:       assertEquals(0, node0.getChildCount());
715:       assertFalse(node0.isAssignAdd());
716:       assertFalse(node0.isVar());
717:       assertFalse(node0.isLabel());
718:       assertFalse(node1.isScript());
719:       assertFalse(node1.isWith());
720:       assertFalse(node1.isExprResult());
721:       assertFalse(node1.isObjectLit());
722:       assertFalse(node1.isAnd());
723:       assertFalse(node1.isNot());
724:       assertFalse(node1.isLabelName());
725:       assertFalse(node1.isCast());
726:       assertFalse(node1.isContinue());
727:       assertFalse(node1.isAssignAdd());
728:       assertFalse(node1.isFalse());
729:       assertFalse(node1.isThrow());
730:       assertFalse(node1.isLabel());
731:       assertFalse(node1.isString());
732:       assertFalse(node1.isWhile());
733:       assertFalse(node1.isNew());
734:       assertFalse(node1.isAdd());
735:       assertFalse(node1.isDo());
736:       assertFalse(node1.isOr());
737:       assertFalse(node1.isNull());
738:       assertFalse(node1.isTypeOf());
739:       assertFalse(node1.isDec());
740:       assertFalse(node1.isDelProp());
741:       assertFalse(node1.isName());
742:       assertFalse(node1.isGetElem());
743:       assertFalse(node1.isCall());
744:       assertFalse(node1.isGetProp());
745:       assertFalse(node1.isBreak());
746:       assertFalse(node1.isAssign());
747:       assertFalse(node1.isComma());
748:       assertTrue(node1.hasOneChild());
749:       assertFalse(node1.isReturn());
750:       assertFalse(node1.isRegExp());
751:       assertFalse(node1.isFunction());
752:       assertFalse(node1.isDefaultCase());
753:       assertFalse(node1.isTry());
754:       assertFalse(node1.isVoid());
755:       assertFalse(node1.isArrayLit());
756:       assertEquals(57, node1.getType());
757:       assertFalse(node1.isTrue());
758:       assertFalse(node1.isDebugger());
759:       assertEquals(52, node1.getCharno());
760:       assertFalse(node1.isParamList());
761:       assertFalse(node1.isEmpty());
762:       assertFalse(node1.isSetterDef());
763:       assertFalse(node1.isVar());
764:       assertFalse(node1.isSwitch());
765:       assertFalse(node1.isCase());
766:       assertFalse(node1.isInc());
767:       assertEquals(6003, node1.getLineno());
768:       assertFalse(node1.isIn());
769:       assertFalse(node1.isStringKey());
770:       assertFalse(node1.isNumber());
771:       assertFalse(node1.isGetterDef());
772:       assertFalse(node1.isNE());
773:       assertFalse(node1.isIf());
774:       assertEquals(24588340, node1.getSourcePosition());
775:       assertTrue(node1.hasChildren());
776:       assertFalse(node1.isInstanceOf());
777:       assertFalse(node1.isHook());
778:       assertFalse(node1.isCatch());
779:       assertFalse(node1.hasMoreThanOneChild());
780:       assertFalse(node1.isBlock());
781:       assertFalse(node1.isFor());
782:       assertEquals(1, node1.getChildCount());
783:       assertFalse(node1.isThis());
784:       assertEquals(8, Node.FLAG_NO_THROWS);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
787:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
788:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
789:       assertEquals(50, Node.FREE_CALL);
790:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
791:       assertEquals(55, Node.INFERRED_FUNCTION);
792:       assertEquals(15, Node.NO_SIDE_EFFECTS);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(52, Node.LENGTH);
795:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
796:       assertEquals(36, Node.QUOTED_PROP);
797:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
798:       assertEquals(4095, Node.COLUMN_MASK);
799:       assertEquals(57, Node.REFLECTED_OBJECT);
800:       assertEquals(49, Node.DIRECT_EVAL);
801:       assertEquals(48, Node.DIRECTIVES);
802:       assertEquals(37, Node.OPT_ARG_NAME);
803:       assertEquals(2, Node.POST_FLAG);
804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
805:       assertEquals(47, Node.IS_DISPATCHER);
806:       assertEquals(56, Node.CHANGE_TIME);
807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
808:       assertEquals(12, Node.COLUMN_BITS);
809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
810:       assertEquals(29, Node.JSDOC_INFO_PROP);
811:       assertEquals(53, Node.INPUT_ID);
812:       assertEquals(32, Node.INCRDECR_PROP);
813:       assertEquals(1, Node.DECR_FLAG);
814:       assertEquals(57, Node.LAST_PROP);
815:       assertEquals(54, Node.SLASH_V);
816:       assertEquals(43, Node.IS_CONSTANT_NAME);
817:       assertEquals(30, Node.VAR_ARGS_NAME);
818:       assertEquals(40, Node.ORIGINALNAME_PROP);
819:       assertEquals(46, Node.IS_NAMESPACE);
820:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
821:       assertEquals(37, Node.OPT_ARG_NAME);
822:       assertEquals(56, Node.CHANGE_TIME);
823:       assertEquals(47, Node.IS_DISPATCHER);
824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
825:       assertEquals(2, Node.POST_FLAG);
826:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
827:       assertEquals(29, Node.JSDOC_INFO_PROP);
828:       assertEquals(12, Node.COLUMN_BITS);
829:       assertEquals(57, Node.LAST_PROP);
830:       assertEquals(1, Node.DECR_FLAG);
831:       assertEquals(32, Node.INCRDECR_PROP);
832:       assertEquals(43, Node.IS_CONSTANT_NAME);
833:       assertEquals(54, Node.SLASH_V);
834:       assertEquals(30, Node.VAR_ARGS_NAME);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(46, Node.IS_NAMESPACE);
837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
838:       assertEquals(8, Node.FLAG_NO_THROWS);
839:       assertEquals(39, Node.EMPTY_BLOCK);
840:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
841:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
842:       assertEquals(50, Node.FREE_CALL);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
846:       assertEquals(36, Node.QUOTED_PROP);
847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(53, Node.INPUT_ID);
850:       assertEquals(52, Node.LENGTH);
851:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
852:       assertEquals(4095, Node.COLUMN_MASK);
853:       assertEquals(57, Node.REFLECTED_OBJECT);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertFalse(node1.equals((Object)node0));
857:       
858:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
859:       assertNotNull(node_NodeMismatch0);
860:       assertFalse(node0.isWhile());
861:       assertFalse(node0.isDo());
862:       assertFalse(node0.isContinue());
863:       assertFalse(node0.isNew());
864:       assertFalse(node0.isAdd());
865:       assertEquals((-1), node0.getLineno());
866:       assertFalse(node0.isOr());
867:       assertFalse(node0.isStringKey());
868:       assertFalse(node0.hasChildren());
869:       assertFalse(node0.isNumber());
870:       assertFalse(node0.isDec());
871:       assertEquals((-1), node0.getSourcePosition());
872:       assertFalse(node0.isAssign());
873:       assertFalse(node0.isName());
874:       assertFalse(node0.isTypeOf());
875:       assertFalse(node0.isCall());
876:       assertFalse(node0.isGetElem());
877:       assertFalse(node0.hasOneChild());
878:       assertFalse(node0.hasMoreThanOneChild());
879:       assertTrue(node0.isString());
880:       assertFalse(node0.isReturn());
881:       assertFalse(node0.isBlock());
882:       assertFalse(node0.isNot());
883:       assertFalse(node0.isWith());
884:       assertFalse(node0.isRegExp());
885:       assertFalse(node0.isFunction());
886:       assertFalse(node0.isCatch());
887:       assertFalse(node0.isObjectLit());
888:       assertFalse(node0.isAnd());
889:       assertFalse(node0.isDebugger());
890:       assertFalse(node0.isFalse());
891:       assertFalse(node0.isSetterDef());
892:       assertFalse(node0.isCast());
893:       assertFalse(node0.isThrow());
894:       assertEquals(40, node0.getType());
895:       assertFalse(node0.isSwitch());
896:       assertFalse(node0.isCase());
897:       assertFalse(node0.isInc());
898:       assertFalse(node0.isIn());
899:       assertEquals((-1), node0.getCharno());
900:       assertFalse(node0.isNE());
901:       assertFalse(node0.isIf());
902:       assertFalse(node0.isBreak());
903:       assertFalse(node0.isGetterDef());
904:       assertFalse(node0.isDelProp());
905:       assertFalse(node0.isGetProp());
906:       assertFalse(node0.isInstanceOf());
907:       assertFalse(node0.isTry());
908:       assertFalse(node0.isComma());
909:       assertFalse(node0.isFor());
910:       assertFalse(node0.isHook());
911:       assertFalse(node0.isThis());
912:       assertFalse(node0.isDefaultCase());
913:       assertFalse(node0.isVoid());
914:       assertFalse(node0.isScript());
915:       assertFalse(node0.isExprResult());
916:       assertFalse(node0.isArrayLit());
917:       assertFalse(node0.isParamList());
918:       assertFalse(node0.isTrue());
919:       assertFalse(node0.isNull());
920:       assertFalse(node0.isLabelName());
921:       assertFalse(node0.isEmpty());
922:       assertEquals(0, node0.getChildCount());
923:       assertFalse(node0.isAssignAdd());
924:       assertFalse(node0.isVar());
925:       assertFalse(node0.isLabel());
926:       assertFalse(node1.isScript());
927:       assertFalse(node1.isWith());
928:       assertFalse(node1.isExprResult());
929:       assertFalse(node1.isObjectLit());
930:       assertFalse(node1.isAnd());
931:       assertFalse(node1.isNot());
932:       assertFalse(node1.isLabelName());
933:       assertFalse(node1.isCast());
934:       assertFalse(node1.isContinue());
935:       assertFalse(node1.isAssignAdd());
936:       assertFalse(node1.isFalse());
937:       assertFalse(node1.isThrow());
938:       assertFalse(node1.isLabel());
939:       assertFalse(node1.isString());
940:       assertFalse(node1.isWhile());
941:       assertFalse(node1.isNew());
942:       assertFalse(node1.isAdd());
943:       assertFalse(node1.isDo());
944:       assertFalse(node1.isOr());
945:       assertFalse(node1.isNull());
946:       assertFalse(node1.isTypeOf());
947:       assertFalse(node1.isDec());
948:       assertFalse(node1.isDelProp());
949:       assertFalse(node1.isName());
950:       assertFalse(node1.isGetElem());
951:       assertFalse(node1.isCall());
952:       assertFalse(node1.isGetProp());
953:       assertFalse(node1.isBreak());
954:       assertFalse(node1.isAssign());
955:       assertFalse(node1.isComma());
956:       assertTrue(node1.hasOneChild());
957:       assertFalse(node1.isReturn());
958:       assertFalse(node1.isRegExp());
959:       assertFalse(node1.isFunction());
960:       assertFalse(node1.isDefaultCase());
961:       assertFalse(node1.isTry());
962:       assertFalse(node1.isVoid());
963:       assertFalse(node1.isArrayLit());
964:       assertEquals(57, node1.getType());
965:       assertFalse(node1.isTrue());
966:       assertFalse(node1.isDebugger());
967:       assertEquals(52, node1.getCharno());
968:       assertFalse(node1.isParamList());
969:       assertFalse(node1.isEmpty());
970:       assertFalse(node1.isSetterDef());
971:       assertFalse(node1.isVar());
972:       assertFalse(node1.isSwitch());
973:       assertFalse(node1.isCase());
974:       assertFalse(node1.isInc());
975:       assertEquals(6003, node1.getLineno());
976:       assertFalse(node1.isIn());
977:       assertFalse(node1.isStringKey());
978:       assertFalse(node1.isNumber());
979:       assertFalse(node1.isGetterDef());
980:       assertFalse(node1.isNE());
981:       assertFalse(node1.isIf());
982:       assertEquals(24588340, node1.getSourcePosition());
983:       assertTrue(node1.hasChildren());
984:       assertFalse(node1.isInstanceOf());
985:       assertFalse(node1.isHook());
986:       assertFalse(node1.isCatch());
987:       assertFalse(node1.hasMoreThanOneChild());
988:       assertFalse(node1.isBlock());
989:       assertFalse(node1.isFor());
990:       assertEquals(1, node1.getChildCount());
991:       assertFalse(node1.isThis());
992:       assertEquals(8, Node.FLAG_NO_THROWS);
993:       assertEquals(39, Node.EMPTY_BLOCK);
994:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
995:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
996:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
997:       assertEquals(50, Node.FREE_CALL);
998:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
999:       assertEquals(55, Node.INFERRED_FUNCTION);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(52, Node.LENGTH);
1003:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1006:       assertEquals(4095, Node.COLUMN_MASK);
1007:       assertEquals(57, Node.REFLECTED_OBJECT);
1008:       assertEquals(49, Node.DIRECT_EVAL);
1009:       assertEquals(48, Node.DIRECTIVES);
1010:       assertEquals(37, Node.OPT_ARG_NAME);
1011:       assertEquals(2, Node.POST_FLAG);
1012:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1013:       assertEquals(47, Node.IS_DISPATCHER);
1014:       assertEquals(56, Node.CHANGE_TIME);
1015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1016:       assertEquals(12, Node.COLUMN_BITS);
1017:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1018:       assertEquals(29, Node.JSDOC_INFO_PROP);
1019:       assertEquals(53, Node.INPUT_ID);
1020:       assertEquals(32, Node.INCRDECR_PROP);
1021:       assertEquals(1, Node.DECR_FLAG);
1022:       assertEquals(57, Node.LAST_PROP);
1023:       assertEquals(54, Node.SLASH_V);
1024:       assertEquals(43, Node.IS_CONSTANT_NAME);
1025:       assertEquals(30, Node.VAR_ARGS_NAME);
1026:       assertEquals(40, Node.ORIGINALNAME_PROP);
1027:       assertEquals(46, Node.IS_NAMESPACE);
1028:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1029:       assertEquals(37, Node.OPT_ARG_NAME);
1030:       assertEquals(56, Node.CHANGE_TIME);
1031:       assertEquals(47, Node.IS_DISPATCHER);
1032:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1033:       assertEquals(2, Node.POST_FLAG);
1034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1035:       assertEquals(29, Node.JSDOC_INFO_PROP);
1036:       assertEquals(12, Node.COLUMN_BITS);
1037:       assertEquals(57, Node.LAST_PROP);
1038:       assertEquals(1, Node.DECR_FLAG);
1039:       assertEquals(32, Node.INCRDECR_PROP);
1040:       assertEquals(43, Node.IS_CONSTANT_NAME);
1041:       assertEquals(54, Node.SLASH_V);
1042:       assertEquals(30, Node.VAR_ARGS_NAME);
1043:       assertEquals(40, Node.ORIGINALNAME_PROP);
1044:       assertEquals(46, Node.IS_NAMESPACE);
1045:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1046:       assertEquals(8, Node.FLAG_NO_THROWS);
1047:       assertEquals(39, Node.EMPTY_BLOCK);
1048:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1049:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(55, Node.INFERRED_FUNCTION);
1052:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1053:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1054:       assertEquals(36, Node.QUOTED_PROP);
1055:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1056:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1057:       assertEquals(53, Node.INPUT_ID);
1058:       assertEquals(52, Node.LENGTH);
1059:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1060:       assertEquals(4095, Node.COLUMN_MASK);
1061:       assertEquals(57, Node.REFLECTED_OBJECT);
1062:       assertEquals(48, Node.DIRECTIVES);
1063:       assertEquals(49, Node.DIRECT_EVAL);
1064:       assertFalse(node0.equals((Object)node1));
1065:       assertFalse(node1.equals((Object)node0));
1066:       
1067:       boolean boolean1 = node0.isFromExterns();
1068:       assertFalse(boolean1);
1069:       assertFalse(node0.isWhile());
1070:       assertFalse(node0.isDo());
1071:       assertFalse(node0.isContinue());
1072:       assertFalse(node0.isNew());
1073:       assertFalse(node0.isAdd());
1074:       assertEquals((-1), node0.getLineno());
1075:       assertFalse(node0.isOr());
1076:       assertFalse(node0.isStringKey());
1077:       assertFalse(node0.hasChildren());
1078:       assertFalse(node0.isNumber());
1079:       assertFalse(node0.isDec());
1080:       assertEquals((-1), node0.getSourcePosition());
1081:       assertFalse(node0.isAssign());
1082:       assertFalse(node0.isName());
1083:       assertFalse(node0.isTypeOf());
1084:       assertFalse(node0.isCall());
1085:       assertFalse(node0.isGetElem());
1086:       assertFalse(node0.hasOneChild());
1087:       assertFalse(node0.hasMoreThanOneChild());
1088:       assertTrue(node0.isString());
1089:       assertFalse(node0.isReturn());
1090:       assertFalse(node0.isBlock());
1091:       assertFalse(node0.isNot());
1092:       assertFalse(node0.isWith());
1093:       assertFalse(node0.isRegExp());
1094:       assertFalse(node0.isFunction());
1095:       assertFalse(node0.isCatch());
1096:       assertFalse(node0.isObjectLit());
1097:       assertFalse(node0.isAnd());
1098:       assertFalse(node0.isDebugger());
1099:       assertFalse(node0.isFalse());
1100:       assertFalse(node0.isSetterDef());
1101:       assertFalse(node0.isCast());
1102:       assertFalse(node0.isThrow());
1103:       assertEquals(40, node0.getType());
1104:       assertFalse(node0.isSwitch());
1105:       assertFalse(node0.isCase());
1106:       assertFalse(node0.isInc());
1107:       assertFalse(node0.isIn());
1108:       assertEquals((-1), node0.getCharno());
1109:       assertFalse(node0.isNE());
1110:       assertFalse(node0.isIf());
1111:       assertFalse(node0.isBreak());
1112:       assertFalse(node0.isGetterDef());
1113:       assertFalse(node0.isDelProp());
1114:       assertFalse(node0.isGetProp());
1115:       assertFalse(node0.isInstanceOf());
1116:       assertFalse(node0.isTry());
1117:       assertFalse(node0.isComma());
1118:       assertFalse(node0.isFor());
1119:       assertFalse(node0.isHook());
1120:       assertFalse(node0.isThis());
1121:       assertFalse(node0.isDefaultCase());
1122:       assertFalse(node0.isVoid());
1123:       assertFalse(node0.isScript());
1124:       assertFalse(node0.isExprResult());
1125:       assertFalse(node0.isArrayLit());
1126:       assertFalse(node0.isParamList());
1127:       assertFalse(node0.isTrue());
1128:       assertFalse(node0.isNull());
1129:       assertFalse(node0.isLabelName());
1130:       assertFalse(node0.isEmpty());
1131:       assertEquals(0, node0.getChildCount());
1132:       assertFalse(node0.isAssignAdd());
1133:       assertFalse(node0.isVar());
1134:       assertFalse(node0.isLabel());
1135:       assertEquals(8, Node.FLAG_NO_THROWS);
1136:       assertEquals(39, Node.EMPTY_BLOCK);
1137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1145:       assertEquals(52, Node.LENGTH);
1146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1147:       assertEquals(36, Node.QUOTED_PROP);
1148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1149:       assertEquals(4095, Node.COLUMN_MASK);
1150:       assertEquals(57, Node.REFLECTED_OBJECT);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(48, Node.DIRECTIVES);
1153:       assertEquals(37, Node.OPT_ARG_NAME);
1154:       assertEquals(2, Node.POST_FLAG);
1155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1156:       assertEquals(47, Node.IS_DISPATCHER);
1157:       assertEquals(56, Node.CHANGE_TIME);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1161:       assertEquals(29, Node.JSDOC_INFO_PROP);
1162:       assertEquals(53, Node.INPUT_ID);
1163:       assertEquals(32, Node.INCRDECR_PROP);
1164:       assertEquals(1, Node.DECR_FLAG);
1165:       assertEquals(57, Node.LAST_PROP);
1166:       assertEquals(54, Node.SLASH_V);
1167:       assertEquals(43, Node.IS_CONSTANT_NAME);
1168:       assertEquals(30, Node.VAR_ARGS_NAME);
1169:       assertEquals(40, Node.ORIGINALNAME_PROP);
1170:       assertEquals(46, Node.IS_NAMESPACE);
1171:       assertFalse(node0.equals((Object)node1));
1172:       assertTrue(boolean1 == boolean0);
1173:       
1174:       boolean boolean2 = node1.isAssign();
1175:       assertFalse(boolean2);
1176:       assertFalse(node0.isWhile());
1177:       assertFalse(node0.isDo());
1178:       assertFalse(node0.isContinue());
1179:       assertFalse(node0.isNew());
1180:       assertFalse(node0.isAdd());
1181:       assertEquals((-1), node0.getLineno());
1182:       assertFalse(node0.isOr());
1183:       assertFalse(node0.isStringKey());
1184:       assertFalse(node0.hasChildren());
1185:       assertFalse(node0.isNumber());
1186:       assertFalse(node0.isDec());
1187:       assertEquals((-1), node0.getSourcePosition());
1188:       assertFalse(node0.isAssign());
1189:       assertFalse(node0.isName());
1190:       assertFalse(node0.isTypeOf());
1191:       assertFalse(node0.isCall());
1192:       assertFalse(node0.isGetElem());
1193:       assertFalse(node0.hasOneChild());
1194:       assertFalse(node0.hasMoreThanOneChild());
1195:       assertTrue(node0.isString());
1196:       assertFalse(node0.isReturn());
1197:       assertFalse(node0.isBlock());
1198:       assertFalse(node0.isNot());
1199:       assertFalse(node0.isWith());
1200:       assertFalse(node0.isRegExp());
1201:       assertFalse(node0.isFunction());
1202:       assertFalse(node0.isCatch());
1203:       assertFalse(node0.isObjectLit());
1204:       assertFalse(node0.isAnd());
1205:       assertFalse(node0.isDebugger());
1206:       assertFalse(node0.isFalse());
1207:       assertFalse(node0.isSetterDef());
1208:       assertFalse(node0.isCast());
1209:       assertFalse(node0.isThrow());
1210:       assertEquals(40, node0.getType());
1211:       assertFalse(node0.isSwitch());
1212:       assertFalse(node0.isCase());
1213:       assertFalse(node0.isInc());
1214:       assertFalse(node0.isIn());
1215:       assertEquals((-1), node0.getCharno());
1216:       assertFalse(node0.isNE());
1217:       assertFalse(node0.isIf());
1218:       assertFalse(node0.isBreak());
1219:       assertFalse(node0.isGetterDef());
1220:       assertFalse(node0.isDelProp());
1221:       assertFalse(node0.isGetProp());
1222:       assertFalse(node0.isInstanceOf());
1223:       assertFalse(node0.isTry());
1224:       assertFalse(node0.isComma());
1225:       assertFalse(node0.isFor());
1226:       assertFalse(node0.isHook());
1227:       assertFalse(node0.isThis());
1228:       assertFalse(node0.isDefaultCase());
1229:       assertFalse(node0.isVoid());
1230:       assertFalse(node0.isScript());
1231:       assertFalse(node0.isExprResult());
1232:       assertFalse(node0.isArrayLit());
1233:       assertFalse(node0.isParamList());
1234:       assertFalse(node0.isTrue());
1235:       assertFalse(node0.isNull());
1236:       assertFalse(node0.isLabelName());
1237:       assertFalse(node0.isEmpty());
1238:       assertEquals(0, node0.getChildCount());
1239:       assertFalse(node0.isAssignAdd());
1240:       assertFalse(node0.isVar());
1241:       assertFalse(node0.isLabel());
1242:       assertFalse(node1.isScript());
1243:       assertFalse(node1.isWith());
1244:       assertFalse(node1.isExprResult());
1245:       assertFalse(node1.isObjectLit());
1246:       assertFalse(node1.isAnd());
1247:       assertFalse(node1.isNot());
1248:       assertFalse(node1.isLabelName());
1249:       assertFalse(node1.isCast());
1250:       assertFalse(node1.isContinue());
1251:       assertFalse(node1.isAssignAdd());
1252:       assertFalse(node1.isFalse());
1253:       assertFalse(node1.isThrow());
1254:       assertFalse(node1.isLabel());
1255:       assertFalse(node1.isString());
1256:       assertFalse(node1.isWhile());
1257:       assertFalse(node1.isNew());
1258:       assertFalse(node1.isAdd());
1259:       assertFalse(node1.isDo());
1260:       assertFalse(node1.isOr());
1261:       assertFalse(node1.isNull());
1262:       assertFalse(node1.isTypeOf());
1263:       assertFalse(node1.isDec());
1264:       assertFalse(node1.isDelProp());
1265:       assertFalse(node1.isName());
1266:       assertFalse(node1.isGetElem());
1267:       assertFalse(node1.isCall());
1268:       assertFalse(node1.isGetProp());
1269:       assertFalse(node1.isBreak());
1270:       assertFalse(node1.isAssign());
1271:       assertFalse(node1.isComma());
1272:       assertTrue(node1.hasOneChild());
1273:       assertFalse(node1.isReturn());
1274:       assertFalse(node1.isRegExp());
1275:       assertFalse(node1.isFunction());
1276:       assertFalse(node1.isDefaultCase());
1277:       assertFalse(node1.isTry());
1278:       assertFalse(node1.isVoid());
1279:       assertFalse(node1.isArrayLit());
1280:       assertEquals(57, node1.getType());
1281:       assertFalse(node1.isTrue());
1282:       assertFalse(node1.isDebugger());
1283:       assertEquals(52, node1.getCharno());
1284:       assertFalse(node1.isParamList());
1285:       assertFalse(node1.isEmpty());
1286:       assertFalse(node1.isSetterDef());
1287:       assertFalse(node1.isVar());
1288:       assertFalse(node1.isSwitch());
1289:       assertFalse(node1.isCase());
1290:       assertFalse(node1.isInc());
1291:       assertEquals(6003, node1.getLineno());
1292:       assertFalse(node1.isIn());
1293:       assertFalse(node1.isStringKey());
1294:       assertFalse(node1.isNumber());
1295:       assertFalse(node1.isGetterDef());
1296:       assertFalse(node1.isNE());
1297:       assertFalse(node1.isIf());
1298:       assertEquals(24588340, node1.getSourcePosition());
1299:       assertTrue(node1.hasChildren());
1300:       assertFalse(node1.isInstanceOf());
1301:       assertFalse(node1.isHook());
1302:       assertFalse(node1.isCatch());
1303:       assertFalse(node1.hasMoreThanOneChild());
1304:       assertFalse(node1.isBlock());
1305:       assertFalse(node1.isFor());
1306:       assertEquals(1, node1.getChildCount());
1307:       assertFalse(node1.isThis());
1308:       assertEquals(8, Node.FLAG_NO_THROWS);
1309:       assertEquals(39, Node.EMPTY_BLOCK);
1310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1313:       assertEquals(50, Node.FREE_CALL);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(55, Node.INFERRED_FUNCTION);
1316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1318:       assertEquals(52, Node.LENGTH);
1319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1320:       assertEquals(36, Node.QUOTED_PROP);
1321:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1322:       assertEquals(4095, Node.COLUMN_MASK);
1323:       assertEquals(57, Node.REFLECTED_OBJECT);
1324:       assertEquals(49, Node.DIRECT_EVAL);
1325:       assertEquals(48, Node.DIRECTIVES);
1326:       assertEquals(37, Node.OPT_ARG_NAME);
1327:       assertEquals(2, Node.POST_FLAG);
1328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1329:       assertEquals(47, Node.IS_DISPATCHER);
1330:       assertEquals(56, Node.CHANGE_TIME);
1331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1332:       assertEquals(12, Node.COLUMN_BITS);
1333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1334:       assertEquals(29, Node.JSDOC_INFO_PROP);
1335:       assertEquals(53, Node.INPUT_ID);
1336:       assertEquals(32, Node.INCRDECR_PROP);
1337:       assertEquals(1, Node.DECR_FLAG);
1338:       assertEquals(57, Node.LAST_PROP);
1339:       assertEquals(54, Node.SLASH_V);
1340:       assertEquals(43, Node.IS_CONSTANT_NAME);
1341:       assertEquals(30, Node.VAR_ARGS_NAME);
1342:       assertEquals(40, Node.ORIGINALNAME_PROP);
1343:       assertEquals(46, Node.IS_NAMESPACE);
1344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1345:       assertEquals(37, Node.OPT_ARG_NAME);
1346:       assertEquals(56, Node.CHANGE_TIME);
1347:       assertEquals(47, Node.IS_DISPATCHER);
1348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1349:       assertEquals(2, Node.POST_FLAG);
1350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1351:       assertEquals(29, Node.JSDOC_INFO_PROP);
1352:       assertEquals(12, Node.COLUMN_BITS);
1353:       assertEquals(57, Node.LAST_PROP);
1354:       assertEquals(1, Node.DECR_FLAG);
1355:       assertEquals(32, Node.INCRDECR_PROP);
1356:       assertEquals(43, Node.IS_CONSTANT_NAME);
1357:       assertEquals(54, Node.SLASH_V);
1358:       assertEquals(30, Node.VAR_ARGS_NAME);
1359:       assertEquals(40, Node.ORIGINALNAME_PROP);
1360:       assertEquals(46, Node.IS_NAMESPACE);
1361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1362:       assertEquals(8, Node.FLAG_NO_THROWS);
1363:       assertEquals(39, Node.EMPTY_BLOCK);
1364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1366:       assertEquals(50, Node.FREE_CALL);
1367:       assertEquals(55, Node.INFERRED_FUNCTION);
1368:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1370:       assertEquals(36, Node.QUOTED_PROP);
1371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1373:       assertEquals(53, Node.INPUT_ID);
1374:       assertEquals(52, Node.LENGTH);
1375:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1376:       assertEquals(4095, Node.COLUMN_MASK);
1377:       assertEquals(57, Node.REFLECTED_OBJECT);
1378:       assertEquals(48, Node.DIRECTIVES);
1379:       assertEquals(49, Node.DIRECT_EVAL);
1380:       assertFalse(node0.equals((Object)node1));
1381:       assertFalse(node1.equals((Object)node0));
1382:       assertTrue(boolean2 == boolean0);
1383:       assertTrue(boolean2 == boolean1);
1384:   }
1385: }
RegularFileObject[/tmp/EvoSuite_397_1628157555813/com/google/javascript/rhino/Node_397_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:15 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_397_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_397_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_397_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.NamedType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.javascript.rhino.JSDocInfo$Marker",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Platform",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 09:59:16.006 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10");
assertNotNull(node0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);

boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
assertFalse(boolean0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);

int int0 = node0.getSourceOffset();
assertEquals((-1), int0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);

node0.setSourceFileForTesting("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10");
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);

String string0 = node0.toStringTree();
assertNotNull(string0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);

Node node1 = new Node(57, node0, 6003, 52);
assertNotNull(node1);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertEquals(57, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(52, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertEquals(6003, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(24588340, node1.getSourcePosition());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertEquals(57, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(52, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertEquals(6003, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(24588340, node1.getSourcePosition());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node0.isFromExterns();
assertFalse(boolean1);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node1.isAssign();
assertFalse(boolean2);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertEquals(57, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(52, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertEquals(6003, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(24588340, node1.getSourcePosition());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);


[MASTER] 09:59:18.550 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_419_1628157558334/com/google/javascript/rhino/Node_419_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_419_1628157558334/com/google/javascript/rhino/Node_419_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:18.550 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:18.550 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:18.556 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 995
[MASTER] 09:59:18.558 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_419_1628157558334/com/google/javascript/rhino/Node_419_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_419_tmp__ESTest extends Node_419_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("l:kU9Ci.A");
25:       assertNotNull(node0);
26:       assertFalse(node0.isCase());
27:       assertFalse(node0.isIn());
28:       assertEquals((-1), node0.getCharno());
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isIf());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isDelProp());
33:       assertFalse(node0.isFor());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.isComma());
36:       assertFalse(node0.isGetterDef());
37:       assertFalse(node0.isGetProp());
38:       assertFalse(node0.isThis());
39:       assertFalse(node0.isTry());
40:       assertFalse(node0.isAnd());
41:       assertFalse(node0.isCatch());
42:       assertEquals(40, node0.getType());
43:       assertFalse(node0.isInstanceOf());
44:       assertFalse(node0.isFunction());
45:       assertFalse(node0.isWith());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isNot());
49:       assertFalse(node0.isDebugger());
50:       assertFalse(node0.isFalse());
51:       assertFalse(node0.isThrow());
52:       assertFalse(node0.isCast());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isInc());
55:       assertFalse(node0.isContinue());
56:       assertFalse(node0.isWhile());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isOr());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isCall());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.isNumber());
66:       assertFalse(node0.isDec());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isTypeOf());
70:       assertFalse(node0.isBlock());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.hasOneChild());
74:       assertTrue(node0.isString());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isParamList());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isNull());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isArrayLit());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isLabel());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isDo());
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
95:       assertEquals(57, Node.REFLECTED_OBJECT);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(55, Node.INFERRED_FUNCTION);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(39, Node.EMPTY_BLOCK);
100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
101:       assertEquals(49, Node.DIRECT_EVAL);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(12, Node.COLUMN_BITS);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(4095, Node.COLUMN_MASK);
112:       assertEquals(29, Node.JSDOC_INFO_PROP);
113:       assertEquals(47, Node.IS_DISPATCHER);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(32, Node.INCRDECR_PROP);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(57, Node.LAST_PROP);
124:       assertEquals(54, Node.SLASH_V);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       assertEquals(2, Node.POST_FLAG);
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       
129:       node0.setVarArgs(true);
130:       assertFalse(node0.isCase());
131:       assertFalse(node0.isIn());
132:       assertEquals((-1), node0.getCharno());
133:       assertFalse(node0.isNE());
134:       assertFalse(node0.isIf());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isDelProp());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isHook());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isGetterDef());
141:       assertFalse(node0.isGetProp());
142:       assertFalse(node0.isThis());
143:       assertFalse(node0.isTry());
144:       assertFalse(node0.isAnd());
145:       assertFalse(node0.isCatch());
146:       assertEquals(40, node0.getType());
147:       assertFalse(node0.isInstanceOf());
148:       assertFalse(node0.isFunction());
149:       assertFalse(node0.isWith());
150:       assertFalse(node0.isRegExp());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isNot());
153:       assertFalse(node0.isDebugger());
154:       assertFalse(node0.isFalse());
155:       assertFalse(node0.isThrow());
156:       assertFalse(node0.isCast());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isInc());
159:       assertFalse(node0.isContinue());
160:       assertFalse(node0.isWhile());
161:       assertFalse(node0.hasMoreThanOneChild());
162:       assertFalse(node0.isOr());
163:       assertEquals((-1), node0.getLineno());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isStringKey());
167:       assertFalse(node0.isCall());
168:       assertEquals((-1), node0.getSourcePosition());
169:       assertFalse(node0.isNumber());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.hasChildren());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.isTypeOf());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isReturn());
176:       assertFalse(node0.isScript());
177:       assertFalse(node0.hasOneChild());
178:       assertTrue(node0.isString());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isArrayLit());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isName());
188:       assertFalse(node0.isEmpty());
189:       assertFalse(node0.isVar());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isLabel());
193:       assertFalse(node0.isAdd());
194:       assertFalse(node0.isDefaultCase());
195:       assertFalse(node0.isDo());
196:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
199:       assertEquals(57, Node.REFLECTED_OBJECT);
200:       assertEquals(52, Node.LENGTH);
201:       assertEquals(55, Node.INFERRED_FUNCTION);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(39, Node.EMPTY_BLOCK);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(1, Node.DECR_FLAG);
207:       assertEquals(36, Node.QUOTED_PROP);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(4095, Node.COLUMN_MASK);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(47, Node.IS_DISPATCHER);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(2, Node.POST_FLAG);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       
233:       boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
234:       assertTrue(boolean0);
235:       assertFalse(node0.isCase());
236:       assertFalse(node0.isIn());
237:       assertEquals((-1), node0.getCharno());
238:       assertFalse(node0.isNE());
239:       assertFalse(node0.isIf());
240:       assertFalse(node0.isSwitch());
241:       assertFalse(node0.isDelProp());
242:       assertFalse(node0.isFor());
243:       assertFalse(node0.isHook());
244:       assertFalse(node0.isComma());
245:       assertFalse(node0.isGetterDef());
246:       assertFalse(node0.isGetProp());
247:       assertFalse(node0.isThis());
248:       assertFalse(node0.isTry());
249:       assertFalse(node0.isAnd());
250:       assertFalse(node0.isCatch());
251:       assertEquals(40, node0.getType());
252:       assertFalse(node0.isInstanceOf());
253:       assertFalse(node0.isFunction());
254:       assertFalse(node0.isWith());
255:       assertFalse(node0.isRegExp());
256:       assertFalse(node0.isObjectLit());
257:       assertFalse(node0.isNot());
258:       assertFalse(node0.isDebugger());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isThrow());
261:       assertFalse(node0.isCast());
262:       assertFalse(node0.isSetterDef());
263:       assertFalse(node0.isInc());
264:       assertFalse(node0.isContinue());
265:       assertFalse(node0.isWhile());
266:       assertFalse(node0.hasMoreThanOneChild());
267:       assertFalse(node0.isOr());
268:       assertEquals((-1), node0.getLineno());
269:       assertFalse(node0.isLabelName());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.isStringKey());
272:       assertFalse(node0.isCall());
273:       assertEquals((-1), node0.getSourcePosition());
274:       assertFalse(node0.isNumber());
275:       assertFalse(node0.isDec());
276:       assertFalse(node0.hasChildren());
277:       assertFalse(node0.isAssign());
278:       assertFalse(node0.isTypeOf());
279:       assertFalse(node0.isBlock());
280:       assertFalse(node0.isReturn());
281:       assertFalse(node0.isScript());
282:       assertFalse(node0.hasOneChild());
283:       assertTrue(node0.isString());
284:       assertEquals(0, node0.getChildCount());
285:       assertFalse(node0.isParamList());
286:       assertFalse(node0.isTrue());
287:       assertFalse(node0.isNull());
288:       assertFalse(node0.isExprResult());
289:       assertFalse(node0.isBreak());
290:       assertFalse(node0.isArrayLit());
291:       assertFalse(node0.isVoid());
292:       assertFalse(node0.isName());
293:       assertFalse(node0.isEmpty());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isNew());
296:       assertFalse(node0.isAssignAdd());
297:       assertFalse(node0.isLabel());
298:       assertFalse(node0.isAdd());
299:       assertFalse(node0.isDefaultCase());
300:       assertFalse(node0.isDo());
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
304:       assertEquals(57, Node.REFLECTED_OBJECT);
305:       assertEquals(52, Node.LENGTH);
306:       assertEquals(55, Node.INFERRED_FUNCTION);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(39, Node.EMPTY_BLOCK);
309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(36, Node.QUOTED_PROP);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(30, Node.VAR_ARGS_NAME);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(54, Node.SLASH_V);
334:       assertEquals(43, Node.IS_CONSTANT_NAME);
335:       assertEquals(2, Node.POST_FLAG);
336:       assertEquals(40, Node.ORIGINALNAME_PROP);
337:       
338:       InputId inputId0 = new InputId("com.google.common.collect.LinkedHashMultimap");
339:       assertNotNull(inputId0);
340:       assertEquals("com.google.common.collect.LinkedHashMultimap", inputId0.getIdName());
341:       
342:       InputId inputId1 = new InputId("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
343:       assertNotNull(inputId1);
344:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
345:       assertFalse(inputId1.equals((Object)inputId0));
346:       
347:       String string0 = inputId1.toString();
348:       assertNotNull(string0);
349:       assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string0);
350:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
351:       assertFalse(inputId1.equals((Object)inputId0));
352:       assertNotSame(inputId1, inputId0);
353:       
354:       String string1 = inputId1.toString();
355:       assertNotNull(string1);
356:       assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string1);
357:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
358:       assertFalse(inputId1.equals((Object)inputId0));
359:       assertTrue(string1.equals((Object)string0));
360:       assertNotSame(inputId1, inputId0);
361:       
362:       Node node1 = new Node(46, node0, 9, 50);
363:       assertNotNull(node1);
364:       assertFalse(node0.isCase());
365:       assertFalse(node0.isIn());
366:       assertEquals((-1), node0.getCharno());
367:       assertFalse(node0.isNE());
368:       assertFalse(node0.isIf());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isDelProp());
371:       assertFalse(node0.isFor());
372:       assertFalse(node0.isHook());
373:       assertFalse(node0.isComma());
374:       assertFalse(node0.isGetterDef());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isTry());
378:       assertFalse(node0.isAnd());
379:       assertFalse(node0.isCatch());
380:       assertEquals(40, node0.getType());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isFunction());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.isRegExp());
385:       assertFalse(node0.isObjectLit());
386:       assertFalse(node0.isNot());
387:       assertFalse(node0.isDebugger());
388:       assertFalse(node0.isFalse());
389:       assertFalse(node0.isThrow());
390:       assertFalse(node0.isCast());
391:       assertFalse(node0.isSetterDef());
392:       assertFalse(node0.isInc());
393:       assertFalse(node0.isContinue());
394:       assertFalse(node0.isWhile());
395:       assertFalse(node0.hasMoreThanOneChild());
396:       assertFalse(node0.isOr());
397:       assertEquals((-1), node0.getLineno());
398:       assertFalse(node0.isLabelName());
399:       assertFalse(node0.isGetElem());
400:       assertFalse(node0.isStringKey());
401:       assertFalse(node0.isCall());
402:       assertEquals((-1), node0.getSourcePosition());
403:       assertFalse(node0.isNumber());
404:       assertFalse(node0.isDec());
405:       assertFalse(node0.hasChildren());
406:       assertFalse(node0.isAssign());
407:       assertFalse(node0.isTypeOf());
408:       assertFalse(node0.isBlock());
409:       assertFalse(node0.isReturn());
410:       assertFalse(node0.isScript());
411:       assertFalse(node0.hasOneChild());
412:       assertTrue(node0.isString());
413:       assertEquals(0, node0.getChildCount());
414:       assertFalse(node0.isParamList());
415:       assertFalse(node0.isTrue());
416:       assertFalse(node0.isNull());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.isBreak());
419:       assertFalse(node0.isArrayLit());
420:       assertFalse(node0.isVoid());
421:       assertFalse(node0.isName());
422:       assertFalse(node0.isEmpty());
423:       assertFalse(node0.isVar());
424:       assertFalse(node0.isNew());
425:       assertFalse(node0.isAssignAdd());
426:       assertFalse(node0.isLabel());
427:       assertFalse(node0.isAdd());
428:       assertFalse(node0.isDefaultCase());
429:       assertFalse(node0.isDo());
430:       assertEquals(46, node1.getType());
431:       assertFalse(node1.isGetProp());
432:       assertFalse(node1.isBreak());
433:       assertFalse(node1.isInstanceOf());
434:       assertFalse(node1.isHook());
435:       assertFalse(node1.isFalse());
436:       assertFalse(node1.isThrow());
437:       assertFalse(node1.isComma());
438:       assertFalse(node1.isThis());
439:       assertFalse(node1.isScript());
440:       assertFalse(node1.isString());
441:       assertFalse(node1.isSwitch());
442:       assertFalse(node1.isCase());
443:       assertFalse(node1.isAnd());
444:       assertFalse(node1.isObjectLit());
445:       assertFalse(node1.isNot());
446:       assertEquals(50, node1.getCharno());
447:       assertFalse(node1.isNumber());
448:       assertFalse(node1.isGetterDef());
449:       assertFalse(node1.isNE());
450:       assertFalse(node1.isIf());
451:       assertTrue(node1.hasChildren());
452:       assertFalse(node1.isCast());
453:       assertFalse(node1.hasMoreThanOneChild());
454:       assertFalse(node1.isContinue());
455:       assertFalse(node1.isFor());
456:       assertEquals(1, node1.getChildCount());
457:       assertFalse(node1.isRegExp());
458:       assertFalse(node1.isWith());
459:       assertFalse(node1.isInc());
460:       assertFalse(node1.isIn());
461:       assertFalse(node1.isNull());
462:       assertFalse(node1.isParamList());
463:       assertFalse(node1.isName());
464:       assertFalse(node1.isCall());
465:       assertFalse(node1.isSetterDef());
466:       assertFalse(node1.isVar());
467:       assertFalse(node1.isCatch());
468:       assertFalse(node1.isBlock());
469:       assertFalse(node1.isFunction());
470:       assertFalse(node1.isWhile());
471:       assertFalse(node1.isTry());
472:       assertEquals(36914, node1.getSourcePosition());
473:       assertFalse(node1.isStringKey());
474:       assertFalse(node1.isDebugger());
475:       assertFalse(node1.isDec());
476:       assertFalse(node1.isDelProp());
477:       assertFalse(node1.isTypeOf());
478:       assertFalse(node1.isGetElem());
479:       assertFalse(node1.isEmpty());
480:       assertFalse(node1.isLabelName());
481:       assertFalse(node1.isArrayLit());
482:       assertFalse(node1.isAssignAdd());
483:       assertEquals(9, node1.getLineno());
484:       assertFalse(node1.isAssign());
485:       assertTrue(node1.hasOneChild());
486:       assertFalse(node1.isReturn());
487:       assertFalse(node1.isLabel());
488:       assertFalse(node1.isDefaultCase());
489:       assertFalse(node1.isNew());
490:       assertFalse(node1.isVoid());
491:       assertFalse(node1.isExprResult());
492:       assertFalse(node1.isAdd());
493:       assertFalse(node1.isDo());
494:       assertFalse(node1.isOr());
495:       assertFalse(node1.isTrue());
496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
497:       assertEquals(50, Node.FREE_CALL);
498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
499:       assertEquals(57, Node.REFLECTED_OBJECT);
500:       assertEquals(52, Node.LENGTH);
501:       assertEquals(55, Node.INFERRED_FUNCTION);
502:       assertEquals(8, Node.FLAG_NO_THROWS);
503:       assertEquals(39, Node.EMPTY_BLOCK);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(49, Node.DIRECT_EVAL);
506:       assertEquals(1, Node.DECR_FLAG);
507:       assertEquals(36, Node.QUOTED_PROP);
508:       assertEquals(12, Node.COLUMN_BITS);
509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
510:       assertEquals(48, Node.DIRECTIVES);
511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(29, Node.JSDOC_INFO_PROP);
517:       assertEquals(47, Node.IS_DISPATCHER);
518:       assertEquals(56, Node.CHANGE_TIME);
519:       assertEquals(32, Node.INCRDECR_PROP);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(53, Node.INPUT_ID);
522:       assertEquals(51, Node.STATIC_SOURCE_FILE);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
525:       assertEquals(30, Node.VAR_ARGS_NAME);
526:       assertEquals(15, Node.NO_SIDE_EFFECTS);
527:       assertEquals(57, Node.LAST_PROP);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(43, Node.IS_CONSTANT_NAME);
530:       assertEquals(2, Node.POST_FLAG);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
533:       assertEquals(43, Node.IS_CONSTANT_NAME);
534:       assertEquals(36, Node.QUOTED_PROP);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
537:       assertEquals(4095, Node.COLUMN_MASK);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(37, Node.OPT_ARG_NAME);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(50, Node.FREE_CALL);
544:       assertEquals(12, Node.COLUMN_BITS);
545:       assertEquals(1, Node.DECR_FLAG);
546:       assertEquals(32, Node.INCRDECR_PROP);
547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
549:       assertEquals(54, Node.SLASH_V);
550:       assertEquals(30, Node.VAR_ARGS_NAME);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
553:       assertEquals(40, Node.ORIGINALNAME_PROP);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(57, Node.REFLECTED_OBJECT);
556:       assertEquals(49, Node.DIRECT_EVAL);
557:       assertEquals(2, Node.POST_FLAG);
558:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
559:       assertEquals(8, Node.FLAG_NO_THROWS);
560:       assertEquals(39, Node.EMPTY_BLOCK);
561:       assertEquals(56, Node.CHANGE_TIME);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
564:       assertEquals(55, Node.INFERRED_FUNCTION);
565:       assertEquals(29, Node.JSDOC_INFO_PROP);
566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
567:       assertEquals(57, Node.LAST_PROP);
568:       assertFalse(node1.equals((Object)node0));
569:       
570:       node1.setInputId(inputId1);
571:       assertFalse(node0.isCase());
572:       assertFalse(node0.isIn());
573:       assertEquals((-1), node0.getCharno());
574:       assertFalse(node0.isNE());
575:       assertFalse(node0.isIf());
576:       assertFalse(node0.isSwitch());
577:       assertFalse(node0.isDelProp());
578:       assertFalse(node0.isFor());
579:       assertFalse(node0.isHook());
580:       assertFalse(node0.isComma());
581:       assertFalse(node0.isGetterDef());
582:       assertFalse(node0.isGetProp());
583:       assertFalse(node0.isThis());
584:       assertFalse(node0.isTry());
585:       assertFalse(node0.isAnd());
586:       assertFalse(node0.isCatch());
587:       assertEquals(40, node0.getType());
588:       assertFalse(node0.isInstanceOf());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isWith());
591:       assertFalse(node0.isRegExp());
592:       assertFalse(node0.isObjectLit());
593:       assertFalse(node0.isNot());
594:       assertFalse(node0.isDebugger());
595:       assertFalse(node0.isFalse());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isCast());
598:       assertFalse(node0.isSetterDef());
599:       assertFalse(node0.isInc());
600:       assertFalse(node0.isContinue());
601:       assertFalse(node0.isWhile());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isOr());
604:       assertEquals((-1), node0.getLineno());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isGetElem());
607:       assertFalse(node0.isStringKey());
608:       assertFalse(node0.isCall());
609:       assertEquals((-1), node0.getSourcePosition());
610:       assertFalse(node0.isNumber());
611:       assertFalse(node0.isDec());
612:       assertFalse(node0.hasChildren());
613:       assertFalse(node0.isAssign());
614:       assertFalse(node0.isTypeOf());
615:       assertFalse(node0.isBlock());
616:       assertFalse(node0.isReturn());
617:       assertFalse(node0.isScript());
618:       assertFalse(node0.hasOneChild());
619:       assertTrue(node0.isString());
620:       assertEquals(0, node0.getChildCount());
621:       assertFalse(node0.isParamList());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isNull());
624:       assertFalse(node0.isExprResult());
625:       assertFalse(node0.isBreak());
626:       assertFalse(node0.isArrayLit());
627:       assertFalse(node0.isVoid());
628:       assertFalse(node0.isName());
629:       assertFalse(node0.isEmpty());
630:       assertFalse(node0.isVar());
631:       assertFalse(node0.isNew());
632:       assertFalse(node0.isAssignAdd());
633:       assertFalse(node0.isLabel());
634:       assertFalse(node0.isAdd());
635:       assertFalse(node0.isDefaultCase());
636:       assertFalse(node0.isDo());
637:       assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
638:       assertEquals(46, node1.getType());
639:       assertFalse(node1.isGetProp());
640:       assertFalse(node1.isBreak());
641:       assertFalse(node1.isInstanceOf());
642:       assertFalse(node1.isHook());
643:       assertFalse(node1.isFalse());
644:       assertFalse(node1.isThrow());
645:       assertFalse(node1.isComma());
646:       assertFalse(node1.isThis());
647:       assertFalse(node1.isScript());
648:       assertFalse(node1.isString());
649:       assertFalse(node1.isSwitch());
650:       assertFalse(node1.isCase());
651:       assertFalse(node1.isAnd());
652:       assertFalse(node1.isObjectLit());
653:       assertFalse(node1.isNot());
654:       assertEquals(50, node1.getCharno());
655:       assertFalse(node1.isNumber());
656:       assertFalse(node1.isGetterDef());
657:       assertFalse(node1.isNE());
658:       assertFalse(node1.isIf());
659:       assertTrue(node1.hasChildren());
660:       assertFalse(node1.isCast());
661:       assertFalse(node1.hasMoreThanOneChild());
662:       assertFalse(node1.isContinue());
663:       assertFalse(node1.isFor());
664:       assertEquals(1, node1.getChildCount());
665:       assertFalse(node1.isRegExp());
666:       assertFalse(node1.isWith());
667:       assertFalse(node1.isInc());
668:       assertFalse(node1.isIn());
669:       assertFalse(node1.isNull());
670:       assertFalse(node1.isParamList());
671:       assertFalse(node1.isName());
672:       assertFalse(node1.isCall());
673:       assertFalse(node1.isSetterDef());
674:       assertFalse(node1.isVar());
675:       assertFalse(node1.isCatch());
676:       assertFalse(node1.isBlock());
677:       assertFalse(node1.isFunction());
678:       assertFalse(node1.isWhile());
679:       assertFalse(node1.isTry());
680:       assertEquals(36914, node1.getSourcePosition());
681:       assertFalse(node1.isStringKey());
682:       assertFalse(node1.isDebugger());
683:       assertFalse(node1.isDec());
684:       assertFalse(node1.isDelProp());
685:       assertFalse(node1.isTypeOf());
686:       assertFalse(node1.isGetElem());
687:       assertFalse(node1.isEmpty());
688:       assertFalse(node1.isLabelName());
689:       assertFalse(node1.isArrayLit());
690:       assertFalse(node1.isAssignAdd());
691:       assertEquals(9, node1.getLineno());
692:       assertFalse(node1.isAssign());
693:       assertTrue(node1.hasOneChild());
694:       assertFalse(node1.isReturn());
695:       assertFalse(node1.isLabel());
696:       assertFalse(node1.isDefaultCase());
697:       assertFalse(node1.isNew());
698:       assertFalse(node1.isVoid());
699:       assertFalse(node1.isExprResult());
700:       assertFalse(node1.isAdd());
701:       assertFalse(node1.isDo());
702:       assertFalse(node1.isOr());
703:       assertFalse(node1.isTrue());
704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
705:       assertEquals(50, Node.FREE_CALL);
706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
707:       assertEquals(57, Node.REFLECTED_OBJECT);
708:       assertEquals(52, Node.LENGTH);
709:       assertEquals(55, Node.INFERRED_FUNCTION);
710:       assertEquals(8, Node.FLAG_NO_THROWS);
711:       assertEquals(39, Node.EMPTY_BLOCK);
712:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
713:       assertEquals(49, Node.DIRECT_EVAL);
714:       assertEquals(1, Node.DECR_FLAG);
715:       assertEquals(36, Node.QUOTED_PROP);
716:       assertEquals(12, Node.COLUMN_BITS);
717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
718:       assertEquals(48, Node.DIRECTIVES);
719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
720:       assertEquals(37, Node.OPT_ARG_NAME);
721:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
722:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
723:       assertEquals(4095, Node.COLUMN_MASK);
724:       assertEquals(29, Node.JSDOC_INFO_PROP);
725:       assertEquals(47, Node.IS_DISPATCHER);
726:       assertEquals(56, Node.CHANGE_TIME);
727:       assertEquals(32, Node.INCRDECR_PROP);
728:       assertEquals(46, Node.IS_NAMESPACE);
729:       assertEquals(53, Node.INPUT_ID);
730:       assertEquals(51, Node.STATIC_SOURCE_FILE);
731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
733:       assertEquals(30, Node.VAR_ARGS_NAME);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(57, Node.LAST_PROP);
736:       assertEquals(54, Node.SLASH_V);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(2, Node.POST_FLAG);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
741:       assertEquals(43, Node.IS_CONSTANT_NAME);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(53, Node.INPUT_ID);
744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
745:       assertEquals(4095, Node.COLUMN_MASK);
746:       assertEquals(48, Node.DIRECTIVES);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(37, Node.OPT_ARG_NAME);
749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
751:       assertEquals(50, Node.FREE_CALL);
752:       assertEquals(12, Node.COLUMN_BITS);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(32, Node.INCRDECR_PROP);
755:       assertEquals(15, Node.NO_SIDE_EFFECTS);
756:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
757:       assertEquals(54, Node.SLASH_V);
758:       assertEquals(30, Node.VAR_ARGS_NAME);
759:       assertEquals(52, Node.LENGTH);
760:       assertEquals(51, Node.STATIC_SOURCE_FILE);
761:       assertEquals(40, Node.ORIGINALNAME_PROP);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(57, Node.REFLECTED_OBJECT);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(2, Node.POST_FLAG);
766:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
767:       assertEquals(8, Node.FLAG_NO_THROWS);
768:       assertEquals(39, Node.EMPTY_BLOCK);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(47, Node.IS_DISPATCHER);
771:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
772:       assertEquals(55, Node.INFERRED_FUNCTION);
773:       assertEquals(29, Node.JSDOC_INFO_PROP);
774:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertFalse(node0.equals((Object)node1));
777:       assertFalse(inputId1.equals((Object)inputId0));
778:       assertFalse(node1.equals((Object)node0));
779:       assertNotSame(inputId1, inputId0);
780:       
781:       boolean boolean1 = node0.isEmpty();
782:       assertFalse(boolean1);
783:       assertFalse(node0.isCase());
784:       assertFalse(node0.isIn());
785:       assertEquals((-1), node0.getCharno());
786:       assertFalse(node0.isNE());
787:       assertFalse(node0.isIf());
788:       assertFalse(node0.isSwitch());
789:       assertFalse(node0.isDelProp());
790:       assertFalse(node0.isFor());
791:       assertFalse(node0.isHook());
792:       assertFalse(node0.isComma());
793:       assertFalse(node0.isGetterDef());
794:       assertFalse(node0.isGetProp());
795:       assertFalse(node0.isThis());
796:       assertFalse(node0.isTry());
797:       assertFalse(node0.isAnd());
798:       assertFalse(node0.isCatch());
799:       assertEquals(40, node0.getType());
800:       assertFalse(node0.isInstanceOf());
801:       assertFalse(node0.isFunction());
802:       assertFalse(node0.isWith());
803:       assertFalse(node0.isRegExp());
804:       assertFalse(node0.isObjectLit());
805:       assertFalse(node0.isNot());
806:       assertFalse(node0.isDebugger());
807:       assertFalse(node0.isFalse());
808:       assertFalse(node0.isThrow());
809:       assertFalse(node0.isCast());
810:       assertFalse(node0.isSetterDef());
811:       assertFalse(node0.isInc());
812:       assertFalse(node0.isContinue());
813:       assertFalse(node0.isWhile());
814:       assertFalse(node0.hasMoreThanOneChild());
815:       assertFalse(node0.isOr());
816:       assertEquals((-1), node0.getLineno());
817:       assertFalse(node0.isLabelName());
818:       assertFalse(node0.isGetElem());
819:       assertFalse(node0.isStringKey());
820:       assertFalse(node0.isCall());
821:       assertEquals((-1), node0.getSourcePosition());
822:       assertFalse(node0.isNumber());
823:       assertFalse(node0.isDec());
824:       assertFalse(node0.hasChildren());
825:       assertFalse(node0.isAssign());
826:       assertFalse(node0.isTypeOf());
827:       assertFalse(node0.isBlock());
828:       assertFalse(node0.isReturn());
829:       assertFalse(node0.isScript());
830:       assertFalse(node0.hasOneChild());
831:       assertTrue(node0.isString());
832:       assertEquals(0, node0.getChildCount());
833:       assertFalse(node0.isParamList());
834:       assertFalse(node0.isTrue());
835:       assertFalse(node0.isNull());
836:       assertFalse(node0.isExprResult());
837:       assertFalse(node0.isBreak());
838:       assertFalse(node0.isArrayLit());
839:       assertFalse(node0.isVoid());
840:       assertFalse(node0.isName());
841:       assertFalse(node0.isEmpty());
842:       assertFalse(node0.isVar());
843:       assertFalse(node0.isNew());
844:       assertFalse(node0.isAssignAdd());
845:       assertFalse(node0.isLabel());
846:       assertFalse(node0.isAdd());
847:       assertFalse(node0.isDefaultCase());
848:       assertFalse(node0.isDo());
849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
852:       assertEquals(57, Node.REFLECTED_OBJECT);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(55, Node.INFERRED_FUNCTION);
855:       assertEquals(8, Node.FLAG_NO_THROWS);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
858:       assertEquals(49, Node.DIRECT_EVAL);
859:       assertEquals(1, Node.DECR_FLAG);
860:       assertEquals(36, Node.QUOTED_PROP);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
863:       assertEquals(48, Node.DIRECTIVES);
864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
865:       assertEquals(37, Node.OPT_ARG_NAME);
866:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
868:       assertEquals(4095, Node.COLUMN_MASK);
869:       assertEquals(29, Node.JSDOC_INFO_PROP);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(32, Node.INCRDECR_PROP);
873:       assertEquals(46, Node.IS_NAMESPACE);
874:       assertEquals(53, Node.INPUT_ID);
875:       assertEquals(51, Node.STATIC_SOURCE_FILE);
876:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
878:       assertEquals(30, Node.VAR_ARGS_NAME);
879:       assertEquals(15, Node.NO_SIDE_EFFECTS);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(54, Node.SLASH_V);
882:       assertEquals(43, Node.IS_CONSTANT_NAME);
883:       assertEquals(2, Node.POST_FLAG);
884:       assertEquals(40, Node.ORIGINALNAME_PROP);
885:       assertFalse(node0.equals((Object)node1));
886:       assertFalse(boolean1 == boolean0);
887:       
888:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
889:       assertNull(staticSourceFile0);
890:       assertFalse(node0.isCase());
891:       assertFalse(node0.isIn());
892:       assertEquals((-1), node0.getCharno());
893:       assertFalse(node0.isNE());
894:       assertFalse(node0.isIf());
895:       assertFalse(node0.isSwitch());
896:       assertFalse(node0.isDelProp());
897:       assertFalse(node0.isFor());
898:       assertFalse(node0.isHook());
899:       assertFalse(node0.isComma());
900:       assertFalse(node0.isGetterDef());
901:       assertFalse(node0.isGetProp());
902:       assertFalse(node0.isThis());
903:       assertFalse(node0.isTry());
904:       assertFalse(node0.isAnd());
905:       assertFalse(node0.isCatch());
906:       assertEquals(40, node0.getType());
907:       assertFalse(node0.isInstanceOf());
908:       assertFalse(node0.isFunction());
909:       assertFalse(node0.isWith());
910:       assertFalse(node0.isRegExp());
911:       assertFalse(node0.isObjectLit());
912:       assertFalse(node0.isNot());
913:       assertFalse(node0.isDebugger());
914:       assertFalse(node0.isFalse());
915:       assertFalse(node0.isThrow());
916:       assertFalse(node0.isCast());
917:       assertFalse(node0.isSetterDef());
918:       assertFalse(node0.isInc());
919:       assertFalse(node0.isContinue());
920:       assertFalse(node0.isWhile());
921:       assertFalse(node0.hasMoreThanOneChild());
922:       assertFalse(node0.isOr());
923:       assertEquals((-1), node0.getLineno());
924:       assertFalse(node0.isLabelName());
925:       assertFalse(node0.isGetElem());
926:       assertFalse(node0.isStringKey());
927:       assertFalse(node0.isCall());
928:       assertEquals((-1), node0.getSourcePosition());
929:       assertFalse(node0.isNumber());
930:       assertFalse(node0.isDec());
931:       assertFalse(node0.hasChildren());
932:       assertFalse(node0.isAssign());
933:       assertFalse(node0.isTypeOf());
934:       assertFalse(node0.isBlock());
935:       assertFalse(node0.isReturn());
936:       assertFalse(node0.isScript());
937:       assertFalse(node0.hasOneChild());
938:       assertTrue(node0.isString());
939:       assertEquals(0, node0.getChildCount());
940:       assertFalse(node0.isParamList());
941:       assertFalse(node0.isTrue());
942:       assertFalse(node0.isNull());
943:       assertFalse(node0.isExprResult());
944:       assertFalse(node0.isBreak());
945:       assertFalse(node0.isArrayLit());
946:       assertFalse(node0.isVoid());
947:       assertFalse(node0.isName());
948:       assertFalse(node0.isEmpty());
949:       assertFalse(node0.isVar());
950:       assertFalse(node0.isNew());
951:       assertFalse(node0.isAssignAdd());
952:       assertFalse(node0.isLabel());
953:       assertFalse(node0.isAdd());
954:       assertFalse(node0.isDefaultCase());
955:       assertFalse(node0.isDo());
956:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
957:       assertEquals(50, Node.FREE_CALL);
958:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
959:       assertEquals(57, Node.REFLECTED_OBJECT);
960:       assertEquals(52, Node.LENGTH);
961:       assertEquals(55, Node.INFERRED_FUNCTION);
962:       assertEquals(8, Node.FLAG_NO_THROWS);
963:       assertEquals(39, Node.EMPTY_BLOCK);
964:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
965:       assertEquals(49, Node.DIRECT_EVAL);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(36, Node.QUOTED_PROP);
968:       assertEquals(12, Node.COLUMN_BITS);
969:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
970:       assertEquals(48, Node.DIRECTIVES);
971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
972:       assertEquals(37, Node.OPT_ARG_NAME);
973:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(29, Node.JSDOC_INFO_PROP);
977:       assertEquals(47, Node.IS_DISPATCHER);
978:       assertEquals(56, Node.CHANGE_TIME);
979:       assertEquals(32, Node.INCRDECR_PROP);
980:       assertEquals(46, Node.IS_NAMESPACE);
981:       assertEquals(53, Node.INPUT_ID);
982:       assertEquals(51, Node.STATIC_SOURCE_FILE);
983:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
984:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(57, Node.LAST_PROP);
988:       assertEquals(54, Node.SLASH_V);
989:       assertEquals(43, Node.IS_CONSTANT_NAME);
990:       assertEquals(2, Node.POST_FLAG);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertFalse(node0.equals((Object)node1));
993:       
994:       Iterable<Node> iterable0 = node0.children();
995:       assertFalse(iterable0.contains(node1));
996:       assertNotNull(iterable0);
997:       assertFalse(node0.isCase());
998:       assertFalse(node0.isIn());
999:       assertEquals((-1), node0.getCharno());
1000:       assertFalse(node0.isNE());
1001:       assertFalse(node0.isIf());
1002:       assertFalse(node0.isSwitch());
1003:       assertFalse(node0.isDelProp());
1004:       assertFalse(node0.isFor());
1005:       assertFalse(node0.isHook());
1006:       assertFalse(node0.isComma());
1007:       assertFalse(node0.isGetterDef());
1008:       assertFalse(node0.isGetProp());
1009:       assertFalse(node0.isThis());
1010:       assertFalse(node0.isTry());
1011:       assertFalse(node0.isAnd());
1012:       assertFalse(node0.isCatch());
1013:       assertEquals(40, node0.getType());
1014:       assertFalse(node0.isInstanceOf());
1015:       assertFalse(node0.isFunction());
1016:       assertFalse(node0.isWith());
1017:       assertFalse(node0.isRegExp());
1018:       assertFalse(node0.isObjectLit());
1019:       assertFalse(node0.isNot());
1020:       assertFalse(node0.isDebugger());
1021:       assertFalse(node0.isFalse());
1022:       assertFalse(node0.isThrow());
1023:       assertFalse(node0.isCast());
1024:       assertFalse(node0.isSetterDef());
1025:       assertFalse(node0.isInc());
1026:       assertFalse(node0.isContinue());
1027:       assertFalse(node0.isWhile());
1028:       assertFalse(node0.hasMoreThanOneChild());
1029:       assertFalse(node0.isOr());
1030:       assertEquals((-1), node0.getLineno());
1031:       assertFalse(node0.isLabelName());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isStringKey());
1034:       assertFalse(node0.isCall());
1035:       assertEquals((-1), node0.getSourcePosition());
1036:       assertFalse(node0.isNumber());
1037:       assertFalse(node0.isDec());
1038:       assertFalse(node0.hasChildren());
1039:       assertFalse(node0.isAssign());
1040:       assertFalse(node0.isTypeOf());
1041:       assertFalse(node0.isBlock());
1042:       assertFalse(node0.isReturn());
1043:       assertFalse(node0.isScript());
1044:       assertFalse(node0.hasOneChild());
1045:       assertTrue(node0.isString());
1046:       assertEquals(0, node0.getChildCount());
1047:       assertFalse(node0.isParamList());
1048:       assertFalse(node0.isTrue());
1049:       assertFalse(node0.isNull());
1050:       assertFalse(node0.isExprResult());
1051:       assertFalse(node0.isBreak());
1052:       assertFalse(node0.isArrayLit());
1053:       assertFalse(node0.isVoid());
1054:       assertFalse(node0.isName());
1055:       assertFalse(node0.isEmpty());
1056:       assertFalse(node0.isVar());
1057:       assertFalse(node0.isNew());
1058:       assertFalse(node0.isAssignAdd());
1059:       assertFalse(node0.isLabel());
1060:       assertFalse(node0.isAdd());
1061:       assertFalse(node0.isDefaultCase());
1062:       assertFalse(node0.isDo());
1063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1064:       assertEquals(50, Node.FREE_CALL);
1065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1066:       assertEquals(57, Node.REFLECTED_OBJECT);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(55, Node.INFERRED_FUNCTION);
1069:       assertEquals(8, Node.FLAG_NO_THROWS);
1070:       assertEquals(39, Node.EMPTY_BLOCK);
1071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1072:       assertEquals(49, Node.DIRECT_EVAL);
1073:       assertEquals(1, Node.DECR_FLAG);
1074:       assertEquals(36, Node.QUOTED_PROP);
1075:       assertEquals(12, Node.COLUMN_BITS);
1076:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1077:       assertEquals(48, Node.DIRECTIVES);
1078:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1079:       assertEquals(37, Node.OPT_ARG_NAME);
1080:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1081:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1082:       assertEquals(4095, Node.COLUMN_MASK);
1083:       assertEquals(29, Node.JSDOC_INFO_PROP);
1084:       assertEquals(47, Node.IS_DISPATCHER);
1085:       assertEquals(56, Node.CHANGE_TIME);
1086:       assertEquals(32, Node.INCRDECR_PROP);
1087:       assertEquals(46, Node.IS_NAMESPACE);
1088:       assertEquals(53, Node.INPUT_ID);
1089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1090:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1091:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1092:       assertEquals(30, Node.VAR_ARGS_NAME);
1093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1094:       assertEquals(57, Node.LAST_PROP);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(43, Node.IS_CONSTANT_NAME);
1097:       assertEquals(2, Node.POST_FLAG);
1098:       assertEquals(40, Node.ORIGINALNAME_PROP);
1099:       assertFalse(node0.equals((Object)node1));
1100:       
1101:       Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
1102:       assertNotNull(node2);
1103:       assertFalse(node0.isCase());
1104:       assertFalse(node0.isIn());
1105:       assertEquals((-1), node0.getCharno());
1106:       assertFalse(node0.isNE());
1107:       assertFalse(node0.isIf());
1108:       assertFalse(node0.isSwitch());
1109:       assertFalse(node0.isDelProp());
1110:       assertFalse(node0.isFor());
1111:       assertFalse(node0.isHook());
1112:       assertFalse(node0.isComma());
1113:       assertFalse(node0.isGetterDef());
1114:       assertFalse(node0.isGetProp());
1115:       assertFalse(node0.isThis());
1116:       assertFalse(node0.isTry());
1117:       assertFalse(node0.isAnd());
1118:       assertFalse(node0.isCatch());
1119:       assertEquals(40, node0.getType());
1120:       assertFalse(node0.isInstanceOf());
1121:       assertFalse(node0.isFunction());
1122:       assertFalse(node0.isWith());
1123:       assertFalse(node0.isRegExp());
1124:       assertFalse(node0.isObjectLit());
1125:       assertFalse(node0.isNot());
1126:       assertFalse(node0.isDebugger());
1127:       assertFalse(node0.isFalse());
1128:       assertFalse(node0.isThrow());
1129:       assertFalse(node0.isCast());
1130:       assertFalse(node0.isSetterDef());
1131:       assertFalse(node0.isInc());
1132:       assertFalse(node0.isContinue());
1133:       assertFalse(node0.isWhile());
1134:       assertFalse(node0.hasMoreThanOneChild());
1135:       assertFalse(node0.isOr());
1136:       assertEquals((-1), node0.getLineno());
1137:       assertFalse(node0.isLabelName());
1138:       assertFalse(node0.isGetElem());
1139:       assertFalse(node0.isStringKey());
1140:       assertFalse(node0.isCall());
1141:       assertEquals((-1), node0.getSourcePosition());
1142:       assertFalse(node0.isNumber());
1143:       assertFalse(node0.isDec());
1144:       assertFalse(node0.hasChildren());
1145:       assertFalse(node0.isAssign());
1146:       assertFalse(node0.isTypeOf());
1147:       assertFalse(node0.isBlock());
1148:       assertFalse(node0.isReturn());
1149:       assertFalse(node0.isScript());
1150:       assertFalse(node0.hasOneChild());
1151:       assertTrue(node0.isString());
1152:       assertEquals(0, node0.getChildCount());
1153:       assertFalse(node0.isParamList());
1154:       assertFalse(node0.isTrue());
1155:       assertFalse(node0.isNull());
1156:       assertFalse(node0.isExprResult());
1157:       assertFalse(node0.isBreak());
1158:       assertFalse(node0.isArrayLit());
1159:       assertFalse(node0.isVoid());
1160:       assertFalse(node0.isName());
1161:       assertFalse(node0.isEmpty());
1162:       assertFalse(node0.isVar());
1163:       assertFalse(node0.isNew());
1164:       assertFalse(node0.isAssignAdd());
1165:       assertFalse(node0.isLabel());
1166:       assertFalse(node0.isAdd());
1167:       assertFalse(node0.isDefaultCase());
1168:       assertFalse(node0.isDo());
1169:       assertEquals(46, node1.getType());
1170:       assertFalse(node1.isGetProp());
1171:       assertFalse(node1.isBreak());
1172:       assertFalse(node1.isInstanceOf());
1173:       assertFalse(node1.isHook());
1174:       assertFalse(node1.isFalse());
1175:       assertFalse(node1.isThrow());
1176:       assertFalse(node1.isComma());
1177:       assertFalse(node1.isThis());
1178:       assertFalse(node1.isScript());
1179:       assertFalse(node1.isString());
1180:       assertFalse(node1.isSwitch());
1181:       assertFalse(node1.isCase());
1182:       assertFalse(node1.isAnd());
1183:       assertFalse(node1.isObjectLit());
1184:       assertFalse(node1.isNot());
1185:       assertEquals((-1), node1.getCharno());
1186:       assertFalse(node1.isNumber());
1187:       assertFalse(node1.isGetterDef());
1188:       assertFalse(node1.isNE());
1189:       assertFalse(node1.isIf());
1190:       assertTrue(node1.hasChildren());
1191:       assertEquals((-1), node1.getLineno());
1192:       assertFalse(node1.isCast());
1193:       assertFalse(node1.hasMoreThanOneChild());
1194:       assertFalse(node1.isContinue());
1195:       assertFalse(node1.isFor());
1196:       assertEquals(1, node1.getChildCount());
1197:       assertFalse(node1.isRegExp());
1198:       assertFalse(node1.isWith());
1199:       assertFalse(node1.isInc());
1200:       assertFalse(node1.isIn());
1201:       assertFalse(node1.isNull());
1202:       assertFalse(node1.isParamList());
1203:       assertFalse(node1.isName());
1204:       assertFalse(node1.isCall());
1205:       assertFalse(node1.isSetterDef());
1206:       assertFalse(node1.isVar());
1207:       assertFalse(node1.isCatch());
1208:       assertFalse(node1.isBlock());
1209:       assertFalse(node1.isFunction());
1210:       assertFalse(node1.isWhile());
1211:       assertFalse(node1.isTry());
1212:       assertFalse(node1.isStringKey());
1213:       assertFalse(node1.isDebugger());
1214:       assertEquals((-1), node1.getSourcePosition());
1215:       assertFalse(node1.isDec());
1216:       assertFalse(node1.isDelProp());
1217:       assertFalse(node1.isTypeOf());
1218:       assertFalse(node1.isGetElem());
1219:       assertFalse(node1.isEmpty());
1220:       assertFalse(node1.isLabelName());
1221:       assertFalse(node1.isArrayLit());
1222:       assertFalse(node1.isAssignAdd());
1223:       assertFalse(node1.isAssign());
1224:       assertTrue(node1.hasOneChild());
1225:       assertFalse(node1.isReturn());
1226:       assertFalse(node1.isLabel());
1227:       assertFalse(node1.isDefaultCase());
1228:       assertFalse(node1.isNew());
1229:       assertFalse(node1.isVoid());
1230:       assertFalse(node1.isExprResult());
1231:       assertFalse(node1.isAdd());
1232:       assertFalse(node1.isDo());
1233:       assertFalse(node1.isOr());
1234:       assertFalse(node1.isTrue());
1235:       assertFalse(node2.isGetElem());
1236:       assertFalse(node2.isAssign());
1237:       assertFalse(node2.isLabelName());
1238:       assertFalse(node2.isExprResult());
1239:       assertFalse(node2.isTypeOf());
1240:       assertFalse(node2.isLabel());
1241:       assertFalse(node2.isDec());
1242:       assertEquals((-1), node2.getLineno());
1243:       assertFalse(node2.isWith());
1244:       assertFalse(node2.isCast());
1245:       assertFalse(node2.isContinue());
1246:       assertFalse(node2.isDo());
1247:       assertFalse(node2.isAssignAdd());
1248:       assertFalse(node2.isNew());
1249:       assertFalse(node2.isOr());
1250:       assertEquals(46, node2.getType());
1251:       assertFalse(node2.isAdd());
1252:       assertFalse(node2.isCall());
1253:       assertFalse(node2.isFalse());
1254:       assertFalse(node2.isName());
1255:       assertFalse(node2.isNull());
1256:       assertFalse(node2.isThrow());
1257:       assertFalse(node2.isComma());
1258:       assertFalse(node2.isBreak());
1259:       assertFalse(node2.isAnd());
1260:       assertFalse(node2.isObjectLit());
1261:       assertFalse(node2.isNot());
1262:       assertFalse(node2.isWhile());
1263:       assertFalse(node2.isReturn());
1264:       assertFalse(node2.isDebugger());
1265:       assertFalse(node2.isGetProp());
1266:       assertEquals((-1), node2.getSourcePosition());
1267:       assertFalse(node2.isString());
1268:       assertFalse(node2.isArrayLit());
1269:       assertFalse(node2.isDelProp());
1270:       assertFalse(node2.isIf());
1271:       assertTrue(node2.hasOneChild());
1272:       assertFalse(node2.isFor());
1273:       assertFalse(node2.isNE());
1274:       assertFalse(node2.isVoid());
1275:       assertFalse(node2.isFunction());
1276:       assertFalse(node2.isRegExp());
1277:       assertTrue(node2.hasChildren());
1278:       assertFalse(node2.isDefaultCase());
1279:       assertFalse(node2.isTrue());
1280:       assertFalse(node2.isSetterDef());
1281:       assertFalse(node2.isInc());
1282:       assertFalse(node2.isIn());
1283:       assertFalse(node2.isEmpty());
1284:       assertFalse(node2.isHook());
1285:       assertFalse(node2.isVar());
1286:       assertFalse(node2.isBlock());
1287:       assertFalse(node2.isStringKey());
1288:       assertFalse(node2.isParamList());
1289:       assertFalse(node2.isThis());
1290:       assertFalse(node2.isSwitch());
1291:       assertFalse(node2.isCatch());
1292:       assertFalse(node2.isInstanceOf());
1293:       assertFalse(node2.hasMoreThanOneChild());
1294:       assertFalse(node2.isCase());
1295:       assertEquals(1, node2.getChildCount());
1296:       assertEquals((-1), node2.getCharno());
1297:       assertFalse(node2.isTry());
1298:       assertFalse(node2.isGetterDef());
1299:       assertFalse(node2.isNumber());
1300:       assertFalse(node2.isScript());
1301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1302:       assertEquals(50, Node.FREE_CALL);
1303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1304:       assertEquals(57, Node.REFLECTED_OBJECT);
1305:       assertEquals(52, Node.LENGTH);
1306:       assertEquals(55, Node.INFERRED_FUNCTION);
1307:       assertEquals(8, Node.FLAG_NO_THROWS);
1308:       assertEquals(39, Node.EMPTY_BLOCK);
1309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1310:       assertEquals(49, Node.DIRECT_EVAL);
1311:       assertEquals(1, Node.DECR_FLAG);
1312:       assertEquals(36, Node.QUOTED_PROP);
1313:       assertEquals(12, Node.COLUMN_BITS);
1314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1315:       assertEquals(48, Node.DIRECTIVES);
1316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1317:       assertEquals(37, Node.OPT_ARG_NAME);
1318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1320:       assertEquals(4095, Node.COLUMN_MASK);
1321:       assertEquals(29, Node.JSDOC_INFO_PROP);
1322:       assertEquals(47, Node.IS_DISPATCHER);
1323:       assertEquals(56, Node.CHANGE_TIME);
1324:       assertEquals(32, Node.INCRDECR_PROP);
1325:       assertEquals(46, Node.IS_NAMESPACE);
1326:       assertEquals(53, Node.INPUT_ID);
1327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1330:       assertEquals(30, Node.VAR_ARGS_NAME);
1331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1332:       assertEquals(57, Node.LAST_PROP);
1333:       assertEquals(54, Node.SLASH_V);
1334:       assertEquals(43, Node.IS_CONSTANT_NAME);
1335:       assertEquals(2, Node.POST_FLAG);
1336:       assertEquals(40, Node.ORIGINALNAME_PROP);
1337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1338:       assertEquals(43, Node.IS_CONSTANT_NAME);
1339:       assertEquals(36, Node.QUOTED_PROP);
1340:       assertEquals(53, Node.INPUT_ID);
1341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1342:       assertEquals(4095, Node.COLUMN_MASK);
1343:       assertEquals(48, Node.DIRECTIVES);
1344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1345:       assertEquals(37, Node.OPT_ARG_NAME);
1346:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1348:       assertEquals(50, Node.FREE_CALL);
1349:       assertEquals(12, Node.COLUMN_BITS);
1350:       assertEquals(1, Node.DECR_FLAG);
1351:       assertEquals(32, Node.INCRDECR_PROP);
1352:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1353:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1354:       assertEquals(54, Node.SLASH_V);
1355:       assertEquals(30, Node.VAR_ARGS_NAME);
1356:       assertEquals(52, Node.LENGTH);
1357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1358:       assertEquals(40, Node.ORIGINALNAME_PROP);
1359:       assertEquals(46, Node.IS_NAMESPACE);
1360:       assertEquals(57, Node.REFLECTED_OBJECT);
1361:       assertEquals(49, Node.DIRECT_EVAL);
1362:       assertEquals(2, Node.POST_FLAG);
1363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1364:       assertEquals(8, Node.FLAG_NO_THROWS);
1365:       assertEquals(39, Node.EMPTY_BLOCK);
1366:       assertEquals(56, Node.CHANGE_TIME);
1367:       assertEquals(47, Node.IS_DISPATCHER);
1368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1369:       assertEquals(55, Node.INFERRED_FUNCTION);
1370:       assertEquals(29, Node.JSDOC_INFO_PROP);
1371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1372:       assertEquals(57, Node.LAST_PROP);
1373:       assertEquals(30, Node.VAR_ARGS_NAME);
1374:       assertEquals(49, Node.DIRECT_EVAL);
1375:       assertEquals(1, Node.DECR_FLAG);
1376:       assertEquals(57, Node.LAST_PROP);
1377:       assertEquals(32, Node.INCRDECR_PROP);
1378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1379:       assertEquals(54, Node.SLASH_V);
1380:       assertEquals(52, Node.LENGTH);
1381:       assertEquals(56, Node.CHANGE_TIME);
1382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1383:       assertEquals(57, Node.REFLECTED_OBJECT);
1384:       assertEquals(46, Node.IS_NAMESPACE);
1385:       assertEquals(29, Node.JSDOC_INFO_PROP);
1386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1387:       assertEquals(40, Node.ORIGINALNAME_PROP);
1388:       assertEquals(39, Node.EMPTY_BLOCK);
1389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1390:       assertEquals(2, Node.POST_FLAG);
1391:       assertEquals(47, Node.IS_DISPATCHER);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(4095, Node.COLUMN_MASK);
1394:       assertEquals(55, Node.INFERRED_FUNCTION);
1395:       assertEquals(53, Node.INPUT_ID);
1396:       assertEquals(48, Node.DIRECTIVES);
1397:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1398:       assertEquals(8, Node.FLAG_NO_THROWS);
1399:       assertEquals(43, Node.IS_CONSTANT_NAME);
1400:       assertEquals(36, Node.QUOTED_PROP);
1401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1402:       assertEquals(50, Node.FREE_CALL);
1403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1407:       assertEquals(12, Node.COLUMN_BITS);
1408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1409:       assertFalse(node0.equals((Object)node1));
1410:       assertFalse(node1.equals((Object)node0));
1411:       assertFalse(node2.equals((Object)node0));
1412:       assertSame(node1, node2);
1413:       assertSame(node2, node1);
1414:       
1415:       byte[] byteArray0 = new byte[7];
1416:       byteArray0[0] = (byte) (-26);
1417:       byteArray0[1] = (byte)12;
1418:       byteArray0[2] = (byte) (-40);
1419:       byteArray0[3] = (byte)29;
1420:       byteArray0[4] = (byte) (-73);
1421:       byteArray0[5] = (byte) (-40);
1422:       byteArray0[6] = (byte) (-93);
1423:       boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
1424:       assertFalse(boolean2);
1425:       assertArrayEquals(new byte[] {(byte) (-26), (byte)12, (byte) (-40), (byte)29, (byte) (-73), (byte) (-40), (byte) (-93)}, byteArray0);
1426:       assertEquals(7, byteArray0.length);
1427:       assertFalse(boolean2 == boolean0);
1428:       assertTrue(boolean2 == boolean1);
1429:       
1430:       Node node3 = Node.newString("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
1431:       assertNotNull(node3);
1432:       assertFalse(node3.isCase());
1433:       assertFalse(node3.isInc());
1434:       assertFalse(node3.isThrow());
1435:       assertFalse(node3.isHook());
1436:       assertFalse(node3.isFor());
1437:       assertFalse(node3.isGetterDef());
1438:       assertFalse(node3.isFalse());
1439:       assertFalse(node3.isArrayLit());
1440:       assertFalse(node3.isGetProp());
1441:       assertFalse(node3.isSwitch());
1442:       assertFalse(node3.isDebugger());
1443:       assertEquals((-1), node3.getCharno());
1444:       assertFalse(node3.isNot());
1445:       assertFalse(node3.isDefaultCase());
1446:       assertFalse(node3.isObjectLit());
1447:       assertFalse(node3.isExprResult());
1448:       assertEquals(0, node3.getChildCount());
1449:       assertFalse(node3.isComma());
1450:       assertFalse(node3.isEmpty());
1451:       assertFalse(node3.isAssign());
1452:       assertFalse(node3.isDelProp());
1453:       assertFalse(node3.isName());
1454:       assertFalse(node3.isTypeOf());
1455:       assertFalse(node3.isBreak());
1456:       assertFalse(node3.isCall());
1457:       assertFalse(node3.isGetElem());
1458:       assertFalse(node3.isOr());
1459:       assertFalse(node3.isAdd());
1460:       assertFalse(node3.isVoid());
1461:       assertFalse(node3.isTrue());
1462:       assertFalse(node3.isNull());
1463:       assertFalse(node3.isDo());
1464:       assertFalse(node3.isWhile());
1465:       assertFalse(node3.isContinue());
1466:       assertFalse(node3.hasMoreThanOneChild());
1467:       assertFalse(node3.isAssignAdd());
1468:       assertFalse(node3.isLabel());
1469:       assertFalse(node3.isNew());
1470:       assertTrue(node3.isString());
1471:       assertFalse(node3.isVar());
1472:       assertFalse(node3.isDec());
1473:       assertFalse(node3.hasChildren());
1474:       assertFalse(node3.isReturn());
1475:       assertFalse(node3.isBlock());
1476:       assertFalse(node3.isLabelName());
1477:       assertFalse(node3.isStringKey());
1478:       assertFalse(node3.isNumber());
1479:       assertFalse(node3.isCast());
1480:       assertFalse(node3.hasOneChild());
1481:       assertEquals((-1), node3.getSourcePosition());
1482:       assertFalse(node3.isParamList());
1483:       assertFalse(node3.isWith());
1484:       assertFalse(node3.isAnd());
1485:       assertFalse(node3.isRegExp());
1486:       assertFalse(node3.isCatch());
1487:       assertFalse(node3.isScript());
1488:       assertFalse(node3.isInstanceOf());
1489:       assertFalse(node3.isTry());
1490:       assertFalse(node3.isFunction());
1491:       assertEquals(40, node3.getType());
1492:       assertFalse(node3.isThis());
1493:       assertFalse(node3.isIf());
1494:       assertFalse(node3.isSetterDef());
1495:       assertEquals((-1), node3.getLineno());
1496:       assertFalse(node3.isIn());
1497:       assertFalse(node3.isNE());
1498:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1499:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1501:       assertEquals(8, Node.FLAG_NO_THROWS);
1502:       assertEquals(50, Node.FREE_CALL);
1503:       assertEquals(57, Node.REFLECTED_OBJECT);
1504:       assertEquals(4095, Node.COLUMN_MASK);
1505:       assertEquals(40, Node.ORIGINALNAME_PROP);
1506:       assertEquals(48, Node.DIRECTIVES);
1507:       assertEquals(43, Node.IS_CONSTANT_NAME);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1511:       assertEquals(32, Node.INCRDECR_PROP);
1512:       assertEquals(12, Node.COLUMN_BITS);
1513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1514:       assertEquals(1, Node.DECR_FLAG);
1515:       assertEquals(47, Node.IS_DISPATCHER);
1516:       assertEquals(29, Node.JSDOC_INFO_PROP);
1517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1518:       assertEquals(56, Node.CHANGE_TIME);
1519:       assertEquals(2, Node.POST_FLAG);
1520:       assertEquals(46, Node.IS_NAMESPACE);
1521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1523:       assertEquals(37, Node.OPT_ARG_NAME);
1524:       assertEquals(49, Node.DIRECT_EVAL);
1525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1526:       assertEquals(57, Node.LAST_PROP);
1527:       assertEquals(36, Node.QUOTED_PROP);
1528:       assertEquals(30, Node.VAR_ARGS_NAME);
1529:       assertEquals(52, Node.LENGTH);
1530:       assertEquals(53, Node.INPUT_ID);
1531:       assertEquals(55, Node.INFERRED_FUNCTION);
1532:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1533:       assertEquals(39, Node.EMPTY_BLOCK);
1534:       assertFalse(node3.equals((Object)node0));
1535:       assertFalse(node3.equals((Object)node1));
1536:       assertFalse(node3.equals((Object)node2));
1537:       assertNotSame(node3, node0);
1538:       
1539:       Node node4 = Node.newString(4095, "r$fB8", 4298, 30);
1540:       assertNotNull(node4);
1541:       assertFalse(node4.isParamList());
1542:       assertFalse(node4.isCatch());
1543:       assertFalse(node4.isSetterDef());
1544:       assertFalse(node4.isStringKey());
1545:       assertFalse(node4.isName());
1546:       assertFalse(node4.isTrue());
1547:       assertFalse(node4.isNull());
1548:       assertEquals(4095, node4.getType());
1549:       assertFalse(node4.isNew());
1550:       assertFalse(node4.isFunction());
1551:       assertFalse(node4.isArrayLit());
1552:       assertFalse(node4.isAdd());
1553:       assertFalse(node4.isContinue());
1554:       assertFalse(node4.isDo());
1555:       assertFalse(node4.isDefaultCase());
1556:       assertEquals(0, node4.getChildCount());
1557:       assertFalse(node4.isVar());
1558:       assertEquals(4298, node4.getLineno());
1559:       assertFalse(node4.isLabel());
1560:       assertFalse(node4.isAssignAdd());
1561:       assertFalse(node4.isOr());
1562:       assertFalse(node4.isTypeOf());
1563:       assertFalse(node4.isEmpty());
1564:       assertFalse(node4.isGetElem());
1565:       assertFalse(node4.isDelProp());
1566:       assertFalse(node4.isVoid());
1567:       assertEquals(30, node4.getCharno());
1568:       assertFalse(node4.isDebugger());
1569:       assertFalse(node4.isString());
1570:       assertFalse(node4.isCall());
1571:       assertFalse(node4.isExprResult());
1572:       assertFalse(node4.isAssign());
1573:       assertFalse(node4.hasChildren());
1574:       assertFalse(node4.isDec());
1575:       assertFalse(node4.isWhile());
1576:       assertFalse(node4.isReturn());
1577:       assertFalse(node4.isGetProp());
1578:       assertFalse(node4.isComma());
1579:       assertFalse(node4.isInstanceOf());
1580:       assertFalse(node4.isBreak());
1581:       assertFalse(node4.isAnd());
1582:       assertFalse(node4.isNot());
1583:       assertFalse(node4.isObjectLit());
1584:       assertFalse(node4.isSwitch());
1585:       assertFalse(node4.isCast());
1586:       assertFalse(node4.isInc());
1587:       assertFalse(node4.isFalse());
1588:       assertFalse(node4.isThrow());
1589:       assertFalse(node4.isIn());
1590:       assertFalse(node4.isNumber());
1591:       assertFalse(node4.isLabelName());
1592:       assertFalse(node4.isGetterDef());
1593:       assertFalse(node4.isIf());
1594:       assertFalse(node4.isNE());
1595:       assertFalse(node4.isTry());
1596:       assertFalse(node4.isRegExp());
1597:       assertFalse(node4.hasOneChild());
1598:       assertFalse(node4.isScript());
1599:       assertEquals(17604638, node4.getSourcePosition());
1600:       assertFalse(node4.isCase());
1601:       assertFalse(node4.hasMoreThanOneChild());
1602:       assertFalse(node4.isWith());
1603:       assertFalse(node4.isFor());
1604:       assertFalse(node4.isHook());
1605:       assertFalse(node4.isBlock());
1606:       assertFalse(node4.isThis());
1607:       assertEquals(53, Node.INPUT_ID);
1608:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1609:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1610:       assertEquals(36, Node.QUOTED_PROP);
1611:       assertEquals(29, Node.JSDOC_INFO_PROP);
1612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1613:       assertEquals(55, Node.INFERRED_FUNCTION);
1614:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1615:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1616:       assertEquals(46, Node.IS_NAMESPACE);
1617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1618:       assertEquals(2, Node.POST_FLAG);
1619:       assertEquals(47, Node.IS_DISPATCHER);
1620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1621:       assertEquals(43, Node.IS_CONSTANT_NAME);
1622:       assertEquals(40, Node.ORIGINALNAME_PROP);
1623:       assertEquals(52, Node.LENGTH);
1624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1625:       assertEquals(54, Node.SLASH_V);
1626:       assertEquals(57, Node.REFLECTED_OBJECT);
1627:       assertEquals(30, Node.VAR_ARGS_NAME);
1628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1629:       assertEquals(50, Node.FREE_CALL);
1630:       assertEquals(57, Node.LAST_PROP);
1631:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1632:       assertEquals(39, Node.EMPTY_BLOCK);
1633:       assertEquals(32, Node.INCRDECR_PROP);
1634:       assertEquals(1, Node.DECR_FLAG);
1635:       assertEquals(12, Node.COLUMN_BITS);
1636:       assertEquals(4095, Node.COLUMN_MASK);
1637:       assertEquals(8, Node.FLAG_NO_THROWS);
1638:       assertEquals(49, Node.DIRECT_EVAL);
1639:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1640:       assertEquals(56, Node.CHANGE_TIME);
1641:       assertEquals(37, Node.OPT_ARG_NAME);
1642:       assertEquals(48, Node.DIRECTIVES);
1643:       assertFalse(node4.equals((Object)node1));
1644:       assertFalse(node4.equals((Object)node2));
1645:       assertFalse(node4.equals((Object)node0));
1646:       assertFalse(node4.equals((Object)node3));
1647:       assertNotSame(node4, node0);
1648:       assertNotSame(node4, node3);
1649:       
1650:       boolean boolean3 = node4.hasOneChild();
1651:       assertFalse(boolean3);
1652:       assertFalse(node4.isParamList());
1653:       assertFalse(node4.isCatch());
1654:       assertFalse(node4.isSetterDef());
1655:       assertFalse(node4.isStringKey());
1656:       assertFalse(node4.isName());
1657:       assertFalse(node4.isTrue());
1658:       assertFalse(node4.isNull());
1659:       assertEquals(4095, node4.getType());
1660:       assertFalse(node4.isNew());
1661:       assertFalse(node4.isFunction());
1662:       assertFalse(node4.isArrayLit());
1663:       assertFalse(node4.isAdd());
1664:       assertFalse(node4.isContinue());
1665:       assertFalse(node4.isDo());
1666:       assertFalse(node4.isDefaultCase());
1667:       assertEquals(0, node4.getChildCount());
1668:       assertFalse(node4.isVar());
1669:       assertEquals(4298, node4.getLineno());
1670:       assertFalse(node4.isLabel());
1671:       assertFalse(node4.isAssignAdd());
1672:       assertFalse(node4.isOr());
1673:       assertFalse(node4.isTypeOf());
1674:       assertFalse(node4.isEmpty());
1675:       assertFalse(node4.isGetElem());
1676:       assertFalse(node4.isDelProp());
1677:       assertFalse(node4.isVoid());
1678:       assertEquals(30, node4.getCharno());
1679:       assertFalse(node4.isDebugger());
1680:       assertFalse(node4.isString());
1681:       assertFalse(node4.isCall());
1682:       assertFalse(node4.isExprResult());
1683:       assertFalse(node4.isAssign());
1684:       assertFalse(node4.hasChildren());
1685:       assertFalse(node4.isDec());
1686:       assertFalse(node4.isWhile());
1687:       assertFalse(node4.isReturn());
1688:       assertFalse(node4.isGetProp());
1689:       assertFalse(node4.isComma());
1690:       assertFalse(node4.isInstanceOf());
1691:       assertFalse(node4.isBreak());
1692:       assertFalse(node4.isAnd());
1693:       assertFalse(node4.isNot());
1694:       assertFalse(node4.isObjectLit());
1695:       assertFalse(node4.isSwitch());
1696:       assertFalse(node4.isCast());
1697:       assertFalse(node4.isInc());
1698:       assertFalse(node4.isFalse());
1699:       assertFalse(node4.isThrow());
1700:       assertFalse(node4.isIn());
1701:       assertFalse(node4.isNumber());
1702:       assertFalse(node4.isLabelName());
1703:       assertFalse(node4.isGetterDef());
1704:       assertFalse(node4.isIf());
1705:       assertFalse(node4.isNE());
1706:       assertFalse(node4.isTry());
1707:       assertFalse(node4.isRegExp());
1708:       assertFalse(node4.hasOneChild());
1709:       assertFalse(node4.isScript());
1710:       assertEquals(17604638, node4.getSourcePosition());
1711:       assertFalse(node4.isCase());
1712:       assertFalse(node4.hasMoreThanOneChild());
1713:       assertFalse(node4.isWith());
1714:       assertFalse(node4.isFor());
1715:       assertFalse(node4.isHook());
1716:       assertFalse(node4.isBlock());
1717:       assertFalse(node4.isThis());
1718:       assertEquals(53, Node.INPUT_ID);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1721:       assertEquals(36, Node.QUOTED_PROP);
1722:       assertEquals(29, Node.JSDOC_INFO_PROP);
1723:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1724:       assertEquals(55, Node.INFERRED_FUNCTION);
1725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1727:       assertEquals(46, Node.IS_NAMESPACE);
1728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1729:       assertEquals(2, Node.POST_FLAG);
1730:       assertEquals(47, Node.IS_DISPATCHER);
1731:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1732:       assertEquals(43, Node.IS_CONSTANT_NAME);
1733:       assertEquals(40, Node.ORIGINALNAME_PROP);
1734:       assertEquals(52, Node.LENGTH);
1735:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1736:       assertEquals(54, Node.SLASH_V);
1737:       assertEquals(57, Node.REFLECTED_OBJECT);
1738:       assertEquals(30, Node.VAR_ARGS_NAME);
1739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1740:       assertEquals(50, Node.FREE_CALL);
1741:       assertEquals(57, Node.LAST_PROP);
1742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1743:       assertEquals(39, Node.EMPTY_BLOCK);
1744:       assertEquals(32, Node.INCRDECR_PROP);
1745:       assertEquals(1, Node.DECR_FLAG);
1746:       assertEquals(12, Node.COLUMN_BITS);
1747:       assertEquals(4095, Node.COLUMN_MASK);
1748:       assertEquals(8, Node.FLAG_NO_THROWS);
1749:       assertEquals(49, Node.DIRECT_EVAL);
1750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1751:       assertEquals(56, Node.CHANGE_TIME);
1752:       assertEquals(37, Node.OPT_ARG_NAME);
1753:       assertEquals(48, Node.DIRECTIVES);
1754:       assertFalse(node4.equals((Object)node1));
1755:       assertFalse(node4.equals((Object)node2));
1756:       assertFalse(node4.equals((Object)node0));
1757:       assertFalse(node4.equals((Object)node3));
1758:       assertTrue(boolean3 == boolean2);
1759:       assertFalse(boolean3 == boolean0);
1760:       assertTrue(boolean3 == boolean1);
1761:       assertNotSame(node4, node0);
1762:       assertNotSame(node4, node3);
1763:   }
1764: }
RegularFileObject[/tmp/EvoSuite_419_1628157558334/com/google/javascript/rhino/Node_419_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_419_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_419_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_419_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.NamedType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.javascript.rhino.JSDocInfo$Marker",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Platform",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
371:     );
372:   }
373: }

[MASTER] 09:59:18.677 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("l:kU9Ci.A");
assertNotNull(node0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.setVarArgs(true);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
assertTrue(boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

InputId inputId0 = new InputId("com.google.common.collect.LinkedHashMultimap");
assertNotNull(inputId0);
assertEquals("com.google.common.collect.LinkedHashMultimap", inputId0.getIdName());

InputId inputId1 = new InputId("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
assertNotNull(inputId1);
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(inputId1.equals((Object)inputId0));

String string0 = inputId1.toString();
assertNotNull(string0);
assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string0);
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(inputId1.equals((Object)inputId0));
assertNotSame(inputId1, inputId0);

String string1 = inputId1.toString();
assertNotNull(string1);
assertEquals("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder", string1);
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertFalse(inputId1.equals((Object)inputId0));
assertTrue(string1.equals((Object)string0));
assertNotSame(inputId1, inputId0);

Node node1 = new Node(46, node0, 9, 50);
assertNotNull(node1);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(46, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(50, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertEquals(36914, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertEquals(9, node1.getLineno());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));

node1.setInputId(inputId1);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", inputId1.getIdName());
assertEquals(46, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(50, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertEquals(36914, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertEquals(9, node1.getLineno());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(inputId1.equals((Object)inputId0));
assertFalse(node1.equals((Object)node0));
assertNotSame(inputId1, inputId0);

boolean boolean1 = node0.isEmpty();
assertFalse(boolean1);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertNull(staticSourceFile0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));

Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
assertNotNull(node2);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(46, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isDec());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertEquals(46, node2.getType());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertTrue(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);

byte[] byteArray0 = new byte[7];
byteArray0[0] = (byte) (-26);
byteArray0[1] = (byte)12;
byteArray0[2] = (byte) (-40);
byteArray0[3] = (byte)29;
byteArray0[4] = (byte) (-73);
byteArray0[5] = (byte) (-40);
byteArray0[6] = (byte) (-93);
boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean2);
assertArrayEquals(new byte[] {(byte) (-26), (byte)12, (byte) (-40), (byte)29, (byte) (-73), (byte) (-40), (byte) (-93)}, byteArray0);
assertEquals(7, byteArray0.length);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node3 = Node.newString("InputId: com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
assertNotNull(node3);
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isVar());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNumber());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isThis());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertNotSame(node3, node0);

Node node4 = Node.newString(4095, "r$fB8", 4298, 30);
assertNotNull(node4);
assertFalse(node4.isParamList());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertEquals(4095, node4.getType());
assertFalse(node4.isNew());
assertFalse(node4.isFunction());
assertFalse(node4.isArrayLit());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertEquals(4298, node4.getLineno());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isTypeOf());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertEquals(30, node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isString());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isCast());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isIn());
assertFalse(node4.isNumber());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isTry());
assertFalse(node4.isRegExp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertEquals(17604638, node4.getSourcePosition());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isThis());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertNotSame(node4, node0);
assertNotSame(node4, node3);

boolean boolean3 = node4.hasOneChild();
assertFalse(boolean3);
assertFalse(node4.isParamList());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertEquals(4095, node4.getType());
assertFalse(node4.isNew());
assertFalse(node4.isFunction());
assertFalse(node4.isArrayLit());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertEquals(4298, node4.getLineno());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isTypeOf());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertEquals(30, node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isString());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isCast());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isIn());
assertFalse(node4.isNumber());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isTry());
assertFalse(node4.isRegExp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertEquals(17604638, node4.getSourcePosition());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isThis());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertNotSame(node4, node0);
assertNotSame(node4, node3);


[MASTER] 09:59:35.518 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:35.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:36.068 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:36.274 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.073 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.254 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.426 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:37.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.006 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.223 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.395 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.810 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:38.985 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:39.165 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:39.339 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:39.554 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:39.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:39.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:40.200 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:40.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:40.587 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:40.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:40.966 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:41.169 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:41.353 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:41.549 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:41.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:42.902 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.194 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.374 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.614 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.816 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:44.027 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:44.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:44.441 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/5
* Done!

* Computation finished
