* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 21986
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 223864393
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:29:28.252 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:29:30.121 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:29:30.590 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:29:30.590 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:29:30.669 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:29:39.581 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:29:47.521 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 707 generations, 270791 statements, best individual has fitness: 2607.0
* Minimizing test suite
[MASTER] 10:40:55.074 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 805
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 636
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 113
* Number of covered goals: 113
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 530
* Number of covered goals: 480
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 4536
* Number of covered goals: 2391
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Generated 1296 tests with total length 11383
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:42:22.323 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6886666666666666% of time used, but only 109/1296 tests minimized), falling back to using all assertions
[MASTER] 10:42:41.016 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 10:42:56.002 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 10:43:04.105 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_191_1628160184056/com/google/javascript/rhino/Node_191_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_191_1628160184056/com/google/javascript/rhino/Node_191_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:04.105 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:04.105 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:04.109 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 164
[MASTER] 10:43:04.110 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_191_1628160184056/com/google/javascript/rhino/Node_191_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_191_tmp__ESTest extends Node_191_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(116);
22:       assertEquals(54, Node.SLASH_V);
23:       assertEquals(52, Node.LENGTH);
24:       assertEquals(57, Node.REFLECTED_OBJECT);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(15, Node.NO_SIDE_EFFECTS);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(48, Node.DIRECTIVES);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(12, Node.COLUMN_BITS);
36:       assertEquals(56, Node.CHANGE_TIME);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(43, Node.IS_CONSTANT_NAME);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(2, Node.POST_FLAG);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isBlock());
61:       assertFalse(node0.isDo());
62:       assertFalse(node0.isWhile());
63:       assertFalse(node0.isVar());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isReturn());
66:       assertEquals((-1), node0.getLineno());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isName());
73:       assertTrue(node0.isBreak());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isRegExp());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.isDefaultCase());
81:       assertFalse(node0.isInstanceOf());
82:       assertEquals(0, node0.getChildCount());
83:       assertFalse(node0.isArrayLit());
84:       assertFalse(node0.isCatch());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isNumber());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isStringKey());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.isFor());
92:       assertFalse(node0.isParamList());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isInc());
95:       assertEquals((-1), node0.getCharno());
96:       assertFalse(node0.isCase());
97:       assertFalse(node0.isSwitch());
98:       assertFalse(node0.isHook());
99:       assertFalse(node0.isFalse());
100:       assertEquals(116, node0.getType());
101:       assertFalse(node0.isDelProp());
102:       assertFalse(node0.isNE());
103:       assertFalse(node0.isThrow());
104:       assertFalse(node0.isIf());
105:       assertFalse(node0.isEmpty());
106:       assertFalse(node0.isIn());
107:       assertFalse(node0.isTrue());
108:       assertFalse(node0.isExprResult());
109:       assertFalse(node0.isDebugger());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isAnd());
112:       assertFalse(node0.isCast());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.isAssign());
115:       assertFalse(node0.isFunction());
116:       assertFalse(node0.isDec());
117:       assertFalse(node0.isTypeOf());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isNot());
123:       assertFalse(node0.isObjectLit());
124:       assertFalse(node0.isString());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(54, Node.SLASH_V);
128:       assertEquals(52, Node.LENGTH);
129:       assertEquals(57, Node.REFLECTED_OBJECT);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(1, Node.DECR_FLAG);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(48, Node.DIRECTIVES);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(56, Node.CHANGE_TIME);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
152:       assertEquals(29, Node.JSDOC_INFO_PROP);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertNotNull(iterable0);
164:       assertFalse(iterable0.contains(node0));
165:       assertFalse(node0.isNew());
166:       assertFalse(node0.isBlock());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isWhile());
169:       assertFalse(node0.isVar());
170:       assertFalse(node0.isCall());
171:       assertFalse(node0.isReturn());
172:       assertEquals((-1), node0.getLineno());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isContinue());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isName());
179:       assertTrue(node0.isBreak());
180:       assertFalse(node0.isAssignAdd());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isDefaultCase());
187:       assertFalse(node0.isInstanceOf());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isArrayLit());
190:       assertFalse(node0.isCatch());
191:       assertFalse(node0.isWith());
192:       assertFalse(node0.isNumber());
193:       assertFalse(node0.isGetterDef());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isStringKey());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isFor());
198:       assertFalse(node0.isParamList());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isInc());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.isCase());
203:       assertFalse(node0.isSwitch());
204:       assertFalse(node0.isHook());
205:       assertFalse(node0.isFalse());
206:       assertEquals(116, node0.getType());
207:       assertFalse(node0.isDelProp());
208:       assertFalse(node0.isNE());
209:       assertFalse(node0.isThrow());
210:       assertFalse(node0.isIf());
211:       assertFalse(node0.isEmpty());
212:       assertFalse(node0.isIn());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isExprResult());
215:       assertFalse(node0.isDebugger());
216:       assertFalse(node0.isVoid());
217:       assertFalse(node0.isAnd());
218:       assertFalse(node0.isCast());
219:       assertFalse(node0.isGetElem());
220:       assertFalse(node0.isAssign());
221:       assertFalse(node0.isFunction());
222:       assertFalse(node0.isDec());
223:       assertFalse(node0.isTypeOf());
224:       assertEquals((-1), node0.getSourcePosition());
225:       assertFalse(node0.isComma());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.hasChildren());
228:       assertFalse(node0.isNot());
229:       assertFalse(node0.isObjectLit());
230:       assertFalse(node0.isString());
231:       
232:       Node node1 = Node.newString(39, ">[7Y:+aB(h{", 1, (-1214));
233:       assertEquals(53, Node.INPUT_ID);
234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
235:       assertEquals(36, Node.QUOTED_PROP);
236:       assertEquals(29, Node.JSDOC_INFO_PROP);
237:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
239:       assertEquals(47, Node.IS_DISPATCHER);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
243:       assertEquals(2, Node.POST_FLAG);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(43, Node.IS_CONSTANT_NAME);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(1, Node.DECR_FLAG);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(12, Node.COLUMN_BITS);
254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
255:       assertEquals(32, Node.INCRDECR_PROP);
256:       assertEquals(57, Node.LAST_PROP);
257:       assertEquals(48, Node.DIRECTIVES);
258:       assertEquals(37, Node.OPT_ARG_NAME);
259:       assertEquals(39, Node.EMPTY_BLOCK);
260:       assertEquals(4095, Node.COLUMN_MASK);
261:       assertEquals(55, Node.INFERRED_FUNCTION);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
264:       assertEquals(8, Node.FLAG_NO_THROWS);
265:       assertEquals(49, Node.DIRECT_EVAL);
266:       assertEquals(57, Node.REFLECTED_OBJECT);
267:       assertEquals(56, Node.CHANGE_TIME);
268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
269:       assertNotNull(node1);
270:       assertFalse(node1.equals((Object)node0));
271:       assertFalse(node1.isRegExp());
272:       assertFalse(node1.isFunction());
273:       assertFalse(node1.isDefaultCase());
274:       assertFalse(node1.isTrue());
275:       assertFalse(node1.isDebugger());
276:       assertEquals(0, node1.getChildCount());
277:       assertFalse(node1.isCatch());
278:       assertFalse(node1.isVoid());
279:       assertFalse(node1.isArrayLit());
280:       assertFalse(node1.isGetterDef());
281:       assertFalse(node1.isParamList());
282:       assertFalse(node1.isStringKey());
283:       assertFalse(node1.isFor());
284:       assertFalse(node1.isCase());
285:       assertFalse(node1.isTry());
286:       assertTrue(node1.isNumber());
287:       assertFalse(node1.isString());
288:       assertFalse(node1.isBlock());
289:       assertEquals(39, node1.getType());
290:       assertFalse(node1.hasMoreThanOneChild());
291:       assertFalse(node1.isContinue());
292:       assertEquals((-1), node1.getLineno());
293:       assertFalse(node1.isNE());
294:       assertFalse(node1.isIf());
295:       assertFalse(node1.isFalse());
296:       assertFalse(node1.isThrow());
297:       assertFalse(node1.isIn());
298:       assertFalse(node1.isInc());
299:       assertFalse(node1.isSetterDef());
300:       assertFalse(node1.isScript());
301:       assertFalse(node1.isWith());
302:       assertFalse(node1.isNot());
303:       assertFalse(node1.isObjectLit());
304:       assertFalse(node1.isInstanceOf());
305:       assertFalse(node1.isCast());
306:       assertFalse(node1.isAnd());
307:       assertFalse(node1.isGetElem());
308:       assertFalse(node1.isLabelName());
309:       assertFalse(node1.isExprResult());
310:       assertFalse(node1.isDec());
311:       assertFalse(node1.isTypeOf());
312:       assertEquals((-1), node1.getSourcePosition());
313:       assertFalse(node1.isAssign());
314:       assertFalse(node1.isReturn());
315:       assertFalse(node1.isComma());
316:       assertFalse(node1.isThis());
317:       assertFalse(node1.hasChildren());
318:       assertFalse(node1.hasOneChild());
319:       assertFalse(node1.isHook());
320:       assertFalse(node1.isGetProp());
321:       assertFalse(node1.isWhile());
322:       assertFalse(node1.isSwitch());
323:       assertEquals((-1), node1.getCharno());
324:       assertFalse(node1.isName());
325:       assertFalse(node1.isCall());
326:       assertFalse(node1.isBreak());
327:       assertFalse(node1.isNull());
328:       assertFalse(node1.isDelProp());
329:       assertFalse(node1.isOr());
330:       assertFalse(node1.isLabel());
331:       assertFalse(node1.isVar());
332:       assertFalse(node1.isAssignAdd());
333:       assertFalse(node1.isNew());
334:       assertFalse(node1.isDo());
335:       assertFalse(node1.isAdd());
336:       assertFalse(node1.isEmpty());
337:       
338:       Node node2 = node0.useSourceInfoFrom(node1);
339:       assertEquals(54, Node.SLASH_V);
340:       assertEquals(52, Node.LENGTH);
341:       assertEquals(57, Node.REFLECTED_OBJECT);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(50, Node.FREE_CALL);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(57, Node.LAST_PROP);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(39, Node.EMPTY_BLOCK);
349:       assertEquals(48, Node.DIRECTIVES);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(8, Node.FLAG_NO_THROWS);
352:       assertEquals(12, Node.COLUMN_BITS);
353:       assertEquals(56, Node.CHANGE_TIME);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
358:       assertEquals(37, Node.OPT_ARG_NAME);
359:       assertEquals(53, Node.INPUT_ID);
360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
361:       assertEquals(43, Node.IS_CONSTANT_NAME);
362:       assertEquals(36, Node.QUOTED_PROP);
363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
364:       assertEquals(29, Node.JSDOC_INFO_PROP);
365:       assertEquals(55, Node.INFERRED_FUNCTION);
366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
369:       assertEquals(2, Node.POST_FLAG);
370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
371:       assertEquals(46, Node.IS_NAMESPACE);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(30, Node.VAR_ARGS_NAME);
374:       assertEquals(40, Node.ORIGINALNAME_PROP);
375:       assertEquals(53, Node.INPUT_ID);
376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
377:       assertEquals(36, Node.QUOTED_PROP);
378:       assertEquals(29, Node.JSDOC_INFO_PROP);
379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
381:       assertEquals(47, Node.IS_DISPATCHER);
382:       assertEquals(46, Node.IS_NAMESPACE);
383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
384:       assertEquals(51, Node.STATIC_SOURCE_FILE);
385:       assertEquals(2, Node.POST_FLAG);
386:       assertEquals(50, Node.FREE_CALL);
387:       assertEquals(40, Node.ORIGINALNAME_PROP);
388:       assertEquals(43, Node.IS_CONSTANT_NAME);
389:       assertEquals(54, Node.SLASH_V);
390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
391:       assertEquals(52, Node.LENGTH);
392:       assertEquals(30, Node.VAR_ARGS_NAME);
393:       assertEquals(1, Node.DECR_FLAG);
394:       assertEquals(15, Node.NO_SIDE_EFFECTS);
395:       assertEquals(12, Node.COLUMN_BITS);
396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
397:       assertEquals(32, Node.INCRDECR_PROP);
398:       assertEquals(57, Node.LAST_PROP);
399:       assertEquals(48, Node.DIRECTIVES);
400:       assertEquals(37, Node.OPT_ARG_NAME);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(4095, Node.COLUMN_MASK);
403:       assertEquals(55, Node.INFERRED_FUNCTION);
404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
405:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
406:       assertEquals(8, Node.FLAG_NO_THROWS);
407:       assertEquals(49, Node.DIRECT_EVAL);
408:       assertEquals(57, Node.REFLECTED_OBJECT);
409:       assertEquals(56, Node.CHANGE_TIME);
410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(39, Node.EMPTY_BLOCK);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(4095, Node.COLUMN_MASK);
416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(36, Node.QUOTED_PROP);
419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
420:       assertEquals(48, Node.DIRECTIVES);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
426:       assertEquals(29, Node.JSDOC_INFO_PROP);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(47, Node.IS_DISPATCHER);
430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
431:       assertEquals(2, Node.POST_FLAG);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(49, Node.DIRECT_EVAL);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(54, Node.SLASH_V);
440:       assertEquals(56, Node.CHANGE_TIME);
441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
442:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
444:       assertEquals(1, Node.DECR_FLAG);
445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
446:       assertEquals(12, Node.COLUMN_BITS);
447:       assertNotNull(node2);
448:       assertFalse(node0.equals((Object)node1));
449:       assertFalse(node1.equals((Object)node0));
450:       assertFalse(node2.equals((Object)node1));
451:       assertSame(node0, node2);
452:       assertSame(node2, node0);
453:       assertFalse(node0.isNew());
454:       assertFalse(node0.isBlock());
455:       assertFalse(node0.isDo());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isVar());
458:       assertFalse(node0.isCall());
459:       assertFalse(node0.isReturn());
460:       assertEquals((-1), node0.getLineno());
461:       assertFalse(node0.isLabel());
462:       assertFalse(node0.hasMoreThanOneChild());
463:       assertFalse(node0.isContinue());
464:       assertFalse(node0.isNull());
465:       assertFalse(node0.isSetterDef());
466:       assertFalse(node0.isName());
467:       assertTrue(node0.isBreak());
468:       assertFalse(node0.isAssignAdd());
469:       assertFalse(node0.isOr());
470:       assertFalse(node0.isAdd());
471:       assertFalse(node0.isScript());
472:       assertFalse(node0.isRegExp());
473:       assertFalse(node0.isTry());
474:       assertFalse(node0.isDefaultCase());
475:       assertFalse(node0.isInstanceOf());
476:       assertEquals(0, node0.getChildCount());
477:       assertFalse(node0.isArrayLit());
478:       assertFalse(node0.isCatch());
479:       assertFalse(node0.isWith());
480:       assertFalse(node0.isNumber());
481:       assertFalse(node0.isGetterDef());
482:       assertFalse(node0.isThis());
483:       assertFalse(node0.isStringKey());
484:       assertFalse(node0.isLabelName());
485:       assertFalse(node0.isFor());
486:       assertFalse(node0.isParamList());
487:       assertFalse(node0.hasOneChild());
488:       assertFalse(node0.isInc());
489:       assertEquals((-1), node0.getCharno());
490:       assertFalse(node0.isCase());
491:       assertFalse(node0.isSwitch());
492:       assertFalse(node0.isHook());
493:       assertFalse(node0.isFalse());
494:       assertEquals(116, node0.getType());
495:       assertFalse(node0.isDelProp());
496:       assertFalse(node0.isNE());
497:       assertFalse(node0.isThrow());
498:       assertFalse(node0.isIf());
499:       assertFalse(node0.isEmpty());
500:       assertFalse(node0.isIn());
501:       assertFalse(node0.isTrue());
502:       assertFalse(node0.isExprResult());
503:       assertFalse(node0.isDebugger());
504:       assertFalse(node0.isVoid());
505:       assertFalse(node0.isAnd());
506:       assertFalse(node0.isCast());
507:       assertFalse(node0.isGetElem());
508:       assertFalse(node0.isAssign());
509:       assertFalse(node0.isFunction());
510:       assertFalse(node0.isDec());
511:       assertFalse(node0.isTypeOf());
512:       assertEquals((-1), node0.getSourcePosition());
513:       assertFalse(node0.isComma());
514:       assertFalse(node0.isGetProp());
515:       assertFalse(node0.hasChildren());
516:       assertFalse(node0.isNot());
517:       assertFalse(node0.isObjectLit());
518:       assertFalse(node0.isString());
519:       assertFalse(node1.isRegExp());
520:       assertFalse(node1.isFunction());
521:       assertFalse(node1.isDefaultCase());
522:       assertFalse(node1.isTrue());
523:       assertFalse(node1.isDebugger());
524:       assertEquals(0, node1.getChildCount());
525:       assertFalse(node1.isCatch());
526:       assertFalse(node1.isVoid());
527:       assertFalse(node1.isArrayLit());
528:       assertFalse(node1.isGetterDef());
529:       assertFalse(node1.isParamList());
530:       assertFalse(node1.isStringKey());
531:       assertFalse(node1.isFor());
532:       assertFalse(node1.isCase());
533:       assertFalse(node1.isTry());
534:       assertTrue(node1.isNumber());
535:       assertFalse(node1.isString());
536:       assertFalse(node1.isBlock());
537:       assertEquals(39, node1.getType());
538:       assertFalse(node1.hasMoreThanOneChild());
539:       assertFalse(node1.isContinue());
540:       assertEquals((-1), node1.getLineno());
541:       assertFalse(node1.isNE());
542:       assertFalse(node1.isIf());
543:       assertFalse(node1.isFalse());
544:       assertFalse(node1.isThrow());
545:       assertFalse(node1.isIn());
546:       assertFalse(node1.isInc());
547:       assertFalse(node1.isSetterDef());
548:       assertFalse(node1.isScript());
549:       assertFalse(node1.isWith());
550:       assertFalse(node1.isNot());
551:       assertFalse(node1.isObjectLit());
552:       assertFalse(node1.isInstanceOf());
553:       assertFalse(node1.isCast());
554:       assertFalse(node1.isAnd());
555:       assertFalse(node1.isGetElem());
556:       assertFalse(node1.isLabelName());
557:       assertFalse(node1.isExprResult());
558:       assertFalse(node1.isDec());
559:       assertFalse(node1.isTypeOf());
560:       assertEquals((-1), node1.getSourcePosition());
561:       assertFalse(node1.isAssign());
562:       assertFalse(node1.isReturn());
563:       assertFalse(node1.isComma());
564:       assertFalse(node1.isThis());
565:       assertFalse(node1.hasChildren());
566:       assertFalse(node1.hasOneChild());
567:       assertFalse(node1.isHook());
568:       assertFalse(node1.isGetProp());
569:       assertFalse(node1.isWhile());
570:       assertFalse(node1.isSwitch());
571:       assertEquals((-1), node1.getCharno());
572:       assertFalse(node1.isName());
573:       assertFalse(node1.isCall());
574:       assertFalse(node1.isBreak());
575:       assertFalse(node1.isNull());
576:       assertFalse(node1.isDelProp());
577:       assertFalse(node1.isOr());
578:       assertFalse(node1.isLabel());
579:       assertFalse(node1.isVar());
580:       assertFalse(node1.isAssignAdd());
581:       assertFalse(node1.isNew());
582:       assertFalse(node1.isDo());
583:       assertFalse(node1.isAdd());
584:       assertFalse(node1.isEmpty());
585:       assertFalse(node2.isParamList());
586:       assertFalse(node2.isSetterDef());
587:       assertFalse(node2.isNull());
588:       assertTrue(node2.isBreak());
589:       assertEquals(0, node2.getChildCount());
590:       assertFalse(node2.isVar());
591:       assertFalse(node2.isDefaultCase());
592:       assertFalse(node2.isNew());
593:       assertFalse(node2.isDebugger());
594:       assertFalse(node2.isFunction());
595:       assertFalse(node2.isContinue());
596:       assertFalse(node2.isStringKey());
597:       assertFalse(node2.isArrayLit());
598:       assertFalse(node2.isNE());
599:       assertFalse(node2.isGetterDef());
600:       assertFalse(node2.isNumber());
601:       assertFalse(node2.isIn());
602:       assertFalse(node2.isFor());
603:       assertFalse(node2.isCase());
604:       assertFalse(node2.isTry());
605:       assertFalse(node2.hasOneChild());
606:       assertFalse(node2.isInc());
607:       assertFalse(node2.isBlock());
608:       assertFalse(node2.isHook());
609:       assertFalse(node2.isWith());
610:       assertFalse(node2.isRegExp());
611:       assertFalse(node2.hasMoreThanOneChild());
612:       assertFalse(node2.isInstanceOf());
613:       assertFalse(node2.isCatch());
614:       assertFalse(node2.isIf());
615:       assertEquals((-1), node2.getLineno());
616:       assertFalse(node2.isGetProp());
617:       assertFalse(node2.isThis());
618:       assertEquals(116, node2.getType());
619:       assertFalse(node2.isComma());
620:       assertFalse(node2.isObjectLit());
621:       assertFalse(node2.isThrow());
622:       assertEquals((-1), node2.getCharno());
623:       assertFalse(node2.isSwitch());
624:       assertFalse(node2.isScript());
625:       assertFalse(node2.isString());
626:       assertFalse(node2.isNot());
627:       assertFalse(node2.isAnd());
628:       assertFalse(node2.isFalse());
629:       assertFalse(node2.isCast());
630:       assertFalse(node2.isLabelName());
631:       assertFalse(node2.isAssignAdd());
632:       assertFalse(node2.hasChildren());
633:       assertFalse(node2.isReturn());
634:       assertFalse(node2.isLabel());
635:       assertFalse(node2.isTypeOf());
636:       assertEquals((-1), node2.getSourcePosition());
637:       assertFalse(node2.isOr());
638:       assertFalse(node2.isDec());
639:       assertFalse(node2.isAssign());
640:       assertFalse(node2.isEmpty());
641:       assertFalse(node2.isWhile());
642:       assertFalse(node2.isDo());
643:       assertFalse(node2.isTrue());
644:       assertFalse(node2.isVoid());
645:       assertFalse(node2.isExprResult());
646:       assertFalse(node2.isAdd());
647:       assertFalse(node2.isCall());
648:       assertFalse(node2.isGetElem());
649:       assertFalse(node2.isDelProp());
650:       assertFalse(node2.isName());
651:       
652:       int int0 = 114;
653:       // Undeclared exception!
654:       try { 
655:         node1.setDouble(49);
656:         fail("Expecting exception: IllegalStateException");
657:       
658:       } catch(IllegalStateException e) {
659:          //
660:          // Number node not created with Node.newNumber
661:          //
662:          verifyException("com.google.javascript.rhino.Node", e);
663:       }
664:   }
665: }
RegularFileObject[/tmp/EvoSuite_191_1628160184056/com/google/javascript/rhino/Node_191_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_191_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_191_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_191_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:04.120 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(116);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertTrue(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(116, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

Iterable<Node> iterable0 = node0.children();
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertTrue(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(116, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());

Node node1 = Node.newString(39, ">[7Y:+aB(h{", 1, (-1214));
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());

Node node2 = node0.useSourceInfoFrom(node1);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertTrue(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(116, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertTrue(node2.isBreak());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertEquals(116, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isScript());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());

int int0 = 114;
node1.setDouble(49);

[MASTER] 10:43:11.772 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_289_1628160191496/com/google/javascript/rhino/Node_289_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_289_1628160191496/com/google/javascript/rhino/Node_289_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:11.772 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:11.772 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:11.773 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 165
[MASTER] 10:43:11.775 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_289_1628160191496/com/google/javascript/rhino/Node_289_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_289_tmp__ESTest extends Node_289_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node((-125));
23:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
24:       assertEquals(55, Node.INFERRED_FUNCTION);
25:       assertEquals(4095, Node.COLUMN_MASK);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
30:       assertEquals(29, Node.JSDOC_INFO_PROP);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(48, Node.DIRECTIVES);
35:       assertEquals(37, Node.OPT_ARG_NAME);
36:       assertEquals(52, Node.LENGTH);
37:       assertEquals(8, Node.FLAG_NO_THROWS);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(36, Node.QUOTED_PROP);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(1, Node.DECR_FLAG);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(49, Node.DIRECT_EVAL);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(15, Node.NO_SIDE_EFFECTS);
46:       assertEquals(2, Node.POST_FLAG);
47:       assertEquals(57, Node.LAST_PROP);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(40, Node.ORIGINALNAME_PROP);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(43, Node.IS_CONSTANT_NAME);
58:       assertEquals(51, Node.STATIC_SOURCE_FILE);
59:       assertNotNull(node0);
60:       assertFalse(node0.isInstanceOf());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isWith());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isNot());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isFalse());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.isContinue());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isDelProp());
78:       assertEquals((-1), node0.getSourcePosition());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isDebugger());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.isAssign());
87:       assertFalse(node0.hasChildren());
88:       assertEquals(0, node0.getChildCount());
89:       assertFalse(node0.isCatch());
90:       assertFalse(node0.isNull());
91:       assertFalse(node0.isTrue());
92:       assertFalse(node0.isVoid());
93:       assertFalse(node0.isParamList());
94:       assertFalse(node0.isStringKey());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isVar());
97:       assertFalse(node0.isNew());
98:       assertFalse(node0.isAdd());
99:       assertFalse(node0.isArrayLit());
100:       assertFalse(node0.isFunction());
101:       assertEquals((-125), node0.getType());
102:       assertFalse(node0.isDo());
103:       assertFalse(node0.isEmpty());
104:       assertFalse(node0.isSetterDef());
105:       assertFalse(node0.isDefaultCase());
106:       assertEquals((-1), node0.getLineno());
107:       assertFalse(node0.isLabel());
108:       assertFalse(node0.hasMoreThanOneChild());
109:       assertFalse(node0.isNumber());
110:       assertFalse(node0.isIn());
111:       assertFalse(node0.isGetterDef());
112:       assertFalse(node0.isNE());
113:       assertFalse(node0.isLabelName());
114:       assertFalse(node0.isSwitch());
115:       assertFalse(node0.isIf());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isHook());
119:       assertEquals((-1), node0.getCharno());
120:       assertFalse(node0.isRegExp());
121:       assertFalse(node0.isCase());
122:       assertFalse(node0.isScript());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isThis());
125:       assertFalse(node0.isTry());
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
135:       assertEquals(29, Node.JSDOC_INFO_PROP);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(52, Node.LENGTH);
142:       assertEquals(8, Node.FLAG_NO_THROWS);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(36, Node.QUOTED_PROP);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(1, Node.DECR_FLAG);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(2, Node.POST_FLAG);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(47, Node.IS_DISPATCHER);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
157:       assertEquals(50, Node.FREE_CALL);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(40, Node.ORIGINALNAME_PROP);
160:       assertEquals(54, Node.SLASH_V);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(43, Node.IS_CONSTANT_NAME);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertNotNull(iterable0);
165:       assertFalse(iterable0.contains(node0));
166:       assertFalse(node0.isInstanceOf());
167:       assertFalse(node0.isGetProp());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isWith());
171:       assertFalse(node0.isBreak());
172:       assertFalse(node0.isNot());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isFalse());
176:       assertFalse(node0.isInc());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isContinue());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isDelProp());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isGetElem());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isExprResult());
189:       assertFalse(node0.isWhile());
190:       assertFalse(node0.isString());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isAssign());
193:       assertFalse(node0.hasChildren());
194:       assertEquals(0, node0.getChildCount());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isTrue());
198:       assertFalse(node0.isVoid());
199:       assertFalse(node0.isParamList());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isName());
202:       assertFalse(node0.isVar());
203:       assertFalse(node0.isNew());
204:       assertFalse(node0.isAdd());
205:       assertFalse(node0.isArrayLit());
206:       assertFalse(node0.isFunction());
207:       assertEquals((-125), node0.getType());
208:       assertFalse(node0.isDo());
209:       assertFalse(node0.isEmpty());
210:       assertFalse(node0.isSetterDef());
211:       assertFalse(node0.isDefaultCase());
212:       assertEquals((-1), node0.getLineno());
213:       assertFalse(node0.isLabel());
214:       assertFalse(node0.hasMoreThanOneChild());
215:       assertFalse(node0.isNumber());
216:       assertFalse(node0.isIn());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isNE());
219:       assertFalse(node0.isLabelName());
220:       assertFalse(node0.isSwitch());
221:       assertFalse(node0.isIf());
222:       assertFalse(node0.hasOneChild());
223:       assertFalse(node0.isBlock());
224:       assertFalse(node0.isHook());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isRegExp());
227:       assertFalse(node0.isCase());
228:       assertFalse(node0.isScript());
229:       assertFalse(node0.isFor());
230:       assertFalse(node0.isThis());
231:       assertFalse(node0.isTry());
232:       
233:       Node node1 = node0.cloneTree();
234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
235:       assertEquals(55, Node.INFERRED_FUNCTION);
236:       assertEquals(4095, Node.COLUMN_MASK);
237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
241:       assertEquals(29, Node.JSDOC_INFO_PROP);
242:       assertEquals(39, Node.EMPTY_BLOCK);
243:       assertEquals(53, Node.INPUT_ID);
244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
245:       assertEquals(48, Node.DIRECTIVES);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(52, Node.LENGTH);
248:       assertEquals(8, Node.FLAG_NO_THROWS);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(57, Node.REFLECTED_OBJECT);
252:       assertEquals(1, Node.DECR_FLAG);
253:       assertEquals(30, Node.VAR_ARGS_NAME);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(32, Node.INCRDECR_PROP);
256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
257:       assertEquals(2, Node.POST_FLAG);
258:       assertEquals(57, Node.LAST_PROP);
259:       assertEquals(47, Node.IS_DISPATCHER);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(50, Node.FREE_CALL);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(40, Node.ORIGINALNAME_PROP);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(43, Node.IS_CONSTANT_NAME);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(40, Node.ORIGINALNAME_PROP);
271:       assertEquals(50, Node.FREE_CALL);
272:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
273:       assertEquals(52, Node.LENGTH);
274:       assertEquals(8, Node.FLAG_NO_THROWS);
275:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(54, Node.SLASH_V);
278:       assertEquals(57, Node.REFLECTED_OBJECT);
279:       assertEquals(1, Node.DECR_FLAG);
280:       assertEquals(49, Node.DIRECT_EVAL);
281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
282:       assertEquals(4095, Node.COLUMN_MASK);
283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
284:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
285:       assertEquals(12, Node.COLUMN_BITS);
286:       assertEquals(32, Node.INCRDECR_PROP);
287:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
288:       assertEquals(29, Node.JSDOC_INFO_PROP);
289:       assertEquals(2, Node.POST_FLAG);
290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
291:       assertEquals(37, Node.OPT_ARG_NAME);
292:       assertEquals(36, Node.QUOTED_PROP);
293:       assertEquals(43, Node.IS_CONSTANT_NAME);
294:       assertEquals(56, Node.CHANGE_TIME);
295:       assertEquals(46, Node.IS_NAMESPACE);
296:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
298:       assertEquals(30, Node.VAR_ARGS_NAME);
299:       assertEquals(15, Node.NO_SIDE_EFFECTS);
300:       assertEquals(55, Node.INFERRED_FUNCTION);
301:       assertEquals(53, Node.INPUT_ID);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertNotNull(node1);
307:       assertFalse(node1.equals((Object)node0));
308:       assertNotSame(node0, node1);
309:       assertNotSame(node1, node0);
310:       assertFalse(node0.isInstanceOf());
311:       assertFalse(node0.isGetProp());
312:       assertFalse(node0.isObjectLit());
313:       assertFalse(node0.isComma());
314:       assertFalse(node0.isWith());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isNot());
317:       assertFalse(node0.isAnd());
318:       assertFalse(node0.isCast());
319:       assertFalse(node0.isFalse());
320:       assertFalse(node0.isInc());
321:       assertFalse(node0.isThrow());
322:       assertFalse(node0.isAssignAdd());
323:       assertFalse(node0.isOr());
324:       assertFalse(node0.isReturn());
325:       assertFalse(node0.isContinue());
326:       assertFalse(node0.isTypeOf());
327:       assertFalse(node0.isDelProp());
328:       assertEquals((-1), node0.getSourcePosition());
329:       assertFalse(node0.isGetElem());
330:       assertFalse(node0.isDebugger());
331:       assertFalse(node0.isCall());
332:       assertFalse(node0.isExprResult());
333:       assertFalse(node0.isWhile());
334:       assertFalse(node0.isString());
335:       assertFalse(node0.isDec());
336:       assertFalse(node0.isAssign());
337:       assertFalse(node0.hasChildren());
338:       assertEquals(0, node0.getChildCount());
339:       assertFalse(node0.isCatch());
340:       assertFalse(node0.isNull());
341:       assertFalse(node0.isTrue());
342:       assertFalse(node0.isVoid());
343:       assertFalse(node0.isParamList());
344:       assertFalse(node0.isStringKey());
345:       assertFalse(node0.isName());
346:       assertFalse(node0.isVar());
347:       assertFalse(node0.isNew());
348:       assertFalse(node0.isAdd());
349:       assertFalse(node0.isArrayLit());
350:       assertFalse(node0.isFunction());
351:       assertEquals((-125), node0.getType());
352:       assertFalse(node0.isDo());
353:       assertFalse(node0.isEmpty());
354:       assertFalse(node0.isSetterDef());
355:       assertFalse(node0.isDefaultCase());
356:       assertEquals((-1), node0.getLineno());
357:       assertFalse(node0.isLabel());
358:       assertFalse(node0.hasMoreThanOneChild());
359:       assertFalse(node0.isNumber());
360:       assertFalse(node0.isIn());
361:       assertFalse(node0.isGetterDef());
362:       assertFalse(node0.isNE());
363:       assertFalse(node0.isLabelName());
364:       assertFalse(node0.isSwitch());
365:       assertFalse(node0.isIf());
366:       assertFalse(node0.hasOneChild());
367:       assertFalse(node0.isBlock());
368:       assertFalse(node0.isHook());
369:       assertEquals((-1), node0.getCharno());
370:       assertFalse(node0.isRegExp());
371:       assertFalse(node0.isCase());
372:       assertFalse(node0.isScript());
373:       assertFalse(node0.isFor());
374:       assertFalse(node0.isThis());
375:       assertFalse(node0.isTry());
376:       assertFalse(node1.isHook());
377:       assertFalse(node1.isFalse());
378:       assertFalse(node1.isThrow());
379:       assertEquals((-1), node1.getCharno());
380:       assertFalse(node1.isString());
381:       assertFalse(node1.isGetProp());
382:       assertFalse(node1.isInc());
383:       assertFalse(node1.isCase());
384:       assertFalse(node1.isIn());
385:       assertFalse(node1.isInstanceOf());
386:       assertFalse(node1.isThis());
387:       assertFalse(node1.isComma());
388:       assertFalse(node1.isBreak());
389:       assertFalse(node1.isIf());
390:       assertFalse(node1.isDelProp());
391:       assertFalse(node1.isNE());
392:       assertFalse(node1.isWith());
393:       assertFalse(node1.isExprResult());
394:       assertFalse(node1.isTrue());
395:       assertFalse(node1.isFor());
396:       assertFalse(node1.isNumber());
397:       assertFalse(node1.isDefaultCase());
398:       assertFalse(node1.isGetterDef());
399:       assertFalse(node1.isScript());
400:       assertFalse(node1.isEmpty());
401:       assertFalse(node1.isTry());
402:       assertFalse(node1.hasOneChild());
403:       assertEquals(0, node1.getChildCount());
404:       assertFalse(node1.isAssignAdd());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isSwitch());
407:       assertFalse(node1.isParamList());
408:       assertFalse(node1.isLabelName());
409:       assertFalse(node1.isArrayLit());
410:       assertFalse(node1.isVar());
411:       assertFalse(node1.isStringKey());
412:       assertFalse(node1.isBlock());
413:       assertFalse(node1.isWhile());
414:       assertFalse(node1.isAdd());
415:       assertFalse(node1.isDo());
416:       assertFalse(node1.isSetterDef());
417:       assertFalse(node1.isNew());
418:       assertFalse(node1.isReturn());
419:       assertFalse(node1.hasMoreThanOneChild());
420:       assertFalse(node1.isCatch());
421:       assertFalse(node1.isOr());
422:       assertFalse(node1.isDec());
423:       assertFalse(node1.isNull());
424:       assertFalse(node1.isTypeOf());
425:       assertFalse(node1.isRegExp());
426:       assertFalse(node1.isVoid());
427:       assertFalse(node1.isGetElem());
428:       assertFalse(node1.isName());
429:       assertFalse(node1.isCall());
430:       assertEquals((-1), node1.getLineno());
431:       assertFalse(node1.isCast());
432:       assertFalse(node1.isFunction());
433:       assertFalse(node1.isAssign());
434:       assertFalse(node1.isDebugger());
435:       assertFalse(node1.hasChildren());
436:       assertFalse(node1.isContinue());
437:       assertFalse(node1.isAnd());
438:       assertFalse(node1.isObjectLit());
439:       assertFalse(node1.isNot());
440:       assertEquals((-1), node1.getSourcePosition());
441:       assertEquals((-125), node1.getType());
442:       
443:       Node node2 = new Node(4095, node0, node0, node0);
444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
445:       assertEquals(55, Node.INFERRED_FUNCTION);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
451:       assertEquals(29, Node.JSDOC_INFO_PROP);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(53, Node.INPUT_ID);
454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
455:       assertEquals(48, Node.DIRECTIVES);
456:       assertEquals(37, Node.OPT_ARG_NAME);
457:       assertEquals(52, Node.LENGTH);
458:       assertEquals(8, Node.FLAG_NO_THROWS);
459:       assertEquals(56, Node.CHANGE_TIME);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(57, Node.REFLECTED_OBJECT);
462:       assertEquals(1, Node.DECR_FLAG);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(32, Node.INCRDECR_PROP);
466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
467:       assertEquals(2, Node.POST_FLAG);
468:       assertEquals(57, Node.LAST_PROP);
469:       assertEquals(47, Node.IS_DISPATCHER);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(40, Node.ORIGINALNAME_PROP);
476:       assertEquals(54, Node.SLASH_V);
477:       assertEquals(46, Node.IS_NAMESPACE);
478:       assertEquals(43, Node.IS_CONSTANT_NAME);
479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
480:       assertEquals(47, Node.IS_DISPATCHER);
481:       assertEquals(56, Node.CHANGE_TIME);
482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
483:       assertEquals(29, Node.JSDOC_INFO_PROP);
484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
485:       assertEquals(2, Node.POST_FLAG);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
490:       assertEquals(37, Node.OPT_ARG_NAME);
491:       assertEquals(49, Node.DIRECT_EVAL);
492:       assertEquals(43, Node.IS_CONSTANT_NAME);
493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
494:       assertEquals(12, Node.COLUMN_BITS);
495:       assertEquals(1, Node.DECR_FLAG);
496:       assertEquals(32, Node.INCRDECR_PROP);
497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
499:       assertEquals(39, Node.EMPTY_BLOCK);
500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
501:       assertEquals(8, Node.FLAG_NO_THROWS);
502:       assertEquals(50, Node.FREE_CALL);
503:       assertEquals(4095, Node.COLUMN_MASK);
504:       assertEquals(40, Node.ORIGINALNAME_PROP);
505:       assertEquals(57, Node.REFLECTED_OBJECT);
506:       assertEquals(48, Node.DIRECTIVES);
507:       assertEquals(54, Node.SLASH_V);
508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
509:       assertEquals(57, Node.LAST_PROP);
510:       assertEquals(36, Node.QUOTED_PROP);
511:       assertEquals(30, Node.VAR_ARGS_NAME);
512:       assertEquals(52, Node.LENGTH);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
515:       assertEquals(53, Node.INPUT_ID);
516:       assertNotNull(node2);
517:       assertFalse(node0.equals((Object)node1));
518:       assertFalse(node2.equals((Object)node1));
519:       assertFalse(node2.equals((Object)node0));
520:       assertFalse(node0.isInstanceOf());
521:       assertFalse(node0.isGetProp());
522:       assertFalse(node0.isObjectLit());
523:       assertFalse(node0.isComma());
524:       assertFalse(node0.isWith());
525:       assertFalse(node0.isBreak());
526:       assertFalse(node0.isNot());
527:       assertFalse(node0.isAnd());
528:       assertFalse(node0.isCast());
529:       assertFalse(node0.isFalse());
530:       assertFalse(node0.isInc());
531:       assertFalse(node0.isThrow());
532:       assertFalse(node0.isAssignAdd());
533:       assertFalse(node0.isOr());
534:       assertFalse(node0.isReturn());
535:       assertFalse(node0.isContinue());
536:       assertFalse(node0.isTypeOf());
537:       assertFalse(node0.isDelProp());
538:       assertEquals((-1), node0.getSourcePosition());
539:       assertFalse(node0.isGetElem());
540:       assertFalse(node0.isDebugger());
541:       assertFalse(node0.isCall());
542:       assertFalse(node0.isExprResult());
543:       assertFalse(node0.isWhile());
544:       assertFalse(node0.isString());
545:       assertFalse(node0.isDec());
546:       assertFalse(node0.isAssign());
547:       assertFalse(node0.hasChildren());
548:       assertEquals(0, node0.getChildCount());
549:       assertFalse(node0.isCatch());
550:       assertFalse(node0.isNull());
551:       assertFalse(node0.isTrue());
552:       assertFalse(node0.isVoid());
553:       assertFalse(node0.isParamList());
554:       assertFalse(node0.isStringKey());
555:       assertFalse(node0.isName());
556:       assertFalse(node0.isVar());
557:       assertFalse(node0.isNew());
558:       assertFalse(node0.isAdd());
559:       assertFalse(node0.isArrayLit());
560:       assertFalse(node0.isFunction());
561:       assertEquals((-125), node0.getType());
562:       assertFalse(node0.isDo());
563:       assertFalse(node0.isEmpty());
564:       assertFalse(node0.isSetterDef());
565:       assertFalse(node0.isDefaultCase());
566:       assertEquals((-1), node0.getLineno());
567:       assertFalse(node0.isLabel());
568:       assertFalse(node0.hasMoreThanOneChild());
569:       assertFalse(node0.isNumber());
570:       assertFalse(node0.isIn());
571:       assertFalse(node0.isGetterDef());
572:       assertFalse(node0.isNE());
573:       assertFalse(node0.isLabelName());
574:       assertFalse(node0.isSwitch());
575:       assertFalse(node0.isIf());
576:       assertFalse(node0.hasOneChild());
577:       assertFalse(node0.isBlock());
578:       assertFalse(node0.isHook());
579:       assertEquals((-1), node0.getCharno());
580:       assertFalse(node0.isRegExp());
581:       assertFalse(node0.isCase());
582:       assertFalse(node0.isScript());
583:       assertFalse(node0.isFor());
584:       assertFalse(node0.isThis());
585:       assertFalse(node0.isTry());
586:       assertFalse(node2.isLabelName());
587:       assertFalse(node2.isAssign());
588:       assertFalse(node2.isDec());
589:       assertEquals((-1), node2.getSourcePosition());
590:       assertFalse(node2.isAssignAdd());
591:       assertFalse(node2.isOr());
592:       assertFalse(node2.isNumber());
593:       assertFalse(node2.isScript());
594:       assertFalse(node2.hasMoreThanOneChild());
595:       assertFalse(node2.isWith());
596:       assertFalse(node2.isWhile());
597:       assertFalse(node2.isReturn());
598:       assertFalse(node2.isComma());
599:       assertFalse(node2.isTypeOf());
600:       assertFalse(node2.isBreak());
601:       assertFalse(node2.isInstanceOf());
602:       assertEquals((-1), node2.getLineno());
603:       assertFalse(node2.isGetElem());
604:       assertFalse(node2.isCall());
605:       assertFalse(node2.isExprResult());
606:       assertFalse(node2.isThrow());
607:       assertFalse(node2.isFalse());
608:       assertFalse(node2.isGetProp());
609:       assertFalse(node2.isString());
610:       assertFalse(node2.isInc());
611:       assertFalse(node2.isSetterDef());
612:       assertFalse(node2.isContinue());
613:       assertFalse(node2.isAnd());
614:       assertFalse(node2.isObjectLit());
615:       assertFalse(node2.isNot());
616:       assertEquals(4095, node2.getType());
617:       assertFalse(node2.isFunction());
618:       assertFalse(node2.isCast());
619:       assertFalse(node2.isGetterDef());
620:       assertFalse(node2.isIf());
621:       assertFalse(node2.isNE());
622:       assertFalse(node2.isFor());
623:       assertTrue(node2.hasOneChild());
624:       assertFalse(node2.isDebugger());
625:       assertFalse(node2.isTry());
626:       assertFalse(node2.isIn());
627:       assertFalse(node2.isEmpty());
628:       assertFalse(node2.isCase());
629:       assertFalse(node2.isCatch());
630:       assertEquals(1, node2.getChildCount());
631:       assertFalse(node2.isTrue());
632:       assertFalse(node2.isVoid());
633:       assertFalse(node2.isRegExp());
634:       assertFalse(node2.isDelProp());
635:       assertTrue(node2.hasChildren());
636:       assertFalse(node2.isStringKey());
637:       assertFalse(node2.isName());
638:       assertFalse(node2.isVar());
639:       assertFalse(node2.isNull());
640:       assertFalse(node2.isHook());
641:       assertFalse(node2.isBlock());
642:       assertFalse(node2.isThis());
643:       assertEquals((-1), node2.getCharno());
644:       assertFalse(node2.isNew());
645:       assertFalse(node2.isAdd());
646:       assertFalse(node2.isDo());
647:       assertFalse(node2.isDefaultCase());
648:       assertFalse(node2.isLabel());
649:       assertFalse(node2.isParamList());
650:       assertFalse(node2.isSwitch());
651:       assertFalse(node2.isArrayLit());
652:       
653:       Node node3 = node2.srcrefTree(node0);
654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
655:       assertEquals(55, Node.INFERRED_FUNCTION);
656:       assertEquals(4095, Node.COLUMN_MASK);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
659:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
660:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
661:       assertEquals(29, Node.JSDOC_INFO_PROP);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(53, Node.INPUT_ID);
664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
665:       assertEquals(48, Node.DIRECTIVES);
666:       assertEquals(37, Node.OPT_ARG_NAME);
667:       assertEquals(52, Node.LENGTH);
668:       assertEquals(8, Node.FLAG_NO_THROWS);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(36, Node.QUOTED_PROP);
671:       assertEquals(57, Node.REFLECTED_OBJECT);
672:       assertEquals(1, Node.DECR_FLAG);
673:       assertEquals(30, Node.VAR_ARGS_NAME);
674:       assertEquals(49, Node.DIRECT_EVAL);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(15, Node.NO_SIDE_EFFECTS);
677:       assertEquals(2, Node.POST_FLAG);
678:       assertEquals(57, Node.LAST_PROP);
679:       assertEquals(47, Node.IS_DISPATCHER);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
682:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
683:       assertEquals(50, Node.FREE_CALL);
684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
685:       assertEquals(40, Node.ORIGINALNAME_PROP);
686:       assertEquals(54, Node.SLASH_V);
687:       assertEquals(46, Node.IS_NAMESPACE);
688:       assertEquals(43, Node.IS_CONSTANT_NAME);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(47, Node.IS_DISPATCHER);
691:       assertEquals(56, Node.CHANGE_TIME);
692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
693:       assertEquals(29, Node.JSDOC_INFO_PROP);
694:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
695:       assertEquals(2, Node.POST_FLAG);
696:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
697:       assertEquals(51, Node.STATIC_SOURCE_FILE);
698:       assertEquals(46, Node.IS_NAMESPACE);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(37, Node.OPT_ARG_NAME);
701:       assertEquals(49, Node.DIRECT_EVAL);
702:       assertEquals(43, Node.IS_CONSTANT_NAME);
703:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
704:       assertEquals(12, Node.COLUMN_BITS);
705:       assertEquals(1, Node.DECR_FLAG);
706:       assertEquals(32, Node.INCRDECR_PROP);
707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
709:       assertEquals(39, Node.EMPTY_BLOCK);
710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
711:       assertEquals(8, Node.FLAG_NO_THROWS);
712:       assertEquals(50, Node.FREE_CALL);
713:       assertEquals(4095, Node.COLUMN_MASK);
714:       assertEquals(40, Node.ORIGINALNAME_PROP);
715:       assertEquals(57, Node.REFLECTED_OBJECT);
716:       assertEquals(48, Node.DIRECTIVES);
717:       assertEquals(54, Node.SLASH_V);
718:       assertEquals(15, Node.NO_SIDE_EFFECTS);
719:       assertEquals(57, Node.LAST_PROP);
720:       assertEquals(36, Node.QUOTED_PROP);
721:       assertEquals(30, Node.VAR_ARGS_NAME);
722:       assertEquals(52, Node.LENGTH);
723:       assertEquals(55, Node.INFERRED_FUNCTION);
724:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(12, Node.COLUMN_BITS);
727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
728:       assertEquals(46, Node.IS_NAMESPACE);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(37, Node.OPT_ARG_NAME);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(54, Node.SLASH_V);
733:       assertEquals(49, Node.DIRECT_EVAL);
734:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
735:       assertEquals(50, Node.FREE_CALL);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
738:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
739:       assertEquals(32, Node.INCRDECR_PROP);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(55, Node.INFERRED_FUNCTION);
742:       assertEquals(4095, Node.COLUMN_MASK);
743:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(36, Node.QUOTED_PROP);
748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
749:       assertEquals(48, Node.DIRECTIVES);
750:       assertEquals(40, Node.ORIGINALNAME_PROP);
751:       assertEquals(57, Node.REFLECTED_OBJECT);
752:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
753:       assertEquals(29, Node.JSDOC_INFO_PROP);
754:       assertEquals(52, Node.LENGTH);
755:       assertEquals(2, Node.POST_FLAG);
756:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
757:       assertEquals(47, Node.IS_DISPATCHER);
758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
759:       assertEquals(39, Node.EMPTY_BLOCK);
760:       assertEquals(53, Node.INPUT_ID);
761:       assertEquals(57, Node.LAST_PROP);
762:       assertNotNull(node3);
763:       assertFalse(node0.equals((Object)node1));
764:       assertFalse(node0.equals((Object)node2));
765:       assertFalse(node2.equals((Object)node1));
766:       assertFalse(node2.equals((Object)node0));
767:       assertFalse(node3.equals((Object)node1));
768:       assertFalse(node3.equals((Object)node0));
769:       assertNotSame(node0, node3);
770:       assertNotSame(node0, node1);
771:       assertNotSame(node0, node2);
772:       assertSame(node2, node3);
773:       assertNotSame(node2, node1);
774:       assertNotSame(node2, node0);
775:       assertSame(node3, node2);
776:       assertNotSame(node3, node1);
777:       assertNotSame(node3, node0);
778:       assertFalse(node0.isInstanceOf());
779:       assertFalse(node0.isGetProp());
780:       assertFalse(node0.isObjectLit());
781:       assertFalse(node0.isComma());
782:       assertFalse(node0.isWith());
783:       assertFalse(node0.isBreak());
784:       assertFalse(node0.isNot());
785:       assertFalse(node0.isAnd());
786:       assertFalse(node0.isCast());
787:       assertFalse(node0.isFalse());
788:       assertFalse(node0.isInc());
789:       assertFalse(node0.isThrow());
790:       assertFalse(node0.isAssignAdd());
791:       assertFalse(node0.isOr());
792:       assertFalse(node0.isReturn());
793:       assertFalse(node0.isContinue());
794:       assertFalse(node0.isTypeOf());
795:       assertFalse(node0.isDelProp());
796:       assertEquals((-1), node0.getSourcePosition());
797:       assertFalse(node0.isGetElem());
798:       assertFalse(node0.isDebugger());
799:       assertFalse(node0.isCall());
800:       assertFalse(node0.isExprResult());
801:       assertFalse(node0.isWhile());
802:       assertFalse(node0.isString());
803:       assertFalse(node0.isDec());
804:       assertFalse(node0.isAssign());
805:       assertFalse(node0.hasChildren());
806:       assertEquals(0, node0.getChildCount());
807:       assertFalse(node0.isCatch());
808:       assertFalse(node0.isNull());
809:       assertFalse(node0.isTrue());
810:       assertFalse(node0.isVoid());
811:       assertFalse(node0.isParamList());
812:       assertFalse(node0.isStringKey());
813:       assertFalse(node0.isName());
814:       assertFalse(node0.isVar());
815:       assertFalse(node0.isNew());
816:       assertFalse(node0.isAdd());
817:       assertFalse(node0.isArrayLit());
818:       assertFalse(node0.isFunction());
819:       assertEquals((-125), node0.getType());
820:       assertFalse(node0.isDo());
821:       assertFalse(node0.isEmpty());
822:       assertFalse(node0.isSetterDef());
823:       assertFalse(node0.isDefaultCase());
824:       assertEquals((-1), node0.getLineno());
825:       assertFalse(node0.isLabel());
826:       assertFalse(node0.hasMoreThanOneChild());
827:       assertFalse(node0.isNumber());
828:       assertFalse(node0.isIn());
829:       assertFalse(node0.isGetterDef());
830:       assertFalse(node0.isNE());
831:       assertFalse(node0.isLabelName());
832:       assertFalse(node0.isSwitch());
833:       assertFalse(node0.isIf());
834:       assertFalse(node0.hasOneChild());
835:       assertFalse(node0.isBlock());
836:       assertFalse(node0.isHook());
837:       assertEquals((-1), node0.getCharno());
838:       assertFalse(node0.isRegExp());
839:       assertFalse(node0.isCase());
840:       assertFalse(node0.isScript());
841:       assertFalse(node0.isFor());
842:       assertFalse(node0.isThis());
843:       assertFalse(node0.isTry());
844:       assertFalse(node2.isLabelName());
845:       assertFalse(node2.isAssign());
846:       assertFalse(node2.isDec());
847:       assertEquals((-1), node2.getSourcePosition());
848:       assertFalse(node2.isAssignAdd());
849:       assertFalse(node2.isOr());
850:       assertFalse(node2.isNumber());
851:       assertFalse(node2.isScript());
852:       assertFalse(node2.hasMoreThanOneChild());
853:       assertFalse(node2.isWith());
854:       assertFalse(node2.isWhile());
855:       assertFalse(node2.isReturn());
856:       assertFalse(node2.isComma());
857:       assertFalse(node2.isTypeOf());
858:       assertFalse(node2.isBreak());
859:       assertFalse(node2.isInstanceOf());
860:       assertEquals((-1), node2.getLineno());
861:       assertFalse(node2.isGetElem());
862:       assertFalse(node2.isCall());
863:       assertFalse(node2.isExprResult());
864:       assertFalse(node2.isThrow());
865:       assertFalse(node2.isFalse());
866:       assertFalse(node2.isGetProp());
867:       assertFalse(node2.isString());
868:       assertFalse(node2.isInc());
869:       assertFalse(node2.isSetterDef());
870:       assertFalse(node2.isContinue());
871:       assertFalse(node2.isAnd());
872:       assertFalse(node2.isObjectLit());
873:       assertFalse(node2.isNot());
874:       assertEquals(4095, node2.getType());
875:       assertFalse(node2.isFunction());
876:       assertFalse(node2.isCast());
877:       assertFalse(node2.isGetterDef());
878:       assertFalse(node2.isIf());
879:       assertFalse(node2.isNE());
880:       assertFalse(node2.isFor());
881:       assertTrue(node2.hasOneChild());
882:       assertFalse(node2.isDebugger());
883:       assertFalse(node2.isTry());
884:       assertFalse(node2.isIn());
885:       assertFalse(node2.isEmpty());
886:       assertFalse(node2.isCase());
887:       assertFalse(node2.isCatch());
888:       assertEquals(1, node2.getChildCount());
889:       assertFalse(node2.isTrue());
890:       assertFalse(node2.isVoid());
891:       assertFalse(node2.isRegExp());
892:       assertFalse(node2.isDelProp());
893:       assertTrue(node2.hasChildren());
894:       assertFalse(node2.isStringKey());
895:       assertFalse(node2.isName());
896:       assertFalse(node2.isVar());
897:       assertFalse(node2.isNull());
898:       assertFalse(node2.isHook());
899:       assertFalse(node2.isBlock());
900:       assertFalse(node2.isThis());
901:       assertEquals((-1), node2.getCharno());
902:       assertFalse(node2.isNew());
903:       assertFalse(node2.isAdd());
904:       assertFalse(node2.isDo());
905:       assertFalse(node2.isDefaultCase());
906:       assertFalse(node2.isLabel());
907:       assertFalse(node2.isParamList());
908:       assertFalse(node2.isSwitch());
909:       assertFalse(node2.isArrayLit());
910:       assertTrue(node3.hasChildren());
911:       assertFalse(node3.isIn());
912:       assertFalse(node3.isNE());
913:       assertEquals(1, node3.getChildCount());
914:       assertTrue(node3.hasOneChild());
915:       assertFalse(node3.isCase());
916:       assertFalse(node3.isEmpty());
917:       assertFalse(node3.isFor());
918:       assertFalse(node3.isGetterDef());
919:       assertFalse(node3.isString());
920:       assertFalse(node3.isInc());
921:       assertFalse(node3.isTry());
922:       assertFalse(node3.isVoid());
923:       assertFalse(node3.isRegExp());
924:       assertFalse(node3.isTrue());
925:       assertFalse(node3.isHook());
926:       assertFalse(node3.isDelProp());
927:       assertFalse(node3.isIf());
928:       assertFalse(node3.isCatch());
929:       assertFalse(node3.isBreak());
930:       assertFalse(node3.isParamList());
931:       assertFalse(node3.isNull());
932:       assertFalse(node3.isThis());
933:       assertFalse(node3.isDefaultCase());
934:       assertFalse(node3.isScript());
935:       assertFalse(node3.isNew());
936:       assertFalse(node3.isSwitch());
937:       assertFalse(node3.isVar());
938:       assertEquals((-1), node3.getCharno());
939:       assertFalse(node3.isLabelName());
940:       assertFalse(node3.isStringKey());
941:       assertFalse(node3.isArrayLit());
942:       assertFalse(node3.isAssignAdd());
943:       assertFalse(node3.isLabel());
944:       assertFalse(node3.isOr());
945:       assertEquals((-1), node3.getLineno());
946:       assertFalse(node3.isTypeOf());
947:       assertEquals((-1), node3.getSourcePosition());
948:       assertFalse(node3.isDec());
949:       assertFalse(node3.isReturn());
950:       assertFalse(node3.isDo());
951:       assertFalse(node3.isWhile());
952:       assertFalse(node3.isNumber());
953:       assertFalse(node3.isAdd());
954:       assertFalse(node3.isBlock());
955:       assertFalse(node3.isName());
956:       assertFalse(node3.isAssign());
957:       assertFalse(node3.hasMoreThanOneChild());
958:       assertFalse(node3.isWith());
959:       assertFalse(node3.isInstanceOf());
960:       assertFalse(node3.isCall());
961:       assertFalse(node3.isExprResult());
962:       assertFalse(node3.isGetElem());
963:       assertFalse(node3.isComma());
964:       assertFalse(node3.isNot());
965:       assertFalse(node3.isThrow());
966:       assertFalse(node3.isObjectLit());
967:       assertFalse(node3.isGetProp());
968:       assertFalse(node3.isSetterDef());
969:       assertEquals(4095, node3.getType());
970:       assertFalse(node3.isFunction());
971:       assertFalse(node3.isDebugger());
972:       assertFalse(node3.isContinue());
973:       assertFalse(node3.isAnd());
974:       assertFalse(node3.isFalse());
975:       assertFalse(node3.isCast());
976:       
977:       boolean boolean0 = node2.isNoSideEffectsCall();
978:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
979:       assertEquals(55, Node.INFERRED_FUNCTION);
980:       assertEquals(4095, Node.COLUMN_MASK);
981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
982:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
983:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
985:       assertEquals(29, Node.JSDOC_INFO_PROP);
986:       assertEquals(39, Node.EMPTY_BLOCK);
987:       assertEquals(53, Node.INPUT_ID);
988:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
989:       assertEquals(48, Node.DIRECTIVES);
990:       assertEquals(37, Node.OPT_ARG_NAME);
991:       assertEquals(52, Node.LENGTH);
992:       assertEquals(8, Node.FLAG_NO_THROWS);
993:       assertEquals(56, Node.CHANGE_TIME);
994:       assertEquals(36, Node.QUOTED_PROP);
995:       assertEquals(57, Node.REFLECTED_OBJECT);
996:       assertEquals(1, Node.DECR_FLAG);
997:       assertEquals(30, Node.VAR_ARGS_NAME);
998:       assertEquals(49, Node.DIRECT_EVAL);
999:       assertEquals(32, Node.INCRDECR_PROP);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(2, Node.POST_FLAG);
1002:       assertEquals(57, Node.LAST_PROP);
1003:       assertEquals(47, Node.IS_DISPATCHER);
1004:       assertEquals(12, Node.COLUMN_BITS);
1005:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1006:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1007:       assertEquals(50, Node.FREE_CALL);
1008:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1009:       assertEquals(40, Node.ORIGINALNAME_PROP);
1010:       assertEquals(54, Node.SLASH_V);
1011:       assertEquals(46, Node.IS_NAMESPACE);
1012:       assertEquals(43, Node.IS_CONSTANT_NAME);
1013:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1014:       assertEquals(47, Node.IS_DISPATCHER);
1015:       assertEquals(56, Node.CHANGE_TIME);
1016:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1017:       assertEquals(29, Node.JSDOC_INFO_PROP);
1018:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1019:       assertEquals(2, Node.POST_FLAG);
1020:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1021:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1022:       assertEquals(46, Node.IS_NAMESPACE);
1023:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1024:       assertEquals(37, Node.OPT_ARG_NAME);
1025:       assertEquals(49, Node.DIRECT_EVAL);
1026:       assertEquals(43, Node.IS_CONSTANT_NAME);
1027:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1028:       assertEquals(12, Node.COLUMN_BITS);
1029:       assertEquals(1, Node.DECR_FLAG);
1030:       assertEquals(32, Node.INCRDECR_PROP);
1031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1032:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1033:       assertEquals(39, Node.EMPTY_BLOCK);
1034:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1035:       assertEquals(8, Node.FLAG_NO_THROWS);
1036:       assertEquals(50, Node.FREE_CALL);
1037:       assertEquals(4095, Node.COLUMN_MASK);
1038:       assertEquals(40, Node.ORIGINALNAME_PROP);
1039:       assertEquals(57, Node.REFLECTED_OBJECT);
1040:       assertEquals(48, Node.DIRECTIVES);
1041:       assertEquals(54, Node.SLASH_V);
1042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1043:       assertEquals(57, Node.LAST_PROP);
1044:       assertEquals(36, Node.QUOTED_PROP);
1045:       assertEquals(30, Node.VAR_ARGS_NAME);
1046:       assertEquals(52, Node.LENGTH);
1047:       assertEquals(55, Node.INFERRED_FUNCTION);
1048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertFalse(node0.equals((Object)node3));
1051:       assertFalse(node0.equals((Object)node1));
1052:       assertFalse(node0.equals((Object)node2));
1053:       assertFalse(node2.equals((Object)node1));
1054:       assertFalse(node2.equals((Object)node0));
1055:       assertNotSame(node0, node3);
1056:       assertNotSame(node0, node1);
1057:       assertNotSame(node0, node2);
1058:       assertSame(node2, node3);
1059:       assertNotSame(node2, node1);
1060:       assertNotSame(node2, node0);
1061:       assertFalse(boolean0);
1062:       assertFalse(node0.isInstanceOf());
1063:       assertFalse(node0.isGetProp());
1064:       assertFalse(node0.isObjectLit());
1065:       assertFalse(node0.isComma());
1066:       assertFalse(node0.isWith());
1067:       assertFalse(node0.isBreak());
1068:       assertFalse(node0.isNot());
1069:       assertFalse(node0.isAnd());
1070:       assertFalse(node0.isCast());
1071:       assertFalse(node0.isFalse());
1072:       assertFalse(node0.isInc());
1073:       assertFalse(node0.isThrow());
1074:       assertFalse(node0.isAssignAdd());
1075:       assertFalse(node0.isOr());
1076:       assertFalse(node0.isReturn());
1077:       assertFalse(node0.isContinue());
1078:       assertFalse(node0.isTypeOf());
1079:       assertFalse(node0.isDelProp());
1080:       assertEquals((-1), node0.getSourcePosition());
1081:       assertFalse(node0.isGetElem());
1082:       assertFalse(node0.isDebugger());
1083:       assertFalse(node0.isCall());
1084:       assertFalse(node0.isExprResult());
1085:       assertFalse(node0.isWhile());
1086:       assertFalse(node0.isString());
1087:       assertFalse(node0.isDec());
1088:       assertFalse(node0.isAssign());
1089:       assertFalse(node0.hasChildren());
1090:       assertEquals(0, node0.getChildCount());
1091:       assertFalse(node0.isCatch());
1092:       assertFalse(node0.isNull());
1093:       assertFalse(node0.isTrue());
1094:       assertFalse(node0.isVoid());
1095:       assertFalse(node0.isParamList());
1096:       assertFalse(node0.isStringKey());
1097:       assertFalse(node0.isName());
1098:       assertFalse(node0.isVar());
1099:       assertFalse(node0.isNew());
1100:       assertFalse(node0.isAdd());
1101:       assertFalse(node0.isArrayLit());
1102:       assertFalse(node0.isFunction());
1103:       assertEquals((-125), node0.getType());
1104:       assertFalse(node0.isDo());
1105:       assertFalse(node0.isEmpty());
1106:       assertFalse(node0.isSetterDef());
1107:       assertFalse(node0.isDefaultCase());
1108:       assertEquals((-1), node0.getLineno());
1109:       assertFalse(node0.isLabel());
1110:       assertFalse(node0.hasMoreThanOneChild());
1111:       assertFalse(node0.isNumber());
1112:       assertFalse(node0.isIn());
1113:       assertFalse(node0.isGetterDef());
1114:       assertFalse(node0.isNE());
1115:       assertFalse(node0.isLabelName());
1116:       assertFalse(node0.isSwitch());
1117:       assertFalse(node0.isIf());
1118:       assertFalse(node0.hasOneChild());
1119:       assertFalse(node0.isBlock());
1120:       assertFalse(node0.isHook());
1121:       assertEquals((-1), node0.getCharno());
1122:       assertFalse(node0.isRegExp());
1123:       assertFalse(node0.isCase());
1124:       assertFalse(node0.isScript());
1125:       assertFalse(node0.isFor());
1126:       assertFalse(node0.isThis());
1127:       assertFalse(node0.isTry());
1128:       assertFalse(node2.isLabelName());
1129:       assertFalse(node2.isAssign());
1130:       assertFalse(node2.isDec());
1131:       assertEquals((-1), node2.getSourcePosition());
1132:       assertFalse(node2.isAssignAdd());
1133:       assertFalse(node2.isOr());
1134:       assertFalse(node2.isNumber());
1135:       assertFalse(node2.isScript());
1136:       assertFalse(node2.hasMoreThanOneChild());
1137:       assertFalse(node2.isWith());
1138:       assertFalse(node2.isWhile());
1139:       assertFalse(node2.isReturn());
1140:       assertFalse(node2.isComma());
1141:       assertFalse(node2.isTypeOf());
1142:       assertFalse(node2.isBreak());
1143:       assertFalse(node2.isInstanceOf());
1144:       assertEquals((-1), node2.getLineno());
1145:       assertFalse(node2.isGetElem());
1146:       assertFalse(node2.isCall());
1147:       assertFalse(node2.isExprResult());
1148:       assertFalse(node2.isThrow());
1149:       assertFalse(node2.isFalse());
1150:       assertFalse(node2.isGetProp());
1151:       assertFalse(node2.isString());
1152:       assertFalse(node2.isInc());
1153:       assertFalse(node2.isSetterDef());
1154:       assertFalse(node2.isContinue());
1155:       assertFalse(node2.isAnd());
1156:       assertFalse(node2.isObjectLit());
1157:       assertFalse(node2.isNot());
1158:       assertEquals(4095, node2.getType());
1159:       assertFalse(node2.isFunction());
1160:       assertFalse(node2.isCast());
1161:       assertFalse(node2.isGetterDef());
1162:       assertFalse(node2.isIf());
1163:       assertFalse(node2.isNE());
1164:       assertFalse(node2.isFor());
1165:       assertTrue(node2.hasOneChild());
1166:       assertFalse(node2.isDebugger());
1167:       assertFalse(node2.isTry());
1168:       assertFalse(node2.isIn());
1169:       assertFalse(node2.isEmpty());
1170:       assertFalse(node2.isCase());
1171:       assertFalse(node2.isCatch());
1172:       assertEquals(1, node2.getChildCount());
1173:       assertFalse(node2.isTrue());
1174:       assertFalse(node2.isVoid());
1175:       assertFalse(node2.isRegExp());
1176:       assertFalse(node2.isDelProp());
1177:       assertTrue(node2.hasChildren());
1178:       assertFalse(node2.isStringKey());
1179:       assertFalse(node2.isName());
1180:       assertFalse(node2.isVar());
1181:       assertFalse(node2.isNull());
1182:       assertFalse(node2.isHook());
1183:       assertFalse(node2.isBlock());
1184:       assertFalse(node2.isThis());
1185:       assertEquals((-1), node2.getCharno());
1186:       assertFalse(node2.isNew());
1187:       assertFalse(node2.isAdd());
1188:       assertFalse(node2.isDo());
1189:       assertFalse(node2.isDefaultCase());
1190:       assertFalse(node2.isLabel());
1191:       assertFalse(node2.isParamList());
1192:       assertFalse(node2.isSwitch());
1193:       assertFalse(node2.isArrayLit());
1194:       
1195:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
1196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1197:       assertEquals(55, Node.INFERRED_FUNCTION);
1198:       assertEquals(4095, Node.COLUMN_MASK);
1199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1203:       assertEquals(29, Node.JSDOC_INFO_PROP);
1204:       assertEquals(39, Node.EMPTY_BLOCK);
1205:       assertEquals(53, Node.INPUT_ID);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(48, Node.DIRECTIVES);
1208:       assertEquals(37, Node.OPT_ARG_NAME);
1209:       assertEquals(52, Node.LENGTH);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertEquals(56, Node.CHANGE_TIME);
1212:       assertEquals(36, Node.QUOTED_PROP);
1213:       assertEquals(57, Node.REFLECTED_OBJECT);
1214:       assertEquals(1, Node.DECR_FLAG);
1215:       assertEquals(30, Node.VAR_ARGS_NAME);
1216:       assertEquals(49, Node.DIRECT_EVAL);
1217:       assertEquals(32, Node.INCRDECR_PROP);
1218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1219:       assertEquals(2, Node.POST_FLAG);
1220:       assertEquals(57, Node.LAST_PROP);
1221:       assertEquals(47, Node.IS_DISPATCHER);
1222:       assertEquals(12, Node.COLUMN_BITS);
1223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1225:       assertEquals(50, Node.FREE_CALL);
1226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1227:       assertEquals(40, Node.ORIGINALNAME_PROP);
1228:       assertEquals(54, Node.SLASH_V);
1229:       assertEquals(46, Node.IS_NAMESPACE);
1230:       assertEquals(43, Node.IS_CONSTANT_NAME);
1231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1232:       assertEquals(40, Node.ORIGINALNAME_PROP);
1233:       assertEquals(50, Node.FREE_CALL);
1234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1235:       assertEquals(52, Node.LENGTH);
1236:       assertEquals(8, Node.FLAG_NO_THROWS);
1237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1238:       assertEquals(48, Node.DIRECTIVES);
1239:       assertEquals(54, Node.SLASH_V);
1240:       assertEquals(57, Node.REFLECTED_OBJECT);
1241:       assertEquals(1, Node.DECR_FLAG);
1242:       assertEquals(49, Node.DIRECT_EVAL);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(4095, Node.COLUMN_MASK);
1245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1247:       assertEquals(12, Node.COLUMN_BITS);
1248:       assertEquals(32, Node.INCRDECR_PROP);
1249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1250:       assertEquals(29, Node.JSDOC_INFO_PROP);
1251:       assertEquals(2, Node.POST_FLAG);
1252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1253:       assertEquals(37, Node.OPT_ARG_NAME);
1254:       assertEquals(36, Node.QUOTED_PROP);
1255:       assertEquals(43, Node.IS_CONSTANT_NAME);
1256:       assertEquals(56, Node.CHANGE_TIME);
1257:       assertEquals(46, Node.IS_NAMESPACE);
1258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(30, Node.VAR_ARGS_NAME);
1261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1262:       assertEquals(55, Node.INFERRED_FUNCTION);
1263:       assertEquals(53, Node.INPUT_ID);
1264:       assertEquals(39, Node.EMPTY_BLOCK);
1265:       assertEquals(57, Node.LAST_PROP);
1266:       assertEquals(47, Node.IS_DISPATCHER);
1267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1268:       assertEquals(47, Node.IS_DISPATCHER);
1269:       assertEquals(56, Node.CHANGE_TIME);
1270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1271:       assertEquals(29, Node.JSDOC_INFO_PROP);
1272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1273:       assertEquals(2, Node.POST_FLAG);
1274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1276:       assertEquals(46, Node.IS_NAMESPACE);
1277:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1278:       assertEquals(37, Node.OPT_ARG_NAME);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(43, Node.IS_CONSTANT_NAME);
1281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1282:       assertEquals(12, Node.COLUMN_BITS);
1283:       assertEquals(1, Node.DECR_FLAG);
1284:       assertEquals(32, Node.INCRDECR_PROP);
1285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1286:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1289:       assertEquals(8, Node.FLAG_NO_THROWS);
1290:       assertEquals(50, Node.FREE_CALL);
1291:       assertEquals(4095, Node.COLUMN_MASK);
1292:       assertEquals(40, Node.ORIGINALNAME_PROP);
1293:       assertEquals(57, Node.REFLECTED_OBJECT);
1294:       assertEquals(48, Node.DIRECTIVES);
1295:       assertEquals(54, Node.SLASH_V);
1296:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1297:       assertEquals(57, Node.LAST_PROP);
1298:       assertEquals(36, Node.QUOTED_PROP);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(52, Node.LENGTH);
1301:       assertEquals(55, Node.INFERRED_FUNCTION);
1302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1303:       assertEquals(53, Node.INPUT_ID);
1304:       assertNotNull(node_NodeMismatch0);
1305:       assertFalse(node0.equals((Object)node3));
1306:       assertFalse(node0.equals((Object)node1));
1307:       assertFalse(node0.equals((Object)node2));
1308:       assertFalse(node1.equals((Object)node0));
1309:       assertFalse(node1.equals((Object)node3));
1310:       assertFalse(node1.equals((Object)node2));
1311:       assertFalse(node2.equals((Object)node1));
1312:       assertFalse(node2.equals((Object)node0));
1313:       assertNotSame(node0, node3);
1314:       assertNotSame(node0, node1);
1315:       assertNotSame(node0, node2);
1316:       assertNotSame(node1, node0);
1317:       assertNotSame(node1, node3);
1318:       assertNotSame(node1, node2);
1319:       assertSame(node2, node3);
1320:       assertNotSame(node2, node1);
1321:       assertNotSame(node2, node0);
1322:       assertFalse(node0.isInstanceOf());
1323:       assertFalse(node0.isGetProp());
1324:       assertFalse(node0.isObjectLit());
1325:       assertFalse(node0.isComma());
1326:       assertFalse(node0.isWith());
1327:       assertFalse(node0.isBreak());
1328:       assertFalse(node0.isNot());
1329:       assertFalse(node0.isAnd());
1330:       assertFalse(node0.isCast());
1331:       assertFalse(node0.isFalse());
1332:       assertFalse(node0.isInc());
1333:       assertFalse(node0.isThrow());
1334:       assertFalse(node0.isAssignAdd());
1335:       assertFalse(node0.isOr());
1336:       assertFalse(node0.isReturn());
1337:       assertFalse(node0.isContinue());
1338:       assertFalse(node0.isTypeOf());
1339:       assertFalse(node0.isDelProp());
1340:       assertEquals((-1), node0.getSourcePosition());
1341:       assertFalse(node0.isGetElem());
1342:       assertFalse(node0.isDebugger());
1343:       assertFalse(node0.isCall());
1344:       assertFalse(node0.isExprResult());
1345:       assertFalse(node0.isWhile());
1346:       assertFalse(node0.isString());
1347:       assertFalse(node0.isDec());
1348:       assertFalse(node0.isAssign());
1349:       assertFalse(node0.hasChildren());
1350:       assertEquals(0, node0.getChildCount());
1351:       assertFalse(node0.isCatch());
1352:       assertFalse(node0.isNull());
1353:       assertFalse(node0.isTrue());
1354:       assertFalse(node0.isVoid());
1355:       assertFalse(node0.isParamList());
1356:       assertFalse(node0.isStringKey());
1357:       assertFalse(node0.isName());
1358:       assertFalse(node0.isVar());
1359:       assertFalse(node0.isNew());
1360:       assertFalse(node0.isAdd());
1361:       assertFalse(node0.isArrayLit());
1362:       assertFalse(node0.isFunction());
1363:       assertEquals((-125), node0.getType());
1364:       assertFalse(node0.isDo());
1365:       assertFalse(node0.isEmpty());
1366:       assertFalse(node0.isSetterDef());
1367:       assertFalse(node0.isDefaultCase());
1368:       assertEquals((-1), node0.getLineno());
1369:       assertFalse(node0.isLabel());
1370:       assertFalse(node0.hasMoreThanOneChild());
1371:       assertFalse(node0.isNumber());
1372:       assertFalse(node0.isIn());
1373:       assertFalse(node0.isGetterDef());
1374:       assertFalse(node0.isNE());
1375:       assertFalse(node0.isLabelName());
1376:       assertFalse(node0.isSwitch());
1377:       assertFalse(node0.isIf());
1378:       assertFalse(node0.hasOneChild());
1379:       assertFalse(node0.isBlock());
1380:       assertFalse(node0.isHook());
1381:       assertEquals((-1), node0.getCharno());
1382:       assertFalse(node0.isRegExp());
1383:       assertFalse(node0.isCase());
1384:       assertFalse(node0.isScript());
1385:       assertFalse(node0.isFor());
1386:       assertFalse(node0.isThis());
1387:       assertFalse(node0.isTry());
1388:       assertFalse(node1.isHook());
1389:       assertFalse(node1.isFalse());
1390:       assertFalse(node1.isThrow());
1391:       assertEquals((-1), node1.getCharno());
1392:       assertFalse(node1.isString());
1393:       assertFalse(node1.isGetProp());
1394:       assertFalse(node1.isInc());
1395:       assertFalse(node1.isCase());
1396:       assertFalse(node1.isIn());
1397:       assertFalse(node1.isInstanceOf());
1398:       assertFalse(node1.isThis());
1399:       assertFalse(node1.isComma());
1400:       assertFalse(node1.isBreak());
1401:       assertFalse(node1.isIf());
1402:       assertFalse(node1.isDelProp());
1403:       assertFalse(node1.isNE());
1404:       assertFalse(node1.isWith());
1405:       assertFalse(node1.isExprResult());
1406:       assertFalse(node1.isTrue());
1407:       assertFalse(node1.isFor());
1408:       assertFalse(node1.isNumber());
1409:       assertFalse(node1.isDefaultCase());
1410:       assertFalse(node1.isGetterDef());
1411:       assertFalse(node1.isScript());
1412:       assertFalse(node1.isEmpty());
1413:       assertFalse(node1.isTry());
1414:       assertFalse(node1.hasOneChild());
1415:       assertEquals(0, node1.getChildCount());
1416:       assertFalse(node1.isAssignAdd());
1417:       assertFalse(node1.isLabel());
1418:       assertFalse(node1.isSwitch());
1419:       assertFalse(node1.isParamList());
1420:       assertFalse(node1.isLabelName());
1421:       assertFalse(node1.isArrayLit());
1422:       assertFalse(node1.isVar());
1423:       assertFalse(node1.isStringKey());
1424:       assertFalse(node1.isBlock());
1425:       assertFalse(node1.isWhile());
1426:       assertFalse(node1.isAdd());
1427:       assertFalse(node1.isDo());
1428:       assertFalse(node1.isSetterDef());
1429:       assertFalse(node1.isNew());
1430:       assertFalse(node1.isReturn());
1431:       assertFalse(node1.hasMoreThanOneChild());
1432:       assertFalse(node1.isCatch());
1433:       assertFalse(node1.isOr());
1434:       assertFalse(node1.isDec());
1435:       assertFalse(node1.isNull());
1436:       assertFalse(node1.isTypeOf());
1437:       assertFalse(node1.isRegExp());
1438:       assertFalse(node1.isVoid());
1439:       assertFalse(node1.isGetElem());
1440:       assertFalse(node1.isName());
1441:       assertFalse(node1.isCall());
1442:       assertEquals((-1), node1.getLineno());
1443:       assertFalse(node1.isCast());
1444:       assertFalse(node1.isFunction());
1445:       assertFalse(node1.isAssign());
1446:       assertFalse(node1.isDebugger());
1447:       assertFalse(node1.hasChildren());
1448:       assertFalse(node1.isContinue());
1449:       assertFalse(node1.isAnd());
1450:       assertFalse(node1.isObjectLit());
1451:       assertFalse(node1.isNot());
1452:       assertEquals((-1), node1.getSourcePosition());
1453:       assertEquals((-125), node1.getType());
1454:       assertFalse(node2.isLabelName());
1455:       assertFalse(node2.isAssign());
1456:       assertFalse(node2.isDec());
1457:       assertEquals((-1), node2.getSourcePosition());
1458:       assertFalse(node2.isAssignAdd());
1459:       assertFalse(node2.isOr());
1460:       assertFalse(node2.isNumber());
1461:       assertFalse(node2.isScript());
1462:       assertFalse(node2.hasMoreThanOneChild());
1463:       assertFalse(node2.isWith());
1464:       assertFalse(node2.isWhile());
1465:       assertFalse(node2.isReturn());
1466:       assertFalse(node2.isComma());
1467:       assertFalse(node2.isTypeOf());
1468:       assertFalse(node2.isBreak());
1469:       assertFalse(node2.isInstanceOf());
1470:       assertEquals((-1), node2.getLineno());
1471:       assertFalse(node2.isGetElem());
1472:       assertFalse(node2.isCall());
1473:       assertFalse(node2.isExprResult());
1474:       assertFalse(node2.isThrow());
1475:       assertFalse(node2.isFalse());
1476:       assertFalse(node2.isGetProp());
1477:       assertFalse(node2.isString());
1478:       assertFalse(node2.isInc());
1479:       assertFalse(node2.isSetterDef());
1480:       assertFalse(node2.isContinue());
1481:       assertFalse(node2.isAnd());
1482:       assertFalse(node2.isObjectLit());
1483:       assertFalse(node2.isNot());
1484:       assertEquals(4095, node2.getType());
1485:       assertFalse(node2.isFunction());
1486:       assertFalse(node2.isCast());
1487:       assertFalse(node2.isGetterDef());
1488:       assertFalse(node2.isIf());
1489:       assertFalse(node2.isNE());
1490:       assertFalse(node2.isFor());
1491:       assertTrue(node2.hasOneChild());
1492:       assertFalse(node2.isDebugger());
1493:       assertFalse(node2.isTry());
1494:       assertFalse(node2.isIn());
1495:       assertFalse(node2.isEmpty());
1496:       assertFalse(node2.isCase());
1497:       assertFalse(node2.isCatch());
1498:       assertEquals(1, node2.getChildCount());
1499:       assertFalse(node2.isTrue());
1500:       assertFalse(node2.isVoid());
1501:       assertFalse(node2.isRegExp());
1502:       assertFalse(node2.isDelProp());
1503:       assertTrue(node2.hasChildren());
1504:       assertFalse(node2.isStringKey());
1505:       assertFalse(node2.isName());
1506:       assertFalse(node2.isVar());
1507:       assertFalse(node2.isNull());
1508:       assertFalse(node2.isHook());
1509:       assertFalse(node2.isBlock());
1510:       assertFalse(node2.isThis());
1511:       assertEquals((-1), node2.getCharno());
1512:       assertFalse(node2.isNew());
1513:       assertFalse(node2.isAdd());
1514:       assertFalse(node2.isDo());
1515:       assertFalse(node2.isDefaultCase());
1516:       assertFalse(node2.isLabel());
1517:       assertFalse(node2.isParamList());
1518:       assertFalse(node2.isSwitch());
1519:       assertFalse(node2.isArrayLit());
1520:       
1521:       boolean boolean1 = node2.mayMutateArguments();
1522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1523:       assertEquals(55, Node.INFERRED_FUNCTION);
1524:       assertEquals(4095, Node.COLUMN_MASK);
1525:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1528:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1529:       assertEquals(29, Node.JSDOC_INFO_PROP);
1530:       assertEquals(39, Node.EMPTY_BLOCK);
1531:       assertEquals(53, Node.INPUT_ID);
1532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1533:       assertEquals(48, Node.DIRECTIVES);
1534:       assertEquals(37, Node.OPT_ARG_NAME);
1535:       assertEquals(52, Node.LENGTH);
1536:       assertEquals(8, Node.FLAG_NO_THROWS);
1537:       assertEquals(56, Node.CHANGE_TIME);
1538:       assertEquals(36, Node.QUOTED_PROP);
1539:       assertEquals(57, Node.REFLECTED_OBJECT);
1540:       assertEquals(1, Node.DECR_FLAG);
1541:       assertEquals(30, Node.VAR_ARGS_NAME);
1542:       assertEquals(49, Node.DIRECT_EVAL);
1543:       assertEquals(32, Node.INCRDECR_PROP);
1544:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1545:       assertEquals(2, Node.POST_FLAG);
1546:       assertEquals(57, Node.LAST_PROP);
1547:       assertEquals(47, Node.IS_DISPATCHER);
1548:       assertEquals(12, Node.COLUMN_BITS);
1549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1551:       assertEquals(50, Node.FREE_CALL);
1552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1553:       assertEquals(40, Node.ORIGINALNAME_PROP);
1554:       assertEquals(54, Node.SLASH_V);
1555:       assertEquals(46, Node.IS_NAMESPACE);
1556:       assertEquals(43, Node.IS_CONSTANT_NAME);
1557:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1558:       assertEquals(47, Node.IS_DISPATCHER);
1559:       assertEquals(56, Node.CHANGE_TIME);
1560:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1561:       assertEquals(29, Node.JSDOC_INFO_PROP);
1562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1563:       assertEquals(2, Node.POST_FLAG);
1564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1568:       assertEquals(37, Node.OPT_ARG_NAME);
1569:       assertEquals(49, Node.DIRECT_EVAL);
1570:       assertEquals(43, Node.IS_CONSTANT_NAME);
1571:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1572:       assertEquals(12, Node.COLUMN_BITS);
1573:       assertEquals(1, Node.DECR_FLAG);
1574:       assertEquals(32, Node.INCRDECR_PROP);
1575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1576:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1577:       assertEquals(39, Node.EMPTY_BLOCK);
1578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1579:       assertEquals(8, Node.FLAG_NO_THROWS);
1580:       assertEquals(50, Node.FREE_CALL);
1581:       assertEquals(4095, Node.COLUMN_MASK);
1582:       assertEquals(40, Node.ORIGINALNAME_PROP);
1583:       assertEquals(57, Node.REFLECTED_OBJECT);
1584:       assertEquals(48, Node.DIRECTIVES);
1585:       assertEquals(54, Node.SLASH_V);
1586:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1587:       assertEquals(57, Node.LAST_PROP);
1588:       assertEquals(36, Node.QUOTED_PROP);
1589:       assertEquals(30, Node.VAR_ARGS_NAME);
1590:       assertEquals(52, Node.LENGTH);
1591:       assertEquals(55, Node.INFERRED_FUNCTION);
1592:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1593:       assertEquals(53, Node.INPUT_ID);
1594:       assertFalse(node0.equals((Object)node3));
1595:       assertFalse(node0.equals((Object)node1));
1596:       assertFalse(node0.equals((Object)node2));
1597:       assertFalse(node2.equals((Object)node1));
1598:       assertFalse(node2.equals((Object)node0));
1599:       assertFalse(boolean1 == boolean0);
1600:       assertNotSame(node0, node3);
1601:       assertNotSame(node0, node1);
1602:       assertNotSame(node0, node2);
1603:       assertSame(node2, node3);
1604:       assertNotSame(node2, node1);
1605:       assertNotSame(node2, node0);
1606:       assertTrue(boolean1);
1607:       assertFalse(node0.isInstanceOf());
1608:       assertFalse(node0.isGetProp());
1609:       assertFalse(node0.isObjectLit());
1610:       assertFalse(node0.isComma());
1611:       assertFalse(node0.isWith());
1612:       assertFalse(node0.isBreak());
1613:       assertFalse(node0.isNot());
1614:       assertFalse(node0.isAnd());
1615:       assertFalse(node0.isCast());
1616:       assertFalse(node0.isFalse());
1617:       assertFalse(node0.isInc());
1618:       assertFalse(node0.isThrow());
1619:       assertFalse(node0.isAssignAdd());
1620:       assertFalse(node0.isOr());
1621:       assertFalse(node0.isReturn());
1622:       assertFalse(node0.isContinue());
1623:       assertFalse(node0.isTypeOf());
1624:       assertFalse(node0.isDelProp());
1625:       assertEquals((-1), node0.getSourcePosition());
1626:       assertFalse(node0.isGetElem());
1627:       assertFalse(node0.isDebugger());
1628:       assertFalse(node0.isCall());
1629:       assertFalse(node0.isExprResult());
1630:       assertFalse(node0.isWhile());
1631:       assertFalse(node0.isString());
1632:       assertFalse(node0.isDec());
1633:       assertFalse(node0.isAssign());
1634:       assertFalse(node0.hasChildren());
1635:       assertEquals(0, node0.getChildCount());
1636:       assertFalse(node0.isCatch());
1637:       assertFalse(node0.isNull());
1638:       assertFalse(node0.isTrue());
1639:       assertFalse(node0.isVoid());
1640:       assertFalse(node0.isParamList());
1641:       assertFalse(node0.isStringKey());
1642:       assertFalse(node0.isName());
1643:       assertFalse(node0.isVar());
1644:       assertFalse(node0.isNew());
1645:       assertFalse(node0.isAdd());
1646:       assertFalse(node0.isArrayLit());
1647:       assertFalse(node0.isFunction());
1648:       assertEquals((-125), node0.getType());
1649:       assertFalse(node0.isDo());
1650:       assertFalse(node0.isEmpty());
1651:       assertFalse(node0.isSetterDef());
1652:       assertFalse(node0.isDefaultCase());
1653:       assertEquals((-1), node0.getLineno());
1654:       assertFalse(node0.isLabel());
1655:       assertFalse(node0.hasMoreThanOneChild());
1656:       assertFalse(node0.isNumber());
1657:       assertFalse(node0.isIn());
1658:       assertFalse(node0.isGetterDef());
1659:       assertFalse(node0.isNE());
1660:       assertFalse(node0.isLabelName());
1661:       assertFalse(node0.isSwitch());
1662:       assertFalse(node0.isIf());
1663:       assertFalse(node0.hasOneChild());
1664:       assertFalse(node0.isBlock());
1665:       assertFalse(node0.isHook());
1666:       assertEquals((-1), node0.getCharno());
1667:       assertFalse(node0.isRegExp());
1668:       assertFalse(node0.isCase());
1669:       assertFalse(node0.isScript());
1670:       assertFalse(node0.isFor());
1671:       assertFalse(node0.isThis());
1672:       assertFalse(node0.isTry());
1673:       assertFalse(node2.isLabelName());
1674:       assertFalse(node2.isAssign());
1675:       assertFalse(node2.isDec());
1676:       assertEquals((-1), node2.getSourcePosition());
1677:       assertFalse(node2.isAssignAdd());
1678:       assertFalse(node2.isOr());
1679:       assertFalse(node2.isNumber());
1680:       assertFalse(node2.isScript());
1681:       assertFalse(node2.hasMoreThanOneChild());
1682:       assertFalse(node2.isWith());
1683:       assertFalse(node2.isWhile());
1684:       assertFalse(node2.isReturn());
1685:       assertFalse(node2.isComma());
1686:       assertFalse(node2.isTypeOf());
1687:       assertFalse(node2.isBreak());
1688:       assertFalse(node2.isInstanceOf());
1689:       assertEquals((-1), node2.getLineno());
1690:       assertFalse(node2.isGetElem());
1691:       assertFalse(node2.isCall());
1692:       assertFalse(node2.isExprResult());
1693:       assertFalse(node2.isThrow());
1694:       assertFalse(node2.isFalse());
1695:       assertFalse(node2.isGetProp());
1696:       assertFalse(node2.isString());
1697:       assertFalse(node2.isInc());
1698:       assertFalse(node2.isSetterDef());
1699:       assertFalse(node2.isContinue());
1700:       assertFalse(node2.isAnd());
1701:       assertFalse(node2.isObjectLit());
1702:       assertFalse(node2.isNot());
1703:       assertEquals(4095, node2.getType());
1704:       assertFalse(node2.isFunction());
1705:       assertFalse(node2.isCast());
1706:       assertFalse(node2.isGetterDef());
1707:       assertFalse(node2.isIf());
1708:       assertFalse(node2.isNE());
1709:       assertFalse(node2.isFor());
1710:       assertTrue(node2.hasOneChild());
1711:       assertFalse(node2.isDebugger());
1712:       assertFalse(node2.isTry());
1713:       assertFalse(node2.isIn());
1714:       assertFalse(node2.isEmpty());
1715:       assertFalse(node2.isCase());
1716:       assertFalse(node2.isCatch());
1717:       assertEquals(1, node2.getChildCount());
1718:       assertFalse(node2.isTrue());
1719:       assertFalse(node2.isVoid());
1720:       assertFalse(node2.isRegExp());
1721:       assertFalse(node2.isDelProp());
1722:       assertTrue(node2.hasChildren());
1723:       assertFalse(node2.isStringKey());
1724:       assertFalse(node2.isName());
1725:       assertFalse(node2.isVar());
1726:       assertFalse(node2.isNull());
1727:       assertFalse(node2.isHook());
1728:       assertFalse(node2.isBlock());
1729:       assertFalse(node2.isThis());
1730:       assertEquals((-1), node2.getCharno());
1731:       assertFalse(node2.isNew());
1732:       assertFalse(node2.isAdd());
1733:       assertFalse(node2.isDo());
1734:       assertFalse(node2.isDefaultCase());
1735:       assertFalse(node2.isLabel());
1736:       assertFalse(node2.isParamList());
1737:       assertFalse(node2.isSwitch());
1738:       assertFalse(node2.isArrayLit());
1739:       
1740:       String string0 = node2.getQualifiedName();
1741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1742:       assertEquals(55, Node.INFERRED_FUNCTION);
1743:       assertEquals(4095, Node.COLUMN_MASK);
1744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1747:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1748:       assertEquals(29, Node.JSDOC_INFO_PROP);
1749:       assertEquals(39, Node.EMPTY_BLOCK);
1750:       assertEquals(53, Node.INPUT_ID);
1751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1752:       assertEquals(48, Node.DIRECTIVES);
1753:       assertEquals(37, Node.OPT_ARG_NAME);
1754:       assertEquals(52, Node.LENGTH);
1755:       assertEquals(8, Node.FLAG_NO_THROWS);
1756:       assertEquals(56, Node.CHANGE_TIME);
1757:       assertEquals(36, Node.QUOTED_PROP);
1758:       assertEquals(57, Node.REFLECTED_OBJECT);
1759:       assertEquals(1, Node.DECR_FLAG);
1760:       assertEquals(30, Node.VAR_ARGS_NAME);
1761:       assertEquals(49, Node.DIRECT_EVAL);
1762:       assertEquals(32, Node.INCRDECR_PROP);
1763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1764:       assertEquals(2, Node.POST_FLAG);
1765:       assertEquals(57, Node.LAST_PROP);
1766:       assertEquals(47, Node.IS_DISPATCHER);
1767:       assertEquals(12, Node.COLUMN_BITS);
1768:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1769:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1770:       assertEquals(50, Node.FREE_CALL);
1771:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1772:       assertEquals(40, Node.ORIGINALNAME_PROP);
1773:       assertEquals(54, Node.SLASH_V);
1774:       assertEquals(46, Node.IS_NAMESPACE);
1775:       assertEquals(43, Node.IS_CONSTANT_NAME);
1776:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1777:       assertEquals(47, Node.IS_DISPATCHER);
1778:       assertEquals(56, Node.CHANGE_TIME);
1779:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1780:       assertEquals(29, Node.JSDOC_INFO_PROP);
1781:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1782:       assertEquals(2, Node.POST_FLAG);
1783:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1784:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1785:       assertEquals(46, Node.IS_NAMESPACE);
1786:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1787:       assertEquals(37, Node.OPT_ARG_NAME);
1788:       assertEquals(49, Node.DIRECT_EVAL);
1789:       assertEquals(43, Node.IS_CONSTANT_NAME);
1790:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1791:       assertEquals(12, Node.COLUMN_BITS);
1792:       assertEquals(1, Node.DECR_FLAG);
1793:       assertEquals(32, Node.INCRDECR_PROP);
1794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1795:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1796:       assertEquals(39, Node.EMPTY_BLOCK);
1797:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1798:       assertEquals(8, Node.FLAG_NO_THROWS);
1799:       assertEquals(50, Node.FREE_CALL);
1800:       assertEquals(4095, Node.COLUMN_MASK);
1801:       assertEquals(40, Node.ORIGINALNAME_PROP);
1802:       assertEquals(57, Node.REFLECTED_OBJECT);
1803:       assertEquals(48, Node.DIRECTIVES);
1804:       assertEquals(54, Node.SLASH_V);
1805:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1806:       assertEquals(57, Node.LAST_PROP);
1807:       assertEquals(36, Node.QUOTED_PROP);
1808:       assertEquals(30, Node.VAR_ARGS_NAME);
1809:       assertEquals(52, Node.LENGTH);
1810:       assertEquals(55, Node.INFERRED_FUNCTION);
1811:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1812:       assertEquals(53, Node.INPUT_ID);
1813:       assertNull(string0);
1814:       assertFalse(node0.equals((Object)node3));
1815:       assertFalse(node0.equals((Object)node1));
1816:       assertFalse(node0.equals((Object)node2));
1817:       assertFalse(node2.equals((Object)node1));
1818:       assertFalse(node2.equals((Object)node0));
1819:       assertNotSame(node0, node3);
1820:       assertNotSame(node0, node1);
1821:       assertNotSame(node0, node2);
1822:       assertSame(node2, node3);
1823:       assertNotSame(node2, node1);
1824:       assertNotSame(node2, node0);
1825:       assertFalse(node0.isInstanceOf());
1826:       assertFalse(node0.isGetProp());
1827:       assertFalse(node0.isObjectLit());
1828:       assertFalse(node0.isComma());
1829:       assertFalse(node0.isWith());
1830:       assertFalse(node0.isBreak());
1831:       assertFalse(node0.isNot());
1832:       assertFalse(node0.isAnd());
1833:       assertFalse(node0.isCast());
1834:       assertFalse(node0.isFalse());
1835:       assertFalse(node0.isInc());
1836:       assertFalse(node0.isThrow());
1837:       assertFalse(node0.isAssignAdd());
1838:       assertFalse(node0.isOr());
1839:       assertFalse(node0.isReturn());
1840:       assertFalse(node0.isContinue());
1841:       assertFalse(node0.isTypeOf());
1842:       assertFalse(node0.isDelProp());
1843:       assertEquals((-1), node0.getSourcePosition());
1844:       assertFalse(node0.isGetElem());
1845:       assertFalse(node0.isDebugger());
1846:       assertFalse(node0.isCall());
1847:       assertFalse(node0.isExprResult());
1848:       assertFalse(node0.isWhile());
1849:       assertFalse(node0.isString());
1850:       assertFalse(node0.isDec());
1851:       assertFalse(node0.isAssign());
1852:       assertFalse(node0.hasChildren());
1853:       assertEquals(0, node0.getChildCount());
1854:       assertFalse(node0.isCatch());
1855:       assertFalse(node0.isNull());
1856:       assertFalse(node0.isTrue());
1857:       assertFalse(node0.isVoid());
1858:       assertFalse(node0.isParamList());
1859:       assertFalse(node0.isStringKey());
1860:       assertFalse(node0.isName());
1861:       assertFalse(node0.isVar());
1862:       assertFalse(node0.isNew());
1863:       assertFalse(node0.isAdd());
1864:       assertFalse(node0.isArrayLit());
1865:       assertFalse(node0.isFunction());
1866:       assertEquals((-125), node0.getType());
1867:       assertFalse(node0.isDo());
1868:       assertFalse(node0.isEmpty());
1869:       assertFalse(node0.isSetterDef());
1870:       assertFalse(node0.isDefaultCase());
1871:       assertEquals((-1), node0.getLineno());
1872:       assertFalse(node0.isLabel());
1873:       assertFalse(node0.hasMoreThanOneChild());
1874:       assertFalse(node0.isNumber());
1875:       assertFalse(node0.isIn());
1876:       assertFalse(node0.isGetterDef());
1877:       assertFalse(node0.isNE());
1878:       assertFalse(node0.isLabelName());
1879:       assertFalse(node0.isSwitch());
1880:       assertFalse(node0.isIf());
1881:       assertFalse(node0.hasOneChild());
1882:       assertFalse(node0.isBlock());
1883:       assertFalse(node0.isHook());
1884:       assertEquals((-1), node0.getCharno());
1885:       assertFalse(node0.isRegExp());
1886:       assertFalse(node0.isCase());
1887:       assertFalse(node0.isScript());
1888:       assertFalse(node0.isFor());
1889:       assertFalse(node0.isThis());
1890:       assertFalse(node0.isTry());
1891:       assertFalse(node2.isLabelName());
1892:       assertFalse(node2.isAssign());
1893:       assertFalse(node2.isDec());
1894:       assertEquals((-1), node2.getSourcePosition());
1895:       assertFalse(node2.isAssignAdd());
1896:       assertFalse(node2.isOr());
1897:       assertFalse(node2.isNumber());
1898:       assertFalse(node2.isScript());
1899:       assertFalse(node2.hasMoreThanOneChild());
1900:       assertFalse(node2.isWith());
1901:       assertFalse(node2.isWhile());
1902:       assertFalse(node2.isReturn());
1903:       assertFalse(node2.isComma());
1904:       assertFalse(node2.isTypeOf());
1905:       assertFalse(node2.isBreak());
1906:       assertFalse(node2.isInstanceOf());
1907:       assertEquals((-1), node2.getLineno());
1908:       assertFalse(node2.isGetElem());
1909:       assertFalse(node2.isCall());
1910:       assertFalse(node2.isExprResult());
1911:       assertFalse(node2.isThrow());
1912:       assertFalse(node2.isFalse());
1913:       assertFalse(node2.isGetProp());
1914:       assertFalse(node2.isString());
1915:       assertFalse(node2.isInc());
1916:       assertFalse(node2.isSetterDef());
1917:       assertFalse(node2.isContinue());
1918:       assertFalse(node2.isAnd());
1919:       assertFalse(node2.isObjectLit());
1920:       assertFalse(node2.isNot());
1921:       assertEquals(4095, node2.getType());
1922:       assertFalse(node2.isFunction());
1923:       assertFalse(node2.isCast());
1924:       assertFalse(node2.isGetterDef());
1925:       assertFalse(node2.isIf());
1926:       assertFalse(node2.isNE());
1927:       assertFalse(node2.isFor());
1928:       assertTrue(node2.hasOneChild());
1929:       assertFalse(node2.isDebugger());
1930:       assertFalse(node2.isTry());
1931:       assertFalse(node2.isIn());
1932:       assertFalse(node2.isEmpty());
1933:       assertFalse(node2.isCase());
1934:       assertFalse(node2.isCatch());
1935:       assertEquals(1, node2.getChildCount());
1936:       assertFalse(node2.isTrue());
1937:       assertFalse(node2.isVoid());
1938:       assertFalse(node2.isRegExp());
1939:       assertFalse(node2.isDelProp());
1940:       assertTrue(node2.hasChildren());
1941:       assertFalse(node2.isStringKey());
1942:       assertFalse(node2.isName());
1943:       assertFalse(node2.isVar());
1944:       assertFalse(node2.isNull());
1945:       assertFalse(node2.isHook());
1946:       assertFalse(node2.isBlock());
1947:       assertFalse(node2.isThis());
1948:       assertEquals((-1), node2.getCharno());
1949:       assertFalse(node2.isNew());
1950:       assertFalse(node2.isAdd());
1951:       assertFalse(node2.isDo());
1952:       assertFalse(node2.isDefaultCase());
1953:       assertFalse(node2.isLabel());
1954:       assertFalse(node2.isParamList());
1955:       assertFalse(node2.isSwitch());
1956:       assertFalse(node2.isArrayLit());
1957:       
1958:       // Undeclared exception!
1959:       try { 
1960:         node0.getChildBefore(node2);
1961:         fail("Expecting exception: NullPointerException");
1962:       
1963:       } catch(NullPointerException e) {
1964:          //
1965:          // no message in exception (getMessage() returned null)
1966:          //
1967:          verifyException("com.google.javascript.rhino.Node", e);
1968:       }
1969:   }
1970: }
RegularFileObject[/tmp/EvoSuite_289_1628160191496/com/google/javascript/rhino/Node_289_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_289_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_289_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_289_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:11.889 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-125));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());

Iterable<Node> iterable0 = node0.children();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());

Node node1 = node0.cloneTree();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-125), node1.getType());

Node node2 = new Node(4095, node0, node0, node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(4095, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

Node node3 = node2.srcrefTree(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node1);
assertNotSame(node3, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(4095, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertTrue(node3.hasChildren());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isHook());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isCatch());
assertFalse(node3.isBreak());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isThis());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isNumber());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isName());
assertFalse(node3.isAssign());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isThrow());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertEquals(4095, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());

boolean boolean0 = node2.isNoSideEffectsCall();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(boolean0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(4095, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-125), node1.getType());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(4095, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

boolean boolean1 = node2.mayMutateArguments();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertTrue(boolean1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(4095, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

String string0 = node2.getQualifiedName();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNull(string0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals((-125), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(4095, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

node0.getChildBefore(node2);

[MASTER] 10:43:11.997 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_291_1628160191981/com/google/javascript/rhino/Node_291_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_291_1628160191981/com/google/javascript/rhino/Node_291_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:11.997 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:11.997 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:11.997 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 10:43:11.998 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_291_1628160191981/com/google/javascript/rhino/Node_291_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_291_tmp__ESTest extends Node_291_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(130, 130, 130);
21:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
22:       assertEquals(53, Node.INPUT_ID);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(56, Node.CHANGE_TIME);
25:       assertEquals(43, Node.IS_CONSTANT_NAME);
26:       assertEquals(36, Node.QUOTED_PROP);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(29, Node.JSDOC_INFO_PROP);
29:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
30:       assertEquals(4095, Node.COLUMN_MASK);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(48, Node.DIRECTIVES);
33:       assertEquals(1, Node.DECR_FLAG);
34:       assertEquals(37, Node.OPT_ARG_NAME);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(32, Node.INCRDECR_PROP);
37:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
38:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
39:       assertEquals(40, Node.ORIGINALNAME_PROP);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(52, Node.LENGTH);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(50, Node.FREE_CALL);
48:       assertEquals(51, Node.STATIC_SOURCE_FILE);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(46, Node.IS_NAMESPACE);
52:       assertEquals(57, Node.LAST_PROP);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertNotNull(node0);
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isArrayLit());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isDelProp());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isName());
73:       assertFalse(node0.isIf());
74:       assertTrue(node0.isExprResult());
75:       assertEquals(130, node0.getCharno());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isNull());
78:       assertFalse(node0.isTrue());
79:       assertFalse(node0.isNew());
80:       assertEquals(130, node0.getType());
81:       assertFalse(node0.isSwitch());
82:       assertFalse(node0.isAdd());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isDo());
86:       assertFalse(node0.isVar());
87:       assertFalse(node0.isLabel());
88:       assertFalse(node0.isHook());
89:       assertFalse(node0.isBlock());
90:       assertFalse(node0.isThis());
91:       assertEquals(130, node0.getLineno());
92:       assertFalse(node0.isParamList());
93:       assertFalse(node0.isNumber());
94:       assertFalse(node0.isStringKey());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isGetterDef());
97:       assertFalse(node0.hasOneChild());
98:       assertFalse(node0.isCast());
99:       assertFalse(node0.isScript());
100:       assertFalse(node0.isAssign());
101:       assertFalse(node0.isWith());
102:       assertFalse(node0.hasChildren());
103:       assertFalse(node0.isDec());
104:       assertFalse(node0.isComma());
105:       assertFalse(node0.isAssignAdd());
106:       assertFalse(node0.isOr());
107:       assertEquals(532610, node0.getSourcePosition());
108:       assertFalse(node0.isTypeOf());
109:       assertFalse(node0.isBreak());
110:       assertFalse(node0.isInstanceOf());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isString());
113:       assertFalse(node0.isCall());
114:       assertFalse(node0.isInc());
115:       assertFalse(node0.isContinue());
116:       assertFalse(node0.isThrow());
117:       assertFalse(node0.isFalse());
118:       assertFalse(node0.isWhile());
119:       assertFalse(node0.isReturn());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isAnd());
122:       assertFalse(node0.isNot());
123:       assertFalse(node0.isObjectLit());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(56, Node.CHANGE_TIME);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(48, Node.DIRECTIVES);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(37, Node.OPT_ARG_NAME);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(32, Node.INCRDECR_PROP);
142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(40, Node.ORIGINALNAME_PROP);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(54, Node.SLASH_V);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(52, Node.LENGTH);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(47, Node.IS_DISPATCHER);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(2, Node.POST_FLAG);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertNotNull(iterable0);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isTry());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isRegExp());
169:       assertFalse(node0.isArrayLit());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isDefaultCase());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isIn());
174:       assertFalse(node0.isDelProp());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isCatch());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isName());
179:       assertFalse(node0.isIf());
180:       assertTrue(node0.isExprResult());
181:       assertEquals(130, node0.getCharno());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isNull());
184:       assertFalse(node0.isTrue());
185:       assertFalse(node0.isNew());
186:       assertEquals(130, node0.getType());
187:       assertFalse(node0.isSwitch());
188:       assertFalse(node0.isAdd());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.hasMoreThanOneChild());
191:       assertFalse(node0.isDo());
192:       assertFalse(node0.isVar());
193:       assertFalse(node0.isLabel());
194:       assertFalse(node0.isHook());
195:       assertFalse(node0.isBlock());
196:       assertFalse(node0.isThis());
197:       assertEquals(130, node0.getLineno());
198:       assertFalse(node0.isParamList());
199:       assertFalse(node0.isNumber());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isLabelName());
202:       assertFalse(node0.isGetterDef());
203:       assertFalse(node0.hasOneChild());
204:       assertFalse(node0.isCast());
205:       assertFalse(node0.isScript());
206:       assertFalse(node0.isAssign());
207:       assertFalse(node0.isWith());
208:       assertFalse(node0.hasChildren());
209:       assertFalse(node0.isDec());
210:       assertFalse(node0.isComma());
211:       assertFalse(node0.isAssignAdd());
212:       assertFalse(node0.isOr());
213:       assertEquals(532610, node0.getSourcePosition());
214:       assertFalse(node0.isTypeOf());
215:       assertFalse(node0.isBreak());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isGetElem());
218:       assertFalse(node0.isString());
219:       assertFalse(node0.isCall());
220:       assertFalse(node0.isInc());
221:       assertFalse(node0.isContinue());
222:       assertFalse(node0.isThrow());
223:       assertFalse(node0.isFalse());
224:       assertFalse(node0.isWhile());
225:       assertFalse(node0.isReturn());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.isAnd());
228:       assertFalse(node0.isNot());
229:       assertFalse(node0.isObjectLit());
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_291_1628160191981/com/google/javascript/rhino/Node_291_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_291_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_291_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_291_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:11.999 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(130, 130, 130);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertTrue(node0.isExprResult());
assertEquals(130, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(130, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertEquals(130, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(532610, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertTrue(node0.isExprResult());
assertEquals(130, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(130, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertEquals(130, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(532610, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());


[MASTER] 10:43:18.301 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_354_1628160197973/com/google/javascript/rhino/Node_354_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_354_1628160197973/com/google/javascript/rhino/Node_354_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:18.302 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:18.302 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:18.303 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 165
[MASTER] 10:43:18.304 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_354_1628160197973/com/google/javascript/rhino/Node_354_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_354_tmp__ESTest extends Node_354_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node((-125));
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(36, Node.QUOTED_PROP);
27:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(8, Node.FLAG_NO_THROWS);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(15, Node.NO_SIDE_EFFECTS);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(54, Node.SLASH_V);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(52, Node.LENGTH);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(49, Node.DIRECT_EVAL);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertEquals(1, Node.DECR_FLAG);
59:       assertNotNull(node0);
60:       assertFalse(node0.isWith());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isAnd());
64:       assertFalse(node0.hasOneChild());
65:       assertFalse(node0.isGetProp());
66:       assertFalse(node0.isScript());
67:       assertFalse(node0.isNumber());
68:       assertFalse(node0.isFalse());
69:       assertEquals((-1), node0.getSourcePosition());
70:       assertFalse(node0.isLabelName());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isCast());
75:       assertFalse(node0.isCase());
76:       assertFalse(node0.isSwitch());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isHook());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isFor());
86:       assertEquals((-1), node0.getLineno());
87:       assertFalse(node0.isCatch());
88:       assertFalse(node0.hasMoreThanOneChild());
89:       assertFalse(node0.isInstanceOf());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isRegExp());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isDebugger());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isSetterDef());
96:       assertFalse(node0.isEmpty());
97:       assertFalse(node0.isGetterDef());
98:       assertFalse(node0.isParamList());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isVar());
101:       assertEquals(0, node0.getChildCount());
102:       assertFalse(node0.isFunction());
103:       assertFalse(node0.isArrayLit());
104:       assertEquals((-125), node0.getType());
105:       assertFalse(node0.isWhile());
106:       assertFalse(node0.isString());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isNew());
110:       assertFalse(node0.isOr());
111:       assertFalse(node0.isAdd());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.hasChildren());
114:       assertFalse(node0.isName());
115:       assertFalse(node0.isDec());
116:       assertFalse(node0.isTypeOf());
117:       assertFalse(node0.isAssign());
118:       assertFalse(node0.isDelProp());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isNull());
121:       assertFalse(node0.isReturn());
122:       assertFalse(node0.isVoid());
123:       assertFalse(node0.isCall());
124:       assertFalse(node0.isExprResult());
125:       assertFalse(node0.isGetElem());
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(53, Node.INPUT_ID);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
133:       assertEquals(4095, Node.COLUMN_MASK);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(8, Node.FLAG_NO_THROWS);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(29, Node.JSDOC_INFO_PROP);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(54, Node.SLASH_V);
148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
149:       assertEquals(52, Node.LENGTH);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(40, Node.ORIGINALNAME_PROP);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(46, Node.IS_NAMESPACE);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(32, Node.INCRDECR_PROP);
163:       assertEquals(1, Node.DECR_FLAG);
164:       assertNotNull(iterable0);
165:       assertFalse(iterable0.contains(node0));
166:       assertFalse(node0.isWith());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.hasOneChild());
171:       assertFalse(node0.isGetProp());
172:       assertFalse(node0.isScript());
173:       assertFalse(node0.isNumber());
174:       assertFalse(node0.isFalse());
175:       assertEquals((-1), node0.getSourcePosition());
176:       assertFalse(node0.isLabelName());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.isContinue());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.isSwitch());
183:       assertEquals((-1), node0.getCharno());
184:       assertFalse(node0.isBlock());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isIf());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isHook());
190:       assertFalse(node0.isNE());
191:       assertFalse(node0.isFor());
192:       assertEquals((-1), node0.getLineno());
193:       assertFalse(node0.isCatch());
194:       assertFalse(node0.hasMoreThanOneChild());
195:       assertFalse(node0.isInstanceOf());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isRegExp());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isDebugger());
200:       assertFalse(node0.isTry());
201:       assertFalse(node0.isSetterDef());
202:       assertFalse(node0.isEmpty());
203:       assertFalse(node0.isGetterDef());
204:       assertFalse(node0.isParamList());
205:       assertFalse(node0.isStringKey());
206:       assertFalse(node0.isVar());
207:       assertEquals(0, node0.getChildCount());
208:       assertFalse(node0.isFunction());
209:       assertFalse(node0.isArrayLit());
210:       assertEquals((-125), node0.getType());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isString());
213:       assertFalse(node0.isDo());
214:       assertFalse(node0.isAssignAdd());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isOr());
217:       assertFalse(node0.isAdd());
218:       assertFalse(node0.isBreak());
219:       assertFalse(node0.hasChildren());
220:       assertFalse(node0.isName());
221:       assertFalse(node0.isDec());
222:       assertFalse(node0.isTypeOf());
223:       assertFalse(node0.isAssign());
224:       assertFalse(node0.isDelProp());
225:       assertFalse(node0.isComma());
226:       assertFalse(node0.isNull());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.isVoid());
229:       assertFalse(node0.isCall());
230:       assertFalse(node0.isExprResult());
231:       assertFalse(node0.isGetElem());
232:       
233:       Node node1 = node0.cloneTree();
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(53, Node.INPUT_ID);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(8, Node.FLAG_NO_THROWS);
242:       assertEquals(39, Node.EMPTY_BLOCK);
243:       assertEquals(56, Node.CHANGE_TIME);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(55, Node.INFERRED_FUNCTION);
251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(54, Node.SLASH_V);
254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
255:       assertEquals(52, Node.LENGTH);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(40, Node.ORIGINALNAME_PROP);
258:       assertEquals(57, Node.REFLECTED_OBJECT);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(12, Node.COLUMN_BITS);
268:       assertEquals(32, Node.INCRDECR_PROP);
269:       assertEquals(1, Node.DECR_FLAG);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(54, Node.SLASH_V);
272:       assertEquals(52, Node.LENGTH);
273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
274:       assertEquals(57, Node.LAST_PROP);
275:       assertEquals(1, Node.DECR_FLAG);
276:       assertEquals(40, Node.ORIGINALNAME_PROP);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(30, Node.VAR_ARGS_NAME);
279:       assertEquals(48, Node.DIRECTIVES);
280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
281:       assertEquals(8, Node.FLAG_NO_THROWS);
282:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
283:       assertEquals(39, Node.EMPTY_BLOCK);
284:       assertEquals(37, Node.OPT_ARG_NAME);
285:       assertEquals(29, Node.JSDOC_INFO_PROP);
286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
287:       assertEquals(49, Node.DIRECT_EVAL);
288:       assertEquals(55, Node.INFERRED_FUNCTION);
289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
290:       assertEquals(56, Node.CHANGE_TIME);
291:       assertEquals(57, Node.REFLECTED_OBJECT);
292:       assertEquals(36, Node.QUOTED_PROP);
293:       assertEquals(53, Node.INPUT_ID);
294:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
295:       assertEquals(43, Node.IS_CONSTANT_NAME);
296:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
297:       assertEquals(4095, Node.COLUMN_MASK);
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(2, Node.POST_FLAG);
300:       assertEquals(32, Node.INCRDECR_PROP);
301:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(46, Node.IS_NAMESPACE);
305:       assertEquals(51, Node.STATIC_SOURCE_FILE);
306:       assertNotNull(node1);
307:       assertFalse(node1.equals((Object)node0));
308:       assertNotSame(node0, node1);
309:       assertNotSame(node1, node0);
310:       assertFalse(node0.isWith());
311:       assertFalse(node0.isNot());
312:       assertFalse(node0.isObjectLit());
313:       assertFalse(node0.isAnd());
314:       assertFalse(node0.hasOneChild());
315:       assertFalse(node0.isGetProp());
316:       assertFalse(node0.isScript());
317:       assertFalse(node0.isNumber());
318:       assertFalse(node0.isFalse());
319:       assertEquals((-1), node0.getSourcePosition());
320:       assertFalse(node0.isLabelName());
321:       assertFalse(node0.isThrow());
322:       assertFalse(node0.isLabel());
323:       assertFalse(node0.isContinue());
324:       assertFalse(node0.isCast());
325:       assertFalse(node0.isCase());
326:       assertFalse(node0.isSwitch());
327:       assertEquals((-1), node0.getCharno());
328:       assertFalse(node0.isBlock());
329:       assertFalse(node0.isIn());
330:       assertFalse(node0.isInc());
331:       assertFalse(node0.isIf());
332:       assertFalse(node0.isThis());
333:       assertFalse(node0.isHook());
334:       assertFalse(node0.isNE());
335:       assertFalse(node0.isFor());
336:       assertEquals((-1), node0.getLineno());
337:       assertFalse(node0.isCatch());
338:       assertFalse(node0.hasMoreThanOneChild());
339:       assertFalse(node0.isInstanceOf());
340:       assertFalse(node0.isDefaultCase());
341:       assertFalse(node0.isRegExp());
342:       assertFalse(node0.isTrue());
343:       assertFalse(node0.isDebugger());
344:       assertFalse(node0.isTry());
345:       assertFalse(node0.isSetterDef());
346:       assertFalse(node0.isEmpty());
347:       assertFalse(node0.isGetterDef());
348:       assertFalse(node0.isParamList());
349:       assertFalse(node0.isStringKey());
350:       assertFalse(node0.isVar());
351:       assertEquals(0, node0.getChildCount());
352:       assertFalse(node0.isFunction());
353:       assertFalse(node0.isArrayLit());
354:       assertEquals((-125), node0.getType());
355:       assertFalse(node0.isWhile());
356:       assertFalse(node0.isString());
357:       assertFalse(node0.isDo());
358:       assertFalse(node0.isAssignAdd());
359:       assertFalse(node0.isNew());
360:       assertFalse(node0.isOr());
361:       assertFalse(node0.isAdd());
362:       assertFalse(node0.isBreak());
363:       assertFalse(node0.hasChildren());
364:       assertFalse(node0.isName());
365:       assertFalse(node0.isDec());
366:       assertFalse(node0.isTypeOf());
367:       assertFalse(node0.isAssign());
368:       assertFalse(node0.isDelProp());
369:       assertFalse(node0.isComma());
370:       assertFalse(node0.isNull());
371:       assertFalse(node0.isReturn());
372:       assertFalse(node0.isVoid());
373:       assertFalse(node0.isCall());
374:       assertFalse(node0.isExprResult());
375:       assertFalse(node0.isGetElem());
376:       assertFalse(node1.isDo());
377:       assertFalse(node1.isContinue());
378:       assertFalse(node1.hasMoreThanOneChild());
379:       assertFalse(node1.isAdd());
380:       assertFalse(node1.isOr());
381:       assertEquals((-1), node1.getLineno());
382:       assertFalse(node1.isName());
383:       assertFalse(node1.isStringKey());
384:       assertFalse(node1.isNull());
385:       assertFalse(node1.isLabelName());
386:       assertFalse(node1.isSetterDef());
387:       assertFalse(node1.isCast());
388:       assertEquals(0, node1.getChildCount());
389:       assertFalse(node1.isLabel());
390:       assertFalse(node1.isNew());
391:       assertFalse(node1.isAssignAdd());
392:       assertFalse(node1.isVar());
393:       assertFalse(node1.isRegExp());
394:       assertFalse(node1.isScript());
395:       assertFalse(node1.isWith());
396:       assertFalse(node1.isInstanceOf());
397:       assertFalse(node1.isCatch());
398:       assertFalse(node1.isArrayLit());
399:       assertFalse(node1.isParamList());
400:       assertFalse(node1.isGetterDef());
401:       assertFalse(node1.isIf());
402:       assertFalse(node1.isNumber());
403:       assertFalse(node1.isHook());
404:       assertFalse(node1.isTry());
405:       assertFalse(node1.hasOneChild());
406:       assertFalse(node1.isBlock());
407:       assertFalse(node1.isThis());
408:       assertFalse(node1.isFor());
409:       assertFalse(node1.isCase());
410:       assertFalse(node1.isInc());
411:       assertFalse(node1.isString());
412:       assertFalse(node1.isIn());
413:       assertEquals((-1), node1.getCharno());
414:       assertFalse(node1.isNE());
415:       assertFalse(node1.isSwitch());
416:       assertFalse(node1.isFalse());
417:       assertFalse(node1.isEmpty());
418:       assertFalse(node1.isThrow());
419:       assertFalse(node1.isDefaultCase());
420:       assertFalse(node1.isNot());
421:       assertFalse(node1.isObjectLit());
422:       assertFalse(node1.isExprResult());
423:       assertFalse(node1.isFunction());
424:       assertEquals((-125), node1.getType());
425:       assertFalse(node1.isAnd());
426:       assertFalse(node1.isDebugger());
427:       assertFalse(node1.isVoid());
428:       assertFalse(node1.isTrue());
429:       assertFalse(node1.isBreak());
430:       assertFalse(node1.hasChildren());
431:       assertFalse(node1.isDelProp());
432:       assertFalse(node1.isTypeOf());
433:       assertFalse(node1.isAssign());
434:       assertFalse(node1.isDec());
435:       assertFalse(node1.isComma());
436:       assertEquals((-1), node1.getSourcePosition());
437:       assertFalse(node1.isGetProp());
438:       assertFalse(node1.isGetElem());
439:       assertFalse(node1.isCall());
440:       assertFalse(node1.isReturn());
441:       assertFalse(node1.isWhile());
442:       
443:       Node node2 = new Node(4095, node0, node0, node0);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(43, Node.IS_CONSTANT_NAME);
446:       assertEquals(53, Node.INPUT_ID);
447:       assertEquals(36, Node.QUOTED_PROP);
448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
449:       assertEquals(4095, Node.COLUMN_MASK);
450:       assertEquals(48, Node.DIRECTIVES);
451:       assertEquals(8, Node.FLAG_NO_THROWS);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
455:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
459:       assertEquals(29, Node.JSDOC_INFO_PROP);
460:       assertEquals(55, Node.INFERRED_FUNCTION);
461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(54, Node.SLASH_V);
464:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(30, Node.VAR_ARGS_NAME);
467:       assertEquals(40, Node.ORIGINALNAME_PROP);
468:       assertEquals(57, Node.REFLECTED_OBJECT);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(37, Node.OPT_ARG_NAME);
471:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
473:       assertEquals(46, Node.IS_NAMESPACE);
474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
475:       assertEquals(50, Node.FREE_CALL);
476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       assertEquals(32, Node.INCRDECR_PROP);
479:       assertEquals(1, Node.DECR_FLAG);
480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
482:       assertEquals(29, Node.JSDOC_INFO_PROP);
483:       assertEquals(53, Node.INPUT_ID);
484:       assertEquals(2, Node.POST_FLAG);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(55, Node.INFERRED_FUNCTION);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
489:       assertEquals(49, Node.DIRECT_EVAL);
490:       assertEquals(48, Node.DIRECTIVES);
491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
492:       assertEquals(37, Node.OPT_ARG_NAME);
493:       assertEquals(8, Node.FLAG_NO_THROWS);
494:       assertEquals(39, Node.EMPTY_BLOCK);
495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
496:       assertEquals(56, Node.CHANGE_TIME);
497:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
498:       assertEquals(52, Node.LENGTH);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(40, Node.ORIGINALNAME_PROP);
501:       assertEquals(57, Node.REFLECTED_OBJECT);
502:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
503:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
504:       assertEquals(57, Node.LAST_PROP);
505:       assertEquals(30, Node.VAR_ARGS_NAME);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(12, Node.COLUMN_BITS);
508:       assertEquals(46, Node.IS_NAMESPACE);
509:       assertEquals(32, Node.INCRDECR_PROP);
510:       assertEquals(1, Node.DECR_FLAG);
511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(43, Node.IS_CONSTANT_NAME);
514:       assertEquals(50, Node.FREE_CALL);
515:       assertEquals(51, Node.STATIC_SOURCE_FILE);
516:       assertNotNull(node2);
517:       assertFalse(node0.equals((Object)node1));
518:       assertFalse(node2.equals((Object)node1));
519:       assertFalse(node2.equals((Object)node0));
520:       assertFalse(node0.isWith());
521:       assertFalse(node0.isNot());
522:       assertFalse(node0.isObjectLit());
523:       assertFalse(node0.isAnd());
524:       assertFalse(node0.hasOneChild());
525:       assertFalse(node0.isGetProp());
526:       assertFalse(node0.isScript());
527:       assertFalse(node0.isNumber());
528:       assertFalse(node0.isFalse());
529:       assertEquals((-1), node0.getSourcePosition());
530:       assertFalse(node0.isLabelName());
531:       assertFalse(node0.isThrow());
532:       assertFalse(node0.isLabel());
533:       assertFalse(node0.isContinue());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isCase());
536:       assertFalse(node0.isSwitch());
537:       assertEquals((-1), node0.getCharno());
538:       assertFalse(node0.isBlock());
539:       assertFalse(node0.isIn());
540:       assertFalse(node0.isInc());
541:       assertFalse(node0.isIf());
542:       assertFalse(node0.isThis());
543:       assertFalse(node0.isHook());
544:       assertFalse(node0.isNE());
545:       assertFalse(node0.isFor());
546:       assertEquals((-1), node0.getLineno());
547:       assertFalse(node0.isCatch());
548:       assertFalse(node0.hasMoreThanOneChild());
549:       assertFalse(node0.isInstanceOf());
550:       assertFalse(node0.isDefaultCase());
551:       assertFalse(node0.isRegExp());
552:       assertFalse(node0.isTrue());
553:       assertFalse(node0.isDebugger());
554:       assertFalse(node0.isTry());
555:       assertFalse(node0.isSetterDef());
556:       assertFalse(node0.isEmpty());
557:       assertFalse(node0.isGetterDef());
558:       assertFalse(node0.isParamList());
559:       assertFalse(node0.isStringKey());
560:       assertFalse(node0.isVar());
561:       assertEquals(0, node0.getChildCount());
562:       assertFalse(node0.isFunction());
563:       assertFalse(node0.isArrayLit());
564:       assertEquals((-125), node0.getType());
565:       assertFalse(node0.isWhile());
566:       assertFalse(node0.isString());
567:       assertFalse(node0.isDo());
568:       assertFalse(node0.isAssignAdd());
569:       assertFalse(node0.isNew());
570:       assertFalse(node0.isOr());
571:       assertFalse(node0.isAdd());
572:       assertFalse(node0.isBreak());
573:       assertFalse(node0.hasChildren());
574:       assertFalse(node0.isName());
575:       assertFalse(node0.isDec());
576:       assertFalse(node0.isTypeOf());
577:       assertFalse(node0.isAssign());
578:       assertFalse(node0.isDelProp());
579:       assertFalse(node0.isComma());
580:       assertFalse(node0.isNull());
581:       assertFalse(node0.isReturn());
582:       assertFalse(node0.isVoid());
583:       assertFalse(node0.isCall());
584:       assertFalse(node0.isExprResult());
585:       assertFalse(node0.isGetElem());
586:       assertFalse(node2.isScript());
587:       assertFalse(node2.isExprResult());
588:       assertFalse(node2.isCast());
589:       assertFalse(node2.isLabelName());
590:       assertFalse(node2.isNot());
591:       assertFalse(node2.isGetElem());
592:       assertFalse(node2.isObjectLit());
593:       assertEquals((-1), node2.getSourcePosition());
594:       assertFalse(node2.isAnd());
595:       assertFalse(node2.isAssignAdd());
596:       assertFalse(node2.isOr());
597:       assertFalse(node2.isLabel());
598:       assertFalse(node2.isContinue());
599:       assertFalse(node2.isDo());
600:       assertFalse(node2.isFalse());
601:       assertFalse(node2.isThrow());
602:       assertFalse(node2.isAdd());
603:       assertFalse(node2.isNew());
604:       assertFalse(node2.isCall());
605:       assertFalse(node2.isString());
606:       assertFalse(node2.isName());
607:       assertFalse(node2.isBreak());
608:       assertFalse(node2.isNull());
609:       assertFalse(node2.isGetProp());
610:       assertFalse(node2.isReturn());
611:       assertFalse(node2.isComma());
612:       assertFalse(node2.isTypeOf());
613:       assertFalse(node2.isAssign());
614:       assertTrue(node2.hasOneChild());
615:       assertFalse(node2.isDec());
616:       assertFalse(node2.isWhile());
617:       assertFalse(node2.isTry());
618:       assertFalse(node2.isDebugger());
619:       assertFalse(node2.isVoid());
620:       assertEquals(4095, node2.getType());
621:       assertFalse(node2.isArrayLit());
622:       assertFalse(node2.isRegExp());
623:       assertFalse(node2.isFunction());
624:       assertFalse(node2.isDelProp());
625:       assertFalse(node2.isGetterDef());
626:       assertFalse(node2.isNE());
627:       assertFalse(node2.isTrue());
628:       assertFalse(node2.isIf());
629:       assertFalse(node2.isSetterDef());
630:       assertFalse(node2.isIn());
631:       assertFalse(node2.isEmpty());
632:       assertFalse(node2.isVar());
633:       assertFalse(node2.isDefaultCase());
634:       assertFalse(node2.isBlock());
635:       assertEquals((-1), node2.getCharno());
636:       assertFalse(node2.isInc());
637:       assertFalse(node2.isSwitch());
638:       assertFalse(node2.isParamList());
639:       assertFalse(node2.isStringKey());
640:       assertTrue(node2.hasChildren());
641:       assertEquals(1, node2.getChildCount());
642:       assertEquals((-1), node2.getLineno());
643:       assertFalse(node2.hasMoreThanOneChild());
644:       assertFalse(node2.isNumber());
645:       assertFalse(node2.isInstanceOf());
646:       assertFalse(node2.isCatch());
647:       assertFalse(node2.isCase());
648:       assertFalse(node2.isFor());
649:       assertFalse(node2.isWith());
650:       assertFalse(node2.isHook());
651:       assertFalse(node2.isThis());
652:       
653:       Node node3 = node2.srcrefTree(node0);
654:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
655:       assertEquals(43, Node.IS_CONSTANT_NAME);
656:       assertEquals(53, Node.INPUT_ID);
657:       assertEquals(36, Node.QUOTED_PROP);
658:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
659:       assertEquals(4095, Node.COLUMN_MASK);
660:       assertEquals(48, Node.DIRECTIVES);
661:       assertEquals(8, Node.FLAG_NO_THROWS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(56, Node.CHANGE_TIME);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
666:       assertEquals(47, Node.IS_DISPATCHER);
667:       assertEquals(2, Node.POST_FLAG);
668:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
669:       assertEquals(29, Node.JSDOC_INFO_PROP);
670:       assertEquals(55, Node.INFERRED_FUNCTION);
671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
672:       assertEquals(57, Node.LAST_PROP);
673:       assertEquals(54, Node.SLASH_V);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(52, Node.LENGTH);
676:       assertEquals(30, Node.VAR_ARGS_NAME);
677:       assertEquals(40, Node.ORIGINALNAME_PROP);
678:       assertEquals(57, Node.REFLECTED_OBJECT);
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(37, Node.OPT_ARG_NAME);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
683:       assertEquals(46, Node.IS_NAMESPACE);
684:       assertEquals(51, Node.STATIC_SOURCE_FILE);
685:       assertEquals(50, Node.FREE_CALL);
686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
687:       assertEquals(12, Node.COLUMN_BITS);
688:       assertEquals(32, Node.INCRDECR_PROP);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
691:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
692:       assertEquals(29, Node.JSDOC_INFO_PROP);
693:       assertEquals(53, Node.INPUT_ID);
694:       assertEquals(2, Node.POST_FLAG);
695:       assertEquals(47, Node.IS_DISPATCHER);
696:       assertEquals(55, Node.INFERRED_FUNCTION);
697:       assertEquals(4095, Node.COLUMN_MASK);
698:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
699:       assertEquals(49, Node.DIRECT_EVAL);
700:       assertEquals(48, Node.DIRECTIVES);
701:       assertEquals(15, Node.NO_SIDE_EFFECTS);
702:       assertEquals(37, Node.OPT_ARG_NAME);
703:       assertEquals(8, Node.FLAG_NO_THROWS);
704:       assertEquals(39, Node.EMPTY_BLOCK);
705:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
706:       assertEquals(56, Node.CHANGE_TIME);
707:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
708:       assertEquals(52, Node.LENGTH);
709:       assertEquals(36, Node.QUOTED_PROP);
710:       assertEquals(40, Node.ORIGINALNAME_PROP);
711:       assertEquals(57, Node.REFLECTED_OBJECT);
712:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
713:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
714:       assertEquals(57, Node.LAST_PROP);
715:       assertEquals(30, Node.VAR_ARGS_NAME);
716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
717:       assertEquals(12, Node.COLUMN_BITS);
718:       assertEquals(46, Node.IS_NAMESPACE);
719:       assertEquals(32, Node.INCRDECR_PROP);
720:       assertEquals(1, Node.DECR_FLAG);
721:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
722:       assertEquals(54, Node.SLASH_V);
723:       assertEquals(43, Node.IS_CONSTANT_NAME);
724:       assertEquals(50, Node.FREE_CALL);
725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
726:       assertEquals(51, Node.STATIC_SOURCE_FILE);
727:       assertEquals(12, Node.COLUMN_BITS);
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(46, Node.IS_NAMESPACE);
730:       assertEquals(1, Node.DECR_FLAG);
731:       assertEquals(49, Node.DIRECT_EVAL);
732:       assertEquals(57, Node.LAST_PROP);
733:       assertEquals(56, Node.CHANGE_TIME);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(29, Node.JSDOC_INFO_PROP);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(54, Node.SLASH_V);
741:       assertEquals(47, Node.IS_DISPATCHER);
742:       assertEquals(2, Node.POST_FLAG);
743:       assertEquals(30, Node.VAR_ARGS_NAME);
744:       assertEquals(48, Node.DIRECTIVES);
745:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(36, Node.QUOTED_PROP);
748:       assertEquals(39, Node.EMPTY_BLOCK);
749:       assertEquals(53, Node.INPUT_ID);
750:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
751:       assertEquals(50, Node.FREE_CALL);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
755:       assertEquals(57, Node.REFLECTED_OBJECT);
756:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
757:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
758:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
759:       assertEquals(37, Node.OPT_ARG_NAME);
760:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
761:       assertEquals(4095, Node.COLUMN_MASK);
762:       assertNotNull(node3);
763:       assertFalse(node0.equals((Object)node1));
764:       assertFalse(node0.equals((Object)node2));
765:       assertFalse(node2.equals((Object)node1));
766:       assertFalse(node2.equals((Object)node0));
767:       assertFalse(node3.equals((Object)node1));
768:       assertFalse(node3.equals((Object)node0));
769:       assertNotSame(node0, node1);
770:       assertNotSame(node0, node3);
771:       assertNotSame(node0, node2);
772:       assertSame(node2, node3);
773:       assertNotSame(node2, node1);
774:       assertNotSame(node2, node0);
775:       assertSame(node3, node2);
776:       assertNotSame(node3, node1);
777:       assertNotSame(node3, node0);
778:       assertFalse(node0.isWith());
779:       assertFalse(node0.isNot());
780:       assertFalse(node0.isObjectLit());
781:       assertFalse(node0.isAnd());
782:       assertFalse(node0.hasOneChild());
783:       assertFalse(node0.isGetProp());
784:       assertFalse(node0.isScript());
785:       assertFalse(node0.isNumber());
786:       assertFalse(node0.isFalse());
787:       assertEquals((-1), node0.getSourcePosition());
788:       assertFalse(node0.isLabelName());
789:       assertFalse(node0.isThrow());
790:       assertFalse(node0.isLabel());
791:       assertFalse(node0.isContinue());
792:       assertFalse(node0.isCast());
793:       assertFalse(node0.isCase());
794:       assertFalse(node0.isSwitch());
795:       assertEquals((-1), node0.getCharno());
796:       assertFalse(node0.isBlock());
797:       assertFalse(node0.isIn());
798:       assertFalse(node0.isInc());
799:       assertFalse(node0.isIf());
800:       assertFalse(node0.isThis());
801:       assertFalse(node0.isHook());
802:       assertFalse(node0.isNE());
803:       assertFalse(node0.isFor());
804:       assertEquals((-1), node0.getLineno());
805:       assertFalse(node0.isCatch());
806:       assertFalse(node0.hasMoreThanOneChild());
807:       assertFalse(node0.isInstanceOf());
808:       assertFalse(node0.isDefaultCase());
809:       assertFalse(node0.isRegExp());
810:       assertFalse(node0.isTrue());
811:       assertFalse(node0.isDebugger());
812:       assertFalse(node0.isTry());
813:       assertFalse(node0.isSetterDef());
814:       assertFalse(node0.isEmpty());
815:       assertFalse(node0.isGetterDef());
816:       assertFalse(node0.isParamList());
817:       assertFalse(node0.isStringKey());
818:       assertFalse(node0.isVar());
819:       assertEquals(0, node0.getChildCount());
820:       assertFalse(node0.isFunction());
821:       assertFalse(node0.isArrayLit());
822:       assertEquals((-125), node0.getType());
823:       assertFalse(node0.isWhile());
824:       assertFalse(node0.isString());
825:       assertFalse(node0.isDo());
826:       assertFalse(node0.isAssignAdd());
827:       assertFalse(node0.isNew());
828:       assertFalse(node0.isOr());
829:       assertFalse(node0.isAdd());
830:       assertFalse(node0.isBreak());
831:       assertFalse(node0.hasChildren());
832:       assertFalse(node0.isName());
833:       assertFalse(node0.isDec());
834:       assertFalse(node0.isTypeOf());
835:       assertFalse(node0.isAssign());
836:       assertFalse(node0.isDelProp());
837:       assertFalse(node0.isComma());
838:       assertFalse(node0.isNull());
839:       assertFalse(node0.isReturn());
840:       assertFalse(node0.isVoid());
841:       assertFalse(node0.isCall());
842:       assertFalse(node0.isExprResult());
843:       assertFalse(node0.isGetElem());
844:       assertFalse(node2.isScript());
845:       assertFalse(node2.isExprResult());
846:       assertFalse(node2.isCast());
847:       assertFalse(node2.isLabelName());
848:       assertFalse(node2.isNot());
849:       assertFalse(node2.isGetElem());
850:       assertFalse(node2.isObjectLit());
851:       assertEquals((-1), node2.getSourcePosition());
852:       assertFalse(node2.isAnd());
853:       assertFalse(node2.isAssignAdd());
854:       assertFalse(node2.isOr());
855:       assertFalse(node2.isLabel());
856:       assertFalse(node2.isContinue());
857:       assertFalse(node2.isDo());
858:       assertFalse(node2.isFalse());
859:       assertFalse(node2.isThrow());
860:       assertFalse(node2.isAdd());
861:       assertFalse(node2.isNew());
862:       assertFalse(node2.isCall());
863:       assertFalse(node2.isString());
864:       assertFalse(node2.isName());
865:       assertFalse(node2.isBreak());
866:       assertFalse(node2.isNull());
867:       assertFalse(node2.isGetProp());
868:       assertFalse(node2.isReturn());
869:       assertFalse(node2.isComma());
870:       assertFalse(node2.isTypeOf());
871:       assertFalse(node2.isAssign());
872:       assertTrue(node2.hasOneChild());
873:       assertFalse(node2.isDec());
874:       assertFalse(node2.isWhile());
875:       assertFalse(node2.isTry());
876:       assertFalse(node2.isDebugger());
877:       assertFalse(node2.isVoid());
878:       assertEquals(4095, node2.getType());
879:       assertFalse(node2.isArrayLit());
880:       assertFalse(node2.isRegExp());
881:       assertFalse(node2.isFunction());
882:       assertFalse(node2.isDelProp());
883:       assertFalse(node2.isGetterDef());
884:       assertFalse(node2.isNE());
885:       assertFalse(node2.isTrue());
886:       assertFalse(node2.isIf());
887:       assertFalse(node2.isSetterDef());
888:       assertFalse(node2.isIn());
889:       assertFalse(node2.isEmpty());
890:       assertFalse(node2.isVar());
891:       assertFalse(node2.isDefaultCase());
892:       assertFalse(node2.isBlock());
893:       assertEquals((-1), node2.getCharno());
894:       assertFalse(node2.isInc());
895:       assertFalse(node2.isSwitch());
896:       assertFalse(node2.isParamList());
897:       assertFalse(node2.isStringKey());
898:       assertTrue(node2.hasChildren());
899:       assertEquals(1, node2.getChildCount());
900:       assertEquals((-1), node2.getLineno());
901:       assertFalse(node2.hasMoreThanOneChild());
902:       assertFalse(node2.isNumber());
903:       assertFalse(node2.isInstanceOf());
904:       assertFalse(node2.isCatch());
905:       assertFalse(node2.isCase());
906:       assertFalse(node2.isFor());
907:       assertFalse(node2.isWith());
908:       assertFalse(node2.isHook());
909:       assertFalse(node2.isThis());
910:       assertFalse(node3.isAssignAdd());
911:       assertFalse(node3.isLabelName());
912:       assertEquals((-1), node3.getLineno());
913:       assertFalse(node3.isGetElem());
914:       assertFalse(node3.hasMoreThanOneChild());
915:       assertFalse(node3.isCast());
916:       assertFalse(node3.isContinue());
917:       assertFalse(node3.isWhile());
918:       assertFalse(node3.isDec());
919:       assertFalse(node3.isTypeOf());
920:       assertFalse(node3.isAssign());
921:       assertFalse(node3.isReturn());
922:       assertFalse(node3.isLabel());
923:       assertFalse(node3.isBlock());
924:       assertFalse(node3.isScript());
925:       assertFalse(node3.isStringKey());
926:       assertFalse(node3.isObjectLit());
927:       assertFalse(node3.isAnd());
928:       assertFalse(node3.isNumber());
929:       assertFalse(node3.isNot());
930:       assertEquals((-1), node3.getSourcePosition());
931:       assertFalse(node3.isInstanceOf());
932:       assertFalse(node3.isSetterDef());
933:       assertFalse(node3.isFalse());
934:       assertFalse(node3.isThrow());
935:       assertFalse(node3.isCatch());
936:       assertFalse(node3.isWith());
937:       assertFalse(node3.isHook());
938:       assertFalse(node3.isRegExp());
939:       assertFalse(node3.isThis());
940:       assertFalse(node3.isInc());
941:       assertFalse(node3.isIn());
942:       assertTrue(node3.hasChildren());
943:       assertFalse(node3.isNE());
944:       assertFalse(node3.isIf());
945:       assertFalse(node3.isDelProp());
946:       assertFalse(node3.isFor());
947:       assertTrue(node3.hasOneChild());
948:       assertEquals(1, node3.getChildCount());
949:       assertEquals(4095, node3.getType());
950:       assertFalse(node3.isFunction());
951:       assertFalse(node3.isTry());
952:       assertFalse(node3.isSwitch());
953:       assertFalse(node3.isCase());
954:       assertFalse(node3.isArrayLit());
955:       assertFalse(node3.isString());
956:       assertFalse(node3.isGetterDef());
957:       assertFalse(node3.isDebugger());
958:       assertEquals((-1), node3.getCharno());
959:       assertFalse(node3.isGetProp());
960:       assertFalse(node3.isParamList());
961:       assertFalse(node3.isBreak());
962:       assertFalse(node3.isCall());
963:       assertFalse(node3.isVar());
964:       assertFalse(node3.isComma());
965:       assertFalse(node3.isAdd());
966:       assertFalse(node3.isTrue());
967:       assertFalse(node3.isVoid());
968:       assertFalse(node3.isExprResult());
969:       assertFalse(node3.isDefaultCase());
970:       assertFalse(node3.isDo());
971:       assertFalse(node3.isNew());
972:       assertFalse(node3.isName());
973:       assertFalse(node3.isEmpty());
974:       assertFalse(node3.isNull());
975:       assertFalse(node3.isOr());
976:       
977:       boolean boolean0 = node1.isVarArgs();
978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(53, Node.INPUT_ID);
981:       assertEquals(36, Node.QUOTED_PROP);
982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
983:       assertEquals(4095, Node.COLUMN_MASK);
984:       assertEquals(48, Node.DIRECTIVES);
985:       assertEquals(8, Node.FLAG_NO_THROWS);
986:       assertEquals(39, Node.EMPTY_BLOCK);
987:       assertEquals(56, Node.CHANGE_TIME);
988:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
989:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
990:       assertEquals(47, Node.IS_DISPATCHER);
991:       assertEquals(2, Node.POST_FLAG);
992:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
993:       assertEquals(29, Node.JSDOC_INFO_PROP);
994:       assertEquals(55, Node.INFERRED_FUNCTION);
995:       assertEquals(15, Node.NO_SIDE_EFFECTS);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
999:       assertEquals(52, Node.LENGTH);
1000:       assertEquals(30, Node.VAR_ARGS_NAME);
1001:       assertEquals(40, Node.ORIGINALNAME_PROP);
1002:       assertEquals(57, Node.REFLECTED_OBJECT);
1003:       assertEquals(49, Node.DIRECT_EVAL);
1004:       assertEquals(37, Node.OPT_ARG_NAME);
1005:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1006:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1007:       assertEquals(46, Node.IS_NAMESPACE);
1008:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1009:       assertEquals(50, Node.FREE_CALL);
1010:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1011:       assertEquals(12, Node.COLUMN_BITS);
1012:       assertEquals(32, Node.INCRDECR_PROP);
1013:       assertEquals(1, Node.DECR_FLAG);
1014:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1015:       assertEquals(54, Node.SLASH_V);
1016:       assertEquals(52, Node.LENGTH);
1017:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1018:       assertEquals(57, Node.LAST_PROP);
1019:       assertEquals(1, Node.DECR_FLAG);
1020:       assertEquals(40, Node.ORIGINALNAME_PROP);
1021:       assertEquals(12, Node.COLUMN_BITS);
1022:       assertEquals(30, Node.VAR_ARGS_NAME);
1023:       assertEquals(48, Node.DIRECTIVES);
1024:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1025:       assertEquals(8, Node.FLAG_NO_THROWS);
1026:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1027:       assertEquals(39, Node.EMPTY_BLOCK);
1028:       assertEquals(37, Node.OPT_ARG_NAME);
1029:       assertEquals(29, Node.JSDOC_INFO_PROP);
1030:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1031:       assertEquals(49, Node.DIRECT_EVAL);
1032:       assertEquals(55, Node.INFERRED_FUNCTION);
1033:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1034:       assertEquals(56, Node.CHANGE_TIME);
1035:       assertEquals(57, Node.REFLECTED_OBJECT);
1036:       assertEquals(36, Node.QUOTED_PROP);
1037:       assertEquals(53, Node.INPUT_ID);
1038:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1039:       assertEquals(43, Node.IS_CONSTANT_NAME);
1040:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1041:       assertEquals(4095, Node.COLUMN_MASK);
1042:       assertEquals(47, Node.IS_DISPATCHER);
1043:       assertEquals(2, Node.POST_FLAG);
1044:       assertEquals(32, Node.INCRDECR_PROP);
1045:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1046:       assertEquals(50, Node.FREE_CALL);
1047:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1048:       assertEquals(46, Node.IS_NAMESPACE);
1049:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1050:       assertFalse(node0.equals((Object)node1));
1051:       assertFalse(node0.equals((Object)node3));
1052:       assertFalse(node0.equals((Object)node2));
1053:       assertFalse(node1.equals((Object)node3));
1054:       assertFalse(node1.equals((Object)node2));
1055:       assertFalse(node1.equals((Object)node0));
1056:       assertNotSame(node0, node1);
1057:       assertNotSame(node0, node3);
1058:       assertNotSame(node0, node2);
1059:       assertNotSame(node1, node3);
1060:       assertNotSame(node1, node2);
1061:       assertNotSame(node1, node0);
1062:       assertFalse(boolean0);
1063:       assertFalse(node0.isWith());
1064:       assertFalse(node0.isNot());
1065:       assertFalse(node0.isObjectLit());
1066:       assertFalse(node0.isAnd());
1067:       assertFalse(node0.hasOneChild());
1068:       assertFalse(node0.isGetProp());
1069:       assertFalse(node0.isScript());
1070:       assertFalse(node0.isNumber());
1071:       assertFalse(node0.isFalse());
1072:       assertEquals((-1), node0.getSourcePosition());
1073:       assertFalse(node0.isLabelName());
1074:       assertFalse(node0.isThrow());
1075:       assertFalse(node0.isLabel());
1076:       assertFalse(node0.isContinue());
1077:       assertFalse(node0.isCast());
1078:       assertFalse(node0.isCase());
1079:       assertFalse(node0.isSwitch());
1080:       assertEquals((-1), node0.getCharno());
1081:       assertFalse(node0.isBlock());
1082:       assertFalse(node0.isIn());
1083:       assertFalse(node0.isInc());
1084:       assertFalse(node0.isIf());
1085:       assertFalse(node0.isThis());
1086:       assertFalse(node0.isHook());
1087:       assertFalse(node0.isNE());
1088:       assertFalse(node0.isFor());
1089:       assertEquals((-1), node0.getLineno());
1090:       assertFalse(node0.isCatch());
1091:       assertFalse(node0.hasMoreThanOneChild());
1092:       assertFalse(node0.isInstanceOf());
1093:       assertFalse(node0.isDefaultCase());
1094:       assertFalse(node0.isRegExp());
1095:       assertFalse(node0.isTrue());
1096:       assertFalse(node0.isDebugger());
1097:       assertFalse(node0.isTry());
1098:       assertFalse(node0.isSetterDef());
1099:       assertFalse(node0.isEmpty());
1100:       assertFalse(node0.isGetterDef());
1101:       assertFalse(node0.isParamList());
1102:       assertFalse(node0.isStringKey());
1103:       assertFalse(node0.isVar());
1104:       assertEquals(0, node0.getChildCount());
1105:       assertFalse(node0.isFunction());
1106:       assertFalse(node0.isArrayLit());
1107:       assertEquals((-125), node0.getType());
1108:       assertFalse(node0.isWhile());
1109:       assertFalse(node0.isString());
1110:       assertFalse(node0.isDo());
1111:       assertFalse(node0.isAssignAdd());
1112:       assertFalse(node0.isNew());
1113:       assertFalse(node0.isOr());
1114:       assertFalse(node0.isAdd());
1115:       assertFalse(node0.isBreak());
1116:       assertFalse(node0.hasChildren());
1117:       assertFalse(node0.isName());
1118:       assertFalse(node0.isDec());
1119:       assertFalse(node0.isTypeOf());
1120:       assertFalse(node0.isAssign());
1121:       assertFalse(node0.isDelProp());
1122:       assertFalse(node0.isComma());
1123:       assertFalse(node0.isNull());
1124:       assertFalse(node0.isReturn());
1125:       assertFalse(node0.isVoid());
1126:       assertFalse(node0.isCall());
1127:       assertFalse(node0.isExprResult());
1128:       assertFalse(node0.isGetElem());
1129:       assertFalse(node1.isDo());
1130:       assertFalse(node1.isContinue());
1131:       assertFalse(node1.hasMoreThanOneChild());
1132:       assertFalse(node1.isAdd());
1133:       assertFalse(node1.isOr());
1134:       assertEquals((-1), node1.getLineno());
1135:       assertFalse(node1.isName());
1136:       assertFalse(node1.isStringKey());
1137:       assertFalse(node1.isNull());
1138:       assertFalse(node1.isLabelName());
1139:       assertFalse(node1.isSetterDef());
1140:       assertFalse(node1.isCast());
1141:       assertEquals(0, node1.getChildCount());
1142:       assertFalse(node1.isLabel());
1143:       assertFalse(node1.isNew());
1144:       assertFalse(node1.isAssignAdd());
1145:       assertFalse(node1.isVar());
1146:       assertFalse(node1.isRegExp());
1147:       assertFalse(node1.isScript());
1148:       assertFalse(node1.isWith());
1149:       assertFalse(node1.isInstanceOf());
1150:       assertFalse(node1.isCatch());
1151:       assertFalse(node1.isArrayLit());
1152:       assertFalse(node1.isParamList());
1153:       assertFalse(node1.isGetterDef());
1154:       assertFalse(node1.isIf());
1155:       assertFalse(node1.isNumber());
1156:       assertFalse(node1.isHook());
1157:       assertFalse(node1.isTry());
1158:       assertFalse(node1.hasOneChild());
1159:       assertFalse(node1.isBlock());
1160:       assertFalse(node1.isThis());
1161:       assertFalse(node1.isFor());
1162:       assertFalse(node1.isCase());
1163:       assertFalse(node1.isInc());
1164:       assertFalse(node1.isString());
1165:       assertFalse(node1.isIn());
1166:       assertEquals((-1), node1.getCharno());
1167:       assertFalse(node1.isNE());
1168:       assertFalse(node1.isSwitch());
1169:       assertFalse(node1.isFalse());
1170:       assertFalse(node1.isEmpty());
1171:       assertFalse(node1.isThrow());
1172:       assertFalse(node1.isDefaultCase());
1173:       assertFalse(node1.isNot());
1174:       assertFalse(node1.isObjectLit());
1175:       assertFalse(node1.isExprResult());
1176:       assertFalse(node1.isFunction());
1177:       assertEquals((-125), node1.getType());
1178:       assertFalse(node1.isAnd());
1179:       assertFalse(node1.isDebugger());
1180:       assertFalse(node1.isVoid());
1181:       assertFalse(node1.isTrue());
1182:       assertFalse(node1.isBreak());
1183:       assertFalse(node1.hasChildren());
1184:       assertFalse(node1.isDelProp());
1185:       assertFalse(node1.isTypeOf());
1186:       assertFalse(node1.isAssign());
1187:       assertFalse(node1.isDec());
1188:       assertFalse(node1.isComma());
1189:       assertEquals((-1), node1.getSourcePosition());
1190:       assertFalse(node1.isGetProp());
1191:       assertFalse(node1.isGetElem());
1192:       assertFalse(node1.isCall());
1193:       assertFalse(node1.isReturn());
1194:       assertFalse(node1.isWhile());
1195:       
1196:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
1197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1198:       assertEquals(43, Node.IS_CONSTANT_NAME);
1199:       assertEquals(53, Node.INPUT_ID);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1202:       assertEquals(4095, Node.COLUMN_MASK);
1203:       assertEquals(48, Node.DIRECTIVES);
1204:       assertEquals(8, Node.FLAG_NO_THROWS);
1205:       assertEquals(39, Node.EMPTY_BLOCK);
1206:       assertEquals(56, Node.CHANGE_TIME);
1207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1209:       assertEquals(47, Node.IS_DISPATCHER);
1210:       assertEquals(2, Node.POST_FLAG);
1211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1212:       assertEquals(29, Node.JSDOC_INFO_PROP);
1213:       assertEquals(55, Node.INFERRED_FUNCTION);
1214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1215:       assertEquals(57, Node.LAST_PROP);
1216:       assertEquals(54, Node.SLASH_V);
1217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1218:       assertEquals(52, Node.LENGTH);
1219:       assertEquals(30, Node.VAR_ARGS_NAME);
1220:       assertEquals(40, Node.ORIGINALNAME_PROP);
1221:       assertEquals(57, Node.REFLECTED_OBJECT);
1222:       assertEquals(49, Node.DIRECT_EVAL);
1223:       assertEquals(37, Node.OPT_ARG_NAME);
1224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1226:       assertEquals(46, Node.IS_NAMESPACE);
1227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1228:       assertEquals(50, Node.FREE_CALL);
1229:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1230:       assertEquals(12, Node.COLUMN_BITS);
1231:       assertEquals(32, Node.INCRDECR_PROP);
1232:       assertEquals(1, Node.DECR_FLAG);
1233:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1234:       assertEquals(54, Node.SLASH_V);
1235:       assertEquals(52, Node.LENGTH);
1236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1237:       assertEquals(57, Node.LAST_PROP);
1238:       assertEquals(1, Node.DECR_FLAG);
1239:       assertEquals(40, Node.ORIGINALNAME_PROP);
1240:       assertEquals(12, Node.COLUMN_BITS);
1241:       assertEquals(30, Node.VAR_ARGS_NAME);
1242:       assertEquals(48, Node.DIRECTIVES);
1243:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1244:       assertEquals(8, Node.FLAG_NO_THROWS);
1245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1246:       assertEquals(39, Node.EMPTY_BLOCK);
1247:       assertEquals(37, Node.OPT_ARG_NAME);
1248:       assertEquals(29, Node.JSDOC_INFO_PROP);
1249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1250:       assertEquals(49, Node.DIRECT_EVAL);
1251:       assertEquals(55, Node.INFERRED_FUNCTION);
1252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1253:       assertEquals(56, Node.CHANGE_TIME);
1254:       assertEquals(57, Node.REFLECTED_OBJECT);
1255:       assertEquals(36, Node.QUOTED_PROP);
1256:       assertEquals(53, Node.INPUT_ID);
1257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1258:       assertEquals(43, Node.IS_CONSTANT_NAME);
1259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1260:       assertEquals(4095, Node.COLUMN_MASK);
1261:       assertEquals(47, Node.IS_DISPATCHER);
1262:       assertEquals(2, Node.POST_FLAG);
1263:       assertEquals(32, Node.INCRDECR_PROP);
1264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1265:       assertEquals(50, Node.FREE_CALL);
1266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1267:       assertEquals(46, Node.IS_NAMESPACE);
1268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1270:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1271:       assertEquals(29, Node.JSDOC_INFO_PROP);
1272:       assertEquals(53, Node.INPUT_ID);
1273:       assertEquals(2, Node.POST_FLAG);
1274:       assertEquals(47, Node.IS_DISPATCHER);
1275:       assertEquals(55, Node.INFERRED_FUNCTION);
1276:       assertEquals(4095, Node.COLUMN_MASK);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(49, Node.DIRECT_EVAL);
1279:       assertEquals(48, Node.DIRECTIVES);
1280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1281:       assertEquals(37, Node.OPT_ARG_NAME);
1282:       assertEquals(8, Node.FLAG_NO_THROWS);
1283:       assertEquals(39, Node.EMPTY_BLOCK);
1284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1285:       assertEquals(56, Node.CHANGE_TIME);
1286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1287:       assertEquals(52, Node.LENGTH);
1288:       assertEquals(36, Node.QUOTED_PROP);
1289:       assertEquals(40, Node.ORIGINALNAME_PROP);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(57, Node.LAST_PROP);
1294:       assertEquals(30, Node.VAR_ARGS_NAME);
1295:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1296:       assertEquals(12, Node.COLUMN_BITS);
1297:       assertEquals(46, Node.IS_NAMESPACE);
1298:       assertEquals(32, Node.INCRDECR_PROP);
1299:       assertEquals(1, Node.DECR_FLAG);
1300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1301:       assertEquals(54, Node.SLASH_V);
1302:       assertEquals(43, Node.IS_CONSTANT_NAME);
1303:       assertEquals(50, Node.FREE_CALL);
1304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1305:       assertNotNull(node_NodeMismatch0);
1306:       assertFalse(node0.equals((Object)node1));
1307:       assertFalse(node0.equals((Object)node3));
1308:       assertFalse(node0.equals((Object)node2));
1309:       assertFalse(node1.equals((Object)node3));
1310:       assertFalse(node1.equals((Object)node2));
1311:       assertFalse(node1.equals((Object)node0));
1312:       assertFalse(node2.equals((Object)node1));
1313:       assertFalse(node2.equals((Object)node0));
1314:       assertNotSame(node0, node1);
1315:       assertNotSame(node0, node3);
1316:       assertNotSame(node0, node2);
1317:       assertNotSame(node1, node3);
1318:       assertNotSame(node1, node2);
1319:       assertNotSame(node1, node0);
1320:       assertSame(node2, node3);
1321:       assertNotSame(node2, node1);
1322:       assertNotSame(node2, node0);
1323:       assertFalse(node0.isWith());
1324:       assertFalse(node0.isNot());
1325:       assertFalse(node0.isObjectLit());
1326:       assertFalse(node0.isAnd());
1327:       assertFalse(node0.hasOneChild());
1328:       assertFalse(node0.isGetProp());
1329:       assertFalse(node0.isScript());
1330:       assertFalse(node0.isNumber());
1331:       assertFalse(node0.isFalse());
1332:       assertEquals((-1), node0.getSourcePosition());
1333:       assertFalse(node0.isLabelName());
1334:       assertFalse(node0.isThrow());
1335:       assertFalse(node0.isLabel());
1336:       assertFalse(node0.isContinue());
1337:       assertFalse(node0.isCast());
1338:       assertFalse(node0.isCase());
1339:       assertFalse(node0.isSwitch());
1340:       assertEquals((-1), node0.getCharno());
1341:       assertFalse(node0.isBlock());
1342:       assertFalse(node0.isIn());
1343:       assertFalse(node0.isInc());
1344:       assertFalse(node0.isIf());
1345:       assertFalse(node0.isThis());
1346:       assertFalse(node0.isHook());
1347:       assertFalse(node0.isNE());
1348:       assertFalse(node0.isFor());
1349:       assertEquals((-1), node0.getLineno());
1350:       assertFalse(node0.isCatch());
1351:       assertFalse(node0.hasMoreThanOneChild());
1352:       assertFalse(node0.isInstanceOf());
1353:       assertFalse(node0.isDefaultCase());
1354:       assertFalse(node0.isRegExp());
1355:       assertFalse(node0.isTrue());
1356:       assertFalse(node0.isDebugger());
1357:       assertFalse(node0.isTry());
1358:       assertFalse(node0.isSetterDef());
1359:       assertFalse(node0.isEmpty());
1360:       assertFalse(node0.isGetterDef());
1361:       assertFalse(node0.isParamList());
1362:       assertFalse(node0.isStringKey());
1363:       assertFalse(node0.isVar());
1364:       assertEquals(0, node0.getChildCount());
1365:       assertFalse(node0.isFunction());
1366:       assertFalse(node0.isArrayLit());
1367:       assertEquals((-125), node0.getType());
1368:       assertFalse(node0.isWhile());
1369:       assertFalse(node0.isString());
1370:       assertFalse(node0.isDo());
1371:       assertFalse(node0.isAssignAdd());
1372:       assertFalse(node0.isNew());
1373:       assertFalse(node0.isOr());
1374:       assertFalse(node0.isAdd());
1375:       assertFalse(node0.isBreak());
1376:       assertFalse(node0.hasChildren());
1377:       assertFalse(node0.isName());
1378:       assertFalse(node0.isDec());
1379:       assertFalse(node0.isTypeOf());
1380:       assertFalse(node0.isAssign());
1381:       assertFalse(node0.isDelProp());
1382:       assertFalse(node0.isComma());
1383:       assertFalse(node0.isNull());
1384:       assertFalse(node0.isReturn());
1385:       assertFalse(node0.isVoid());
1386:       assertFalse(node0.isCall());
1387:       assertFalse(node0.isExprResult());
1388:       assertFalse(node0.isGetElem());
1389:       assertFalse(node1.isDo());
1390:       assertFalse(node1.isContinue());
1391:       assertFalse(node1.hasMoreThanOneChild());
1392:       assertFalse(node1.isAdd());
1393:       assertFalse(node1.isOr());
1394:       assertEquals((-1), node1.getLineno());
1395:       assertFalse(node1.isName());
1396:       assertFalse(node1.isStringKey());
1397:       assertFalse(node1.isNull());
1398:       assertFalse(node1.isLabelName());
1399:       assertFalse(node1.isSetterDef());
1400:       assertFalse(node1.isCast());
1401:       assertEquals(0, node1.getChildCount());
1402:       assertFalse(node1.isLabel());
1403:       assertFalse(node1.isNew());
1404:       assertFalse(node1.isAssignAdd());
1405:       assertFalse(node1.isVar());
1406:       assertFalse(node1.isRegExp());
1407:       assertFalse(node1.isScript());
1408:       assertFalse(node1.isWith());
1409:       assertFalse(node1.isInstanceOf());
1410:       assertFalse(node1.isCatch());
1411:       assertFalse(node1.isArrayLit());
1412:       assertFalse(node1.isParamList());
1413:       assertFalse(node1.isGetterDef());
1414:       assertFalse(node1.isIf());
1415:       assertFalse(node1.isNumber());
1416:       assertFalse(node1.isHook());
1417:       assertFalse(node1.isTry());
1418:       assertFalse(node1.hasOneChild());
1419:       assertFalse(node1.isBlock());
1420:       assertFalse(node1.isThis());
1421:       assertFalse(node1.isFor());
1422:       assertFalse(node1.isCase());
1423:       assertFalse(node1.isInc());
1424:       assertFalse(node1.isString());
1425:       assertFalse(node1.isIn());
1426:       assertEquals((-1), node1.getCharno());
1427:       assertFalse(node1.isNE());
1428:       assertFalse(node1.isSwitch());
1429:       assertFalse(node1.isFalse());
1430:       assertFalse(node1.isEmpty());
1431:       assertFalse(node1.isThrow());
1432:       assertFalse(node1.isDefaultCase());
1433:       assertFalse(node1.isNot());
1434:       assertFalse(node1.isObjectLit());
1435:       assertFalse(node1.isExprResult());
1436:       assertFalse(node1.isFunction());
1437:       assertEquals((-125), node1.getType());
1438:       assertFalse(node1.isAnd());
1439:       assertFalse(node1.isDebugger());
1440:       assertFalse(node1.isVoid());
1441:       assertFalse(node1.isTrue());
1442:       assertFalse(node1.isBreak());
1443:       assertFalse(node1.hasChildren());
1444:       assertFalse(node1.isDelProp());
1445:       assertFalse(node1.isTypeOf());
1446:       assertFalse(node1.isAssign());
1447:       assertFalse(node1.isDec());
1448:       assertFalse(node1.isComma());
1449:       assertEquals((-1), node1.getSourcePosition());
1450:       assertFalse(node1.isGetProp());
1451:       assertFalse(node1.isGetElem());
1452:       assertFalse(node1.isCall());
1453:       assertFalse(node1.isReturn());
1454:       assertFalse(node1.isWhile());
1455:       assertFalse(node2.isScript());
1456:       assertFalse(node2.isExprResult());
1457:       assertFalse(node2.isCast());
1458:       assertFalse(node2.isLabelName());
1459:       assertFalse(node2.isNot());
1460:       assertFalse(node2.isGetElem());
1461:       assertFalse(node2.isObjectLit());
1462:       assertEquals((-1), node2.getSourcePosition());
1463:       assertFalse(node2.isAnd());
1464:       assertFalse(node2.isAssignAdd());
1465:       assertFalse(node2.isOr());
1466:       assertFalse(node2.isLabel());
1467:       assertFalse(node2.isContinue());
1468:       assertFalse(node2.isDo());
1469:       assertFalse(node2.isFalse());
1470:       assertFalse(node2.isThrow());
1471:       assertFalse(node2.isAdd());
1472:       assertFalse(node2.isNew());
1473:       assertFalse(node2.isCall());
1474:       assertFalse(node2.isString());
1475:       assertFalse(node2.isName());
1476:       assertFalse(node2.isBreak());
1477:       assertFalse(node2.isNull());
1478:       assertFalse(node2.isGetProp());
1479:       assertFalse(node2.isReturn());
1480:       assertFalse(node2.isComma());
1481:       assertFalse(node2.isTypeOf());
1482:       assertFalse(node2.isAssign());
1483:       assertTrue(node2.hasOneChild());
1484:       assertFalse(node2.isDec());
1485:       assertFalse(node2.isWhile());
1486:       assertFalse(node2.isTry());
1487:       assertFalse(node2.isDebugger());
1488:       assertFalse(node2.isVoid());
1489:       assertEquals(4095, node2.getType());
1490:       assertFalse(node2.isArrayLit());
1491:       assertFalse(node2.isRegExp());
1492:       assertFalse(node2.isFunction());
1493:       assertFalse(node2.isDelProp());
1494:       assertFalse(node2.isGetterDef());
1495:       assertFalse(node2.isNE());
1496:       assertFalse(node2.isTrue());
1497:       assertFalse(node2.isIf());
1498:       assertFalse(node2.isSetterDef());
1499:       assertFalse(node2.isIn());
1500:       assertFalse(node2.isEmpty());
1501:       assertFalse(node2.isVar());
1502:       assertFalse(node2.isDefaultCase());
1503:       assertFalse(node2.isBlock());
1504:       assertEquals((-1), node2.getCharno());
1505:       assertFalse(node2.isInc());
1506:       assertFalse(node2.isSwitch());
1507:       assertFalse(node2.isParamList());
1508:       assertFalse(node2.isStringKey());
1509:       assertTrue(node2.hasChildren());
1510:       assertEquals(1, node2.getChildCount());
1511:       assertEquals((-1), node2.getLineno());
1512:       assertFalse(node2.hasMoreThanOneChild());
1513:       assertFalse(node2.isNumber());
1514:       assertFalse(node2.isInstanceOf());
1515:       assertFalse(node2.isCatch());
1516:       assertFalse(node2.isCase());
1517:       assertFalse(node2.isFor());
1518:       assertFalse(node2.isWith());
1519:       assertFalse(node2.isHook());
1520:       assertFalse(node2.isThis());
1521:       
1522:       boolean boolean1 = node2.mayMutateArguments();
1523:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1524:       assertEquals(43, Node.IS_CONSTANT_NAME);
1525:       assertEquals(53, Node.INPUT_ID);
1526:       assertEquals(36, Node.QUOTED_PROP);
1527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1528:       assertEquals(4095, Node.COLUMN_MASK);
1529:       assertEquals(48, Node.DIRECTIVES);
1530:       assertEquals(8, Node.FLAG_NO_THROWS);
1531:       assertEquals(39, Node.EMPTY_BLOCK);
1532:       assertEquals(56, Node.CHANGE_TIME);
1533:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1535:       assertEquals(47, Node.IS_DISPATCHER);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1538:       assertEquals(29, Node.JSDOC_INFO_PROP);
1539:       assertEquals(55, Node.INFERRED_FUNCTION);
1540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1541:       assertEquals(57, Node.LAST_PROP);
1542:       assertEquals(54, Node.SLASH_V);
1543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1544:       assertEquals(52, Node.LENGTH);
1545:       assertEquals(30, Node.VAR_ARGS_NAME);
1546:       assertEquals(40, Node.ORIGINALNAME_PROP);
1547:       assertEquals(57, Node.REFLECTED_OBJECT);
1548:       assertEquals(49, Node.DIRECT_EVAL);
1549:       assertEquals(37, Node.OPT_ARG_NAME);
1550:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1551:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1552:       assertEquals(46, Node.IS_NAMESPACE);
1553:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1554:       assertEquals(50, Node.FREE_CALL);
1555:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1556:       assertEquals(12, Node.COLUMN_BITS);
1557:       assertEquals(32, Node.INCRDECR_PROP);
1558:       assertEquals(1, Node.DECR_FLAG);
1559:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1561:       assertEquals(29, Node.JSDOC_INFO_PROP);
1562:       assertEquals(53, Node.INPUT_ID);
1563:       assertEquals(2, Node.POST_FLAG);
1564:       assertEquals(47, Node.IS_DISPATCHER);
1565:       assertEquals(55, Node.INFERRED_FUNCTION);
1566:       assertEquals(4095, Node.COLUMN_MASK);
1567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1568:       assertEquals(49, Node.DIRECT_EVAL);
1569:       assertEquals(48, Node.DIRECTIVES);
1570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1571:       assertEquals(37, Node.OPT_ARG_NAME);
1572:       assertEquals(8, Node.FLAG_NO_THROWS);
1573:       assertEquals(39, Node.EMPTY_BLOCK);
1574:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1575:       assertEquals(56, Node.CHANGE_TIME);
1576:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1577:       assertEquals(52, Node.LENGTH);
1578:       assertEquals(36, Node.QUOTED_PROP);
1579:       assertEquals(40, Node.ORIGINALNAME_PROP);
1580:       assertEquals(57, Node.REFLECTED_OBJECT);
1581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1582:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1583:       assertEquals(57, Node.LAST_PROP);
1584:       assertEquals(30, Node.VAR_ARGS_NAME);
1585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1586:       assertEquals(12, Node.COLUMN_BITS);
1587:       assertEquals(46, Node.IS_NAMESPACE);
1588:       assertEquals(32, Node.INCRDECR_PROP);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1591:       assertEquals(54, Node.SLASH_V);
1592:       assertEquals(43, Node.IS_CONSTANT_NAME);
1593:       assertEquals(50, Node.FREE_CALL);
1594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1595:       assertFalse(node0.equals((Object)node1));
1596:       assertFalse(node0.equals((Object)node3));
1597:       assertFalse(node0.equals((Object)node2));
1598:       assertFalse(node2.equals((Object)node1));
1599:       assertFalse(node2.equals((Object)node0));
1600:       assertFalse(boolean1 == boolean0);
1601:       assertNotSame(node0, node1);
1602:       assertNotSame(node0, node3);
1603:       assertNotSame(node0, node2);
1604:       assertSame(node2, node3);
1605:       assertNotSame(node2, node1);
1606:       assertNotSame(node2, node0);
1607:       assertTrue(boolean1);
1608:       assertFalse(node0.isWith());
1609:       assertFalse(node0.isNot());
1610:       assertFalse(node0.isObjectLit());
1611:       assertFalse(node0.isAnd());
1612:       assertFalse(node0.hasOneChild());
1613:       assertFalse(node0.isGetProp());
1614:       assertFalse(node0.isScript());
1615:       assertFalse(node0.isNumber());
1616:       assertFalse(node0.isFalse());
1617:       assertEquals((-1), node0.getSourcePosition());
1618:       assertFalse(node0.isLabelName());
1619:       assertFalse(node0.isThrow());
1620:       assertFalse(node0.isLabel());
1621:       assertFalse(node0.isContinue());
1622:       assertFalse(node0.isCast());
1623:       assertFalse(node0.isCase());
1624:       assertFalse(node0.isSwitch());
1625:       assertEquals((-1), node0.getCharno());
1626:       assertFalse(node0.isBlock());
1627:       assertFalse(node0.isIn());
1628:       assertFalse(node0.isInc());
1629:       assertFalse(node0.isIf());
1630:       assertFalse(node0.isThis());
1631:       assertFalse(node0.isHook());
1632:       assertFalse(node0.isNE());
1633:       assertFalse(node0.isFor());
1634:       assertEquals((-1), node0.getLineno());
1635:       assertFalse(node0.isCatch());
1636:       assertFalse(node0.hasMoreThanOneChild());
1637:       assertFalse(node0.isInstanceOf());
1638:       assertFalse(node0.isDefaultCase());
1639:       assertFalse(node0.isRegExp());
1640:       assertFalse(node0.isTrue());
1641:       assertFalse(node0.isDebugger());
1642:       assertFalse(node0.isTry());
1643:       assertFalse(node0.isSetterDef());
1644:       assertFalse(node0.isEmpty());
1645:       assertFalse(node0.isGetterDef());
1646:       assertFalse(node0.isParamList());
1647:       assertFalse(node0.isStringKey());
1648:       assertFalse(node0.isVar());
1649:       assertEquals(0, node0.getChildCount());
1650:       assertFalse(node0.isFunction());
1651:       assertFalse(node0.isArrayLit());
1652:       assertEquals((-125), node0.getType());
1653:       assertFalse(node0.isWhile());
1654:       assertFalse(node0.isString());
1655:       assertFalse(node0.isDo());
1656:       assertFalse(node0.isAssignAdd());
1657:       assertFalse(node0.isNew());
1658:       assertFalse(node0.isOr());
1659:       assertFalse(node0.isAdd());
1660:       assertFalse(node0.isBreak());
1661:       assertFalse(node0.hasChildren());
1662:       assertFalse(node0.isName());
1663:       assertFalse(node0.isDec());
1664:       assertFalse(node0.isTypeOf());
1665:       assertFalse(node0.isAssign());
1666:       assertFalse(node0.isDelProp());
1667:       assertFalse(node0.isComma());
1668:       assertFalse(node0.isNull());
1669:       assertFalse(node0.isReturn());
1670:       assertFalse(node0.isVoid());
1671:       assertFalse(node0.isCall());
1672:       assertFalse(node0.isExprResult());
1673:       assertFalse(node0.isGetElem());
1674:       assertFalse(node2.isScript());
1675:       assertFalse(node2.isExprResult());
1676:       assertFalse(node2.isCast());
1677:       assertFalse(node2.isLabelName());
1678:       assertFalse(node2.isNot());
1679:       assertFalse(node2.isGetElem());
1680:       assertFalse(node2.isObjectLit());
1681:       assertEquals((-1), node2.getSourcePosition());
1682:       assertFalse(node2.isAnd());
1683:       assertFalse(node2.isAssignAdd());
1684:       assertFalse(node2.isOr());
1685:       assertFalse(node2.isLabel());
1686:       assertFalse(node2.isContinue());
1687:       assertFalse(node2.isDo());
1688:       assertFalse(node2.isFalse());
1689:       assertFalse(node2.isThrow());
1690:       assertFalse(node2.isAdd());
1691:       assertFalse(node2.isNew());
1692:       assertFalse(node2.isCall());
1693:       assertFalse(node2.isString());
1694:       assertFalse(node2.isName());
1695:       assertFalse(node2.isBreak());
1696:       assertFalse(node2.isNull());
1697:       assertFalse(node2.isGetProp());
1698:       assertFalse(node2.isReturn());
1699:       assertFalse(node2.isComma());
1700:       assertFalse(node2.isTypeOf());
1701:       assertFalse(node2.isAssign());
1702:       assertTrue(node2.hasOneChild());
1703:       assertFalse(node2.isDec());
1704:       assertFalse(node2.isWhile());
1705:       assertFalse(node2.isTry());
1706:       assertFalse(node2.isDebugger());
1707:       assertFalse(node2.isVoid());
1708:       assertEquals(4095, node2.getType());
1709:       assertFalse(node2.isArrayLit());
1710:       assertFalse(node2.isRegExp());
1711:       assertFalse(node2.isFunction());
1712:       assertFalse(node2.isDelProp());
1713:       assertFalse(node2.isGetterDef());
1714:       assertFalse(node2.isNE());
1715:       assertFalse(node2.isTrue());
1716:       assertFalse(node2.isIf());
1717:       assertFalse(node2.isSetterDef());
1718:       assertFalse(node2.isIn());
1719:       assertFalse(node2.isEmpty());
1720:       assertFalse(node2.isVar());
1721:       assertFalse(node2.isDefaultCase());
1722:       assertFalse(node2.isBlock());
1723:       assertEquals((-1), node2.getCharno());
1724:       assertFalse(node2.isInc());
1725:       assertFalse(node2.isSwitch());
1726:       assertFalse(node2.isParamList());
1727:       assertFalse(node2.isStringKey());
1728:       assertTrue(node2.hasChildren());
1729:       assertEquals(1, node2.getChildCount());
1730:       assertEquals((-1), node2.getLineno());
1731:       assertFalse(node2.hasMoreThanOneChild());
1732:       assertFalse(node2.isNumber());
1733:       assertFalse(node2.isInstanceOf());
1734:       assertFalse(node2.isCatch());
1735:       assertFalse(node2.isCase());
1736:       assertFalse(node2.isFor());
1737:       assertFalse(node2.isWith());
1738:       assertFalse(node2.isHook());
1739:       assertFalse(node2.isThis());
1740:       
1741:       String string0 = node2.getQualifiedName();
1742:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1743:       assertEquals(43, Node.IS_CONSTANT_NAME);
1744:       assertEquals(53, Node.INPUT_ID);
1745:       assertEquals(36, Node.QUOTED_PROP);
1746:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1747:       assertEquals(4095, Node.COLUMN_MASK);
1748:       assertEquals(48, Node.DIRECTIVES);
1749:       assertEquals(8, Node.FLAG_NO_THROWS);
1750:       assertEquals(39, Node.EMPTY_BLOCK);
1751:       assertEquals(56, Node.CHANGE_TIME);
1752:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1753:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1754:       assertEquals(47, Node.IS_DISPATCHER);
1755:       assertEquals(2, Node.POST_FLAG);
1756:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1757:       assertEquals(29, Node.JSDOC_INFO_PROP);
1758:       assertEquals(55, Node.INFERRED_FUNCTION);
1759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1760:       assertEquals(57, Node.LAST_PROP);
1761:       assertEquals(54, Node.SLASH_V);
1762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1763:       assertEquals(52, Node.LENGTH);
1764:       assertEquals(30, Node.VAR_ARGS_NAME);
1765:       assertEquals(40, Node.ORIGINALNAME_PROP);
1766:       assertEquals(57, Node.REFLECTED_OBJECT);
1767:       assertEquals(49, Node.DIRECT_EVAL);
1768:       assertEquals(37, Node.OPT_ARG_NAME);
1769:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1771:       assertEquals(46, Node.IS_NAMESPACE);
1772:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1773:       assertEquals(50, Node.FREE_CALL);
1774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1775:       assertEquals(12, Node.COLUMN_BITS);
1776:       assertEquals(32, Node.INCRDECR_PROP);
1777:       assertEquals(1, Node.DECR_FLAG);
1778:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1779:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1780:       assertEquals(29, Node.JSDOC_INFO_PROP);
1781:       assertEquals(53, Node.INPUT_ID);
1782:       assertEquals(2, Node.POST_FLAG);
1783:       assertEquals(47, Node.IS_DISPATCHER);
1784:       assertEquals(55, Node.INFERRED_FUNCTION);
1785:       assertEquals(4095, Node.COLUMN_MASK);
1786:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1787:       assertEquals(49, Node.DIRECT_EVAL);
1788:       assertEquals(48, Node.DIRECTIVES);
1789:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1790:       assertEquals(37, Node.OPT_ARG_NAME);
1791:       assertEquals(8, Node.FLAG_NO_THROWS);
1792:       assertEquals(39, Node.EMPTY_BLOCK);
1793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1794:       assertEquals(56, Node.CHANGE_TIME);
1795:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1796:       assertEquals(52, Node.LENGTH);
1797:       assertEquals(36, Node.QUOTED_PROP);
1798:       assertEquals(40, Node.ORIGINALNAME_PROP);
1799:       assertEquals(57, Node.REFLECTED_OBJECT);
1800:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1801:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1802:       assertEquals(57, Node.LAST_PROP);
1803:       assertEquals(30, Node.VAR_ARGS_NAME);
1804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1805:       assertEquals(12, Node.COLUMN_BITS);
1806:       assertEquals(46, Node.IS_NAMESPACE);
1807:       assertEquals(32, Node.INCRDECR_PROP);
1808:       assertEquals(1, Node.DECR_FLAG);
1809:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1810:       assertEquals(54, Node.SLASH_V);
1811:       assertEquals(43, Node.IS_CONSTANT_NAME);
1812:       assertEquals(50, Node.FREE_CALL);
1813:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1814:       assertNull(string0);
1815:       assertFalse(node0.equals((Object)node1));
1816:       assertFalse(node0.equals((Object)node3));
1817:       assertFalse(node0.equals((Object)node2));
1818:       assertFalse(node2.equals((Object)node1));
1819:       assertFalse(node2.equals((Object)node0));
1820:       assertNotSame(node0, node1);
1821:       assertNotSame(node0, node3);
1822:       assertNotSame(node0, node2);
1823:       assertSame(node2, node3);
1824:       assertNotSame(node2, node1);
1825:       assertNotSame(node2, node0);
1826:       assertFalse(node0.isWith());
1827:       assertFalse(node0.isNot());
1828:       assertFalse(node0.isObjectLit());
1829:       assertFalse(node0.isAnd());
1830:       assertFalse(node0.hasOneChild());
1831:       assertFalse(node0.isGetProp());
1832:       assertFalse(node0.isScript());
1833:       assertFalse(node0.isNumber());
1834:       assertFalse(node0.isFalse());
1835:       assertEquals((-1), node0.getSourcePosition());
1836:       assertFalse(node0.isLabelName());
1837:       assertFalse(node0.isThrow());
1838:       assertFalse(node0.isLabel());
1839:       assertFalse(node0.isContinue());
1840:       assertFalse(node0.isCast());
1841:       assertFalse(node0.isCase());
1842:       assertFalse(node0.isSwitch());
1843:       assertEquals((-1), node0.getCharno());
1844:       assertFalse(node0.isBlock());
1845:       assertFalse(node0.isIn());
1846:       assertFalse(node0.isInc());
1847:       assertFalse(node0.isIf());
1848:       assertFalse(node0.isThis());
1849:       assertFalse(node0.isHook());
1850:       assertFalse(node0.isNE());
1851:       assertFalse(node0.isFor());
1852:       assertEquals((-1), node0.getLineno());
1853:       assertFalse(node0.isCatch());
1854:       assertFalse(node0.hasMoreThanOneChild());
1855:       assertFalse(node0.isInstanceOf());
1856:       assertFalse(node0.isDefaultCase());
1857:       assertFalse(node0.isRegExp());
1858:       assertFalse(node0.isTrue());
1859:       assertFalse(node0.isDebugger());
1860:       assertFalse(node0.isTry());
1861:       assertFalse(node0.isSetterDef());
1862:       assertFalse(node0.isEmpty());
1863:       assertFalse(node0.isGetterDef());
1864:       assertFalse(node0.isParamList());
1865:       assertFalse(node0.isStringKey());
1866:       assertFalse(node0.isVar());
1867:       assertEquals(0, node0.getChildCount());
1868:       assertFalse(node0.isFunction());
1869:       assertFalse(node0.isArrayLit());
1870:       assertEquals((-125), node0.getType());
1871:       assertFalse(node0.isWhile());
1872:       assertFalse(node0.isString());
1873:       assertFalse(node0.isDo());
1874:       assertFalse(node0.isAssignAdd());
1875:       assertFalse(node0.isNew());
1876:       assertFalse(node0.isOr());
1877:       assertFalse(node0.isAdd());
1878:       assertFalse(node0.isBreak());
1879:       assertFalse(node0.hasChildren());
1880:       assertFalse(node0.isName());
1881:       assertFalse(node0.isDec());
1882:       assertFalse(node0.isTypeOf());
1883:       assertFalse(node0.isAssign());
1884:       assertFalse(node0.isDelProp());
1885:       assertFalse(node0.isComma());
1886:       assertFalse(node0.isNull());
1887:       assertFalse(node0.isReturn());
1888:       assertFalse(node0.isVoid());
1889:       assertFalse(node0.isCall());
1890:       assertFalse(node0.isExprResult());
1891:       assertFalse(node0.isGetElem());
1892:       assertFalse(node2.isScript());
1893:       assertFalse(node2.isExprResult());
1894:       assertFalse(node2.isCast());
1895:       assertFalse(node2.isLabelName());
1896:       assertFalse(node2.isNot());
1897:       assertFalse(node2.isGetElem());
1898:       assertFalse(node2.isObjectLit());
1899:       assertEquals((-1), node2.getSourcePosition());
1900:       assertFalse(node2.isAnd());
1901:       assertFalse(node2.isAssignAdd());
1902:       assertFalse(node2.isOr());
1903:       assertFalse(node2.isLabel());
1904:       assertFalse(node2.isContinue());
1905:       assertFalse(node2.isDo());
1906:       assertFalse(node2.isFalse());
1907:       assertFalse(node2.isThrow());
1908:       assertFalse(node2.isAdd());
1909:       assertFalse(node2.isNew());
1910:       assertFalse(node2.isCall());
1911:       assertFalse(node2.isString());
1912:       assertFalse(node2.isName());
1913:       assertFalse(node2.isBreak());
1914:       assertFalse(node2.isNull());
1915:       assertFalse(node2.isGetProp());
1916:       assertFalse(node2.isReturn());
1917:       assertFalse(node2.isComma());
1918:       assertFalse(node2.isTypeOf());
1919:       assertFalse(node2.isAssign());
1920:       assertTrue(node2.hasOneChild());
1921:       assertFalse(node2.isDec());
1922:       assertFalse(node2.isWhile());
1923:       assertFalse(node2.isTry());
1924:       assertFalse(node2.isDebugger());
1925:       assertFalse(node2.isVoid());
1926:       assertEquals(4095, node2.getType());
1927:       assertFalse(node2.isArrayLit());
1928:       assertFalse(node2.isRegExp());
1929:       assertFalse(node2.isFunction());
1930:       assertFalse(node2.isDelProp());
1931:       assertFalse(node2.isGetterDef());
1932:       assertFalse(node2.isNE());
1933:       assertFalse(node2.isTrue());
1934:       assertFalse(node2.isIf());
1935:       assertFalse(node2.isSetterDef());
1936:       assertFalse(node2.isIn());
1937:       assertFalse(node2.isEmpty());
1938:       assertFalse(node2.isVar());
1939:       assertFalse(node2.isDefaultCase());
1940:       assertFalse(node2.isBlock());
1941:       assertEquals((-1), node2.getCharno());
1942:       assertFalse(node2.isInc());
1943:       assertFalse(node2.isSwitch());
1944:       assertFalse(node2.isParamList());
1945:       assertFalse(node2.isStringKey());
1946:       assertTrue(node2.hasChildren());
1947:       assertEquals(1, node2.getChildCount());
1948:       assertEquals((-1), node2.getLineno());
1949:       assertFalse(node2.hasMoreThanOneChild());
1950:       assertFalse(node2.isNumber());
1951:       assertFalse(node2.isInstanceOf());
1952:       assertFalse(node2.isCatch());
1953:       assertFalse(node2.isCase());
1954:       assertFalse(node2.isFor());
1955:       assertFalse(node2.isWith());
1956:       assertFalse(node2.isHook());
1957:       assertFalse(node2.isThis());
1958:       
1959:       // Undeclared exception!
1960:       try { 
1961:         node0.getChildBefore(node2);
1962:         fail("Expecting exception: NullPointerException");
1963:       
1964:       } catch(NullPointerException e) {
1965:          //
1966:          // no message in exception (getMessage() returned null)
1967:          //
1968:          verifyException("com.google.javascript.rhino.Node", e);
1969:       }
1970:   }
1971: }
RegularFileObject[/tmp/EvoSuite_354_1628160197973/com/google/javascript/rhino/Node_354_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_354_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_354_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_354_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:18.478 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-125));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());

Iterable<Node> iterable0 = node0.children();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());

Node node1 = node0.cloneTree();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertEquals((-125), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

Node node2 = new Node(4095, node0, node0, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertEquals(4095, node2.getType());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isThis());

Node node3 = node2.srcrefTree(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node1);
assertNotSame(node3, node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertEquals(4095, node2.getType());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isStringKey());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isHook());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertEquals(1, node3.getChildCount());
assertEquals(4095, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isString());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetProp());
assertFalse(node3.isParamList());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isComma());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isOr());

boolean boolean0 = node1.isVarArgs();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertEquals((-125), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertEquals((-125), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertEquals(4095, node2.getType());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isThis());

boolean boolean1 = node2.mayMutateArguments();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertTrue(boolean1);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertEquals(4095, node2.getType());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isThis());

String string0 = node2.getQualifiedName();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNull(string0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals((-125), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertEquals(4095, node2.getType());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isThis());

node0.getChildBefore(node2);

[MASTER] 10:43:20.074 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_367_1628160199669/com/google/javascript/rhino/Node_367_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_367_1628160199669/com/google/javascript/rhino/Node_367_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:20.074 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:20.074 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:20.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 868
[MASTER] 10:43:20.076 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_367_1628160199669/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_367_tmp__ESTest extends Node_367_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("IVh)KYu<s}wr[r");
21:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
22:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
23:       assertEquals(50, Node.FREE_CALL);
24:       assertEquals(8, Node.FLAG_NO_THROWS);
25:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
26:       assertEquals(57, Node.REFLECTED_OBJECT);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(43, Node.IS_CONSTANT_NAME);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(32, Node.INCRDECR_PROP);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(56, Node.CHANGE_TIME);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(46, Node.IS_NAMESPACE);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(37, Node.OPT_ARG_NAME);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(57, Node.LAST_PROP);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(52, Node.LENGTH);
51:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
52:       assertEquals(55, Node.INFERRED_FUNCTION);
53:       assertEquals(29, Node.JSDOC_INFO_PROP);
54:       assertEquals(53, Node.INPUT_ID);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(39, Node.EMPTY_BLOCK);
57:       assertNotNull(node0);
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.isInc());
61:       assertFalse(node0.isGetProp());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isCase());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.isThis());
67:       assertFalse(node0.isBreak());
68:       assertFalse(node0.isInstanceOf());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isCast());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isNE());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.isNot());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isObjectLit());
79:       assertEquals(40, node0.getType());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isVar());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isName());
87:       assertTrue(node0.isString());
88:       assertFalse(node0.isParamList());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isSetterDef());
93:       assertFalse(node0.isCatch());
94:       assertFalse(node0.isWhile());
95:       assertFalse(node0.isReturn());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isBlock());
99:       assertFalse(node0.hasChildren());
100:       assertFalse(node0.isDec());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isRegExp());
104:       assertFalse(node0.hasMoreThanOneChild());
105:       assertFalse(node0.isGetElem());
106:       assertFalse(node0.isArrayLit());
107:       assertFalse(node0.hasOneChild());
108:       assertFalse(node0.isFor());
109:       assertFalse(node0.isDelProp());
110:       assertFalse(node0.isLabelName());
111:       assertFalse(node0.isTry());
112:       assertFalse(node0.isTrue());
113:       assertFalse(node0.isScript());
114:       assertFalse(node0.isGetterDef());
115:       assertFalse(node0.isOr());
116:       assertFalse(node0.isEmpty());
117:       assertFalse(node0.isNumber());
118:       assertFalse(node0.isDo());
119:       assertFalse(node0.isAssignAdd());
120:       assertFalse(node0.isSwitch());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isLabel());
123:       assertEquals(0, node0.getChildCount());
124:       
125:       int int0 = node0.getSourceOffset();
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
128:       assertEquals(50, Node.FREE_CALL);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(57, Node.REFLECTED_OBJECT);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(43, Node.IS_CONSTANT_NAME);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(1, Node.DECR_FLAG);
143:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
144:       assertEquals(56, Node.CHANGE_TIME);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(46, Node.IS_NAMESPACE);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(52, Node.LENGTH);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(29, Node.JSDOC_INFO_PROP);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(39, Node.EMPTY_BLOCK);
162:       assertEquals((-1), int0);
163:       assertFalse(node0.isThrow());
164:       assertFalse(node0.isHook());
165:       assertFalse(node0.isInc());
166:       assertFalse(node0.isGetProp());
167:       assertEquals((-1), node0.getCharno());
168:       assertFalse(node0.isCase());
169:       assertFalse(node0.isExprResult());
170:       assertFalse(node0.isComma());
171:       assertFalse(node0.isThis());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isCast());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isNE());
179:       assertEquals((-1), node0.getSourcePosition());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.isIn());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isObjectLit());
184:       assertEquals(40, node0.getType());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isCall());
189:       assertFalse(node0.isVar());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.isName());
192:       assertTrue(node0.isString());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isNew());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isSetterDef());
198:       assertFalse(node0.isCatch());
199:       assertFalse(node0.isWhile());
200:       assertFalse(node0.isReturn());
201:       assertEquals((-1), node0.getLineno());
202:       assertFalse(node0.isVoid());
203:       assertFalse(node0.isBlock());
204:       assertFalse(node0.hasChildren());
205:       assertFalse(node0.isDec());
206:       assertFalse(node0.isAssign());
207:       assertFalse(node0.isTypeOf());
208:       assertFalse(node0.isRegExp());
209:       assertFalse(node0.hasMoreThanOneChild());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isArrayLit());
212:       assertFalse(node0.hasOneChild());
213:       assertFalse(node0.isFor());
214:       assertFalse(node0.isDelProp());
215:       assertFalse(node0.isLabelName());
216:       assertFalse(node0.isTry());
217:       assertFalse(node0.isTrue());
218:       assertFalse(node0.isScript());
219:       assertFalse(node0.isGetterDef());
220:       assertFalse(node0.isOr());
221:       assertFalse(node0.isEmpty());
222:       assertFalse(node0.isNumber());
223:       assertFalse(node0.isDo());
224:       assertFalse(node0.isAssignAdd());
225:       assertFalse(node0.isSwitch());
226:       assertFalse(node0.isDefaultCase());
227:       assertFalse(node0.isLabel());
228:       assertEquals(0, node0.getChildCount());
229:       
230:       Node node1 = new Node(9, node0, 38, (-2273));
231:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
232:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
233:       assertEquals(50, Node.FREE_CALL);
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(57, Node.REFLECTED_OBJECT);
237:       assertEquals(4095, Node.COLUMN_MASK);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
247:       assertEquals(1, Node.DECR_FLAG);
248:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(2, Node.POST_FLAG);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(46, Node.IS_NAMESPACE);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(30, Node.VAR_ARGS_NAME);
256:       assertEquals(49, Node.DIRECT_EVAL);
257:       assertEquals(57, Node.LAST_PROP);
258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
259:       assertEquals(36, Node.QUOTED_PROP);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(39, Node.EMPTY_BLOCK);
267:       assertEquals(12, Node.COLUMN_BITS);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(30, Node.VAR_ARGS_NAME);
270:       assertEquals(51, Node.STATIC_SOURCE_FILE);
271:       assertEquals(37, Node.OPT_ARG_NAME);
272:       assertEquals(54, Node.SLASH_V);
273:       assertEquals(56, Node.CHANGE_TIME);
274:       assertEquals(49, Node.DIRECT_EVAL);
275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
277:       assertEquals(50, Node.FREE_CALL);
278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
279:       assertEquals(32, Node.INCRDECR_PROP);
280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
281:       assertEquals(1, Node.DECR_FLAG);
282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
283:       assertEquals(4095, Node.COLUMN_MASK);
284:       assertEquals(55, Node.INFERRED_FUNCTION);
285:       assertEquals(36, Node.QUOTED_PROP);
286:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
287:       assertEquals(48, Node.DIRECTIVES);
288:       assertEquals(43, Node.IS_CONSTANT_NAME);
289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
290:       assertEquals(40, Node.ORIGINALNAME_PROP);
291:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
292:       assertEquals(29, Node.JSDOC_INFO_PROP);
293:       assertEquals(52, Node.LENGTH);
294:       assertEquals(47, Node.IS_DISPATCHER);
295:       assertEquals(57, Node.REFLECTED_OBJECT);
296:       assertEquals(2, Node.POST_FLAG);
297:       assertEquals(8, Node.FLAG_NO_THROWS);
298:       assertEquals(39, Node.EMPTY_BLOCK);
299:       assertEquals(53, Node.INPUT_ID);
300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertNotNull(node1);
304:       assertFalse(node1.equals((Object)node0));
305:       assertFalse(node0.isThrow());
306:       assertFalse(node0.isHook());
307:       assertFalse(node0.isInc());
308:       assertFalse(node0.isGetProp());
309:       assertEquals((-1), node0.getCharno());
310:       assertFalse(node0.isCase());
311:       assertFalse(node0.isExprResult());
312:       assertFalse(node0.isComma());
313:       assertFalse(node0.isThis());
314:       assertFalse(node0.isBreak());
315:       assertFalse(node0.isInstanceOf());
316:       assertFalse(node0.isWith());
317:       assertFalse(node0.isCast());
318:       assertFalse(node0.isIf());
319:       assertFalse(node0.isDebugger());
320:       assertFalse(node0.isNE());
321:       assertEquals((-1), node0.getSourcePosition());
322:       assertFalse(node0.isNot());
323:       assertFalse(node0.isIn());
324:       assertFalse(node0.isAnd());
325:       assertFalse(node0.isObjectLit());
326:       assertEquals(40, node0.getType());
327:       assertFalse(node0.isFunction());
328:       assertFalse(node0.isContinue());
329:       assertFalse(node0.isFalse());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isStringKey());
333:       assertFalse(node0.isName());
334:       assertTrue(node0.isString());
335:       assertFalse(node0.isParamList());
336:       assertFalse(node0.isNew());
337:       assertFalse(node0.isAdd());
338:       assertFalse(node0.isNull());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isCatch());
341:       assertFalse(node0.isWhile());
342:       assertFalse(node0.isReturn());
343:       assertEquals((-1), node0.getLineno());
344:       assertFalse(node0.isVoid());
345:       assertFalse(node0.isBlock());
346:       assertFalse(node0.hasChildren());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.isAssign());
349:       assertFalse(node0.isTypeOf());
350:       assertFalse(node0.isRegExp());
351:       assertFalse(node0.hasMoreThanOneChild());
352:       assertFalse(node0.isGetElem());
353:       assertFalse(node0.isArrayLit());
354:       assertFalse(node0.hasOneChild());
355:       assertFalse(node0.isFor());
356:       assertFalse(node0.isDelProp());
357:       assertFalse(node0.isLabelName());
358:       assertFalse(node0.isTry());
359:       assertFalse(node0.isTrue());
360:       assertFalse(node0.isScript());
361:       assertFalse(node0.isGetterDef());
362:       assertFalse(node0.isOr());
363:       assertFalse(node0.isEmpty());
364:       assertFalse(node0.isNumber());
365:       assertFalse(node0.isDo());
366:       assertFalse(node0.isAssignAdd());
367:       assertFalse(node0.isSwitch());
368:       assertFalse(node0.isDefaultCase());
369:       assertFalse(node0.isLabel());
370:       assertEquals(0, node0.getChildCount());
371:       assertEquals((-1), node1.getLineno());
372:       assertFalse(node1.isAssignAdd());
373:       assertFalse(node1.isReturn());
374:       assertFalse(node1.isLabel());
375:       assertFalse(node1.isOr());
376:       assertFalse(node1.isWhile());
377:       assertFalse(node1.isNumber());
378:       assertEquals((-1), node1.getSourcePosition());
379:       assertFalse(node1.isDo());
380:       assertFalse(node1.isAdd());
381:       assertFalse(node1.isBlock());
382:       assertFalse(node1.isWith());
383:       assertFalse(node1.isName());
384:       assertFalse(node1.isTypeOf());
385:       assertFalse(node1.isDec());
386:       assertFalse(node1.isAssign());
387:       assertFalse(node1.isCall());
388:       assertFalse(node1.isExprResult());
389:       assertFalse(node1.hasMoreThanOneChild());
390:       assertFalse(node1.isGetElem());
391:       assertFalse(node1.isInstanceOf());
392:       assertFalse(node1.isAnd());
393:       assertFalse(node1.isNot());
394:       assertFalse(node1.isObjectLit());
395:       assertFalse(node1.isGetProp());
396:       assertFalse(node1.isSetterDef());
397:       assertFalse(node1.isDebugger());
398:       assertFalse(node1.isThrow());
399:       assertFalse(node1.isContinue());
400:       assertFalse(node1.isFunction());
401:       assertFalse(node1.isFalse());
402:       assertFalse(node1.isCast());
403:       assertEquals(1, node1.getChildCount());
404:       assertFalse(node1.isIn());
405:       assertFalse(node1.isNE());
406:       assertFalse(node1.isGetterDef());
407:       assertFalse(node1.isString());
408:       assertFalse(node1.isCase());
409:       assertFalse(node1.isInc());
410:       assertFalse(node1.isEmpty());
411:       assertFalse(node1.isHook());
412:       assertFalse(node1.isTry());
413:       assertFalse(node1.isTrue());
414:       assertFalse(node1.isVoid());
415:       assertFalse(node1.isFor());
416:       assertFalse(node1.isDelProp());
417:       assertFalse(node1.isBreak());
418:       assertFalse(node1.isIf());
419:       assertTrue(node1.hasOneChild());
420:       assertFalse(node1.isRegExp());
421:       assertFalse(node1.isComma());
422:       assertTrue(node1.hasChildren());
423:       assertFalse(node1.isCatch());
424:       assertFalse(node1.isParamList());
425:       assertFalse(node1.isThis());
426:       assertFalse(node1.isNull());
427:       assertEquals(9, node1.getType());
428:       assertFalse(node1.isDefaultCase());
429:       assertFalse(node1.isScript());
430:       assertFalse(node1.isNew());
431:       assertFalse(node1.isArrayLit());
432:       assertEquals((-1), node1.getCharno());
433:       assertFalse(node1.isSwitch());
434:       assertFalse(node1.isVar());
435:       assertFalse(node1.isStringKey());
436:       assertFalse(node1.isLabelName());
437:       
438:       Node node2 = node0.copyInformationFrom(node1);
439:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
440:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
444:       assertEquals(57, Node.REFLECTED_OBJECT);
445:       assertEquals(4095, Node.COLUMN_MASK);
446:       assertEquals(40, Node.ORIGINALNAME_PROP);
447:       assertEquals(48, Node.DIRECTIVES);
448:       assertEquals(43, Node.IS_CONSTANT_NAME);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(12, Node.COLUMN_BITS);
451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
455:       assertEquals(1, Node.DECR_FLAG);
456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
457:       assertEquals(56, Node.CHANGE_TIME);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(46, Node.IS_NAMESPACE);
461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
462:       assertEquals(37, Node.OPT_ARG_NAME);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(57, Node.LAST_PROP);
466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
467:       assertEquals(36, Node.QUOTED_PROP);
468:       assertEquals(52, Node.LENGTH);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(29, Node.JSDOC_INFO_PROP);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
474:       assertEquals(39, Node.EMPTY_BLOCK);
475:       assertEquals(12, Node.COLUMN_BITS);
476:       assertEquals(46, Node.IS_NAMESPACE);
477:       assertEquals(30, Node.VAR_ARGS_NAME);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(37, Node.OPT_ARG_NAME);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(56, Node.CHANGE_TIME);
482:       assertEquals(49, Node.DIRECT_EVAL);
483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
487:       assertEquals(32, Node.INCRDECR_PROP);
488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
489:       assertEquals(1, Node.DECR_FLAG);
490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
491:       assertEquals(4095, Node.COLUMN_MASK);
492:       assertEquals(55, Node.INFERRED_FUNCTION);
493:       assertEquals(36, Node.QUOTED_PROP);
494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
495:       assertEquals(48, Node.DIRECTIVES);
496:       assertEquals(43, Node.IS_CONSTANT_NAME);
497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
498:       assertEquals(40, Node.ORIGINALNAME_PROP);
499:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
500:       assertEquals(29, Node.JSDOC_INFO_PROP);
501:       assertEquals(52, Node.LENGTH);
502:       assertEquals(47, Node.IS_DISPATCHER);
503:       assertEquals(57, Node.REFLECTED_OBJECT);
504:       assertEquals(2, Node.POST_FLAG);
505:       assertEquals(8, Node.FLAG_NO_THROWS);
506:       assertEquals(39, Node.EMPTY_BLOCK);
507:       assertEquals(53, Node.INPUT_ID);
508:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
509:       assertEquals(57, Node.LAST_PROP);
510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
511:       assertEquals(37, Node.OPT_ARG_NAME);
512:       assertEquals(2, Node.POST_FLAG);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(46, Node.IS_NAMESPACE);
515:       assertEquals(47, Node.IS_DISPATCHER);
516:       assertEquals(56, Node.CHANGE_TIME);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(1, Node.DECR_FLAG);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
523:       assertEquals(29, Node.JSDOC_INFO_PROP);
524:       assertEquals(53, Node.INPUT_ID);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(57, Node.LAST_PROP);
527:       assertEquals(43, Node.IS_CONSTANT_NAME);
528:       assertEquals(30, Node.VAR_ARGS_NAME);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(48, Node.DIRECTIVES);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(55, Node.INFERRED_FUNCTION);
536:       assertEquals(39, Node.EMPTY_BLOCK);
537:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(52, Node.LENGTH);
541:       assertEquals(36, Node.QUOTED_PROP);
542:       assertEquals(57, Node.REFLECTED_OBJECT);
543:       assertEquals(49, Node.DIRECT_EVAL);
544:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(4095, Node.COLUMN_MASK);
547:       assertNotNull(node2);
548:       assertFalse(node0.equals((Object)node1));
549:       assertFalse(node1.equals((Object)node0));
550:       assertFalse(node2.equals((Object)node1));
551:       assertSame(node0, node2);
552:       assertSame(node2, node0);
553:       assertFalse(node0.isThrow());
554:       assertFalse(node0.isHook());
555:       assertFalse(node0.isInc());
556:       assertFalse(node0.isGetProp());
557:       assertEquals((-1), node0.getCharno());
558:       assertFalse(node0.isCase());
559:       assertFalse(node0.isExprResult());
560:       assertFalse(node0.isComma());
561:       assertFalse(node0.isThis());
562:       assertFalse(node0.isBreak());
563:       assertFalse(node0.isInstanceOf());
564:       assertFalse(node0.isWith());
565:       assertFalse(node0.isCast());
566:       assertFalse(node0.isIf());
567:       assertFalse(node0.isDebugger());
568:       assertFalse(node0.isNE());
569:       assertEquals((-1), node0.getSourcePosition());
570:       assertFalse(node0.isNot());
571:       assertFalse(node0.isIn());
572:       assertFalse(node0.isAnd());
573:       assertFalse(node0.isObjectLit());
574:       assertEquals(40, node0.getType());
575:       assertFalse(node0.isFunction());
576:       assertFalse(node0.isContinue());
577:       assertFalse(node0.isFalse());
578:       assertFalse(node0.isCall());
579:       assertFalse(node0.isVar());
580:       assertFalse(node0.isStringKey());
581:       assertFalse(node0.isName());
582:       assertTrue(node0.isString());
583:       assertFalse(node0.isParamList());
584:       assertFalse(node0.isNew());
585:       assertFalse(node0.isAdd());
586:       assertFalse(node0.isNull());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isCatch());
589:       assertFalse(node0.isWhile());
590:       assertFalse(node0.isReturn());
591:       assertEquals((-1), node0.getLineno());
592:       assertFalse(node0.isVoid());
593:       assertFalse(node0.isBlock());
594:       assertFalse(node0.hasChildren());
595:       assertFalse(node0.isDec());
596:       assertFalse(node0.isAssign());
597:       assertFalse(node0.isTypeOf());
598:       assertFalse(node0.isRegExp());
599:       assertFalse(node0.hasMoreThanOneChild());
600:       assertFalse(node0.isGetElem());
601:       assertFalse(node0.isArrayLit());
602:       assertFalse(node0.hasOneChild());
603:       assertFalse(node0.isFor());
604:       assertFalse(node0.isDelProp());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isTry());
607:       assertFalse(node0.isTrue());
608:       assertFalse(node0.isScript());
609:       assertFalse(node0.isGetterDef());
610:       assertFalse(node0.isOr());
611:       assertFalse(node0.isEmpty());
612:       assertFalse(node0.isNumber());
613:       assertFalse(node0.isDo());
614:       assertFalse(node0.isAssignAdd());
615:       assertFalse(node0.isSwitch());
616:       assertFalse(node0.isDefaultCase());
617:       assertFalse(node0.isLabel());
618:       assertEquals(0, node0.getChildCount());
619:       assertEquals((-1), node1.getLineno());
620:       assertFalse(node1.isAssignAdd());
621:       assertFalse(node1.isReturn());
622:       assertFalse(node1.isLabel());
623:       assertFalse(node1.isOr());
624:       assertFalse(node1.isWhile());
625:       assertFalse(node1.isNumber());
626:       assertEquals((-1), node1.getSourcePosition());
627:       assertFalse(node1.isDo());
628:       assertFalse(node1.isAdd());
629:       assertFalse(node1.isBlock());
630:       assertFalse(node1.isWith());
631:       assertFalse(node1.isName());
632:       assertFalse(node1.isTypeOf());
633:       assertFalse(node1.isDec());
634:       assertFalse(node1.isAssign());
635:       assertFalse(node1.isCall());
636:       assertFalse(node1.isExprResult());
637:       assertFalse(node1.hasMoreThanOneChild());
638:       assertFalse(node1.isGetElem());
639:       assertFalse(node1.isInstanceOf());
640:       assertFalse(node1.isAnd());
641:       assertFalse(node1.isNot());
642:       assertFalse(node1.isObjectLit());
643:       assertFalse(node1.isGetProp());
644:       assertFalse(node1.isSetterDef());
645:       assertFalse(node1.isDebugger());
646:       assertFalse(node1.isThrow());
647:       assertFalse(node1.isContinue());
648:       assertFalse(node1.isFunction());
649:       assertFalse(node1.isFalse());
650:       assertFalse(node1.isCast());
651:       assertEquals(1, node1.getChildCount());
652:       assertFalse(node1.isIn());
653:       assertFalse(node1.isNE());
654:       assertFalse(node1.isGetterDef());
655:       assertFalse(node1.isString());
656:       assertFalse(node1.isCase());
657:       assertFalse(node1.isInc());
658:       assertFalse(node1.isEmpty());
659:       assertFalse(node1.isHook());
660:       assertFalse(node1.isTry());
661:       assertFalse(node1.isTrue());
662:       assertFalse(node1.isVoid());
663:       assertFalse(node1.isFor());
664:       assertFalse(node1.isDelProp());
665:       assertFalse(node1.isBreak());
666:       assertFalse(node1.isIf());
667:       assertTrue(node1.hasOneChild());
668:       assertFalse(node1.isRegExp());
669:       assertFalse(node1.isComma());
670:       assertTrue(node1.hasChildren());
671:       assertFalse(node1.isCatch());
672:       assertFalse(node1.isParamList());
673:       assertFalse(node1.isThis());
674:       assertFalse(node1.isNull());
675:       assertEquals(9, node1.getType());
676:       assertFalse(node1.isDefaultCase());
677:       assertFalse(node1.isScript());
678:       assertFalse(node1.isNew());
679:       assertFalse(node1.isArrayLit());
680:       assertEquals((-1), node1.getCharno());
681:       assertFalse(node1.isSwitch());
682:       assertFalse(node1.isVar());
683:       assertFalse(node1.isStringKey());
684:       assertFalse(node1.isLabelName());
685:       assertFalse(node2.hasChildren());
686:       assertFalse(node2.isDec());
687:       assertEquals((-1), node2.getSourcePosition());
688:       assertFalse(node2.isGetElem());
689:       assertFalse(node2.isAssignAdd());
690:       assertFalse(node2.isLabelName());
691:       assertEquals((-1), node2.getLineno());
692:       assertFalse(node2.isCast());
693:       assertFalse(node2.isLabel());
694:       assertFalse(node2.isReturn());
695:       assertFalse(node2.isContinue());
696:       assertFalse(node2.isAssign());
697:       assertFalse(node2.hasMoreThanOneChild());
698:       assertFalse(node2.isTypeOf());
699:       assertFalse(node2.isWhile());
700:       assertFalse(node2.isScript());
701:       assertFalse(node2.isAnd());
702:       assertTrue(node2.isString());
703:       assertFalse(node2.hasOneChild());
704:       assertFalse(node2.isObjectLit());
705:       assertFalse(node2.isNot());
706:       assertFalse(node2.isNumber());
707:       assertFalse(node2.isBreak());
708:       assertFalse(node2.isNull());
709:       assertFalse(node2.isGetProp());
710:       assertFalse(node2.isParamList());
711:       assertFalse(node2.isStringKey());
712:       assertFalse(node2.isName());
713:       assertEquals(0, node2.getChildCount());
714:       assertFalse(node2.isVar());
715:       assertFalse(node2.isCall());
716:       assertFalse(node2.isComma());
717:       assertFalse(node2.isDefaultCase());
718:       assertFalse(node2.isTrue());
719:       assertFalse(node2.isExprResult());
720:       assertFalse(node2.isVoid());
721:       assertFalse(node2.isNew());
722:       assertFalse(node2.isDo());
723:       assertFalse(node2.isAdd());
724:       assertFalse(node2.isOr());
725:       assertFalse(node2.isDelProp());
726:       assertFalse(node2.isGetterDef());
727:       assertFalse(node2.isIf());
728:       assertFalse(node2.isNE());
729:       assertFalse(node2.isEmpty());
730:       assertFalse(node2.isFor());
731:       assertFalse(node2.isArrayLit());
732:       assertFalse(node2.isRegExp());
733:       assertFalse(node2.isFunction());
734:       assertFalse(node2.isCase());
735:       assertFalse(node2.isSwitch());
736:       assertFalse(node2.isTry());
737:       assertFalse(node2.isDebugger());
738:       assertEquals((-1), node2.getCharno());
739:       assertFalse(node2.isSetterDef());
740:       assertFalse(node2.isThis());
741:       assertFalse(node2.isThrow());
742:       assertFalse(node2.isInstanceOf());
743:       assertFalse(node2.isHook());
744:       assertFalse(node2.isBlock());
745:       assertFalse(node2.isCatch());
746:       assertFalse(node2.isFalse());
747:       assertFalse(node2.isWith());
748:       assertFalse(node2.isInc());
749:       assertEquals(40, node2.getType());
750:       assertFalse(node2.isIn());
751:       
752:       Iterable<Node> iterable0 = node2.children();
753:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
754:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(8, Node.FLAG_NO_THROWS);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(57, Node.REFLECTED_OBJECT);
759:       assertEquals(4095, Node.COLUMN_MASK);
760:       assertEquals(40, Node.ORIGINALNAME_PROP);
761:       assertEquals(48, Node.DIRECTIVES);
762:       assertEquals(43, Node.IS_CONSTANT_NAME);
763:       assertEquals(54, Node.SLASH_V);
764:       assertEquals(12, Node.COLUMN_BITS);
765:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
769:       assertEquals(1, Node.DECR_FLAG);
770:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
771:       assertEquals(56, Node.CHANGE_TIME);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(47, Node.IS_DISPATCHER);
774:       assertEquals(46, Node.IS_NAMESPACE);
775:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(30, Node.VAR_ARGS_NAME);
778:       assertEquals(49, Node.DIRECT_EVAL);
779:       assertEquals(57, Node.LAST_PROP);
780:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
781:       assertEquals(36, Node.QUOTED_PROP);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
784:       assertEquals(55, Node.INFERRED_FUNCTION);
785:       assertEquals(29, Node.JSDOC_INFO_PROP);
786:       assertEquals(53, Node.INPUT_ID);
787:       assertEquals(15, Node.NO_SIDE_EFFECTS);
788:       assertEquals(39, Node.EMPTY_BLOCK);
789:       assertEquals(12, Node.COLUMN_BITS);
790:       assertEquals(46, Node.IS_NAMESPACE);
791:       assertEquals(30, Node.VAR_ARGS_NAME);
792:       assertEquals(51, Node.STATIC_SOURCE_FILE);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(54, Node.SLASH_V);
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(49, Node.DIRECT_EVAL);
797:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
799:       assertEquals(50, Node.FREE_CALL);
800:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
801:       assertEquals(32, Node.INCRDECR_PROP);
802:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
803:       assertEquals(1, Node.DECR_FLAG);
804:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
805:       assertEquals(4095, Node.COLUMN_MASK);
806:       assertEquals(55, Node.INFERRED_FUNCTION);
807:       assertEquals(36, Node.QUOTED_PROP);
808:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
809:       assertEquals(48, Node.DIRECTIVES);
810:       assertEquals(43, Node.IS_CONSTANT_NAME);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(40, Node.ORIGINALNAME_PROP);
813:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
814:       assertEquals(29, Node.JSDOC_INFO_PROP);
815:       assertEquals(52, Node.LENGTH);
816:       assertEquals(47, Node.IS_DISPATCHER);
817:       assertEquals(57, Node.REFLECTED_OBJECT);
818:       assertEquals(2, Node.POST_FLAG);
819:       assertEquals(8, Node.FLAG_NO_THROWS);
820:       assertEquals(39, Node.EMPTY_BLOCK);
821:       assertEquals(53, Node.INPUT_ID);
822:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
823:       assertEquals(57, Node.LAST_PROP);
824:       assertEquals(15, Node.NO_SIDE_EFFECTS);
825:       assertEquals(37, Node.OPT_ARG_NAME);
826:       assertEquals(2, Node.POST_FLAG);
827:       assertEquals(32, Node.INCRDECR_PROP);
828:       assertEquals(46, Node.IS_NAMESPACE);
829:       assertEquals(47, Node.IS_DISPATCHER);
830:       assertEquals(56, Node.CHANGE_TIME);
831:       assertEquals(51, Node.STATIC_SOURCE_FILE);
832:       assertEquals(12, Node.COLUMN_BITS);
833:       assertEquals(1, Node.DECR_FLAG);
834:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
835:       assertEquals(15, Node.NO_SIDE_EFFECTS);
836:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
837:       assertEquals(29, Node.JSDOC_INFO_PROP);
838:       assertEquals(53, Node.INPUT_ID);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(57, Node.LAST_PROP);
841:       assertEquals(43, Node.IS_CONSTANT_NAME);
842:       assertEquals(30, Node.VAR_ARGS_NAME);
843:       assertEquals(40, Node.ORIGINALNAME_PROP);
844:       assertEquals(48, Node.DIRECTIVES);
845:       assertEquals(8, Node.FLAG_NO_THROWS);
846:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
847:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
848:       assertEquals(50, Node.FREE_CALL);
849:       assertEquals(55, Node.INFERRED_FUNCTION);
850:       assertEquals(39, Node.EMPTY_BLOCK);
851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
852:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(52, Node.LENGTH);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(49, Node.DIRECT_EVAL);
858:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
859:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
860:       assertEquals(4095, Node.COLUMN_MASK);
861:       assertNotNull(iterable0);
862:       assertFalse(node0.equals((Object)node1));
863:       assertFalse(node1.equals((Object)node2));
864:       assertFalse(node1.equals((Object)node0));
865:       assertFalse(node2.equals((Object)node1));
866:       assertSame(node0, node2);
867:       assertSame(node2, node0);
868:       assertFalse(iterable0.contains(node0));
869:       assertFalse(node0.isThrow());
870:       assertFalse(node0.isHook());
871:       assertFalse(node0.isInc());
872:       assertFalse(node0.isGetProp());
873:       assertEquals((-1), node0.getCharno());
874:       assertFalse(node0.isCase());
875:       assertFalse(node0.isExprResult());
876:       assertFalse(node0.isComma());
877:       assertFalse(node0.isThis());
878:       assertFalse(node0.isBreak());
879:       assertFalse(node0.isInstanceOf());
880:       assertFalse(node0.isWith());
881:       assertFalse(node0.isCast());
882:       assertFalse(node0.isIf());
883:       assertFalse(node0.isDebugger());
884:       assertFalse(node0.isNE());
885:       assertEquals((-1), node0.getSourcePosition());
886:       assertFalse(node0.isNot());
887:       assertFalse(node0.isIn());
888:       assertFalse(node0.isAnd());
889:       assertFalse(node0.isObjectLit());
890:       assertEquals(40, node0.getType());
891:       assertFalse(node0.isFunction());
892:       assertFalse(node0.isContinue());
893:       assertFalse(node0.isFalse());
894:       assertFalse(node0.isCall());
895:       assertFalse(node0.isVar());
896:       assertFalse(node0.isStringKey());
897:       assertFalse(node0.isName());
898:       assertTrue(node0.isString());
899:       assertFalse(node0.isParamList());
900:       assertFalse(node0.isNew());
901:       assertFalse(node0.isAdd());
902:       assertFalse(node0.isNull());
903:       assertFalse(node0.isSetterDef());
904:       assertFalse(node0.isCatch());
905:       assertFalse(node0.isWhile());
906:       assertFalse(node0.isReturn());
907:       assertEquals((-1), node0.getLineno());
908:       assertFalse(node0.isVoid());
909:       assertFalse(node0.isBlock());
910:       assertFalse(node0.hasChildren());
911:       assertFalse(node0.isDec());
912:       assertFalse(node0.isAssign());
913:       assertFalse(node0.isTypeOf());
914:       assertFalse(node0.isRegExp());
915:       assertFalse(node0.hasMoreThanOneChild());
916:       assertFalse(node0.isGetElem());
917:       assertFalse(node0.isArrayLit());
918:       assertFalse(node0.hasOneChild());
919:       assertFalse(node0.isFor());
920:       assertFalse(node0.isDelProp());
921:       assertFalse(node0.isLabelName());
922:       assertFalse(node0.isTry());
923:       assertFalse(node0.isTrue());
924:       assertFalse(node0.isScript());
925:       assertFalse(node0.isGetterDef());
926:       assertFalse(node0.isOr());
927:       assertFalse(node0.isEmpty());
928:       assertFalse(node0.isNumber());
929:       assertFalse(node0.isDo());
930:       assertFalse(node0.isAssignAdd());
931:       assertFalse(node0.isSwitch());
932:       assertFalse(node0.isDefaultCase());
933:       assertFalse(node0.isLabel());
934:       assertEquals(0, node0.getChildCount());
935:       assertEquals((-1), node1.getLineno());
936:       assertFalse(node1.isAssignAdd());
937:       assertFalse(node1.isReturn());
938:       assertFalse(node1.isLabel());
939:       assertFalse(node1.isOr());
940:       assertFalse(node1.isWhile());
941:       assertFalse(node1.isNumber());
942:       assertEquals((-1), node1.getSourcePosition());
943:       assertFalse(node1.isDo());
944:       assertFalse(node1.isAdd());
945:       assertFalse(node1.isBlock());
946:       assertFalse(node1.isWith());
947:       assertFalse(node1.isName());
948:       assertFalse(node1.isTypeOf());
949:       assertFalse(node1.isDec());
950:       assertFalse(node1.isAssign());
951:       assertFalse(node1.isCall());
952:       assertFalse(node1.isExprResult());
953:       assertFalse(node1.hasMoreThanOneChild());
954:       assertFalse(node1.isGetElem());
955:       assertFalse(node1.isInstanceOf());
956:       assertFalse(node1.isAnd());
957:       assertFalse(node1.isNot());
958:       assertFalse(node1.isObjectLit());
959:       assertFalse(node1.isGetProp());
960:       assertFalse(node1.isSetterDef());
961:       assertFalse(node1.isDebugger());
962:       assertFalse(node1.isThrow());
963:       assertFalse(node1.isContinue());
964:       assertFalse(node1.isFunction());
965:       assertFalse(node1.isFalse());
966:       assertFalse(node1.isCast());
967:       assertEquals(1, node1.getChildCount());
968:       assertFalse(node1.isIn());
969:       assertFalse(node1.isNE());
970:       assertFalse(node1.isGetterDef());
971:       assertFalse(node1.isString());
972:       assertFalse(node1.isCase());
973:       assertFalse(node1.isInc());
974:       assertFalse(node1.isEmpty());
975:       assertFalse(node1.isHook());
976:       assertFalse(node1.isTry());
977:       assertFalse(node1.isTrue());
978:       assertFalse(node1.isVoid());
979:       assertFalse(node1.isFor());
980:       assertFalse(node1.isDelProp());
981:       assertFalse(node1.isBreak());
982:       assertFalse(node1.isIf());
983:       assertTrue(node1.hasOneChild());
984:       assertFalse(node1.isRegExp());
985:       assertFalse(node1.isComma());
986:       assertTrue(node1.hasChildren());
987:       assertFalse(node1.isCatch());
988:       assertFalse(node1.isParamList());
989:       assertFalse(node1.isThis());
990:       assertFalse(node1.isNull());
991:       assertEquals(9, node1.getType());
992:       assertFalse(node1.isDefaultCase());
993:       assertFalse(node1.isScript());
994:       assertFalse(node1.isNew());
995:       assertFalse(node1.isArrayLit());
996:       assertEquals((-1), node1.getCharno());
997:       assertFalse(node1.isSwitch());
998:       assertFalse(node1.isVar());
999:       assertFalse(node1.isStringKey());
1000:       assertFalse(node1.isLabelName());
1001:       assertFalse(node2.hasChildren());
1002:       assertFalse(node2.isDec());
1003:       assertEquals((-1), node2.getSourcePosition());
1004:       assertFalse(node2.isGetElem());
1005:       assertFalse(node2.isAssignAdd());
1006:       assertFalse(node2.isLabelName());
1007:       assertEquals((-1), node2.getLineno());
1008:       assertFalse(node2.isCast());
1009:       assertFalse(node2.isLabel());
1010:       assertFalse(node2.isReturn());
1011:       assertFalse(node2.isContinue());
1012:       assertFalse(node2.isAssign());
1013:       assertFalse(node2.hasMoreThanOneChild());
1014:       assertFalse(node2.isTypeOf());
1015:       assertFalse(node2.isWhile());
1016:       assertFalse(node2.isScript());
1017:       assertFalse(node2.isAnd());
1018:       assertTrue(node2.isString());
1019:       assertFalse(node2.hasOneChild());
1020:       assertFalse(node2.isObjectLit());
1021:       assertFalse(node2.isNot());
1022:       assertFalse(node2.isNumber());
1023:       assertFalse(node2.isBreak());
1024:       assertFalse(node2.isNull());
1025:       assertFalse(node2.isGetProp());
1026:       assertFalse(node2.isParamList());
1027:       assertFalse(node2.isStringKey());
1028:       assertFalse(node2.isName());
1029:       assertEquals(0, node2.getChildCount());
1030:       assertFalse(node2.isVar());
1031:       assertFalse(node2.isCall());
1032:       assertFalse(node2.isComma());
1033:       assertFalse(node2.isDefaultCase());
1034:       assertFalse(node2.isTrue());
1035:       assertFalse(node2.isExprResult());
1036:       assertFalse(node2.isVoid());
1037:       assertFalse(node2.isNew());
1038:       assertFalse(node2.isDo());
1039:       assertFalse(node2.isAdd());
1040:       assertFalse(node2.isOr());
1041:       assertFalse(node2.isDelProp());
1042:       assertFalse(node2.isGetterDef());
1043:       assertFalse(node2.isIf());
1044:       assertFalse(node2.isNE());
1045:       assertFalse(node2.isEmpty());
1046:       assertFalse(node2.isFor());
1047:       assertFalse(node2.isArrayLit());
1048:       assertFalse(node2.isRegExp());
1049:       assertFalse(node2.isFunction());
1050:       assertFalse(node2.isCase());
1051:       assertFalse(node2.isSwitch());
1052:       assertFalse(node2.isTry());
1053:       assertFalse(node2.isDebugger());
1054:       assertEquals((-1), node2.getCharno());
1055:       assertFalse(node2.isSetterDef());
1056:       assertFalse(node2.isThis());
1057:       assertFalse(node2.isThrow());
1058:       assertFalse(node2.isInstanceOf());
1059:       assertFalse(node2.isHook());
1060:       assertFalse(node2.isBlock());
1061:       assertFalse(node2.isCatch());
1062:       assertFalse(node2.isFalse());
1063:       assertFalse(node2.isWith());
1064:       assertFalse(node2.isInc());
1065:       assertEquals(40, node2.getType());
1066:       assertFalse(node2.isIn());
1067:       
1068:       Node node3 = node2.useSourceInfoFrom(node1);
1069:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1070:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1071:       assertEquals(50, Node.FREE_CALL);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1074:       assertEquals(57, Node.REFLECTED_OBJECT);
1075:       assertEquals(4095, Node.COLUMN_MASK);
1076:       assertEquals(40, Node.ORIGINALNAME_PROP);
1077:       assertEquals(48, Node.DIRECTIVES);
1078:       assertEquals(43, Node.IS_CONSTANT_NAME);
1079:       assertEquals(54, Node.SLASH_V);
1080:       assertEquals(12, Node.COLUMN_BITS);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(32, Node.INCRDECR_PROP);
1083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1084:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1085:       assertEquals(1, Node.DECR_FLAG);
1086:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1087:       assertEquals(56, Node.CHANGE_TIME);
1088:       assertEquals(2, Node.POST_FLAG);
1089:       assertEquals(47, Node.IS_DISPATCHER);
1090:       assertEquals(46, Node.IS_NAMESPACE);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(37, Node.OPT_ARG_NAME);
1093:       assertEquals(30, Node.VAR_ARGS_NAME);
1094:       assertEquals(49, Node.DIRECT_EVAL);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(52, Node.LENGTH);
1099:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1100:       assertEquals(55, Node.INFERRED_FUNCTION);
1101:       assertEquals(29, Node.JSDOC_INFO_PROP);
1102:       assertEquals(53, Node.INPUT_ID);
1103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1104:       assertEquals(39, Node.EMPTY_BLOCK);
1105:       assertEquals(12, Node.COLUMN_BITS);
1106:       assertEquals(46, Node.IS_NAMESPACE);
1107:       assertEquals(30, Node.VAR_ARGS_NAME);
1108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1109:       assertEquals(37, Node.OPT_ARG_NAME);
1110:       assertEquals(54, Node.SLASH_V);
1111:       assertEquals(56, Node.CHANGE_TIME);
1112:       assertEquals(49, Node.DIRECT_EVAL);
1113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1115:       assertEquals(50, Node.FREE_CALL);
1116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1117:       assertEquals(32, Node.INCRDECR_PROP);
1118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1119:       assertEquals(1, Node.DECR_FLAG);
1120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1121:       assertEquals(4095, Node.COLUMN_MASK);
1122:       assertEquals(55, Node.INFERRED_FUNCTION);
1123:       assertEquals(36, Node.QUOTED_PROP);
1124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1125:       assertEquals(48, Node.DIRECTIVES);
1126:       assertEquals(43, Node.IS_CONSTANT_NAME);
1127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1128:       assertEquals(40, Node.ORIGINALNAME_PROP);
1129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1130:       assertEquals(29, Node.JSDOC_INFO_PROP);
1131:       assertEquals(52, Node.LENGTH);
1132:       assertEquals(47, Node.IS_DISPATCHER);
1133:       assertEquals(57, Node.REFLECTED_OBJECT);
1134:       assertEquals(2, Node.POST_FLAG);
1135:       assertEquals(8, Node.FLAG_NO_THROWS);
1136:       assertEquals(39, Node.EMPTY_BLOCK);
1137:       assertEquals(53, Node.INPUT_ID);
1138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1139:       assertEquals(57, Node.LAST_PROP);
1140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1141:       assertEquals(37, Node.OPT_ARG_NAME);
1142:       assertEquals(2, Node.POST_FLAG);
1143:       assertEquals(32, Node.INCRDECR_PROP);
1144:       assertEquals(46, Node.IS_NAMESPACE);
1145:       assertEquals(47, Node.IS_DISPATCHER);
1146:       assertEquals(56, Node.CHANGE_TIME);
1147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1148:       assertEquals(12, Node.COLUMN_BITS);
1149:       assertEquals(1, Node.DECR_FLAG);
1150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1153:       assertEquals(29, Node.JSDOC_INFO_PROP);
1154:       assertEquals(53, Node.INPUT_ID);
1155:       assertEquals(54, Node.SLASH_V);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(43, Node.IS_CONSTANT_NAME);
1158:       assertEquals(30, Node.VAR_ARGS_NAME);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(48, Node.DIRECTIVES);
1161:       assertEquals(8, Node.FLAG_NO_THROWS);
1162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1163:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1164:       assertEquals(50, Node.FREE_CALL);
1165:       assertEquals(55, Node.INFERRED_FUNCTION);
1166:       assertEquals(39, Node.EMPTY_BLOCK);
1167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1170:       assertEquals(52, Node.LENGTH);
1171:       assertEquals(36, Node.QUOTED_PROP);
1172:       assertEquals(57, Node.REFLECTED_OBJECT);
1173:       assertEquals(49, Node.DIRECT_EVAL);
1174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1175:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1176:       assertEquals(4095, Node.COLUMN_MASK);
1177:       assertEquals(4095, Node.COLUMN_MASK);
1178:       assertEquals(55, Node.INFERRED_FUNCTION);
1179:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1180:       assertEquals(8, Node.FLAG_NO_THROWS);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(39, Node.EMPTY_BLOCK);
1183:       assertEquals(53, Node.INPUT_ID);
1184:       assertEquals(40, Node.ORIGINALNAME_PROP);
1185:       assertEquals(50, Node.FREE_CALL);
1186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1187:       assertEquals(43, Node.IS_CONSTANT_NAME);
1188:       assertEquals(54, Node.SLASH_V);
1189:       assertEquals(12, Node.COLUMN_BITS);
1190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1191:       assertEquals(46, Node.IS_NAMESPACE);
1192:       assertEquals(30, Node.VAR_ARGS_NAME);
1193:       assertEquals(2, Node.POST_FLAG);
1194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1195:       assertEquals(47, Node.IS_DISPATCHER);
1196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1197:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1198:       assertEquals(1, Node.DECR_FLAG);
1199:       assertEquals(57, Node.LAST_PROP);
1200:       assertEquals(32, Node.INCRDECR_PROP);
1201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1202:       assertEquals(57, Node.REFLECTED_OBJECT);
1203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1204:       assertEquals(29, Node.JSDOC_INFO_PROP);
1205:       assertEquals(52, Node.LENGTH);
1206:       assertEquals(37, Node.OPT_ARG_NAME);
1207:       assertEquals(56, Node.CHANGE_TIME);
1208:       assertEquals(36, Node.QUOTED_PROP);
1209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1210:       assertEquals(49, Node.DIRECT_EVAL);
1211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1212:       assertEquals(48, Node.DIRECTIVES);
1213:       assertNotNull(node3);
1214:       assertFalse(node0.equals((Object)node1));
1215:       assertFalse(node1.equals((Object)node2));
1216:       assertFalse(node1.equals((Object)node0));
1217:       assertFalse(node2.equals((Object)node1));
1218:       assertFalse(node3.equals((Object)node1));
1219:       assertSame(node0, node3);
1220:       assertSame(node0, node2);
1221:       assertSame(node2, node3);
1222:       assertSame(node2, node0);
1223:       assertSame(node3, node0);
1224:       assertSame(node3, node2);
1225:       assertFalse(node0.isThrow());
1226:       assertFalse(node0.isHook());
1227:       assertFalse(node0.isInc());
1228:       assertFalse(node0.isGetProp());
1229:       assertEquals((-1), node0.getCharno());
1230:       assertFalse(node0.isCase());
1231:       assertFalse(node0.isExprResult());
1232:       assertFalse(node0.isComma());
1233:       assertFalse(node0.isThis());
1234:       assertFalse(node0.isBreak());
1235:       assertFalse(node0.isInstanceOf());
1236:       assertFalse(node0.isWith());
1237:       assertFalse(node0.isCast());
1238:       assertFalse(node0.isIf());
1239:       assertFalse(node0.isDebugger());
1240:       assertFalse(node0.isNE());
1241:       assertEquals((-1), node0.getSourcePosition());
1242:       assertFalse(node0.isNot());
1243:       assertFalse(node0.isIn());
1244:       assertFalse(node0.isAnd());
1245:       assertFalse(node0.isObjectLit());
1246:       assertEquals(40, node0.getType());
1247:       assertFalse(node0.isFunction());
1248:       assertFalse(node0.isContinue());
1249:       assertFalse(node0.isFalse());
1250:       assertFalse(node0.isCall());
1251:       assertFalse(node0.isVar());
1252:       assertFalse(node0.isStringKey());
1253:       assertFalse(node0.isName());
1254:       assertTrue(node0.isString());
1255:       assertFalse(node0.isParamList());
1256:       assertFalse(node0.isNew());
1257:       assertFalse(node0.isAdd());
1258:       assertFalse(node0.isNull());
1259:       assertFalse(node0.isSetterDef());
1260:       assertFalse(node0.isCatch());
1261:       assertFalse(node0.isWhile());
1262:       assertFalse(node0.isReturn());
1263:       assertEquals((-1), node0.getLineno());
1264:       assertFalse(node0.isVoid());
1265:       assertFalse(node0.isBlock());
1266:       assertFalse(node0.hasChildren());
1267:       assertFalse(node0.isDec());
1268:       assertFalse(node0.isAssign());
1269:       assertFalse(node0.isTypeOf());
1270:       assertFalse(node0.isRegExp());
1271:       assertFalse(node0.hasMoreThanOneChild());
1272:       assertFalse(node0.isGetElem());
1273:       assertFalse(node0.isArrayLit());
1274:       assertFalse(node0.hasOneChild());
1275:       assertFalse(node0.isFor());
1276:       assertFalse(node0.isDelProp());
1277:       assertFalse(node0.isLabelName());
1278:       assertFalse(node0.isTry());
1279:       assertFalse(node0.isTrue());
1280:       assertFalse(node0.isScript());
1281:       assertFalse(node0.isGetterDef());
1282:       assertFalse(node0.isOr());
1283:       assertFalse(node0.isEmpty());
1284:       assertFalse(node0.isNumber());
1285:       assertFalse(node0.isDo());
1286:       assertFalse(node0.isAssignAdd());
1287:       assertFalse(node0.isSwitch());
1288:       assertFalse(node0.isDefaultCase());
1289:       assertFalse(node0.isLabel());
1290:       assertEquals(0, node0.getChildCount());
1291:       assertEquals((-1), node1.getLineno());
1292:       assertFalse(node1.isAssignAdd());
1293:       assertFalse(node1.isReturn());
1294:       assertFalse(node1.isLabel());
1295:       assertFalse(node1.isOr());
1296:       assertFalse(node1.isWhile());
1297:       assertFalse(node1.isNumber());
1298:       assertEquals((-1), node1.getSourcePosition());
1299:       assertFalse(node1.isDo());
1300:       assertFalse(node1.isAdd());
1301:       assertFalse(node1.isBlock());
1302:       assertFalse(node1.isWith());
1303:       assertFalse(node1.isName());
1304:       assertFalse(node1.isTypeOf());
1305:       assertFalse(node1.isDec());
1306:       assertFalse(node1.isAssign());
1307:       assertFalse(node1.isCall());
1308:       assertFalse(node1.isExprResult());
1309:       assertFalse(node1.hasMoreThanOneChild());
1310:       assertFalse(node1.isGetElem());
1311:       assertFalse(node1.isInstanceOf());
1312:       assertFalse(node1.isAnd());
1313:       assertFalse(node1.isNot());
1314:       assertFalse(node1.isObjectLit());
1315:       assertFalse(node1.isGetProp());
1316:       assertFalse(node1.isSetterDef());
1317:       assertFalse(node1.isDebugger());
1318:       assertFalse(node1.isThrow());
1319:       assertFalse(node1.isContinue());
1320:       assertFalse(node1.isFunction());
1321:       assertFalse(node1.isFalse());
1322:       assertFalse(node1.isCast());
1323:       assertEquals(1, node1.getChildCount());
1324:       assertFalse(node1.isIn());
1325:       assertFalse(node1.isNE());
1326:       assertFalse(node1.isGetterDef());
1327:       assertFalse(node1.isString());
1328:       assertFalse(node1.isCase());
1329:       assertFalse(node1.isInc());
1330:       assertFalse(node1.isEmpty());
1331:       assertFalse(node1.isHook());
1332:       assertFalse(node1.isTry());
1333:       assertFalse(node1.isTrue());
1334:       assertFalse(node1.isVoid());
1335:       assertFalse(node1.isFor());
1336:       assertFalse(node1.isDelProp());
1337:       assertFalse(node1.isBreak());
1338:       assertFalse(node1.isIf());
1339:       assertTrue(node1.hasOneChild());
1340:       assertFalse(node1.isRegExp());
1341:       assertFalse(node1.isComma());
1342:       assertTrue(node1.hasChildren());
1343:       assertFalse(node1.isCatch());
1344:       assertFalse(node1.isParamList());
1345:       assertFalse(node1.isThis());
1346:       assertFalse(node1.isNull());
1347:       assertEquals(9, node1.getType());
1348:       assertFalse(node1.isDefaultCase());
1349:       assertFalse(node1.isScript());
1350:       assertFalse(node1.isNew());
1351:       assertFalse(node1.isArrayLit());
1352:       assertEquals((-1), node1.getCharno());
1353:       assertFalse(node1.isSwitch());
1354:       assertFalse(node1.isVar());
1355:       assertFalse(node1.isStringKey());
1356:       assertFalse(node1.isLabelName());
1357:       assertFalse(node2.hasChildren());
1358:       assertFalse(node2.isDec());
1359:       assertEquals((-1), node2.getSourcePosition());
1360:       assertFalse(node2.isGetElem());
1361:       assertFalse(node2.isAssignAdd());
1362:       assertFalse(node2.isLabelName());
1363:       assertEquals((-1), node2.getLineno());
1364:       assertFalse(node2.isCast());
1365:       assertFalse(node2.isLabel());
1366:       assertFalse(node2.isReturn());
1367:       assertFalse(node2.isContinue());
1368:       assertFalse(node2.isAssign());
1369:       assertFalse(node2.hasMoreThanOneChild());
1370:       assertFalse(node2.isTypeOf());
1371:       assertFalse(node2.isWhile());
1372:       assertFalse(node2.isScript());
1373:       assertFalse(node2.isAnd());
1374:       assertTrue(node2.isString());
1375:       assertFalse(node2.hasOneChild());
1376:       assertFalse(node2.isObjectLit());
1377:       assertFalse(node2.isNot());
1378:       assertFalse(node2.isNumber());
1379:       assertFalse(node2.isBreak());
1380:       assertFalse(node2.isNull());
1381:       assertFalse(node2.isGetProp());
1382:       assertFalse(node2.isParamList());
1383:       assertFalse(node2.isStringKey());
1384:       assertFalse(node2.isName());
1385:       assertEquals(0, node2.getChildCount());
1386:       assertFalse(node2.isVar());
1387:       assertFalse(node2.isCall());
1388:       assertFalse(node2.isComma());
1389:       assertFalse(node2.isDefaultCase());
1390:       assertFalse(node2.isTrue());
1391:       assertFalse(node2.isExprResult());
1392:       assertFalse(node2.isVoid());
1393:       assertFalse(node2.isNew());
1394:       assertFalse(node2.isDo());
1395:       assertFalse(node2.isAdd());
1396:       assertFalse(node2.isOr());
1397:       assertFalse(node2.isDelProp());
1398:       assertFalse(node2.isGetterDef());
1399:       assertFalse(node2.isIf());
1400:       assertFalse(node2.isNE());
1401:       assertFalse(node2.isEmpty());
1402:       assertFalse(node2.isFor());
1403:       assertFalse(node2.isArrayLit());
1404:       assertFalse(node2.isRegExp());
1405:       assertFalse(node2.isFunction());
1406:       assertFalse(node2.isCase());
1407:       assertFalse(node2.isSwitch());
1408:       assertFalse(node2.isTry());
1409:       assertFalse(node2.isDebugger());
1410:       assertEquals((-1), node2.getCharno());
1411:       assertFalse(node2.isSetterDef());
1412:       assertFalse(node2.isThis());
1413:       assertFalse(node2.isThrow());
1414:       assertFalse(node2.isInstanceOf());
1415:       assertFalse(node2.isHook());
1416:       assertFalse(node2.isBlock());
1417:       assertFalse(node2.isCatch());
1418:       assertFalse(node2.isFalse());
1419:       assertFalse(node2.isWith());
1420:       assertFalse(node2.isInc());
1421:       assertEquals(40, node2.getType());
1422:       assertFalse(node2.isIn());
1423:       assertFalse(node3.isParamList());
1424:       assertFalse(node3.isNull());
1425:       assertEquals(0, node3.getChildCount());
1426:       assertFalse(node3.isName());
1427:       assertFalse(node3.isStringKey());
1428:       assertFalse(node3.isCatch());
1429:       assertFalse(node3.isCall());
1430:       assertTrue(node3.isString());
1431:       assertFalse(node3.isTry());
1432:       assertFalse(node3.isBlock());
1433:       assertFalse(node3.isRegExp());
1434:       assertFalse(node3.isDebugger());
1435:       assertFalse(node3.isFor());
1436:       assertFalse(node3.isWhile());
1437:       assertFalse(node3.isGetterDef());
1438:       assertEquals((-1), node3.getLineno());
1439:       assertFalse(node3.isIn());
1440:       assertEquals((-1), node3.getSourcePosition());
1441:       assertFalse(node3.isNE());
1442:       assertFalse(node3.isContinue());
1443:       assertFalse(node3.hasMoreThanOneChild());
1444:       assertFalse(node3.isIf());
1445:       assertFalse(node3.isCast());
1446:       assertFalse(node3.isFunction());
1447:       assertEquals(40, node3.getType());
1448:       assertFalse(node3.isThrow());
1449:       assertFalse(node3.isInc());
1450:       assertFalse(node3.isSetterDef());
1451:       assertFalse(node3.isComma());
1452:       assertFalse(node3.isThis());
1453:       assertFalse(node3.isAnd());
1454:       assertFalse(node3.isFalse());
1455:       assertFalse(node3.isWith());
1456:       assertFalse(node3.isInstanceOf());
1457:       assertFalse(node3.isExprResult());
1458:       assertFalse(node3.isBreak());
1459:       assertFalse(node3.isSwitch());
1460:       assertEquals((-1), node3.getCharno());
1461:       assertFalse(node3.isHook());
1462:       assertFalse(node3.isCase());
1463:       assertFalse(node3.isNot());
1464:       assertFalse(node3.isObjectLit());
1465:       assertFalse(node3.isNumber());
1466:       assertFalse(node3.isScript());
1467:       assertFalse(node3.hasOneChild());
1468:       assertFalse(node3.isGetProp());
1469:       assertFalse(node3.isLabel());
1470:       assertFalse(node3.isOr());
1471:       assertFalse(node3.isAssignAdd());
1472:       assertFalse(node3.isTypeOf());
1473:       assertFalse(node3.isDec());
1474:       assertFalse(node3.hasChildren());
1475:       assertFalse(node3.isReturn());
1476:       assertFalse(node3.isLabelName());
1477:       assertFalse(node3.isAssign());
1478:       assertFalse(node3.isDelProp());
1479:       assertFalse(node3.isArrayLit());
1480:       assertFalse(node3.isGetElem());
1481:       assertFalse(node3.isNew());
1482:       assertFalse(node3.isAdd());
1483:       assertFalse(node3.isVoid());
1484:       assertFalse(node3.isVar());
1485:       assertFalse(node3.isTrue());
1486:       assertFalse(node3.isEmpty());
1487:       assertFalse(node3.isDo());
1488:       assertFalse(node3.isDefaultCase());
1489:       
1490:       boolean boolean0 = node2.isOnlyModifiesThisCall();
1491:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1493:       assertEquals(50, Node.FREE_CALL);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1496:       assertEquals(57, Node.REFLECTED_OBJECT);
1497:       assertEquals(4095, Node.COLUMN_MASK);
1498:       assertEquals(40, Node.ORIGINALNAME_PROP);
1499:       assertEquals(48, Node.DIRECTIVES);
1500:       assertEquals(43, Node.IS_CONSTANT_NAME);
1501:       assertEquals(54, Node.SLASH_V);
1502:       assertEquals(12, Node.COLUMN_BITS);
1503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1504:       assertEquals(32, Node.INCRDECR_PROP);
1505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1507:       assertEquals(1, Node.DECR_FLAG);
1508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1509:       assertEquals(56, Node.CHANGE_TIME);
1510:       assertEquals(2, Node.POST_FLAG);
1511:       assertEquals(47, Node.IS_DISPATCHER);
1512:       assertEquals(46, Node.IS_NAMESPACE);
1513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1514:       assertEquals(37, Node.OPT_ARG_NAME);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(49, Node.DIRECT_EVAL);
1517:       assertEquals(57, Node.LAST_PROP);
1518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1519:       assertEquals(36, Node.QUOTED_PROP);
1520:       assertEquals(52, Node.LENGTH);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(55, Node.INFERRED_FUNCTION);
1523:       assertEquals(29, Node.JSDOC_INFO_PROP);
1524:       assertEquals(53, Node.INPUT_ID);
1525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1526:       assertEquals(39, Node.EMPTY_BLOCK);
1527:       assertEquals(12, Node.COLUMN_BITS);
1528:       assertEquals(46, Node.IS_NAMESPACE);
1529:       assertEquals(30, Node.VAR_ARGS_NAME);
1530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1531:       assertEquals(37, Node.OPT_ARG_NAME);
1532:       assertEquals(54, Node.SLASH_V);
1533:       assertEquals(56, Node.CHANGE_TIME);
1534:       assertEquals(49, Node.DIRECT_EVAL);
1535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1536:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1537:       assertEquals(50, Node.FREE_CALL);
1538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1539:       assertEquals(32, Node.INCRDECR_PROP);
1540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1541:       assertEquals(1, Node.DECR_FLAG);
1542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1543:       assertEquals(4095, Node.COLUMN_MASK);
1544:       assertEquals(55, Node.INFERRED_FUNCTION);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1547:       assertEquals(48, Node.DIRECTIVES);
1548:       assertEquals(43, Node.IS_CONSTANT_NAME);
1549:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1550:       assertEquals(40, Node.ORIGINALNAME_PROP);
1551:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1552:       assertEquals(29, Node.JSDOC_INFO_PROP);
1553:       assertEquals(52, Node.LENGTH);
1554:       assertEquals(47, Node.IS_DISPATCHER);
1555:       assertEquals(57, Node.REFLECTED_OBJECT);
1556:       assertEquals(2, Node.POST_FLAG);
1557:       assertEquals(8, Node.FLAG_NO_THROWS);
1558:       assertEquals(39, Node.EMPTY_BLOCK);
1559:       assertEquals(53, Node.INPUT_ID);
1560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1561:       assertEquals(57, Node.LAST_PROP);
1562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1563:       assertEquals(37, Node.OPT_ARG_NAME);
1564:       assertEquals(2, Node.POST_FLAG);
1565:       assertEquals(32, Node.INCRDECR_PROP);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(47, Node.IS_DISPATCHER);
1568:       assertEquals(56, Node.CHANGE_TIME);
1569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1570:       assertEquals(12, Node.COLUMN_BITS);
1571:       assertEquals(1, Node.DECR_FLAG);
1572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1575:       assertEquals(29, Node.JSDOC_INFO_PROP);
1576:       assertEquals(53, Node.INPUT_ID);
1577:       assertEquals(54, Node.SLASH_V);
1578:       assertEquals(57, Node.LAST_PROP);
1579:       assertEquals(43, Node.IS_CONSTANT_NAME);
1580:       assertEquals(30, Node.VAR_ARGS_NAME);
1581:       assertEquals(40, Node.ORIGINALNAME_PROP);
1582:       assertEquals(48, Node.DIRECTIVES);
1583:       assertEquals(8, Node.FLAG_NO_THROWS);
1584:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1586:       assertEquals(50, Node.FREE_CALL);
1587:       assertEquals(55, Node.INFERRED_FUNCTION);
1588:       assertEquals(39, Node.EMPTY_BLOCK);
1589:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1592:       assertEquals(52, Node.LENGTH);
1593:       assertEquals(36, Node.QUOTED_PROP);
1594:       assertEquals(57, Node.REFLECTED_OBJECT);
1595:       assertEquals(49, Node.DIRECT_EVAL);
1596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1598:       assertEquals(4095, Node.COLUMN_MASK);
1599:       assertFalse(node0.equals((Object)node1));
1600:       assertFalse(node1.equals((Object)node2));
1601:       assertFalse(node1.equals((Object)node3));
1602:       assertFalse(node1.equals((Object)node0));
1603:       assertFalse(node2.equals((Object)node1));
1604:       assertSame(node0, node3);
1605:       assertSame(node0, node2);
1606:       assertSame(node2, node3);
1607:       assertSame(node2, node0);
1608:       assertFalse(boolean0);
1609:       assertFalse(node0.isThrow());
1610:       assertFalse(node0.isHook());
1611:       assertFalse(node0.isInc());
1612:       assertFalse(node0.isGetProp());
1613:       assertEquals((-1), node0.getCharno());
1614:       assertFalse(node0.isCase());
1615:       assertFalse(node0.isExprResult());
1616:       assertFalse(node0.isComma());
1617:       assertFalse(node0.isThis());
1618:       assertFalse(node0.isBreak());
1619:       assertFalse(node0.isInstanceOf());
1620:       assertFalse(node0.isWith());
1621:       assertFalse(node0.isCast());
1622:       assertFalse(node0.isIf());
1623:       assertFalse(node0.isDebugger());
1624:       assertFalse(node0.isNE());
1625:       assertEquals((-1), node0.getSourcePosition());
1626:       assertFalse(node0.isNot());
1627:       assertFalse(node0.isIn());
1628:       assertFalse(node0.isAnd());
1629:       assertFalse(node0.isObjectLit());
1630:       assertEquals(40, node0.getType());
1631:       assertFalse(node0.isFunction());
1632:       assertFalse(node0.isContinue());
1633:       assertFalse(node0.isFalse());
1634:       assertFalse(node0.isCall());
1635:       assertFalse(node0.isVar());
1636:       assertFalse(node0.isStringKey());
1637:       assertFalse(node0.isName());
1638:       assertTrue(node0.isString());
1639:       assertFalse(node0.isParamList());
1640:       assertFalse(node0.isNew());
1641:       assertFalse(node0.isAdd());
1642:       assertFalse(node0.isNull());
1643:       assertFalse(node0.isSetterDef());
1644:       assertFalse(node0.isCatch());
1645:       assertFalse(node0.isWhile());
1646:       assertFalse(node0.isReturn());
1647:       assertEquals((-1), node0.getLineno());
1648:       assertFalse(node0.isVoid());
1649:       assertFalse(node0.isBlock());
1650:       assertFalse(node0.hasChildren());
1651:       assertFalse(node0.isDec());
1652:       assertFalse(node0.isAssign());
1653:       assertFalse(node0.isTypeOf());
1654:       assertFalse(node0.isRegExp());
1655:       assertFalse(node0.hasMoreThanOneChild());
1656:       assertFalse(node0.isGetElem());
1657:       assertFalse(node0.isArrayLit());
1658:       assertFalse(node0.hasOneChild());
1659:       assertFalse(node0.isFor());
1660:       assertFalse(node0.isDelProp());
1661:       assertFalse(node0.isLabelName());
1662:       assertFalse(node0.isTry());
1663:       assertFalse(node0.isTrue());
1664:       assertFalse(node0.isScript());
1665:       assertFalse(node0.isGetterDef());
1666:       assertFalse(node0.isOr());
1667:       assertFalse(node0.isEmpty());
1668:       assertFalse(node0.isNumber());
1669:       assertFalse(node0.isDo());
1670:       assertFalse(node0.isAssignAdd());
1671:       assertFalse(node0.isSwitch());
1672:       assertFalse(node0.isDefaultCase());
1673:       assertFalse(node0.isLabel());
1674:       assertEquals(0, node0.getChildCount());
1675:       assertEquals((-1), node1.getLineno());
1676:       assertFalse(node1.isAssignAdd());
1677:       assertFalse(node1.isReturn());
1678:       assertFalse(node1.isLabel());
1679:       assertFalse(node1.isOr());
1680:       assertFalse(node1.isWhile());
1681:       assertFalse(node1.isNumber());
1682:       assertEquals((-1), node1.getSourcePosition());
1683:       assertFalse(node1.isDo());
1684:       assertFalse(node1.isAdd());
1685:       assertFalse(node1.isBlock());
1686:       assertFalse(node1.isWith());
1687:       assertFalse(node1.isName());
1688:       assertFalse(node1.isTypeOf());
1689:       assertFalse(node1.isDec());
1690:       assertFalse(node1.isAssign());
1691:       assertFalse(node1.isCall());
1692:       assertFalse(node1.isExprResult());
1693:       assertFalse(node1.hasMoreThanOneChild());
1694:       assertFalse(node1.isGetElem());
1695:       assertFalse(node1.isInstanceOf());
1696:       assertFalse(node1.isAnd());
1697:       assertFalse(node1.isNot());
1698:       assertFalse(node1.isObjectLit());
1699:       assertFalse(node1.isGetProp());
1700:       assertFalse(node1.isSetterDef());
1701:       assertFalse(node1.isDebugger());
1702:       assertFalse(node1.isThrow());
1703:       assertFalse(node1.isContinue());
1704:       assertFalse(node1.isFunction());
1705:       assertFalse(node1.isFalse());
1706:       assertFalse(node1.isCast());
1707:       assertEquals(1, node1.getChildCount());
1708:       assertFalse(node1.isIn());
1709:       assertFalse(node1.isNE());
1710:       assertFalse(node1.isGetterDef());
1711:       assertFalse(node1.isString());
1712:       assertFalse(node1.isCase());
1713:       assertFalse(node1.isInc());
1714:       assertFalse(node1.isEmpty());
1715:       assertFalse(node1.isHook());
1716:       assertFalse(node1.isTry());
1717:       assertFalse(node1.isTrue());
1718:       assertFalse(node1.isVoid());
1719:       assertFalse(node1.isFor());
1720:       assertFalse(node1.isDelProp());
1721:       assertFalse(node1.isBreak());
1722:       assertFalse(node1.isIf());
1723:       assertTrue(node1.hasOneChild());
1724:       assertFalse(node1.isRegExp());
1725:       assertFalse(node1.isComma());
1726:       assertTrue(node1.hasChildren());
1727:       assertFalse(node1.isCatch());
1728:       assertFalse(node1.isParamList());
1729:       assertFalse(node1.isThis());
1730:       assertFalse(node1.isNull());
1731:       assertEquals(9, node1.getType());
1732:       assertFalse(node1.isDefaultCase());
1733:       assertFalse(node1.isScript());
1734:       assertFalse(node1.isNew());
1735:       assertFalse(node1.isArrayLit());
1736:       assertEquals((-1), node1.getCharno());
1737:       assertFalse(node1.isSwitch());
1738:       assertFalse(node1.isVar());
1739:       assertFalse(node1.isStringKey());
1740:       assertFalse(node1.isLabelName());
1741:       assertFalse(node2.hasChildren());
1742:       assertFalse(node2.isDec());
1743:       assertEquals((-1), node2.getSourcePosition());
1744:       assertFalse(node2.isGetElem());
1745:       assertFalse(node2.isAssignAdd());
1746:       assertFalse(node2.isLabelName());
1747:       assertEquals((-1), node2.getLineno());
1748:       assertFalse(node2.isCast());
1749:       assertFalse(node2.isLabel());
1750:       assertFalse(node2.isReturn());
1751:       assertFalse(node2.isContinue());
1752:       assertFalse(node2.isAssign());
1753:       assertFalse(node2.hasMoreThanOneChild());
1754:       assertFalse(node2.isTypeOf());
1755:       assertFalse(node2.isWhile());
1756:       assertFalse(node2.isScript());
1757:       assertFalse(node2.isAnd());
1758:       assertTrue(node2.isString());
1759:       assertFalse(node2.hasOneChild());
1760:       assertFalse(node2.isObjectLit());
1761:       assertFalse(node2.isNot());
1762:       assertFalse(node2.isNumber());
1763:       assertFalse(node2.isBreak());
1764:       assertFalse(node2.isNull());
1765:       assertFalse(node2.isGetProp());
1766:       assertFalse(node2.isParamList());
1767:       assertFalse(node2.isStringKey());
1768:       assertFalse(node2.isName());
1769:       assertEquals(0, node2.getChildCount());
1770:       assertFalse(node2.isVar());
1771:       assertFalse(node2.isCall());
1772:       assertFalse(node2.isComma());
1773:       assertFalse(node2.isDefaultCase());
1774:       assertFalse(node2.isTrue());
1775:       assertFalse(node2.isExprResult());
1776:       assertFalse(node2.isVoid());
1777:       assertFalse(node2.isNew());
1778:       assertFalse(node2.isDo());
1779:       assertFalse(node2.isAdd());
1780:       assertFalse(node2.isOr());
1781:       assertFalse(node2.isDelProp());
1782:       assertFalse(node2.isGetterDef());
1783:       assertFalse(node2.isIf());
1784:       assertFalse(node2.isNE());
1785:       assertFalse(node2.isEmpty());
1786:       assertFalse(node2.isFor());
1787:       assertFalse(node2.isArrayLit());
1788:       assertFalse(node2.isRegExp());
1789:       assertFalse(node2.isFunction());
1790:       assertFalse(node2.isCase());
1791:       assertFalse(node2.isSwitch());
1792:       assertFalse(node2.isTry());
1793:       assertFalse(node2.isDebugger());
1794:       assertEquals((-1), node2.getCharno());
1795:       assertFalse(node2.isSetterDef());
1796:       assertFalse(node2.isThis());
1797:       assertFalse(node2.isThrow());
1798:       assertFalse(node2.isInstanceOf());
1799:       assertFalse(node2.isHook());
1800:       assertFalse(node2.isBlock());
1801:       assertFalse(node2.isCatch());
1802:       assertFalse(node2.isFalse());
1803:       assertFalse(node2.isWith());
1804:       assertFalse(node2.isInc());
1805:       assertEquals(40, node2.getType());
1806:       assertFalse(node2.isIn());
1807:       
1808:       boolean boolean1 = node2.isFor();
1809:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1810:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1811:       assertEquals(50, Node.FREE_CALL);
1812:       assertEquals(8, Node.FLAG_NO_THROWS);
1813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1814:       assertEquals(57, Node.REFLECTED_OBJECT);
1815:       assertEquals(4095, Node.COLUMN_MASK);
1816:       assertEquals(40, Node.ORIGINALNAME_PROP);
1817:       assertEquals(48, Node.DIRECTIVES);
1818:       assertEquals(43, Node.IS_CONSTANT_NAME);
1819:       assertEquals(54, Node.SLASH_V);
1820:       assertEquals(12, Node.COLUMN_BITS);
1821:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1822:       assertEquals(32, Node.INCRDECR_PROP);
1823:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1824:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1825:       assertEquals(1, Node.DECR_FLAG);
1826:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1827:       assertEquals(56, Node.CHANGE_TIME);
1828:       assertEquals(2, Node.POST_FLAG);
1829:       assertEquals(47, Node.IS_DISPATCHER);
1830:       assertEquals(46, Node.IS_NAMESPACE);
1831:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1832:       assertEquals(37, Node.OPT_ARG_NAME);
1833:       assertEquals(30, Node.VAR_ARGS_NAME);
1834:       assertEquals(49, Node.DIRECT_EVAL);
1835:       assertEquals(57, Node.LAST_PROP);
1836:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1837:       assertEquals(36, Node.QUOTED_PROP);
1838:       assertEquals(52, Node.LENGTH);
1839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1840:       assertEquals(55, Node.INFERRED_FUNCTION);
1841:       assertEquals(29, Node.JSDOC_INFO_PROP);
1842:       assertEquals(53, Node.INPUT_ID);
1843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1844:       assertEquals(39, Node.EMPTY_BLOCK);
1845:       assertEquals(12, Node.COLUMN_BITS);
1846:       assertEquals(46, Node.IS_NAMESPACE);
1847:       assertEquals(30, Node.VAR_ARGS_NAME);
1848:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1849:       assertEquals(37, Node.OPT_ARG_NAME);
1850:       assertEquals(54, Node.SLASH_V);
1851:       assertEquals(56, Node.CHANGE_TIME);
1852:       assertEquals(49, Node.DIRECT_EVAL);
1853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1855:       assertEquals(50, Node.FREE_CALL);
1856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1857:       assertEquals(32, Node.INCRDECR_PROP);
1858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1859:       assertEquals(1, Node.DECR_FLAG);
1860:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1861:       assertEquals(4095, Node.COLUMN_MASK);
1862:       assertEquals(55, Node.INFERRED_FUNCTION);
1863:       assertEquals(36, Node.QUOTED_PROP);
1864:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1865:       assertEquals(48, Node.DIRECTIVES);
1866:       assertEquals(43, Node.IS_CONSTANT_NAME);
1867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1868:       assertEquals(40, Node.ORIGINALNAME_PROP);
1869:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1870:       assertEquals(29, Node.JSDOC_INFO_PROP);
1871:       assertEquals(52, Node.LENGTH);
1872:       assertEquals(47, Node.IS_DISPATCHER);
1873:       assertEquals(57, Node.REFLECTED_OBJECT);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(8, Node.FLAG_NO_THROWS);
1876:       assertEquals(39, Node.EMPTY_BLOCK);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1879:       assertEquals(57, Node.LAST_PROP);
1880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1881:       assertEquals(37, Node.OPT_ARG_NAME);
1882:       assertEquals(2, Node.POST_FLAG);
1883:       assertEquals(32, Node.INCRDECR_PROP);
1884:       assertEquals(46, Node.IS_NAMESPACE);
1885:       assertEquals(47, Node.IS_DISPATCHER);
1886:       assertEquals(56, Node.CHANGE_TIME);
1887:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1888:       assertEquals(12, Node.COLUMN_BITS);
1889:       assertEquals(1, Node.DECR_FLAG);
1890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1893:       assertEquals(29, Node.JSDOC_INFO_PROP);
1894:       assertEquals(53, Node.INPUT_ID);
1895:       assertEquals(54, Node.SLASH_V);
1896:       assertEquals(57, Node.LAST_PROP);
1897:       assertEquals(43, Node.IS_CONSTANT_NAME);
1898:       assertEquals(30, Node.VAR_ARGS_NAME);
1899:       assertEquals(40, Node.ORIGINALNAME_PROP);
1900:       assertEquals(48, Node.DIRECTIVES);
1901:       assertEquals(8, Node.FLAG_NO_THROWS);
1902:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1903:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1904:       assertEquals(50, Node.FREE_CALL);
1905:       assertEquals(55, Node.INFERRED_FUNCTION);
1906:       assertEquals(39, Node.EMPTY_BLOCK);
1907:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1908:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1909:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1910:       assertEquals(52, Node.LENGTH);
1911:       assertEquals(36, Node.QUOTED_PROP);
1912:       assertEquals(57, Node.REFLECTED_OBJECT);
1913:       assertEquals(49, Node.DIRECT_EVAL);
1914:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1915:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1916:       assertEquals(4095, Node.COLUMN_MASK);
1917:       assertFalse(node0.equals((Object)node1));
1918:       assertFalse(node1.equals((Object)node2));
1919:       assertFalse(node1.equals((Object)node3));
1920:       assertFalse(node1.equals((Object)node0));
1921:       assertFalse(node2.equals((Object)node1));
1922:       assertTrue(boolean1 == boolean0);
1923:       assertSame(node0, node3);
1924:       assertSame(node0, node2);
1925:       assertSame(node2, node3);
1926:       assertSame(node2, node0);
1927:       assertFalse(boolean1);
1928:       assertFalse(node0.isThrow());
1929:       assertFalse(node0.isHook());
1930:       assertFalse(node0.isInc());
1931:       assertFalse(node0.isGetProp());
1932:       assertEquals((-1), node0.getCharno());
1933:       assertFalse(node0.isCase());
1934:       assertFalse(node0.isExprResult());
1935:       assertFalse(node0.isComma());
1936:       assertFalse(node0.isThis());
1937:       assertFalse(node0.isBreak());
1938:       assertFalse(node0.isInstanceOf());
1939:       assertFalse(node0.isWith());
1940:       assertFalse(node0.isCast());
1941:       assertFalse(node0.isIf());
1942:       assertFalse(node0.isDebugger());
1943:       assertFalse(node0.isNE());
1944:       assertEquals((-1), node0.getSourcePosition());
1945:       assertFalse(node0.isNot());
1946:       assertFalse(node0.isIn());
1947:       assertFalse(node0.isAnd());
1948:       assertFalse(node0.isObjectLit());
1949:       assertEquals(40, node0.getType());
1950:       assertFalse(node0.isFunction());
1951:       assertFalse(node0.isContinue());
1952:       assertFalse(node0.isFalse());
1953:       assertFalse(node0.isCall());
1954:       assertFalse(node0.isVar());
1955:       assertFalse(node0.isStringKey());
1956:       assertFalse(node0.isName());
1957:       assertTrue(node0.isString());
1958:       assertFalse(node0.isParamList());
1959:       assertFalse(node0.isNew());
1960:       assertFalse(node0.isAdd());
1961:       assertFalse(node0.isNull());
1962:       assertFalse(node0.isSetterDef());
1963:       assertFalse(node0.isCatch());
1964:       assertFalse(node0.isWhile());
1965:       assertFalse(node0.isReturn());
1966:       assertEquals((-1), node0.getLineno());
1967:       assertFalse(node0.isVoid());
1968:       assertFalse(node0.isBlock());
1969:       assertFalse(node0.hasChildren());
1970:       assertFalse(node0.isDec());
1971:       assertFalse(node0.isAssign());
1972:       assertFalse(node0.isTypeOf());
1973:       assertFalse(node0.isRegExp());
1974:       assertFalse(node0.hasMoreThanOneChild());
1975:       assertFalse(node0.isGetElem());
1976:       assertFalse(node0.isArrayLit());
1977:       assertFalse(node0.hasOneChild());
1978:       assertFalse(node0.isFor());
1979:       assertFalse(node0.isDelProp());
1980:       assertFalse(node0.isLabelName());
1981:       assertFalse(node0.isTry());
1982:       assertFalse(node0.isTrue());
1983:       assertFalse(node0.isScript());
1984:       assertFalse(node0.isGetterDef());
1985:       assertFalse(node0.isOr());
1986:       assertFalse(node0.isEmpty());
1987:       assertFalse(node0.isNumber());
1988:       assertFalse(node0.isDo());
1989:       assertFalse(node0.isAssignAdd());
1990:       assertFalse(node0.isSwitch());
1991:       assertFalse(node0.isDefaultCase());
1992:       assertFalse(node0.isLabel());
1993:       assertEquals(0, node0.getChildCount());
1994:       assertEquals((-1), node1.getLineno());
1995:       assertFalse(node1.isAssignAdd());
1996:       assertFalse(node1.isReturn());
1997:       assertFalse(node1.isLabel());
1998:       assertFalse(node1.isOr());
1999:       assertFalse(node1.isWhile());
2000:       assertFalse(node1.isNumber());
2001:       assertEquals((-1), node1.getSourcePosition());
2002:       assertFalse(node1.isDo());
2003:       assertFalse(node1.isAdd());
2004:       assertFalse(node1.isBlock());
2005:       assertFalse(node1.isWith());
2006:       assertFalse(node1.isName());
2007:       assertFalse(node1.isTypeOf());
2008:       assertFalse(node1.isDec());
2009:       assertFalse(node1.isAssign());
2010:       assertFalse(node1.isCall());
2011:       assertFalse(node1.isExprResult());
2012:       assertFalse(node1.hasMoreThanOneChild());
2013:       assertFalse(node1.isGetElem());
2014:       assertFalse(node1.isInstanceOf());
2015:       assertFalse(node1.isAnd());
2016:       assertFalse(node1.isNot());
2017:       assertFalse(node1.isObjectLit());
2018:       assertFalse(node1.isGetProp());
2019:       assertFalse(node1.isSetterDef());
2020:       assertFalse(node1.isDebugger());
2021:       assertFalse(node1.isThrow());
2022:       assertFalse(node1.isContinue());
2023:       assertFalse(node1.isFunction());
2024:       assertFalse(node1.isFalse());
2025:       assertFalse(node1.isCast());
2026:       assertEquals(1, node1.getChildCount());
2027:       assertFalse(node1.isIn());
2028:       assertFalse(node1.isNE());
2029:       assertFalse(node1.isGetterDef());
2030:       assertFalse(node1.isString());
2031:       assertFalse(node1.isCase());
2032:       assertFalse(node1.isInc());
2033:       assertFalse(node1.isEmpty());
2034:       assertFalse(node1.isHook());
2035:       assertFalse(node1.isTry());
2036:       assertFalse(node1.isTrue());
2037:       assertFalse(node1.isVoid());
2038:       assertFalse(node1.isFor());
2039:       assertFalse(node1.isDelProp());
2040:       assertFalse(node1.isBreak());
2041:       assertFalse(node1.isIf());
2042:       assertTrue(node1.hasOneChild());
2043:       assertFalse(node1.isRegExp());
2044:       assertFalse(node1.isComma());
2045:       assertTrue(node1.hasChildren());
2046:       assertFalse(node1.isCatch());
2047:       assertFalse(node1.isParamList());
2048:       assertFalse(node1.isThis());
2049:       assertFalse(node1.isNull());
2050:       assertEquals(9, node1.getType());
2051:       assertFalse(node1.isDefaultCase());
2052:       assertFalse(node1.isScript());
2053:       assertFalse(node1.isNew());
2054:       assertFalse(node1.isArrayLit());
2055:       assertEquals((-1), node1.getCharno());
2056:       assertFalse(node1.isSwitch());
2057:       assertFalse(node1.isVar());
2058:       assertFalse(node1.isStringKey());
2059:       assertFalse(node1.isLabelName());
2060:       assertFalse(node2.hasChildren());
2061:       assertFalse(node2.isDec());
2062:       assertEquals((-1), node2.getSourcePosition());
2063:       assertFalse(node2.isGetElem());
2064:       assertFalse(node2.isAssignAdd());
2065:       assertFalse(node2.isLabelName());
2066:       assertEquals((-1), node2.getLineno());
2067:       assertFalse(node2.isCast());
2068:       assertFalse(node2.isLabel());
2069:       assertFalse(node2.isReturn());
2070:       assertFalse(node2.isContinue());
2071:       assertFalse(node2.isAssign());
2072:       assertFalse(node2.hasMoreThanOneChild());
2073:       assertFalse(node2.isTypeOf());
2074:       assertFalse(node2.isWhile());
2075:       assertFalse(node2.isScript());
2076:       assertFalse(node2.isAnd());
2077:       assertTrue(node2.isString());
2078:       assertFalse(node2.hasOneChild());
2079:       assertFalse(node2.isObjectLit());
2080:       assertFalse(node2.isNot());
2081:       assertFalse(node2.isNumber());
2082:       assertFalse(node2.isBreak());
2083:       assertFalse(node2.isNull());
2084:       assertFalse(node2.isGetProp());
2085:       assertFalse(node2.isParamList());
2086:       assertFalse(node2.isStringKey());
2087:       assertFalse(node2.isName());
2088:       assertEquals(0, node2.getChildCount());
2089:       assertFalse(node2.isVar());
2090:       assertFalse(node2.isCall());
2091:       assertFalse(node2.isComma());
2092:       assertFalse(node2.isDefaultCase());
2093:       assertFalse(node2.isTrue());
2094:       assertFalse(node2.isExprResult());
2095:       assertFalse(node2.isVoid());
2096:       assertFalse(node2.isNew());
2097:       assertFalse(node2.isDo());
2098:       assertFalse(node2.isAdd());
2099:       assertFalse(node2.isOr());
2100:       assertFalse(node2.isDelProp());
2101:       assertFalse(node2.isGetterDef());
2102:       assertFalse(node2.isIf());
2103:       assertFalse(node2.isNE());
2104:       assertFalse(node2.isEmpty());
2105:       assertFalse(node2.isFor());
2106:       assertFalse(node2.isArrayLit());
2107:       assertFalse(node2.isRegExp());
2108:       assertFalse(node2.isFunction());
2109:       assertFalse(node2.isCase());
2110:       assertFalse(node2.isSwitch());
2111:       assertFalse(node2.isTry());
2112:       assertFalse(node2.isDebugger());
2113:       assertEquals((-1), node2.getCharno());
2114:       assertFalse(node2.isSetterDef());
2115:       assertFalse(node2.isThis());
2116:       assertFalse(node2.isThrow());
2117:       assertFalse(node2.isInstanceOf());
2118:       assertFalse(node2.isHook());
2119:       assertFalse(node2.isBlock());
2120:       assertFalse(node2.isCatch());
2121:       assertFalse(node2.isFalse());
2122:       assertFalse(node2.isWith());
2123:       assertFalse(node2.isInc());
2124:       assertEquals(40, node2.getType());
2125:       assertFalse(node2.isIn());
2126:       
2127:       boolean boolean2 = node0.isArrayLit();
2128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2130:       assertEquals(50, Node.FREE_CALL);
2131:       assertEquals(8, Node.FLAG_NO_THROWS);
2132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2133:       assertEquals(57, Node.REFLECTED_OBJECT);
2134:       assertEquals(4095, Node.COLUMN_MASK);
2135:       assertEquals(40, Node.ORIGINALNAME_PROP);
2136:       assertEquals(48, Node.DIRECTIVES);
2137:       assertEquals(43, Node.IS_CONSTANT_NAME);
2138:       assertEquals(54, Node.SLASH_V);
2139:       assertEquals(12, Node.COLUMN_BITS);
2140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2141:       assertEquals(32, Node.INCRDECR_PROP);
2142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2144:       assertEquals(1, Node.DECR_FLAG);
2145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2146:       assertEquals(56, Node.CHANGE_TIME);
2147:       assertEquals(2, Node.POST_FLAG);
2148:       assertEquals(47, Node.IS_DISPATCHER);
2149:       assertEquals(46, Node.IS_NAMESPACE);
2150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2151:       assertEquals(37, Node.OPT_ARG_NAME);
2152:       assertEquals(30, Node.VAR_ARGS_NAME);
2153:       assertEquals(49, Node.DIRECT_EVAL);
2154:       assertEquals(57, Node.LAST_PROP);
2155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2156:       assertEquals(36, Node.QUOTED_PROP);
2157:       assertEquals(52, Node.LENGTH);
2158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2159:       assertEquals(55, Node.INFERRED_FUNCTION);
2160:       assertEquals(29, Node.JSDOC_INFO_PROP);
2161:       assertEquals(53, Node.INPUT_ID);
2162:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2163:       assertEquals(39, Node.EMPTY_BLOCK);
2164:       assertFalse(node0.equals((Object)node1));
2165:       assertTrue(boolean2 == boolean1);
2166:       assertTrue(boolean2 == boolean0);
2167:       assertSame(node0, node3);
2168:       assertSame(node0, node2);
2169:       assertFalse(boolean2);
2170:       assertFalse(node0.isThrow());
2171:       assertFalse(node0.isHook());
2172:       assertFalse(node0.isInc());
2173:       assertFalse(node0.isGetProp());
2174:       assertEquals((-1), node0.getCharno());
2175:       assertFalse(node0.isCase());
2176:       assertFalse(node0.isExprResult());
2177:       assertFalse(node0.isComma());
2178:       assertFalse(node0.isThis());
2179:       assertFalse(node0.isBreak());
2180:       assertFalse(node0.isInstanceOf());
2181:       assertFalse(node0.isWith());
2182:       assertFalse(node0.isCast());
2183:       assertFalse(node0.isIf());
2184:       assertFalse(node0.isDebugger());
2185:       assertFalse(node0.isNE());
2186:       assertEquals((-1), node0.getSourcePosition());
2187:       assertFalse(node0.isNot());
2188:       assertFalse(node0.isIn());
2189:       assertFalse(node0.isAnd());
2190:       assertFalse(node0.isObjectLit());
2191:       assertEquals(40, node0.getType());
2192:       assertFalse(node0.isFunction());
2193:       assertFalse(node0.isContinue());
2194:       assertFalse(node0.isFalse());
2195:       assertFalse(node0.isCall());
2196:       assertFalse(node0.isVar());
2197:       assertFalse(node0.isStringKey());
2198:       assertFalse(node0.isName());
2199:       assertTrue(node0.isString());
2200:       assertFalse(node0.isParamList());
2201:       assertFalse(node0.isNew());
2202:       assertFalse(node0.isAdd());
2203:       assertFalse(node0.isNull());
2204:       assertFalse(node0.isSetterDef());
2205:       assertFalse(node0.isCatch());
2206:       assertFalse(node0.isWhile());
2207:       assertFalse(node0.isReturn());
2208:       assertEquals((-1), node0.getLineno());
2209:       assertFalse(node0.isVoid());
2210:       assertFalse(node0.isBlock());
2211:       assertFalse(node0.hasChildren());
2212:       assertFalse(node0.isDec());
2213:       assertFalse(node0.isAssign());
2214:       assertFalse(node0.isTypeOf());
2215:       assertFalse(node0.isRegExp());
2216:       assertFalse(node0.hasMoreThanOneChild());
2217:       assertFalse(node0.isGetElem());
2218:       assertFalse(node0.isArrayLit());
2219:       assertFalse(node0.hasOneChild());
2220:       assertFalse(node0.isFor());
2221:       assertFalse(node0.isDelProp());
2222:       assertFalse(node0.isLabelName());
2223:       assertFalse(node0.isTry());
2224:       assertFalse(node0.isTrue());
2225:       assertFalse(node0.isScript());
2226:       assertFalse(node0.isGetterDef());
2227:       assertFalse(node0.isOr());
2228:       assertFalse(node0.isEmpty());
2229:       assertFalse(node0.isNumber());
2230:       assertFalse(node0.isDo());
2231:       assertFalse(node0.isAssignAdd());
2232:       assertFalse(node0.isSwitch());
2233:       assertFalse(node0.isDefaultCase());
2234:       assertFalse(node0.isLabel());
2235:       assertEquals(0, node0.getChildCount());
2236:       
2237:       boolean boolean3 = node1.isDebugger();
2238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2239:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2240:       assertEquals(50, Node.FREE_CALL);
2241:       assertEquals(8, Node.FLAG_NO_THROWS);
2242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2243:       assertEquals(57, Node.REFLECTED_OBJECT);
2244:       assertEquals(4095, Node.COLUMN_MASK);
2245:       assertEquals(40, Node.ORIGINALNAME_PROP);
2246:       assertEquals(48, Node.DIRECTIVES);
2247:       assertEquals(43, Node.IS_CONSTANT_NAME);
2248:       assertEquals(54, Node.SLASH_V);
2249:       assertEquals(12, Node.COLUMN_BITS);
2250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2251:       assertEquals(32, Node.INCRDECR_PROP);
2252:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2254:       assertEquals(1, Node.DECR_FLAG);
2255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2256:       assertEquals(56, Node.CHANGE_TIME);
2257:       assertEquals(2, Node.POST_FLAG);
2258:       assertEquals(47, Node.IS_DISPATCHER);
2259:       assertEquals(46, Node.IS_NAMESPACE);
2260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2261:       assertEquals(37, Node.OPT_ARG_NAME);
2262:       assertEquals(30, Node.VAR_ARGS_NAME);
2263:       assertEquals(49, Node.DIRECT_EVAL);
2264:       assertEquals(57, Node.LAST_PROP);
2265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2266:       assertEquals(36, Node.QUOTED_PROP);
2267:       assertEquals(52, Node.LENGTH);
2268:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2269:       assertEquals(55, Node.INFERRED_FUNCTION);
2270:       assertEquals(29, Node.JSDOC_INFO_PROP);
2271:       assertEquals(53, Node.INPUT_ID);
2272:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2273:       assertEquals(39, Node.EMPTY_BLOCK);
2274:       assertEquals(12, Node.COLUMN_BITS);
2275:       assertEquals(46, Node.IS_NAMESPACE);
2276:       assertEquals(30, Node.VAR_ARGS_NAME);
2277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2278:       assertEquals(37, Node.OPT_ARG_NAME);
2279:       assertEquals(54, Node.SLASH_V);
2280:       assertEquals(56, Node.CHANGE_TIME);
2281:       assertEquals(49, Node.DIRECT_EVAL);
2282:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2284:       assertEquals(50, Node.FREE_CALL);
2285:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2286:       assertEquals(32, Node.INCRDECR_PROP);
2287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2288:       assertEquals(1, Node.DECR_FLAG);
2289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2290:       assertEquals(4095, Node.COLUMN_MASK);
2291:       assertEquals(55, Node.INFERRED_FUNCTION);
2292:       assertEquals(36, Node.QUOTED_PROP);
2293:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2294:       assertEquals(48, Node.DIRECTIVES);
2295:       assertEquals(43, Node.IS_CONSTANT_NAME);
2296:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2297:       assertEquals(40, Node.ORIGINALNAME_PROP);
2298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2299:       assertEquals(29, Node.JSDOC_INFO_PROP);
2300:       assertEquals(52, Node.LENGTH);
2301:       assertEquals(47, Node.IS_DISPATCHER);
2302:       assertEquals(57, Node.REFLECTED_OBJECT);
2303:       assertEquals(2, Node.POST_FLAG);
2304:       assertEquals(8, Node.FLAG_NO_THROWS);
2305:       assertEquals(39, Node.EMPTY_BLOCK);
2306:       assertEquals(53, Node.INPUT_ID);
2307:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2308:       assertEquals(57, Node.LAST_PROP);
2309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2310:       assertFalse(node0.equals((Object)node1));
2311:       assertFalse(node1.equals((Object)node2));
2312:       assertFalse(node1.equals((Object)node3));
2313:       assertFalse(node1.equals((Object)node0));
2314:       assertTrue(boolean3 == boolean0);
2315:       assertTrue(boolean3 == boolean1);
2316:       assertTrue(boolean3 == boolean2);
2317:       assertSame(node0, node3);
2318:       assertSame(node0, node2);
2319:       assertFalse(boolean3);
2320:       assertFalse(node0.isThrow());
2321:       assertFalse(node0.isHook());
2322:       assertFalse(node0.isInc());
2323:       assertFalse(node0.isGetProp());
2324:       assertEquals((-1), node0.getCharno());
2325:       assertFalse(node0.isCase());
2326:       assertFalse(node0.isExprResult());
2327:       assertFalse(node0.isComma());
2328:       assertFalse(node0.isThis());
2329:       assertFalse(node0.isBreak());
2330:       assertFalse(node0.isInstanceOf());
2331:       assertFalse(node0.isWith());
2332:       assertFalse(node0.isCast());
2333:       assertFalse(node0.isIf());
2334:       assertFalse(node0.isDebugger());
2335:       assertFalse(node0.isNE());
2336:       assertEquals((-1), node0.getSourcePosition());
2337:       assertFalse(node0.isNot());
2338:       assertFalse(node0.isIn());
2339:       assertFalse(node0.isAnd());
2340:       assertFalse(node0.isObjectLit());
2341:       assertEquals(40, node0.getType());
2342:       assertFalse(node0.isFunction());
2343:       assertFalse(node0.isContinue());
2344:       assertFalse(node0.isFalse());
2345:       assertFalse(node0.isCall());
2346:       assertFalse(node0.isVar());
2347:       assertFalse(node0.isStringKey());
2348:       assertFalse(node0.isName());
2349:       assertTrue(node0.isString());
2350:       assertFalse(node0.isParamList());
2351:       assertFalse(node0.isNew());
2352:       assertFalse(node0.isAdd());
2353:       assertFalse(node0.isNull());
2354:       assertFalse(node0.isSetterDef());
2355:       assertFalse(node0.isCatch());
2356:       assertFalse(node0.isWhile());
2357:       assertFalse(node0.isReturn());
2358:       assertEquals((-1), node0.getLineno());
2359:       assertFalse(node0.isVoid());
2360:       assertFalse(node0.isBlock());
2361:       assertFalse(node0.hasChildren());
2362:       assertFalse(node0.isDec());
2363:       assertFalse(node0.isAssign());
2364:       assertFalse(node0.isTypeOf());
2365:       assertFalse(node0.isRegExp());
2366:       assertFalse(node0.hasMoreThanOneChild());
2367:       assertFalse(node0.isGetElem());
2368:       assertFalse(node0.isArrayLit());
2369:       assertFalse(node0.hasOneChild());
2370:       assertFalse(node0.isFor());
2371:       assertFalse(node0.isDelProp());
2372:       assertFalse(node0.isLabelName());
2373:       assertFalse(node0.isTry());
2374:       assertFalse(node0.isTrue());
2375:       assertFalse(node0.isScript());
2376:       assertFalse(node0.isGetterDef());
2377:       assertFalse(node0.isOr());
2378:       assertFalse(node0.isEmpty());
2379:       assertFalse(node0.isNumber());
2380:       assertFalse(node0.isDo());
2381:       assertFalse(node0.isAssignAdd());
2382:       assertFalse(node0.isSwitch());
2383:       assertFalse(node0.isDefaultCase());
2384:       assertFalse(node0.isLabel());
2385:       assertEquals(0, node0.getChildCount());
2386:       assertEquals((-1), node1.getLineno());
2387:       assertFalse(node1.isAssignAdd());
2388:       assertFalse(node1.isReturn());
2389:       assertFalse(node1.isLabel());
2390:       assertFalse(node1.isOr());
2391:       assertFalse(node1.isWhile());
2392:       assertFalse(node1.isNumber());
2393:       assertEquals((-1), node1.getSourcePosition());
2394:       assertFalse(node1.isDo());
2395:       assertFalse(node1.isAdd());
2396:       assertFalse(node1.isBlock());
2397:       assertFalse(node1.isWith());
2398:       assertFalse(node1.isName());
2399:       assertFalse(node1.isTypeOf());
2400:       assertFalse(node1.isDec());
2401:       assertFalse(node1.isAssign());
2402:       assertFalse(node1.isCall());
2403:       assertFalse(node1.isExprResult());
2404:       assertFalse(node1.hasMoreThanOneChild());
2405:       assertFalse(node1.isGetElem());
2406:       assertFalse(node1.isInstanceOf());
2407:       assertFalse(node1.isAnd());
2408:       assertFalse(node1.isNot());
2409:       assertFalse(node1.isObjectLit());
2410:       assertFalse(node1.isGetProp());
2411:       assertFalse(node1.isSetterDef());
2412:       assertFalse(node1.isDebugger());
2413:       assertFalse(node1.isThrow());
2414:       assertFalse(node1.isContinue());
2415:       assertFalse(node1.isFunction());
2416:       assertFalse(node1.isFalse());
2417:       assertFalse(node1.isCast());
2418:       assertEquals(1, node1.getChildCount());
2419:       assertFalse(node1.isIn());
2420:       assertFalse(node1.isNE());
2421:       assertFalse(node1.isGetterDef());
2422:       assertFalse(node1.isString());
2423:       assertFalse(node1.isCase());
2424:       assertFalse(node1.isInc());
2425:       assertFalse(node1.isEmpty());
2426:       assertFalse(node1.isHook());
2427:       assertFalse(node1.isTry());
2428:       assertFalse(node1.isTrue());
2429:       assertFalse(node1.isVoid());
2430:       assertFalse(node1.isFor());
2431:       assertFalse(node1.isDelProp());
2432:       assertFalse(node1.isBreak());
2433:       assertFalse(node1.isIf());
2434:       assertTrue(node1.hasOneChild());
2435:       assertFalse(node1.isRegExp());
2436:       assertFalse(node1.isComma());
2437:       assertTrue(node1.hasChildren());
2438:       assertFalse(node1.isCatch());
2439:       assertFalse(node1.isParamList());
2440:       assertFalse(node1.isThis());
2441:       assertFalse(node1.isNull());
2442:       assertEquals(9, node1.getType());
2443:       assertFalse(node1.isDefaultCase());
2444:       assertFalse(node1.isScript());
2445:       assertFalse(node1.isNew());
2446:       assertFalse(node1.isArrayLit());
2447:       assertEquals((-1), node1.getCharno());
2448:       assertFalse(node1.isSwitch());
2449:       assertFalse(node1.isVar());
2450:       assertFalse(node1.isStringKey());
2451:       assertFalse(node1.isLabelName());
2452:   }
2453: }
RegularFileObject[/tmp/EvoSuite_367_1628160199669/com/google/javascript/rhino/Node_367_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_367_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_367_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_367_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:20.251 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("IVh)KYu<s}wr[r");
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node0);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

int int0 = node0.getSourceOffset();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals((-1), int0);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Node node1 = new Node(9, node0, 38, (-2273));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());

Node node2 = node0.copyInformationFrom(node1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());

Iterable<Node> iterable0 = node2.children();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());

Node node3 = node2.useSourceInfoFrom(node1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertSame(node0, node3);
assertSame(node0, node2);
assertSame(node2, node3);
assertSame(node2, node0);
assertSame(node3, node0);
assertSame(node3, node2);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isWhile());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isLabel());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetElem());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isVar());
assertFalse(node3.isTrue());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());

boolean boolean0 = node2.isOnlyModifiesThisCall();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node3);
assertSame(node0, node2);
assertSame(node2, node3);
assertSame(node2, node0);
assertFalse(boolean0);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());

boolean boolean1 = node2.isFor();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertSame(node0, node3);
assertSame(node0, node2);
assertSame(node2, node3);
assertSame(node2, node0);
assertFalse(boolean1);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertEquals(40, node2.getType());
assertFalse(node2.isIn());

boolean boolean2 = node0.isArrayLit();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertSame(node0, node3);
assertSame(node0, node2);
assertFalse(boolean2);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

boolean boolean3 = node1.isDebugger();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertSame(node0, node3);
assertSame(node0, node2);
assertFalse(boolean3);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertEquals(9, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());


[MASTER] 10:43:20.881 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_373_1628160200585/com/google/javascript/rhino/Node_373_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_373_1628160200585/com/google/javascript/rhino/Node_373_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:20.881 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:20.881 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:20.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1111
[MASTER] 10:43:20.919 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_373_1628160200585/com/google/javascript/rhino/Node_373_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_373_tmp__ESTest extends Node_373_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(":5hjZ,_yR");
22:       assertEquals(2, Node.POST_FLAG);
23:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
24:       assertEquals(37, Node.OPT_ARG_NAME);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(46, Node.IS_NAMESPACE);
27:       assertEquals(47, Node.IS_DISPATCHER);
28:       assertEquals(12, Node.COLUMN_BITS);
29:       assertEquals(51, Node.STATIC_SOURCE_FILE);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(29, Node.JSDOC_INFO_PROP);
32:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
33:       assertEquals(1, Node.DECR_FLAG);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(53, Node.INPUT_ID);
36:       assertEquals(36, Node.QUOTED_PROP);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
44:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(50, Node.FREE_CALL);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
51:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(30, Node.VAR_ARGS_NAME);
56:       assertEquals(54, Node.SLASH_V);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isLabelName());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isLabel());
65:       assertEquals((-1), node0.getLineno());
66:       assertFalse(node0.isExprResult());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isCast());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.isContinue());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isWith());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isAssignAdd());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isNot());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isWhile());
89:       assertFalse(node0.isDebugger());
90:       assertFalse(node0.isGetProp());
91:       assertEquals((-1), node0.getSourcePosition());
92:       assertFalse(node0.isObjectLit());
93:       assertFalse(node0.isEmpty());
94:       assertFalse(node0.isFor());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.isNE());
97:       assertFalse(node0.isDelProp());
98:       assertFalse(node0.isIf());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.isFunction());
101:       assertEquals(40, node0.getType());
102:       assertFalse(node0.isVoid());
103:       assertFalse(node0.isDefaultCase());
104:       assertFalse(node0.isTrue());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isSetterDef());
107:       assertFalse(node0.isIn());
108:       assertFalse(node0.isStringKey());
109:       assertFalse(node0.isVar());
110:       assertFalse(node0.isParamList());
111:       assertFalse(node0.isBlock());
112:       assertFalse(node0.isHook());
113:       assertFalse(node0.isThis());
114:       assertEquals(0, node0.getChildCount());
115:       assertFalse(node0.isInstanceOf());
116:       assertFalse(node0.isCatch());
117:       assertFalse(node0.isCase());
118:       assertFalse(node0.isSwitch());
119:       assertTrue(node0.isString());
120:       assertFalse(node0.isTry());
121:       assertEquals((-1), node0.getCharno());
122:       assertFalse(node0.isScript());
123:       assertFalse(node0.isGetterDef());
124:       assertFalse(node0.isNumber());
125:       
126:       Node node1 = new Node(2342, node0, node0);
127:       assertEquals(2, Node.POST_FLAG);
128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
129:       assertEquals(37, Node.OPT_ARG_NAME);
130:       assertEquals(56, Node.CHANGE_TIME);
131:       assertEquals(46, Node.IS_NAMESPACE);
132:       assertEquals(47, Node.IS_DISPATCHER);
133:       assertEquals(12, Node.COLUMN_BITS);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(29, Node.JSDOC_INFO_PROP);
137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(53, Node.INPUT_ID);
141:       assertEquals(36, Node.QUOTED_PROP);
142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(4095, Node.COLUMN_MASK);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(49, Node.DIRECT_EVAL);
148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(30, Node.VAR_ARGS_NAME);
161:       assertEquals(54, Node.SLASH_V);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertEquals(40, Node.ORIGINALNAME_PROP);
164:       assertEquals(50, Node.FREE_CALL);
165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
166:       assertEquals(52, Node.LENGTH);
167:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
168:       assertEquals(8, Node.FLAG_NO_THROWS);
169:       assertEquals(48, Node.DIRECTIVES);
170:       assertEquals(57, Node.REFLECTED_OBJECT);
171:       assertEquals(54, Node.SLASH_V);
172:       assertEquals(51, Node.STATIC_SOURCE_FILE);
173:       assertEquals(49, Node.DIRECT_EVAL);
174:       assertEquals(1, Node.DECR_FLAG);
175:       assertEquals(4095, Node.COLUMN_MASK);
176:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
178:       assertEquals(32, Node.INCRDECR_PROP);
179:       assertEquals(12, Node.COLUMN_BITS);
180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
181:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
182:       assertEquals(53, Node.INPUT_ID);
183:       assertEquals(29, Node.JSDOC_INFO_PROP);
184:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
185:       assertEquals(37, Node.OPT_ARG_NAME);
186:       assertEquals(36, Node.QUOTED_PROP);
187:       assertEquals(43, Node.IS_CONSTANT_NAME);
188:       assertEquals(56, Node.CHANGE_TIME);
189:       assertEquals(46, Node.IS_NAMESPACE);
190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
191:       assertEquals(30, Node.VAR_ARGS_NAME);
192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
193:       assertEquals(55, Node.INFERRED_FUNCTION);
194:       assertEquals(39, Node.EMPTY_BLOCK);
195:       assertEquals(2, Node.POST_FLAG);
196:       assertEquals(57, Node.LAST_PROP);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
199:       assertNotNull(node1);
200:       assertFalse(node1.equals((Object)node0));
201:       assertFalse(node0.isLabelName());
202:       assertFalse(node0.isAssign());
203:       assertFalse(node0.hasChildren());
204:       assertFalse(node0.isGetElem());
205:       assertFalse(node0.hasOneChild());
206:       assertFalse(node0.isLabel());
207:       assertEquals((-1), node0.getLineno());
208:       assertFalse(node0.isExprResult());
209:       assertFalse(node0.isReturn());
210:       assertFalse(node0.isTypeOf());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isDec());
213:       assertFalse(node0.isContinue());
214:       assertFalse(node0.hasMoreThanOneChild());
215:       assertFalse(node0.isWith());
216:       assertFalse(node0.isDo());
217:       assertFalse(node0.isAssignAdd());
218:       assertFalse(node0.isNew());
219:       assertFalse(node0.isAdd());
220:       assertFalse(node0.isOr());
221:       assertFalse(node0.isName());
222:       assertFalse(node0.isThrow());
223:       assertFalse(node0.isCall());
224:       assertFalse(node0.isBreak());
225:       assertFalse(node0.isNull());
226:       assertFalse(node0.isComma());
227:       assertFalse(node0.isFalse());
228:       assertFalse(node0.isNot());
229:       assertFalse(node0.isAnd());
230:       assertFalse(node0.isWhile());
231:       assertFalse(node0.isDebugger());
232:       assertFalse(node0.isGetProp());
233:       assertEquals((-1), node0.getSourcePosition());
234:       assertFalse(node0.isObjectLit());
235:       assertFalse(node0.isEmpty());
236:       assertFalse(node0.isFor());
237:       assertFalse(node0.isArrayLit());
238:       assertFalse(node0.isNE());
239:       assertFalse(node0.isDelProp());
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isRegExp());
242:       assertFalse(node0.isFunction());
243:       assertEquals(40, node0.getType());
244:       assertFalse(node0.isVoid());
245:       assertFalse(node0.isDefaultCase());
246:       assertFalse(node0.isTrue());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.isSetterDef());
249:       assertFalse(node0.isIn());
250:       assertFalse(node0.isStringKey());
251:       assertFalse(node0.isVar());
252:       assertFalse(node0.isParamList());
253:       assertFalse(node0.isBlock());
254:       assertFalse(node0.isHook());
255:       assertFalse(node0.isThis());
256:       assertEquals(0, node0.getChildCount());
257:       assertFalse(node0.isInstanceOf());
258:       assertFalse(node0.isCatch());
259:       assertFalse(node0.isCase());
260:       assertFalse(node0.isSwitch());
261:       assertTrue(node0.isString());
262:       assertFalse(node0.isTry());
263:       assertEquals((-1), node0.getCharno());
264:       assertFalse(node0.isScript());
265:       assertFalse(node0.isGetterDef());
266:       assertFalse(node0.isNumber());
267:       assertFalse(node1.isBlock());
268:       assertFalse(node1.isVar());
269:       assertFalse(node1.isAdd());
270:       assertFalse(node1.isWhile());
271:       assertFalse(node1.isSetterDef());
272:       assertFalse(node1.isNew());
273:       assertFalse(node1.isDo());
274:       assertFalse(node1.isReturn());
275:       assertEquals((-1), node1.getLineno());
276:       assertFalse(node1.hasMoreThanOneChild());
277:       assertFalse(node1.isCatch());
278:       assertFalse(node1.isDec());
279:       assertFalse(node1.isTypeOf());
280:       assertFalse(node1.isOr());
281:       assertFalse(node1.isNull());
282:       assertFalse(node1.isGetElem());
283:       assertFalse(node1.isCall());
284:       assertFalse(node1.isName());
285:       assertFalse(node1.isVoid());
286:       assertFalse(node1.isCast());
287:       assertFalse(node1.isFunction());
288:       assertFalse(node1.isDebugger());
289:       assertFalse(node1.isAssign());
290:       assertTrue(node1.hasOneChild());
291:       assertFalse(node1.isContinue());
292:       assertEquals((-1), node1.getSourcePosition());
293:       assertFalse(node1.isNot());
294:       assertFalse(node1.isObjectLit());
295:       assertFalse(node1.isAnd());
296:       assertFalse(node1.isHook());
297:       assertEquals((-1), node1.getCharno());
298:       assertFalse(node1.isFalse());
299:       assertFalse(node1.isString());
300:       assertFalse(node1.isThrow());
301:       assertFalse(node1.isInc());
302:       assertFalse(node1.isGetProp());
303:       assertFalse(node1.isCase());
304:       assertEquals(1, node1.getChildCount());
305:       assertFalse(node1.isIn());
306:       assertFalse(node1.isInstanceOf());
307:       assertTrue(node1.hasChildren());
308:       assertFalse(node1.isComma());
309:       assertFalse(node1.isThis());
310:       assertFalse(node1.isWith());
311:       assertFalse(node1.isBreak());
312:       assertFalse(node1.isIf());
313:       assertFalse(node1.isNE());
314:       assertFalse(node1.isExprResult());
315:       assertFalse(node1.isDelProp());
316:       assertFalse(node1.isTrue());
317:       assertFalse(node1.isRegExp());
318:       assertFalse(node1.isDefaultCase());
319:       assertFalse(node1.isEmpty());
320:       assertFalse(node1.isScript());
321:       assertFalse(node1.isFor());
322:       assertFalse(node1.isTry());
323:       assertFalse(node1.isAssignAdd());
324:       assertFalse(node1.isLabel());
325:       assertFalse(node1.isNumber());
326:       assertFalse(node1.isGetterDef());
327:       assertEquals(2342, node1.getType());
328:       assertFalse(node1.isStringKey());
329:       assertFalse(node1.isParamList());
330:       assertFalse(node1.isSwitch());
331:       assertFalse(node1.isArrayLit());
332:       assertFalse(node1.isLabelName());
333:       
334:       boolean boolean0 = node0.isEquivalentToTyped(node1);
335:       assertEquals(2, Node.POST_FLAG);
336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
337:       assertEquals(37, Node.OPT_ARG_NAME);
338:       assertEquals(56, Node.CHANGE_TIME);
339:       assertEquals(46, Node.IS_NAMESPACE);
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
343:       assertEquals(32, Node.INCRDECR_PROP);
344:       assertEquals(29, Node.JSDOC_INFO_PROP);
345:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
346:       assertEquals(1, Node.DECR_FLAG);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(53, Node.INPUT_ID);
349:       assertEquals(36, Node.QUOTED_PROP);
350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(57, Node.REFLECTED_OBJECT);
353:       assertEquals(4095, Node.COLUMN_MASK);
354:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
355:       assertEquals(49, Node.DIRECT_EVAL);
356:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(50, Node.FREE_CALL);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(52, Node.LENGTH);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
365:       assertEquals(39, Node.EMPTY_BLOCK);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(57, Node.LAST_PROP);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(54, Node.SLASH_V);
370:       assertEquals(40, Node.ORIGINALNAME_PROP);
371:       assertEquals(40, Node.ORIGINALNAME_PROP);
372:       assertEquals(50, Node.FREE_CALL);
373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
374:       assertEquals(52, Node.LENGTH);
375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
376:       assertEquals(8, Node.FLAG_NO_THROWS);
377:       assertEquals(48, Node.DIRECTIVES);
378:       assertEquals(57, Node.REFLECTED_OBJECT);
379:       assertEquals(54, Node.SLASH_V);
380:       assertEquals(51, Node.STATIC_SOURCE_FILE);
381:       assertEquals(49, Node.DIRECT_EVAL);
382:       assertEquals(1, Node.DECR_FLAG);
383:       assertEquals(4095, Node.COLUMN_MASK);
384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
386:       assertEquals(32, Node.INCRDECR_PROP);
387:       assertEquals(12, Node.COLUMN_BITS);
388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
389:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
390:       assertEquals(53, Node.INPUT_ID);
391:       assertEquals(29, Node.JSDOC_INFO_PROP);
392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
393:       assertEquals(37, Node.OPT_ARG_NAME);
394:       assertEquals(36, Node.QUOTED_PROP);
395:       assertEquals(43, Node.IS_CONSTANT_NAME);
396:       assertEquals(56, Node.CHANGE_TIME);
397:       assertEquals(46, Node.IS_NAMESPACE);
398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(15, Node.NO_SIDE_EFFECTS);
401:       assertEquals(55, Node.INFERRED_FUNCTION);
402:       assertEquals(39, Node.EMPTY_BLOCK);
403:       assertEquals(2, Node.POST_FLAG);
404:       assertEquals(57, Node.LAST_PROP);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertFalse(node0.equals((Object)node1));
408:       assertFalse(node1.equals((Object)node0));
409:       assertFalse(boolean0);
410:       assertFalse(node0.isLabelName());
411:       assertFalse(node0.isAssign());
412:       assertFalse(node0.hasChildren());
413:       assertFalse(node0.isGetElem());
414:       assertFalse(node0.hasOneChild());
415:       assertFalse(node0.isLabel());
416:       assertEquals((-1), node0.getLineno());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.isReturn());
419:       assertFalse(node0.isTypeOf());
420:       assertFalse(node0.isCast());
421:       assertFalse(node0.isDec());
422:       assertFalse(node0.isContinue());
423:       assertFalse(node0.hasMoreThanOneChild());
424:       assertFalse(node0.isWith());
425:       assertFalse(node0.isDo());
426:       assertFalse(node0.isAssignAdd());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isAdd());
429:       assertFalse(node0.isOr());
430:       assertFalse(node0.isName());
431:       assertFalse(node0.isThrow());
432:       assertFalse(node0.isCall());
433:       assertFalse(node0.isBreak());
434:       assertFalse(node0.isNull());
435:       assertFalse(node0.isComma());
436:       assertFalse(node0.isFalse());
437:       assertFalse(node0.isNot());
438:       assertFalse(node0.isAnd());
439:       assertFalse(node0.isWhile());
440:       assertFalse(node0.isDebugger());
441:       assertFalse(node0.isGetProp());
442:       assertEquals((-1), node0.getSourcePosition());
443:       assertFalse(node0.isObjectLit());
444:       assertFalse(node0.isEmpty());
445:       assertFalse(node0.isFor());
446:       assertFalse(node0.isArrayLit());
447:       assertFalse(node0.isNE());
448:       assertFalse(node0.isDelProp());
449:       assertFalse(node0.isIf());
450:       assertFalse(node0.isRegExp());
451:       assertFalse(node0.isFunction());
452:       assertEquals(40, node0.getType());
453:       assertFalse(node0.isVoid());
454:       assertFalse(node0.isDefaultCase());
455:       assertFalse(node0.isTrue());
456:       assertFalse(node0.isInc());
457:       assertFalse(node0.isSetterDef());
458:       assertFalse(node0.isIn());
459:       assertFalse(node0.isStringKey());
460:       assertFalse(node0.isVar());
461:       assertFalse(node0.isParamList());
462:       assertFalse(node0.isBlock());
463:       assertFalse(node0.isHook());
464:       assertFalse(node0.isThis());
465:       assertEquals(0, node0.getChildCount());
466:       assertFalse(node0.isInstanceOf());
467:       assertFalse(node0.isCatch());
468:       assertFalse(node0.isCase());
469:       assertFalse(node0.isSwitch());
470:       assertTrue(node0.isString());
471:       assertFalse(node0.isTry());
472:       assertEquals((-1), node0.getCharno());
473:       assertFalse(node0.isScript());
474:       assertFalse(node0.isGetterDef());
475:       assertFalse(node0.isNumber());
476:       assertFalse(node1.isBlock());
477:       assertFalse(node1.isVar());
478:       assertFalse(node1.isAdd());
479:       assertFalse(node1.isWhile());
480:       assertFalse(node1.isSetterDef());
481:       assertFalse(node1.isNew());
482:       assertFalse(node1.isDo());
483:       assertFalse(node1.isReturn());
484:       assertEquals((-1), node1.getLineno());
485:       assertFalse(node1.hasMoreThanOneChild());
486:       assertFalse(node1.isCatch());
487:       assertFalse(node1.isDec());
488:       assertFalse(node1.isTypeOf());
489:       assertFalse(node1.isOr());
490:       assertFalse(node1.isNull());
491:       assertFalse(node1.isGetElem());
492:       assertFalse(node1.isCall());
493:       assertFalse(node1.isName());
494:       assertFalse(node1.isVoid());
495:       assertFalse(node1.isCast());
496:       assertFalse(node1.isFunction());
497:       assertFalse(node1.isDebugger());
498:       assertFalse(node1.isAssign());
499:       assertTrue(node1.hasOneChild());
500:       assertFalse(node1.isContinue());
501:       assertEquals((-1), node1.getSourcePosition());
502:       assertFalse(node1.isNot());
503:       assertFalse(node1.isObjectLit());
504:       assertFalse(node1.isAnd());
505:       assertFalse(node1.isHook());
506:       assertEquals((-1), node1.getCharno());
507:       assertFalse(node1.isFalse());
508:       assertFalse(node1.isString());
509:       assertFalse(node1.isThrow());
510:       assertFalse(node1.isInc());
511:       assertFalse(node1.isGetProp());
512:       assertFalse(node1.isCase());
513:       assertEquals(1, node1.getChildCount());
514:       assertFalse(node1.isIn());
515:       assertFalse(node1.isInstanceOf());
516:       assertTrue(node1.hasChildren());
517:       assertFalse(node1.isComma());
518:       assertFalse(node1.isThis());
519:       assertFalse(node1.isWith());
520:       assertFalse(node1.isBreak());
521:       assertFalse(node1.isIf());
522:       assertFalse(node1.isNE());
523:       assertFalse(node1.isExprResult());
524:       assertFalse(node1.isDelProp());
525:       assertFalse(node1.isTrue());
526:       assertFalse(node1.isRegExp());
527:       assertFalse(node1.isDefaultCase());
528:       assertFalse(node1.isEmpty());
529:       assertFalse(node1.isScript());
530:       assertFalse(node1.isFor());
531:       assertFalse(node1.isTry());
532:       assertFalse(node1.isAssignAdd());
533:       assertFalse(node1.isLabel());
534:       assertFalse(node1.isNumber());
535:       assertFalse(node1.isGetterDef());
536:       assertEquals(2342, node1.getType());
537:       assertFalse(node1.isStringKey());
538:       assertFalse(node1.isParamList());
539:       assertFalse(node1.isSwitch());
540:       assertFalse(node1.isArrayLit());
541:       assertFalse(node1.isLabelName());
542:       
543:       Node node2 = node0.getParent();
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(37, Node.OPT_ARG_NAME);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(46, Node.IS_NAMESPACE);
549:       assertEquals(47, Node.IS_DISPATCHER);
550:       assertEquals(12, Node.COLUMN_BITS);
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       assertEquals(32, Node.INCRDECR_PROP);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(15, Node.NO_SIDE_EFFECTS);
557:       assertEquals(53, Node.INPUT_ID);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(4095, Node.COLUMN_MASK);
563:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
564:       assertEquals(49, Node.DIRECT_EVAL);
565:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
566:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
567:       assertEquals(48, Node.DIRECTIVES);
568:       assertEquals(8, Node.FLAG_NO_THROWS);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(52, Node.LENGTH);
572:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
573:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
574:       assertEquals(39, Node.EMPTY_BLOCK);
575:       assertEquals(43, Node.IS_CONSTANT_NAME);
576:       assertEquals(57, Node.LAST_PROP);
577:       assertEquals(30, Node.VAR_ARGS_NAME);
578:       assertEquals(54, Node.SLASH_V);
579:       assertEquals(40, Node.ORIGINALNAME_PROP);
580:       assertEquals(1, Node.DECR_FLAG);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals(46, Node.IS_NAMESPACE);
583:       assertEquals(30, Node.VAR_ARGS_NAME);
584:       assertEquals(51, Node.STATIC_SOURCE_FILE);
585:       assertEquals(12, Node.COLUMN_BITS);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(57, Node.LAST_PROP);
588:       assertEquals(32, Node.INCRDECR_PROP);
589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
590:       assertEquals(29, Node.JSDOC_INFO_PROP);
591:       assertEquals(15, Node.NO_SIDE_EFFECTS);
592:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
593:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
594:       assertEquals(56, Node.CHANGE_TIME);
595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
596:       assertEquals(57, Node.REFLECTED_OBJECT);
597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
598:       assertEquals(37, Node.OPT_ARG_NAME);
599:       assertEquals(48, Node.DIRECTIVES);
600:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
602:       assertEquals(55, Node.INFERRED_FUNCTION);
603:       assertEquals(4095, Node.COLUMN_MASK);
604:       assertEquals(43, Node.IS_CONSTANT_NAME);
605:       assertEquals(36, Node.QUOTED_PROP);
606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
607:       assertEquals(8, Node.FLAG_NO_THROWS);
608:       assertEquals(53, Node.INPUT_ID);
609:       assertEquals(39, Node.EMPTY_BLOCK);
610:       assertEquals(40, Node.ORIGINALNAME_PROP);
611:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
612:       assertEquals(50, Node.FREE_CALL);
613:       assertEquals(47, Node.IS_DISPATCHER);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(2, Node.POST_FLAG);
616:       assertNotNull(node2);
617:       assertFalse(node0.equals((Object)node1));
618:       assertFalse(node2.equals((Object)node0));
619:       assertSame(node2, node1);
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isAssign());
622:       assertFalse(node0.hasChildren());
623:       assertFalse(node0.isGetElem());
624:       assertFalse(node0.hasOneChild());
625:       assertFalse(node0.isLabel());
626:       assertEquals((-1), node0.getLineno());
627:       assertFalse(node0.isExprResult());
628:       assertFalse(node0.isReturn());
629:       assertFalse(node0.isTypeOf());
630:       assertFalse(node0.isCast());
631:       assertFalse(node0.isDec());
632:       assertFalse(node0.isContinue());
633:       assertFalse(node0.hasMoreThanOneChild());
634:       assertFalse(node0.isWith());
635:       assertFalse(node0.isDo());
636:       assertFalse(node0.isAssignAdd());
637:       assertFalse(node0.isNew());
638:       assertFalse(node0.isAdd());
639:       assertFalse(node0.isOr());
640:       assertFalse(node0.isName());
641:       assertFalse(node0.isThrow());
642:       assertFalse(node0.isCall());
643:       assertFalse(node0.isBreak());
644:       assertFalse(node0.isNull());
645:       assertFalse(node0.isComma());
646:       assertFalse(node0.isFalse());
647:       assertFalse(node0.isNot());
648:       assertFalse(node0.isAnd());
649:       assertFalse(node0.isWhile());
650:       assertFalse(node0.isDebugger());
651:       assertFalse(node0.isGetProp());
652:       assertEquals((-1), node0.getSourcePosition());
653:       assertFalse(node0.isObjectLit());
654:       assertFalse(node0.isEmpty());
655:       assertFalse(node0.isFor());
656:       assertFalse(node0.isArrayLit());
657:       assertFalse(node0.isNE());
658:       assertFalse(node0.isDelProp());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isRegExp());
661:       assertFalse(node0.isFunction());
662:       assertEquals(40, node0.getType());
663:       assertFalse(node0.isVoid());
664:       assertFalse(node0.isDefaultCase());
665:       assertFalse(node0.isTrue());
666:       assertFalse(node0.isInc());
667:       assertFalse(node0.isSetterDef());
668:       assertFalse(node0.isIn());
669:       assertFalse(node0.isStringKey());
670:       assertFalse(node0.isVar());
671:       assertFalse(node0.isParamList());
672:       assertFalse(node0.isBlock());
673:       assertFalse(node0.isHook());
674:       assertFalse(node0.isThis());
675:       assertEquals(0, node0.getChildCount());
676:       assertFalse(node0.isInstanceOf());
677:       assertFalse(node0.isCatch());
678:       assertFalse(node0.isCase());
679:       assertFalse(node0.isSwitch());
680:       assertTrue(node0.isString());
681:       assertFalse(node0.isTry());
682:       assertEquals((-1), node0.getCharno());
683:       assertFalse(node0.isScript());
684:       assertFalse(node0.isGetterDef());
685:       assertFalse(node0.isNumber());
686:       assertEquals(1, node2.getChildCount());
687:       assertTrue(node2.hasChildren());
688:       assertFalse(node2.isNE());
689:       assertFalse(node2.isIf());
690:       assertFalse(node2.isDelProp());
691:       assertTrue(node2.hasOneChild());
692:       assertFalse(node2.isFor());
693:       assertFalse(node2.isTrue());
694:       assertFalse(node2.isVoid());
695:       assertFalse(node2.isThrow());
696:       assertFalse(node2.isDefaultCase());
697:       assertFalse(node2.isEmpty());
698:       assertFalse(node2.isInc());
699:       assertFalse(node2.isIn());
700:       assertFalse(node2.isInstanceOf());
701:       assertFalse(node2.isParamList());
702:       assertFalse(node2.isThis());
703:       assertEquals(2342, node2.getType());
704:       assertFalse(node2.isCatch());
705:       assertFalse(node2.isRegExp());
706:       assertFalse(node2.isWith());
707:       assertFalse(node2.isTry());
708:       assertFalse(node2.isArrayLit());
709:       assertFalse(node2.isBlock());
710:       assertEquals((-1), node2.getCharno());
711:       assertFalse(node2.isHook());
712:       assertFalse(node2.isStringKey());
713:       assertFalse(node2.isSwitch());
714:       assertFalse(node2.isGetterDef());
715:       assertFalse(node2.isCase());
716:       assertFalse(node2.isScript());
717:       assertFalse(node2.isNumber());
718:       assertFalse(node2.isReturn());
719:       assertEquals((-1), node2.getLineno());
720:       assertFalse(node2.isOr());
721:       assertFalse(node2.isLabel());
722:       assertFalse(node2.isAssignAdd());
723:       assertFalse(node2.isWhile());
724:       assertFalse(node2.isLabelName());
725:       assertFalse(node2.isDec());
726:       assertFalse(node2.isAssign());
727:       assertFalse(node2.isGetElem());
728:       assertFalse(node2.isContinue());
729:       assertFalse(node2.isCast());
730:       assertFalse(node2.isTypeOf());
731:       assertFalse(node2.hasMoreThanOneChild());
732:       assertFalse(node2.isNew());
733:       assertFalse(node2.isAdd());
734:       assertFalse(node2.isVar());
735:       assertFalse(node2.isName());
736:       assertFalse(node2.isDo());
737:       assertFalse(node2.isNull());
738:       assertFalse(node2.isSetterDef());
739:       assertFalse(node2.isGetProp());
740:       assertFalse(node2.isAnd());
741:       assertFalse(node2.isBreak());
742:       assertFalse(node2.isCall());
743:       assertFalse(node2.isExprResult());
744:       assertFalse(node2.isComma());
745:       assertFalse(node2.isFunction());
746:       assertFalse(node2.isFalse());
747:       assertFalse(node2.isString());
748:       assertFalse(node2.isNot());
749:       assertEquals((-1), node2.getSourcePosition());
750:       assertFalse(node2.isObjectLit());
751:       assertFalse(node2.isDebugger());
752:       
753:       Node node3 = node1.copyInformationFrom(node0);
754:       assertEquals(2, Node.POST_FLAG);
755:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
756:       assertEquals(37, Node.OPT_ARG_NAME);
757:       assertEquals(56, Node.CHANGE_TIME);
758:       assertEquals(46, Node.IS_NAMESPACE);
759:       assertEquals(47, Node.IS_DISPATCHER);
760:       assertEquals(12, Node.COLUMN_BITS);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(32, Node.INCRDECR_PROP);
763:       assertEquals(29, Node.JSDOC_INFO_PROP);
764:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(36, Node.QUOTED_PROP);
769:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
770:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(4095, Node.COLUMN_MASK);
773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
774:       assertEquals(49, Node.DIRECT_EVAL);
775:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
776:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
777:       assertEquals(48, Node.DIRECTIVES);
778:       assertEquals(8, Node.FLAG_NO_THROWS);
779:       assertEquals(50, Node.FREE_CALL);
780:       assertEquals(55, Node.INFERRED_FUNCTION);
781:       assertEquals(52, Node.LENGTH);
782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
784:       assertEquals(39, Node.EMPTY_BLOCK);
785:       assertEquals(43, Node.IS_CONSTANT_NAME);
786:       assertEquals(57, Node.LAST_PROP);
787:       assertEquals(30, Node.VAR_ARGS_NAME);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(40, Node.ORIGINALNAME_PROP);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertEquals(8, Node.FLAG_NO_THROWS);
796:       assertEquals(48, Node.DIRECTIVES);
797:       assertEquals(57, Node.REFLECTED_OBJECT);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(51, Node.STATIC_SOURCE_FILE);
800:       assertEquals(49, Node.DIRECT_EVAL);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(4095, Node.COLUMN_MASK);
803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
805:       assertEquals(32, Node.INCRDECR_PROP);
806:       assertEquals(12, Node.COLUMN_BITS);
807:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
808:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
809:       assertEquals(53, Node.INPUT_ID);
810:       assertEquals(29, Node.JSDOC_INFO_PROP);
811:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
812:       assertEquals(37, Node.OPT_ARG_NAME);
813:       assertEquals(36, Node.QUOTED_PROP);
814:       assertEquals(43, Node.IS_CONSTANT_NAME);
815:       assertEquals(56, Node.CHANGE_TIME);
816:       assertEquals(46, Node.IS_NAMESPACE);
817:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
818:       assertEquals(30, Node.VAR_ARGS_NAME);
819:       assertEquals(15, Node.NO_SIDE_EFFECTS);
820:       assertEquals(55, Node.INFERRED_FUNCTION);
821:       assertEquals(39, Node.EMPTY_BLOCK);
822:       assertEquals(2, Node.POST_FLAG);
823:       assertEquals(57, Node.LAST_PROP);
824:       assertEquals(47, Node.IS_DISPATCHER);
825:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
826:       assertEquals(48, Node.DIRECTIVES);
827:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
828:       assertEquals(40, Node.ORIGINALNAME_PROP);
829:       assertEquals(4095, Node.COLUMN_MASK);
830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
831:       assertEquals(52, Node.LENGTH);
832:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
833:       assertEquals(57, Node.REFLECTED_OBJECT);
834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:       assertEquals(15, Node.NO_SIDE_EFFECTS);
836:       assertEquals(57, Node.LAST_PROP);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(39, Node.EMPTY_BLOCK);
841:       assertEquals(53, Node.INPUT_ID);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(29, Node.JSDOC_INFO_PROP);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(56, Node.CHANGE_TIME);
847:       assertEquals(12, Node.COLUMN_BITS);
848:       assertEquals(46, Node.IS_NAMESPACE);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(2, Node.POST_FLAG);
851:       assertEquals(30, Node.VAR_ARGS_NAME);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(37, Node.OPT_ARG_NAME);
854:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
855:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
856:       assertEquals(43, Node.IS_CONSTANT_NAME);
857:       assertEquals(54, Node.SLASH_V);
858:       assertEquals(1, Node.DECR_FLAG);
859:       assertEquals(50, Node.FREE_CALL);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
862:       assertNotNull(node3);
863:       assertFalse(node0.equals((Object)node2));
864:       assertFalse(node0.equals((Object)node1));
865:       assertFalse(node1.equals((Object)node0));
866:       assertFalse(node3.equals((Object)node0));
867:       assertSame(node1, node3);
868:       assertSame(node1, node2);
869:       assertSame(node3, node1);
870:       assertSame(node3, node2);
871:       assertFalse(node0.isLabelName());
872:       assertFalse(node0.isAssign());
873:       assertFalse(node0.hasChildren());
874:       assertFalse(node0.isGetElem());
875:       assertFalse(node0.hasOneChild());
876:       assertFalse(node0.isLabel());
877:       assertEquals((-1), node0.getLineno());
878:       assertFalse(node0.isExprResult());
879:       assertFalse(node0.isReturn());
880:       assertFalse(node0.isTypeOf());
881:       assertFalse(node0.isCast());
882:       assertFalse(node0.isDec());
883:       assertFalse(node0.isContinue());
884:       assertFalse(node0.hasMoreThanOneChild());
885:       assertFalse(node0.isWith());
886:       assertFalse(node0.isDo());
887:       assertFalse(node0.isAssignAdd());
888:       assertFalse(node0.isNew());
889:       assertFalse(node0.isAdd());
890:       assertFalse(node0.isOr());
891:       assertFalse(node0.isName());
892:       assertFalse(node0.isThrow());
893:       assertFalse(node0.isCall());
894:       assertFalse(node0.isBreak());
895:       assertFalse(node0.isNull());
896:       assertFalse(node0.isComma());
897:       assertFalse(node0.isFalse());
898:       assertFalse(node0.isNot());
899:       assertFalse(node0.isAnd());
900:       assertFalse(node0.isWhile());
901:       assertFalse(node0.isDebugger());
902:       assertFalse(node0.isGetProp());
903:       assertEquals((-1), node0.getSourcePosition());
904:       assertFalse(node0.isObjectLit());
905:       assertFalse(node0.isEmpty());
906:       assertFalse(node0.isFor());
907:       assertFalse(node0.isArrayLit());
908:       assertFalse(node0.isNE());
909:       assertFalse(node0.isDelProp());
910:       assertFalse(node0.isIf());
911:       assertFalse(node0.isRegExp());
912:       assertFalse(node0.isFunction());
913:       assertEquals(40, node0.getType());
914:       assertFalse(node0.isVoid());
915:       assertFalse(node0.isDefaultCase());
916:       assertFalse(node0.isTrue());
917:       assertFalse(node0.isInc());
918:       assertFalse(node0.isSetterDef());
919:       assertFalse(node0.isIn());
920:       assertFalse(node0.isStringKey());
921:       assertFalse(node0.isVar());
922:       assertFalse(node0.isParamList());
923:       assertFalse(node0.isBlock());
924:       assertFalse(node0.isHook());
925:       assertFalse(node0.isThis());
926:       assertEquals(0, node0.getChildCount());
927:       assertFalse(node0.isInstanceOf());
928:       assertFalse(node0.isCatch());
929:       assertFalse(node0.isCase());
930:       assertFalse(node0.isSwitch());
931:       assertTrue(node0.isString());
932:       assertFalse(node0.isTry());
933:       assertEquals((-1), node0.getCharno());
934:       assertFalse(node0.isScript());
935:       assertFalse(node0.isGetterDef());
936:       assertFalse(node0.isNumber());
937:       assertFalse(node1.isBlock());
938:       assertFalse(node1.isVar());
939:       assertFalse(node1.isAdd());
940:       assertFalse(node1.isWhile());
941:       assertFalse(node1.isSetterDef());
942:       assertFalse(node1.isNew());
943:       assertFalse(node1.isDo());
944:       assertFalse(node1.isReturn());
945:       assertEquals((-1), node1.getLineno());
946:       assertFalse(node1.hasMoreThanOneChild());
947:       assertFalse(node1.isCatch());
948:       assertFalse(node1.isDec());
949:       assertFalse(node1.isTypeOf());
950:       assertFalse(node1.isOr());
951:       assertFalse(node1.isNull());
952:       assertFalse(node1.isGetElem());
953:       assertFalse(node1.isCall());
954:       assertFalse(node1.isName());
955:       assertFalse(node1.isVoid());
956:       assertFalse(node1.isCast());
957:       assertFalse(node1.isFunction());
958:       assertFalse(node1.isDebugger());
959:       assertFalse(node1.isAssign());
960:       assertTrue(node1.hasOneChild());
961:       assertFalse(node1.isContinue());
962:       assertEquals((-1), node1.getSourcePosition());
963:       assertFalse(node1.isNot());
964:       assertFalse(node1.isObjectLit());
965:       assertFalse(node1.isAnd());
966:       assertFalse(node1.isHook());
967:       assertEquals((-1), node1.getCharno());
968:       assertFalse(node1.isFalse());
969:       assertFalse(node1.isString());
970:       assertFalse(node1.isThrow());
971:       assertFalse(node1.isInc());
972:       assertFalse(node1.isGetProp());
973:       assertFalse(node1.isCase());
974:       assertEquals(1, node1.getChildCount());
975:       assertFalse(node1.isIn());
976:       assertFalse(node1.isInstanceOf());
977:       assertTrue(node1.hasChildren());
978:       assertFalse(node1.isComma());
979:       assertFalse(node1.isThis());
980:       assertFalse(node1.isWith());
981:       assertFalse(node1.isBreak());
982:       assertFalse(node1.isIf());
983:       assertFalse(node1.isNE());
984:       assertFalse(node1.isExprResult());
985:       assertFalse(node1.isDelProp());
986:       assertFalse(node1.isTrue());
987:       assertFalse(node1.isRegExp());
988:       assertFalse(node1.isDefaultCase());
989:       assertFalse(node1.isEmpty());
990:       assertFalse(node1.isScript());
991:       assertFalse(node1.isFor());
992:       assertFalse(node1.isTry());
993:       assertFalse(node1.isAssignAdd());
994:       assertFalse(node1.isLabel());
995:       assertFalse(node1.isNumber());
996:       assertFalse(node1.isGetterDef());
997:       assertEquals(2342, node1.getType());
998:       assertFalse(node1.isStringKey());
999:       assertFalse(node1.isParamList());
1000:       assertFalse(node1.isSwitch());
1001:       assertFalse(node1.isArrayLit());
1002:       assertFalse(node1.isLabelName());
1003:       assertFalse(node3.isComma());
1004:       assertFalse(node3.isThis());
1005:       assertFalse(node3.isGetProp());
1006:       assertFalse(node3.isBreak());
1007:       assertFalse(node3.isAnd());
1008:       assertFalse(node3.isNot());
1009:       assertFalse(node3.isObjectLit());
1010:       assertFalse(node3.isSwitch());
1011:       assertFalse(node3.isInc());
1012:       assertEquals((-1), node3.getCharno());
1013:       assertFalse(node3.isCast());
1014:       assertFalse(node3.isThrow());
1015:       assertFalse(node3.isFalse());
1016:       assertEquals(2342, node3.getType());
1017:       assertFalse(node3.isAssignAdd());
1018:       assertFalse(node3.isDelProp());
1019:       assertFalse(node3.isEmpty());
1020:       assertFalse(node3.isString());
1021:       assertEquals((-1), node3.getSourcePosition());
1022:       assertFalse(node3.isOr());
1023:       assertFalse(node3.isTrue());
1024:       assertFalse(node3.isExprResult());
1025:       assertFalse(node3.isWhile());
1026:       assertFalse(node3.isVoid());
1027:       assertFalse(node3.isCall());
1028:       assertFalse(node3.isGetElem());
1029:       assertFalse(node3.isReturn());
1030:       assertTrue(node3.hasOneChild());
1031:       assertFalse(node3.isDec());
1032:       assertFalse(node3.isTypeOf());
1033:       assertFalse(node3.isAssign());
1034:       assertFalse(node3.isSetterDef());
1035:       assertFalse(node3.isParamList());
1036:       assertFalse(node3.isNull());
1037:       assertFalse(node3.isName());
1038:       assertFalse(node3.isStringKey());
1039:       assertFalse(node3.isFunction());
1040:       assertFalse(node3.isDebugger());
1041:       assertFalse(node3.isAdd());
1042:       assertFalse(node3.isDefaultCase());
1043:       assertFalse(node3.isNew());
1044:       assertFalse(node3.isDo());
1045:       assertFalse(node3.isContinue());
1046:       assertFalse(node3.isArrayLit());
1047:       assertFalse(node3.isVar());
1048:       assertFalse(node3.isLabel());
1049:       assertTrue(node3.hasChildren());
1050:       assertFalse(node3.isNE());
1051:       assertEquals((-1), node3.getLineno());
1052:       assertFalse(node3.isIf());
1053:       assertFalse(node3.isLabelName());
1054:       assertFalse(node3.isIn());
1055:       assertFalse(node3.isNumber());
1056:       assertFalse(node3.isGetterDef());
1057:       assertFalse(node3.isBlock());
1058:       assertFalse(node3.isScript());
1059:       assertFalse(node3.isCase());
1060:       assertFalse(node3.isTry());
1061:       assertFalse(node3.hasMoreThanOneChild());
1062:       assertFalse(node3.isCatch());
1063:       assertFalse(node3.isInstanceOf());
1064:       assertFalse(node3.isHook());
1065:       assertFalse(node3.isFor());
1066:       assertEquals(1, node3.getChildCount());
1067:       assertFalse(node3.isWith());
1068:       assertFalse(node3.isRegExp());
1069:       
1070:       Iterable<Node> iterable0 = node0.children();
1071:       assertEquals(2, Node.POST_FLAG);
1072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:       assertEquals(37, Node.OPT_ARG_NAME);
1074:       assertEquals(56, Node.CHANGE_TIME);
1075:       assertEquals(46, Node.IS_NAMESPACE);
1076:       assertEquals(47, Node.IS_DISPATCHER);
1077:       assertEquals(12, Node.COLUMN_BITS);
1078:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1079:       assertEquals(32, Node.INCRDECR_PROP);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1084:       assertEquals(53, Node.INPUT_ID);
1085:       assertEquals(36, Node.QUOTED_PROP);
1086:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1088:       assertEquals(57, Node.REFLECTED_OBJECT);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1091:       assertEquals(49, Node.DIRECT_EVAL);
1092:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1093:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1094:       assertEquals(48, Node.DIRECTIVES);
1095:       assertEquals(8, Node.FLAG_NO_THROWS);
1096:       assertEquals(50, Node.FREE_CALL);
1097:       assertEquals(55, Node.INFERRED_FUNCTION);
1098:       assertEquals(52, Node.LENGTH);
1099:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1101:       assertEquals(39, Node.EMPTY_BLOCK);
1102:       assertEquals(43, Node.IS_CONSTANT_NAME);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(30, Node.VAR_ARGS_NAME);
1105:       assertEquals(54, Node.SLASH_V);
1106:       assertEquals(40, Node.ORIGINALNAME_PROP);
1107:       assertNotNull(iterable0);
1108:       assertFalse(node0.equals((Object)node3));
1109:       assertFalse(node0.equals((Object)node2));
1110:       assertFalse(node0.equals((Object)node1));
1111:       assertFalse(iterable0.contains(node1));
1112:       assertFalse(node0.isLabelName());
1113:       assertFalse(node0.isAssign());
1114:       assertFalse(node0.hasChildren());
1115:       assertFalse(node0.isGetElem());
1116:       assertFalse(node0.hasOneChild());
1117:       assertFalse(node0.isLabel());
1118:       assertEquals((-1), node0.getLineno());
1119:       assertFalse(node0.isExprResult());
1120:       assertFalse(node0.isReturn());
1121:       assertFalse(node0.isTypeOf());
1122:       assertFalse(node0.isCast());
1123:       assertFalse(node0.isDec());
1124:       assertFalse(node0.isContinue());
1125:       assertFalse(node0.hasMoreThanOneChild());
1126:       assertFalse(node0.isWith());
1127:       assertFalse(node0.isDo());
1128:       assertFalse(node0.isAssignAdd());
1129:       assertFalse(node0.isNew());
1130:       assertFalse(node0.isAdd());
1131:       assertFalse(node0.isOr());
1132:       assertFalse(node0.isName());
1133:       assertFalse(node0.isThrow());
1134:       assertFalse(node0.isCall());
1135:       assertFalse(node0.isBreak());
1136:       assertFalse(node0.isNull());
1137:       assertFalse(node0.isComma());
1138:       assertFalse(node0.isFalse());
1139:       assertFalse(node0.isNot());
1140:       assertFalse(node0.isAnd());
1141:       assertFalse(node0.isWhile());
1142:       assertFalse(node0.isDebugger());
1143:       assertFalse(node0.isGetProp());
1144:       assertEquals((-1), node0.getSourcePosition());
1145:       assertFalse(node0.isObjectLit());
1146:       assertFalse(node0.isEmpty());
1147:       assertFalse(node0.isFor());
1148:       assertFalse(node0.isArrayLit());
1149:       assertFalse(node0.isNE());
1150:       assertFalse(node0.isDelProp());
1151:       assertFalse(node0.isIf());
1152:       assertFalse(node0.isRegExp());
1153:       assertFalse(node0.isFunction());
1154:       assertEquals(40, node0.getType());
1155:       assertFalse(node0.isVoid());
1156:       assertFalse(node0.isDefaultCase());
1157:       assertFalse(node0.isTrue());
1158:       assertFalse(node0.isInc());
1159:       assertFalse(node0.isSetterDef());
1160:       assertFalse(node0.isIn());
1161:       assertFalse(node0.isStringKey());
1162:       assertFalse(node0.isVar());
1163:       assertFalse(node0.isParamList());
1164:       assertFalse(node0.isBlock());
1165:       assertFalse(node0.isHook());
1166:       assertFalse(node0.isThis());
1167:       assertEquals(0, node0.getChildCount());
1168:       assertFalse(node0.isInstanceOf());
1169:       assertFalse(node0.isCatch());
1170:       assertFalse(node0.isCase());
1171:       assertFalse(node0.isSwitch());
1172:       assertTrue(node0.isString());
1173:       assertFalse(node0.isTry());
1174:       assertEquals((-1), node0.getCharno());
1175:       assertFalse(node0.isScript());
1176:       assertFalse(node0.isGetterDef());
1177:       assertFalse(node0.isNumber());
1178:       
1179:       boolean boolean1 = node3.isExprResult();
1180:       assertEquals(2, Node.POST_FLAG);
1181:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1182:       assertEquals(37, Node.OPT_ARG_NAME);
1183:       assertEquals(56, Node.CHANGE_TIME);
1184:       assertEquals(46, Node.IS_NAMESPACE);
1185:       assertEquals(47, Node.IS_DISPATCHER);
1186:       assertEquals(12, Node.COLUMN_BITS);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(32, Node.INCRDECR_PROP);
1189:       assertEquals(29, Node.JSDOC_INFO_PROP);
1190:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1191:       assertEquals(1, Node.DECR_FLAG);
1192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1193:       assertEquals(53, Node.INPUT_ID);
1194:       assertEquals(36, Node.QUOTED_PROP);
1195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1197:       assertEquals(57, Node.REFLECTED_OBJECT);
1198:       assertEquals(4095, Node.COLUMN_MASK);
1199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1200:       assertEquals(49, Node.DIRECT_EVAL);
1201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1203:       assertEquals(48, Node.DIRECTIVES);
1204:       assertEquals(8, Node.FLAG_NO_THROWS);
1205:       assertEquals(50, Node.FREE_CALL);
1206:       assertEquals(55, Node.INFERRED_FUNCTION);
1207:       assertEquals(52, Node.LENGTH);
1208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1210:       assertEquals(39, Node.EMPTY_BLOCK);
1211:       assertEquals(43, Node.IS_CONSTANT_NAME);
1212:       assertEquals(57, Node.LAST_PROP);
1213:       assertEquals(30, Node.VAR_ARGS_NAME);
1214:       assertEquals(54, Node.SLASH_V);
1215:       assertEquals(40, Node.ORIGINALNAME_PROP);
1216:       assertEquals(40, Node.ORIGINALNAME_PROP);
1217:       assertEquals(50, Node.FREE_CALL);
1218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1219:       assertEquals(52, Node.LENGTH);
1220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1221:       assertEquals(8, Node.FLAG_NO_THROWS);
1222:       assertEquals(48, Node.DIRECTIVES);
1223:       assertEquals(57, Node.REFLECTED_OBJECT);
1224:       assertEquals(54, Node.SLASH_V);
1225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1226:       assertEquals(49, Node.DIRECT_EVAL);
1227:       assertEquals(1, Node.DECR_FLAG);
1228:       assertEquals(4095, Node.COLUMN_MASK);
1229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1231:       assertEquals(32, Node.INCRDECR_PROP);
1232:       assertEquals(12, Node.COLUMN_BITS);
1233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1235:       assertEquals(53, Node.INPUT_ID);
1236:       assertEquals(29, Node.JSDOC_INFO_PROP);
1237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1238:       assertEquals(37, Node.OPT_ARG_NAME);
1239:       assertEquals(36, Node.QUOTED_PROP);
1240:       assertEquals(43, Node.IS_CONSTANT_NAME);
1241:       assertEquals(56, Node.CHANGE_TIME);
1242:       assertEquals(46, Node.IS_NAMESPACE);
1243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1244:       assertEquals(30, Node.VAR_ARGS_NAME);
1245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1246:       assertEquals(55, Node.INFERRED_FUNCTION);
1247:       assertEquals(39, Node.EMPTY_BLOCK);
1248:       assertEquals(2, Node.POST_FLAG);
1249:       assertEquals(57, Node.LAST_PROP);
1250:       assertEquals(47, Node.IS_DISPATCHER);
1251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1252:       assertEquals(48, Node.DIRECTIVES);
1253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1254:       assertEquals(40, Node.ORIGINALNAME_PROP);
1255:       assertEquals(4095, Node.COLUMN_MASK);
1256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1257:       assertEquals(52, Node.LENGTH);
1258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1259:       assertEquals(57, Node.REFLECTED_OBJECT);
1260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1262:       assertEquals(57, Node.LAST_PROP);
1263:       assertEquals(36, Node.QUOTED_PROP);
1264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1265:       assertEquals(8, Node.FLAG_NO_THROWS);
1266:       assertEquals(39, Node.EMPTY_BLOCK);
1267:       assertEquals(53, Node.INPUT_ID);
1268:       assertEquals(55, Node.INFERRED_FUNCTION);
1269:       assertEquals(29, Node.JSDOC_INFO_PROP);
1270:       assertEquals(32, Node.INCRDECR_PROP);
1271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1272:       assertEquals(56, Node.CHANGE_TIME);
1273:       assertEquals(12, Node.COLUMN_BITS);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(47, Node.IS_DISPATCHER);
1276:       assertEquals(2, Node.POST_FLAG);
1277:       assertEquals(30, Node.VAR_ARGS_NAME);
1278:       assertEquals(49, Node.DIRECT_EVAL);
1279:       assertEquals(37, Node.OPT_ARG_NAME);
1280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1282:       assertEquals(43, Node.IS_CONSTANT_NAME);
1283:       assertEquals(54, Node.SLASH_V);
1284:       assertEquals(1, Node.DECR_FLAG);
1285:       assertEquals(50, Node.FREE_CALL);
1286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1287:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1288:       assertFalse(node0.equals((Object)node3));
1289:       assertFalse(node0.equals((Object)node2));
1290:       assertFalse(node0.equals((Object)node1));
1291:       assertFalse(node1.equals((Object)node0));
1292:       assertFalse(node3.equals((Object)node0));
1293:       assertTrue(boolean1 == boolean0);
1294:       assertSame(node1, node3);
1295:       assertSame(node1, node2);
1296:       assertSame(node3, node1);
1297:       assertSame(node3, node2);
1298:       assertFalse(boolean1);
1299:       assertFalse(node0.isLabelName());
1300:       assertFalse(node0.isAssign());
1301:       assertFalse(node0.hasChildren());
1302:       assertFalse(node0.isGetElem());
1303:       assertFalse(node0.hasOneChild());
1304:       assertFalse(node0.isLabel());
1305:       assertEquals((-1), node0.getLineno());
1306:       assertFalse(node0.isExprResult());
1307:       assertFalse(node0.isReturn());
1308:       assertFalse(node0.isTypeOf());
1309:       assertFalse(node0.isCast());
1310:       assertFalse(node0.isDec());
1311:       assertFalse(node0.isContinue());
1312:       assertFalse(node0.hasMoreThanOneChild());
1313:       assertFalse(node0.isWith());
1314:       assertFalse(node0.isDo());
1315:       assertFalse(node0.isAssignAdd());
1316:       assertFalse(node0.isNew());
1317:       assertFalse(node0.isAdd());
1318:       assertFalse(node0.isOr());
1319:       assertFalse(node0.isName());
1320:       assertFalse(node0.isThrow());
1321:       assertFalse(node0.isCall());
1322:       assertFalse(node0.isBreak());
1323:       assertFalse(node0.isNull());
1324:       assertFalse(node0.isComma());
1325:       assertFalse(node0.isFalse());
1326:       assertFalse(node0.isNot());
1327:       assertFalse(node0.isAnd());
1328:       assertFalse(node0.isWhile());
1329:       assertFalse(node0.isDebugger());
1330:       assertFalse(node0.isGetProp());
1331:       assertEquals((-1), node0.getSourcePosition());
1332:       assertFalse(node0.isObjectLit());
1333:       assertFalse(node0.isEmpty());
1334:       assertFalse(node0.isFor());
1335:       assertFalse(node0.isArrayLit());
1336:       assertFalse(node0.isNE());
1337:       assertFalse(node0.isDelProp());
1338:       assertFalse(node0.isIf());
1339:       assertFalse(node0.isRegExp());
1340:       assertFalse(node0.isFunction());
1341:       assertEquals(40, node0.getType());
1342:       assertFalse(node0.isVoid());
1343:       assertFalse(node0.isDefaultCase());
1344:       assertFalse(node0.isTrue());
1345:       assertFalse(node0.isInc());
1346:       assertFalse(node0.isSetterDef());
1347:       assertFalse(node0.isIn());
1348:       assertFalse(node0.isStringKey());
1349:       assertFalse(node0.isVar());
1350:       assertFalse(node0.isParamList());
1351:       assertFalse(node0.isBlock());
1352:       assertFalse(node0.isHook());
1353:       assertFalse(node0.isThis());
1354:       assertEquals(0, node0.getChildCount());
1355:       assertFalse(node0.isInstanceOf());
1356:       assertFalse(node0.isCatch());
1357:       assertFalse(node0.isCase());
1358:       assertFalse(node0.isSwitch());
1359:       assertTrue(node0.isString());
1360:       assertFalse(node0.isTry());
1361:       assertEquals((-1), node0.getCharno());
1362:       assertFalse(node0.isScript());
1363:       assertFalse(node0.isGetterDef());
1364:       assertFalse(node0.isNumber());
1365:       assertFalse(node1.isBlock());
1366:       assertFalse(node1.isVar());
1367:       assertFalse(node1.isAdd());
1368:       assertFalse(node1.isWhile());
1369:       assertFalse(node1.isSetterDef());
1370:       assertFalse(node1.isNew());
1371:       assertFalse(node1.isDo());
1372:       assertFalse(node1.isReturn());
1373:       assertEquals((-1), node1.getLineno());
1374:       assertFalse(node1.hasMoreThanOneChild());
1375:       assertFalse(node1.isCatch());
1376:       assertFalse(node1.isDec());
1377:       assertFalse(node1.isTypeOf());
1378:       assertFalse(node1.isOr());
1379:       assertFalse(node1.isNull());
1380:       assertFalse(node1.isGetElem());
1381:       assertFalse(node1.isCall());
1382:       assertFalse(node1.isName());
1383:       assertFalse(node1.isVoid());
1384:       assertFalse(node1.isCast());
1385:       assertFalse(node1.isFunction());
1386:       assertFalse(node1.isDebugger());
1387:       assertFalse(node1.isAssign());
1388:       assertTrue(node1.hasOneChild());
1389:       assertFalse(node1.isContinue());
1390:       assertEquals((-1), node1.getSourcePosition());
1391:       assertFalse(node1.isNot());
1392:       assertFalse(node1.isObjectLit());
1393:       assertFalse(node1.isAnd());
1394:       assertFalse(node1.isHook());
1395:       assertEquals((-1), node1.getCharno());
1396:       assertFalse(node1.isFalse());
1397:       assertFalse(node1.isString());
1398:       assertFalse(node1.isThrow());
1399:       assertFalse(node1.isInc());
1400:       assertFalse(node1.isGetProp());
1401:       assertFalse(node1.isCase());
1402:       assertEquals(1, node1.getChildCount());
1403:       assertFalse(node1.isIn());
1404:       assertFalse(node1.isInstanceOf());
1405:       assertTrue(node1.hasChildren());
1406:       assertFalse(node1.isComma());
1407:       assertFalse(node1.isThis());
1408:       assertFalse(node1.isWith());
1409:       assertFalse(node1.isBreak());
1410:       assertFalse(node1.isIf());
1411:       assertFalse(node1.isNE());
1412:       assertFalse(node1.isExprResult());
1413:       assertFalse(node1.isDelProp());
1414:       assertFalse(node1.isTrue());
1415:       assertFalse(node1.isRegExp());
1416:       assertFalse(node1.isDefaultCase());
1417:       assertFalse(node1.isEmpty());
1418:       assertFalse(node1.isScript());
1419:       assertFalse(node1.isFor());
1420:       assertFalse(node1.isTry());
1421:       assertFalse(node1.isAssignAdd());
1422:       assertFalse(node1.isLabel());
1423:       assertFalse(node1.isNumber());
1424:       assertFalse(node1.isGetterDef());
1425:       assertEquals(2342, node1.getType());
1426:       assertFalse(node1.isStringKey());
1427:       assertFalse(node1.isParamList());
1428:       assertFalse(node1.isSwitch());
1429:       assertFalse(node1.isArrayLit());
1430:       assertFalse(node1.isLabelName());
1431:       assertFalse(node3.isComma());
1432:       assertFalse(node3.isThis());
1433:       assertFalse(node3.isGetProp());
1434:       assertFalse(node3.isBreak());
1435:       assertFalse(node3.isAnd());
1436:       assertFalse(node3.isNot());
1437:       assertFalse(node3.isObjectLit());
1438:       assertFalse(node3.isSwitch());
1439:       assertFalse(node3.isInc());
1440:       assertEquals((-1), node3.getCharno());
1441:       assertFalse(node3.isCast());
1442:       assertFalse(node3.isThrow());
1443:       assertFalse(node3.isFalse());
1444:       assertEquals(2342, node3.getType());
1445:       assertFalse(node3.isAssignAdd());
1446:       assertFalse(node3.isDelProp());
1447:       assertFalse(node3.isEmpty());
1448:       assertFalse(node3.isString());
1449:       assertEquals((-1), node3.getSourcePosition());
1450:       assertFalse(node3.isOr());
1451:       assertFalse(node3.isTrue());
1452:       assertFalse(node3.isExprResult());
1453:       assertFalse(node3.isWhile());
1454:       assertFalse(node3.isVoid());
1455:       assertFalse(node3.isCall());
1456:       assertFalse(node3.isGetElem());
1457:       assertFalse(node3.isReturn());
1458:       assertTrue(node3.hasOneChild());
1459:       assertFalse(node3.isDec());
1460:       assertFalse(node3.isTypeOf());
1461:       assertFalse(node3.isAssign());
1462:       assertFalse(node3.isSetterDef());
1463:       assertFalse(node3.isParamList());
1464:       assertFalse(node3.isNull());
1465:       assertFalse(node3.isName());
1466:       assertFalse(node3.isStringKey());
1467:       assertFalse(node3.isFunction());
1468:       assertFalse(node3.isDebugger());
1469:       assertFalse(node3.isAdd());
1470:       assertFalse(node3.isDefaultCase());
1471:       assertFalse(node3.isNew());
1472:       assertFalse(node3.isDo());
1473:       assertFalse(node3.isContinue());
1474:       assertFalse(node3.isArrayLit());
1475:       assertFalse(node3.isVar());
1476:       assertFalse(node3.isLabel());
1477:       assertTrue(node3.hasChildren());
1478:       assertFalse(node3.isNE());
1479:       assertEquals((-1), node3.getLineno());
1480:       assertFalse(node3.isIf());
1481:       assertFalse(node3.isLabelName());
1482:       assertFalse(node3.isIn());
1483:       assertFalse(node3.isNumber());
1484:       assertFalse(node3.isGetterDef());
1485:       assertFalse(node3.isBlock());
1486:       assertFalse(node3.isScript());
1487:       assertFalse(node3.isCase());
1488:       assertFalse(node3.isTry());
1489:       assertFalse(node3.hasMoreThanOneChild());
1490:       assertFalse(node3.isCatch());
1491:       assertFalse(node3.isInstanceOf());
1492:       assertFalse(node3.isHook());
1493:       assertFalse(node3.isFor());
1494:       assertEquals(1, node3.getChildCount());
1495:       assertFalse(node3.isWith());
1496:       assertFalse(node3.isRegExp());
1497:       
1498:       Node node4 = Node.newNumber(0.0, (-3310), 939);
1499:       assertEquals(1, Node.DECR_FLAG);
1500:       assertEquals(30, Node.VAR_ARGS_NAME);
1501:       assertEquals(49, Node.DIRECT_EVAL);
1502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1503:       assertEquals(57, Node.LAST_PROP);
1504:       assertEquals(46, Node.IS_NAMESPACE);
1505:       assertEquals(12, Node.COLUMN_BITS);
1506:       assertEquals(32, Node.INCRDECR_PROP);
1507:       assertEquals(54, Node.SLASH_V);
1508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1510:       assertEquals(29, Node.JSDOC_INFO_PROP);
1511:       assertEquals(52, Node.LENGTH);
1512:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1513:       assertEquals(57, Node.REFLECTED_OBJECT);
1514:       assertEquals(56, Node.CHANGE_TIME);
1515:       assertEquals(48, Node.DIRECTIVES);
1516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1517:       assertEquals(37, Node.OPT_ARG_NAME);
1518:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1520:       assertEquals(4095, Node.COLUMN_MASK);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1523:       assertEquals(43, Node.IS_CONSTANT_NAME);
1524:       assertEquals(53, Node.INPUT_ID);
1525:       assertEquals(39, Node.EMPTY_BLOCK);
1526:       assertEquals(36, Node.QUOTED_PROP);
1527:       assertEquals(55, Node.INFERRED_FUNCTION);
1528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1529:       assertEquals(8, Node.FLAG_NO_THROWS);
1530:       assertEquals(40, Node.ORIGINALNAME_PROP);
1531:       assertEquals(50, Node.FREE_CALL);
1532:       assertEquals(47, Node.IS_DISPATCHER);
1533:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1534:       assertEquals(2, Node.POST_FLAG);
1535:       assertNotNull(node4);
1536:       assertFalse(node4.equals((Object)node1));
1537:       assertFalse(node4.equals((Object)node2));
1538:       assertFalse(node4.equals((Object)node0));
1539:       assertFalse(node4.equals((Object)node3));
1540:       assertFalse(node4.isReturn());
1541:       assertFalse(node4.isAssignAdd());
1542:       assertFalse(node4.isDo());
1543:       assertEquals((-1), node4.getLineno());
1544:       assertFalse(node4.hasChildren());
1545:       assertFalse(node4.isTypeOf());
1546:       assertFalse(node4.isWhile());
1547:       assertFalse(node4.isContinue());
1548:       assertFalse(node4.hasMoreThanOneChild());
1549:       assertFalse(node4.isBlock());
1550:       assertFalse(node4.isLabel());
1551:       assertFalse(node4.isAssign());
1552:       assertEquals(39, node4.getType());
1553:       assertFalse(node4.isDec());
1554:       assertFalse(node4.isVar());
1555:       assertFalse(node4.isAdd());
1556:       assertFalse(node4.isGetElem());
1557:       assertFalse(node4.isName());
1558:       assertFalse(node4.isCall());
1559:       assertFalse(node4.isExprResult());
1560:       assertFalse(node4.isNew());
1561:       assertFalse(node4.isNull());
1562:       assertFalse(node4.isOr());
1563:       assertEquals(0, node4.getChildCount());
1564:       assertFalse(node4.isInstanceOf());
1565:       assertFalse(node4.isCatch());
1566:       assertFalse(node4.isDefaultCase());
1567:       assertFalse(node4.isWith());
1568:       assertFalse(node4.isThis());
1569:       assertFalse(node4.isRegExp());
1570:       assertFalse(node4.isHook());
1571:       assertFalse(node4.isLabelName());
1572:       assertFalse(node4.isArrayLit());
1573:       assertFalse(node4.isTry());
1574:       assertFalse(node4.hasOneChild());
1575:       assertFalse(node4.isGetterDef());
1576:       assertFalse(node4.isSwitch());
1577:       assertFalse(node4.isScript());
1578:       assertFalse(node4.isParamList());
1579:       assertFalse(node4.isStringKey());
1580:       assertEquals((-1), node4.getCharno());
1581:       assertFalse(node4.isIn());
1582:       assertTrue(node4.isNumber());
1583:       assertFalse(node4.isCase());
1584:       assertFalse(node4.isFor());
1585:       assertFalse(node4.isVoid());
1586:       assertFalse(node4.isInc());
1587:       assertFalse(node4.isDelProp());
1588:       assertFalse(node4.isIf());
1589:       assertFalse(node4.isNE());
1590:       assertFalse(node4.isEmpty());
1591:       assertFalse(node4.isTrue());
1592:       assertFalse(node4.isAnd());
1593:       assertFalse(node4.isGetProp());
1594:       assertFalse(node4.isSetterDef());
1595:       assertFalse(node4.isBreak());
1596:       assertFalse(node4.isThrow());
1597:       assertFalse(node4.isFunction());
1598:       assertFalse(node4.isFalse());
1599:       assertFalse(node4.isComma());
1600:       assertFalse(node4.isCast());
1601:       assertFalse(node4.isString());
1602:       assertFalse(node4.isObjectLit());
1603:       assertFalse(node4.isDebugger());
1604:       assertFalse(node4.isNot());
1605:       assertEquals((-1), node4.getSourcePosition());
1606:       
1607:       boolean boolean2 = node4.isOnlyModifiesThisCall();
1608:       assertEquals(1, Node.DECR_FLAG);
1609:       assertEquals(30, Node.VAR_ARGS_NAME);
1610:       assertEquals(49, Node.DIRECT_EVAL);
1611:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1612:       assertEquals(57, Node.LAST_PROP);
1613:       assertEquals(46, Node.IS_NAMESPACE);
1614:       assertEquals(12, Node.COLUMN_BITS);
1615:       assertEquals(32, Node.INCRDECR_PROP);
1616:       assertEquals(54, Node.SLASH_V);
1617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1618:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1619:       assertEquals(29, Node.JSDOC_INFO_PROP);
1620:       assertEquals(52, Node.LENGTH);
1621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1622:       assertEquals(57, Node.REFLECTED_OBJECT);
1623:       assertEquals(56, Node.CHANGE_TIME);
1624:       assertEquals(48, Node.DIRECTIVES);
1625:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1626:       assertEquals(37, Node.OPT_ARG_NAME);
1627:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1629:       assertEquals(4095, Node.COLUMN_MASK);
1630:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1631:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1632:       assertEquals(43, Node.IS_CONSTANT_NAME);
1633:       assertEquals(53, Node.INPUT_ID);
1634:       assertEquals(39, Node.EMPTY_BLOCK);
1635:       assertEquals(36, Node.QUOTED_PROP);
1636:       assertEquals(55, Node.INFERRED_FUNCTION);
1637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1638:       assertEquals(8, Node.FLAG_NO_THROWS);
1639:       assertEquals(40, Node.ORIGINALNAME_PROP);
1640:       assertEquals(50, Node.FREE_CALL);
1641:       assertEquals(47, Node.IS_DISPATCHER);
1642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1643:       assertEquals(2, Node.POST_FLAG);
1644:       assertFalse(node4.equals((Object)node1));
1645:       assertFalse(node4.equals((Object)node2));
1646:       assertFalse(node4.equals((Object)node0));
1647:       assertFalse(node4.equals((Object)node3));
1648:       assertTrue(boolean2 == boolean1);
1649:       assertTrue(boolean2 == boolean0);
1650:       assertFalse(boolean2);
1651:       assertFalse(node4.isReturn());
1652:       assertFalse(node4.isAssignAdd());
1653:       assertFalse(node4.isDo());
1654:       assertEquals((-1), node4.getLineno());
1655:       assertFalse(node4.hasChildren());
1656:       assertFalse(node4.isTypeOf());
1657:       assertFalse(node4.isWhile());
1658:       assertFalse(node4.isContinue());
1659:       assertFalse(node4.hasMoreThanOneChild());
1660:       assertFalse(node4.isBlock());
1661:       assertFalse(node4.isLabel());
1662:       assertFalse(node4.isAssign());
1663:       assertEquals(39, node4.getType());
1664:       assertFalse(node4.isDec());
1665:       assertFalse(node4.isVar());
1666:       assertFalse(node4.isAdd());
1667:       assertFalse(node4.isGetElem());
1668:       assertFalse(node4.isName());
1669:       assertFalse(node4.isCall());
1670:       assertFalse(node4.isExprResult());
1671:       assertFalse(node4.isNew());
1672:       assertFalse(node4.isNull());
1673:       assertFalse(node4.isOr());
1674:       assertEquals(0, node4.getChildCount());
1675:       assertFalse(node4.isInstanceOf());
1676:       assertFalse(node4.isCatch());
1677:       assertFalse(node4.isDefaultCase());
1678:       assertFalse(node4.isWith());
1679:       assertFalse(node4.isThis());
1680:       assertFalse(node4.isRegExp());
1681:       assertFalse(node4.isHook());
1682:       assertFalse(node4.isLabelName());
1683:       assertFalse(node4.isArrayLit());
1684:       assertFalse(node4.isTry());
1685:       assertFalse(node4.hasOneChild());
1686:       assertFalse(node4.isGetterDef());
1687:       assertFalse(node4.isSwitch());
1688:       assertFalse(node4.isScript());
1689:       assertFalse(node4.isParamList());
1690:       assertFalse(node4.isStringKey());
1691:       assertEquals((-1), node4.getCharno());
1692:       assertFalse(node4.isIn());
1693:       assertTrue(node4.isNumber());
1694:       assertFalse(node4.isCase());
1695:       assertFalse(node4.isFor());
1696:       assertFalse(node4.isVoid());
1697:       assertFalse(node4.isInc());
1698:       assertFalse(node4.isDelProp());
1699:       assertFalse(node4.isIf());
1700:       assertFalse(node4.isNE());
1701:       assertFalse(node4.isEmpty());
1702:       assertFalse(node4.isTrue());
1703:       assertFalse(node4.isAnd());
1704:       assertFalse(node4.isGetProp());
1705:       assertFalse(node4.isSetterDef());
1706:       assertFalse(node4.isBreak());
1707:       assertFalse(node4.isThrow());
1708:       assertFalse(node4.isFunction());
1709:       assertFalse(node4.isFalse());
1710:       assertFalse(node4.isComma());
1711:       assertFalse(node4.isCast());
1712:       assertFalse(node4.isString());
1713:       assertFalse(node4.isObjectLit());
1714:       assertFalse(node4.isDebugger());
1715:       assertFalse(node4.isNot());
1716:       assertEquals((-1), node4.getSourcePosition());
1717:       
1718:       boolean boolean3 = node1.isFor();
1719:       assertEquals(2, Node.POST_FLAG);
1720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1721:       assertEquals(37, Node.OPT_ARG_NAME);
1722:       assertEquals(56, Node.CHANGE_TIME);
1723:       assertEquals(46, Node.IS_NAMESPACE);
1724:       assertEquals(47, Node.IS_DISPATCHER);
1725:       assertEquals(12, Node.COLUMN_BITS);
1726:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1727:       assertEquals(32, Node.INCRDECR_PROP);
1728:       assertEquals(29, Node.JSDOC_INFO_PROP);
1729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1730:       assertEquals(1, Node.DECR_FLAG);
1731:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1732:       assertEquals(53, Node.INPUT_ID);
1733:       assertEquals(36, Node.QUOTED_PROP);
1734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1735:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1736:       assertEquals(57, Node.REFLECTED_OBJECT);
1737:       assertEquals(4095, Node.COLUMN_MASK);
1738:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1739:       assertEquals(49, Node.DIRECT_EVAL);
1740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1741:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1742:       assertEquals(48, Node.DIRECTIVES);
1743:       assertEquals(8, Node.FLAG_NO_THROWS);
1744:       assertEquals(50, Node.FREE_CALL);
1745:       assertEquals(55, Node.INFERRED_FUNCTION);
1746:       assertEquals(52, Node.LENGTH);
1747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1749:       assertEquals(39, Node.EMPTY_BLOCK);
1750:       assertEquals(43, Node.IS_CONSTANT_NAME);
1751:       assertEquals(57, Node.LAST_PROP);
1752:       assertEquals(30, Node.VAR_ARGS_NAME);
1753:       assertEquals(54, Node.SLASH_V);
1754:       assertEquals(40, Node.ORIGINALNAME_PROP);
1755:       assertEquals(40, Node.ORIGINALNAME_PROP);
1756:       assertEquals(50, Node.FREE_CALL);
1757:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1758:       assertEquals(52, Node.LENGTH);
1759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1760:       assertEquals(8, Node.FLAG_NO_THROWS);
1761:       assertEquals(48, Node.DIRECTIVES);
1762:       assertEquals(57, Node.REFLECTED_OBJECT);
1763:       assertEquals(54, Node.SLASH_V);
1764:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1765:       assertEquals(49, Node.DIRECT_EVAL);
1766:       assertEquals(1, Node.DECR_FLAG);
1767:       assertEquals(4095, Node.COLUMN_MASK);
1768:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1769:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1770:       assertEquals(32, Node.INCRDECR_PROP);
1771:       assertEquals(12, Node.COLUMN_BITS);
1772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1774:       assertEquals(53, Node.INPUT_ID);
1775:       assertEquals(29, Node.JSDOC_INFO_PROP);
1776:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1777:       assertEquals(37, Node.OPT_ARG_NAME);
1778:       assertEquals(36, Node.QUOTED_PROP);
1779:       assertEquals(43, Node.IS_CONSTANT_NAME);
1780:       assertEquals(56, Node.CHANGE_TIME);
1781:       assertEquals(46, Node.IS_NAMESPACE);
1782:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1783:       assertEquals(30, Node.VAR_ARGS_NAME);
1784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1785:       assertEquals(55, Node.INFERRED_FUNCTION);
1786:       assertEquals(39, Node.EMPTY_BLOCK);
1787:       assertEquals(2, Node.POST_FLAG);
1788:       assertEquals(57, Node.LAST_PROP);
1789:       assertEquals(47, Node.IS_DISPATCHER);
1790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1791:       assertFalse(node0.equals((Object)node3));
1792:       assertFalse(node0.equals((Object)node4));
1793:       assertFalse(node0.equals((Object)node2));
1794:       assertFalse(node0.equals((Object)node1));
1795:       assertFalse(node1.equals((Object)node4));
1796:       assertFalse(node1.equals((Object)node0));
1797:       assertTrue(boolean3 == boolean1);
1798:       assertTrue(boolean3 == boolean0);
1799:       assertTrue(boolean3 == boolean2);
1800:       assertSame(node1, node3);
1801:       assertSame(node1, node2);
1802:       assertFalse(boolean3);
1803:       assertFalse(node0.isLabelName());
1804:       assertFalse(node0.isAssign());
1805:       assertFalse(node0.hasChildren());
1806:       assertFalse(node0.isGetElem());
1807:       assertFalse(node0.hasOneChild());
1808:       assertFalse(node0.isLabel());
1809:       assertEquals((-1), node0.getLineno());
1810:       assertFalse(node0.isExprResult());
1811:       assertFalse(node0.isReturn());
1812:       assertFalse(node0.isTypeOf());
1813:       assertFalse(node0.isCast());
1814:       assertFalse(node0.isDec());
1815:       assertFalse(node0.isContinue());
1816:       assertFalse(node0.hasMoreThanOneChild());
1817:       assertFalse(node0.isWith());
1818:       assertFalse(node0.isDo());
1819:       assertFalse(node0.isAssignAdd());
1820:       assertFalse(node0.isNew());
1821:       assertFalse(node0.isAdd());
1822:       assertFalse(node0.isOr());
1823:       assertFalse(node0.isName());
1824:       assertFalse(node0.isThrow());
1825:       assertFalse(node0.isCall());
1826:       assertFalse(node0.isBreak());
1827:       assertFalse(node0.isNull());
1828:       assertFalse(node0.isComma());
1829:       assertFalse(node0.isFalse());
1830:       assertFalse(node0.isNot());
1831:       assertFalse(node0.isAnd());
1832:       assertFalse(node0.isWhile());
1833:       assertFalse(node0.isDebugger());
1834:       assertFalse(node0.isGetProp());
1835:       assertEquals((-1), node0.getSourcePosition());
1836:       assertFalse(node0.isObjectLit());
1837:       assertFalse(node0.isEmpty());
1838:       assertFalse(node0.isFor());
1839:       assertFalse(node0.isArrayLit());
1840:       assertFalse(node0.isNE());
1841:       assertFalse(node0.isDelProp());
1842:       assertFalse(node0.isIf());
1843:       assertFalse(node0.isRegExp());
1844:       assertFalse(node0.isFunction());
1845:       assertEquals(40, node0.getType());
1846:       assertFalse(node0.isVoid());
1847:       assertFalse(node0.isDefaultCase());
1848:       assertFalse(node0.isTrue());
1849:       assertFalse(node0.isInc());
1850:       assertFalse(node0.isSetterDef());
1851:       assertFalse(node0.isIn());
1852:       assertFalse(node0.isStringKey());
1853:       assertFalse(node0.isVar());
1854:       assertFalse(node0.isParamList());
1855:       assertFalse(node0.isBlock());
1856:       assertFalse(node0.isHook());
1857:       assertFalse(node0.isThis());
1858:       assertEquals(0, node0.getChildCount());
1859:       assertFalse(node0.isInstanceOf());
1860:       assertFalse(node0.isCatch());
1861:       assertFalse(node0.isCase());
1862:       assertFalse(node0.isSwitch());
1863:       assertTrue(node0.isString());
1864:       assertFalse(node0.isTry());
1865:       assertEquals((-1), node0.getCharno());
1866:       assertFalse(node0.isScript());
1867:       assertFalse(node0.isGetterDef());
1868:       assertFalse(node0.isNumber());
1869:       assertFalse(node1.isBlock());
1870:       assertFalse(node1.isVar());
1871:       assertFalse(node1.isAdd());
1872:       assertFalse(node1.isWhile());
1873:       assertFalse(node1.isSetterDef());
1874:       assertFalse(node1.isNew());
1875:       assertFalse(node1.isDo());
1876:       assertFalse(node1.isReturn());
1877:       assertEquals((-1), node1.getLineno());
1878:       assertFalse(node1.hasMoreThanOneChild());
1879:       assertFalse(node1.isCatch());
1880:       assertFalse(node1.isDec());
1881:       assertFalse(node1.isTypeOf());
1882:       assertFalse(node1.isOr());
1883:       assertFalse(node1.isNull());
1884:       assertFalse(node1.isGetElem());
1885:       assertFalse(node1.isCall());
1886:       assertFalse(node1.isName());
1887:       assertFalse(node1.isVoid());
1888:       assertFalse(node1.isCast());
1889:       assertFalse(node1.isFunction());
1890:       assertFalse(node1.isDebugger());
1891:       assertFalse(node1.isAssign());
1892:       assertTrue(node1.hasOneChild());
1893:       assertFalse(node1.isContinue());
1894:       assertEquals((-1), node1.getSourcePosition());
1895:       assertFalse(node1.isNot());
1896:       assertFalse(node1.isObjectLit());
1897:       assertFalse(node1.isAnd());
1898:       assertFalse(node1.isHook());
1899:       assertEquals((-1), node1.getCharno());
1900:       assertFalse(node1.isFalse());
1901:       assertFalse(node1.isString());
1902:       assertFalse(node1.isThrow());
1903:       assertFalse(node1.isInc());
1904:       assertFalse(node1.isGetProp());
1905:       assertFalse(node1.isCase());
1906:       assertEquals(1, node1.getChildCount());
1907:       assertFalse(node1.isIn());
1908:       assertFalse(node1.isInstanceOf());
1909:       assertTrue(node1.hasChildren());
1910:       assertFalse(node1.isComma());
1911:       assertFalse(node1.isThis());
1912:       assertFalse(node1.isWith());
1913:       assertFalse(node1.isBreak());
1914:       assertFalse(node1.isIf());
1915:       assertFalse(node1.isNE());
1916:       assertFalse(node1.isExprResult());
1917:       assertFalse(node1.isDelProp());
1918:       assertFalse(node1.isTrue());
1919:       assertFalse(node1.isRegExp());
1920:       assertFalse(node1.isDefaultCase());
1921:       assertFalse(node1.isEmpty());
1922:       assertFalse(node1.isScript());
1923:       assertFalse(node1.isFor());
1924:       assertFalse(node1.isTry());
1925:       assertFalse(node1.isAssignAdd());
1926:       assertFalse(node1.isLabel());
1927:       assertFalse(node1.isNumber());
1928:       assertFalse(node1.isGetterDef());
1929:       assertEquals(2342, node1.getType());
1930:       assertFalse(node1.isStringKey());
1931:       assertFalse(node1.isParamList());
1932:       assertFalse(node1.isSwitch());
1933:       assertFalse(node1.isArrayLit());
1934:       assertFalse(node1.isLabelName());
1935:       
1936:       boolean boolean4 = node4.isAssignAdd();
1937:       assertEquals(1, Node.DECR_FLAG);
1938:       assertEquals(30, Node.VAR_ARGS_NAME);
1939:       assertEquals(49, Node.DIRECT_EVAL);
1940:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1941:       assertEquals(57, Node.LAST_PROP);
1942:       assertEquals(46, Node.IS_NAMESPACE);
1943:       assertEquals(12, Node.COLUMN_BITS);
1944:       assertEquals(32, Node.INCRDECR_PROP);
1945:       assertEquals(54, Node.SLASH_V);
1946:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1947:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1948:       assertEquals(29, Node.JSDOC_INFO_PROP);
1949:       assertEquals(52, Node.LENGTH);
1950:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1951:       assertEquals(57, Node.REFLECTED_OBJECT);
1952:       assertEquals(56, Node.CHANGE_TIME);
1953:       assertEquals(48, Node.DIRECTIVES);
1954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1955:       assertEquals(37, Node.OPT_ARG_NAME);
1956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1957:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1958:       assertEquals(4095, Node.COLUMN_MASK);
1959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1960:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1961:       assertEquals(43, Node.IS_CONSTANT_NAME);
1962:       assertEquals(53, Node.INPUT_ID);
1963:       assertEquals(39, Node.EMPTY_BLOCK);
1964:       assertEquals(36, Node.QUOTED_PROP);
1965:       assertEquals(55, Node.INFERRED_FUNCTION);
1966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1967:       assertEquals(8, Node.FLAG_NO_THROWS);
1968:       assertEquals(40, Node.ORIGINALNAME_PROP);
1969:       assertEquals(50, Node.FREE_CALL);
1970:       assertEquals(47, Node.IS_DISPATCHER);
1971:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1972:       assertEquals(2, Node.POST_FLAG);
1973:       assertFalse(node4.equals((Object)node1));
1974:       assertFalse(node4.equals((Object)node2));
1975:       assertFalse(node4.equals((Object)node0));
1976:       assertFalse(node4.equals((Object)node3));
1977:       assertTrue(boolean4 == boolean1);
1978:       assertTrue(boolean4 == boolean3);
1979:       assertTrue(boolean4 == boolean0);
1980:       assertTrue(boolean4 == boolean2);
1981:       assertFalse(boolean4);
1982:       assertFalse(node4.isReturn());
1983:       assertFalse(node4.isAssignAdd());
1984:       assertFalse(node4.isDo());
1985:       assertEquals((-1), node4.getLineno());
1986:       assertFalse(node4.hasChildren());
1987:       assertFalse(node4.isTypeOf());
1988:       assertFalse(node4.isWhile());
1989:       assertFalse(node4.isContinue());
1990:       assertFalse(node4.hasMoreThanOneChild());
1991:       assertFalse(node4.isBlock());
1992:       assertFalse(node4.isLabel());
1993:       assertFalse(node4.isAssign());
1994:       assertEquals(39, node4.getType());
1995:       assertFalse(node4.isDec());
1996:       assertFalse(node4.isVar());
1997:       assertFalse(node4.isAdd());
1998:       assertFalse(node4.isGetElem());
1999:       assertFalse(node4.isName());
2000:       assertFalse(node4.isCall());
2001:       assertFalse(node4.isExprResult());
2002:       assertFalse(node4.isNew());
2003:       assertFalse(node4.isNull());
2004:       assertFalse(node4.isOr());
2005:       assertEquals(0, node4.getChildCount());
2006:       assertFalse(node4.isInstanceOf());
2007:       assertFalse(node4.isCatch());
2008:       assertFalse(node4.isDefaultCase());
2009:       assertFalse(node4.isWith());
2010:       assertFalse(node4.isThis());
2011:       assertFalse(node4.isRegExp());
2012:       assertFalse(node4.isHook());
2013:       assertFalse(node4.isLabelName());
2014:       assertFalse(node4.isArrayLit());
2015:       assertFalse(node4.isTry());
2016:       assertFalse(node4.hasOneChild());
2017:       assertFalse(node4.isGetterDef());
2018:       assertFalse(node4.isSwitch());
2019:       assertFalse(node4.isScript());
2020:       assertFalse(node4.isParamList());
2021:       assertFalse(node4.isStringKey());
2022:       assertEquals((-1), node4.getCharno());
2023:       assertFalse(node4.isIn());
2024:       assertTrue(node4.isNumber());
2025:       assertFalse(node4.isCase());
2026:       assertFalse(node4.isFor());
2027:       assertFalse(node4.isVoid());
2028:       assertFalse(node4.isInc());
2029:       assertFalse(node4.isDelProp());
2030:       assertFalse(node4.isIf());
2031:       assertFalse(node4.isNE());
2032:       assertFalse(node4.isEmpty());
2033:       assertFalse(node4.isTrue());
2034:       assertFalse(node4.isAnd());
2035:       assertFalse(node4.isGetProp());
2036:       assertFalse(node4.isSetterDef());
2037:       assertFalse(node4.isBreak());
2038:       assertFalse(node4.isThrow());
2039:       assertFalse(node4.isFunction());
2040:       assertFalse(node4.isFalse());
2041:       assertFalse(node4.isComma());
2042:       assertFalse(node4.isCast());
2043:       assertFalse(node4.isString());
2044:       assertFalse(node4.isObjectLit());
2045:       assertFalse(node4.isDebugger());
2046:       assertFalse(node4.isNot());
2047:       assertEquals((-1), node4.getSourcePosition());
2048:       
2049:       Node[] nodeArray0 = new Node[4];
2050:       nodeArray0[0] = node3;
2051:       nodeArray0[1] = node3;
2052:       nodeArray0[2] = node1;
2053:       nodeArray0[3] = node1;
2054:       Node node5 = null;
2055:       try {
2056:         node5 = new Node(12, nodeArray0);
2057:         fail("Expecting exception: IllegalArgumentException");
2058:       
2059:       } catch(IllegalArgumentException e) {
2060:          //
2061:          // duplicate child
2062:          //
2063:          verifyException("com.google.javascript.rhino.Node", e);
2064:       }
2065:   }
2066: }
RegularFileObject[/tmp/EvoSuite_373_1628160200585/com/google/javascript/rhino/Node_373_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_373_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_373_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_373_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:21.049 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(":5hjZ,_yR");
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

Node node1 = new Node(2342, node0, node0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(2342, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());

boolean boolean0 = node0.isEquivalentToTyped(node1);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(2342, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());

Node node2 = node0.getParent();
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertSame(node2, node1);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertEquals(2342, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());

Node node3 = node1.copyInformationFrom(node0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertSame(node1, node3);
assertSame(node1, node2);
assertSame(node3, node1);
assertSame(node3, node2);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(2342, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals(2342, node3.getType());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isWhile());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertFalse(node3.isIn());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

boolean boolean1 = node3.isExprResult();
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertSame(node1, node3);
assertSame(node1, node2);
assertSame(node3, node1);
assertSame(node3, node2);
assertFalse(boolean1);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(2342, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals(2342, node3.getType());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isWhile());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertFalse(node3.isIn());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());

Node node4 = Node.newNumber(0.0, (-3310), 939);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node4);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertEquals((-1), node4.getLineno());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertEquals(39, node4.getType());
assertFalse(node4.isDec());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isNew());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertTrue(node4.isNumber());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isAnd());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isCast());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());

boolean boolean2 = node4.isOnlyModifiesThisCall();
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertEquals((-1), node4.getLineno());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertEquals(39, node4.getType());
assertFalse(node4.isDec());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isNew());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertTrue(node4.isNumber());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isAnd());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isCast());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());

boolean boolean3 = node1.isFor();
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertSame(node1, node3);
assertSame(node1, node2);
assertFalse(boolean3);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(2342, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());

boolean boolean4 = node4.isAssignAdd();
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4);
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertEquals((-1), node4.getLineno());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertEquals(39, node4.getType());
assertFalse(node4.isDec());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isNew());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertTrue(node4.isNumber());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isAnd());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isCast());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());

Node[] nodeArray0 = new Node[4];
nodeArray0[0] = node3;
nodeArray0[1] = node3;
nodeArray0[2] = node1;
nodeArray0[3] = node1;
Node node5 = new Node(12, nodeArray0);

[MASTER] 10:43:25.720 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_409_1628160205351/com/google/javascript/rhino/Node_409_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_409_1628160205351/com/google/javascript/rhino/Node_409_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:25.720 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:25.721 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:25.721 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1110
[MASTER] 10:43:25.722 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_409_1628160205351/com/google/javascript/rhino/Node_409_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_409_tmp__ESTest extends Node_409_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(":5hjZ,_yR");
21:       assertEquals(57, Node.LAST_PROP);
22:       assertEquals(30, Node.VAR_ARGS_NAME);
23:       assertEquals(54, Node.SLASH_V);
24:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
25:       assertEquals(57, Node.REFLECTED_OBJECT);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(12, Node.COLUMN_BITS);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(52, Node.LENGTH);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(15, Node.NO_SIDE_EFFECTS);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(56, Node.CHANGE_TIME);
35:       assertEquals(8, Node.FLAG_NO_THROWS);
36:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
37:       assertEquals(4095, Node.COLUMN_MASK);
38:       assertEquals(49, Node.DIRECT_EVAL);
39:       assertEquals(48, Node.DIRECTIVES);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(43, Node.IS_CONSTANT_NAME);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(29, Node.JSDOC_INFO_PROP);
47:       assertEquals(53, Node.INPUT_ID);
48:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(39, Node.EMPTY_BLOCK);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(40, Node.ORIGINALNAME_PROP);
57:       assertNotNull(node0);
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isThrow());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isIf());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isDefaultCase());
71:       assertFalse(node0.isThis());
72:       assertFalse(node0.isInstanceOf());
73:       assertFalse(node0.isRegExp());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isLabelName());
80:       assertFalse(node0.isArrayLit());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isParamList());
84:       assertTrue(node0.isString());
85:       assertFalse(node0.isTry());
86:       assertEquals((-1), node0.getCharno());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.isGetterDef());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.isDo());
91:       assertFalse(node0.isWhile());
92:       assertFalse(node0.isAssignAdd());
93:       assertFalse(node0.isBlock());
94:       assertFalse(node0.isReturn());
95:       assertEquals((-1), node0.getLineno());
96:       assertFalse(node0.isLabel());
97:       assertFalse(node0.isTypeOf());
98:       assertFalse(node0.isDec());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isContinue());
101:       assertFalse(node0.isGetElem());
102:       assertFalse(node0.isName());
103:       assertFalse(node0.isCall());
104:       assertFalse(node0.isNull());
105:       assertFalse(node0.isVar());
106:       assertFalse(node0.isNew());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isOr());
109:       assertFalse(node0.isSetterDef());
110:       assertEquals(40, node0.getType());
111:       assertFalse(node0.isNot());
112:       assertFalse(node0.isAnd());
113:       assertFalse(node0.isVoid());
114:       assertFalse(node0.isExprResult());
115:       assertFalse(node0.isComma());
116:       assertFalse(node0.isCast());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isAssign());
119:       assertFalse(node0.hasChildren());
120:       assertFalse(node0.isDebugger());
121:       assertFalse(node0.isGetProp());
122:       assertEquals((-1), node0.getSourcePosition());
123:       assertFalse(node0.isObjectLit());
124:       
125:       Node node1 = new Node(2342, node0, node0);
126:       assertEquals(57, Node.LAST_PROP);
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(32, Node.INCRDECR_PROP);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
139:       assertEquals(56, Node.CHANGE_TIME);
140:       assertEquals(8, Node.FLAG_NO_THROWS);
141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
142:       assertEquals(4095, Node.COLUMN_MASK);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(48, Node.DIRECTIVES);
145:       assertEquals(37, Node.OPT_ARG_NAME);
146:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(43, Node.IS_CONSTANT_NAME);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(29, Node.JSDOC_INFO_PROP);
152:       assertEquals(53, Node.INPUT_ID);
153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(39, Node.EMPTY_BLOCK);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertEquals(29, Node.JSDOC_INFO_PROP);
163:       assertEquals(47, Node.IS_DISPATCHER);
164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
165:       assertEquals(56, Node.CHANGE_TIME);
166:       assertEquals(37, Node.OPT_ARG_NAME);
167:       assertEquals(2, Node.POST_FLAG);
168:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
169:       assertEquals(30, Node.VAR_ARGS_NAME);
170:       assertEquals(49, Node.DIRECT_EVAL);
171:       assertEquals(15, Node.NO_SIDE_EFFECTS);
172:       assertEquals(36, Node.QUOTED_PROP);
173:       assertEquals(57, Node.LAST_PROP);
174:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
175:       assertEquals(52, Node.LENGTH);
176:       assertEquals(53, Node.INPUT_ID);
177:       assertEquals(57, Node.REFLECTED_OBJECT);
178:       assertEquals(55, Node.INFERRED_FUNCTION);
179:       assertEquals(8, Node.FLAG_NO_THROWS);
180:       assertEquals(39, Node.EMPTY_BLOCK);
181:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
182:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
183:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
184:       assertEquals(50, Node.FREE_CALL);
185:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
186:       assertEquals(48, Node.DIRECTIVES);
187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
188:       assertEquals(40, Node.ORIGINALNAME_PROP);
189:       assertEquals(4095, Node.COLUMN_MASK);
190:       assertEquals(1, Node.DECR_FLAG);
191:       assertEquals(12, Node.COLUMN_BITS);
192:       assertEquals(54, Node.SLASH_V);
193:       assertEquals(43, Node.IS_CONSTANT_NAME);
194:       assertEquals(32, Node.INCRDECR_PROP);
195:       assertEquals(46, Node.IS_NAMESPACE);
196:       assertEquals(51, Node.STATIC_SOURCE_FILE);
197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
198:       assertNotNull(node1);
199:       assertFalse(node1.equals((Object)node0));
200:       assertFalse(node0.isCase());
201:       assertFalse(node0.isSwitch());
202:       assertFalse(node0.isFalse());
203:       assertFalse(node0.isEmpty());
204:       assertFalse(node0.isThrow());
205:       assertFalse(node0.isBreak());
206:       assertFalse(node0.isNE());
207:       assertFalse(node0.isDelProp());
208:       assertFalse(node0.isIf());
209:       assertFalse(node0.isTrue());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isIn());
212:       assertFalse(node0.isDefaultCase());
213:       assertFalse(node0.isThis());
214:       assertFalse(node0.isInstanceOf());
215:       assertFalse(node0.isRegExp());
216:       assertEquals(0, node0.getChildCount());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isWith());
219:       assertFalse(node0.isStringKey());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isArrayLit());
223:       assertFalse(node0.hasOneChild());
224:       assertFalse(node0.isHook());
225:       assertFalse(node0.isParamList());
226:       assertTrue(node0.isString());
227:       assertFalse(node0.isTry());
228:       assertEquals((-1), node0.getCharno());
229:       assertFalse(node0.isNumber());
230:       assertFalse(node0.isGetterDef());
231:       assertFalse(node0.isScript());
232:       assertFalse(node0.isDo());
233:       assertFalse(node0.isWhile());
234:       assertFalse(node0.isAssignAdd());
235:       assertFalse(node0.isBlock());
236:       assertFalse(node0.isReturn());
237:       assertEquals((-1), node0.getLineno());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.isTypeOf());
240:       assertFalse(node0.isDec());
241:       assertFalse(node0.hasMoreThanOneChild());
242:       assertFalse(node0.isContinue());
243:       assertFalse(node0.isGetElem());
244:       assertFalse(node0.isName());
245:       assertFalse(node0.isCall());
246:       assertFalse(node0.isNull());
247:       assertFalse(node0.isVar());
248:       assertFalse(node0.isNew());
249:       assertFalse(node0.isAdd());
250:       assertFalse(node0.isOr());
251:       assertFalse(node0.isSetterDef());
252:       assertEquals(40, node0.getType());
253:       assertFalse(node0.isNot());
254:       assertFalse(node0.isAnd());
255:       assertFalse(node0.isVoid());
256:       assertFalse(node0.isExprResult());
257:       assertFalse(node0.isComma());
258:       assertFalse(node0.isCast());
259:       assertFalse(node0.isFunction());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isDebugger());
263:       assertFalse(node0.isGetProp());
264:       assertEquals((-1), node0.getSourcePosition());
265:       assertFalse(node0.isObjectLit());
266:       assertFalse(node1.isCast());
267:       assertFalse(node1.isLabelName());
268:       assertFalse(node1.isGetElem());
269:       assertFalse(node1.isNumber());
270:       assertFalse(node1.isScript());
271:       assertFalse(node1.isOr());
272:       assertFalse(node1.isNot());
273:       assertEquals((-1), node1.getSourcePosition());
274:       assertFalse(node1.isContinue());
275:       assertFalse(node1.isAnd());
276:       assertFalse(node1.isAssignAdd());
277:       assertFalse(node1.isDo());
278:       assertFalse(node1.isLabel());
279:       assertEquals(2342, node1.getType());
280:       assertFalse(node1.isVar());
281:       assertFalse(node1.isCall());
282:       assertFalse(node1.isFalse());
283:       assertFalse(node1.isAdd());
284:       assertFalse(node1.isName());
285:       assertFalse(node1.isBreak());
286:       assertFalse(node1.isNew());
287:       assertFalse(node1.isNull());
288:       assertFalse(node1.isString());
289:       assertFalse(node1.isObjectLit());
290:       assertFalse(node1.isGetProp());
291:       assertFalse(node1.isExprResult());
292:       assertFalse(node1.isTypeOf());
293:       assertFalse(node1.isWhile());
294:       assertFalse(node1.isAssign());
295:       assertFalse(node1.isReturn());
296:       assertTrue(node1.hasOneChild());
297:       assertFalse(node1.isDec());
298:       assertFalse(node1.isComma());
299:       assertFalse(node1.isEmpty());
300:       assertFalse(node1.isTry());
301:       assertFalse(node1.isDelProp());
302:       assertFalse(node1.isVoid());
303:       assertFalse(node1.isArrayLit());
304:       assertFalse(node1.isNE());
305:       assertFalse(node1.isTrue());
306:       assertFalse(node1.isIf());
307:       assertFalse(node1.isGetterDef());
308:       assertFalse(node1.isDebugger());
309:       assertFalse(node1.isIn());
310:       assertFalse(node1.isFunction());
311:       assertFalse(node1.isDefaultCase());
312:       assertFalse(node1.isHook());
313:       assertFalse(node1.isThrow());
314:       assertFalse(node1.isStringKey());
315:       assertFalse(node1.isSwitch());
316:       assertFalse(node1.isSetterDef());
317:       assertFalse(node1.isInc());
318:       assertFalse(node1.isParamList());
319:       assertEquals((-1), node1.getCharno());
320:       assertFalse(node1.hasMoreThanOneChild());
321:       assertFalse(node1.isCatch());
322:       assertFalse(node1.isInstanceOf());
323:       assertTrue(node1.hasChildren());
324:       assertFalse(node1.isCase());
325:       assertEquals((-1), node1.getLineno());
326:       assertFalse(node1.isRegExp());
327:       assertFalse(node1.isThis());
328:       assertFalse(node1.isWith());
329:       assertFalse(node1.isBlock());
330:       assertFalse(node1.isFor());
331:       assertEquals(1, node1.getChildCount());
332:       
333:       boolean boolean0 = node0.isEquivalentToTyped(node1);
334:       assertEquals(57, Node.LAST_PROP);
335:       assertEquals(30, Node.VAR_ARGS_NAME);
336:       assertEquals(54, Node.SLASH_V);
337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
338:       assertEquals(57, Node.REFLECTED_OBJECT);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(12, Node.COLUMN_BITS);
341:       assertEquals(32, Node.INCRDECR_PROP);
342:       assertEquals(52, Node.LENGTH);
343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(8, Node.FLAG_NO_THROWS);
349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
350:       assertEquals(4095, Node.COLUMN_MASK);
351:       assertEquals(49, Node.DIRECT_EVAL);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(37, Node.OPT_ARG_NAME);
354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
355:       assertEquals(36, Node.QUOTED_PROP);
356:       assertEquals(43, Node.IS_CONSTANT_NAME);
357:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
358:       assertEquals(55, Node.INFERRED_FUNCTION);
359:       assertEquals(29, Node.JSDOC_INFO_PROP);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
363:       assertEquals(39, Node.EMPTY_BLOCK);
364:       assertEquals(2, Node.POST_FLAG);
365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
366:       assertEquals(50, Node.FREE_CALL);
367:       assertEquals(46, Node.IS_NAMESPACE);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(47, Node.IS_DISPATCHER);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
377:       assertEquals(30, Node.VAR_ARGS_NAME);
378:       assertEquals(49, Node.DIRECT_EVAL);
379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
380:       assertEquals(36, Node.QUOTED_PROP);
381:       assertEquals(57, Node.LAST_PROP);
382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
383:       assertEquals(52, Node.LENGTH);
384:       assertEquals(53, Node.INPUT_ID);
385:       assertEquals(57, Node.REFLECTED_OBJECT);
386:       assertEquals(55, Node.INFERRED_FUNCTION);
387:       assertEquals(8, Node.FLAG_NO_THROWS);
388:       assertEquals(39, Node.EMPTY_BLOCK);
389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
390:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
392:       assertEquals(50, Node.FREE_CALL);
393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
394:       assertEquals(48, Node.DIRECTIVES);
395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
396:       assertEquals(40, Node.ORIGINALNAME_PROP);
397:       assertEquals(4095, Node.COLUMN_MASK);
398:       assertEquals(1, Node.DECR_FLAG);
399:       assertEquals(12, Node.COLUMN_BITS);
400:       assertEquals(54, Node.SLASH_V);
401:       assertEquals(43, Node.IS_CONSTANT_NAME);
402:       assertEquals(32, Node.INCRDECR_PROP);
403:       assertEquals(46, Node.IS_NAMESPACE);
404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertFalse(node0.equals((Object)node1));
407:       assertFalse(node1.equals((Object)node0));
408:       assertFalse(boolean0);
409:       assertFalse(node0.isCase());
410:       assertFalse(node0.isSwitch());
411:       assertFalse(node0.isFalse());
412:       assertFalse(node0.isEmpty());
413:       assertFalse(node0.isThrow());
414:       assertFalse(node0.isBreak());
415:       assertFalse(node0.isNE());
416:       assertFalse(node0.isDelProp());
417:       assertFalse(node0.isIf());
418:       assertFalse(node0.isTrue());
419:       assertFalse(node0.isInc());
420:       assertFalse(node0.isIn());
421:       assertFalse(node0.isDefaultCase());
422:       assertFalse(node0.isThis());
423:       assertFalse(node0.isInstanceOf());
424:       assertFalse(node0.isRegExp());
425:       assertEquals(0, node0.getChildCount());
426:       assertFalse(node0.isCatch());
427:       assertFalse(node0.isWith());
428:       assertFalse(node0.isStringKey());
429:       assertFalse(node0.isFor());
430:       assertFalse(node0.isLabelName());
431:       assertFalse(node0.isArrayLit());
432:       assertFalse(node0.hasOneChild());
433:       assertFalse(node0.isHook());
434:       assertFalse(node0.isParamList());
435:       assertTrue(node0.isString());
436:       assertFalse(node0.isTry());
437:       assertEquals((-1), node0.getCharno());
438:       assertFalse(node0.isNumber());
439:       assertFalse(node0.isGetterDef());
440:       assertFalse(node0.isScript());
441:       assertFalse(node0.isDo());
442:       assertFalse(node0.isWhile());
443:       assertFalse(node0.isAssignAdd());
444:       assertFalse(node0.isBlock());
445:       assertFalse(node0.isReturn());
446:       assertEquals((-1), node0.getLineno());
447:       assertFalse(node0.isLabel());
448:       assertFalse(node0.isTypeOf());
449:       assertFalse(node0.isDec());
450:       assertFalse(node0.hasMoreThanOneChild());
451:       assertFalse(node0.isContinue());
452:       assertFalse(node0.isGetElem());
453:       assertFalse(node0.isName());
454:       assertFalse(node0.isCall());
455:       assertFalse(node0.isNull());
456:       assertFalse(node0.isVar());
457:       assertFalse(node0.isNew());
458:       assertFalse(node0.isAdd());
459:       assertFalse(node0.isOr());
460:       assertFalse(node0.isSetterDef());
461:       assertEquals(40, node0.getType());
462:       assertFalse(node0.isNot());
463:       assertFalse(node0.isAnd());
464:       assertFalse(node0.isVoid());
465:       assertFalse(node0.isExprResult());
466:       assertFalse(node0.isComma());
467:       assertFalse(node0.isCast());
468:       assertFalse(node0.isFunction());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.hasChildren());
471:       assertFalse(node0.isDebugger());
472:       assertFalse(node0.isGetProp());
473:       assertEquals((-1), node0.getSourcePosition());
474:       assertFalse(node0.isObjectLit());
475:       assertFalse(node1.isCast());
476:       assertFalse(node1.isLabelName());
477:       assertFalse(node1.isGetElem());
478:       assertFalse(node1.isNumber());
479:       assertFalse(node1.isScript());
480:       assertFalse(node1.isOr());
481:       assertFalse(node1.isNot());
482:       assertEquals((-1), node1.getSourcePosition());
483:       assertFalse(node1.isContinue());
484:       assertFalse(node1.isAnd());
485:       assertFalse(node1.isAssignAdd());
486:       assertFalse(node1.isDo());
487:       assertFalse(node1.isLabel());
488:       assertEquals(2342, node1.getType());
489:       assertFalse(node1.isVar());
490:       assertFalse(node1.isCall());
491:       assertFalse(node1.isFalse());
492:       assertFalse(node1.isAdd());
493:       assertFalse(node1.isName());
494:       assertFalse(node1.isBreak());
495:       assertFalse(node1.isNew());
496:       assertFalse(node1.isNull());
497:       assertFalse(node1.isString());
498:       assertFalse(node1.isObjectLit());
499:       assertFalse(node1.isGetProp());
500:       assertFalse(node1.isExprResult());
501:       assertFalse(node1.isTypeOf());
502:       assertFalse(node1.isWhile());
503:       assertFalse(node1.isAssign());
504:       assertFalse(node1.isReturn());
505:       assertTrue(node1.hasOneChild());
506:       assertFalse(node1.isDec());
507:       assertFalse(node1.isComma());
508:       assertFalse(node1.isEmpty());
509:       assertFalse(node1.isTry());
510:       assertFalse(node1.isDelProp());
511:       assertFalse(node1.isVoid());
512:       assertFalse(node1.isArrayLit());
513:       assertFalse(node1.isNE());
514:       assertFalse(node1.isTrue());
515:       assertFalse(node1.isIf());
516:       assertFalse(node1.isGetterDef());
517:       assertFalse(node1.isDebugger());
518:       assertFalse(node1.isIn());
519:       assertFalse(node1.isFunction());
520:       assertFalse(node1.isDefaultCase());
521:       assertFalse(node1.isHook());
522:       assertFalse(node1.isThrow());
523:       assertFalse(node1.isStringKey());
524:       assertFalse(node1.isSwitch());
525:       assertFalse(node1.isSetterDef());
526:       assertFalse(node1.isInc());
527:       assertFalse(node1.isParamList());
528:       assertEquals((-1), node1.getCharno());
529:       assertFalse(node1.hasMoreThanOneChild());
530:       assertFalse(node1.isCatch());
531:       assertFalse(node1.isInstanceOf());
532:       assertTrue(node1.hasChildren());
533:       assertFalse(node1.isCase());
534:       assertEquals((-1), node1.getLineno());
535:       assertFalse(node1.isRegExp());
536:       assertFalse(node1.isThis());
537:       assertFalse(node1.isWith());
538:       assertFalse(node1.isBlock());
539:       assertFalse(node1.isFor());
540:       assertEquals(1, node1.getChildCount());
541:       
542:       Node node2 = node0.getParent();
543:       assertEquals(57, Node.LAST_PROP);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(54, Node.SLASH_V);
546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
547:       assertEquals(57, Node.REFLECTED_OBJECT);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(12, Node.COLUMN_BITS);
550:       assertEquals(32, Node.INCRDECR_PROP);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(1, Node.DECR_FLAG);
554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
555:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
556:       assertEquals(56, Node.CHANGE_TIME);
557:       assertEquals(8, Node.FLAG_NO_THROWS);
558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
559:       assertEquals(4095, Node.COLUMN_MASK);
560:       assertEquals(49, Node.DIRECT_EVAL);
561:       assertEquals(48, Node.DIRECTIVES);
562:       assertEquals(37, Node.OPT_ARG_NAME);
563:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
564:       assertEquals(36, Node.QUOTED_PROP);
565:       assertEquals(43, Node.IS_CONSTANT_NAME);
566:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(29, Node.JSDOC_INFO_PROP);
569:       assertEquals(53, Node.INPUT_ID);
570:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
571:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(2, Node.POST_FLAG);
574:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
575:       assertEquals(50, Node.FREE_CALL);
576:       assertEquals(46, Node.IS_NAMESPACE);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(54, Node.SLASH_V);
580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
581:       assertEquals(52, Node.LENGTH);
582:       assertEquals(30, Node.VAR_ARGS_NAME);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(32, Node.INCRDECR_PROP);
585:       assertEquals(15, Node.NO_SIDE_EFFECTS);
586:       assertEquals(57, Node.LAST_PROP);
587:       assertEquals(1, Node.DECR_FLAG);
588:       assertEquals(37, Node.OPT_ARG_NAME);
589:       assertEquals(8, Node.FLAG_NO_THROWS);
590:       assertEquals(39, Node.EMPTY_BLOCK);
591:       assertEquals(56, Node.CHANGE_TIME);
592:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
593:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
595:       assertEquals(4095, Node.COLUMN_MASK);
596:       assertEquals(57, Node.REFLECTED_OBJECT);
597:       assertEquals(48, Node.DIRECTIVES);
598:       assertEquals(49, Node.DIRECT_EVAL);
599:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
600:       assertEquals(43, Node.IS_CONSTANT_NAME);
601:       assertEquals(53, Node.INPUT_ID);
602:       assertEquals(36, Node.QUOTED_PROP);
603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
604:       assertEquals(29, Node.JSDOC_INFO_PROP);
605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
606:       assertEquals(55, Node.INFERRED_FUNCTION);
607:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
609:       assertEquals(46, Node.IS_NAMESPACE);
610:       assertEquals(47, Node.IS_DISPATCHER);
611:       assertEquals(51, Node.STATIC_SOURCE_FILE);
612:       assertEquals(50, Node.FREE_CALL);
613:       assertEquals(2, Node.POST_FLAG);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertNotNull(node2);
616:       assertFalse(node0.equals((Object)node1));
617:       assertFalse(node2.equals((Object)node0));
618:       assertSame(node2, node1);
619:       assertFalse(node0.isCase());
620:       assertFalse(node0.isSwitch());
621:       assertFalse(node0.isFalse());
622:       assertFalse(node0.isEmpty());
623:       assertFalse(node0.isThrow());
624:       assertFalse(node0.isBreak());
625:       assertFalse(node0.isNE());
626:       assertFalse(node0.isDelProp());
627:       assertFalse(node0.isIf());
628:       assertFalse(node0.isTrue());
629:       assertFalse(node0.isInc());
630:       assertFalse(node0.isIn());
631:       assertFalse(node0.isDefaultCase());
632:       assertFalse(node0.isThis());
633:       assertFalse(node0.isInstanceOf());
634:       assertFalse(node0.isRegExp());
635:       assertEquals(0, node0.getChildCount());
636:       assertFalse(node0.isCatch());
637:       assertFalse(node0.isWith());
638:       assertFalse(node0.isStringKey());
639:       assertFalse(node0.isFor());
640:       assertFalse(node0.isLabelName());
641:       assertFalse(node0.isArrayLit());
642:       assertFalse(node0.hasOneChild());
643:       assertFalse(node0.isHook());
644:       assertFalse(node0.isParamList());
645:       assertTrue(node0.isString());
646:       assertFalse(node0.isTry());
647:       assertEquals((-1), node0.getCharno());
648:       assertFalse(node0.isNumber());
649:       assertFalse(node0.isGetterDef());
650:       assertFalse(node0.isScript());
651:       assertFalse(node0.isDo());
652:       assertFalse(node0.isWhile());
653:       assertFalse(node0.isAssignAdd());
654:       assertFalse(node0.isBlock());
655:       assertFalse(node0.isReturn());
656:       assertEquals((-1), node0.getLineno());
657:       assertFalse(node0.isLabel());
658:       assertFalse(node0.isTypeOf());
659:       assertFalse(node0.isDec());
660:       assertFalse(node0.hasMoreThanOneChild());
661:       assertFalse(node0.isContinue());
662:       assertFalse(node0.isGetElem());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isCall());
665:       assertFalse(node0.isNull());
666:       assertFalse(node0.isVar());
667:       assertFalse(node0.isNew());
668:       assertFalse(node0.isAdd());
669:       assertFalse(node0.isOr());
670:       assertFalse(node0.isSetterDef());
671:       assertEquals(40, node0.getType());
672:       assertFalse(node0.isNot());
673:       assertFalse(node0.isAnd());
674:       assertFalse(node0.isVoid());
675:       assertFalse(node0.isExprResult());
676:       assertFalse(node0.isComma());
677:       assertFalse(node0.isCast());
678:       assertFalse(node0.isFunction());
679:       assertFalse(node0.isAssign());
680:       assertFalse(node0.hasChildren());
681:       assertFalse(node0.isDebugger());
682:       assertFalse(node0.isGetProp());
683:       assertEquals((-1), node0.getSourcePosition());
684:       assertFalse(node0.isObjectLit());
685:       assertFalse(node2.isWhile());
686:       assertFalse(node2.isDo());
687:       assertFalse(node2.isBlock());
688:       assertFalse(node2.isReturn());
689:       assertEquals((-1), node2.getLineno());
690:       assertFalse(node2.isLabel());
691:       assertFalse(node2.isCall());
692:       assertFalse(node2.hasMoreThanOneChild());
693:       assertFalse(node2.isContinue());
694:       assertFalse(node2.isName());
695:       assertFalse(node2.isNull());
696:       assertFalse(node2.isVar());
697:       assertFalse(node2.isAssignAdd());
698:       assertFalse(node2.isNew());
699:       assertFalse(node2.isOr());
700:       assertFalse(node2.isSetterDef());
701:       assertFalse(node2.isAdd());
702:       assertFalse(node2.isWith());
703:       assertFalse(node2.isDefaultCase());
704:       assertEquals(2342, node2.getType());
705:       assertFalse(node2.isRegExp());
706:       assertFalse(node2.isCatch());
707:       assertFalse(node2.isArrayLit());
708:       assertFalse(node2.isInstanceOf());
709:       assertFalse(node2.isNumber());
710:       assertFalse(node2.isLabelName());
711:       assertFalse(node2.isGetterDef());
712:       assertFalse(node2.isParamList());
713:       assertFalse(node2.isThis());
714:       assertFalse(node2.isStringKey());
715:       assertFalse(node2.isHook());
716:       assertFalse(node2.isFor());
717:       assertFalse(node2.isTry());
718:       assertFalse(node2.isScript());
719:       assertFalse(node2.isString());
720:       assertFalse(node2.isCase());
721:       assertFalse(node2.isSwitch());
722:       assertEquals((-1), node2.getCharno());
723:       assertEquals(1, node2.getChildCount());
724:       assertTrue(node2.hasChildren());
725:       assertFalse(node2.isBreak());
726:       assertFalse(node2.isIf());
727:       assertFalse(node2.isFalse());
728:       assertFalse(node2.isDelProp());
729:       assertFalse(node2.isNE());
730:       assertFalse(node2.isThrow());
731:       assertFalse(node2.isIn());
732:       assertFalse(node2.isInc());
733:       assertFalse(node2.isEmpty());
734:       assertFalse(node2.isNot());
735:       assertFalse(node2.isObjectLit());
736:       assertFalse(node2.isTrue());
737:       assertFalse(node2.isAnd());
738:       assertFalse(node2.isDebugger());
739:       assertFalse(node2.isVoid());
740:       assertFalse(node2.isExprResult());
741:       assertFalse(node2.isFunction());
742:       assertFalse(node2.isGetElem());
743:       assertFalse(node2.isCast());
744:       assertTrue(node2.hasOneChild());
745:       assertFalse(node2.isDec());
746:       assertFalse(node2.isTypeOf());
747:       assertEquals((-1), node2.getSourcePosition());
748:       assertFalse(node2.isAssign());
749:       assertFalse(node2.isComma());
750:       assertFalse(node2.isGetProp());
751:       
752:       Node node3 = node1.copyInformationFrom(node0);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(54, Node.SLASH_V);
756:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
757:       assertEquals(57, Node.REFLECTED_OBJECT);
758:       assertEquals(51, Node.STATIC_SOURCE_FILE);
759:       assertEquals(12, Node.COLUMN_BITS);
760:       assertEquals(32, Node.INCRDECR_PROP);
761:       assertEquals(52, Node.LENGTH);
762:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
763:       assertEquals(1, Node.DECR_FLAG);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
766:       assertEquals(56, Node.CHANGE_TIME);
767:       assertEquals(8, Node.FLAG_NO_THROWS);
768:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
769:       assertEquals(4095, Node.COLUMN_MASK);
770:       assertEquals(49, Node.DIRECT_EVAL);
771:       assertEquals(48, Node.DIRECTIVES);
772:       assertEquals(37, Node.OPT_ARG_NAME);
773:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
774:       assertEquals(36, Node.QUOTED_PROP);
775:       assertEquals(43, Node.IS_CONSTANT_NAME);
776:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
777:       assertEquals(55, Node.INFERRED_FUNCTION);
778:       assertEquals(29, Node.JSDOC_INFO_PROP);
779:       assertEquals(53, Node.INPUT_ID);
780:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
781:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(2, Node.POST_FLAG);
784:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
785:       assertEquals(50, Node.FREE_CALL);
786:       assertEquals(46, Node.IS_NAMESPACE);
787:       assertEquals(47, Node.IS_DISPATCHER);
788:       assertEquals(40, Node.ORIGINALNAME_PROP);
789:       assertEquals(29, Node.JSDOC_INFO_PROP);
790:       assertEquals(47, Node.IS_DISPATCHER);
791:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
792:       assertEquals(56, Node.CHANGE_TIME);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(2, Node.POST_FLAG);
795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
796:       assertEquals(30, Node.VAR_ARGS_NAME);
797:       assertEquals(49, Node.DIRECT_EVAL);
798:       assertEquals(15, Node.NO_SIDE_EFFECTS);
799:       assertEquals(36, Node.QUOTED_PROP);
800:       assertEquals(57, Node.LAST_PROP);
801:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
802:       assertEquals(52, Node.LENGTH);
803:       assertEquals(53, Node.INPUT_ID);
804:       assertEquals(57, Node.REFLECTED_OBJECT);
805:       assertEquals(55, Node.INFERRED_FUNCTION);
806:       assertEquals(8, Node.FLAG_NO_THROWS);
807:       assertEquals(39, Node.EMPTY_BLOCK);
808:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
809:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
810:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
811:       assertEquals(50, Node.FREE_CALL);
812:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
813:       assertEquals(48, Node.DIRECTIVES);
814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
815:       assertEquals(40, Node.ORIGINALNAME_PROP);
816:       assertEquals(4095, Node.COLUMN_MASK);
817:       assertEquals(1, Node.DECR_FLAG);
818:       assertEquals(12, Node.COLUMN_BITS);
819:       assertEquals(54, Node.SLASH_V);
820:       assertEquals(43, Node.IS_CONSTANT_NAME);
821:       assertEquals(32, Node.INCRDECR_PROP);
822:       assertEquals(46, Node.IS_NAMESPACE);
823:       assertEquals(51, Node.STATIC_SOURCE_FILE);
824:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
825:       assertEquals(2, Node.POST_FLAG);
826:       assertEquals(47, Node.IS_DISPATCHER);
827:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
828:       assertEquals(37, Node.OPT_ARG_NAME);
829:       assertEquals(32, Node.INCRDECR_PROP);
830:       assertEquals(46, Node.IS_NAMESPACE);
831:       assertEquals(56, Node.CHANGE_TIME);
832:       assertEquals(12, Node.COLUMN_BITS);
833:       assertEquals(30, Node.VAR_ARGS_NAME);
834:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
835:       assertEquals(54, Node.SLASH_V);
836:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
837:       assertEquals(43, Node.IS_CONSTANT_NAME);
838:       assertEquals(51, Node.STATIC_SOURCE_FILE);
839:       assertEquals(1, Node.DECR_FLAG);
840:       assertEquals(50, Node.FREE_CALL);
841:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
843:       assertEquals(8, Node.FLAG_NO_THROWS);
844:       assertEquals(39, Node.EMPTY_BLOCK);
845:       assertEquals(48, Node.DIRECTIVES);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
848:       assertEquals(4095, Node.COLUMN_MASK);
849:       assertEquals(15, Node.NO_SIDE_EFFECTS);
850:       assertEquals(36, Node.QUOTED_PROP);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(57, Node.LAST_PROP);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(55, Node.INFERRED_FUNCTION);
855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(52, Node.LENGTH);
858:       assertEquals(29, Node.JSDOC_INFO_PROP);
859:       assertEquals(53, Node.INPUT_ID);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertNotNull(node3);
862:       assertFalse(node0.equals((Object)node1));
863:       assertFalse(node0.equals((Object)node2));
864:       assertFalse(node1.equals((Object)node0));
865:       assertFalse(node3.equals((Object)node0));
866:       assertSame(node1, node2);
867:       assertSame(node1, node3);
868:       assertSame(node3, node1);
869:       assertSame(node3, node2);
870:       assertFalse(node0.isCase());
871:       assertFalse(node0.isSwitch());
872:       assertFalse(node0.isFalse());
873:       assertFalse(node0.isEmpty());
874:       assertFalse(node0.isThrow());
875:       assertFalse(node0.isBreak());
876:       assertFalse(node0.isNE());
877:       assertFalse(node0.isDelProp());
878:       assertFalse(node0.isIf());
879:       assertFalse(node0.isTrue());
880:       assertFalse(node0.isInc());
881:       assertFalse(node0.isIn());
882:       assertFalse(node0.isDefaultCase());
883:       assertFalse(node0.isThis());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.isRegExp());
886:       assertEquals(0, node0.getChildCount());
887:       assertFalse(node0.isCatch());
888:       assertFalse(node0.isWith());
889:       assertFalse(node0.isStringKey());
890:       assertFalse(node0.isFor());
891:       assertFalse(node0.isLabelName());
892:       assertFalse(node0.isArrayLit());
893:       assertFalse(node0.hasOneChild());
894:       assertFalse(node0.isHook());
895:       assertFalse(node0.isParamList());
896:       assertTrue(node0.isString());
897:       assertFalse(node0.isTry());
898:       assertEquals((-1), node0.getCharno());
899:       assertFalse(node0.isNumber());
900:       assertFalse(node0.isGetterDef());
901:       assertFalse(node0.isScript());
902:       assertFalse(node0.isDo());
903:       assertFalse(node0.isWhile());
904:       assertFalse(node0.isAssignAdd());
905:       assertFalse(node0.isBlock());
906:       assertFalse(node0.isReturn());
907:       assertEquals((-1), node0.getLineno());
908:       assertFalse(node0.isLabel());
909:       assertFalse(node0.isTypeOf());
910:       assertFalse(node0.isDec());
911:       assertFalse(node0.hasMoreThanOneChild());
912:       assertFalse(node0.isContinue());
913:       assertFalse(node0.isGetElem());
914:       assertFalse(node0.isName());
915:       assertFalse(node0.isCall());
916:       assertFalse(node0.isNull());
917:       assertFalse(node0.isVar());
918:       assertFalse(node0.isNew());
919:       assertFalse(node0.isAdd());
920:       assertFalse(node0.isOr());
921:       assertFalse(node0.isSetterDef());
922:       assertEquals(40, node0.getType());
923:       assertFalse(node0.isNot());
924:       assertFalse(node0.isAnd());
925:       assertFalse(node0.isVoid());
926:       assertFalse(node0.isExprResult());
927:       assertFalse(node0.isComma());
928:       assertFalse(node0.isCast());
929:       assertFalse(node0.isFunction());
930:       assertFalse(node0.isAssign());
931:       assertFalse(node0.hasChildren());
932:       assertFalse(node0.isDebugger());
933:       assertFalse(node0.isGetProp());
934:       assertEquals((-1), node0.getSourcePosition());
935:       assertFalse(node0.isObjectLit());
936:       assertFalse(node1.isCast());
937:       assertFalse(node1.isLabelName());
938:       assertFalse(node1.isGetElem());
939:       assertFalse(node1.isNumber());
940:       assertFalse(node1.isScript());
941:       assertFalse(node1.isOr());
942:       assertFalse(node1.isNot());
943:       assertEquals((-1), node1.getSourcePosition());
944:       assertFalse(node1.isContinue());
945:       assertFalse(node1.isAnd());
946:       assertFalse(node1.isAssignAdd());
947:       assertFalse(node1.isDo());
948:       assertFalse(node1.isLabel());
949:       assertEquals(2342, node1.getType());
950:       assertFalse(node1.isVar());
951:       assertFalse(node1.isCall());
952:       assertFalse(node1.isFalse());
953:       assertFalse(node1.isAdd());
954:       assertFalse(node1.isName());
955:       assertFalse(node1.isBreak());
956:       assertFalse(node1.isNew());
957:       assertFalse(node1.isNull());
958:       assertFalse(node1.isString());
959:       assertFalse(node1.isObjectLit());
960:       assertFalse(node1.isGetProp());
961:       assertFalse(node1.isExprResult());
962:       assertFalse(node1.isTypeOf());
963:       assertFalse(node1.isWhile());
964:       assertFalse(node1.isAssign());
965:       assertFalse(node1.isReturn());
966:       assertTrue(node1.hasOneChild());
967:       assertFalse(node1.isDec());
968:       assertFalse(node1.isComma());
969:       assertFalse(node1.isEmpty());
970:       assertFalse(node1.isTry());
971:       assertFalse(node1.isDelProp());
972:       assertFalse(node1.isVoid());
973:       assertFalse(node1.isArrayLit());
974:       assertFalse(node1.isNE());
975:       assertFalse(node1.isTrue());
976:       assertFalse(node1.isIf());
977:       assertFalse(node1.isGetterDef());
978:       assertFalse(node1.isDebugger());
979:       assertFalse(node1.isIn());
980:       assertFalse(node1.isFunction());
981:       assertFalse(node1.isDefaultCase());
982:       assertFalse(node1.isHook());
983:       assertFalse(node1.isThrow());
984:       assertFalse(node1.isStringKey());
985:       assertFalse(node1.isSwitch());
986:       assertFalse(node1.isSetterDef());
987:       assertFalse(node1.isInc());
988:       assertFalse(node1.isParamList());
989:       assertEquals((-1), node1.getCharno());
990:       assertFalse(node1.hasMoreThanOneChild());
991:       assertFalse(node1.isCatch());
992:       assertFalse(node1.isInstanceOf());
993:       assertTrue(node1.hasChildren());
994:       assertFalse(node1.isCase());
995:       assertEquals((-1), node1.getLineno());
996:       assertFalse(node1.isRegExp());
997:       assertFalse(node1.isThis());
998:       assertFalse(node1.isWith());
999:       assertFalse(node1.isBlock());
1000:       assertFalse(node1.isFor());
1001:       assertEquals(1, node1.getChildCount());
1002:       assertFalse(node3.isEmpty());
1003:       assertTrue(node3.hasOneChild());
1004:       assertFalse(node3.isDelProp());
1005:       assertFalse(node3.isGetterDef());
1006:       assertFalse(node3.isFor());
1007:       assertFalse(node3.isIf());
1008:       assertFalse(node3.isArrayLit());
1009:       assertFalse(node3.isIn());
1010:       assertFalse(node3.isNE());
1011:       assertFalse(node3.isTrue());
1012:       assertFalse(node3.isDebugger());
1013:       assertFalse(node3.isString());
1014:       assertFalse(node3.isCatch());
1015:       assertFalse(node3.isVoid());
1016:       assertFalse(node3.isCase());
1017:       assertTrue(node3.hasChildren());
1018:       assertFalse(node3.isTry());
1019:       assertFalse(node3.isRegExp());
1020:       assertFalse(node3.isHook());
1021:       assertEquals(1, node3.getChildCount());
1022:       assertFalse(node3.isName());
1023:       assertFalse(node3.isStringKey());
1024:       assertFalse(node3.isCall());
1025:       assertFalse(node3.isBreak());
1026:       assertFalse(node3.isAdd());
1027:       assertFalse(node3.isParamList());
1028:       assertFalse(node3.isNull());
1029:       assertEquals((-1), node3.getCharno());
1030:       assertFalse(node3.isDo());
1031:       assertEquals(2342, node3.getType());
1032:       assertFalse(node3.isDefaultCase());
1033:       assertFalse(node3.isSwitch());
1034:       assertFalse(node3.isNew());
1035:       assertFalse(node3.isAssignAdd());
1036:       assertFalse(node3.isLabel());
1037:       assertFalse(node3.isVar());
1038:       assertFalse(node3.isLabelName());
1039:       assertFalse(node3.isAssign());
1040:       assertFalse(node3.isGetElem());
1041:       assertFalse(node3.isNumber());
1042:       assertFalse(node3.isCast());
1043:       assertFalse(node3.isOr());
1044:       assertEquals((-1), node3.getSourcePosition());
1045:       assertFalse(node3.isNot());
1046:       assertFalse(node3.isWith());
1047:       assertFalse(node3.isWhile());
1048:       assertFalse(node3.isExprResult());
1049:       assertFalse(node3.isScript());
1050:       assertEquals((-1), node3.getLineno());
1051:       assertFalse(node3.isReturn());
1052:       assertFalse(node3.isBlock());
1053:       assertFalse(node3.isInstanceOf());
1054:       assertFalse(node3.hasMoreThanOneChild());
1055:       assertFalse(node3.isComma());
1056:       assertFalse(node3.isTypeOf());
1057:       assertFalse(node3.isThis());
1058:       assertFalse(node3.isDec());
1059:       assertFalse(node3.isFalse());
1060:       assertFalse(node3.isThrow());
1061:       assertFalse(node3.isSetterDef());
1062:       assertFalse(node3.isGetProp());
1063:       assertFalse(node3.isObjectLit());
1064:       assertFalse(node3.isContinue());
1065:       assertFalse(node3.isAnd());
1066:       assertFalse(node3.isInc());
1067:       assertFalse(node3.isFunction());
1068:       
1069:       Iterable<Node> iterable0 = node0.children();
1070:       assertEquals(57, Node.LAST_PROP);
1071:       assertEquals(30, Node.VAR_ARGS_NAME);
1072:       assertEquals(54, Node.SLASH_V);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       assertEquals(57, Node.REFLECTED_OBJECT);
1075:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1076:       assertEquals(12, Node.COLUMN_BITS);
1077:       assertEquals(32, Node.INCRDECR_PROP);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(1, Node.DECR_FLAG);
1081:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1082:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1083:       assertEquals(56, Node.CHANGE_TIME);
1084:       assertEquals(8, Node.FLAG_NO_THROWS);
1085:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1086:       assertEquals(4095, Node.COLUMN_MASK);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(37, Node.OPT_ARG_NAME);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(36, Node.QUOTED_PROP);
1092:       assertEquals(43, Node.IS_CONSTANT_NAME);
1093:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1094:       assertEquals(55, Node.INFERRED_FUNCTION);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(53, Node.INPUT_ID);
1097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(39, Node.EMPTY_BLOCK);
1100:       assertEquals(2, Node.POST_FLAG);
1101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1102:       assertEquals(50, Node.FREE_CALL);
1103:       assertEquals(46, Node.IS_NAMESPACE);
1104:       assertEquals(47, Node.IS_DISPATCHER);
1105:       assertEquals(40, Node.ORIGINALNAME_PROP);
1106:       assertNotNull(iterable0);
1107:       assertFalse(node0.equals((Object)node1));
1108:       assertFalse(node0.equals((Object)node2));
1109:       assertFalse(node0.equals((Object)node3));
1110:       assertFalse(iterable0.contains(node3));
1111:       assertFalse(node0.isCase());
1112:       assertFalse(node0.isSwitch());
1113:       assertFalse(node0.isFalse());
1114:       assertFalse(node0.isEmpty());
1115:       assertFalse(node0.isThrow());
1116:       assertFalse(node0.isBreak());
1117:       assertFalse(node0.isNE());
1118:       assertFalse(node0.isDelProp());
1119:       assertFalse(node0.isIf());
1120:       assertFalse(node0.isTrue());
1121:       assertFalse(node0.isInc());
1122:       assertFalse(node0.isIn());
1123:       assertFalse(node0.isDefaultCase());
1124:       assertFalse(node0.isThis());
1125:       assertFalse(node0.isInstanceOf());
1126:       assertFalse(node0.isRegExp());
1127:       assertEquals(0, node0.getChildCount());
1128:       assertFalse(node0.isCatch());
1129:       assertFalse(node0.isWith());
1130:       assertFalse(node0.isStringKey());
1131:       assertFalse(node0.isFor());
1132:       assertFalse(node0.isLabelName());
1133:       assertFalse(node0.isArrayLit());
1134:       assertFalse(node0.hasOneChild());
1135:       assertFalse(node0.isHook());
1136:       assertFalse(node0.isParamList());
1137:       assertTrue(node0.isString());
1138:       assertFalse(node0.isTry());
1139:       assertEquals((-1), node0.getCharno());
1140:       assertFalse(node0.isNumber());
1141:       assertFalse(node0.isGetterDef());
1142:       assertFalse(node0.isScript());
1143:       assertFalse(node0.isDo());
1144:       assertFalse(node0.isWhile());
1145:       assertFalse(node0.isAssignAdd());
1146:       assertFalse(node0.isBlock());
1147:       assertFalse(node0.isReturn());
1148:       assertEquals((-1), node0.getLineno());
1149:       assertFalse(node0.isLabel());
1150:       assertFalse(node0.isTypeOf());
1151:       assertFalse(node0.isDec());
1152:       assertFalse(node0.hasMoreThanOneChild());
1153:       assertFalse(node0.isContinue());
1154:       assertFalse(node0.isGetElem());
1155:       assertFalse(node0.isName());
1156:       assertFalse(node0.isCall());
1157:       assertFalse(node0.isNull());
1158:       assertFalse(node0.isVar());
1159:       assertFalse(node0.isNew());
1160:       assertFalse(node0.isAdd());
1161:       assertFalse(node0.isOr());
1162:       assertFalse(node0.isSetterDef());
1163:       assertEquals(40, node0.getType());
1164:       assertFalse(node0.isNot());
1165:       assertFalse(node0.isAnd());
1166:       assertFalse(node0.isVoid());
1167:       assertFalse(node0.isExprResult());
1168:       assertFalse(node0.isComma());
1169:       assertFalse(node0.isCast());
1170:       assertFalse(node0.isFunction());
1171:       assertFalse(node0.isAssign());
1172:       assertFalse(node0.hasChildren());
1173:       assertFalse(node0.isDebugger());
1174:       assertFalse(node0.isGetProp());
1175:       assertEquals((-1), node0.getSourcePosition());
1176:       assertFalse(node0.isObjectLit());
1177:       
1178:       boolean boolean1 = node3.isExprResult();
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(30, Node.VAR_ARGS_NAME);
1181:       assertEquals(54, Node.SLASH_V);
1182:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1183:       assertEquals(57, Node.REFLECTED_OBJECT);
1184:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(52, Node.LENGTH);
1188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1191:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1192:       assertEquals(56, Node.CHANGE_TIME);
1193:       assertEquals(8, Node.FLAG_NO_THROWS);
1194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1195:       assertEquals(4095, Node.COLUMN_MASK);
1196:       assertEquals(49, Node.DIRECT_EVAL);
1197:       assertEquals(48, Node.DIRECTIVES);
1198:       assertEquals(37, Node.OPT_ARG_NAME);
1199:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(43, Node.IS_CONSTANT_NAME);
1202:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1203:       assertEquals(55, Node.INFERRED_FUNCTION);
1204:       assertEquals(29, Node.JSDOC_INFO_PROP);
1205:       assertEquals(53, Node.INPUT_ID);
1206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1208:       assertEquals(39, Node.EMPTY_BLOCK);
1209:       assertEquals(2, Node.POST_FLAG);
1210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1211:       assertEquals(50, Node.FREE_CALL);
1212:       assertEquals(46, Node.IS_NAMESPACE);
1213:       assertEquals(47, Node.IS_DISPATCHER);
1214:       assertEquals(40, Node.ORIGINALNAME_PROP);
1215:       assertEquals(29, Node.JSDOC_INFO_PROP);
1216:       assertEquals(47, Node.IS_DISPATCHER);
1217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1218:       assertEquals(56, Node.CHANGE_TIME);
1219:       assertEquals(37, Node.OPT_ARG_NAME);
1220:       assertEquals(2, Node.POST_FLAG);
1221:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1222:       assertEquals(30, Node.VAR_ARGS_NAME);
1223:       assertEquals(49, Node.DIRECT_EVAL);
1224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1225:       assertEquals(36, Node.QUOTED_PROP);
1226:       assertEquals(57, Node.LAST_PROP);
1227:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1228:       assertEquals(52, Node.LENGTH);
1229:       assertEquals(53, Node.INPUT_ID);
1230:       assertEquals(57, Node.REFLECTED_OBJECT);
1231:       assertEquals(55, Node.INFERRED_FUNCTION);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(39, Node.EMPTY_BLOCK);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1237:       assertEquals(50, Node.FREE_CALL);
1238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1239:       assertEquals(48, Node.DIRECTIVES);
1240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1241:       assertEquals(40, Node.ORIGINALNAME_PROP);
1242:       assertEquals(4095, Node.COLUMN_MASK);
1243:       assertEquals(1, Node.DECR_FLAG);
1244:       assertEquals(12, Node.COLUMN_BITS);
1245:       assertEquals(54, Node.SLASH_V);
1246:       assertEquals(43, Node.IS_CONSTANT_NAME);
1247:       assertEquals(32, Node.INCRDECR_PROP);
1248:       assertEquals(46, Node.IS_NAMESPACE);
1249:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1251:       assertEquals(2, Node.POST_FLAG);
1252:       assertEquals(47, Node.IS_DISPATCHER);
1253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1254:       assertEquals(37, Node.OPT_ARG_NAME);
1255:       assertEquals(32, Node.INCRDECR_PROP);
1256:       assertEquals(46, Node.IS_NAMESPACE);
1257:       assertEquals(56, Node.CHANGE_TIME);
1258:       assertEquals(12, Node.COLUMN_BITS);
1259:       assertEquals(30, Node.VAR_ARGS_NAME);
1260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1261:       assertEquals(54, Node.SLASH_V);
1262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1263:       assertEquals(43, Node.IS_CONSTANT_NAME);
1264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1265:       assertEquals(1, Node.DECR_FLAG);
1266:       assertEquals(50, Node.FREE_CALL);
1267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1269:       assertEquals(8, Node.FLAG_NO_THROWS);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(48, Node.DIRECTIVES);
1272:       assertEquals(40, Node.ORIGINALNAME_PROP);
1273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1274:       assertEquals(4095, Node.COLUMN_MASK);
1275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1276:       assertEquals(36, Node.QUOTED_PROP);
1277:       assertEquals(49, Node.DIRECT_EVAL);
1278:       assertEquals(57, Node.LAST_PROP);
1279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1280:       assertEquals(55, Node.INFERRED_FUNCTION);
1281:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1282:       assertEquals(57, Node.REFLECTED_OBJECT);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(29, Node.JSDOC_INFO_PROP);
1285:       assertEquals(53, Node.INPUT_ID);
1286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1287:       assertFalse(node0.equals((Object)node1));
1288:       assertFalse(node0.equals((Object)node2));
1289:       assertFalse(node0.equals((Object)node3));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertFalse(node3.equals((Object)node0));
1292:       assertTrue(boolean1 == boolean0);
1293:       assertSame(node1, node2);
1294:       assertSame(node1, node3);
1295:       assertSame(node3, node1);
1296:       assertSame(node3, node2);
1297:       assertFalse(boolean1);
1298:       assertFalse(node0.isCase());
1299:       assertFalse(node0.isSwitch());
1300:       assertFalse(node0.isFalse());
1301:       assertFalse(node0.isEmpty());
1302:       assertFalse(node0.isThrow());
1303:       assertFalse(node0.isBreak());
1304:       assertFalse(node0.isNE());
1305:       assertFalse(node0.isDelProp());
1306:       assertFalse(node0.isIf());
1307:       assertFalse(node0.isTrue());
1308:       assertFalse(node0.isInc());
1309:       assertFalse(node0.isIn());
1310:       assertFalse(node0.isDefaultCase());
1311:       assertFalse(node0.isThis());
1312:       assertFalse(node0.isInstanceOf());
1313:       assertFalse(node0.isRegExp());
1314:       assertEquals(0, node0.getChildCount());
1315:       assertFalse(node0.isCatch());
1316:       assertFalse(node0.isWith());
1317:       assertFalse(node0.isStringKey());
1318:       assertFalse(node0.isFor());
1319:       assertFalse(node0.isLabelName());
1320:       assertFalse(node0.isArrayLit());
1321:       assertFalse(node0.hasOneChild());
1322:       assertFalse(node0.isHook());
1323:       assertFalse(node0.isParamList());
1324:       assertTrue(node0.isString());
1325:       assertFalse(node0.isTry());
1326:       assertEquals((-1), node0.getCharno());
1327:       assertFalse(node0.isNumber());
1328:       assertFalse(node0.isGetterDef());
1329:       assertFalse(node0.isScript());
1330:       assertFalse(node0.isDo());
1331:       assertFalse(node0.isWhile());
1332:       assertFalse(node0.isAssignAdd());
1333:       assertFalse(node0.isBlock());
1334:       assertFalse(node0.isReturn());
1335:       assertEquals((-1), node0.getLineno());
1336:       assertFalse(node0.isLabel());
1337:       assertFalse(node0.isTypeOf());
1338:       assertFalse(node0.isDec());
1339:       assertFalse(node0.hasMoreThanOneChild());
1340:       assertFalse(node0.isContinue());
1341:       assertFalse(node0.isGetElem());
1342:       assertFalse(node0.isName());
1343:       assertFalse(node0.isCall());
1344:       assertFalse(node0.isNull());
1345:       assertFalse(node0.isVar());
1346:       assertFalse(node0.isNew());
1347:       assertFalse(node0.isAdd());
1348:       assertFalse(node0.isOr());
1349:       assertFalse(node0.isSetterDef());
1350:       assertEquals(40, node0.getType());
1351:       assertFalse(node0.isNot());
1352:       assertFalse(node0.isAnd());
1353:       assertFalse(node0.isVoid());
1354:       assertFalse(node0.isExprResult());
1355:       assertFalse(node0.isComma());
1356:       assertFalse(node0.isCast());
1357:       assertFalse(node0.isFunction());
1358:       assertFalse(node0.isAssign());
1359:       assertFalse(node0.hasChildren());
1360:       assertFalse(node0.isDebugger());
1361:       assertFalse(node0.isGetProp());
1362:       assertEquals((-1), node0.getSourcePosition());
1363:       assertFalse(node0.isObjectLit());
1364:       assertFalse(node1.isCast());
1365:       assertFalse(node1.isLabelName());
1366:       assertFalse(node1.isGetElem());
1367:       assertFalse(node1.isNumber());
1368:       assertFalse(node1.isScript());
1369:       assertFalse(node1.isOr());
1370:       assertFalse(node1.isNot());
1371:       assertEquals((-1), node1.getSourcePosition());
1372:       assertFalse(node1.isContinue());
1373:       assertFalse(node1.isAnd());
1374:       assertFalse(node1.isAssignAdd());
1375:       assertFalse(node1.isDo());
1376:       assertFalse(node1.isLabel());
1377:       assertEquals(2342, node1.getType());
1378:       assertFalse(node1.isVar());
1379:       assertFalse(node1.isCall());
1380:       assertFalse(node1.isFalse());
1381:       assertFalse(node1.isAdd());
1382:       assertFalse(node1.isName());
1383:       assertFalse(node1.isBreak());
1384:       assertFalse(node1.isNew());
1385:       assertFalse(node1.isNull());
1386:       assertFalse(node1.isString());
1387:       assertFalse(node1.isObjectLit());
1388:       assertFalse(node1.isGetProp());
1389:       assertFalse(node1.isExprResult());
1390:       assertFalse(node1.isTypeOf());
1391:       assertFalse(node1.isWhile());
1392:       assertFalse(node1.isAssign());
1393:       assertFalse(node1.isReturn());
1394:       assertTrue(node1.hasOneChild());
1395:       assertFalse(node1.isDec());
1396:       assertFalse(node1.isComma());
1397:       assertFalse(node1.isEmpty());
1398:       assertFalse(node1.isTry());
1399:       assertFalse(node1.isDelProp());
1400:       assertFalse(node1.isVoid());
1401:       assertFalse(node1.isArrayLit());
1402:       assertFalse(node1.isNE());
1403:       assertFalse(node1.isTrue());
1404:       assertFalse(node1.isIf());
1405:       assertFalse(node1.isGetterDef());
1406:       assertFalse(node1.isDebugger());
1407:       assertFalse(node1.isIn());
1408:       assertFalse(node1.isFunction());
1409:       assertFalse(node1.isDefaultCase());
1410:       assertFalse(node1.isHook());
1411:       assertFalse(node1.isThrow());
1412:       assertFalse(node1.isStringKey());
1413:       assertFalse(node1.isSwitch());
1414:       assertFalse(node1.isSetterDef());
1415:       assertFalse(node1.isInc());
1416:       assertFalse(node1.isParamList());
1417:       assertEquals((-1), node1.getCharno());
1418:       assertFalse(node1.hasMoreThanOneChild());
1419:       assertFalse(node1.isCatch());
1420:       assertFalse(node1.isInstanceOf());
1421:       assertTrue(node1.hasChildren());
1422:       assertFalse(node1.isCase());
1423:       assertEquals((-1), node1.getLineno());
1424:       assertFalse(node1.isRegExp());
1425:       assertFalse(node1.isThis());
1426:       assertFalse(node1.isWith());
1427:       assertFalse(node1.isBlock());
1428:       assertFalse(node1.isFor());
1429:       assertEquals(1, node1.getChildCount());
1430:       assertFalse(node3.isEmpty());
1431:       assertTrue(node3.hasOneChild());
1432:       assertFalse(node3.isDelProp());
1433:       assertFalse(node3.isGetterDef());
1434:       assertFalse(node3.isFor());
1435:       assertFalse(node3.isIf());
1436:       assertFalse(node3.isArrayLit());
1437:       assertFalse(node3.isIn());
1438:       assertFalse(node3.isNE());
1439:       assertFalse(node3.isTrue());
1440:       assertFalse(node3.isDebugger());
1441:       assertFalse(node3.isString());
1442:       assertFalse(node3.isCatch());
1443:       assertFalse(node3.isVoid());
1444:       assertFalse(node3.isCase());
1445:       assertTrue(node3.hasChildren());
1446:       assertFalse(node3.isTry());
1447:       assertFalse(node3.isRegExp());
1448:       assertFalse(node3.isHook());
1449:       assertEquals(1, node3.getChildCount());
1450:       assertFalse(node3.isName());
1451:       assertFalse(node3.isStringKey());
1452:       assertFalse(node3.isCall());
1453:       assertFalse(node3.isBreak());
1454:       assertFalse(node3.isAdd());
1455:       assertFalse(node3.isParamList());
1456:       assertFalse(node3.isNull());
1457:       assertEquals((-1), node3.getCharno());
1458:       assertFalse(node3.isDo());
1459:       assertEquals(2342, node3.getType());
1460:       assertFalse(node3.isDefaultCase());
1461:       assertFalse(node3.isSwitch());
1462:       assertFalse(node3.isNew());
1463:       assertFalse(node3.isAssignAdd());
1464:       assertFalse(node3.isLabel());
1465:       assertFalse(node3.isVar());
1466:       assertFalse(node3.isLabelName());
1467:       assertFalse(node3.isAssign());
1468:       assertFalse(node3.isGetElem());
1469:       assertFalse(node3.isNumber());
1470:       assertFalse(node3.isCast());
1471:       assertFalse(node3.isOr());
1472:       assertEquals((-1), node3.getSourcePosition());
1473:       assertFalse(node3.isNot());
1474:       assertFalse(node3.isWith());
1475:       assertFalse(node3.isWhile());
1476:       assertFalse(node3.isExprResult());
1477:       assertFalse(node3.isScript());
1478:       assertEquals((-1), node3.getLineno());
1479:       assertFalse(node3.isReturn());
1480:       assertFalse(node3.isBlock());
1481:       assertFalse(node3.isInstanceOf());
1482:       assertFalse(node3.hasMoreThanOneChild());
1483:       assertFalse(node3.isComma());
1484:       assertFalse(node3.isTypeOf());
1485:       assertFalse(node3.isThis());
1486:       assertFalse(node3.isDec());
1487:       assertFalse(node3.isFalse());
1488:       assertFalse(node3.isThrow());
1489:       assertFalse(node3.isSetterDef());
1490:       assertFalse(node3.isGetProp());
1491:       assertFalse(node3.isObjectLit());
1492:       assertFalse(node3.isContinue());
1493:       assertFalse(node3.isAnd());
1494:       assertFalse(node3.isInc());
1495:       assertFalse(node3.isFunction());
1496:       
1497:       Node node4 = Node.newNumber(0.0, (-3310), 939);
1498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1499:       assertEquals(53, Node.INPUT_ID);
1500:       assertEquals(43, Node.IS_CONSTANT_NAME);
1501:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1502:       assertEquals(55, Node.INFERRED_FUNCTION);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(29, Node.JSDOC_INFO_PROP);
1505:       assertEquals(36, Node.QUOTED_PROP);
1506:       assertEquals(37, Node.OPT_ARG_NAME);
1507:       assertEquals(48, Node.DIRECTIVES);
1508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1509:       assertEquals(32, Node.INCRDECR_PROP);
1510:       assertEquals(56, Node.CHANGE_TIME);
1511:       assertEquals(12, Node.COLUMN_BITS);
1512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1514:       assertEquals(4095, Node.COLUMN_MASK);
1515:       assertEquals(54, Node.SLASH_V);
1516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1517:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(49, Node.DIRECT_EVAL);
1520:       assertEquals(1, Node.DECR_FLAG);
1521:       assertEquals(57, Node.REFLECTED_OBJECT);
1522:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1524:       assertEquals(50, Node.FREE_CALL);
1525:       assertEquals(52, Node.LENGTH);
1526:       assertEquals(8, Node.FLAG_NO_THROWS);
1527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1528:       assertEquals(39, Node.EMPTY_BLOCK);
1529:       assertEquals(47, Node.IS_DISPATCHER);
1530:       assertEquals(46, Node.IS_NAMESPACE);
1531:       assertEquals(40, Node.ORIGINALNAME_PROP);
1532:       assertEquals(30, Node.VAR_ARGS_NAME);
1533:       assertEquals(2, Node.POST_FLAG);
1534:       assertNotNull(node4);
1535:       assertFalse(node4.equals((Object)node3));
1536:       assertFalse(node4.equals((Object)node2));
1537:       assertFalse(node4.equals((Object)node1));
1538:       assertFalse(node4.equals((Object)node0));
1539:       assertFalse(node4.isRegExp());
1540:       assertFalse(node4.isDefaultCase());
1541:       assertFalse(node4.isVoid());
1542:       assertFalse(node4.isCatch());
1543:       assertEquals(0, node4.getChildCount());
1544:       assertFalse(node4.isTry());
1545:       assertFalse(node4.isFunction());
1546:       assertFalse(node4.isFor());
1547:       assertFalse(node4.isDelProp());
1548:       assertFalse(node4.isName());
1549:       assertFalse(node4.isIf());
1550:       assertFalse(node4.isCall());
1551:       assertFalse(node4.isEmpty());
1552:       assertFalse(node4.isSetterDef());
1553:       assertFalse(node4.isIn());
1554:       assertFalse(node4.isTrue());
1555:       assertFalse(node4.isNE());
1556:       assertFalse(node4.isNull());
1557:       assertFalse(node4.isDo());
1558:       assertFalse(node4.isSwitch());
1559:       assertFalse(node4.isNew());
1560:       assertFalse(node4.isAdd());
1561:       assertFalse(node4.isCase());
1562:       assertFalse(node4.hasMoreThanOneChild());
1563:       assertFalse(node4.isAssignAdd());
1564:       assertFalse(node4.isVar());
1565:       assertFalse(node4.isLabel());
1566:       assertFalse(node4.isBlock());
1567:       assertEquals(39, node4.getType());
1568:       assertFalse(node4.isHook());
1569:       assertFalse(node4.isGetterDef());
1570:       assertFalse(node4.isLabelName());
1571:       assertFalse(node4.isArrayLit());
1572:       assertEquals((-1), node4.getCharno());
1573:       assertFalse(node4.isParamList());
1574:       assertFalse(node4.isStringKey());
1575:       assertFalse(node4.isNot());
1576:       assertFalse(node4.isWith());
1577:       assertFalse(node4.isExprResult());
1578:       assertFalse(node4.isScript());
1579:       assertFalse(node4.isInstanceOf());
1580:       assertFalse(node4.hasOneChild());
1581:       assertFalse(node4.isComma());
1582:       assertFalse(node4.isThis());
1583:       assertFalse(node4.isDec());
1584:       assertFalse(node4.isAssign());
1585:       assertFalse(node4.isTypeOf());
1586:       assertFalse(node4.isGetElem());
1587:       assertFalse(node4.isBreak());
1588:       assertEquals((-1), node4.getLineno());
1589:       assertFalse(node4.isOr());
1590:       assertFalse(node4.isWhile());
1591:       assertFalse(node4.isString());
1592:       assertFalse(node4.isContinue());
1593:       assertFalse(node4.isInc());
1594:       assertTrue(node4.isNumber());
1595:       assertFalse(node4.isThrow());
1596:       assertFalse(node4.isReturn());
1597:       assertFalse(node4.hasChildren());
1598:       assertFalse(node4.isFalse());
1599:       assertFalse(node4.isCast());
1600:       assertFalse(node4.isGetProp());
1601:       assertFalse(node4.isAnd());
1602:       assertFalse(node4.isObjectLit());
1603:       assertFalse(node4.isDebugger());
1604:       assertEquals((-1), node4.getSourcePosition());
1605:       
1606:       boolean boolean2 = node4.isOnlyModifiesThisCall();
1607:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1608:       assertEquals(53, Node.INPUT_ID);
1609:       assertEquals(43, Node.IS_CONSTANT_NAME);
1610:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1611:       assertEquals(55, Node.INFERRED_FUNCTION);
1612:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1613:       assertEquals(29, Node.JSDOC_INFO_PROP);
1614:       assertEquals(36, Node.QUOTED_PROP);
1615:       assertEquals(37, Node.OPT_ARG_NAME);
1616:       assertEquals(48, Node.DIRECTIVES);
1617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1618:       assertEquals(32, Node.INCRDECR_PROP);
1619:       assertEquals(56, Node.CHANGE_TIME);
1620:       assertEquals(12, Node.COLUMN_BITS);
1621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1622:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1623:       assertEquals(4095, Node.COLUMN_MASK);
1624:       assertEquals(54, Node.SLASH_V);
1625:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1627:       assertEquals(57, Node.LAST_PROP);
1628:       assertEquals(49, Node.DIRECT_EVAL);
1629:       assertEquals(1, Node.DECR_FLAG);
1630:       assertEquals(57, Node.REFLECTED_OBJECT);
1631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1633:       assertEquals(50, Node.FREE_CALL);
1634:       assertEquals(52, Node.LENGTH);
1635:       assertEquals(8, Node.FLAG_NO_THROWS);
1636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1637:       assertEquals(39, Node.EMPTY_BLOCK);
1638:       assertEquals(47, Node.IS_DISPATCHER);
1639:       assertEquals(46, Node.IS_NAMESPACE);
1640:       assertEquals(40, Node.ORIGINALNAME_PROP);
1641:       assertEquals(30, Node.VAR_ARGS_NAME);
1642:       assertEquals(2, Node.POST_FLAG);
1643:       assertFalse(node4.equals((Object)node3));
1644:       assertFalse(node4.equals((Object)node2));
1645:       assertFalse(node4.equals((Object)node1));
1646:       assertFalse(node4.equals((Object)node0));
1647:       assertTrue(boolean2 == boolean0);
1648:       assertTrue(boolean2 == boolean1);
1649:       assertFalse(boolean2);
1650:       assertFalse(node4.isRegExp());
1651:       assertFalse(node4.isDefaultCase());
1652:       assertFalse(node4.isVoid());
1653:       assertFalse(node4.isCatch());
1654:       assertEquals(0, node4.getChildCount());
1655:       assertFalse(node4.isTry());
1656:       assertFalse(node4.isFunction());
1657:       assertFalse(node4.isFor());
1658:       assertFalse(node4.isDelProp());
1659:       assertFalse(node4.isName());
1660:       assertFalse(node4.isIf());
1661:       assertFalse(node4.isCall());
1662:       assertFalse(node4.isEmpty());
1663:       assertFalse(node4.isSetterDef());
1664:       assertFalse(node4.isIn());
1665:       assertFalse(node4.isTrue());
1666:       assertFalse(node4.isNE());
1667:       assertFalse(node4.isNull());
1668:       assertFalse(node4.isDo());
1669:       assertFalse(node4.isSwitch());
1670:       assertFalse(node4.isNew());
1671:       assertFalse(node4.isAdd());
1672:       assertFalse(node4.isCase());
1673:       assertFalse(node4.hasMoreThanOneChild());
1674:       assertFalse(node4.isAssignAdd());
1675:       assertFalse(node4.isVar());
1676:       assertFalse(node4.isLabel());
1677:       assertFalse(node4.isBlock());
1678:       assertEquals(39, node4.getType());
1679:       assertFalse(node4.isHook());
1680:       assertFalse(node4.isGetterDef());
1681:       assertFalse(node4.isLabelName());
1682:       assertFalse(node4.isArrayLit());
1683:       assertEquals((-1), node4.getCharno());
1684:       assertFalse(node4.isParamList());
1685:       assertFalse(node4.isStringKey());
1686:       assertFalse(node4.isNot());
1687:       assertFalse(node4.isWith());
1688:       assertFalse(node4.isExprResult());
1689:       assertFalse(node4.isScript());
1690:       assertFalse(node4.isInstanceOf());
1691:       assertFalse(node4.hasOneChild());
1692:       assertFalse(node4.isComma());
1693:       assertFalse(node4.isThis());
1694:       assertFalse(node4.isDec());
1695:       assertFalse(node4.isAssign());
1696:       assertFalse(node4.isTypeOf());
1697:       assertFalse(node4.isGetElem());
1698:       assertFalse(node4.isBreak());
1699:       assertEquals((-1), node4.getLineno());
1700:       assertFalse(node4.isOr());
1701:       assertFalse(node4.isWhile());
1702:       assertFalse(node4.isString());
1703:       assertFalse(node4.isContinue());
1704:       assertFalse(node4.isInc());
1705:       assertTrue(node4.isNumber());
1706:       assertFalse(node4.isThrow());
1707:       assertFalse(node4.isReturn());
1708:       assertFalse(node4.hasChildren());
1709:       assertFalse(node4.isFalse());
1710:       assertFalse(node4.isCast());
1711:       assertFalse(node4.isGetProp());
1712:       assertFalse(node4.isAnd());
1713:       assertFalse(node4.isObjectLit());
1714:       assertFalse(node4.isDebugger());
1715:       assertEquals((-1), node4.getSourcePosition());
1716:       
1717:       boolean boolean3 = node1.isFor();
1718:       assertEquals(57, Node.LAST_PROP);
1719:       assertEquals(30, Node.VAR_ARGS_NAME);
1720:       assertEquals(54, Node.SLASH_V);
1721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1722:       assertEquals(57, Node.REFLECTED_OBJECT);
1723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1724:       assertEquals(12, Node.COLUMN_BITS);
1725:       assertEquals(32, Node.INCRDECR_PROP);
1726:       assertEquals(52, Node.LENGTH);
1727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1728:       assertEquals(1, Node.DECR_FLAG);
1729:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1730:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1731:       assertEquals(56, Node.CHANGE_TIME);
1732:       assertEquals(8, Node.FLAG_NO_THROWS);
1733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1734:       assertEquals(4095, Node.COLUMN_MASK);
1735:       assertEquals(49, Node.DIRECT_EVAL);
1736:       assertEquals(48, Node.DIRECTIVES);
1737:       assertEquals(37, Node.OPT_ARG_NAME);
1738:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1739:       assertEquals(36, Node.QUOTED_PROP);
1740:       assertEquals(43, Node.IS_CONSTANT_NAME);
1741:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1742:       assertEquals(55, Node.INFERRED_FUNCTION);
1743:       assertEquals(29, Node.JSDOC_INFO_PROP);
1744:       assertEquals(53, Node.INPUT_ID);
1745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1747:       assertEquals(39, Node.EMPTY_BLOCK);
1748:       assertEquals(2, Node.POST_FLAG);
1749:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1750:       assertEquals(50, Node.FREE_CALL);
1751:       assertEquals(46, Node.IS_NAMESPACE);
1752:       assertEquals(47, Node.IS_DISPATCHER);
1753:       assertEquals(40, Node.ORIGINALNAME_PROP);
1754:       assertEquals(29, Node.JSDOC_INFO_PROP);
1755:       assertEquals(47, Node.IS_DISPATCHER);
1756:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1757:       assertEquals(56, Node.CHANGE_TIME);
1758:       assertEquals(37, Node.OPT_ARG_NAME);
1759:       assertEquals(2, Node.POST_FLAG);
1760:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1761:       assertEquals(30, Node.VAR_ARGS_NAME);
1762:       assertEquals(49, Node.DIRECT_EVAL);
1763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1764:       assertEquals(36, Node.QUOTED_PROP);
1765:       assertEquals(57, Node.LAST_PROP);
1766:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1767:       assertEquals(52, Node.LENGTH);
1768:       assertEquals(53, Node.INPUT_ID);
1769:       assertEquals(57, Node.REFLECTED_OBJECT);
1770:       assertEquals(55, Node.INFERRED_FUNCTION);
1771:       assertEquals(8, Node.FLAG_NO_THROWS);
1772:       assertEquals(39, Node.EMPTY_BLOCK);
1773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1774:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1775:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1776:       assertEquals(50, Node.FREE_CALL);
1777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1778:       assertEquals(48, Node.DIRECTIVES);
1779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1780:       assertEquals(40, Node.ORIGINALNAME_PROP);
1781:       assertEquals(4095, Node.COLUMN_MASK);
1782:       assertEquals(1, Node.DECR_FLAG);
1783:       assertEquals(12, Node.COLUMN_BITS);
1784:       assertEquals(54, Node.SLASH_V);
1785:       assertEquals(43, Node.IS_CONSTANT_NAME);
1786:       assertEquals(32, Node.INCRDECR_PROP);
1787:       assertEquals(46, Node.IS_NAMESPACE);
1788:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1789:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1790:       assertFalse(node0.equals((Object)node1));
1791:       assertFalse(node0.equals((Object)node4));
1792:       assertFalse(node0.equals((Object)node2));
1793:       assertFalse(node0.equals((Object)node3));
1794:       assertFalse(node1.equals((Object)node0));
1795:       assertFalse(node1.equals((Object)node4));
1796:       assertTrue(boolean3 == boolean2);
1797:       assertTrue(boolean3 == boolean1);
1798:       assertTrue(boolean3 == boolean0);
1799:       assertSame(node1, node2);
1800:       assertSame(node1, node3);
1801:       assertFalse(boolean3);
1802:       assertFalse(node0.isCase());
1803:       assertFalse(node0.isSwitch());
1804:       assertFalse(node0.isFalse());
1805:       assertFalse(node0.isEmpty());
1806:       assertFalse(node0.isThrow());
1807:       assertFalse(node0.isBreak());
1808:       assertFalse(node0.isNE());
1809:       assertFalse(node0.isDelProp());
1810:       assertFalse(node0.isIf());
1811:       assertFalse(node0.isTrue());
1812:       assertFalse(node0.isInc());
1813:       assertFalse(node0.isIn());
1814:       assertFalse(node0.isDefaultCase());
1815:       assertFalse(node0.isThis());
1816:       assertFalse(node0.isInstanceOf());
1817:       assertFalse(node0.isRegExp());
1818:       assertEquals(0, node0.getChildCount());
1819:       assertFalse(node0.isCatch());
1820:       assertFalse(node0.isWith());
1821:       assertFalse(node0.isStringKey());
1822:       assertFalse(node0.isFor());
1823:       assertFalse(node0.isLabelName());
1824:       assertFalse(node0.isArrayLit());
1825:       assertFalse(node0.hasOneChild());
1826:       assertFalse(node0.isHook());
1827:       assertFalse(node0.isParamList());
1828:       assertTrue(node0.isString());
1829:       assertFalse(node0.isTry());
1830:       assertEquals((-1), node0.getCharno());
1831:       assertFalse(node0.isNumber());
1832:       assertFalse(node0.isGetterDef());
1833:       assertFalse(node0.isScript());
1834:       assertFalse(node0.isDo());
1835:       assertFalse(node0.isWhile());
1836:       assertFalse(node0.isAssignAdd());
1837:       assertFalse(node0.isBlock());
1838:       assertFalse(node0.isReturn());
1839:       assertEquals((-1), node0.getLineno());
1840:       assertFalse(node0.isLabel());
1841:       assertFalse(node0.isTypeOf());
1842:       assertFalse(node0.isDec());
1843:       assertFalse(node0.hasMoreThanOneChild());
1844:       assertFalse(node0.isContinue());
1845:       assertFalse(node0.isGetElem());
1846:       assertFalse(node0.isName());
1847:       assertFalse(node0.isCall());
1848:       assertFalse(node0.isNull());
1849:       assertFalse(node0.isVar());
1850:       assertFalse(node0.isNew());
1851:       assertFalse(node0.isAdd());
1852:       assertFalse(node0.isOr());
1853:       assertFalse(node0.isSetterDef());
1854:       assertEquals(40, node0.getType());
1855:       assertFalse(node0.isNot());
1856:       assertFalse(node0.isAnd());
1857:       assertFalse(node0.isVoid());
1858:       assertFalse(node0.isExprResult());
1859:       assertFalse(node0.isComma());
1860:       assertFalse(node0.isCast());
1861:       assertFalse(node0.isFunction());
1862:       assertFalse(node0.isAssign());
1863:       assertFalse(node0.hasChildren());
1864:       assertFalse(node0.isDebugger());
1865:       assertFalse(node0.isGetProp());
1866:       assertEquals((-1), node0.getSourcePosition());
1867:       assertFalse(node0.isObjectLit());
1868:       assertFalse(node1.isCast());
1869:       assertFalse(node1.isLabelName());
1870:       assertFalse(node1.isGetElem());
1871:       assertFalse(node1.isNumber());
1872:       assertFalse(node1.isScript());
1873:       assertFalse(node1.isOr());
1874:       assertFalse(node1.isNot());
1875:       assertEquals((-1), node1.getSourcePosition());
1876:       assertFalse(node1.isContinue());
1877:       assertFalse(node1.isAnd());
1878:       assertFalse(node1.isAssignAdd());
1879:       assertFalse(node1.isDo());
1880:       assertFalse(node1.isLabel());
1881:       assertEquals(2342, node1.getType());
1882:       assertFalse(node1.isVar());
1883:       assertFalse(node1.isCall());
1884:       assertFalse(node1.isFalse());
1885:       assertFalse(node1.isAdd());
1886:       assertFalse(node1.isName());
1887:       assertFalse(node1.isBreak());
1888:       assertFalse(node1.isNew());
1889:       assertFalse(node1.isNull());
1890:       assertFalse(node1.isString());
1891:       assertFalse(node1.isObjectLit());
1892:       assertFalse(node1.isGetProp());
1893:       assertFalse(node1.isExprResult());
1894:       assertFalse(node1.isTypeOf());
1895:       assertFalse(node1.isWhile());
1896:       assertFalse(node1.isAssign());
1897:       assertFalse(node1.isReturn());
1898:       assertTrue(node1.hasOneChild());
1899:       assertFalse(node1.isDec());
1900:       assertFalse(node1.isComma());
1901:       assertFalse(node1.isEmpty());
1902:       assertFalse(node1.isTry());
1903:       assertFalse(node1.isDelProp());
1904:       assertFalse(node1.isVoid());
1905:       assertFalse(node1.isArrayLit());
1906:       assertFalse(node1.isNE());
1907:       assertFalse(node1.isTrue());
1908:       assertFalse(node1.isIf());
1909:       assertFalse(node1.isGetterDef());
1910:       assertFalse(node1.isDebugger());
1911:       assertFalse(node1.isIn());
1912:       assertFalse(node1.isFunction());
1913:       assertFalse(node1.isDefaultCase());
1914:       assertFalse(node1.isHook());
1915:       assertFalse(node1.isThrow());
1916:       assertFalse(node1.isStringKey());
1917:       assertFalse(node1.isSwitch());
1918:       assertFalse(node1.isSetterDef());
1919:       assertFalse(node1.isInc());
1920:       assertFalse(node1.isParamList());
1921:       assertEquals((-1), node1.getCharno());
1922:       assertFalse(node1.hasMoreThanOneChild());
1923:       assertFalse(node1.isCatch());
1924:       assertFalse(node1.isInstanceOf());
1925:       assertTrue(node1.hasChildren());
1926:       assertFalse(node1.isCase());
1927:       assertEquals((-1), node1.getLineno());
1928:       assertFalse(node1.isRegExp());
1929:       assertFalse(node1.isThis());
1930:       assertFalse(node1.isWith());
1931:       assertFalse(node1.isBlock());
1932:       assertFalse(node1.isFor());
1933:       assertEquals(1, node1.getChildCount());
1934:       
1935:       boolean boolean4 = node4.isAssignAdd();
1936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1937:       assertEquals(53, Node.INPUT_ID);
1938:       assertEquals(43, Node.IS_CONSTANT_NAME);
1939:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1940:       assertEquals(55, Node.INFERRED_FUNCTION);
1941:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1942:       assertEquals(29, Node.JSDOC_INFO_PROP);
1943:       assertEquals(36, Node.QUOTED_PROP);
1944:       assertEquals(37, Node.OPT_ARG_NAME);
1945:       assertEquals(48, Node.DIRECTIVES);
1946:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1947:       assertEquals(32, Node.INCRDECR_PROP);
1948:       assertEquals(56, Node.CHANGE_TIME);
1949:       assertEquals(12, Node.COLUMN_BITS);
1950:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1951:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1952:       assertEquals(4095, Node.COLUMN_MASK);
1953:       assertEquals(54, Node.SLASH_V);
1954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1956:       assertEquals(57, Node.LAST_PROP);
1957:       assertEquals(49, Node.DIRECT_EVAL);
1958:       assertEquals(1, Node.DECR_FLAG);
1959:       assertEquals(57, Node.REFLECTED_OBJECT);
1960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1962:       assertEquals(50, Node.FREE_CALL);
1963:       assertEquals(52, Node.LENGTH);
1964:       assertEquals(8, Node.FLAG_NO_THROWS);
1965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1966:       assertEquals(39, Node.EMPTY_BLOCK);
1967:       assertEquals(47, Node.IS_DISPATCHER);
1968:       assertEquals(46, Node.IS_NAMESPACE);
1969:       assertEquals(40, Node.ORIGINALNAME_PROP);
1970:       assertEquals(30, Node.VAR_ARGS_NAME);
1971:       assertEquals(2, Node.POST_FLAG);
1972:       assertFalse(node4.equals((Object)node3));
1973:       assertFalse(node4.equals((Object)node2));
1974:       assertFalse(node4.equals((Object)node1));
1975:       assertFalse(node4.equals((Object)node0));
1976:       assertTrue(boolean4 == boolean3);
1977:       assertTrue(boolean4 == boolean2);
1978:       assertTrue(boolean4 == boolean1);
1979:       assertTrue(boolean4 == boolean0);
1980:       assertFalse(boolean4);
1981:       assertFalse(node4.isRegExp());
1982:       assertFalse(node4.isDefaultCase());
1983:       assertFalse(node4.isVoid());
1984:       assertFalse(node4.isCatch());
1985:       assertEquals(0, node4.getChildCount());
1986:       assertFalse(node4.isTry());
1987:       assertFalse(node4.isFunction());
1988:       assertFalse(node4.isFor());
1989:       assertFalse(node4.isDelProp());
1990:       assertFalse(node4.isName());
1991:       assertFalse(node4.isIf());
1992:       assertFalse(node4.isCall());
1993:       assertFalse(node4.isEmpty());
1994:       assertFalse(node4.isSetterDef());
1995:       assertFalse(node4.isIn());
1996:       assertFalse(node4.isTrue());
1997:       assertFalse(node4.isNE());
1998:       assertFalse(node4.isNull());
1999:       assertFalse(node4.isDo());
2000:       assertFalse(node4.isSwitch());
2001:       assertFalse(node4.isNew());
2002:       assertFalse(node4.isAdd());
2003:       assertFalse(node4.isCase());
2004:       assertFalse(node4.hasMoreThanOneChild());
2005:       assertFalse(node4.isAssignAdd());
2006:       assertFalse(node4.isVar());
2007:       assertFalse(node4.isLabel());
2008:       assertFalse(node4.isBlock());
2009:       assertEquals(39, node4.getType());
2010:       assertFalse(node4.isHook());
2011:       assertFalse(node4.isGetterDef());
2012:       assertFalse(node4.isLabelName());
2013:       assertFalse(node4.isArrayLit());
2014:       assertEquals((-1), node4.getCharno());
2015:       assertFalse(node4.isParamList());
2016:       assertFalse(node4.isStringKey());
2017:       assertFalse(node4.isNot());
2018:       assertFalse(node4.isWith());
2019:       assertFalse(node4.isExprResult());
2020:       assertFalse(node4.isScript());
2021:       assertFalse(node4.isInstanceOf());
2022:       assertFalse(node4.hasOneChild());
2023:       assertFalse(node4.isComma());
2024:       assertFalse(node4.isThis());
2025:       assertFalse(node4.isDec());
2026:       assertFalse(node4.isAssign());
2027:       assertFalse(node4.isTypeOf());
2028:       assertFalse(node4.isGetElem());
2029:       assertFalse(node4.isBreak());
2030:       assertEquals((-1), node4.getLineno());
2031:       assertFalse(node4.isOr());
2032:       assertFalse(node4.isWhile());
2033:       assertFalse(node4.isString());
2034:       assertFalse(node4.isContinue());
2035:       assertFalse(node4.isInc());
2036:       assertTrue(node4.isNumber());
2037:       assertFalse(node4.isThrow());
2038:       assertFalse(node4.isReturn());
2039:       assertFalse(node4.hasChildren());
2040:       assertFalse(node4.isFalse());
2041:       assertFalse(node4.isCast());
2042:       assertFalse(node4.isGetProp());
2043:       assertFalse(node4.isAnd());
2044:       assertFalse(node4.isObjectLit());
2045:       assertFalse(node4.isDebugger());
2046:       assertEquals((-1), node4.getSourcePosition());
2047:       
2048:       Node[] nodeArray0 = new Node[4];
2049:       nodeArray0[0] = node3;
2050:       nodeArray0[1] = node3;
2051:       nodeArray0[2] = node1;
2052:       nodeArray0[3] = node1;
2053:       boolean boolean5 = node1.isHook();
2054:       assertEquals(57, Node.LAST_PROP);
2055:       assertEquals(30, Node.VAR_ARGS_NAME);
2056:       assertEquals(54, Node.SLASH_V);
2057:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2058:       assertEquals(57, Node.REFLECTED_OBJECT);
2059:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2060:       assertEquals(12, Node.COLUMN_BITS);
2061:       assertEquals(32, Node.INCRDECR_PROP);
2062:       assertEquals(52, Node.LENGTH);
2063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2064:       assertEquals(1, Node.DECR_FLAG);
2065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2066:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2067:       assertEquals(56, Node.CHANGE_TIME);
2068:       assertEquals(8, Node.FLAG_NO_THROWS);
2069:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2070:       assertEquals(4095, Node.COLUMN_MASK);
2071:       assertEquals(49, Node.DIRECT_EVAL);
2072:       assertEquals(48, Node.DIRECTIVES);
2073:       assertEquals(37, Node.OPT_ARG_NAME);
2074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2075:       assertEquals(36, Node.QUOTED_PROP);
2076:       assertEquals(43, Node.IS_CONSTANT_NAME);
2077:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2078:       assertEquals(55, Node.INFERRED_FUNCTION);
2079:       assertEquals(29, Node.JSDOC_INFO_PROP);
2080:       assertEquals(53, Node.INPUT_ID);
2081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2082:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2083:       assertEquals(39, Node.EMPTY_BLOCK);
2084:       assertEquals(2, Node.POST_FLAG);
2085:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2086:       assertEquals(50, Node.FREE_CALL);
2087:       assertEquals(46, Node.IS_NAMESPACE);
2088:       assertEquals(47, Node.IS_DISPATCHER);
2089:       assertEquals(40, Node.ORIGINALNAME_PROP);
2090:       assertEquals(29, Node.JSDOC_INFO_PROP);
2091:       assertEquals(47, Node.IS_DISPATCHER);
2092:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2093:       assertEquals(56, Node.CHANGE_TIME);
2094:       assertEquals(37, Node.OPT_ARG_NAME);
2095:       assertEquals(2, Node.POST_FLAG);
2096:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2097:       assertEquals(30, Node.VAR_ARGS_NAME);
2098:       assertEquals(49, Node.DIRECT_EVAL);
2099:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2100:       assertEquals(36, Node.QUOTED_PROP);
2101:       assertEquals(57, Node.LAST_PROP);
2102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2103:       assertEquals(52, Node.LENGTH);
2104:       assertEquals(53, Node.INPUT_ID);
2105:       assertEquals(57, Node.REFLECTED_OBJECT);
2106:       assertEquals(55, Node.INFERRED_FUNCTION);
2107:       assertEquals(8, Node.FLAG_NO_THROWS);
2108:       assertEquals(39, Node.EMPTY_BLOCK);
2109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2112:       assertEquals(50, Node.FREE_CALL);
2113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2114:       assertEquals(48, Node.DIRECTIVES);
2115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2116:       assertEquals(40, Node.ORIGINALNAME_PROP);
2117:       assertEquals(4095, Node.COLUMN_MASK);
2118:       assertEquals(1, Node.DECR_FLAG);
2119:       assertEquals(12, Node.COLUMN_BITS);
2120:       assertEquals(54, Node.SLASH_V);
2121:       assertEquals(43, Node.IS_CONSTANT_NAME);
2122:       assertEquals(32, Node.INCRDECR_PROP);
2123:       assertEquals(46, Node.IS_NAMESPACE);
2124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2126:       assertTrue(boolean5 == boolean0);
2127:       assertTrue(boolean5 == boolean4);
2128:       assertTrue(boolean5 == boolean1);
2129:       assertTrue(boolean5 == boolean2);
2130:       assertTrue(boolean5 == boolean3);
2131:       assertFalse(node0.equals((Object)node1));
2132:       assertFalse(node0.equals((Object)node4));
2133:       assertFalse(node0.equals((Object)node2));
2134:       assertFalse(node0.equals((Object)node3));
2135:       assertFalse(node1.equals((Object)node0));
2136:       assertFalse(node1.equals((Object)node4));
2137:       assertSame(node1, node2);
2138:       assertSame(node1, node3);
2139:       assertFalse(boolean5);
2140:       assertFalse(node0.isCase());
2141:       assertFalse(node0.isSwitch());
2142:       assertFalse(node0.isFalse());
2143:       assertFalse(node0.isEmpty());
2144:       assertFalse(node0.isThrow());
2145:       assertFalse(node0.isBreak());
2146:       assertFalse(node0.isNE());
2147:       assertFalse(node0.isDelProp());
2148:       assertFalse(node0.isIf());
2149:       assertFalse(node0.isTrue());
2150:       assertFalse(node0.isInc());
2151:       assertFalse(node0.isIn());
2152:       assertFalse(node0.isDefaultCase());
2153:       assertFalse(node0.isThis());
2154:       assertFalse(node0.isInstanceOf());
2155:       assertFalse(node0.isRegExp());
2156:       assertEquals(0, node0.getChildCount());
2157:       assertFalse(node0.isCatch());
2158:       assertFalse(node0.isWith());
2159:       assertFalse(node0.isStringKey());
2160:       assertFalse(node0.isFor());
2161:       assertFalse(node0.isLabelName());
2162:       assertFalse(node0.isArrayLit());
2163:       assertFalse(node0.hasOneChild());
2164:       assertFalse(node0.isHook());
2165:       assertFalse(node0.isParamList());
2166:       assertTrue(node0.isString());
2167:       assertFalse(node0.isTry());
2168:       assertEquals((-1), node0.getCharno());
2169:       assertFalse(node0.isNumber());
2170:       assertFalse(node0.isGetterDef());
2171:       assertFalse(node0.isScript());
2172:       assertFalse(node0.isDo());
2173:       assertFalse(node0.isWhile());
2174:       assertFalse(node0.isAssignAdd());
2175:       assertFalse(node0.isBlock());
2176:       assertFalse(node0.isReturn());
2177:       assertEquals((-1), node0.getLineno());
2178:       assertFalse(node0.isLabel());
2179:       assertFalse(node0.isTypeOf());
2180:       assertFalse(node0.isDec());
2181:       assertFalse(node0.hasMoreThanOneChild());
2182:       assertFalse(node0.isContinue());
2183:       assertFalse(node0.isGetElem());
2184:       assertFalse(node0.isName());
2185:       assertFalse(node0.isCall());
2186:       assertFalse(node0.isNull());
2187:       assertFalse(node0.isVar());
2188:       assertFalse(node0.isNew());
2189:       assertFalse(node0.isAdd());
2190:       assertFalse(node0.isOr());
2191:       assertFalse(node0.isSetterDef());
2192:       assertEquals(40, node0.getType());
2193:       assertFalse(node0.isNot());
2194:       assertFalse(node0.isAnd());
2195:       assertFalse(node0.isVoid());
2196:       assertFalse(node0.isExprResult());
2197:       assertFalse(node0.isComma());
2198:       assertFalse(node0.isCast());
2199:       assertFalse(node0.isFunction());
2200:       assertFalse(node0.isAssign());
2201:       assertFalse(node0.hasChildren());
2202:       assertFalse(node0.isDebugger());
2203:       assertFalse(node0.isGetProp());
2204:       assertEquals((-1), node0.getSourcePosition());
2205:       assertFalse(node0.isObjectLit());
2206:       assertFalse(node1.isCast());
2207:       assertFalse(node1.isLabelName());
2208:       assertFalse(node1.isGetElem());
2209:       assertFalse(node1.isNumber());
2210:       assertFalse(node1.isScript());
2211:       assertFalse(node1.isOr());
2212:       assertFalse(node1.isNot());
2213:       assertEquals((-1), node1.getSourcePosition());
2214:       assertFalse(node1.isContinue());
2215:       assertFalse(node1.isAnd());
2216:       assertFalse(node1.isAssignAdd());
2217:       assertFalse(node1.isDo());
2218:       assertFalse(node1.isLabel());
2219:       assertEquals(2342, node1.getType());
2220:       assertFalse(node1.isVar());
2221:       assertFalse(node1.isCall());
2222:       assertFalse(node1.isFalse());
2223:       assertFalse(node1.isAdd());
2224:       assertFalse(node1.isName());
2225:       assertFalse(node1.isBreak());
2226:       assertFalse(node1.isNew());
2227:       assertFalse(node1.isNull());
2228:       assertFalse(node1.isString());
2229:       assertFalse(node1.isObjectLit());
2230:       assertFalse(node1.isGetProp());
2231:       assertFalse(node1.isExprResult());
2232:       assertFalse(node1.isTypeOf());
2233:       assertFalse(node1.isWhile());
2234:       assertFalse(node1.isAssign());
2235:       assertFalse(node1.isReturn());
2236:       assertTrue(node1.hasOneChild());
2237:       assertFalse(node1.isDec());
2238:       assertFalse(node1.isComma());
2239:       assertFalse(node1.isEmpty());
2240:       assertFalse(node1.isTry());
2241:       assertFalse(node1.isDelProp());
2242:       assertFalse(node1.isVoid());
2243:       assertFalse(node1.isArrayLit());
2244:       assertFalse(node1.isNE());
2245:       assertFalse(node1.isTrue());
2246:       assertFalse(node1.isIf());
2247:       assertFalse(node1.isGetterDef());
2248:       assertFalse(node1.isDebugger());
2249:       assertFalse(node1.isIn());
2250:       assertFalse(node1.isFunction());
2251:       assertFalse(node1.isDefaultCase());
2252:       assertFalse(node1.isHook());
2253:       assertFalse(node1.isThrow());
2254:       assertFalse(node1.isStringKey());
2255:       assertFalse(node1.isSwitch());
2256:       assertFalse(node1.isSetterDef());
2257:       assertFalse(node1.isInc());
2258:       assertFalse(node1.isParamList());
2259:       assertEquals((-1), node1.getCharno());
2260:       assertFalse(node1.hasMoreThanOneChild());
2261:       assertFalse(node1.isCatch());
2262:       assertFalse(node1.isInstanceOf());
2263:       assertTrue(node1.hasChildren());
2264:       assertFalse(node1.isCase());
2265:       assertEquals((-1), node1.getLineno());
2266:       assertFalse(node1.isRegExp());
2267:       assertFalse(node1.isThis());
2268:       assertFalse(node1.isWith());
2269:       assertFalse(node1.isBlock());
2270:       assertFalse(node1.isFor());
2271:       assertEquals(1, node1.getChildCount());
2272:       
2273:       String string0 = node1.checkTreeEquals(node1);
2274:       assertEquals(57, Node.LAST_PROP);
2275:       assertEquals(30, Node.VAR_ARGS_NAME);
2276:       assertEquals(54, Node.SLASH_V);
2277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2278:       assertEquals(57, Node.REFLECTED_OBJECT);
2279:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2280:       assertEquals(12, Node.COLUMN_BITS);
2281:       assertEquals(32, Node.INCRDECR_PROP);
2282:       assertEquals(52, Node.LENGTH);
2283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2284:       assertEquals(1, Node.DECR_FLAG);
2285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2287:       assertEquals(56, Node.CHANGE_TIME);
2288:       assertEquals(8, Node.FLAG_NO_THROWS);
2289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2290:       assertEquals(4095, Node.COLUMN_MASK);
2291:       assertEquals(49, Node.DIRECT_EVAL);
2292:       assertEquals(48, Node.DIRECTIVES);
2293:       assertEquals(37, Node.OPT_ARG_NAME);
2294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2295:       assertEquals(36, Node.QUOTED_PROP);
2296:       assertEquals(43, Node.IS_CONSTANT_NAME);
2297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2298:       assertEquals(55, Node.INFERRED_FUNCTION);
2299:       assertEquals(29, Node.JSDOC_INFO_PROP);
2300:       assertEquals(53, Node.INPUT_ID);
2301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2303:       assertEquals(39, Node.EMPTY_BLOCK);
2304:       assertEquals(2, Node.POST_FLAG);
2305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2306:       assertEquals(50, Node.FREE_CALL);
2307:       assertEquals(46, Node.IS_NAMESPACE);
2308:       assertEquals(47, Node.IS_DISPATCHER);
2309:       assertEquals(40, Node.ORIGINALNAME_PROP);
2310:       assertEquals(29, Node.JSDOC_INFO_PROP);
2311:       assertEquals(47, Node.IS_DISPATCHER);
2312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2313:       assertEquals(56, Node.CHANGE_TIME);
2314:       assertEquals(37, Node.OPT_ARG_NAME);
2315:       assertEquals(2, Node.POST_FLAG);
2316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2317:       assertEquals(30, Node.VAR_ARGS_NAME);
2318:       assertEquals(49, Node.DIRECT_EVAL);
2319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2320:       assertEquals(36, Node.QUOTED_PROP);
2321:       assertEquals(57, Node.LAST_PROP);
2322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2323:       assertEquals(52, Node.LENGTH);
2324:       assertEquals(53, Node.INPUT_ID);
2325:       assertEquals(57, Node.REFLECTED_OBJECT);
2326:       assertEquals(55, Node.INFERRED_FUNCTION);
2327:       assertEquals(8, Node.FLAG_NO_THROWS);
2328:       assertEquals(39, Node.EMPTY_BLOCK);
2329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2332:       assertEquals(50, Node.FREE_CALL);
2333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2334:       assertEquals(48, Node.DIRECTIVES);
2335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2336:       assertEquals(40, Node.ORIGINALNAME_PROP);
2337:       assertEquals(4095, Node.COLUMN_MASK);
2338:       assertEquals(1, Node.DECR_FLAG);
2339:       assertEquals(12, Node.COLUMN_BITS);
2340:       assertEquals(54, Node.SLASH_V);
2341:       assertEquals(43, Node.IS_CONSTANT_NAME);
2342:       assertEquals(32, Node.INCRDECR_PROP);
2343:       assertEquals(46, Node.IS_NAMESPACE);
2344:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2345:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2346:       assertNull(string0);
2347:       assertFalse(node0.equals((Object)node1));
2348:       assertFalse(node0.equals((Object)node4));
2349:       assertFalse(node0.equals((Object)node2));
2350:       assertFalse(node0.equals((Object)node3));
2351:       assertFalse(node1.equals((Object)node0));
2352:       assertFalse(node1.equals((Object)node4));
2353:       assertSame(node1, node2);
2354:       assertSame(node1, node3);
2355:       assertFalse(node0.isCase());
2356:       assertFalse(node0.isSwitch());
2357:       assertFalse(node0.isFalse());
2358:       assertFalse(node0.isEmpty());
2359:       assertFalse(node0.isThrow());
2360:       assertFalse(node0.isBreak());
2361:       assertFalse(node0.isNE());
2362:       assertFalse(node0.isDelProp());
2363:       assertFalse(node0.isIf());
2364:       assertFalse(node0.isTrue());
2365:       assertFalse(node0.isInc());
2366:       assertFalse(node0.isIn());
2367:       assertFalse(node0.isDefaultCase());
2368:       assertFalse(node0.isThis());
2369:       assertFalse(node0.isInstanceOf());
2370:       assertFalse(node0.isRegExp());
2371:       assertEquals(0, node0.getChildCount());
2372:       assertFalse(node0.isCatch());
2373:       assertFalse(node0.isWith());
2374:       assertFalse(node0.isStringKey());
2375:       assertFalse(node0.isFor());
2376:       assertFalse(node0.isLabelName());
2377:       assertFalse(node0.isArrayLit());
2378:       assertFalse(node0.hasOneChild());
2379:       assertFalse(node0.isHook());
2380:       assertFalse(node0.isParamList());
2381:       assertTrue(node0.isString());
2382:       assertFalse(node0.isTry());
2383:       assertEquals((-1), node0.getCharno());
2384:       assertFalse(node0.isNumber());
2385:       assertFalse(node0.isGetterDef());
2386:       assertFalse(node0.isScript());
2387:       assertFalse(node0.isDo());
2388:       assertFalse(node0.isWhile());
2389:       assertFalse(node0.isAssignAdd());
2390:       assertFalse(node0.isBlock());
2391:       assertFalse(node0.isReturn());
2392:       assertEquals((-1), node0.getLineno());
2393:       assertFalse(node0.isLabel());
2394:       assertFalse(node0.isTypeOf());
2395:       assertFalse(node0.isDec());
2396:       assertFalse(node0.hasMoreThanOneChild());
2397:       assertFalse(node0.isContinue());
2398:       assertFalse(node0.isGetElem());
2399:       assertFalse(node0.isName());
2400:       assertFalse(node0.isCall());
2401:       assertFalse(node0.isNull());
2402:       assertFalse(node0.isVar());
2403:       assertFalse(node0.isNew());
2404:       
2405:       boolean boolean6 = node4.isEquivalentToTyped(node1);
2406:       assertEquals(57, Node.LAST_PROP);
2407:       assertEquals(30, Node.VAR_ARGS_NAME);
2408:       assertEquals(54, Node.SLASH_V);
2409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2410:       assertEquals(57, Node.REFLECTED_OBJECT);
2411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2412:       assertEquals(12, Node.COLUMN_BITS);
2413:       assertEquals(32, Node.INCRDECR_PROP);
2414:       assertEquals(52, Node.LENGTH);
2415:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2416:       assertEquals(1, Node.DECR_FLAG);
2417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2418:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2419:       assertEquals(56, Node.CHANGE_TIME);
2420:       assertEquals(8, Node.FLAG_NO_THROWS);
2421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2422:       assertEquals(4095, Node.COLUMN_MASK);
2423:       assertEquals(49, Node.DIRECT_EVAL);
2424:       assertEquals(48, Node.DIRECTIVES);
2425:       assertEquals(37, Node.OPT_ARG_NAME);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(36, Node.QUOTED_PROP);
2428:       assertEquals(43, Node.IS_CONSTANT_NAME);
2429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2430:       assertEquals(55, Node.INFERRED_FUNCTION);
2431:       assertEquals(29, Node.JSDOC_INFO_PROP);
2432:       assertEquals(53, Node.INPUT_ID);
2433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2435:       assertEquals(39, Node.EMPTY_BLOCK);
2436:       assertEquals(2, Node.POST_FLAG);
2437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2438:       assertEquals(50, Node.FREE_CALL);
2439:       assertEquals(46, Node.IS_NAMESPACE);
2440:       assertEquals(47, Node.IS_DISPATCHER);
2441:       assertEquals(40, Node.ORIGINALNAME_PROP);
2442:       assertEquals(29, Node.JSDOC_INFO_PROP);
2443:       assertEquals(47, Node.IS_DISPATCHER);
2444:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2445:       assertEquals(56, Node.CHANGE_TIME);
2446:       assertEquals(37, Node.OPT_ARG_NAME);
2447:       assertEquals(2, Node.POST_FLAG);
2448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2449:       assertEquals(30, Node.VAR_ARGS_NAME);
2450:       assertEquals(49, Node.DIRECT_EVAL);
2451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2452:       assertEquals(36, Node.QUOTED_PROP);
2453:       assertEquals(57, Node.LAST_PROP);
2454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2455:       assertEquals(52, Node.LENGTH);
2456:       assertEquals(53, Node.INPUT_ID);
2457:       assertEquals(57, Node.REFLECTED_OBJECT);
2458:       assertEquals(55, Node.INFERRED_FUNCTION);
2459:       assertEquals(8, Node.FLAG_NO_THROWS);
2460:       assertEquals(39, Node.EMPTY_BLOCK);
2461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2464:       assertEquals(50, Node.FREE_CALL);
2465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2466:       assertEquals(48, Node.DIRECTIVES);
2467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2468:       assertEquals(40, Node.ORIGINALNAME_PROP);
2469:       assertEquals(4095, Node.COLUMN_MASK);
2470:       assertEquals(1, Node.DECR_FLAG);
2471:       assertEquals(12, Node.COLUMN_BITS);
2472:       assertEquals(54, Node.SLASH_V);
2473:       assertEquals(43, Node.IS_CONSTANT_NAME);
2474:       assertEquals(32, Node.INCRDECR_PROP);
2475:       assertEquals(46, Node.IS_NAMESPACE);
2476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2478:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2479:       assertEquals(53, Node.INPUT_ID);
2480:       assertEquals(43, Node.IS_CONSTANT_NAME);
2481:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2482:       assertEquals(55, Node.INFERRED_FUNCTION);
2483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2484:       assertEquals(29, Node.JSDOC_INFO_PROP);
2485:       assertEquals(36, Node.QUOTED_PROP);
2486:       assertEquals(37, Node.OPT_ARG_NAME);
2487:       assertEquals(48, Node.DIRECTIVES);
2488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2489:       assertEquals(32, Node.INCRDECR_PROP);
2490:       assertEquals(56, Node.CHANGE_TIME);
2491:       assertEquals(12, Node.COLUMN_BITS);
2492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2494:       assertEquals(4095, Node.COLUMN_MASK);
2495:       assertEquals(54, Node.SLASH_V);
2496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2497:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2498:       assertEquals(57, Node.LAST_PROP);
2499:       assertEquals(49, Node.DIRECT_EVAL);
2500:       assertEquals(1, Node.DECR_FLAG);
2501:       assertEquals(57, Node.REFLECTED_OBJECT);
2502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2503:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2504:       assertEquals(50, Node.FREE_CALL);
2505:       assertEquals(52, Node.LENGTH);
2506:       assertEquals(8, Node.FLAG_NO_THROWS);
2507:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2508:       assertEquals(39, Node.EMPTY_BLOCK);
2509:       assertEquals(47, Node.IS_DISPATCHER);
2510:       assertEquals(46, Node.IS_NAMESPACE);
2511:       assertEquals(40, Node.ORIGINALNAME_PROP);
2512:       assertEquals(30, Node.VAR_ARGS_NAME);
2513:       assertEquals(2, Node.POST_FLAG);
2514:       assertFalse(node0.equals((Object)node1));
2515:       assertFalse(node0.equals((Object)node4));
2516:       assertFalse(node0.equals((Object)node2));
2517:       assertFalse(node0.equals((Object)node3));
2518:       assertFalse(node1.equals((Object)node0));
2519:       assertFalse(node1.equals((Object)node4));
2520:       assertTrue(boolean6 == boolean5);
2521:       assertTrue(boolean6 == boolean2);
2522:       assertTrue(boolean6 == boolean1);
2523:       assertTrue(boolean6 == boolean4);
2524:       assertTrue(boolean6 == boolean3);
2525:       assertTrue(boolean6 == boolean0);
2526:       assertFalse(node4.equals((Object)node3));
2527:       assertFalse(node4.equals((Object)node2));
2528:       assertFalse(node4.equals((Object)node1));
2529:       assertFalse(node4.equals((Object)node0));
2530:       assertSame(node1, node2);
2531:       assertSame(node1, node3);
2532:       assertFalse(boolean6);
2533:   }
2534: }
RegularFileObject[/tmp/EvoSuite_409_1628160205351/com/google/javascript/rhino/Node_409_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:25 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_409_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_409_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_409_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:25.951 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(":5hjZ,_yR");
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());

Node node1 = new Node(2342, node0, node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(2342, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());

boolean boolean0 = node0.isEquivalentToTyped(node1);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(2342, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());

Node node2 = node0.getParent();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertSame(node2, node1);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertEquals(2342, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isFalse());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());

Node node3 = node1.copyInformationFrom(node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertSame(node1, node2);
assertSame(node1, node3);
assertSame(node3, node1);
assertSame(node3, node2);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(2342, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node3.isEmpty());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isString());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isCase());
assertTrue(node3.hasChildren());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertEquals(2342, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isNumber());
assertFalse(node3.isCast());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isThis());
assertFalse(node3.isDec());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(iterable0.contains(node3));
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());

boolean boolean1 = node3.isExprResult();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertSame(node1, node2);
assertSame(node1, node3);
assertSame(node3, node1);
assertSame(node3, node2);
assertFalse(boolean1);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(2342, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node3.isEmpty());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isString());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isCase());
assertTrue(node3.hasChildren());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertEquals(2342, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isNumber());
assertFalse(node3.isCast());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isThis());
assertFalse(node3.isDec());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());

Node node4 = Node.newNumber(0.0, (-3310), 939);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node4);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTry());
assertFalse(node4.isFunction());
assertFalse(node4.isFor());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isIf());
assertFalse(node4.isCall());
assertFalse(node4.isEmpty());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isTrue());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isDo());
assertFalse(node4.isSwitch());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isInc());
assertTrue(node4.isNumber());
assertFalse(node4.isThrow());
assertFalse(node4.isReturn());
assertFalse(node4.hasChildren());
assertFalse(node4.isFalse());
assertFalse(node4.isCast());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());

boolean boolean2 = node4.isOnlyModifiesThisCall();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTry());
assertFalse(node4.isFunction());
assertFalse(node4.isFor());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isIf());
assertFalse(node4.isCall());
assertFalse(node4.isEmpty());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isTrue());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isDo());
assertFalse(node4.isSwitch());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isInc());
assertTrue(node4.isNumber());
assertFalse(node4.isThrow());
assertFalse(node4.isReturn());
assertFalse(node4.hasChildren());
assertFalse(node4.isFalse());
assertFalse(node4.isCast());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());

boolean boolean3 = node1.isFor();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertSame(node1, node2);
assertSame(node1, node3);
assertFalse(boolean3);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(2342, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());

boolean boolean4 = node4.isAssignAdd();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4);
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTry());
assertFalse(node4.isFunction());
assertFalse(node4.isFor());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isIf());
assertFalse(node4.isCall());
assertFalse(node4.isEmpty());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isTrue());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isDo());
assertFalse(node4.isSwitch());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isInc());
assertTrue(node4.isNumber());
assertFalse(node4.isThrow());
assertFalse(node4.isReturn());
assertFalse(node4.hasChildren());
assertFalse(node4.isFalse());
assertFalse(node4.isCast());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());

Node[] nodeArray0 = new Node[4];
nodeArray0[0] = node3;
nodeArray0[1] = node3;
nodeArray0[2] = node1;
nodeArray0[3] = node1;
boolean boolean5 = node1.isHook();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertSame(node1, node2);
assertSame(node1, node3);
assertFalse(boolean5);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(2342, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());

String string0 = node1.checkTreeEquals(node1);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNull(string0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertSame(node1, node2);
assertSame(node1, node3);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isParamList());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());

boolean boolean6 = node4.isEquivalentToTyped(node1);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertSame(node1, node2);
assertSame(node1, node3);
assertFalse(boolean6);


[MASTER] 10:43:28.318 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_430_1628160208235/com/google/javascript/rhino/Node_430_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_430_1628160208235/com/google/javascript/rhino/Node_430_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:28.318 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:28.318 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:28.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 587
[MASTER] 10:43:28.320 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_430_1628160208235/com/google/javascript/rhino/Node_430_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:28 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_430_tmp__ESTest extends Node_430_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newNumber((-2313.34), (-2019), (-2019));
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
26:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(55, Node.INFERRED_FUNCTION);
29:       assertEquals(8, Node.FLAG_NO_THROWS);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(30, Node.VAR_ARGS_NAME);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(56, Node.CHANGE_TIME);
40:       assertEquals(51, Node.STATIC_SOURCE_FILE);
41:       assertEquals(46, Node.IS_NAMESPACE);
42:       assertEquals(47, Node.IS_DISPATCHER);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(57, Node.LAST_PROP);
47:       assertEquals(1, Node.DECR_FLAG);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(15, Node.NO_SIDE_EFFECTS);
50:       assertEquals(52, Node.LENGTH);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(57, Node.REFLECTED_OBJECT);
55:       assertEquals(49, Node.DIRECT_EVAL);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
58:       assertEquals(4095, Node.COLUMN_MASK);
59:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
60:       assertNotNull(node0);
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isGetProp());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isThis());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isThrow());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isFalse());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isScript());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isCase());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.hasOneChild());
76:       assertFalse(node0.isNot());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isNE());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.isFor());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isCast());
85:       assertEquals(39, node0.getType());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isFunction());
89:       assertFalse(node0.isInc());
90:       assertFalse(node0.isIn());
91:       assertFalse(node0.isParamList());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isSetterDef());
94:       assertFalse(node0.isStringKey());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isVar());
97:       assertFalse(node0.isCatch());
98:       assertFalse(node0.isCall());
99:       assertEquals(0, node0.getChildCount());
100:       assertFalse(node0.isRegExp());
101:       assertFalse(node0.isDebugger());
102:       assertFalse(node0.isBlock());
103:       assertFalse(node0.isTry());
104:       assertFalse(node0.isWhile());
105:       assertFalse(node0.isGetterDef());
106:       assertFalse(node0.isDec());
107:       assertFalse(node0.hasChildren());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isLabelName());
110:       assertTrue(node0.isNumber());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isArrayLit());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.isReturn());
115:       assertFalse(node0.isLabel());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.isTrue());
119:       assertFalse(node0.isExprResult());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isVoid());
123:       assertFalse(node0.isDefaultCase());
124:       assertFalse(node0.isOr());
125:       assertFalse(node0.isAdd());
126:       assertFalse(node0.isEmpty());
127:       
128:       node0.setSourceFileForTesting("|");
129:       assertEquals(48, Node.DIRECTIVES);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(8, Node.FLAG_NO_THROWS);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(30, Node.VAR_ARGS_NAME);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(56, Node.CHANGE_TIME);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(46, Node.IS_NAMESPACE);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(12, Node.COLUMN_BITS);
149:       assertEquals(29, Node.JSDOC_INFO_PROP);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(1, Node.DECR_FLAG);
153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
155:       assertEquals(52, Node.LENGTH);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(36, Node.QUOTED_PROP);
158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
159:       assertEquals(57, Node.REFLECTED_OBJECT);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
163:       assertEquals(4095, Node.COLUMN_MASK);
164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isThis());
169:       assertFalse(node0.isInstanceOf());
170:       assertFalse(node0.isThrow());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isFalse());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isScript());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isAnd());
178:       assertFalse(node0.isSwitch());
179:       assertFalse(node0.hasOneChild());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isObjectLit());
183:       assertFalse(node0.isNE());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isFor());
186:       assertEquals((-1), node0.getLineno());
187:       assertFalse(node0.isIf());
188:       assertFalse(node0.isCast());
189:       assertEquals(39, node0.getType());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.hasMoreThanOneChild());
192:       assertFalse(node0.isFunction());
193:       assertFalse(node0.isInc());
194:       assertFalse(node0.isIn());
195:       assertFalse(node0.isParamList());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isSetterDef());
198:       assertFalse(node0.isStringKey());
199:       assertFalse(node0.isName());
200:       assertFalse(node0.isVar());
201:       assertFalse(node0.isCatch());
202:       assertFalse(node0.isCall());
203:       assertEquals(0, node0.getChildCount());
204:       assertFalse(node0.isRegExp());
205:       assertFalse(node0.isDebugger());
206:       assertFalse(node0.isBlock());
207:       assertFalse(node0.isTry());
208:       assertFalse(node0.isWhile());
209:       assertFalse(node0.isGetterDef());
210:       assertFalse(node0.isDec());
211:       assertFalse(node0.hasChildren());
212:       assertFalse(node0.isAssignAdd());
213:       assertFalse(node0.isLabelName());
214:       assertTrue(node0.isNumber());
215:       assertFalse(node0.isDelProp());
216:       assertFalse(node0.isArrayLit());
217:       assertFalse(node0.isGetElem());
218:       assertFalse(node0.isReturn());
219:       assertFalse(node0.isLabel());
220:       assertFalse(node0.isAssign());
221:       assertFalse(node0.isTypeOf());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isExprResult());
224:       assertFalse(node0.isDo());
225:       assertFalse(node0.isNew());
226:       assertFalse(node0.isVoid());
227:       assertFalse(node0.isDefaultCase());
228:       assertFalse(node0.isOr());
229:       assertFalse(node0.isAdd());
230:       assertFalse(node0.isEmpty());
231:       
232:       Iterable<Node> iterable0 = node0.siblings();
233:       assertEquals(48, Node.DIRECTIVES);
234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(55, Node.INFERRED_FUNCTION);
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(53, Node.INPUT_ID);
242:       assertEquals(43, Node.IS_CONSTANT_NAME);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(32, Node.INCRDECR_PROP);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(51, Node.STATIC_SOURCE_FILE);
250:       assertEquals(46, Node.IS_NAMESPACE);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(29, Node.JSDOC_INFO_PROP);
254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
255:       assertEquals(57, Node.LAST_PROP);
256:       assertEquals(1, Node.DECR_FLAG);
257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(52, Node.LENGTH);
260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
263:       assertEquals(57, Node.REFLECTED_OBJECT);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertNotNull(iterable0);
270:       assertFalse(node0.isComma());
271:       assertFalse(node0.isGetProp());
272:       assertFalse(node0.isBreak());
273:       assertFalse(node0.isThis());
274:       assertFalse(node0.isInstanceOf());
275:       assertFalse(node0.isThrow());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isFalse());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isScript());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isCase());
282:       assertFalse(node0.isAnd());
283:       assertFalse(node0.isSwitch());
284:       assertFalse(node0.hasOneChild());
285:       assertFalse(node0.isNot());
286:       assertFalse(node0.isString());
287:       assertFalse(node0.isObjectLit());
288:       assertFalse(node0.isNE());
289:       assertEquals((-1), node0.getSourcePosition());
290:       assertFalse(node0.isFor());
291:       assertEquals((-1), node0.getLineno());
292:       assertFalse(node0.isIf());
293:       assertFalse(node0.isCast());
294:       assertEquals(39, node0.getType());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.hasMoreThanOneChild());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node0.isInc());
299:       assertFalse(node0.isIn());
300:       assertFalse(node0.isParamList());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isSetterDef());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isName());
305:       assertFalse(node0.isVar());
306:       assertFalse(node0.isCatch());
307:       assertFalse(node0.isCall());
308:       assertEquals(0, node0.getChildCount());
309:       assertFalse(node0.isRegExp());
310:       assertFalse(node0.isDebugger());
311:       assertFalse(node0.isBlock());
312:       assertFalse(node0.isTry());
313:       assertFalse(node0.isWhile());
314:       assertFalse(node0.isGetterDef());
315:       assertFalse(node0.isDec());
316:       assertFalse(node0.hasChildren());
317:       assertFalse(node0.isAssignAdd());
318:       assertFalse(node0.isLabelName());
319:       assertTrue(node0.isNumber());
320:       assertFalse(node0.isDelProp());
321:       assertFalse(node0.isArrayLit());
322:       assertFalse(node0.isGetElem());
323:       assertFalse(node0.isReturn());
324:       assertFalse(node0.isLabel());
325:       assertFalse(node0.isAssign());
326:       assertFalse(node0.isTypeOf());
327:       assertFalse(node0.isTrue());
328:       assertFalse(node0.isExprResult());
329:       assertFalse(node0.isDo());
330:       assertFalse(node0.isNew());
331:       assertFalse(node0.isVoid());
332:       assertFalse(node0.isDefaultCase());
333:       assertFalse(node0.isOr());
334:       assertFalse(node0.isAdd());
335:       assertFalse(node0.isEmpty());
336:       
337:       boolean boolean0 = node0.isUnscopedQualifiedName();
338:       assertEquals(48, Node.DIRECTIVES);
339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
341:       assertEquals(50, Node.FREE_CALL);
342:       assertEquals(55, Node.INFERRED_FUNCTION);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       assertEquals(39, Node.EMPTY_BLOCK);
345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertEquals(43, Node.IS_CONSTANT_NAME);
348:       assertEquals(54, Node.SLASH_V);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(32, Node.INCRDECR_PROP);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(56, Node.CHANGE_TIME);
354:       assertEquals(51, Node.STATIC_SOURCE_FILE);
355:       assertEquals(46, Node.IS_NAMESPACE);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(12, Node.COLUMN_BITS);
358:       assertEquals(29, Node.JSDOC_INFO_PROP);
359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(1, Node.DECR_FLAG);
362:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(49, Node.DIRECT_EVAL);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertFalse(boolean0);
375:       assertFalse(node0.isComma());
376:       assertFalse(node0.isGetProp());
377:       assertFalse(node0.isBreak());
378:       assertFalse(node0.isThis());
379:       assertFalse(node0.isInstanceOf());
380:       assertFalse(node0.isThrow());
381:       assertFalse(node0.isHook());
382:       assertFalse(node0.isFalse());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.isScript());
385:       assertEquals((-1), node0.getCharno());
386:       assertFalse(node0.isCase());
387:       assertFalse(node0.isAnd());
388:       assertFalse(node0.isSwitch());
389:       assertFalse(node0.hasOneChild());
390:       assertFalse(node0.isNot());
391:       assertFalse(node0.isString());
392:       assertFalse(node0.isObjectLit());
393:       assertFalse(node0.isNE());
394:       assertEquals((-1), node0.getSourcePosition());
395:       assertFalse(node0.isFor());
396:       assertEquals((-1), node0.getLineno());
397:       assertFalse(node0.isIf());
398:       assertFalse(node0.isCast());
399:       assertEquals(39, node0.getType());
400:       assertFalse(node0.isContinue());
401:       assertFalse(node0.hasMoreThanOneChild());
402:       assertFalse(node0.isFunction());
403:       assertFalse(node0.isInc());
404:       assertFalse(node0.isIn());
405:       assertFalse(node0.isParamList());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isSetterDef());
408:       assertFalse(node0.isStringKey());
409:       assertFalse(node0.isName());
410:       assertFalse(node0.isVar());
411:       assertFalse(node0.isCatch());
412:       assertFalse(node0.isCall());
413:       assertEquals(0, node0.getChildCount());
414:       assertFalse(node0.isRegExp());
415:       assertFalse(node0.isDebugger());
416:       assertFalse(node0.isBlock());
417:       assertFalse(node0.isTry());
418:       assertFalse(node0.isWhile());
419:       assertFalse(node0.isGetterDef());
420:       assertFalse(node0.isDec());
421:       assertFalse(node0.hasChildren());
422:       assertFalse(node0.isAssignAdd());
423:       assertFalse(node0.isLabelName());
424:       assertTrue(node0.isNumber());
425:       assertFalse(node0.isDelProp());
426:       assertFalse(node0.isArrayLit());
427:       assertFalse(node0.isGetElem());
428:       assertFalse(node0.isReturn());
429:       assertFalse(node0.isLabel());
430:       assertFalse(node0.isAssign());
431:       assertFalse(node0.isTypeOf());
432:       assertFalse(node0.isTrue());
433:       assertFalse(node0.isExprResult());
434:       assertFalse(node0.isDo());
435:       assertFalse(node0.isNew());
436:       assertFalse(node0.isVoid());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isOr());
439:       assertFalse(node0.isAdd());
440:       assertFalse(node0.isEmpty());
441:       
442:       boolean boolean1 = node0.isBlock();
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(55, Node.INFERRED_FUNCTION);
448:       assertEquals(8, Node.FLAG_NO_THROWS);
449:       assertEquals(39, Node.EMPTY_BLOCK);
450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
451:       assertEquals(53, Node.INPUT_ID);
452:       assertEquals(43, Node.IS_CONSTANT_NAME);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(30, Node.VAR_ARGS_NAME);
455:       assertEquals(40, Node.ORIGINALNAME_PROP);
456:       assertEquals(32, Node.INCRDECR_PROP);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(56, Node.CHANGE_TIME);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(46, Node.IS_NAMESPACE);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(12, Node.COLUMN_BITS);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
465:       assertEquals(57, Node.LAST_PROP);
466:       assertEquals(1, Node.DECR_FLAG);
467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
469:       assertEquals(52, Node.LENGTH);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(37, Node.OPT_ARG_NAME);
476:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
477:       assertEquals(4095, Node.COLUMN_MASK);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertTrue(boolean1 == boolean0);
480:       assertFalse(boolean1);
481:       assertFalse(node0.isComma());
482:       assertFalse(node0.isGetProp());
483:       assertFalse(node0.isBreak());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.isInstanceOf());
486:       assertFalse(node0.isThrow());
487:       assertFalse(node0.isHook());
488:       assertFalse(node0.isFalse());
489:       assertFalse(node0.isWith());
490:       assertFalse(node0.isScript());
491:       assertEquals((-1), node0.getCharno());
492:       assertFalse(node0.isCase());
493:       assertFalse(node0.isAnd());
494:       assertFalse(node0.isSwitch());
495:       assertFalse(node0.hasOneChild());
496:       assertFalse(node0.isNot());
497:       assertFalse(node0.isString());
498:       assertFalse(node0.isObjectLit());
499:       assertFalse(node0.isNE());
500:       assertEquals((-1), node0.getSourcePosition());
501:       assertFalse(node0.isFor());
502:       assertEquals((-1), node0.getLineno());
503:       assertFalse(node0.isIf());
504:       assertFalse(node0.isCast());
505:       assertEquals(39, node0.getType());
506:       assertFalse(node0.isContinue());
507:       assertFalse(node0.hasMoreThanOneChild());
508:       assertFalse(node0.isFunction());
509:       assertFalse(node0.isInc());
510:       assertFalse(node0.isIn());
511:       assertFalse(node0.isParamList());
512:       assertFalse(node0.isNull());
513:       assertFalse(node0.isSetterDef());
514:       assertFalse(node0.isStringKey());
515:       assertFalse(node0.isName());
516:       assertFalse(node0.isVar());
517:       assertFalse(node0.isCatch());
518:       assertFalse(node0.isCall());
519:       assertEquals(0, node0.getChildCount());
520:       assertFalse(node0.isRegExp());
521:       assertFalse(node0.isDebugger());
522:       assertFalse(node0.isBlock());
523:       assertFalse(node0.isTry());
524:       assertFalse(node0.isWhile());
525:       assertFalse(node0.isGetterDef());
526:       assertFalse(node0.isDec());
527:       assertFalse(node0.hasChildren());
528:       assertFalse(node0.isAssignAdd());
529:       assertFalse(node0.isLabelName());
530:       assertTrue(node0.isNumber());
531:       assertFalse(node0.isDelProp());
532:       assertFalse(node0.isArrayLit());
533:       assertFalse(node0.isGetElem());
534:       assertFalse(node0.isReturn());
535:       assertFalse(node0.isLabel());
536:       assertFalse(node0.isAssign());
537:       assertFalse(node0.isTypeOf());
538:       assertFalse(node0.isTrue());
539:       assertFalse(node0.isExprResult());
540:       assertFalse(node0.isDo());
541:       assertFalse(node0.isNew());
542:       assertFalse(node0.isVoid());
543:       assertFalse(node0.isDefaultCase());
544:       assertFalse(node0.isOr());
545:       assertFalse(node0.isAdd());
546:       assertFalse(node0.isEmpty());
547:       
548:       Iterable<Node> iterable1 = node0.children();
549:       assertEquals(48, Node.DIRECTIVES);
550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
551:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
552:       assertEquals(50, Node.FREE_CALL);
553:       assertEquals(55, Node.INFERRED_FUNCTION);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(39, Node.EMPTY_BLOCK);
556:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
557:       assertEquals(53, Node.INPUT_ID);
558:       assertEquals(43, Node.IS_CONSTANT_NAME);
559:       assertEquals(54, Node.SLASH_V);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(40, Node.ORIGINALNAME_PROP);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertEquals(2, Node.POST_FLAG);
564:       assertEquals(56, Node.CHANGE_TIME);
565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(12, Node.COLUMN_BITS);
569:       assertEquals(29, Node.JSDOC_INFO_PROP);
570:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
571:       assertEquals(57, Node.LAST_PROP);
572:       assertEquals(1, Node.DECR_FLAG);
573:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
574:       assertEquals(15, Node.NO_SIDE_EFFECTS);
575:       assertEquals(52, Node.LENGTH);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(49, Node.DIRECT_EVAL);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertNotNull(iterable1);
586:       assertFalse(iterable1.equals((Object)iterable0));
587:       assertFalse(iterable1.contains(node0));
588:       assertFalse(node0.isComma());
589:       assertFalse(node0.isGetProp());
590:       assertFalse(node0.isBreak());
591:       assertFalse(node0.isThis());
592:       assertFalse(node0.isInstanceOf());
593:       assertFalse(node0.isThrow());
594:       assertFalse(node0.isHook());
595:       assertFalse(node0.isFalse());
596:       assertFalse(node0.isWith());
597:       assertFalse(node0.isScript());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.isAnd());
601:       assertFalse(node0.isSwitch());
602:       assertFalse(node0.hasOneChild());
603:       assertFalse(node0.isNot());
604:       assertFalse(node0.isString());
605:       assertFalse(node0.isObjectLit());
606:       assertFalse(node0.isNE());
607:       assertEquals((-1), node0.getSourcePosition());
608:       assertFalse(node0.isFor());
609:       assertEquals((-1), node0.getLineno());
610:       assertFalse(node0.isIf());
611:       assertFalse(node0.isCast());
612:       assertEquals(39, node0.getType());
613:       assertFalse(node0.isContinue());
614:       assertFalse(node0.hasMoreThanOneChild());
615:       assertFalse(node0.isFunction());
616:       assertFalse(node0.isInc());
617:       assertFalse(node0.isIn());
618:       assertFalse(node0.isParamList());
619:       assertFalse(node0.isNull());
620:       assertFalse(node0.isSetterDef());
621:       assertFalse(node0.isStringKey());
622:       assertFalse(node0.isName());
623:       assertFalse(node0.isVar());
624:       assertFalse(node0.isCatch());
625:       assertFalse(node0.isCall());
626:       assertEquals(0, node0.getChildCount());
627:       assertFalse(node0.isRegExp());
628:       assertFalse(node0.isDebugger());
629:       assertFalse(node0.isBlock());
630:       assertFalse(node0.isTry());
631:       assertFalse(node0.isWhile());
632:       assertFalse(node0.isGetterDef());
633:       assertFalse(node0.isDec());
634:       assertFalse(node0.hasChildren());
635:       assertFalse(node0.isAssignAdd());
636:       assertFalse(node0.isLabelName());
637:       assertTrue(node0.isNumber());
638:       assertFalse(node0.isDelProp());
639:       assertFalse(node0.isArrayLit());
640:       assertFalse(node0.isGetElem());
641:       assertFalse(node0.isReturn());
642:       assertFalse(node0.isLabel());
643:       assertFalse(node0.isAssign());
644:       assertFalse(node0.isTypeOf());
645:       assertFalse(node0.isTrue());
646:       assertFalse(node0.isExprResult());
647:       assertFalse(node0.isDo());
648:       assertFalse(node0.isNew());
649:       assertFalse(node0.isVoid());
650:       assertFalse(node0.isDefaultCase());
651:       assertFalse(node0.isOr());
652:       assertFalse(node0.isAdd());
653:       assertFalse(node0.isEmpty());
654:       
655:       InputId inputId0 = node0.getInputId();
656:       assertEquals(48, Node.DIRECTIVES);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
659:       assertEquals(50, Node.FREE_CALL);
660:       assertEquals(55, Node.INFERRED_FUNCTION);
661:       assertEquals(8, Node.FLAG_NO_THROWS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
664:       assertEquals(53, Node.INPUT_ID);
665:       assertEquals(43, Node.IS_CONSTANT_NAME);
666:       assertEquals(54, Node.SLASH_V);
667:       assertEquals(30, Node.VAR_ARGS_NAME);
668:       assertEquals(40, Node.ORIGINALNAME_PROP);
669:       assertEquals(32, Node.INCRDECR_PROP);
670:       assertEquals(2, Node.POST_FLAG);
671:       assertEquals(56, Node.CHANGE_TIME);
672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
673:       assertEquals(46, Node.IS_NAMESPACE);
674:       assertEquals(47, Node.IS_DISPATCHER);
675:       assertEquals(12, Node.COLUMN_BITS);
676:       assertEquals(29, Node.JSDOC_INFO_PROP);
677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
678:       assertEquals(57, Node.LAST_PROP);
679:       assertEquals(1, Node.DECR_FLAG);
680:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
681:       assertEquals(15, Node.NO_SIDE_EFFECTS);
682:       assertEquals(52, Node.LENGTH);
683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
684:       assertEquals(36, Node.QUOTED_PROP);
685:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
686:       assertEquals(57, Node.REFLECTED_OBJECT);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
692:       assertNull(inputId0);
693:       assertFalse(node0.isComma());
694:       assertFalse(node0.isGetProp());
695:       assertFalse(node0.isBreak());
696:       assertFalse(node0.isThis());
697:       assertFalse(node0.isInstanceOf());
698:       assertFalse(node0.isThrow());
699:       assertFalse(node0.isHook());
700:       assertFalse(node0.isFalse());
701:       assertFalse(node0.isWith());
702:       assertFalse(node0.isScript());
703:       assertEquals((-1), node0.getCharno());
704:       assertFalse(node0.isCase());
705:       assertFalse(node0.isAnd());
706:       assertFalse(node0.isSwitch());
707:       assertFalse(node0.hasOneChild());
708:       assertFalse(node0.isNot());
709:       assertFalse(node0.isString());
710:       assertFalse(node0.isObjectLit());
711:       assertFalse(node0.isNE());
712:       assertEquals((-1), node0.getSourcePosition());
713:       assertFalse(node0.isFor());
714:       assertEquals((-1), node0.getLineno());
715:       assertFalse(node0.isIf());
716:       assertFalse(node0.isCast());
717:       assertEquals(39, node0.getType());
718:       assertFalse(node0.isContinue());
719:       assertFalse(node0.hasMoreThanOneChild());
720:       assertFalse(node0.isFunction());
721:       assertFalse(node0.isInc());
722:       assertFalse(node0.isIn());
723:       assertFalse(node0.isParamList());
724:       assertFalse(node0.isNull());
725:       assertFalse(node0.isSetterDef());
726:       assertFalse(node0.isStringKey());
727:       assertFalse(node0.isName());
728:       assertFalse(node0.isVar());
729:       assertFalse(node0.isCatch());
730:       assertFalse(node0.isCall());
731:       assertEquals(0, node0.getChildCount());
732:       assertFalse(node0.isRegExp());
733:       assertFalse(node0.isDebugger());
734:       assertFalse(node0.isBlock());
735:       assertFalse(node0.isTry());
736:       assertFalse(node0.isWhile());
737:       assertFalse(node0.isGetterDef());
738:       assertFalse(node0.isDec());
739:       assertFalse(node0.hasChildren());
740:       assertFalse(node0.isAssignAdd());
741:       assertFalse(node0.isLabelName());
742:       assertTrue(node0.isNumber());
743:       assertFalse(node0.isDelProp());
744:       assertFalse(node0.isArrayLit());
745:       assertFalse(node0.isGetElem());
746:       assertFalse(node0.isReturn());
747:       assertFalse(node0.isLabel());
748:       assertFalse(node0.isAssign());
749:       assertFalse(node0.isTypeOf());
750:       assertFalse(node0.isTrue());
751:       assertFalse(node0.isExprResult());
752:       assertFalse(node0.isDo());
753:       assertFalse(node0.isNew());
754:       assertFalse(node0.isVoid());
755:       assertFalse(node0.isDefaultCase());
756:       assertFalse(node0.isOr());
757:       assertFalse(node0.isAdd());
758:       assertFalse(node0.isEmpty());
759:       
760:       boolean boolean2 = node0.mayMutateGlobalStateOrThrow();
761:       assertEquals(48, Node.DIRECTIVES);
762:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
763:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
764:       assertEquals(50, Node.FREE_CALL);
765:       assertEquals(55, Node.INFERRED_FUNCTION);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(39, Node.EMPTY_BLOCK);
768:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
769:       assertEquals(53, Node.INPUT_ID);
770:       assertEquals(43, Node.IS_CONSTANT_NAME);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(40, Node.ORIGINALNAME_PROP);
774:       assertEquals(32, Node.INCRDECR_PROP);
775:       assertEquals(2, Node.POST_FLAG);
776:       assertEquals(56, Node.CHANGE_TIME);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(46, Node.IS_NAMESPACE);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(12, Node.COLUMN_BITS);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
783:       assertEquals(57, Node.LAST_PROP);
784:       assertEquals(1, Node.DECR_FLAG);
785:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
789:       assertEquals(36, Node.QUOTED_PROP);
790:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(49, Node.DIRECT_EVAL);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
795:       assertEquals(4095, Node.COLUMN_MASK);
796:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
797:       assertFalse(boolean2 == boolean0);
798:       assertFalse(boolean2 == boolean1);
799:       assertTrue(boolean2);
800:       assertFalse(node0.isComma());
801:       assertFalse(node0.isGetProp());
802:       assertFalse(node0.isBreak());
803:       assertFalse(node0.isThis());
804:       assertFalse(node0.isInstanceOf());
805:       assertFalse(node0.isThrow());
806:       assertFalse(node0.isHook());
807:       assertFalse(node0.isFalse());
808:       assertFalse(node0.isWith());
809:       assertFalse(node0.isScript());
810:       assertEquals((-1), node0.getCharno());
811:       assertFalse(node0.isCase());
812:       assertFalse(node0.isAnd());
813:       assertFalse(node0.isSwitch());
814:       assertFalse(node0.hasOneChild());
815:       assertFalse(node0.isNot());
816:       assertFalse(node0.isString());
817:       assertFalse(node0.isObjectLit());
818:       assertFalse(node0.isNE());
819:       assertEquals((-1), node0.getSourcePosition());
820:       assertFalse(node0.isFor());
821:       assertEquals((-1), node0.getLineno());
822:       assertFalse(node0.isIf());
823:       assertFalse(node0.isCast());
824:       assertEquals(39, node0.getType());
825:       assertFalse(node0.isContinue());
826:       assertFalse(node0.hasMoreThanOneChild());
827:       assertFalse(node0.isFunction());
828:       assertFalse(node0.isInc());
829:       assertFalse(node0.isIn());
830:       assertFalse(node0.isParamList());
831:       assertFalse(node0.isNull());
832:       assertFalse(node0.isSetterDef());
833:       assertFalse(node0.isStringKey());
834:       assertFalse(node0.isName());
835:       assertFalse(node0.isVar());
836:       assertFalse(node0.isCatch());
837:       assertFalse(node0.isCall());
838:       assertEquals(0, node0.getChildCount());
839:       assertFalse(node0.isRegExp());
840:       assertFalse(node0.isDebugger());
841:       assertFalse(node0.isBlock());
842:       assertFalse(node0.isTry());
843:       assertFalse(node0.isWhile());
844:       assertFalse(node0.isGetterDef());
845:       assertFalse(node0.isDec());
846:       assertFalse(node0.hasChildren());
847:       assertFalse(node0.isAssignAdd());
848:       assertFalse(node0.isLabelName());
849:       assertTrue(node0.isNumber());
850:       assertFalse(node0.isDelProp());
851:       assertFalse(node0.isArrayLit());
852:       assertFalse(node0.isGetElem());
853:       assertFalse(node0.isReturn());
854:       assertFalse(node0.isLabel());
855:       assertFalse(node0.isAssign());
856:       assertFalse(node0.isTypeOf());
857:       assertFalse(node0.isTrue());
858:       assertFalse(node0.isExprResult());
859:       assertFalse(node0.isDo());
860:       assertFalse(node0.isNew());
861:       assertFalse(node0.isVoid());
862:       assertFalse(node0.isDefaultCase());
863:       assertFalse(node0.isOr());
864:       assertFalse(node0.isAdd());
865:       assertFalse(node0.isEmpty());
866:       
867:       boolean boolean3 = node0.isOr();
868:       assertEquals(48, Node.DIRECTIVES);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
871:       assertEquals(50, Node.FREE_CALL);
872:       assertEquals(55, Node.INFERRED_FUNCTION);
873:       assertEquals(8, Node.FLAG_NO_THROWS);
874:       assertEquals(39, Node.EMPTY_BLOCK);
875:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
876:       assertEquals(53, Node.INPUT_ID);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       assertEquals(54, Node.SLASH_V);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(40, Node.ORIGINALNAME_PROP);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(51, Node.STATIC_SOURCE_FILE);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(12, Node.COLUMN_BITS);
888:       assertEquals(29, Node.JSDOC_INFO_PROP);
889:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
890:       assertEquals(57, Node.LAST_PROP);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(52, Node.LENGTH);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(36, Node.QUOTED_PROP);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(57, Node.REFLECTED_OBJECT);
899:       assertEquals(49, Node.DIRECT_EVAL);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
902:       assertEquals(4095, Node.COLUMN_MASK);
903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
904:       assertTrue(boolean3 == boolean0);
905:       assertTrue(boolean3 == boolean1);
906:       assertFalse(boolean3 == boolean2);
907:       assertFalse(boolean3);
908:       assertFalse(node0.isComma());
909:       assertFalse(node0.isGetProp());
910:       assertFalse(node0.isBreak());
911:       assertFalse(node0.isThis());
912:       assertFalse(node0.isInstanceOf());
913:       assertFalse(node0.isThrow());
914:       assertFalse(node0.isHook());
915:       assertFalse(node0.isFalse());
916:       assertFalse(node0.isWith());
917:       assertFalse(node0.isScript());
918:       assertEquals((-1), node0.getCharno());
919:       assertFalse(node0.isCase());
920:       assertFalse(node0.isAnd());
921:       assertFalse(node0.isSwitch());
922:       assertFalse(node0.hasOneChild());
923:       assertFalse(node0.isNot());
924:       assertFalse(node0.isString());
925:       assertFalse(node0.isObjectLit());
926:       assertFalse(node0.isNE());
927:       assertEquals((-1), node0.getSourcePosition());
928:       assertFalse(node0.isFor());
929:       assertEquals((-1), node0.getLineno());
930:       assertFalse(node0.isIf());
931:       assertFalse(node0.isCast());
932:       assertEquals(39, node0.getType());
933:       assertFalse(node0.isContinue());
934:       assertFalse(node0.hasMoreThanOneChild());
935:       assertFalse(node0.isFunction());
936:       assertFalse(node0.isInc());
937:       assertFalse(node0.isIn());
938:       assertFalse(node0.isParamList());
939:       assertFalse(node0.isNull());
940:       assertFalse(node0.isSetterDef());
941:       assertFalse(node0.isStringKey());
942:       assertFalse(node0.isName());
943:       assertFalse(node0.isVar());
944:       assertFalse(node0.isCatch());
945:       assertFalse(node0.isCall());
946:       assertEquals(0, node0.getChildCount());
947:       assertFalse(node0.isRegExp());
948:       assertFalse(node0.isDebugger());
949:       assertFalse(node0.isBlock());
950:       assertFalse(node0.isTry());
951:       assertFalse(node0.isWhile());
952:       assertFalse(node0.isGetterDef());
953:       assertFalse(node0.isDec());
954:       assertFalse(node0.hasChildren());
955:       assertFalse(node0.isAssignAdd());
956:       assertFalse(node0.isLabelName());
957:       assertTrue(node0.isNumber());
958:       assertFalse(node0.isDelProp());
959:       assertFalse(node0.isArrayLit());
960:       assertFalse(node0.isGetElem());
961:       assertFalse(node0.isReturn());
962:       assertFalse(node0.isLabel());
963:       assertFalse(node0.isAssign());
964:       assertFalse(node0.isTypeOf());
965:       assertFalse(node0.isTrue());
966:       assertFalse(node0.isExprResult());
967:       assertFalse(node0.isDo());
968:       assertFalse(node0.isNew());
969:       assertFalse(node0.isVoid());
970:       assertFalse(node0.isDefaultCase());
971:       assertFalse(node0.isOr());
972:       assertFalse(node0.isAdd());
973:       assertFalse(node0.isEmpty());
974:       
975:       JSType jSType0 = node0.getJSType();
976:       assertEquals(48, Node.DIRECTIVES);
977:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
978:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
979:       assertEquals(50, Node.FREE_CALL);
980:       assertEquals(55, Node.INFERRED_FUNCTION);
981:       assertEquals(8, Node.FLAG_NO_THROWS);
982:       assertEquals(39, Node.EMPTY_BLOCK);
983:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
984:       assertEquals(53, Node.INPUT_ID);
985:       assertEquals(43, Node.IS_CONSTANT_NAME);
986:       assertEquals(54, Node.SLASH_V);
987:       assertEquals(30, Node.VAR_ARGS_NAME);
988:       assertEquals(40, Node.ORIGINALNAME_PROP);
989:       assertEquals(32, Node.INCRDECR_PROP);
990:       assertEquals(2, Node.POST_FLAG);
991:       assertEquals(56, Node.CHANGE_TIME);
992:       assertEquals(51, Node.STATIC_SOURCE_FILE);
993:       assertEquals(46, Node.IS_NAMESPACE);
994:       assertEquals(47, Node.IS_DISPATCHER);
995:       assertEquals(12, Node.COLUMN_BITS);
996:       assertEquals(29, Node.JSDOC_INFO_PROP);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(57, Node.LAST_PROP);
999:       assertEquals(1, Node.DECR_FLAG);
1000:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1002:       assertEquals(52, Node.LENGTH);
1003:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1006:       assertEquals(57, Node.REFLECTED_OBJECT);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(37, Node.OPT_ARG_NAME);
1009:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1010:       assertEquals(4095, Node.COLUMN_MASK);
1011:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1012:       assertNull(jSType0);
1013:       assertFalse(node0.isComma());
1014:       assertFalse(node0.isGetProp());
1015:       assertFalse(node0.isBreak());
1016:       assertFalse(node0.isThis());
1017:       assertFalse(node0.isInstanceOf());
1018:       assertFalse(node0.isThrow());
1019:       assertFalse(node0.isHook());
1020:       assertFalse(node0.isFalse());
1021:       assertFalse(node0.isWith());
1022:       assertFalse(node0.isScript());
1023:       assertEquals((-1), node0.getCharno());
1024:       assertFalse(node0.isCase());
1025:       assertFalse(node0.isAnd());
1026:       assertFalse(node0.isSwitch());
1027:       assertFalse(node0.hasOneChild());
1028:       assertFalse(node0.isNot());
1029:       assertFalse(node0.isString());
1030:       assertFalse(node0.isObjectLit());
1031:       assertFalse(node0.isNE());
1032:       assertEquals((-1), node0.getSourcePosition());
1033:       assertFalse(node0.isFor());
1034:       assertEquals((-1), node0.getLineno());
1035:       assertFalse(node0.isIf());
1036:       assertFalse(node0.isCast());
1037:       assertEquals(39, node0.getType());
1038:       assertFalse(node0.isContinue());
1039:       assertFalse(node0.hasMoreThanOneChild());
1040:       assertFalse(node0.isFunction());
1041:       assertFalse(node0.isInc());
1042:       assertFalse(node0.isIn());
1043:       assertFalse(node0.isParamList());
1044:       assertFalse(node0.isNull());
1045:       assertFalse(node0.isSetterDef());
1046:       assertFalse(node0.isStringKey());
1047:       assertFalse(node0.isName());
1048:       assertFalse(node0.isVar());
1049:       assertFalse(node0.isCatch());
1050:       assertFalse(node0.isCall());
1051:       assertEquals(0, node0.getChildCount());
1052:       assertFalse(node0.isRegExp());
1053:       assertFalse(node0.isDebugger());
1054:       assertFalse(node0.isBlock());
1055:       assertFalse(node0.isTry());
1056:       assertFalse(node0.isWhile());
1057:       assertFalse(node0.isGetterDef());
1058:       assertFalse(node0.isDec());
1059:       assertFalse(node0.hasChildren());
1060:       assertFalse(node0.isAssignAdd());
1061:       assertFalse(node0.isLabelName());
1062:       assertTrue(node0.isNumber());
1063:       assertFalse(node0.isDelProp());
1064:       assertFalse(node0.isArrayLit());
1065:       assertFalse(node0.isGetElem());
1066:       assertFalse(node0.isReturn());
1067:       assertFalse(node0.isLabel());
1068:       assertFalse(node0.isAssign());
1069:       assertFalse(node0.isTypeOf());
1070:       assertFalse(node0.isTrue());
1071:       assertFalse(node0.isExprResult());
1072:       assertFalse(node0.isDo());
1073:       assertFalse(node0.isNew());
1074:       assertFalse(node0.isVoid());
1075:       assertFalse(node0.isDefaultCase());
1076:       assertFalse(node0.isOr());
1077:       assertFalse(node0.isAdd());
1078:       assertFalse(node0.isEmpty());
1079:       
1080:       Node[] nodeArray0 = new Node[2];
1081:       nodeArray0[0] = node0;
1082:       nodeArray0[1] = node0;
1083:       Node node1 = null;
1084:       try {
1085:         node1 = new Node(43, nodeArray0);
1086:         fail("Expecting exception: IllegalArgumentException");
1087:       
1088:       } catch(IllegalArgumentException e) {
1089:          //
1090:          // no message in exception (getMessage() returned null)
1091:          //
1092:          verifyException("com.google.common.base.Preconditions", e);
1093:       }
1094:   }
1095: }
RegularFileObject[/tmp/EvoSuite_430_1628160208235/com/google/javascript/rhino/Node_430_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:28 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_430_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_430_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_430_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:28.357 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-2313.34), (-2019), (-2019));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

node0.setSourceFileForTesting("|");
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

Iterable<Node> iterable0 = node0.siblings();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

boolean boolean0 = node0.isUnscopedQualifiedName();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

boolean boolean1 = node0.isBlock();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

Iterable<Node> iterable1 = node0.children();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable1);
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(iterable1.contains(node0));
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

InputId inputId0 = node0.getInputId();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNull(inputId0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

boolean boolean2 = node0.mayMutateGlobalStateOrThrow();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

boolean boolean3 = node0.isOr();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertFalse(boolean3);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

JSType jSType0 = node0.getJSType();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNull(jSType0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());

Node[] nodeArray0 = new Node[2];
nodeArray0[0] = node0;
nodeArray0[1] = node0;
Node node1 = new Node(43, nodeArray0);

[MASTER] 10:43:33.341 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_473_1628160213286/com/google/javascript/rhino/Node_473_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_473_1628160213286/com/google/javascript/rhino/Node_473_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:33.341 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:33.341 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:33.342 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 378
[MASTER] 10:43:33.342 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_473_1628160213286/com/google/javascript/rhino/Node_473_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_473_tmp__ESTest extends Node_473_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node((-1761), 558, 132);
21:       assertEquals(4095, Node.COLUMN_MASK);
22:       assertEquals(55, Node.INFERRED_FUNCTION);
23:       assertEquals(48, Node.DIRECTIVES);
24:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(43, Node.IS_CONSTANT_NAME);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(54, Node.SLASH_V);
33:       assertEquals(12, Node.COLUMN_BITS);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(32, Node.INCRDECR_PROP);
36:       assertEquals(49, Node.DIRECT_EVAL);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(37, Node.OPT_ARG_NAME);
39:       assertEquals(15, Node.NO_SIDE_EFFECTS);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(47, Node.IS_DISPATCHER);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
47:       assertEquals(52, Node.LENGTH);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertNotNull(node0);
58:       assertFalse(node0.isSetterDef());
59:       assertEquals(0, node0.getChildCount());
60:       assertFalse(node0.isCatch());
61:       assertFalse(node0.isName());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isBlock());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isDebugger());
70:       assertEquals((-1761), node0.getType());
71:       assertFalse(node0.isRegExp());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isWhile());
74:       assertEquals(558, node0.getLineno());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isReturn());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isGetterDef());
81:       assertFalse(node0.isNumber());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isLabelName());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isDelProp());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isNew());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isTrue());
90:       assertFalse(node0.isDo());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.isVar());
93:       assertFalse(node0.isAssignAdd());
94:       assertFalse(node0.isDefaultCase());
95:       assertFalse(node0.isComma());
96:       assertFalse(node0.isThis());
97:       assertFalse(node0.isGetProp());
98:       assertFalse(node0.isInstanceOf());
99:       assertFalse(node0.isObjectLit());
100:       assertEquals(2285700, node0.getSourcePosition());
101:       assertFalse(node0.isNot());
102:       assertFalse(node0.isBreak());
103:       assertFalse(node0.isAnd());
104:       assertEquals(132, node0.getCharno());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isHook());
107:       assertFalse(node0.isScript());
108:       assertFalse(node0.isString());
109:       assertFalse(node0.isWith());
110:       assertFalse(node0.isCase());
111:       assertFalse(node0.isAssign());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.hasOneChild());
114:       assertFalse(node0.isContinue());
115:       assertFalse(node0.hasMoreThanOneChild());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isNE());
118:       assertFalse(node0.isIf());
119:       assertFalse(node0.isInc());
120:       assertFalse(node0.isCast());
121:       assertFalse(node0.isFunction());
122:       assertFalse(node0.isFalse());
123:       assertFalse(node0.isThrow());
124:       
125:       Node node1 = new Node(37);
126:       assertEquals(54, Node.SLASH_V);
127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(57, Node.LAST_PROP);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(1, Node.DECR_FLAG);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(39, Node.EMPTY_BLOCK);
139:       assertEquals(2, Node.POST_FLAG);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(40, Node.ORIGINALNAME_PROP);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(36, Node.QUOTED_PROP);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(43, Node.IS_CONSTANT_NAME);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(29, Node.JSDOC_INFO_PROP);
151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(8, Node.FLAG_NO_THROWS);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(32, Node.INCRDECR_PROP);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertNotNull(node1);
163:       assertFalse(node1.equals((Object)node0));
164:       assertFalse(node1.isString());
165:       assertFalse(node1.isSwitch());
166:       assertFalse(node1.isInc());
167:       assertFalse(node1.isCase());
168:       assertEquals(37, node1.getType());
169:       assertFalse(node1.isHook());
170:       assertFalse(node1.isGetterDef());
171:       assertFalse(node1.isFor());
172:       assertFalse(node1.isFalse());
173:       assertFalse(node1.isGetProp());
174:       assertFalse(node1.isArrayLit());
175:       assertFalse(node1.isObjectLit());
176:       assertFalse(node1.isDebugger());
177:       assertEquals((-1), node1.getCharno());
178:       assertFalse(node1.isWith());
179:       assertFalse(node1.isAnd());
180:       assertFalse(node1.isCatch());
181:       assertFalse(node1.isScript());
182:       assertFalse(node1.isTry());
183:       assertFalse(node1.isInstanceOf());
184:       assertFalse(node1.isThis());
185:       assertFalse(node1.isFunction());
186:       assertFalse(node1.isRegExp());
187:       assertFalse(node1.isIf());
188:       assertFalse(node1.isThrow());
189:       assertTrue(node1.isCall());
190:       assertFalse(node1.isSetterDef());
191:       assertEquals((-1), node1.getLineno());
192:       assertFalse(node1.isIn());
193:       assertFalse(node1.isNE());
194:       assertFalse(node1.isDo());
195:       assertFalse(node1.isContinue());
196:       assertFalse(node1.isWhile());
197:       assertFalse(node1.isNew());
198:       assertFalse(node1.isAssignAdd());
199:       assertFalse(node1.isReturn());
200:       assertFalse(node1.isBlock());
201:       assertFalse(node1.hasMoreThanOneChild());
202:       assertFalse(node1.isVar());
203:       assertFalse(node1.isTypeOf());
204:       assertFalse(node1.isDec());
205:       assertFalse(node1.hasChildren());
206:       assertFalse(node1.isLabel());
207:       assertFalse(node1.isLabelName());
208:       assertFalse(node1.isNumber());
209:       assertFalse(node1.isStringKey());
210:       assertFalse(node1.isCast());
211:       assertFalse(node1.hasOneChild());
212:       assertFalse(node1.isParamList());
213:       assertEquals((-1), node1.getSourcePosition());
214:       assertFalse(node1.isNot());
215:       assertFalse(node1.isDefaultCase());
216:       assertFalse(node1.isVoid());
217:       assertFalse(node1.isExprResult());
218:       assertFalse(node1.isComma());
219:       assertEquals(0, node1.getChildCount());
220:       assertFalse(node1.isAssign());
221:       assertFalse(node1.isName());
222:       assertFalse(node1.isDelProp());
223:       assertFalse(node1.isEmpty());
224:       assertFalse(node1.isGetElem());
225:       assertFalse(node1.isBreak());
226:       assertFalse(node1.isOr());
227:       assertFalse(node1.isAdd());
228:       assertFalse(node1.isNull());
229:       assertFalse(node1.isTrue());
230:       
231:       boolean boolean0 = node1.isCall();
232:       assertEquals(54, Node.SLASH_V);
233:       assertEquals(15, Node.NO_SIDE_EFFECTS);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(57, Node.LAST_PROP);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(57, Node.REFLECTED_OBJECT);
240:       assertEquals(52, Node.LENGTH);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(53, Node.INPUT_ID);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
258:       assertEquals(37, Node.OPT_ARG_NAME);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(12, Node.COLUMN_BITS);
265:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertFalse(node1.equals((Object)node0));
269:       assertNotSame(node1, node0);
270:       assertTrue(boolean0);
271:       assertFalse(node1.isString());
272:       assertFalse(node1.isSwitch());
273:       assertFalse(node1.isInc());
274:       assertFalse(node1.isCase());
275:       assertEquals(37, node1.getType());
276:       assertFalse(node1.isHook());
277:       assertFalse(node1.isGetterDef());
278:       assertFalse(node1.isFor());
279:       assertFalse(node1.isFalse());
280:       assertFalse(node1.isGetProp());
281:       assertFalse(node1.isArrayLit());
282:       assertFalse(node1.isObjectLit());
283:       assertFalse(node1.isDebugger());
284:       assertEquals((-1), node1.getCharno());
285:       assertFalse(node1.isWith());
286:       assertFalse(node1.isAnd());
287:       assertFalse(node1.isCatch());
288:       assertFalse(node1.isScript());
289:       assertFalse(node1.isTry());
290:       assertFalse(node1.isInstanceOf());
291:       assertFalse(node1.isThis());
292:       assertFalse(node1.isFunction());
293:       assertFalse(node1.isRegExp());
294:       assertFalse(node1.isIf());
295:       assertFalse(node1.isThrow());
296:       assertTrue(node1.isCall());
297:       assertFalse(node1.isSetterDef());
298:       assertEquals((-1), node1.getLineno());
299:       assertFalse(node1.isIn());
300:       assertFalse(node1.isNE());
301:       assertFalse(node1.isDo());
302:       assertFalse(node1.isContinue());
303:       assertFalse(node1.isWhile());
304:       assertFalse(node1.isNew());
305:       assertFalse(node1.isAssignAdd());
306:       assertFalse(node1.isReturn());
307:       assertFalse(node1.isBlock());
308:       assertFalse(node1.hasMoreThanOneChild());
309:       assertFalse(node1.isVar());
310:       assertFalse(node1.isTypeOf());
311:       assertFalse(node1.isDec());
312:       assertFalse(node1.hasChildren());
313:       assertFalse(node1.isLabel());
314:       assertFalse(node1.isLabelName());
315:       assertFalse(node1.isNumber());
316:       assertFalse(node1.isStringKey());
317:       assertFalse(node1.isCast());
318:       assertFalse(node1.hasOneChild());
319:       assertFalse(node1.isParamList());
320:       assertEquals((-1), node1.getSourcePosition());
321:       assertFalse(node1.isNot());
322:       assertFalse(node1.isDefaultCase());
323:       assertFalse(node1.isVoid());
324:       assertFalse(node1.isExprResult());
325:       assertFalse(node1.isComma());
326:       assertEquals(0, node1.getChildCount());
327:       assertFalse(node1.isAssign());
328:       assertFalse(node1.isName());
329:       assertFalse(node1.isDelProp());
330:       assertFalse(node1.isEmpty());
331:       assertFalse(node1.isGetElem());
332:       assertFalse(node1.isBreak());
333:       assertFalse(node1.isOr());
334:       assertFalse(node1.isAdd());
335:       assertFalse(node1.isNull());
336:       assertFalse(node1.isTrue());
337:       
338:       Iterable<Node> iterable0 = node1.children();
339:       assertEquals(54, Node.SLASH_V);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
342:       assertEquals(49, Node.DIRECT_EVAL);
343:       assertEquals(57, Node.LAST_PROP);
344:       assertEquals(51, Node.STATIC_SOURCE_FILE);
345:       assertEquals(1, Node.DECR_FLAG);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(47, Node.IS_DISPATCHER);
354:       assertEquals(46, Node.IS_NAMESPACE);
355:       assertEquals(40, Node.ORIGINALNAME_PROP);
356:       assertEquals(30, Node.VAR_ARGS_NAME);
357:       assertEquals(36, Node.QUOTED_PROP);
358:       assertEquals(53, Node.INPUT_ID);
359:       assertEquals(43, Node.IS_CONSTANT_NAME);
360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(8, Node.FLAG_NO_THROWS);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
374:       assertEquals(4095, Node.COLUMN_MASK);
375:       assertNotNull(iterable0);
376:       assertFalse(node1.equals((Object)node0));
377:       assertNotSame(node1, node0);
378:       assertFalse(iterable0.contains(node0));
379:       assertFalse(node1.isString());
380:       assertFalse(node1.isSwitch());
381:       assertFalse(node1.isInc());
382:       assertFalse(node1.isCase());
383:       assertEquals(37, node1.getType());
384:       assertFalse(node1.isHook());
385:       assertFalse(node1.isGetterDef());
386:       assertFalse(node1.isFor());
387:       assertFalse(node1.isFalse());
388:       assertFalse(node1.isGetProp());
389:       assertFalse(node1.isArrayLit());
390:       assertFalse(node1.isObjectLit());
391:       assertFalse(node1.isDebugger());
392:       assertEquals((-1), node1.getCharno());
393:       assertFalse(node1.isWith());
394:       assertFalse(node1.isAnd());
395:       assertFalse(node1.isCatch());
396:       assertFalse(node1.isScript());
397:       assertFalse(node1.isTry());
398:       assertFalse(node1.isInstanceOf());
399:       assertFalse(node1.isThis());
400:       assertFalse(node1.isFunction());
401:       assertFalse(node1.isRegExp());
402:       assertFalse(node1.isIf());
403:       assertFalse(node1.isThrow());
404:       assertTrue(node1.isCall());
405:       assertFalse(node1.isSetterDef());
406:       assertEquals((-1), node1.getLineno());
407:       assertFalse(node1.isIn());
408:       assertFalse(node1.isNE());
409:       assertFalse(node1.isDo());
410:       assertFalse(node1.isContinue());
411:       assertFalse(node1.isWhile());
412:       assertFalse(node1.isNew());
413:       assertFalse(node1.isAssignAdd());
414:       assertFalse(node1.isReturn());
415:       assertFalse(node1.isBlock());
416:       assertFalse(node1.hasMoreThanOneChild());
417:       assertFalse(node1.isVar());
418:       assertFalse(node1.isTypeOf());
419:       assertFalse(node1.isDec());
420:       assertFalse(node1.hasChildren());
421:       assertFalse(node1.isLabel());
422:       assertFalse(node1.isLabelName());
423:       assertFalse(node1.isNumber());
424:       assertFalse(node1.isStringKey());
425:       assertFalse(node1.isCast());
426:       assertFalse(node1.hasOneChild());
427:       assertFalse(node1.isParamList());
428:       assertEquals((-1), node1.getSourcePosition());
429:       assertFalse(node1.isNot());
430:       assertFalse(node1.isDefaultCase());
431:       assertFalse(node1.isVoid());
432:       assertFalse(node1.isExprResult());
433:       assertFalse(node1.isComma());
434:       assertEquals(0, node1.getChildCount());
435:       assertFalse(node1.isAssign());
436:       assertFalse(node1.isName());
437:       assertFalse(node1.isDelProp());
438:       assertFalse(node1.isEmpty());
439:       assertFalse(node1.isGetElem());
440:       assertFalse(node1.isBreak());
441:       assertFalse(node1.isOr());
442:       assertFalse(node1.isAdd());
443:       assertFalse(node1.isNull());
444:       assertFalse(node1.isTrue());
445:       
446:       node1.addChildrenToBack(node0);
447:       assertEquals(4095, Node.COLUMN_MASK);
448:       assertEquals(55, Node.INFERRED_FUNCTION);
449:       assertEquals(48, Node.DIRECTIVES);
450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
453:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(43, Node.IS_CONSTANT_NAME);
456:       assertEquals(50, Node.FREE_CALL);
457:       assertEquals(46, Node.IS_NAMESPACE);
458:       assertEquals(54, Node.SLASH_V);
459:       assertEquals(12, Node.COLUMN_BITS);
460:       assertEquals(51, Node.STATIC_SOURCE_FILE);
461:       assertEquals(32, Node.INCRDECR_PROP);
462:       assertEquals(49, Node.DIRECT_EVAL);
463:       assertEquals(1, Node.DECR_FLAG);
464:       assertEquals(37, Node.OPT_ARG_NAME);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(2, Node.POST_FLAG);
467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
468:       assertEquals(57, Node.LAST_PROP);
469:       assertEquals(30, Node.VAR_ARGS_NAME);
470:       assertEquals(47, Node.IS_DISPATCHER);
471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
475:       assertEquals(29, Node.JSDOC_INFO_PROP);
476:       assertEquals(53, Node.INPUT_ID);
477:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
478:       assertEquals(36, Node.QUOTED_PROP);
479:       assertEquals(56, Node.CHANGE_TIME);
480:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
481:       assertEquals(8, Node.FLAG_NO_THROWS);
482:       assertEquals(57, Node.REFLECTED_OBJECT);
483:       assertEquals(54, Node.SLASH_V);
484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
486:       assertEquals(49, Node.DIRECT_EVAL);
487:       assertEquals(57, Node.LAST_PROP);
488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
489:       assertEquals(1, Node.DECR_FLAG);
490:       assertEquals(57, Node.REFLECTED_OBJECT);
491:       assertEquals(52, Node.LENGTH);
492:       assertEquals(50, Node.FREE_CALL);
493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
495:       assertEquals(39, Node.EMPTY_BLOCK);
496:       assertEquals(2, Node.POST_FLAG);
497:       assertEquals(47, Node.IS_DISPATCHER);
498:       assertEquals(46, Node.IS_NAMESPACE);
499:       assertEquals(40, Node.ORIGINALNAME_PROP);
500:       assertEquals(30, Node.VAR_ARGS_NAME);
501:       assertEquals(36, Node.QUOTED_PROP);
502:       assertEquals(53, Node.INPUT_ID);
503:       assertEquals(43, Node.IS_CONSTANT_NAME);
504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
505:       assertEquals(55, Node.INFERRED_FUNCTION);
506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
507:       assertEquals(29, Node.JSDOC_INFO_PROP);
508:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
509:       assertEquals(37, Node.OPT_ARG_NAME);
510:       assertEquals(8, Node.FLAG_NO_THROWS);
511:       assertEquals(48, Node.DIRECTIVES);
512:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(56, Node.CHANGE_TIME);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertFalse(node0.equals((Object)node1));
520:       assertFalse(node1.equals((Object)node0));
521:       assertNotSame(node0, node1);
522:       assertNotSame(node1, node0);
523:       assertFalse(node0.isSetterDef());
524:       assertEquals(0, node0.getChildCount());
525:       assertFalse(node0.isCatch());
526:       assertFalse(node0.isName());
527:       assertFalse(node0.isStringKey());
528:       assertFalse(node0.isCall());
529:       assertFalse(node0.isNull());
530:       assertFalse(node0.isParamList());
531:       assertFalse(node0.isBlock());
532:       assertFalse(node0.isVoid());
533:       assertFalse(node0.isTry());
534:       assertFalse(node0.isDebugger());
535:       assertEquals((-1761), node0.getType());
536:       assertFalse(node0.isRegExp());
537:       assertFalse(node0.isFor());
538:       assertFalse(node0.isWhile());
539:       assertEquals(558, node0.getLineno());
540:       assertFalse(node0.isOr());
541:       assertFalse(node0.isReturn());
542:       assertFalse(node0.isLabel());
543:       assertFalse(node0.isTypeOf());
544:       assertFalse(node0.isDec());
545:       assertFalse(node0.isGetterDef());
546:       assertFalse(node0.isNumber());
547:       assertFalse(node0.isGetElem());
548:       assertFalse(node0.isLabelName());
549:       assertFalse(node0.isArrayLit());
550:       assertFalse(node0.isDelProp());
551:       assertFalse(node0.isSwitch());
552:       assertFalse(node0.isNew());
553:       assertFalse(node0.isAdd());
554:       assertFalse(node0.isTrue());
555:       assertFalse(node0.isDo());
556:       assertFalse(node0.isEmpty());
557:       assertFalse(node0.isVar());
558:       assertFalse(node0.isAssignAdd());
559:       assertFalse(node0.isDefaultCase());
560:       assertFalse(node0.isComma());
561:       assertFalse(node0.isThis());
562:       assertFalse(node0.isGetProp());
563:       assertFalse(node0.isInstanceOf());
564:       assertFalse(node0.isObjectLit());
565:       assertEquals(2285700, node0.getSourcePosition());
566:       assertFalse(node0.isNot());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isAnd());
569:       assertEquals(132, node0.getCharno());
570:       assertFalse(node0.isExprResult());
571:       assertFalse(node0.isHook());
572:       assertFalse(node0.isScript());
573:       assertFalse(node0.isString());
574:       assertFalse(node0.isWith());
575:       assertFalse(node0.isCase());
576:       assertFalse(node0.isAssign());
577:       assertFalse(node0.hasChildren());
578:       assertFalse(node0.hasOneChild());
579:       assertFalse(node0.isContinue());
580:       assertFalse(node0.hasMoreThanOneChild());
581:       assertFalse(node0.isIn());
582:       assertFalse(node0.isNE());
583:       assertFalse(node0.isIf());
584:       assertFalse(node0.isInc());
585:       assertFalse(node0.isCast());
586:       assertFalse(node0.isFunction());
587:       assertFalse(node0.isFalse());
588:       assertFalse(node0.isThrow());
589:       assertFalse(node1.isString());
590:       assertFalse(node1.isSwitch());
591:       assertFalse(node1.isInc());
592:       assertFalse(node1.isCase());
593:       assertTrue(node1.hasChildren());
594:       assertEquals(37, node1.getType());
595:       assertFalse(node1.isHook());
596:       assertEquals(1, node1.getChildCount());
597:       assertTrue(node1.hasOneChild());
598:       assertFalse(node1.isGetterDef());
599:       assertFalse(node1.isFor());
600:       assertFalse(node1.isFalse());
601:       assertFalse(node1.isGetProp());
602:       assertFalse(node1.isArrayLit());
603:       assertFalse(node1.isObjectLit());
604:       assertFalse(node1.isDebugger());
605:       assertEquals((-1), node1.getCharno());
606:       assertFalse(node1.isWith());
607:       assertFalse(node1.isAnd());
608:       assertFalse(node1.isCatch());
609:       assertFalse(node1.isScript());
610:       assertFalse(node1.isTry());
611:       assertFalse(node1.isInstanceOf());
612:       assertFalse(node1.isThis());
613:       assertFalse(node1.isFunction());
614:       assertFalse(node1.isRegExp());
615:       assertFalse(node1.isIf());
616:       assertFalse(node1.isThrow());
617:       assertTrue(node1.isCall());
618:       assertFalse(node1.isSetterDef());
619:       assertEquals((-1), node1.getLineno());
620:       assertFalse(node1.isIn());
621:       assertFalse(node1.isNE());
622:       assertFalse(node1.isDo());
623:       assertFalse(node1.isContinue());
624:       assertFalse(node1.isWhile());
625:       assertFalse(node1.isNew());
626:       assertFalse(node1.isAssignAdd());
627:       assertFalse(node1.isReturn());
628:       assertFalse(node1.isBlock());
629:       assertFalse(node1.hasMoreThanOneChild());
630:       assertFalse(node1.isVar());
631:       assertFalse(node1.isTypeOf());
632:       assertFalse(node1.isDec());
633:       assertFalse(node1.isLabel());
634:       assertFalse(node1.isLabelName());
635:       assertFalse(node1.isNumber());
636:       assertFalse(node1.isStringKey());
637:       assertFalse(node1.isCast());
638:       assertFalse(node1.isParamList());
639:       assertEquals((-1), node1.getSourcePosition());
640:       assertFalse(node1.isNot());
641:       assertFalse(node1.isDefaultCase());
642:       assertFalse(node1.isVoid());
643:       assertFalse(node1.isExprResult());
644:       assertFalse(node1.isComma());
645:       assertFalse(node1.isAssign());
646:       assertFalse(node1.isName());
647:       assertFalse(node1.isDelProp());
648:       assertFalse(node1.isEmpty());
649:       assertFalse(node1.isGetElem());
650:       assertFalse(node1.isBreak());
651:       assertFalse(node1.isOr());
652:       assertFalse(node1.isAdd());
653:       assertFalse(node1.isNull());
654:       assertFalse(node1.isTrue());
655:   }
656: }
RegularFileObject[/tmp/EvoSuite_473_1628160213286/com/google/javascript/rhino/Node_473_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_473_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_473_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_473_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.Platform",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.javascript.rhino.jstype.NamespaceType"
364:     );
365:   }
366: }

[MASTER] 10:43:33.353 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-1761), 558, 132);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node0);
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals((-1761), node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals(558, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertEquals(2285700, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(132, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());

Node node1 = new Node(37);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertTrue(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());

boolean boolean0 = node1.isCall();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertTrue(boolean0);
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertTrue(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());

Iterable<Node> iterable0 = node1.children();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertFalse(iterable0.contains(node0));
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertTrue(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());

node1.addChildrenToBack(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertEquals((-1761), node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals(558, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertEquals(2285700, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(132, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertTrue(node1.isCall());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/18
* Done!

* Computation finished
