/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 21:47:15 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.io.BufferedWriter;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.valueOf();
      Node node0 = Node.newString(23, "The new child node has siblings.", 0, 0);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, 111, 111);
      Node node2 = node1.removeChildren();
      // Undeclared exception!
      try { 
        node2.isQuotedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = null;
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("length", (Node) null, (JSType) null);
      enumType0.defineElement(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node0);
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(310);
      Node node1 = new Node(57, node0);
      int int0 = 55;
      node0.removeChild(node1);
      Node node2 = null;
      try {
        node2 = new Node(node0.INFERRED_FUNCTION, node1, node0, int0, node1.ORIGINALNAME_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(0, "unexpected prop id ");
      Node node1 = new Node(1780, (Node[]) null);
      int int0 = (-347);
      node1.setType(int0);
      node0.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1682));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.valueOf();
      Node node0 = Node.newString((-1682), "unexpected prop id ", (-1682), (-2019));
      Node node1 = new Node(9, node0, node0);
      node1.setVarArgs(true);
      Node node2 = Node.newNumber((double) 2, 57, 57);
      node1.getChildBefore(node0);
      node2.copyInformationFrom((Node) null);
      node1.isEquivalentToTyped(node0);
      node0.checkTreeEquals(node1);
      node0.isEmpty();
      node2.getDirectives();
      // Undeclared exception!
      try { 
        node1.isIf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.isQualifiedName();
      node0.getExistingIntProp((-1));
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(0, (Node) null, (Node) null, (-109), 111);
      node0.mayMutateArguments();
      String string0 = "G9Oq.]:.~0oa>N\"@?G";
      node0.addSuppression(string0);
      int int0 = 1073741823;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1073741823;
      Node[] nodeArray0 = new Node[7];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      String string0 = "";
      Node node0 = new Node((-3842), nodeArray0, 8388608, (-2644));
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, jSType0);
      FunctionType functionType0 = enumType0.getConstructor();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-3733), (Node) null, (Node) null, (Node) null, (Node) null, 3986, (-3733));
      node1.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.cloneTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("", 12, 8232);
      node0.isLocalResultCall();
      Node node1 = new Node((-1), node0, (Node) null, 38, 256);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setVarArgs(false);
      Node node1 = new Node(0, node0, node0, node0, 48, 1048576);
      node0.addChildToFront(node1);
      Node node2 = node0.removeChildren();
      boolean boolean0 = true;
      node2.setSourceFileForTesting("");
      node2.toString();
      node2.setVarArgs(boolean0);
      node1.isReturn();
      node0.hasChild(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.clearAllFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 153, 153);
      Node node1 = new Node((-2928));
      Node node2 = new Node(986, node0, node1, node0, 43, (-1804));
      node2.getStaticSourceFile();
      node0.addChildToBack(node2);
      node0.isNoSideEffectsCall();
      node2.getSourceOffset();
      Node node3 = node1.copyInformationFrom(node0);
      node1.isVarArgs();
      node2.isCast();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node3.putIntProp(0, 1357);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(8);
      node0.getAncestors();
      Node node1 = Node.newString("o}WA<CwW");
      Node node2 = node0.removeChildAfter(node1);
      node1.isEquivalentToShallow(node2);
      Node node3 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToBack(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "&E-LEyTX}n!YxjT+";
      Node node0 = Node.newString((-423), "&E-LEyTX}n!YxjT+", 105, 47);
      node0.setDouble(105);
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(outputStream0, boolean0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -423
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableList$SerializedForm", (-3207), (-1430));
      Node node1 = new Node(98, node0);
      Node node2 = new Node((-3207), node1, node1, node1, node0);
      node2.clonePropsFrom(node0);
      String string0 = "";
      int int0 = 853;
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, node2.COLUMN_MASK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "a91PR |eV$/q";
      Node node0 = Node.newString("a91PR |eV$/q", 27591, 27591);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.addChildAfter(node0, node0);
      node1.putProp(node0.INFERRED_FUNCTION, node0);
      // Undeclared exception!
      try { 
        node1.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.toString(false, false, false);
      Node node1 = new Node(18, node0, node0, node0, node0);
      node1.getProp(1510);
      node1.putProp((-1346), (Object) null);
      Node node2 = new Node(0, node0, node0, node1, node1, 32, (-1929));
      node2.getChildAtIndex(node1.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 547, 16384);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(301);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = Node.newNumber(0.0, 1077, (-1));
      node0.getSourceFileName();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      Node node1 = Node.newString(8287, "C'4ehm|95#:w@K", 4, 1);
      node0.replaceChild(node1, node1);
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.valueOf();
      boolean boolean0 = node_SideEffectFlags3.areAllFlagsSet();
      node0.isEquivalentToShallow(node1);
      int int0 = 0;
      node0.putBooleanProp(int0, boolean0);
      // Undeclared exception!
      try { 
        node0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 127;
      int int1 = 64;
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString("", 3485, (-2421));
      nodeArray0[0] = node0;
      Node node1 = Node.newString(38, "", (-1648), 42);
      nodeArray0[1] = node1;
      Node node2 = new Node(412, 0, 16);
      nodeArray0[2] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      Node node3 = enumElementType0.getRootNode();
      nodeArray0[3] = node3;
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) enumType1;
      jSTypeArray0[1] = (JSType) enumElementType0;
      jSTypeArray0[2] = (JSType) enumType1;
      jSTypeArray0[3] = (JSType) enumType0;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      Node node0 = Node.newString(0, (String) null, 21, (-392));
      Node node1 = new Node(int0, node0, node0);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = null;
      Node node2 = new Node(0, node0, (Node) null);
      // Undeclared exception!
      try { 
        node2.getAncestors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isComma();
      int int0 = 0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.base.CharMatcher$7", node0, (JSType) null);
      enumType0.isDateType();
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node[] nodeArray0 = null;
      Node node0 = new Node(1641, (Node[]) null);
      int int0 = 40;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber((double) 3443, 13, 3443);
      node0.setLength(13);
      node0.isRegExp();
      node0.setDouble(3443);
      Node node1 = null;
      node0.removeProp(3443);
      node0.addChildrenToFront((Node) null);
      node0.isSetterDef();
      // Undeclared exception!
      try { 
        node0.isSetterDef();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(290, "TYPE_ERROR_FUNCTION_TYPE");
      node0.isGetElem();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("empty_block", 0, 0);
      node0.isFromExterns();
      Node node1 = new Node(36, node0);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      node1.detachChildren();
      node1.isNull();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newNumber((double) 29, 0, 308);
      node3.cloneTree();
      node3.setLength(36);
      node2.replaceChildAfter(node3, node0);
      String string0 = "YUzuguW>84";
      node2.setSourceFileForTesting(string0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node1.FLAG_NO_THROWS);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setThrows();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(0, "", (-3540), 0);
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      node0.getBooleanProp((-3540));
      JSType jSType0 = templateTypeMapReplacer0.caseStringType();
      simpleErrorReporter0.error("Object#Element", "Object#Key", 0, 39);
      node0.setJSType(jSType0);
      node0.setJSType(jSType0);
      node0.isAssign();
      node0.getQualifiedName();
      Node node1 = node0.srcref((Node) null);
      node1.isAnd();
      node0.isObjectLit();
      int int0 = 51;
      Node node2 = new Node(node1.POST_FLAG, node0, node1, node1, node0.FLAG_NO_THROWS, int0);
      double double0 = 4881.9224497;
      int int1 = 0;
      int int2 = 2;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 7163;
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newString("");
      nodeArray0[0] = node0;
      Node node1 = new Node(38, node0);
      nodeArray0[1] = node1;
      Node node2 = new Node(57, 87855567, 0);
      nodeArray0[2] = node2;
      Node node3 = new Node(48, node0, node2, node2);
      nodeArray0[3] = node3;
      int int1 = (-808);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(1084.3689896362055);
      String string0 = null;
      node0.toString(true, true, false);
      Node node1 = null;
      node0.isEquivalentTo((Node) null);
      int int0 = 136;
      Node node2 = Node.newString(string0, node0.DIRECTIVES, int0);
      node0.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(110, node0);
      node1.getChildBefore(node0);
      node1.getStaticSourceFile();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-787);
      Node node0 = new Node((-787), 83, (-787));
      Node node1 = null;
      node0.removeChildren();
      node0.addChildToFront((Node) null);
      double double0 = (-1869.2023);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "Eq>x";
      Node node0 = Node.newString("Eq>x");
      node0.isLocalResultCall();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber(3277.645);
      node0.isOr();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(27591, "Should not happen\n");
      node0.isGetElem();
      node0.isTry();
      node0.getSourceFileName();
      node0.putProp((-822), (Object) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("empty_block", 0, 0);
      node0.isFromExterns();
      Node node1 = new Node(36, node0);
      node1.getStaticSourceFile();
      node1.children();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      node1.detachChildren();
      node1.isNull();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newNumber((double) 29, 0, 308);
      node3.isTry();
      node3.setType((-1488));
      Node.newString((-2947), (String) null);
      node1.toString();
      node2.isStringKey();
      String string0 = "oRs[1v$2NG";
      int int0 = 2675;
      int int1 = (-2934);
      Node.newString(string0, int0, int1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("", 290, 290);
      node0.toString(true, true, true);
      Node node1 = new Node(3313, node0, node0, node0, node0);
      node0.getProp(2);
      node1.putProp(48, (Object) null);
      Node node2 = new Node(30, node0, node0, node1, node0, 1, 43);
      int int0 = 35;
      node2.getChildAtIndex(int0);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(310);
      Node node1 = new Node(57, node0);
      Node node2 = new Node(55, node1, node0, 48, 40);
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 153, 153);
      Node node1 = new Node((-2928));
      Node node2 = new Node(986, node0, node1, node0, 43, (-1804));
      node2.getStaticSourceFile();
      node0.addChildToBack(node2);
      node0.isNoSideEffectsCall();
      node2.getSourceOffset();
      Node node3 = node1.copyInformationFrom(node0);
      node1.isVarArgs();
      node3.addChildToFront(node2);
      node3.isAnd();
      Node.newNumber((double) node1.STATIC_SOURCE_FILE);
      node0.isGetProp();
      node3.isVarArgs();
      // Undeclared exception!
      try { 
        node3.isOr();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isDebugger();
      int int0 = 0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.base.CharMatcher$7", node0, (JSType) null);
      enumType0.isDateType();
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.putProp(4502, (Object) null);
      Node node1 = new Node((-1), node0, node0, node0, node0, 124, 12);
      node0.getChildAtIndex(54);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.toString(false, false, false);
      Node node1 = new Node(18, node0, node0, node0, node0);
      node1.getDirectives();
      Node node2 = new Node(53, node0, node1, 1434, 0);
      node2.setLineno(node1.SYNTHETIC_BLOCK_PROP);
      node0.addChildrenAfter(node2, node1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("o}WA<CwW");
      node0.isName();
      node0.isFromExterns();
      Node node1 = Node.newString("3#?e$}ti:t@?:Yh");
      node0.toStringTree();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1366, nodeArray0, (-3871), (-3871));
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 96, 290);
      Node node1 = new Node(4095, node0, node0);
      Node.newNumber((-890.51141), 12, 12);
      JSType.toMaybeFunctionType((JSType) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString((String) null, 16384, 538);
      int int0 = (-1141);
      node0.getProp(int0);
      node0.isArrayLit();
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setVarArgs(false);
      Node node1 = new Node(0, node0, node0, node0, 48, 52);
      node0.addChildToFront(node1);
      node0.removeChildren();
      Node.newString("");
      Node node2 = new Node(39, node1, node1, node1);
      Node node3 = node2.getFirstChild();
      Node node4 = Node.newNumber((double) 30, 43, 2);
      node4.getExistingIntProp(38);
      int int0 = (-609);
      node3.getExistingIntProp(int0);
      node4.isGetterDef();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(8);
      node0.getAncestors();
      Node node1 = Node.newString("o}WA<CwW");
      node1.setIsSyntheticBlock(false);
      Node node2 = node0.removeChildAfter(node1);
      node1.isEquivalentToShallow(node2);
      Node node3 = null;
      node0.addChildrenToBack(node3);
      // Undeclared exception!
      try { 
        node2.useSourceInfoIfMissingFromForTree(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setVarArgs(false);
      int int0 = 1048576;
      node0.addChildToFront(node0);
      node0.setSourceFileForTesting("");
      node0.putProp((-3080), node0);
      Node node1 = new Node(12, node0, node0, node0, node0, 2733, 751619276);
      node0.getChildAtIndex(int0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.setThrows();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      int int0 = 0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.base.CharMatcher$7", node0, (JSType) null);
      enumType0.isDateType();
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1366, nodeArray0, (-3871), (-3871));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.valueOf();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber(2125.399658117239);
      node1.isEquivalentToShallow(node0);
      node0.putBooleanProp(4095, false);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("empty_block", 0, 0);
      node0.isFromExterns();
      Node node1 = new Node(36, node0);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      node1.detachChildren();
      node1.isNull();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newNumber((double) 29, 0, 308);
      Node node4 = node3.cloneTree();
      node4.addChildrenAfter(node1, node3);
      node3.setLength(node1.QUOTED_PROP);
      node2.replaceChildAfter(node3, node0);
      String string0 = "YUzuguW>84";
      node2.setSourceFileForTesting(string0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node1.FLAG_NO_THROWS);
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.clearAllFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("f^dM~[ua8I}PR", (-288), (-4649));
      node0.getType();
      Node node1 = Node.newString(56, "f^dM~[ua8I}PR", 98, 55);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toString(true, true, false);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node0.getProp(110);
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
      node0.putProp(0, jSDocInfo_Visibility0);
      Node node2 = new Node(0, node0, node1);
      int int0 = 41;
      Node node3 = new Node(node0.NO_SIDE_EFFECTS, node0, node0, node2, node0, node0.OPT_ARG_NAME, int0);
      int int1 = 14;
      node1.getChildAtIndex(int1);
      // Undeclared exception!
      try { 
        node1.isAdd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-156), 1444);
      node0.setWasEmptyNode(false);
      Node node1 = new Node((-156), node0, node0);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      Node.extractCharno(1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("'}nHl27g3lTJxW", node1, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) templateType0, (ObjectType) functionType0, (ObjectType) enumElementType0, (ObjectType) functionType0, (ObjectType) enumType1, (ObjectType) enumType0, (ObjectType) templateType0, (ObjectType) enumType1, (ObjectType) templateType0, (ObjectType) functionType0, (ObjectType) enumType1);
      functionType0.setImplementedInterfaces(immutableList0);
      // Undeclared exception!
      try { 
        enumElementType0.toMaybeEnumElementType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(110, node0);
      node1.getChildBefore(node0);
      Node.newString(4095, "com.google.javascript.rhino.jstype.NoResolvedType", 55, 3000);
      Node node2 = Node.newNumber((double) 31);
      node1.getStaticSourceFile();
      node1.toStringTree();
      node1.isObjectLit();
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("W");
      Node node1 = Node.newString("W");
      node1.getChildBefore(node0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(node1.POST_FLAG, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(110);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("o}WA<CwW");
      Node node1 = new Node(1214, node0, node0);
      node1.isName();
      node1.isFromExterns();
      Node node2 = Node.newString("");
      node0.toStringTree();
      node2.setOptionalArg(false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString((-3871), "Jj_qKmHSZ|E");
      Node node1 = new Node((-784), node0, node0, 304, 38);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Jj_qKmHSZ|E", false);
      node1.putProp(4099, simpleSourceFile0);
      Node node2 = new Node((-3871), node1, node0, node0, node1, 64, (-3871));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node1.SLASH_V);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node1.getJsDocBuilderForNode();
      Node node3 = node2.getLastSibling();
      node0.getAncestors();
      // Undeclared exception!
      try { 
        node3.isNew();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("", 290, 290);
      Node node1 = new Node(3313, node0, node0, node0, node0);
      node0.getProp(2);
      Node node2 = Node.newNumber((double) 39);
      node2.getStaticSourceFile();
      node1.toStringTree();
      node0.isObjectLit();
      int int0 = 54;
      Node node3 = new Node(node1.FLAG_ARGUMENTS_UNMODIFIED, node2, node2, node0.DIRECTIVES, int0);
      // Undeclared exception!
      try { 
        node3.srcref(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3313
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("", 290, 290);
      node0.toString(true, true, true);
      Node node1 = new Node(3313, node0, node0, node0, node0);
      node0.getProp(2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node2 = node1.cloneNode();
      node0.isBreak();
      node0.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter.getMessage1("", (Object) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("empty_block", 0, 0);
      node0.isFromExterns();
      Node node1 = new Node(36, node0);
      node1.getStaticSourceFile();
      node1.children();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      node1.detachChildren();
      node1.isNull();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newNumber((double) 29, 0, 308);
      node3.isTry();
      node0.isQuotedString();
      Node.newNumber(1.0, 0, 51);
      node3.setType((-1488));
      Node.newString((-2947), (String) null);
      node1.toString();
      node2.isStringKey();
      String string0 = "oRs[1v$2NG";
      int int0 = 2675;
      int int1 = (-2934);
      Node.newString(string0, int0, int1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      Node node0 = new Node(55, (-5016), 0);
      Node node1 = new Node(55, node0, node0);
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 301);
      node1.isEquivalentToShallow(node0);
      int int0 = 29;
      node0.putBooleanProp(29, false);
      Node node2 = Node.newString(154, (String) null, 15, 32);
      node2.isNumber();
      int int1 = 2078;
      node2.putIntProp(int0, int1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(8);
      node0.getAncestors();
      Node node1 = Node.newString("o}WA<CwW");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node((-2677), 1765, 4095);
      node2.isQuotedString();
      node2.checkTreeEqualsImpl(node0);
      node2.isAnd();
      node2.getStaticSourceFile();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      node1.appendStringTree(stringWriter0);
      Node[] nodeArray0 = new Node[2];
      Node node3 = Node.newString("o}WA<CwW");
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      Node node4 = new Node(4095, nodeArray0, 29, (-3991));
      node4.getAncestors();
      node0.isTry();
      Node node5 = Node.newNumber((-1.0));
      node5.setType((-2101));
      node0.getStaticSourceFile();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("o}WA<CwW");
      node0.isName();
      Node node1 = Node.newString((-1408), "3#?e$}ti:t@?:Yh", 16, 124);
      node1.setLineno(3295);
      node0.copyInformationFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber(3277.645);
      node0.getString();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(118);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node((-1558), 36, 53);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 301);
      node1.isLabel();
      int int0 = 29;
      node0.putBooleanProp(29, false);
      Node node2 = Node.newString(154, (String) null, 15, 32);
      node1.isThis();
      int int1 = 264;
      node2.setLineno(int1);
      node2.isNumber();
      int int2 = 2078;
      // Undeclared exception!
      try { 
        node2.putIntProp(int0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.isName();
      Node node1 = Node.newString(1368, "3#?e$}ti:t@?:Yh", 54, (-1278));
      Node node2 = new Node(8232);
      node2.setLineno(3441);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString("TOP_LEVEL_PROTOTYPE", 0, 0);
      node0.isFunction();
      Node node1 = new Node(36, node0);
      node1.getStaticSourceFile();
      node1.children();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getInputId();
      node1.detachChildren();
      node1.isNull();
      node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.valueOf();
      Node node2 = Node.newString((-4096), "TOP_LEVEL_PROTOTYPE", 46, 53);
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("empty_block", 301, 55);
      node0.isReturn();
      Node node1 = new Node((-3805), node0);
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newNumber((double) 0, (-732), 57);
      Node node4 = new Node(55, node0);
      node1.addChildrenAfter(node0, node4);
      int int0 = 735;
      node1.setLength(int0);
      node3.replaceChildAfter(node2, node4);
      String string0 = "(R#3dQ.rNq6_-f/=V6";
      // Undeclared exception!
      try { 
        node2.setSourceFileForTesting(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("f^dM~[ua8I}PR", (-288), (-4649));
      node0.getType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.areAllFlagsSet();
      node0.addChildToBack((Node) null);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 301);
      node1.isEquivalentToShallow(node0);
      node0.putBooleanProp(29, false);
      node1.isNumber();
      node0.putIntProp(29, 2078);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(8);
      node0.getAncestors();
      Node node1 = Node.newString("o}WA<CwW");
      node1.checkTreeEqualsImpl(node0);
      Node node2 = new Node((-2677), 1765, 4095);
      node2.isQuotedString();
      node2.checkTreeEqualsImpl(node0);
      node2.isAnd();
      node2.getStaticSourceFile();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      node1.appendStringTree(stringWriter0);
      Node[] nodeArray0 = new Node[2];
      Node node3 = Node.newString("o}WA<CwW");
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      Node node4 = new Node(4095, nodeArray0, 29, (-3991));
      node4.getAncestors();
      node0.isTry();
      Node node5 = Node.newNumber((-1.0));
      node5.setType((-2101));
      node0.getStaticSourceFile();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString(1464, "1]-{?8");
      Node node1 = new Node(8232, node0, node0, node0);
      Node node2 = new Node(1464, node1, node0, node1, 1, 56);
      node2.removeChild(node0);
      int int0 = 152;
      Node node3 = null;
      try {
        node3 = new Node(int0, node1, node0, node0.SLASH_V, node0.SLASH_V);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(310);
      Node node1 = new Node(57, node0);
      Node node2 = Node.newString("LE", 4, 1);
      node2.isLocalResultCall();
      node0.getProp(39);
      node2.isName();
      Node node3 = Node.newString(2078, "", 54, 30);
      Node node4 = new Node(4);
      node4.setLineno(83);
      Node node5 = Node.newNumber(1533.208, 57, 1103);
      Node node6 = new Node((-1856), node5, node5, node0, node3);
      node6.copyInformationFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 301);
      node1.isEquivalentToShallow(node0);
      node0.putBooleanProp(29, false);
      node1.isNumber();
      node0.putIntProp(29, 2078);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("", 290, 290);
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber(301.0);
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(43, true);
      Node.newString(265, "", 12, 126);
      node0.isNumber();
      node1.putIntProp((-1666), 4095);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(301, (Node) null, (Node) null, (Node) null, (Node) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("", 290, 290);
      Node node1 = new Node(3313, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = Node.newNumber((double) 16);
      node1.isOr();
      node1.mayMutateGlobalStateOrThrow();
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 96, 290);
      Node.newNumber((double) 50, 12, 12);
      JSType.toMaybeFunctionType((JSType) null);
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.setVarArgs(false);
      node0.getStaticSourceFile();
      node0.children();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(31, nodeArray0);
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFrom(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber(3277.645);
      node0.addSuppression(">sNwTTaK}'{8YyCxt");
      node0.getString();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isScript();
      node0.isOr();
      node0.children();
      node0.isFunction();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 1023;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeArray0[0] = (JSType) objectType0;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(52, nodeArray0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("com.google.common.collect.ImmutableEntry", node0, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getRootNode();
      JSType jSType0 = jSTypeRegistry1.createFromTypeNodes((Node) null, "Unknown class name", enumElementType0);
      jSTypeArray0[1] = jSType0;
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber(1995.645);
      node1.getStaticSourceFile();
      node0.toStringTree();
      node1.isObjectLit();
      node1.replaceChildAfter(node0, node0);
      node0.isAnd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(155);
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags6.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags7.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber((double) 155);
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node0.isLabelName();
      node_SideEffectFlags6.setThrows();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber(301.0);
      Node node1 = Node.newNumber(2651.14965245642, 57, 49);
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(46, false);
      Node.newString(42, "Bad type annotation. Unknown type ", (-3540), 31);
      node0.isNumber();
      node0.putIntProp(16, 1450);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.isName();
      Node node1 = Node.newNumber(1507.03339);
      node0.checkTreeEquals(node1);
      Node node2 = Node.newString(1368, "3#?e$}ti:t@?:Yh", 54, (-1278));
      Node node3 = new Node(8232);
      node2.copyInformationFromForTree(node0);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber(3277.645);
      node0.isOr();
      Node node1 = new Node(52, node0, node0, (Node) null);
      node1.isNumber();
      node0.putIntProp(node1.STATIC_SOURCE_FILE, node1.ORIGINALNAME_PROP);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 301);
      node1.isEquivalentToShallow(node0);
      node0.putBooleanProp(29, false);
      Node node2 = Node.newString("");
      node2.mayMutateGlobalStateOrThrow();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(48, nodeArray0, (-483), (-1520));
      node1.isOnlyModifiesArgumentsCall();
      nodeArray0[1].wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.putProp(4502, (Object) null);
      Node node1 = new Node((-1), node0, node0, node0, node0, 124, 12);
      node1.isLocalResultCall();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, ":G)>", 56, (-2653));
      node1.addChildrenToFront(node0);
      node0.addChildToBack(node1);
      node0.addSuppression("");
      Node node2 = node1.getFirstChild();
      node2.children();
      Node.newString(42, "V8");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node.mergeLineCharNo((-4174), 242);
      Node node0 = Node.newString(8192, "", (-1), 242);
      node0.putIntProp(124, 1836);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((-2360.0));
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(44, true);
      node1.isNumber();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node.newString("}L7f#M;jpx", 96, 290);
      Node node0 = Node.newNumber((double) 50, 12, 12);
      JSType.toMaybeFunctionType((JSType) null);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 110;
      Node node0 = Node.newString((String) null);
      Node node1 = new Node(int0, node0);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, ":G)>", 56, (-2653));
      node1.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      Node node2 = Node.newNumber((-1.0));
      node1.isEquivalentToShallow(node2);
      Node node3 = Node.newString("26gacGAiJ", 36, 31);
      node3.putBooleanProp(2, false);
      node3.isNumber();
      node1.cloneTree();
      node2.getProp((-3068));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("f^dM~[ua8I}PR", 51, (-4649));
      node0.getType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(31, node1, node1);
      String string0 = node2.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.cloneNode();
      node0.isBreak();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      int int0 = 2216;
      Node node3 = new Node(40, node0, node2, node1, node1, 38, 2216);
      Node node4 = node3.getChildAtIndex(int0);
      node4.setString(string0);
      Node node5 = null;
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.isName();
      Node node1 = Node.newString(1368, "3#?e$}ti:t@?:Yh", 54, (-1278));
      Node node2 = new Node(8232);
      node2.setChangeTime(46);
      node2.setLineno(3441);
      Node node3 = node1.copyInformationFromForTree(node0);
      node3.isRegExp();
      Node.newString(49, "lTwE$\"@OG_R-:n", 15, 48);
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      StringWriter stringWriter0 = new StringWriter();
      node0.isCast();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node0.putIntProp((-643), (-1781));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(54, "T!mI,];yl[)@v");
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 15, 153, 4095);
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node2 = Node.newNumber(2160.4726582);
      node1.isEquivalentToShallow(node2);
      node1.putBooleanProp(33, true);
      node0.isNumber();
      node2.cloneNode();
      node1.getIntProp(27591);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSTypeNative jSTypeNative7 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      jSTypeNativeArray0[7] = jSTypeNative7;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSType0.isString();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(155, node0, node0, node0, node0);
      Node node2 = node1.clonePropsFrom(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLendsName("");
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(335, "CharMatcher.and(");
      Node node1 = new Node(51, node0);
      Node node2 = node0.srcrefTree(node1);
      node2.getString();
      node0.hasChildren();
      node2.isFunction();
      node2.isFunction();
      Node node3 = new Node(57);
      node1.hasChild(node3);
      node0.children();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 114;
      Node node0 = Node.newNumber(301.0, 114, 114);
      node0.isCatch();
      int int1 = 12;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<TemplateType> stack0 = new Stack<TemplateType>();
      int int2 = 672;
      ListIterator<TemplateType> listIterator0 = stack0.listIterator(672);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Iterator<? extends TemplateType>) listIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 672
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      Node node1 = new Node(536870912, node0, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node1);
      node2.getAncestors();
      node1.getChildCount();
      Node node3 = Node.newNumber((double) 40);
      node3.isEquivalentTo(node0, false, false, true);
      node3.getCharno();
      node3.isIf();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "&E-LEyTX}n!YxjT+";
      int int0 = 105;
      Node node0 = Node.newString((-423), "&E-LEyTX}n!YxjT+", 105, 47);
      OutputStream outputStream0 = null;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(335);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      node0.isInc();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(outputStream0, boolean0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -423
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setVarArgs(false);
      node0.addChildToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.valueOf();
      Node.newString(57, "The new child node has siblings.", (-1493), 2);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, ":G)>", 56, (-2653));
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.getInputId();
      node1.detachChildren();
      node0.isNull();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newNumber(0.7, 37, 54);
      node0.addChildToFront(node1);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node3.setType(64);
      Node node4 = Node.newString(64, "}Z/{!X`|Qd+Jl05");
      node4.toString();
      node0.isStringKey();
      node0.isUnscopedQualifiedName();
      node3.siblings();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ImmutableList.of();
      Node node0 = Node.newNumber((double) (-2141), (-2141), (-2141));
      Node node1 = new Node((-2141), node0, 1011, (-2316));
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-381));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(4095, 31, 36);
      Node node2 = node0.clonePropsFrom(node1);
      node2.removeChildAfter(node1);
      int int0 = (-466);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      JSType.toMaybeTemplatizedType((JSType) null);
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) stack0);
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      jSTypeArray0[3] = null;
      jSTypeArray0[4] = null;
      jSTypeArray0[5] = null;
      jSTypeArray0[6] = null;
      jSTypeArray0[7] = null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(118);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(30, node0, node0, node0, 1, 51);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newNumber((-1391.4), 4095, 4);
      node3.isTry();
      node0.addChildToFront(node2);
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node3.setType(node0.SIDE_EFFECT_FLAGS);
      int int0 = 26;
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      node_SideEffectFlags0.setMutatesThis();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node((-3167), 52, 65535);
      node1.clonePropsFrom(node0);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags7.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 56);
      node1.isEquivalentToShallow(node0);
      node0.putBooleanProp(1, false);
      Node node2 = new Node(57, node1, node1, node1);
      node1.checkTreeEquals(node0);
      node2.isNumber();
      node0.isQualifiedName();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString(5, "", (-3540), 5);
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      node0.getBooleanProp((-3540));
      node0.getQualifiedName();
      Node node1 = new Node(2048, node0);
      node0.getAncestors();
      node0.getChildCount();
      Node node2 = Node.newNumber(15.0);
      Node node3 = null;
      node0.isEquivalentTo((Node) null, true, false, false);
      node1.getCharno();
      node2.isIf();
      int int0 = (-123);
      int int1 = 2204;
      Node node4 = new Node(node1.FLAG_THIS_UNMODIFIED, node3, int0, int1);
      node4.isNot();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      Node node1 = new Node(536870912, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node0.setJSType(jSType0);
      Node node2 = Node.newNumber(1419.03737025);
      node2.setJSType(jSType0);
      node0.isAssign();
      node1.getQualifiedName();
      Node node3 = new Node(57, node1);
      Node node4 = Node.newNumber((double) 12);
      Node node5 = node3.srcref(node4);
      node2.isThrow();
      node0.isAnd();
      node5.isObjectLit();
      Node node6 = new Node(2, node1, node1, node0, 2100, 131072);
      Node.newNumber((double) node4.EMPTY_BLOCK, node6.DIRECT_EVAL, node3.NO_SIDE_EFFECTS);
      node1.addChildToFront(node5);
      node1.isExprResult();
      node4.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node node1 = new Node(4787, (Node[]) null);
      node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node1.STATIC_SOURCE_FILE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      node0.putBooleanProp(93, false);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((-2360.0));
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(44, true);
      node0.isReturn();
      node0.removeFirstChild();
      node0.toStringTree();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber(301.0);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newNumber((-2522.000281896202));
      Node node1 = new Node(4875, node0, node0, 4875, (-1534));
      node1.getProp(30);
      node1.isName();
      Node node2 = Node.newNumber((double) 2);
      node2.checkTreeEquals(node1);
      String string0 = "fc$";
      int int0 = (-2707);
      // Undeclared exception!
      try { 
        Node.newString(node2.IS_NAMESPACE, string0, int0, node1.INFERRED_FUNCTION);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4875
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("!\"", 51, (-4649));
      node0.getType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      node2.toStringTree();
      node1.putBooleanProp(2, false);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(301.0);
      node0.isLabel();
      node0.putBooleanProp(29, false);
      Node node1 = Node.newString(46, "(Lo*=8_B`x", 42, 2693);
      node0.isThis();
      node0.setLineno(53);
      node1.isNumber();
      node1.putIntProp(52, 29);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node0.setJSType(jSType0);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "yf-Sx'JY+M;p]@Ic");
      node0.setJSType(jSType0);
      node0.isAssign();
      node0.getQualifiedName();
      Node node1 = Node.newNumber((double) 12);
      Node node2 = node0.srcref(node1);
      node0.isThrow();
      node0.isAnd();
      node2.isObjectLit();
      Node node3 = new Node(2, node0, node0, node0, 2100, 131072);
      node3.detachFromParent();
      int int0 = 1282;
      node2.getIntProp(int0);
      Node.newNumber((double) node1.EMPTY_BLOCK, node3.DIRECT_EVAL, node0.NO_SIDE_EFFECTS);
      node0.addChildToFront(node2);
      node0.isExprResult();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      node0.putBooleanProp(93, false);
      node0.toString();
      node0.isInstanceOf();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 96, 290);
      String string0 = ">7n^9";
      String string1 = "/Ni8 ;I^lnloJ>F)";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildBefore(node1, node1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0, string1);
      char char0 = 'F';
      // Undeclared exception!
      try { 
        mockPrintStream0.append(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber(301.0);
      Node node1 = node0.clonePropsFrom((Node) null);
      int int0 = 5112;
      node1.setLength(int0);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(23, 8232, 746);
      Node node1 = Node.newNumber((double) 4502, 56, 29);
      node0.addSuppression("RANGE_ERROR_FUNCTION_TYPE");
      node0.isHook();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.valueOf();
      Node.newString(1, "Object#Element", 29, 48);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getInputId();
      node0.setInputId((InputId) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newNumber(301.0);
      node0.putBooleanProp(2887, false);
      node0.isOnlyModifiesThisCall();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 12);
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((-1230.7210844697593), 1, 54);
      node0.isEquivalentTo(node1);
      JSType.toMaybeFunctionType((JSType) null);
      node0.isEmpty();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.setChangeTime((-3200));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node1 = Node.newNumber((double) 38);
      Node node2 = new Node(2, node1, node1);
      node2.isFalse();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      node0.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      node_SideEffectFlags0.setMutatesThis();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node((-3167), 52, 65535);
      node1.clonePropsFrom(node0);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.isName();
      node0.checkTreeEquals(node0);
      Node node1 = Node.newString(1368, "3#?e$}ti:t@?:Yh", 54, (-1278));
      Node node2 = new Node(8232);
      node1.copyInformationFromForTree(node0);
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(8);
      node0.getAncestors();
      Node node1 = Node.newString("o}WA<CwW");
      node1.checkTreeEqualsImpl(node0);
      node1.cloneNode();
      Node node2 = new Node((-2677), 1765, 4095);
      node2.isQuotedString();
      node2.checkTreeEqualsImpl(node2);
      node2.isAnd();
      node2.getStaticSourceFile();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      node1.appendStringTree(stringWriter0);
      Node[] nodeArray0 = new Node[2];
      Node node3 = Node.newString("o}WA<CwW");
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      Node node4 = new Node(4095, nodeArray0, 29, (-3991));
      node4.setDouble(31);
      node4.getAncestors();
      node0.isTry();
      double double0 = (-1.0);
      Node node5 = Node.newNumber(double0);
      node5.checkTreeEqualsImpl(node3);
      int int0 = (-2101);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, ":G)>", 56, (-2653));
      node1.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      node0.detachFromParent();
      Node node2 = Node.newString(38, "26gacGAiJ");
      node2.getIntProp(34);
      Node node3 = Node.newNumber((double) 40, 85, 46);
      node0.addChildToFront(node2);
      node2.isExprResult();
      node1.isHook();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node3.siblings();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      String string0 = "T.^";
      Node.newString("T.^", 52, 36);
      node0.getProp(4095);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newNumber(301.0, 114, 114);
      node0.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isComma();
      boolean boolean0 = false;
      Node[] nodeArray0 = new Node[10];
      nodeArray0[0] = node0;
      Node node1 = new Node(54, node0, node0);
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      Node node2 = new Node(4095, nodeArray0);
      node2.putBooleanProp(node0.SYNTHETIC_BLOCK_PROP, boolean0);
      node0.toString();
      // Undeclared exception!
      try { 
        node0.isInstanceOf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newString("");
      node_SideEffectFlags2.setMutatesThis();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(54, 37, 12);
      node1.clonePropsFrom(node0);
      node0.setString("");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(310);
      Node node1 = new Node(57, node0);
      node0.removeChild(node1);
      Node node2 = null;
      try {
        node2 = new Node(node0.INFERRED_FUNCTION, node1, node0, node1.LENGTH, node1.ORIGINALNAME_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node node1 = new Node(42, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(20);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.valueOf();
      Node node2 = Node.newString(4, "7WO", (-385), (-261));
      node1.isHook();
      node1.getParent();
      node2.hasOneChild();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getProp(116);
      node0.isName();
      Node node1 = Node.newNumber(16.0);
      node1.checkTreeEquals(node0);
      node1.putProp((-260), node0);
      Node.newString((-1034), "y", 56, 43);
      Node node2 = new Node(56);
      node2.copyInformationFromForTree(node0);
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber((double) 301, 1077, (-1));
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1781));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newNumber((-2360.0));
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(2332, false);
      Node node2 = new Node(2, node0, node0, node0);
      node0.checkTreeEquals(node1);
      node2.isNumber();
      node0.isQualifiedName();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(8232, 8232, 8232);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber(301.0, 114, 114);
      node0.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PRIVATE;
      ImmutableList.of(jSDocInfo_Visibility0, jSDocInfo_Visibility0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      JSType jSType0 = jSTypeRegistry1.createOptionalNullableType(functionType0);
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.removeChild(node0);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.isName();
      node0.checkTreeEquals(node0);
      Node node1 = Node.newString(1368, "3#?e$}ti:t@?:Yh", 1077, (-1278));
      node1.addChildrenToFront(node0);
      Node node2 = new Node(8232);
      node1.copyInformationFromForTree(node0);
      node0.isDec();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(301.0);
      node0.mayMutateGlobalStateOrThrow();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(5, "", (-3540), 5);
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      node0.getBooleanProp((-3540));
      node0.getQualifiedName();
      Node node1 = new Node(51);
      node0.getAncestors();
      node0.getChildCount();
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(16777216, (-529), 43);
      node2.setQuotedString();
      Node node3 = node1.clonePropsFrom(node0);
      String string0 = "355[`l";
      node3.setString(string0);
      node2.detachFromParent();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      Node node0 = Node.newString(1, "n^9>etq$A:A");
      node0.setJSType(jSType0);
      Node node1 = Node.newNumber((double) 37);
      node0.setJSType(jSType0);
      node1.isAssign();
      node1.getQualifiedName();
      Node.newNumber((double) 12);
      Node node2 = new Node(37, 2, 2);
      node2.isThrow();
      node2.isAnd();
      node0.isObjectLit();
      Node node3 = new Node(108, node0, node1, node2, 33, (-1));
      node1.getInputId();
      node3.setInputId((InputId) null);
      Node node4 = Node.newNumber((-1338.4434708), 2793, 2793);
      node4.srcrefTree(node3);
      node4.addChildToFront(node3);
      node0.isExprResult();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node1.isInstanceOf();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("", 40, 762);
      node0.isLocalResultCall();
      node0.getProp(762);
      node0.isBlock();
      Node node1 = Node.newNumber(1.0, 47, 36);
      node0.checkTreeEquals(node1);
      Node.newString(1770, "NOOwtHc4qt){", 50, 36);
      Node node2 = new Node(11);
      node2.copyInformationFromForTree(node1);
      node1.isDec();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      node0.getProp(1077);
      node0.putProp(50, (Object) null);
      Node node1 = new Node((-7), node0, node0, node0, node0, 124, 12);
      Node node2 = Node.newString(29, "RANGE_ERROR_FUNCTION_TYPE", 55, 39);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("RANGE_ERROR_FUNCTION_TYPE");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString((-1895), "@tq6r!og.4\"B", (-1895), (-1895));
      node0.getSourcePosition();
      Node.newNumber(2965.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      EnumType enumType0 = jSTypeRegistry0.createEnumType("The new child node already has a parent.", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      FunctionType functionType0 = enumElementType0.getOwnerFunction();
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, enumType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType((JSType) functionType1, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      Node node0 = Node.newString(1, "n^9>etq$A:A");
      node0.setJSType(jSType0);
      Node node1 = Node.newNumber((double) 37);
      node0.setJSType(jSType0);
      node1.isAssign();
      node1.getQualifiedName();
      node0.setChangeTime(40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node2 = Node.newNumber((double) 51);
      Node node3 = new Node((-3590), node2, node1);
      node2.isFalse();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      OutputStream outputStream0 = null;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node0.isInc();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node.extractCharno(3454);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber((double) 3454, 3454, 3454);
      node0.setLength(3454);
      node0.toStringTree();
      node0.isRegExp();
      node0.setDouble(3454);
      node0.removeProp(3454);
      node0.isSetterDef();
      node0.isCast();
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(46);
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.putIntProp(1513, 1513);
      node0.hasMoreThanOneChild();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "CharMatcher.and(";
      Node node0 = Node.newString(335, "CharMatcher.and(");
      Node node1 = new Node(51, node0);
      Node node2 = node0.srcrefTree(node1);
      node2.getString();
      node2.isFunction();
      int int0 = (-3659);
      node1.getDouble();
      int int1 = 1833;
      // Undeclared exception!
      try { 
        Node.newString(int0, string0, node0.REFLECTED_OBJECT, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IN is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newNumber((double) 3443, 3443, 3443);
      node0.setLength(3443);
      node0.isRegExp();
      node0.setDouble(3443);
      Node node1 = new Node(51, node0);
      Node node2 = Node.newString(53, "OR", 21, 1652);
      node2.isEquivalentTo(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      node0.isOptionalArg();
      node0.isFor();
      node0.isVar();
      node0.isNE();
      node0.isVoid();
      node0.isExprResult();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("*&LDf1");
      Node.newNumber((-703.55), 331, 57);
      Node node1 = new Node(49, node0, node0, node0, 155, (-4649));
      Node node2 = node1.cloneTree();
      node0.addChildBefore(node2, node2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getProp(116);
      node0.isIf();
      node0.checkTreeEquals(node0);
      node0.putProp((-260), node0);
      Node.newString((-1034), "y", 56, 43);
      Node node1 = new Node(56);
      Node node2 = Node.newString((String) null);
      node2.isNoSideEffectsCall();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      node0.putBooleanProp(93, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node1.copyInformationFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.cloneNode();
      node0.isBreak();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      Node node3 = new Node(2207, node1, node2, node2, node2);
      node1.setCharno((-4787));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(40, 40, 25);
      node0.isComma();
      Node node1 = Node.newNumber((-1608.1987374));
      Node node2 = new Node(3443, node1, node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(2131, nodeArray0);
      node3.putBooleanProp(932, false);
      node1.toString();
      Node node4 = new Node(49, node2, 2, 152);
      node4.isInstanceOf();
      Node node5 = new Node(node1.SLASH_V, node4, node2, node0.SYNTHETIC_BLOCK_PROP, node0.REFLECTED_OBJECT);
      node5.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1160);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(443);
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node0 = Node.newNumber((double) 443, 443, 443);
      node0.setLength(100);
      node0.isRegExp();
      node0.setDouble(1160);
      Node node1 = null;
      Node node2 = new Node(14151038, (Node) null);
      String string0 = "OR";
      int int0 = (-2530);
      Node.newString(int0, string0, node2.NO_SIDE_EFFECTS, node2.FLAG_THIS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber(2651.14965245642, 447, 0);
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2976);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 48);
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(53, true);
      node1.isReturn();
      node0.removeFirstChild();
      Node node2 = new Node(52, node0, node1, node0, node0);
      node2.toStringTree();
      node2.siblings();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "CharMatcher.and(";
      Node node0 = Node.newString(335, "CharMatcher.and(");
      Node node1 = new Node(51, node0);
      node1.setSideEffectFlags(16);
      Node node2 = node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got IN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("y}49QYA", 1324, 1324);
      Node node1 = new Node((-1), node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isNull();
      node0.getStaticSourceFile();
      node2.isOnlyModifiesArgumentsCall();
      node0.isLabel();
      node2.isLabelName();
      node1.isDefaultCase();
      node1.isVoid();
      node2.isNull();
      node1.replaceChild(node0, node0);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.mayMutateGlobalStateOrThrow();
      node0.siblings();
      node0.isScript();
      node0.toString(true, false, true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("STRING ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("STRING ");
      node_FileLevelJsDocBuilder0.append("");
      node0.isScript();
      node0.isDelProp();
      Node node1 = new Node(4, node0, node0);
      Charset charset0 = Charset.defaultCharset();
      Node node2 = Node.newNumber((double) 56, 15, 1682);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1623);
      byteBuffer0.getShort(124);
      byteBuffer0.getShort();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      node1.appendStringTree(charBuffer0);
      Node node3 = node0.copyInformationFromForTree(node1);
      Node node4 = node3.getChildBefore(node0);
      node3.replaceChild(node4, node4);
      node3.detachFromParent();
      node4.checkTreeTypeAwareEqualsImpl(node2);
      node4.getType();
      node3.getLength();
      node1.getChildCount();
      // Undeclared exception!
      try { 
        node1.isName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("*&LDf1");
      Node node1 = Node.newNumber((-703.55), 331, 57);
      Node node2 = new Node(49, node0, node0, node0, 155, (-4649));
      node2.appendStringTree((Appendable) null);
      Node node3 = node2.cloneTree();
      node0.addChildBefore(node3, node3);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node node2 = Node.newString("Duplicate record field ");
      node0.isNoSideEffectsCall();
      node0.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newString("|z`cY");
      node_SideEffectFlags2.setMutatesThis();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(51, 103, 12);
      node1.setString("|z`cY");
      node1.detachFromParent();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("", 40, 762);
      node0.setLineno(762);
      node0.putIntProp((-2635), 2014);
      Node node1 = new Node(762, node0, node0, node0, 575, 40);
      node1.isScript();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildrenAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node((-2598));
      Node node1 = new Node((-223), node0, node0, node0);
      int int0 = 732;
      Node node2 = node0.cloneNode();
      node2.isOnlyModifiesThisCall();
      boolean boolean0 = false;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node1.setSideEffectFlags(node_SideEffectFlags4);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -223
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(5);
      node0.setOptionalArg(true);
      node0.setLineno(5);
      node0.isThis();
      node0.isWhile();
      node0.getAncestors();
      String string0 = null;
      Node node1 = Node.newString((-1635), (String) null, 57, 768);
      int int0 = (-1643);
      node1.setLineno(int0);
      node0.useSourceInfoIfMissingFrom(node1);
      int int1 = (-3540);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("V");
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      node0.getBooleanProp((-3540));
      node0.getQualifiedName();
      Node node1 = new Node(51);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType.toMaybeTemplatizedType((JSType) objectType0);
      ObjectType objectType1 = null;
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) objectType1;
      jSTypeArray0[3] = (JSType) objectType0;
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      Node node1 = new Node(536870912, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newNumber(1419.03737025);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node0.isNull();
      node0.getStaticSourceFile();
      node3.isOnlyModifiesArgumentsCall();
      node1.isLabel();
      Node node4 = Node.newString(54, "5v`eRRrlxA{kT6=/M");
      node4.isLabelName();
      node4.isDefaultCase();
      node2.isVoid();
      node3.isNull();
      node2.replaceChild(node4, node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
      Node node5 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node5.isFalse();
      // Undeclared exception!
      try { 
        node4.setDouble(node5.SLASH_V);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node.extractCharno(3443);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newString("|z`cY");
      node0.hasChildren();
      node0.isFunction();
      Node node1 = new Node(111);
      node1.hasChild(node0);
      node1.getAncestor(39);
      node1.children();
      node1.isThrow();
      node1.getExistingIntProp(45);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 12);
      Node node1 = Node.newNumber((-1230.7210844697593), 1, 54);
      node0.isEquivalentTo(node1);
      node0.getCharno();
      Node node2 = new Node(12, node1, node0, node1);
      node2.isIf();
      Node node3 = new Node(8233, node2, 32, 14151038);
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, ":G)>", 56, 53);
      node1.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      Node.newNumber((double) 2);
      Node node2 = Node.newString("26gacGAiJ", 36, 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType.toMaybeFunctionType(jSType0);
      node1.isEmpty();
      node1.isStringKey();
      node2.getJSType();
      Node.extractCharno(55);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newNumber(2651.14965245642, 447, 0);
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2976);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 48);
      node0.isEquivalentToShallow(node1);
      node0.putBooleanProp(53, true);
      node1.isReturn();
      node0.removeFirstChild();
      Node node2 = new Node(52, node0, node1, node0, node0);
      node2.toStringTree();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      node0.putBooleanProp(93, false);
      Node node1 = Node.newString("new child has existing parent", (-178), 124);
      Node.newNumber((double) 29, 2080, 30);
      JSType.toMaybeFunctionType((JSType) null);
      node0.setSourceEncodedPositionForTree(882);
      node1.isStringKey();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      InputId inputId0 = new InputId("b^_@ W|lF");
      inputId0.toString();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(3307, node0, 39, 47);
      node1.setInputId(inputId0);
      Node node2 = Node.newNumber((-1689.3), 29, (-2530));
      Node node3 = node2.srcrefTree(node0);
      node0.addChildToFront(node1);
      node3.isExprResult();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node0.isInstanceOf();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(5, "", (-3540), 5);
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      node0.getBooleanProp((-3540));
      node0.getQualifiedName();
      Node node1 = new Node(51);
      node0.getAncestors();
      node0.getChildCount();
      node1.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags6.setReturnsTainted();
      node0.isOr();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      jSType0.matchesObjectContext();
      JSType.toMaybeTemplatizedType(jSType0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node1.isGetElem();
      node1.isQuotedString();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      InputId inputId0 = new InputId("Object#Element");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber((double) 2, 16, (-2530));
      Node node2 = node1.srcrefTree(node0);
      node0.addChildToFront(node1);
      node2.isExprResult();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node node3 = Node.newString(4338, "Not declared as a type name");
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(110, node0);
      node1.getChildBefore(node0);
      Node.newString(4095, "com.google.javascript.rhino.jstype.NoResolvedType", 55, 3000);
      Node node2 = Node.newNumber((double) 31);
      node1.getStaticSourceFile();
      node1.toStringTree();
      node2.cloneNode();
      node1.isObjectLit();
      node1.srcref(node2);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("*&LDf1");
      Node node1 = Node.newNumber((double) 49, 111, 57);
      Node node2 = new Node(39, node1, node0, node1, 38, 14);
      Node node3 = node2.cloneTree();
      node2.addChildBefore(node1, node3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(301.0, 114, 114);
      Node node1 = Node.newString("", (-3003), 51);
      Node node2 = Node.newString("rhino_ast.java.com.google.javascript.rhino.Messages");
      node2.isFunction();
      node0.getDouble();
      Node.newString(51, "", 2963, (-587));
      Node node3 = node2.copyInformationFromForTree(node2);
      node3.isDec();
      node1.toString(true, true, true);
      node1.getJsDocBuilderForNode();
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getProp(116);
      node0.isIf();
      node0.isName();
      Node node1 = Node.newNumber(0.5);
      node0.checkTreeEquals(node1);
      Object object0 = new Object();
      node1.putProp(56, object0);
      Node.newString(0, "<OT7$xVmpt=dGawLn", 1938, 502);
      Node node2 = new Node(502);
      Node node3 = new Node(102, node1, node2, 47, 36);
      node3.copyInformationFromForTree(node1);
      Node node4 = Node.newString(54, "I;V@5@+je");
      node4.isWith();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(335, "CharMatcher.and(");
      Node node1 = new Node(51, node0);
      Node node2 = node0.srcrefTree(node1);
      node2.getString();
      node2.hasChildren();
      node0.isFunction();
      Node node3 = new Node(719);
      node1.hasChild(node0);
      node3.children();
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(335, "CharMatcher.and(");
      Node node1 = new Node(51, node0);
      Node node2 = node0.srcrefTree(node1);
      node2.getString();
      node1.hasChildren();
      node1.isFunction();
      Node node3 = new Node(49164);
      node2.hasChild(node0);
      node1.children();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber((double) 21);
      node0.putBooleanProp(93, true);
      node0.toString();
      node0.isInstanceOf();
      int int0 = (-2407);
      int int1 = 808;
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(")yxrKS]\"K", 21, (-3207));
      Node node1 = Node.newString(")yxrKS]\"K");
      node1.isLocalResultCall();
      node1.getProp(43);
      node0.putProp(42, ")yxrKS]\"K");
      node1.isInstanceOf();
      Node node2 = new Node(1, node0);
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 12);
      Node node1 = Node.newNumber((-1230.7210844697593), 1, 54);
      node0.isEquivalentTo(node1);
      node0.getCharno();
      Node node2 = new Node(12, node1, node0, node1);
      node2.isIf();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.putProp((-1359), node2);
      node1.mayMutateArguments();
      node0.checkTreeEquals(node1);
      node1.replaceChildAfter(node2, node2);
      int int0 = 32;
      node1.setSideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -1359
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node0.isFor();
      node0.isVar();
      node0.isNE();
      node0.isVoid();
      node0.isExprResult();
      node0.getQualifiedName();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setThrows();
      node0.isCatch();
      Node node1 = new Node(32, node0, node0, node0, 11, 15);
      Node node2 = Node.newString("");
      node1.isNoSideEffectsCall();
      node0.isAnd();
      node0.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 96, 290);
      Node.newNumber((double) 50, 12, 12);
      JSType.toMaybeFunctionType((JSType) null);
      node0.addSuppression("Named type with empty name component");
      Node node1 = new Node(0, node0);
      node1.getString();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("RANGE_ERROR_FUNCTION_TYPE", 12, 8232);
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node1 = Node.newNumber((double) 38);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node1.isStringKey();
      node1.isUnscopedQualifiedName();
      node2.getAncestor((-1313));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("");
      Node node1 = new Node(787, node0);
      Node node2 = new Node(40, node1, node1, node0);
      node2.getChildBefore(node0);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, "26gacGAiJ", 56, (-2653));
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      Node node2 = Node.newNumber((-1.0));
      node1.isEquivalentToShallow(node2);
      Node node3 = Node.newString("26gacGAiJ", 36, 31);
      node3.putBooleanProp(2, false);
      node1.mayMutateGlobalStateOrThrow();
      node3.isNumber();
      Node node4 = new Node(154, node1, 36, 37);
      node2.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags6.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags8.valueOf();
      node_SideEffectFlags7.setThrows();
      node0.isCatch();
      Node node1 = new Node(29, node0, node0, node0, 29, 48);
      Node node2 = Node.newString("");
      node1.isNoSideEffectsCall();
      node2.isAnd();
      node0.srcrefTree(node1);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
      node_NodeMismatch0.equals("free_call");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("", 66, 762);
      node0.setLineno(762);
      node0.getProp(762);
      node0.isBlock();
      Node node1 = Node.newNumber(1.0, 47, 36);
      node0.checkTreeEquals(node1);
      Node node2 = new Node(192);
      node2.hasChild(node1);
      node1.children();
      node2.isDec();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      node0.isOptionalArg();
      node0.isFor();
      node0.isVar();
      node0.isNE();
      node0.isVoid();
      node0.isEquivalentTo(node0);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("", 40, 762);
      node0.setLineno(762);
      node0.getProp(762);
      node0.isBlock();
      Node node1 = Node.newNumber(1.0, 47, 36);
      node0.checkTreeEquals(node1);
      Node node2 = new Node(192);
      node2.hasChild(node1);
      node2.isFalse();
      node2.isAdd();
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.isEquivalentToTyped((Node) null);
      int int0 = 100;
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPosition(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, "26gacGAiJ", 56, (-2653));
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      Node.newNumber((-1.0));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node((-427), node2, node0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node3;
      nodeArray0[4] = node2;
      nodeArray0[5] = node2;
      nodeArray0[6] = node2;
      nodeArray0[7] = node3;
      Node node4 = new Node(2, nodeArray0, 57, 1801);
      node4.isFalse();
      nodeArray0[2].isAdd();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("1k?``o]_`");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber((-2280.0776), 39, 170);
      Node node2 = node1.srcrefTree(node0);
      node0.addChildToFront(node1);
      node2.isExprResult();
      node2.isAnd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node0.putIntProp(225, 0);
      node0.hasMoreThanOneChild();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(1160, node0, node0, node0, 8, (-516));
      node0.addChildrenToBack(node1);
      Node node2 = Node.newString("");
      node0.addChildrenToBack(node2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 105;
      Node node0 = new Node(105, 105, 105);
      int int1 = 16777216;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int2 = 39;
      node0.getDirectives();
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.putIntProp(int1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> 105 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4+55KhliT'");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString((-605), "2aVak", (-605), (-605));
      Node node1 = Node.newString("2aVak", 29, 51);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.addChildToBack(node1);
      node2.getIntProp((-2247));
      node2.isEquivalentToShallow(node0);
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node3 = node2.detachFromParent();
      node0.isOnlyModifiesArgumentsCall();
      node0.isNE();
      node0.isBreak();
      node1.isFunction();
      node1.isDebugger();
      node2.isNull();
      int int0 = (-1718);
      node2.useSourceInfoFrom(node0);
      Node.extractCharno(int0);
      // Undeclared exception!
      try { 
        node3.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      node0.getDouble();
      node0.addSuppression((String) null);
      Node node1 = Node.newString(32, (String) null, 111, 32);
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      double double0 = 49.0;
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.putIntProp(745, (-555));
      node0.isScript();
      node0.isAssignAdd();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getProp(3406);
      node0.isIf();
      Node node1 = null;
      node0.checkTreeEquals((Node) null);
      int int0 = 2347;
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(732, (-2895), (-2895));
      Node node1 = new Node(153, node0, node0, node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setOptionalArg(false);
      node0.isEquivalentTo(node1, false, true, false);
      node0.getDouble();
      Node node2 = node1.cloneNode();
      node2.cloneTree();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getThrownTypes();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      // Undeclared exception!
      try { 
        node0.setDirectives(set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 732
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node_SideEffectFlags5.clearAllFlags();
      Node node1 = new Node(46, node0, (-2153), 43);
      Node node2 = node0.copyInformationFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node1.cloneNode();
      node2.isBreak();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = new Node(4095, node2, node0, node1, node1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(1160, 335, 1160);
      node0.isComma();
      node0.getProp(27);
      node0.isCase();
      Node.newNumber(201.569115993649);
      node0.getCharno();
      Node node1 = Node.newString(38, "RecordProperty associated with a property should not be null!", 56, 1324);
      node1.isIf();
      Node node2 = new Node(442, node0, 8, 4);
      Node.newString("Object#Element");
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags7.setMutatesThis();
      node0.putIntProp((-886), 0);
      node0.hasMoreThanOneChild();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getDouble();
      node0.addSuppression("26gacGAiJ");
      Node node1 = Node.newString(38, ":G)>", 56, (-2653));
      node1.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      int int0 = Node.DIRECTIVES;
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node0.isInstanceOf();
      node1.isName();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("1k?``o]_`");
      node0.setInputId(inputId0);
      Node node1 = node0.srcrefTree((Node) null);
      node1.hasChildren();
      // Undeclared exception!
      try { 
        node0.isFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "-nLkJF!F9{J3:";
      Node node0 = Node.newString("-nLkJF!F9{J3:");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setVarArgs(true);
      linkedHashSet0.add("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-nLkJF!F9{J3:");
      HashSet<String> hashSet0 = new HashSet<String>(linkedHashSet0);
      hashSet0.removeAll(linkedHashSet0);
      hashSet0.add("EvalError");
      hashSet0.add("-nLkJF!F9{J3:");
      node0.setDirectives(hashSet0);
      Node node1 = new Node(51, node0, node0, 56, 83);
      node1.getInputId();
      node0.addChildrenAfter(node1, node1);
      node1.isQuotedString();
      node0.isThis();
      int int0 = 15;
      Node.extractLineno(int0);
      node1.isNE();
      // Undeclared exception!
      try { 
        Node.newString(node0.SIDE_EFFECTS_ALL, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString("0&g-XsOgwcX@gL4", 335, 335);
      int int0 = Node.QUOTED_PROP;
      Node node1 = new Node(2, node0, 38, 15);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.cloneNode();
      boolean boolean0 = node1.isBreak();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getString();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      // Undeclared exception!
      try { 
        node1.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString((-4649), ": ");
      Node node1 = new Node(51, node0);
      Node node2 = node1.srcrefTree(node0);
      node2.hasChildren();
      node0.isFunction();
      node1.isFunction();
      Node node3 = new Node(31);
      Iterable<Node> iterable0 = new PriorityQueue<Node>();
      node2.getExistingIntProp(54);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(153, (-2895), (-2895));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setOptionalArg(false);
      node0.isEquivalentTo(node0, false, false, false);
      node0.getDouble();
      Node node1 = node0.cloneNode();
      Node node2 = node1.cloneTree();
      node2.getChildBefore(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      // Undeclared exception!
      try { 
        jSDocInfo0.getThrownTypes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("w|v::");
      node0.isLocalResultCall();
      Node node1 = Node.newString("Object#Element", 4095, (-2494));
      node1.getProp((-3357));
      node1.putProp(31, "w|v::");
      Node node2 = new Node(1790, node1, node1, node1, node0, 38, 95);
      node2.getChildAtIndex(2499);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node0 = Node.newString(21, "B3A");
      node0.getLineno();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      Node node1 = new Node(32, nodeArray0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(3412);
      Node node1 = new Node(245, node0, node0, node0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)119;
      node1.getSourceFileName();
      byteArray0[3] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = Node.newNumber((double) 36, 32, 43);
      node2.setLineno(24576);
      Node node3 = node1.getChildBefore(node2);
      node0.getJSDocInfo();
      node1.isFor();
      node0.isRegExp();
      node0.addChildBefore(node2, node3);
      node3.getLastChild();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString((-4649), ": ");
      Node node1 = new Node(51, node0);
      Node node2 = node1.srcrefTree(node0);
      node2.hasChildren();
      node0.isFunction();
      node1.isFunction();
      Node node3 = new Node(31);
      node1.children();
      node3.cloneTree();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>();
      node1.children();
      node3.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(536870912, nodeArray0, 120, 536870912);
      Node node1 = new Node(536870912, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newNumber(1418.431551989161);
      Node node3 = Node.newNumber((double) 42, 43, 15);
      node0.isAssign();
      node1.getQualifiedName();
      Node node4 = new Node(36, node1, node3, node2, node3, 0, 1);
      Node node5 = Node.newNumber((double) 12);
      Node node6 = node4.srcref(node5);
      node0.isAnd();
      node6.isObjectLit();
      Node node7 = new Node(2, node1, node1, node0, 2100, 55);
      Node.newNumber((double) node5.EMPTY_BLOCK, node7.DIRECT_EVAL, node4.NO_SIDE_EFFECTS);
      node1.addChildToFront(node6);
      node1.isExprResult();
      node5.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node((-582), (-582), (-582));
      node0.getDouble();
      String string0 = "jVOoY^4cE3Wv,QI9p";
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("*&LDf1");
      node0.isLocalResultCall();
      node0.getProp(40);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("*&LDf1");
      node_FileLevelJsDocBuilder0.append("toString");
      Node node1 = null;
      node0.addChildrenToBack((Node) null);
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = new Node(2972, 2972, 2972);
      Node node1 = new Node(2972, node0, node0, node0);
      node0.isLabelName();
      node0.isDefaultCase();
      node0.isVar();
      Node node2 = Node.newNumber((double) 43);
      node2.isNE();
      node0.isVoid();
      node2.isExprResult();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "V";
      Node node0 = Node.newString("V");
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble((-3540));
      OutputStream outputStream0 = null;
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(32, "CharMatcher.and(");
      Node node1 = new Node((-2187), node0);
      Node node2 = node1.srcrefTree(node0);
      node0.hasChildren();
      node1.isFunction();
      Node node3 = new Node(175, node2, 55, 37);
      node3.isFunction();
      Node node4 = new Node(49);
      node1.children();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("Object#Element");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber(0.0, 3457, 15);
      Node node2 = new Node(88, node0, node0, node0);
      Node node3 = node2.srcrefTree(node0);
      node2.addChildToFront(node3);
      node2.isExprResult();
      node0.isAnd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node3.putIntProp((-3440), (-29));
      node1.hasMoreThanOneChild();
      node3.isIn();
      node2.isBreak();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 96, 290);
      Node node1 = Node.newString("[rj3J6f#k]GCTDc?", 83, 48);
      node0.isLocalResultCall();
      node1.getProp(1363);
      node1.isCase();
      Node node2 = Node.newNumber((double) 47);
      node0.getCharno();
      Node.newString(12, "no next sibling.", 0, 103);
      node2.isIf();
      Node node3 = new Node(30, node2, (-257), 300);
      Node node4 = Node.newString("no next sibling.");
      node3.addChildrenToBack(node4);
      Node.newString("[rj3J6f#k]GCTDc?");
      node1.isWith();
      node3.getLastChild();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("A)Y?QpME028aJc");
      Node node1 = new Node((-1370), node0, node0);
      node1.setOptionalArg(false);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.clonePropsFrom(node1);
      node0.isRegExp();
      node1.setQuotedString();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString("*&U>f1");
      node0.isLocalResultCall();
      Object object0 = new Object();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("?k#{xW3^QGqsWh");
      node_FileLevelJsDocBuilder0.append("toString");
      Node node1 = new Node(37, (-4129), 213);
      node0.clonePropsFrom(node1);
      String string0 = "VE6qx>5?t\"WUN)`DI3z";
      node1.setString(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.useSourceInfoIfMissingFrom((Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node1.VAR_ARGS_NAME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node_FileLevelJsDocBuilder0.append("+{");
      node0.isNot();
      node0.isVar();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString("com.google.common.collect.AbstractIndexedListIterator");
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.addChildToBack(node2);
      Node node3 = Node.newString("com.google.common.collect.AbstractIndexedListIterator", 46, 1);
      node3.getIntProp(48);
      node1.isEquivalentToShallow(node3);
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node4 = node2.detachFromParent();
      node2.isOnlyModifiesArgumentsCall();
      node1.isNE();
      node2.isBreak();
      node3.isFunction();
      node2.isDebugger();
      Node node5 = new Node(47, node3);
      node5.isNull();
      Node node6 = node2.useSourceInfoFrom(node0);
      Node.newNumber(0.7, 30, 54);
      Node.extractCharno(32);
      node1.toString();
      node6.siblings();
      node5.isStringKey();
      Node node7 = new Node(2165, node3, node0);
      node3.isFalse();
      node4.isAdd();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setLineno(105);
      node0.isOptionalArg();
      node0.cloneNode();
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.putProp(53, (Object) null);
      Node node1 = Node.newNumber(1042.576513);
      node1.isEquivalentToShallow(node0);
      Node node2 = new Node(56, node1, node1, node1);
      node2.isQualifiedName();
      node2.isGetterDef();
      node1.isOnlyModifiesArgumentsCall();
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node((-735), node0);
      node1.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PRIVATE;
      ImmutableList.of(jSDocInfo_Visibility0, jSDocInfo_Visibility0);
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter2, false);
      jSTypeRegistry1.createFunctionType((JSType) null, node1);
      jSTypeRegistry0.createOptionalNullableType((JSType) null);
      jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getSourceOffset();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      node0.removeProp(510);
      Node node1 = new Node(26, node0);
      node1.getAncestors();
      node1.mayMutateArguments();
      node1.removeChildAfter(node0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, 262144, 0);
      node1.siblings();
      Node node2 = node1.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.cloneTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString(335, "CharMatcher.and(");
      Node node1 = new Node(51, node0);
      Node node2 = node0.srcrefTree(node1);
      node0.hasChildren();
      node2.isFunction();
      node2.isFunction();
      Node node3 = new Node(57);
      node3.toString(false, false, false);
      node0.children();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      jSTypeRegistry0.forwardDeclareType("com.google.common.base.CharMatcher$7");
      node0.isOptionalArg();
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) templateType0, false, jSTypeArray0);
      stack0.add((JSType) functionType0);
      node0.isFor();
      node0.isVar();
      node0.isString();
      node0.hasChild(node0);
      Node node1 = jSTypeRegistry0.createParameters((JSType[]) null);
      node0.isEquivalentTo(node1);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = node0.cloneNode();
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      nodeArray0[8] = node1;
      Node node2 = new Node(30, nodeArray0, 21, 37);
      node2.getAncestors();
      // Undeclared exception!
      try { 
        node2.isTry();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node.newString("}L7f#M;jpx", 96, 290);
      Node node0 = Node.newNumber((double) 50, 12, 12);
      JSType.toMaybeFunctionType((JSType) null);
      node0.isStringKey();
      node0.isUnscopedQualifiedName();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A)Y?QpME028aJc");
      Node node1 = Node.newString(19, "A)Y?QpME028aJc", 2076, 19);
      node1.isIf();
      Node node2 = new Node(43, node0, 56, 47);
      Node node3 = Node.newString("Object#Element");
      node2.isThis();
      node3.isNew();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) vector0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("Object#Key");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber((double) 4, 51, 248);
      Node node2 = new Node(1, node0, node1, node1);
      Node node3 = node0.srcrefTree(node2);
      node3.addChildToFront(node1);
      // Undeclared exception!
      try { 
        node0.isExprResult();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(1292, "The new child node already has a parent.", 49, 86);
      node1.isIf();
      Node node2 = new Node(8, node0, 552, (-2146));
      Node node3 = Node.newString("~q>8+3S3ti=?(");
      node3.setSideEffectFlags(52);
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newNumber((-2461.3615593));
      node0.putBooleanProp(93, false);
      node0.isEquivalentToTyped(node0);
      node0.isVar();
      node0.isNE();
      node0.isVoid();
      node0.isExprResult();
      node0.getQualifiedName();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(674, node0, node0);
      node1.setOptionalArg(false);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.clonePropsFrom(node1);
      node2.isRegExp();
      node1.setQuotedString();
      int int0 = 122;
      Node[] nodeArray0 = new Node[3];
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = node0.cloneNode();
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node1.putProp(57, simpleErrorReporter0);
      Node.newNumber((double) 38);
      node1.isEquivalentToShallow(node0);
      Node node2 = new Node(43, node1, node0, node0, 51, 32);
      node0.isQualifiedName();
      node2.isGetterDef();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getProp(49);
      node0.hasOneChild();
      Node node1 = Node.newNumber((-931.23));
      node1.checkTreeEquals(node0);
      node1.putProp((-1370), (Object) null);
      Node node2 = Node.newString(53, "Object#Element", 47, 53);
      Node node3 = new Node(86);
      node0.getProp((-2672));
      Node node4 = new Node(54, node3, node2, (-2752), 112);
      Node node5 = node4.copyInformationFromForTree(node1);
      node5.isFromExterns();
      node3.isWith();
      node5.setSourceEncodedPositionForTree((-1018));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      Node node1 = Node.newString(19, "A)Y?QpME028aJc", 2076, 19);
      node1.isIf();
      Node node2 = Node.newNumber((-2547.20390879891));
      node2.setSourceEncodedPositionForTree(306654252);
      node1.isGetElem();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber(3130.63746116);
      Node node1 = new Node(0, node0, node0);
      boolean boolean0 = true;
      node1.putBooleanProp(31, true);
      node1.cloneTree();
      node1.checkTreeEqualsImpl(node0);
      int int0 = (-3292);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", node0, immutableList0);
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) functionType0);
      TemplateType templateType2 = templateType1.toMaybeTemplateType();
      jSTypeArray0[0] = (JSType) templateType2;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSDocInfo0.getEnumParameterType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getInputId();
      node0.detachChildren();
      node0.isNull();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node0.isAssign();
      node0.getQualifiedName();
      Node node2 = new Node(54, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node3 = new Node(42, 974, 2);
      Node node4 = new Node(102, node2);
      Node node5 = node3.clonePropsFrom(node4);
      node5.setString("Object#Key");
      int int0 = 62;
      Node node6 = new Node(node4.SIDE_EFFECT_FLAGS, node3, int0, node2.CHANGE_TIME);
      // Undeclared exception!
      try { 
        node6.addChildrenToBack(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS 974 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.setThrows();
      node0.isCatch();
      Node node1 = new Node(32, node0, node0, node0, 11, 15);
      node1.copyInformationFromForTree(node0);
      node0.isAnd();
      Node.newString(42, "", 35, 54);
      node0.srcrefTree(node0);
      node1.getChildAtIndex(42);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = ".";
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.removeProp(64);
      Node node1 = new Node(8, node0, node0, node0, (-270), 152);
      Node node2 = new Node(47, node1);
      node2.getAncestors();
      node2.mayMutateArguments();
      Node node3 = null;
      Node node4 = node2.removeChildAfter((Node) null);
      node4.useSourceInfoIfMissingFrom(node1);
      int int0 = 43;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber(301.0, 114, 114);
      node0.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<UnknownType> iterator0 = (Iterator<UnknownType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.isLabelName();
      node1.getInputId();
      Node node2 = new Node(50, node0, node0, node0, node1);
      node2.detachChildren();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node3.isNull();
      node1.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.valueOf();
      Node node4 = Node.newString(1046, "The existing child node of the parent should not be null.", 1, 37);
      node4.setString("Object#Key");
      node_SideEffectFlags1.setAllFlags();
      node4.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(86);
      Node.newString(1, "A)Y?QpME028aJc", 0, 31);
      node0.isIf();
      Node node1 = new Node(1, node0, 43, 41);
      Node node2 = Node.newString("+f%C'");
      node2.isThis();
      node2.toString(false, false, false);
      node1.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      Node node0 = Node.newString("A)Y?QpME028aJc");
      Node node1 = new Node((-1370), node0, node0);
      node1.setOptionalArg(false);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = node0.clonePropsFrom(node1);
      node2.getLength();
      node0.isRegExp();
      node1.setQuotedString();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newNumber((-1713.7104));
      Node node1 = Node.newNumber((-317.549325));
      node0.wasEmptyNode();
      node1.toString();
      node0.getChangeTime();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.setSourceFileForTesting("0xiRIP_");
      node0.checkTreeEquals(node1);
      node1.isStringKey();
      node0.isVarArgs();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.putIntProp(54, 39);
      node1.isScript();
      node0.isAssignAdd();
      node0.isNoSideEffectsCall();
      node0.setDouble(36);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = new Node((-2751), node0, node0, node0);
      node1.isInc();
      node1.isExprResult();
      node0.isWhile();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      node0.isScript();
      node0.isAssignAdd();
      Node node1 = new Node(4, node0, node0, node0, 8233, 1293);
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.forwardDeclareType("");
      Node node1 = Node.newNumber((double) 2);
      node1.isOptionalArg();
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.add((JSType) templateType0);
      node0.isFor();
      node0.isVar();
      node1.isString();
      node0.hasChild(node1);
      Node node2 = new Node(48);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      node0.isAssign();
      Node node1 = Node.newString("", 47, 4095);
      node1.getQualifiedName();
      Node node2 = new Node(2, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node3 = new Node(1, 31, 110);
      int int0 = 529;
      ObjectType.cast((JSType) null);
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null);
      templatizedType0.getDisplayName();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node5 = new Node(int0, node4);
      node0.clonePropsFrom(node4);
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newString(": ", 290, 32);
      Node node1 = Node.newNumber((-1.0), 29, 77);
      JSType.toMaybeFunctionType((JSType) null);
      Node node2 = new Node(1089, node0);
      node1.addChildToFront(node2);
      node2.isExprResult();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isExprResult();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      node0.isOptionalArg();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      node0.getAncestors();
      node0.isTry();
      node0.isDec();
      Node node1 = Node.newString(36, "");
      node1.getAncestor(0);
      node1.getType();
      node0.isExprResult();
      node0.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.getInputId();
      node0.getProp(3443);
      node0.hasOneChild();
      Node node1 = Node.newNumber((double) 30);
      node1.checkTreeEquals(node0);
      Integer integer0 = new Integer(2);
      node0.putProp((-3248), integer0);
      Node.newString(50, "pAGpq)^czEF$3!_e{8>", 21, 2);
      Node node2 = new Node(43);
      Node node3 = new Node(97, node2, node2, 36, 26);
      Node node4 = node2.copyInformationFromForTree(node1);
      node4.isFromExterns();
      node4.isWith();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isCase();
      node0.detachChildren();
      node0.isNull();
      node0.isAssign();
      node0.getQualifiedName();
      Node node1 = new Node(49, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node2 = new Node(0, 231, 15);
      Node node3 = new Node(35, node2);
      node2.clonePropsFrom(node0);
      node1.setString("Object#Key");
      int int0 = 1774;
      Node node4 = new Node(node1.OPT_ARG_NAME, node2, node0.LENGTH, int0);
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString("}L7f#M;jpx", 104, 290);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.add((JSType) null);
      node0.isVar();
      node0.isString();
      Node node1 = Node.newString("}L7f#M;jpx");
      node0.hasChild(node1);
      Node node2 = new Node((-2947));
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber((double) 396, 396, 13);
      Node node1 = new Node(396, node0, (-1899), 0);
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("*&LDf1");
      node0.isLocalResultCall();
      Object object0 = new Object();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("toString");
      node_FileLevelJsDocBuilder0.append("l9#;/");
      node0.isScript();
      Node node1 = Node.newString("<-", 4, 122);
      Node node2 = Node.newString("toString");
      node2.isNoSideEffectsCall();
      node1.isAnd();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals("toString");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("f^dM~[ua8I}PR", 51, (-4649));
      int int0 = Node.QUOTED_PROP;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(0+N{");
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags7.setReturnsTainted();
      node_SideEffectFlags3.valueOf();
      node_SideEffectFlags5.setThrows();
      node0.isCatch();
      Node node1 = new Node(1, node0, node0, node0, 29, 51);
      node1.isIf();
      node0.isIn();
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(1077);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node0.isEquivalentToShallow(node0);
      node0.hasOneChild();
      node0.isExprResult();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = new Node(3513, node0, 110, (-937));
      node0.isQualifiedName();
      node1.isGetterDef();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      node0.isOptionalArg();
      node0.isFor();
      node0.isNE();
      Node node1 = new Node(1163, node0, node0, node0);
      node1.isVoid();
      node1.isEquivalentTo(node0);
      node1.getQualifiedName();
      Node.mergeLineCharNo(26, 57);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-3207);
      Node node0 = Node.newString((-3207), "!6b25xLQdAB", 2846, (-3207));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isContinue();
      node0.isEmpty();
      node0.setSourceFileForTesting("!6b25xLQdAB");
      node0.getSourceFileName();
      node0.toStringTree();
      Node node1 = node0.getAncestor(int0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node1.STATIC_SOURCE_FILE);
      // Undeclared exception!
      try { 
        node1.isNoSideEffectsCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3207
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      node0.isScript();
      Node node1 = node0.cloneNode();
      node1.getChildBefore(node0);
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString(": ", 290, 32);
      Node node1 = Node.newNumber((-1.0), 29, 77);
      JSType.toMaybeFunctionType((JSType) null);
      node0.setSourceEncodedPositionForTree(2087);
      node1.isGetElem();
      node1.isNew();
      node0.setQuotedString();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("Object#Element");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber(0.0, 3457, 15);
      Node node2 = new Node(88, node0, node0, node0);
      Node node3 = node2.srcrefTree(node0);
      node2.addChildToFront(node3);
      node2.isExprResult();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node3.putIntProp((-3440), (-29));
      node3.isEquivalentTo(node1, false, false, false);
      node0.isLabel();
      node0.isOnlyModifiesArgumentsCall();
      node3.getJSDocInfo();
      node3.isParamList();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(12);
      node0.putIntProp(39, (-634));
      Node node1 = new Node((-2101), node0, 0, 100);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = new Node(83);
      node2.srcref(node1);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("Object#Element");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber(0.0, 3457, 15);
      Node node2 = new Node(88, node0, node0, node0);
      Node node3 = node2.srcrefTree(node0);
      node2.addChildToFront(node3);
      node2.isExprResult();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node3.putIntProp((-3440), (-29));
      node3.isEquivalentTo(node1, false, false, false);
      node3.isIn();
      node2.isBreak();
      node2.isVar();
      node1.mayMutateArguments();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(153);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setOptionalArg(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      node0.isEquivalentTo(node0, true, false, false);
      node0.getDouble();
      Node node1 = node0.cloneNode();
      node1.getChildBefore(node0);
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node0 = new Node(335, 335, 335);
      Node node1 = new Node(51, node0);
      Node node2 = node0.srcrefTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      int int0 = Node.DIRECTIVES;
      node2.isCase();
      node0.detachFromParent();
      node0.isBreak();
      node2.isDebugger();
      Node node3 = new Node((-2870), node2, node1, 5236, 2611);
      node3.isNull();
      Node.extractCharno(2978);
      node1.toString();
      node2.getQualifiedName();
      node0.isLabel();
      Node.extractLineno(12);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(3004, (-488), 3004);
      Node node1 = new Node(1558, node0, node0);
      node1.isContinue();
      node1.setVarArgs(false);
      node1.addChildrenToFront(node0);
      node1.isDelProp();
      node1.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.getSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86);
      boolean boolean0 = node0.isScript();
      node0.isAssignAdd();
      Node node1 = new Node(1969, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(120, (Node) null, node2, (Node) null, 154, 2);
      node3.isDec();
      boolean boolean1 = false;
      boolean boolean2 = true;
      node2.toString(boolean1, boolean0, boolean2);
      // Undeclared exception!
      try { 
        node1.getJsDocBuilderForNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2~G,>?7Vv^");
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("2~G,>?7Vv^", (-3402), (-3402));
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      node0.isCatch();
      node0.isSwitch();
      Node node1 = new Node((byte)42, node0, (-165), (-249));
      node0.isEquivalentTo(node1);
      node1.getQualifiedName();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86, 86, 86);
      node0.isScript();
      node0.isAssignAdd();
      node0.setSourceEncodedPositionForTree((-2194));
      Node node1 = new Node(15);
      Node node2 = node0.clonePropsFrom(node1);
      node2.setCharno(35);
      node0.isGetElem();
      node1.isNew();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 536870912, 536870912, 536870912);
      Node node1 = new Node(32, node0, node0, node0, node0, 32, 4095);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2546));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      int int0 = Node.DIRECTIVES;
      node1.isCase();
      Node node2 = node1.detachFromParent();
      node0.isBreak();
      Node.newString("<M", 42, 2512);
      node1.isOnlyModifiesThisCall();
      node2.isNull();
      Node.extractCharno(116);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.toString();
      node3.getQualifiedName();
      node0.isLabel();
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("Object#Element");
      node0.setInputId(inputId0);
      Node node1 = Node.newNumber(0.0, 3457, 15);
      Node node2 = new Node(39, node0, node0, node0);
      Node node3 = node2.srcrefTree(node0);
      node2.addChildToFront(node3);
      node2.isExprResult();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node3.putIntProp((-3440), (-29));
      node3.isEquivalentTo(node1, false, false, false);
      node0.isLabel();
      node0.isOnlyModifiesArgumentsCall();
      node3.getJSDocInfo();
      node3.isParamList();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = node0.cloneNode();
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      node0.putIntProp(63, 49);
      node1.isEquivalentTo(node0, true, true, true);
      node0.isIn();
      Node node2 = Node.newString((String) null, 57, 52);
      node2.isBreak();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      node0.isOptionalArg();
      node0.isFor();
      node0.isNE();
      node0.isVoid();
      node0.isEquivalentTo(node0);
      node0.getQualifiedName();
      node0.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(125);
      node0.type = 125;
      node0.setLineno(932);
      InputId inputId0 = new InputId(".");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node0.putIntProp(4238, (-2082));
      node0.isScript();
      node0.isEmpty();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      Node node1 = new Node((-363), node0);
      Node node2 = node1.srcrefTree(node0);
      node2.hasChildren();
      node2.isFunction();
      node1.isFunction();
      Node node3 = new Node(20);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node4 = new Node(52, nodeArray0, 55, 4095);
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString(280, "^b}r_30}ON<wln", 280, 280);
      Node node1 = new Node(280, node0, 2138, 49);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.isEquivalentTo(node2, false, true, false);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(86, 86, 86);
      node0.hasChild(node0);
      node0.toString();
      node0.getChangeTime();
      node0.isTrue();
      node0.setSourceFileForTesting("can't use .skipNulls() with maps");
      Node node1 = new Node(1614, (Node[]) null);
      node0.checkTreeEquals(node1);
      node1.isStringKey();
      node0.isVarArgs();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      node0.isOptionalArg();
      InputId inputId0 = new InputId(".");
      inputId0.toString();
      node0.putProp((-260), inputId0);
      Node node1 = Node.newNumber((double) 53);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(36, node0, node0, node1);
      node2.isTypeOf();
      node2.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      int int0 = 26;
      Node node0 = Node.newString("com.google.javascript.rhino.Node");
      int int1 = Node.QUOTED_PROP;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node");
      node0.replaceChildAfter((Node) null, (Node) null);
      int int2 = 510;
      node0.removeProp(int2);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4+55KhliT'");
      Node node0 = Node.newString("2aVak");
      Node node1 = Node.newNumber((-2461.3615593), 49, (-839));
      Node node2 = Node.newString(13, "U5Y;g`es<T71F0L");
      Node node3 = new Node(3012, node0, node2, node1, 47, 55);
      Node.newString("toString", 2422, 4095);
      Node node4 = node3.cloneTree();
      node4.getStaticSourceFile();
      node1.useSourceInfoIfMissingFromForTree(node2);
      node3.setStaticSourceFile((StaticSourceFile) null);
      Node node5 = new Node(38, node0, node4, node0, node2, 4, 43);
      node5.addChildBefore(node2, node3);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "<-\\";
      Node node0 = Node.newString(155, "<-");
      Node node1 = new Node(2461, node0, node0, node0, node0, 43, 12);
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.isLabel();
      Node node3 = node0.getParent();
      node2.addChildrenAfter(node1, node0);
      node2.setSourceFileForTesting(string0);
      node2.srcref(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber(301.0, 114, 114);
      node0.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ImmutableList.of();
      node0.setVarArgs(true);
      node0.isGetProp();
      node0.isNE();
      node0.isScript();
      node0.setString("s+Lrs");
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.getSourceOffset();
      node0.isCast();
      InputId inputId0 = new InputId("Object#Element");
      node0.setInputId(inputId0);
      Node node1 = new Node(38, 2, 51);
      Node node2 = new Node(88, node0, node0, node0);
      Node node3 = node2.srcrefTree(node0);
      node2.addChildToFront(node3);
      node3.hasChild(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node3;
      node2.useSourceInfoIfMissingFrom(node0);
      Node node4 = new Node(50, 1211, 4095);
      nodeArray0[1] = node4;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      Node node5 = new Node((-364), nodeArray0);
      node3.replaceChildAfter(nodeArray0[4], nodeArray0[1]);
      nodeArray0[0].getDirectives();
      nodeArray0[4].isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(125);
      node0.type = 125;
      Node node1 = Node.newString(12, ".");
      node1.isLabelName();
      node1.isDefaultCase();
      node0.isVar();
      node1.isNE();
      node0.isExprResult();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dI");
      node0.setSourceEncodedPosition(1024);
      node0.setLineno(1024);
      node0.isOptionalArg();
      node0.isFor();
      node0.isNE();
      node0.isVoid();
      Node node1 = Node.newNumber((double) 1024);
      Node node2 = new Node(4095, node1, 53, 40);
      node2.isEquivalentTo(node1);
      node2.getQualifiedName();
      node2.isSetterDef();
      Node node3 = new Node((-708), node2, node1, node0, node2);
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setSourceEncodedPosition(100);
      node0.type = 100;
      node0.setLineno(932);
      node0.isOptionalArg();
      InputId inputId0 = new InputId(".");
      inputId0.toString();
      node0.putProp((-260), inputId0);
      Node node1 = Node.newNumber((double) 53);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(36, node0, node0, node1);
      node2.addChildBefore(node1, node1);
      node2.isTypeOf();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node((-2725), (-3207), 1058);
      Node node1 = new Node((-2725), node0, node0, node0);
      Node.newString("<-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.cloneTree();
      Node node2 = new Node((-2725), node1, node1);
      node2.isNoSideEffectsCall();
      node0.getNext();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString(".");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node0.setSourceEncodedPosition(206);
      node0.setLineno((-1355));
      node0.isOptionalArg();
      node0.isFor();
      node0.isNE();
      node0.isVoid();
      Node node1 = Node.newNumber(1.2);
      node0.isEquivalentTo(node1);
      node1.getQualifiedName();
      node1.isSetterDef();
      Node node2 = new Node(16, node1, node1, node1);
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(153);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node node1 = node0.cloneNode();
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      node1.putIntProp(153, 2285);
      node0.isEquivalentTo(node1, true, true, false);
      node1.isIn();
      Node.newString("Object#Key", 124, (-4096));
      node0.isBreak();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(0, "*&LDf1");
      node0.isIf();
      Node node2 = new Node(4337, node0, 3199, 39);
      Node node3 = Node.newString("*&LDf1", 49, 57);
      node2.isThis();
      node0.copyInformationFrom(node1);
      node3.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber((-857.834061363954), 2771, (-140));
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.setThrows();
      node0.isCatch();
      Node node1 = new Node(32, node0, node0, node0, 15, 15);
      node0.isAnd();
      node0.srcrefTree(node0);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString((-2194), "X", (-2194), 823);
      node0.setSourceEncodedPositionForTree((-2194));
      Node node1 = new Node(1911);
      node0.clonePropsFrom(node1);
      node1.setCharno(2484);
      node0.isGetElem();
      node1.isNew();
      node0.isReturn();
  }
}
