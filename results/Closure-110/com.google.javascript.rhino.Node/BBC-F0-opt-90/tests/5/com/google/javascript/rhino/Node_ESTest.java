/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 01:21:36 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0, (Node[]) null);
      // Undeclared exception!
      try { 
        node0.isOptionalArg();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "oUm:W)WAAS<=H`V;";
      Node node0 = Node.newString(0, "oUm:W)WAAS<=H`V;");
      node0.setLineno(0);
      node0.getDirectives();
      Node node1 = null;
      node0.useSourceInfoIfMissingFrom((Node) null);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 1975;
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(1975, node0, 29, 4095);
      Node node2 = new Node(1056, node1);
      Node node3 = new Node(1975, node1, node1, node2, node0);
      Node node4 = new Node(int0, node3, node2, node3, node3.COLUMN_MASK, node3.VAR_ARGS_NAME);
      int int1 = (-1971);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1637), (-1637), (-1637));
      Node node1 = new Node((-1637), node0, node0, node0, node0);
      node1.setLength((-2198));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("", 0, (-1229));
      node0.isNE();
      Node node1 = Node.newString((-883), "g9:bL.&;XTl", 0, 0);
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 3393;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(0, "V~I<Dh5y]nv%W");
      boolean boolean0 = node0.isNumber();
      node0.isNoSideEffectsCall();
      boolean boolean1 = node0.isOr();
      Node node1 = node0.getAncestor(0);
      node1.removeChild(node0);
      node1.type = node0.IS_DISPATCHER;
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(304, 304, 304);
      node0.getDouble();
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // QMARK 304 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1526));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString(0, "O~x'w", 0, 0);
      node0.isRegExp();
      node0.isNE();
      node0.putIntProp(63, 63);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setMutatesArguments();
      boolean boolean0 = node0.isArrayLit();
      node_SideEffectFlags3.setAllFlags();
      Node node1 = Node.newString((-247), "FT{$):|xN'>", (-263), 8);
      Node node2 = node1.clonePropsFrom(node0);
      node_SideEffectFlags4.setMutatesGlobalState();
      node1.checkTreeEquals(node0);
      Node node3 = node0.getNext();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isStringKey();
      node3.isQuotedString();
      node1.setWasEmptyNode(boolean0);
      // Undeclared exception!
      try { 
        node2.isOptionalArg();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -247
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber((double) 634, 0, 0);
      Node node1 = new Node(634, node0, node0, (-536870912), 13);
      node1.setCharno(2033);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isName();
      node0.getChangeTime();
      node0.isRegExp();
      node0.isWhile();
      Node node1 = new Node(54, 42, (-111));
      node0.hasChild(node1);
      node1.getType();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString(0, "{JfyH;^WN)]IrOFq", 0, (-2397));
      node0.putIntProp(0, 49);
      node0.isTypeOf();
      node0.getIntProp((-2488));
      node0.isDo();
      node0.getFirstChild();
      node0.addChildrenToFront((Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags4.clearAllFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1630), (-1630));
      Node node1 = new Node((-2061), node0, node0, node0, node0, 87855567, 29);
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber((-679.6558721750629), 47, 47);
      node0.detachFromParent();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("[I'Ofx9B5|");
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 32, 54, 0);
      Node node2 = new Node(36, 148, 4095);
      Node node3 = new Node(118, node1, node1, node2, 4, 105);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.close();
      node0.appendStringTree(stringWriter0);
      node3.isInc();
      node3.isThis();
      Node node4 = Node.newString("[I'Ofx9B5|", 0, 48);
      node4.setLength(55);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      Node node1 = new Node((-294), node0, node0, 48, 4096);
      node1.setOptionalArg(true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(202, node0, node0, node0, 40, 57);
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber((-2401.9332));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node((-531), nodeArray0);
      node0.isEquivalentToShallow(node1);
      node0.hasOneChild();
      Node node2 = Node.newNumber((double) 1, 32, 1737);
      String string0 = "com.google.javascript.rhino.Node$NodeMismatch";
      Node.newString(1112, "com.google.javascript.rhino.Node$NodeMismatch", 1, (-3648));
      node0.addChildAfter(node2, node2);
      boolean boolean0 = false;
      node2.setIsSyntheticBlock(boolean0);
      int int0 = (-657);
      Node node3 = Node.newString(string0, node2.COLUMN_MASK, int0);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(node1.IS_NAMESPACE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString((String) null, 2593, 2593);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString(1175, "aK<:'DCU&&%|S%Stk");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<TemplateType> stack0 = new Stack<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) stack0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node0.isEquivalentToShallow(node1);
      node0.mayMutateGlobalStateOrThrow();
      node0.getAncestor(790);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString((-1933), "");
      node0.isFromExterns();
      node0.type = (-1459);
      Node node1 = Node.newNumber(1.0, 4095, 42);
      node1.addChildToBack(node0);
      node1.children();
      node0.setChangeTime(0);
      node0.removeChild(node1);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isSyntheticBlock();
      node0.isDefaultCase();
      node0.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(26, (-1186), 117);
      node0.setLineno(26);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(7);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      int int0 = (-1950);
      Node node0 = Node.newString(32, "tj%GE38", (-1950), 32);
      Node node1 = new Node(32, node0, 2004, (-1177));
      Node[] nodeArray0 = new Node[3];
      node0.setLength(2);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      Node node2 = new Node(57, nodeArray0, 47, 5139);
      int int1 = 130;
      nodeArray0[1].setSourceEncodedPositionForTree(int1);
      Node node3 = new Node(int0, node1, node2, node0.LAST_PROP, node1.POST_FLAG);
      node3.isEquivalentToShallow(nodeArray0[0]);
      // Undeclared exception!
      try { 
        node3.getLength();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1319);
      String string0 = null;
      Node.newString((-2166), (String) null, (-2166), 1453);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("", 0, (-1239));
      Node node1 = new Node(0, node0, node0, node0, 54, 36);
      Node node2 = node0.copyInformationFrom(node1);
      Locale locale0 = Locale.CHINESE;
      node2.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node2.setDirectives(set0);
      Node.newString(1225, "1\";%xJ:|selFyk&", 0, 52);
      node1.isNoSideEffectsCall();
      boolean boolean0 = node1.isFunction();
      node0.isTrue();
      node1.isContinue();
      node0.addChildrenAfter(node2, node2);
      node0.isBlock();
      node2.setVarArgs(boolean0);
      node1.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setAllFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = new Node(0, node0);
      double double0 = 0.5;
      node1.addChildBefore(node0, node0);
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      node0.isCall();
      node0.setOptionalArg(false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      simpleErrorReporter0.warning("msg.jsdoc.function.thisnotobject", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node.extractLineno(0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = null;
      jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      String string0 = "#NUqg}XElY-'7mYe0";
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString(1, "");
      node0.getLength();
      Node node1 = new Node((-2600), node0, node0);
      node0.addSuppression("jsdoc_info");
      node1.isEquivalentTo(node0, true, true, true);
      node1.isVar();
      node0.isCase();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "~^DY}},@5wk] 3";
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = Node.newString("~^DY}},@5wk] 3");
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node1.addChildBefore(node0, node0);
      int int0 = 519;
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(30, (Node[]) null, (-800), 0);
      node0.isBlock();
      node0.isOnlyModifiesThisCall();
      node0.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node0.LAST_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(":F^");
      node0.setSideEffectFlags(791);
      int int0 = 0;
      int int1 = 65536;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node((-1852), node0, node0, (-740), 4095);
      node1.hasOneChild();
      node1.isNE();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      node1.addChildBefore(node0, node0);
      node_NodeMismatch0.equals(templateType0);
      node1.getString();
      // Undeclared exception!
      try { 
        node0.isNot();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "bF(Fs;r;erpbb}u";
      Node node0 = Node.newString("bF(Fs;r;erpbb}u", 85, 85);
      Node node1 = new Node(30, node0);
      node0.isEquivalentToTyped(node1);
      node0.getExistingIntProp(0);
      InputId inputId0 = new InputId(string0);
      inputId0.toString();
      // Undeclared exception!
      try { 
        inputId0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 102;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = jSDocInfo0.getAssociatedNode();
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, (Node) null);
      Node node2 = null;
      try {
        node2 = new Node(int0, node1, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2420, nodeArray0, 393, 393);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      EnumType enumType0 = jSTypeRegistry1.createEnumType("UM", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[0] = (JSType) enumType1;
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getTypeOfThis();
      jSTypeArray0[1] = null;
      JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Object#Element");
      jSTypeArray0[2] = jSType1;
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      jSTypeArray0[3] = (JSType) templateType0;
      FunctionType functionType0 = jSTypeRegistry1.createConstructorType((JSType) enumElementType0, jSTypeArray0);
      jSTypeArray0[4] = (JSType) functionType0;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplatizedType templatizedType0 = jSTypeRegistry2.createTemplatizedType((ObjectType) templateType0, (ImmutableList<JSType>) null);
      jSTypeArray0[5] = (JSType) templatizedType0;
      EnumElementType enumElementType1 = enumType0.getElementsType();
      jSTypeArray0[6] = (JSType) enumElementType1;
      Vector<JSType> vector0 = new Vector<JSType>(enumType1.ENUMDECL);
      JSType jSType2 = jSTypeRegistry2.createFunctionType((ObjectType) enumType1, (JSType) enumElementType1, (List<JSType>) vector0);
      jSTypeArray0[7] = jSType2;
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = null;
      Node node0 = Node.newNumber((double) 6, 6, 6);
      Node node1 = new Node(6, node0, 8, 51);
      Node node2 = node1.removeChildren();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.mayMutateGlobalStateOrThrow();
      JSType jSType0 = null;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType1, templateType1, templateType0, templateType0, templateType0, templateType0, templateType1);
      jSTypeRegistry0.createConstructorType("ME^TVjy", node2, node2, (JSType) null, immutableList0);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      // Undeclared exception!
      try { 
        JSType.toMaybeTemplatizedType((JSType) objectType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0, (-2907), (-1186));
      Node node2 = Node.newNumber((double) 15);
      Node node3 = new Node(5, node2, node1, node2, node2, 16, 2004);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags5.valueOf();
      node0.siblings();
      node0.addChildrenToFront(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      Node node2 = Node.newNumber(6.0);
      nodeArray0[1] = node2;
      Node node3 = new Node(122, nodeArray0, 11, 39);
      node3.getCharno();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-531), nodeArray0);
      node0.getProp((-1054));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(26, (-1186), 142);
      node0.setLineno(26);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(7);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4095);
      node_NodeMismatch0.equals("");
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l");
      Node node2 = new Node(1, node1, node1, 1052, (-3496));
      node2.setSourceFileForTesting("dJ^kn+A|c@z");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("", 0, (-1229));
      node0.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getJSType();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null, jSType0, jSType0, jSType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isFromExterns();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.REFLECTED_OBJECT, jSType0.NOT_ENUMDECL, node0.VAR_ARGS_NAME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.close();
      Node node3 = Node.newString(42, "g9:bL.&;XTl", 12, 565);
      node3.replaceChildAfter(node0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("[I'Ofx9B5|");
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 32, 54, 0);
      Node node2 = new Node(36, 148, 4095);
      Node node3 = new Node(118, node1, node1, node2, 4, 105);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.close();
      node0.appendStringTree(stringWriter0);
      node3.isInc();
      node3.isThis();
      Node.newString("[I'Ofx9B5|", 0, 48);
      Node node4 = new Node(2, node0, node1);
      node4.isEquivalentTo(node3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node.newNumber((-2401.9332));
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-531), nodeArray0);
      node0.setSideEffectFlags((-4141));
      int int0 = 65536;
      int int1 = (-917);
      // Undeclared exception!
      try { 
        node0.putIntProp(int0, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -531
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(308, 8, 122);
      Node node2 = new Node(30, node1, node0, 56, 29);
      node1.srcref(node0);
      Node node3 = Node.newString(36, "Q_[o/}Iy_V");
      node1.setOptionalArg(true);
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1;
      Node node0 = Node.newString(1, "");
      Node node1 = Node.newNumber((double) 37, 2, 46);
      Node node2 = new Node(0, 37, 54);
      Node node3 = new Node(50, node0, node1, node2);
      Node node4 = new Node(124, node3, node0, node0, (-3989), 44);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      StringWriter stringWriter0 = new StringWriter(node3.DIRECT_EVAL);
      stringWriter0.close();
      node4.appendStringTree(stringWriter0);
      // Undeclared exception!
      try { 
        node1.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1514));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setThrows();
      node0.setSideEffectFlags(node_SideEffectFlags6);
      int int0 = (-1346);
      Node node1 = new Node(node0.STATIC_SOURCE_FILE, node0, int0, node0.SIDE_EFFECTS_ALL);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 838
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node1.isAssign();
      node2.checkTreeEquals(node1);
      node2.getProp(16);
      node1.isDelProp();
      node0.isInc();
      Node node3 = new Node(52);
      node3.getString();
      node3.isTry();
      node0.isAnd();
      // Undeclared exception!
      try { 
        node0.getDirectives();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4095);
      node_NodeMismatch0.equals("");
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l");
      Node node2 = new Node(1, node1, node1, 1052, (-3496));
      Node.newNumber((double) 43);
      node2.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.getProp(57);
      node0.putProp((-3194), (Object) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node1.addSuppression("-cpy[V{{z9");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      node1.isSetterDef();
      node0.isEquivalentToTyped(node1);
      node1.putIntProp(2860, 57);
      node1.isScript();
      node0.isEquivalentTo(node1, false, false, false);
      node0.isAdd();
      node1.removeProp((-1245));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(47);
      node0.isCall();
      node0.setOptionalArg(false);
      node0.toString(false, true, true);
      Node node1 = Node.newString("a", 101, 37);
      node0.addChildAfter(node1, node1);
      int int0 = (-1177);
      node1.getAncestor(int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      Node node1 = new Node((-294), node0, node0, 48, 4096);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.isContinue();
      node0.isThrow();
      node0.isAssignAdd();
      node0.getFirstChild();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4095);
      node_NodeMismatch0.equals("");
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l");
      Node node2 = new Node(1, node1, node1, 1052, (-3496));
      Node[] nodeArray0 = new Node[7];
      Node node3 = new Node(105, node2, 15, (-2390));
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node2;
      Node node4 = new Node(37, nodeArray0, 0, 35);
      node4.isAnd();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(30, 142, 142);
      node0.setLineno(2666);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(715);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.areAllFlagsSet();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(26, (-1186), 142);
      node0.setLineno(26);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(7);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node1 = node0.cloneNode();
      node0.isEquivalentToShallow(node1);
      Node.newNumber((-2473.0), 301, 122);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      double double0 = 1.0;
      int int0 = (-2907);
      int int1 = (-1186);
      node0.useSourceInfoFrom((Node) null);
      Node.newNumber(double0, int0, int1);
      int int2 = 5;
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node0.isContinue();
      node2.addChildrenAfter(node1, node0);
      node3.isBlock();
      node0.setVarArgs(true);
      node2.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(492, (Node) null);
      int int0 = 132;
      int int1 = 15;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node0.isContinue();
      node2.addChildrenAfter(node1, node0);
      node3.isBlock();
      node0.setVarArgs(true);
      node2.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.setOptionalArg(false);
      int int0 = 102;
      Node node4 = new Node(102, node2, node0, (-1132), (-2390));
      node3.getBooleanProp(int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(308, 8, 122);
      Node node2 = new Node(30, node1, node0, 56, 29);
      Node node3 = node1.srcref(node0);
      Node.newString(43, "eEzvS\"<-(Y");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.isObjectLit();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(26, (-1186), 142);
      node0.setLineno(26);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(7);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = new Node(112, (-867), 93);
      Node node2 = new Node(2487, node0, node0, 2810, 57);
      node1.srcref(node0);
      Node node3 = Node.newString(6137, "eEzvS\"<-(Y");
      Node node4 = Node.newString(32, "com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) null);
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node6 = new Node(node1.REFLECTED_OBJECT, node4, node3, node5, node0);
      node6.isVar();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags7.areAllFlagsSet();
      Node node1 = node0.cloneNode();
      node0.isEquivalentToShallow(node1);
      Node.newNumber((double) 56, 57, 4095);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(308, 8, 122);
      Node node2 = node1.copyInformationFrom(node0);
      node1.isCatch();
      node2.hasChildren();
      node2.getString();
      node1.getLength();
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node1, node1, node0, node1);
      int int0 = (-498);
      Node node4 = null;
      try {
        node4 = new Node(node1.DIRECT_EVAL, node3, int0, node2.SLASH_V);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LB is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(0, "V~I<Dh5y]nv%W");
      boolean boolean0 = node0.isWith();
      node0.isNoSideEffectsCall();
      boolean boolean1 = node0.isThrow();
      Node node1 = node0.getAncestor(0);
      node1.removeChild(node0);
      node1.type = node0.IS_DISPATCHER;
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(30, 142, 142);
      node0.setLineno(2666);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(715);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0, (-2907), (-1186));
      node1.getInputId();
      Node node2 = new Node(48, node0, node0, node1);
      node2.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.getJSDocInfo();
      node1.isOptionalArg();
      node2.isAssign();
      Node node3 = new Node(37, node1, 147, 43);
      int int0 = 256;
      node2.getProp(int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = Node.newString("Object#Element", 54, 54);
      Object object0 = new Object();
      node0.putProp(54, object0);
      node0.isBlock();
      Node node1 = new Node(4095, 31, (-322));
      Node node2 = new Node(2147483645, node1, node0, 2, 1);
      node2.srcref(node1);
      Node node3 = Node.newString(772, "");
      node0.setOptionalArg(true);
      node2.isVar();
      node3.getType();
      node1.addChildrenToBack(node0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 5045;
      int int1 = (-2907);
      int int2 = 1810;
      Node[] nodeArray0 = new Node[5];
      Node node0 = Node.newString("");
      nodeArray0[0] = node0;
      Node node1 = new Node(85);
      nodeArray0[1] = node1;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = jSDocInfo0.getAssociatedNode();
      nodeArray0[2] = null;
      Node node3 = new Node(581774, node0, (Node) null, node1, 50, 57);
      nodeArray0[3] = node3;
      int int3 = 36;
      Node node4 = new Node(node2.SIDE_EFFECTS_ALL, int3, node2.SYNTHETIC_BLOCK_PROP);
      nodeArray0[4] = node4;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(39, 42, 56);
      Node node2 = new Node((-812), node1, node0, 48, 120);
      Node node3 = node1.srcref(node2);
      Node.newString(1432, (String) null);
      boolean boolean0 = true;
      node3.setOptionalArg(boolean0);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      Node node1 = new Node((-294), node0, node0, 48, 4096);
      Node node2 = new Node(1736, node0, node1, node1, node1, 101, 4095);
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node0.replaceChildAfter(node2, node3);
      node3.isOnlyModifiesArgumentsCall();
      node2.addChildrenToFront(node0);
      String string0 = "free_call";
      int int0 = 3991;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString(0, "V~I<D_h5y]nv%W");
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      node0.toStringTree();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      Stack<JSType> stack0 = null;
      try {
        stack0 = new Stack<JSType>();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("lz3o^AI`", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isFor();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(0, "O~x'w", 0, 0);
      node0.isRegExp();
      node0.isNE();
      node0.putIntProp(0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node0.isArrayLit();
      int int0 = (-247);
      node0.isFunction();
      node0.isTrue();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node(23, nodeArray0, 823, 37);
      node1.isContinue();
      Node node2 = new Node(int0, nodeArray0[4], node0.DIRECTIVES, node1.FREE_CALL);
      nodeArray0[3].addChildrenAfter(node2, nodeArray0[3]);
      // Undeclared exception!
      try { 
        nodeArray0[1].isBlock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node0.getProp(42);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setAllFlags();
      Node node3 = Node.newString(1428, "+\"!;f/?yp@O)(,DP", 2, 47);
      Node node4 = node1.clonePropsFrom(node0);
      node_SideEffectFlags0.setMutatesGlobalState();
      node3.checkTreeEquals(node4);
      Node node5 = node0.getNext();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node3.isStringKey();
      boolean boolean0 = node5.isQuotedString();
      // Undeclared exception!
      try { 
        node2.setWasEmptyNode(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags7.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags10.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags11.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags8.setMutatesGlobalState();
      node_SideEffectFlags10.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags13 = new Node.SideEffectFlags((-642));
      node_SideEffectFlags13.setAllFlags();
      node_SideEffectFlags9.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags12.areAllFlagsSet();
      Node node1 = node0.cloneNode();
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newNumber((double) 32, 57, (-1432));
      node1.copyInformationFromForTree(node2);
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      Node node0 = Node.newString("Object#Element", 54, 54);
      Object object0 = new Object();
      node0.putProp(54, object0);
      node0.isBlock();
      Node node1 = new Node(4095, 31, (-322));
      Node node2 = new Node(2147483645, node1, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12288);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.isContinue();
      node2.isThrow();
      node0.isAssignAdd();
      node0.getFirstChild();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      Node node2 = Node.newString(4346, "a'S~OS`c>z");
      Node node3 = new Node(1, node0, node2, 45095, 38);
      node3.addChildrenToFront(node0);
      Node node4 = node2.srcref(node0);
      String string0 = "";
      int int0 = 11;
      Node.newString(int0, string0);
      boolean boolean0 = true;
      node4.setOptionalArg(boolean0);
      node4.isVar();
      // Undeclared exception!
      try { 
        node1.getType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags7.areAllFlagsSet();
      node0.setIsSyntheticBlock(false);
      node0.setDouble((-2975.0));
      Node node1 = new Node(node0.SIDE_EFFECTS_FLAGS_MASK);
      Node node2 = node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node2.isTypeOf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 18
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0, (-2907), (-1186));
      node1.getInputId();
      Node node2 = new Node(48, node0, node0, node1);
      node2.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isAssign();
      node1.checkTreeEquals(node0);
      node1.getProp(13);
      node2.isDelProp();
      node0.isInc();
      Node node3 = new Node((-307));
      node1.getString();
      node2.isTry();
      node3.isAnd();
      int int0 = 454;
      Node node4 = Node.newNumber((double) node2.MAX_COLUMN_NUMBER, node2.LAST_PROP, int0);
      node4.getDirectives();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(0, "{JfyH;^WN)]IrOFq", 15, (-2397));
      node0.isTypeOf();
      node0.getIntProp((-2488));
      node0.isDo();
      node0.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0, (-2907), (-1186));
      node1.getInputId();
      Node node2 = new Node(48, node0, node0, node1);
      node2.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags3);
      int int0 = 1;
      int int1 = (-2397);
      Node node3 = new Node(int0, node0, int1, node0.SYNTHETIC_BLOCK_PROP);
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFrom(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1514));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node0.getJSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      Node node1 = new Node(57, node0, 37, 54);
      node1.isEquivalentTo(node0, false, false, false);
      node0.getProp(1);
      node1.isParamList();
      node0.isThrow();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(0, "O:j\r");
      boolean boolean0 = node0.isAdd();
      node0.isNoSideEffectsCall();
      boolean boolean1 = node0.isThrow();
      Node node1 = node0.getAncestor(0);
      node1.removeChild(node0);
      node1.type = node0.IS_DISPATCHER;
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      Node node0 = Node.newString("Object#Element", 54, 54);
      Object object0 = new Object();
      node0.putProp(54, object0);
      node0.isBlock();
      Node node1 = new Node(4095, 31, (-322));
      Node node2 = new Node(2147483645, node1, node0, 2, 1);
      Node node3 = node2.srcref(node1);
      Node.newString(772, "");
      node3.setIsSyntheticBlock(false);
      Node node4 = new Node(43);
      node4.setDouble(36);
      node0.removeFirstChild();
      node2.isTypeOf();
      node4.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251, 885, 2714);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-1.0));
      node0.isNumber();
      node0.isAdd();
      node1.isAssign();
      node1.getString();
      node1.getStaticSourceFile();
      Node node2 = node1.detachFromParent();
      node1.isEquivalentToTyped(node2);
      // Undeclared exception!
      try { 
        node2.children();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = node0.isAdd();
      node0.isNoSideEffectsCall();
      boolean boolean1 = node0.isThrow();
      Node node1 = node0.getAncestor(0);
      node1.removeChild(node0);
      node1.type = node0.IS_DISPATCHER;
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node.mergeLineCharNo(2714, 2714);
      Node node0 = Node.newString(2714, "\"G6$92MVKmod:x=");
      node0.setWasEmptyNode(false);
      node0.isOptionalArg();
      node0.children();
      Node.newString(36, "\"G6$92MVKmod:x=");
      node0.isNE();
      node0.toString(false, false, true);
      int int0 = 221;
      int int1 = 404;
      Node node1 = new Node(int0, int1, node0.LENGTH);
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node1.getJSDocInfo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2714
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node0 = new Node((-1));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      immutableList0.stream();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isDebugger();
      node1.isFor();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isVoid();
      node0.getIndexOfChild(node2);
      node1.isLabelName();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-322), 132, 2205);
      Node node1 = new Node(36, node0, node0, 29, 50);
      Node node2 = node1.srcref(node0);
      Node node3 = Node.newString(2065, "com.google.javascript.rhino.Node$StringNode");
      node3.setOptionalArg(true);
      node1.isVar();
      node1.getType();
      node2.addChildrenToBack(node3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      Node node0 = Node.newString("Object#Element", 54, 54);
      Object object0 = new Object();
      node0.putProp(54, object0);
      node0.isBlock();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node((-840), nodeArray0, 4095, 47);
      node1.isDebugger();
      // Undeclared exception!
      try { 
        nodeArray0[0].isFor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node.mergeLineCharNo((-1096), 40);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeChildren();
      node0.setIsSyntheticBlock(true);
      node0.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isAssignAdd();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000337] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(43);
      node1.getInputId();
      Node node2 = new Node(48, node0, node0, node1);
      node2.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node4 = new Node(1, node0, node3, node2);
      node4.useSourceInfoIfMissingFromForTree(node3);
      node4.detachChildren();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        node5.removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1514));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node0.isAssign();
      node0.getString();
      node0.getStaticSourceFile();
      int int0 = (-423);
      Node node1 = null;
      try {
        node1 = new Node(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 838
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251, 885, 2714);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-1.0));
      boolean boolean0 = node0.isNumber();
      node0.isAdd();
      node1.getJSDocInfo();
      node1.isOptionalArg();
      node1.isAssign();
      Node node2 = null;
      Node node3 = new Node((-902), (Node) null, 52, 53);
      boolean boolean1 = false;
      boolean boolean2 = false;
      node3.isEquivalentTo(node2, boolean1, boolean0, boolean2);
      int int0 = 37;
      // Undeclared exception!
      try { 
        node1.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-531), nodeArray0);
      Node node1 = Node.newString(39, "E");
      node0.addChildToFront(node1);
      node1.removeChildAfter(node0);
      int int0 = 122;
      int int1 = 73;
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(1507);
      node0.getString();
      node0.isTry();
      node0.isAnd();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.children();
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node2.setType(50);
      InputId inputId0 = new InputId((String) null);
      node1.isCase();
      node2.isNoSideEffectsCall();
      node1.isAssign();
      node2.checkTreeEquals(node1);
      node2.getProp(node1.FLAG_LOCAL_RESULTS);
      node1.isDelProp();
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node1.isDo();
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2397));
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(117);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isReturn();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node((-372), nodeArray0);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(30, 142, 142);
      node0.setLineno(2666);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(715);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.isContinue();
      node0.isThrow();
      Node node1 = new Node(37, 862, 125);
      node1.isAssignAdd();
      node1.getFirstChild();
      node1.getFirstChild();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(40);
      simpleSourceFile0.getLineOffset(4095);
      node0.isAdd();
      node0.isAssign();
      node0.getString();
      node0.getStaticSourceFile();
      Node node1 = null;
      Node node2 = new Node(49, node0, (Node) null, node0, node0, 36, 37);
      node2.detachFromParent();
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0, node0, node0, 57, 49);
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node1.isAssign();
      node2.checkTreeEquals(node1);
      node2.getProp(node1.FLAG_LOCAL_RESULTS);
      node1.isDelProp();
      // Undeclared exception!
      try { 
        node0.isContinue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-1364);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = jSDocInfo0.getAssociatedNode();
      Node node1 = new Node((-398), (Node) null, (Node) null, (Node) null);
      Node node2 = null;
      try {
        node2 = new Node(int0, node0, node1, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node0.isContinue();
      Node node4 = new Node(36, node2, node3, node0, node3);
      int int0 = 445;
      node3.isNoSideEffectsCall();
      int int1 = 2144593917;
      Node node5 = new Node(int0, node2, int1, node3.FLAG_THIS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node5.addChildrenToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0, node0, node0, 57, 49);
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.addChildAfter(node2, node0);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node1.isAssign();
      node2.checkTreeEquals(node1);
      node2.getProp(node1.FLAG_LOCAL_RESULTS);
      node1.isDelProp();
      // Undeclared exception!
      try { 
        node0.isContinue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Element");
      node0.isName();
      Node node1 = new Node(2, node0);
      node1.isRegExp();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node1.isAssign();
      node2.checkTreeEquals(node1);
      node2.getProp(16);
      node0.isDelProp();
      node1.isContinue();
      Node node3 = new Node(102);
      node1.getString();
      node3.isTry();
      node1.isAnd();
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0, (-2907), (-1186));
      node1.getInputId();
      Node node2 = new Node(4095, node1, 36, 1);
      node2.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isAssign();
      node1.checkTreeEquals(node0);
      node1.getProp(13);
      node2.isDelProp();
      node0.isInc();
      Node node3 = new Node((-307));
      node1.getString();
      node2.isTry();
      node3.isAnd();
      int int0 = 454;
      Node node4 = Node.newNumber((double) node2.MAX_COLUMN_NUMBER, node2.LAST_PROP, int0);
      node4.getDirectives();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(30, 142, 142);
      node0.setLineno(2666);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(715);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(39, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(308, 8, 122);
      Node node2 = new Node(30, node1, node0, 56, 29);
      Node node3 = node1.srcref(node0);
      Node.newString(43, "~^DY}},@5wk] 3");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.isObjectLit();
      node3.getJsDocBuilderForNode();
      node0.isReturn();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node((-1852), node0, node0, (-740), 4095);
      node1.hasOneChild();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", true);
      simpleSourceFile0.getLineOffset(47);
      Node node2 = Node.newString("", 54, 2494);
      node0.getDirectives();
      Node node3 = new Node(36, node1, node2, node1, node0, 56, 116);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node3);
      node_NodeMismatch0.equals(node2);
      String string0 = null;
      Node node4 = Node.newString(string0);
      int int0 = (-3220);
      int int1 = 1981;
      Node node5 = null;
      try {
        node5 = new Node(int0, node4, node3, node1.STATIC_SOURCE_FILE, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1514));
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node0.getJSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node0.isArrayLit();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "bF(Fs;r;erpbb^u";
      Node node0 = Node.newString("bF(Fs;r;erpbb^u", 89, 89);
      Node node1 = new Node(43, node0);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node(57, (-1012), 47);
      node2.getBooleanProp(43);
      Node node3 = new Node(306654252, node2, node0, 30, 15);
      node1.srcref(node0);
      String string1 = "Bm%.+";
      Node.newString(node0.IS_CONSTANT_NAME, string1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setAllFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(56, node0, node0, 130, 56);
      Node node2 = node1.srcref(node0);
      Node node3 = Node.newString(102, "B?5!");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node4 = new Node(2, node3, node0, node2, node2);
      node4.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(56, node0, 48, 148);
      node0.isEquivalentTo(node1, false, true, false);
      node0.getProp(198);
      node0.isParamList();
      node0.isThrow();
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(39, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(308, 8, 122);
      Node node2 = new Node(30, node1, node0, 56, 29);
      Node node3 = node1.srcref(node0);
      Node node4 = Node.newString(43, "~^DY}},@5wk] 3");
      node4.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.isObjectLit();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags7.areAllFlagsSet();
      node0.children();
      Node node1 = new Node(0, node0, node0, node0, 39, 15);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = node1.getLastChild();
      node2.wasEmptyNode();
      node0.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(30, 142, 142);
      node0.setLineno(2666);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(715);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags5.areAllFlagsSet();
      node0.setIsSyntheticBlock(true);
      node0.setDouble(2666);
      Node node1 = new Node(node0.ORIGINALNAME_PROP);
      Node node2 = node1.removeFirstChild();
      node0.isTypeOf();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW 2666 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node1.setOptionalArg(false);
      node1.getChangeTime();
      Node node2 = node0.getFirstChild();
      node1.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = new Node(node0.STATIC_SOURCE_FILE, node2, node1);
      node3.isContinue();
      // Undeclared exception!
      try { 
        node0.isThrow();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node node1 = new Node(308, 8, 122);
      Node node2 = node1.copyInformationFrom((Node) null);
      node1.isCatch();
      node2.hasChildren();
      node2.isFromExterns();
      node2.getString();
      // Undeclared exception!
      try { 
        node1.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251);
      node0.toStringTree();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("!kJ[V", 8232, 8232);
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0, node0, node0, 57, 49);
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node2.isEmpty();
      node2.checkTreeEquals(node1);
      node2.toStringTree();
      node2.getProp(node1.FLAG_LOCAL_RESULTS);
      // Undeclared exception!
      try { 
        node1.isDelProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(301);
      Node node1 = new Node(38, node0, node0, 1388, 56);
      node1.setSourceEncodedPositionForTree(16);
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251, 885, 2714);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-1.0));
      node0.isString();
      node0.isAdd();
      node1.isAssign();
      node1.getString();
      node1.setLength(node0.FREE_CALL);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeChildren();
      node0.setIsSyntheticBlock(true);
      node0.cloneTree();
      node0.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isAssignAdd();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000337] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      Node node0 = Node.newString("Object#Element", 54, 54);
      Object object0 = new Object();
      node0.isOnlyModifiesArgumentsCall();
      node0.putProp(54, object0);
      node0.isBlock();
      Node node1 = new Node(4095, 31, (-322));
      node0.isName();
      Node node2 = new Node(0, node0);
      node0.isRegExp();
      node1.isComma();
      node2.isFromExterns();
      node2.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeRegistry0.isForwardDeclaredType("LQltNwfO<");
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isScript();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      node0.getQualifiedName();
      node0.copyInformationFromForTree(node1);
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      node0.copyInformationFromForTree(node1);
      node1.isVoid();
      node0.isVar();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4095);
      node_NodeMismatch0.equals("");
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l");
      node0.removeFirstChild();
      node1.isEquivalentTo(node0);
      Node node2 = new Node(1, node1, node1, 39, 53);
      Node.newNumber((double) 43);
      node2.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251, 885, 2714);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-1.0));
      node0.isNumber();
      node0.setIsSyntheticBlock(true);
      node1.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(0, node1, 47, 111);
      node2.isAssignAdd();
      node1.getFirstChild();
      node1.getExistingIntProp(123);
      Node node3 = node0.getFirstChild();
      node3.setCharno(node1.FLAG_THIS_UNMODIFIED);
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(47);
      node0.isCall();
      node0.setOptionalArg(false);
      Node node1 = new Node(2138, node0, 0, 31);
      node0.isEquivalentTo(node1, true, true, false);
      node0.getProp((-1510));
      node1.isThrow();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("");
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node0.getJSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      Node node1 = new Node((-530), node0, 583, 37);
      node0.isEquivalentTo(node1, true, false, true);
      node1.getProp((-1244));
      node0.isParamList();
      node1.isThrow();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(301);
      Node node1 = new Node(311, node0, node0, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isQuotedString();
      node1.isVar();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeRegistry0.isForwardDeclaredType("Object#Key");
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isScript();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      node0.isAssign();
      Node node2 = Node.newString(47, "Not declared as a constructor");
      node2.getString();
      node1.setLength(148);
      node0.isWith();
      node2.getInputId();
      node0.setInputId((InputId) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags5.valueOf();
      node0.siblings();
      node0.addChildrenToFront(node1);
      node1.isAdd();
      node1.getQualifiedName();
      node1.copyInformationFromForTree(node0);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(1922, "`|kg2");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.addChildToFront(node1);
      node0.removeChildAfter(node1);
      int int0 = 464;
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(833);
      node0.setOptionalArg(false);
      int int0 = (-1514);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1514));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node0.getJSDocInfo();
      node0.isFor();
      Node node1 = Node.newString("3iSwSKcf4", 1348, 833);
      node0.addChildAfter(node1, node1);
      node1.getAncestor(int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node1.isDo();
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2397));
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-2907), (-1186));
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(12, node0, node0);
      Node node2 = new Node((-1766), node1, node1, node1, node1, 46, 46);
      node2.isContinue();
      node1.isThrow();
      node0.isAssignAdd();
      Node node3 = new Node(122);
      node3.getFirstChild();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node1.isDo();
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2397));
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isVoid();
      node0.isVar();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1637), (-1637), (-1637));
      Node node1 = new Node((-1637), node0, node0, node0, node0);
      node1.isSyntheticBlock();
      Node[] nodeArray0 = new Node[2];
      node1.getDouble();
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(16, node1, node1, node1);
      node1.isOptionalArg();
      Node node3 = new Node(8, node2, 39, (-3159));
      node2.isEquivalentTo(node0, false, true, false);
      node1.isVoid();
      node3.isVar();
      node2.isNull();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251, 885, 2714);
      node0.setDouble((-28.0));
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-1.0));
      node0.isNumber();
      node0.isAdd();
      node1.isAssign();
      node1.getString();
      node1.setLength(node0.FREE_CALL);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(16, node1, node1, node1);
      node1.isOptionalArg();
      Node node3 = new Node(8, node2, 39, (-3159));
      node2.isEquivalentTo(node0, false, true, false);
      node1.isVoid();
      Node node4 = Node.newNumber(3123.0);
      node4.getFirstChild();
      node2.replaceChildAfter((Node) null, node3);
      node3.getIntProp(node1.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeChildren();
      node0.setIsSyntheticBlock(true);
      node0.removeChild((Node) null);
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setLineno(838);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node0.isReturn();
      node0.cloneNode();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString(0, "V~I<Dh5y]nv%W");
      node0.isNumber();
      node0.isNoSideEffectsCall();
      node0.isOr();
      Node node1 = new Node(37, node0);
      node1.removeChild(node0);
      node1.type = 47;
      node1.addChildAfter(node0, node0);
      node1.isAssignAdd();
      // Undeclared exception!
      try { 
        node1.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("originalname", "}iO7[*UL=)M'S", 54, 52);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((-3863.3), (-764), 2);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.isVoid();
      node1.getIndexOfChild(node0);
      Node node3 = new Node((-1637), node1, node2);
      node3.isLabelName();
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-2891), (-1186));
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      Node node1 = new Node(957, node0, 524288, (-3950));
      node1.isEquivalentTo(node0, false, false, false);
      node1.getProp(36);
      Node node2 = new Node((-719), node0);
      node2.isParamList();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(16, node1, node1, node1);
      node1.isOptionalArg();
      node2.getStaticSourceFile();
      Node node3 = new Node(8, node2, 39, (-3159));
      node2.isEquivalentTo(node0, false, true, false);
      node1.isVoid();
      node3.isVar();
      node2.isNull();
      node0.isString();
      node3.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      node1.isVoid();
      node0.isVar();
      node2.getAncestor(2637);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newNumber(741.143251, 885, 2714);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-3.3074635168413153));
      node0.isNumber();
      node0.isAdd();
      node1.isCatch();
      node1.getString();
      node1.setLength(node0.FREE_CALL);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      node1.srcref(node2);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node0.isContinue();
      node2.addChildrenAfter(node1, node0);
      node3.isBlock();
      Node node4 = new Node((-2182), node2, 55, (-1440));
      int int0 = 40;
      node3.getProp(int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.getProp(57);
      node0.putProp((-3194), (Object) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node1.addSuppression("-cpy[V{{z9");
      node0.mayMutateGlobalStateOrThrow();
      node0.isCall();
      node0.getDouble();
      String string0 = "com.google.common.collect.Sets";
      int int0 = 1686;
      Node.newString(string0, int0, node0.IS_CONSTANT_NAME);
      int int1 = (-275);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(50, "~^DY}},@5wk] 3");
      node0.isAnd();
      Node node1 = new Node(308, 8, 138);
      Node node2 = node1.copyInformationFrom(node0);
      node1.isCatch();
      node2.isNot();
      node2.getString();
      node1.getLength();
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node1, node1, node0, node1);
      int int0 = (-498);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(47);
      StringWriter stringWriter0 = new StringWriter(29);
      node0.appendStringTree(stringWriter0);
      node0.isInc();
      node0.isThis();
      Node.newString("2c4}zwWE", 43, 30);
      node0.setLength(38);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags5.valueOf();
      node0.siblings();
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node node2 = new Node(130, node0);
      node2.isRegExp();
      Node node3 = new Node(49);
      node3.isComma();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("IT[f=)#$^Fx2jbC`-dL", 38, 38);
      Node node1 = Node.newString(7, "V[j!S({?Z]", 8, (-879));
      node1.isTypeOf();
      node1.getIntProp(32);
      node0.isDo();
      Node node2 = Node.newNumber(1887.6949605, (-1712), 102);
      node2.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(152);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(137, "]2BNXIm|Zc)lST&BfuY");
      Node node1 = node0.removeFirstChild();
      node0.addChildToFront((Node) null);
      node1.toString();
      // Undeclared exception!
      try { 
        node0.getLastSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(36, " h,q[MNiQ+.[H;$J");
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.useSourceInfoFrom(node1);
      Node node3 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node0.addChildrenToFront(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node4 = new Node(56, node0, 48, 148);
      node0.isEquivalentTo(node3, false, true, false);
      node0.getProp(198);
      node0.isParamList();
      node0.isThrow();
      node4.getParent();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.children();
      node1.useSourceInfoIfMissingFrom(node0);
      node2.getLastChild();
      node3.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node1.siblings();
      Node node2 = Node.newString("|P");
      node2.addChildrenToFront(node1);
      node1.isAdd();
      node0.getQualifiedName();
      node2.isTry();
      node0.isAnd();
      node2.detachChildren();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(30, 142, 142);
      node0.setLineno(2666);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(715);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node0.isEquivalentToShallow((Node) null);
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags6.setAllFlags();
      int int0 = (-1402);
      Node node1 = null;
      try {
        node1 = new Node(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isFalse();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node node1 = Node.newString("~^DY}},@5wk] 3", 36, 36);
      node1.isRegExp();
      node1.isComma();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 0;
      String string0 = "V~I<Dh5y]nv%W";
      Node node0 = Node.newString(0, "V~I<Dh5y]nv%W");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        node0.appendStringTree(stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      Node.newNumber((double) 54, 4, 1);
      node0.getChangeTime();
      Node node1 = node0.getFirstChild();
      node1.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME  : number is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      node1.isVoid();
      node0.isVar();
      node2.isGetProp();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("originalname", "}iO7[*UL=)M'S", 54, 52);
      Node node0 = Node.newString(54, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      node0.siblings();
      Node node1 = new Node(850, (-1061), 39);
      node0.addChildrenToFront(node1);
      node0.isAdd();
      node1.getQualifiedName();
      node1.copyInformationFromForTree(node0);
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(838);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(1013);
      Node node2 = new Node(32, node0);
      node0.setSourceEncodedPositionForTree(52);
      Node node3 = Node.newString(1013, "");
      node3.isCast();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("Use SerializedForm", 301, 2911);
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node3.srcref(node1);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node2.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isAssignAdd();
      Node node4 = node3.getFirstChild();
      node1.getExistingIntProp(0);
      node4.getFirstChild();
      node1.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 39, 39);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      immutableList0.parallelStream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node(4095, node0, node1, node0, node1, 87, (-140));
      Node node3 = node0.copyInformationFromForTree(node2);
      node3.useSourceInfoIfMissingFromForTree(node1);
      node2.addSuppression("R");
      node2.isVoid();
      node2.isVar();
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node1.isAssign();
      node2.checkTreeEquals(node1);
      node2.getProp(16);
      node0.isDelProp();
      node1.isContinue();
      node0.setString("o6KkL");
      Node node3 = new Node(102);
      node1.getString();
      node3.isTry();
      node1.isAnd();
      node2.getDirectives();
      node1.isEquivalentTo(node2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isBlock();
      Node node1 = Node.newString("o6KkL");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setReturnsTainted();
      node1.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node1.putIntProp(76, 32);
      node1.isCase();
      node0.isEquivalentTo(node1, false, true, true);
      node0.isAdd();
      node1.removeProp((-2829));
      node0.setSideEffectFlags(node_SideEffectFlags6);
      node1.setLineno(node0.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.getProp(57);
      node0.putProp((-3194), (Object) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node1.addSuppression("-cpy[V{{z9");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      node1.isSetterDef();
      node0.isEquivalentToTyped(node1);
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node1.setIsSyntheticBlock(true);
      node1.setDouble(0.0);
      int int0 = 40;
      Node node2 = new Node(int0);
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createParameters(jSTypeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000347] [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000349] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node.extractLineno((-1232));
      int int0 = 995;
      Node node0 = new Node(12, (Node) null, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(int0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesGlobalState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node1.getSideEffectFlags();
      node0.getIntProp(2199);
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node1.siblings();
      Node node2 = Node.newString("|P");
      node2.addChildrenToFront(node1);
      node1.isAdd();
      node0.getQualifiedName();
      node2.isTry();
      node2.setOptionalArg(false);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(118, node0, node0, node0, 4, 105);
      node0.getSourceFileName();
      node1.checkTreeEqualsImpl(node0);
      node0.getInputId();
      node0.isCase();
      node1.isNoSideEffectsCall();
      node0.isAssign();
      node1.checkTreeEquals(node0);
      node1.getProp(16);
      node0.isDelProp();
      node0.isContinue();
      node0.setString("o6KkL");
      Node node2 = new Node(102);
      node0.getString();
      node2.isTry();
      node0.isAnd();
      node1.getDirectives();
      node0.isEquivalentTo(node1);
      node1.isHook();
      node1.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4095);
      node_NodeMismatch0.equals("");
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l");
      node0.getProp(55);
      node0.removeFirstChild();
      node1.isEquivalentTo(node0);
      Node node2 = new Node(1, node1, node1, 39, 53);
      Node node3 = Node.newNumber((double) 43);
      node2.isEquivalentTo(node0);
      node3.addChildToFront(node1);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      node3.isIf();
      node0.isVar();
      node2.isGetProp();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(1922, "`|kg2");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.isNumber();
      node0.copyInformationFromForTree(node0);
      node0.isVoid();
      node0.isVar();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node0.isVoid();
      node2.getIndexOfChild(node1);
      node3.isLabelName();
      node2.isInstanceOf();
      node0.isLabelName();
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getJSDocInfo();
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("originalname", "}iO7[*UL=)M'S", 54, 52);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Named type with empty name component");
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
      jSTypeRegistry0.resolveTypesInScope(functionType0);
      Node node1 = Node.newNumber((-3863.3), (-764), 2);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.isVoid();
      node1.getIndexOfChild(node0);
      Node node3 = new Node((-1637), node1, node2);
      node3.isLabelName();
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isName();
      node0.getAncestors();
      node0.getChangeTime();
      node0.isRegExp();
      node0.isWith();
      node0.isNE();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("N<r", 176, 54);
      Node node1 = new Node((-345), node0, node0, 1, (-180));
      node1.mayMutateArguments();
      node0.addChildrenToBack(node1);
      node1.isBreak();
      Node.newString(49, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2397));
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      Node node0 = Node.newString(119, "Tl(");
      node0.isVoid();
      node0.isVar();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setString("Not declared as a constructor");
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST 4 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isName();
      node0.children();
      node0.getAncestors();
      node0.getChangeTime();
      node0.isRegExp();
      node0.isWith();
      node0.setSourceEncodedPositionForTree(0);
      node0.isCast();
      Node node1 = Node.newString("", 50, 2);
      Node node2 = new Node(41, node1, node0, 37, 120);
      node2.isQualifiedName();
      node0.addChildrenAfter(node2, node1);
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "o6KkL";
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(118, node0, node0, node0, 4, 105);
      node0.getSourceFileName();
      node1.setQuotedString();
      node1.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.getInputId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.getProp(57);
      node0.putProp((-3194), (Object) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node1.addSuppression("-cpy[V{{z9");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      node1.isSetterDef();
      node0.isEquivalentToTyped(node1);
      node1.putIntProp(2860, 57);
      node0.isEquivalentTo(node1, false, false, false);
      node0.isAdd();
      node1.removeProp((-1245));
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      Node node1 = Node.newString(1337, "o6KkL");
      node0.isNumber();
      node1.isNoSideEffectsCall();
      node1.isOr();
      Node node2 = node0.getAncestor(1244);
      node0.removeChild((Node) null);
      node2.addChildAfter(node0, node0);
      node0.isAssignAdd();
      // Undeclared exception!
      try { 
        node2.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber(2526.0, 798, (-2476));
      Node.newString(43, "");
      node0.isDelProp();
      node0.isOptionalArg();
      node0.isVar();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-865));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "'W", 30, 53);
      node2.setOptionalArg(true);
      node3.getChangeTime();
      node2.getFirstChild();
      node2.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList.of(jSType0, jSType0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.valueOf();
      Node node0 = null;
      Node node1 = new Node(31, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node1.siblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "~^DY}},@5wk] 3";
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.isAnd();
      node0.isNoSideEffectsCall();
      node0.isOr();
      Node node1 = new Node(53, node0);
      Node node2 = Node.newString(57, "~^DY}},@5wk] 3");
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node1.getSideEffectFlags();
      node0.getIntProp(2199);
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node1.siblings();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isThis();
      Node.newString("", 31, 2199);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      node0.setJSType(jSType0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("STRING ~^DY}},@5wk] 3", false);
      simpleSourceFile0.getLineOffset(49);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("STRING ~^DY}},@5wk] 3", false);
      node_NodeMismatch0.equals(simpleSourceFile1);
      Node node1 = Node.newString("com.google.javascript.rhino.Node");
      Node node2 = node0.removeFirstChild();
      node0.isEquivalentTo((Node) null);
      int int0 = (-67);
      Node node3 = new Node(int0, node1);
      int int1 = 108;
      Node node4 = null;
      try {
        node4 = new Node(node2.DECR_FLAG, node1, node3, int1, node2.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("N<r", 176, 54);
      Node node1 = new Node((-345), node0, node0, 1, (-180));
      node1.mayMutateArguments();
      node0.addChildrenToBack(node1);
      node1.isBreak();
      Node node2 = node0.removeFirstChild();
      Node node3 = Node.newString((-994), "");
      node3.isEquivalentTo(node2);
      Node node4 = new Node(54, node3, node2, (-1487), (-1045));
      Node node5 = Node.newNumber((double) 29);
      node0.isOnlyModifiesThisCall();
      node4.isEquivalentTo(node1);
      node5.hasChildren();
      node0.addChildrenAfter(node1, node5);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = new Node(4095, node0, node0, node0, 43, 15);
      node0.isTypeOf();
      node0.getIntProp(2199);
      node1.isDo();
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setThrows();
      Node node2 = new Node((-1872), node1, node0, 4095, 93);
      node1.isDebugger();
      node0.getAncestor(node1.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(838);
      Node node1 = Node.newNumber((-1.0), 31, (-523));
      Node node2 = Node.newString(838, "Node has existing properties.");
      node1.isDelProp();
      node1.isOptionalArg();
      node2.copyInformationFromForTree(node1);
      node1.isNew();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4095);
      node_NodeMismatch0.equals("");
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l");
      node0.removeFirstChild();
      node1.isEquivalentTo(node0);
      Node node2 = new Node(1, node1, (Node) null, 40, 53);
      Node.newNumber((double) node2.IS_CONSTANT_NAME);
      node2.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.getProp(57);
      node0.putProp((-3194), (Object) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node1.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node1.setIsSyntheticBlock(true);
      node0.setDouble(54);
      Node node2 = new Node(node1.CHANGE_TIME);
      int int0 = (-4483);
      Node node3 = new Node(node0.IS_DISPATCHER, node1.IS_CONSTANT_NAME, int0);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -294
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(838);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(57);
      Node node2 = new Node(769, node0, node1, 43, 56);
      node2.setSourceEncodedPositionForTree(1645);
      node0.isAssignAdd();
      node2.getAncestor(49);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(307, 307, 307);
      node0.getProp(307);
      Node node1 = Node.newString("");
      node1.useSourceInfoFromForTree(node0);
      node0.addChildBefore(node1, node1);
      Node node2 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node2.removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("U:)Oa&eC", (-1929), (-1929));
      Node node1 = Node.newString(39, "<invalid>", 57, 1100);
      node1.isTypeOf();
      node1.getIntProp(53);
      node0.isDo();
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node1.setIsSyntheticBlock(false);
      node1.setDouble((-1929));
      Node node2 = new Node(node1.IS_NAMESPACE);
      int int0 = 1291;
      node2.isCatch();
      int int1 = 120;
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(15, 12);
      node0.setSourceEncodedPosition(12);
      Node node1 = Node.newString(16, ".TR&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node1.setChangeTime(105);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node0.isInc();
      Node node2 = Node.newString(1944, ".TR&R[&o");
      node2.isVoid();
      node1.isVar();
      node2.isWith();
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("Use SerializedForm", 301, 2911);
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = new Node(42, node1, node1, node1);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      Node node4 = node3.srcref(node1);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node1.isDebugger();
      node2.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isAssignAdd();
      node3.getFirstChild();
      node4.isUnscopedQualifiedName();
      node2.getAncestor(4095);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setType(52);
      node0.isOnlyModifiesThisCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isLocalResultCall();
      node0.isExprResult();
      node0.isCast();
      node0.isNot();
      node0.addSuppression((String) null);
      node0.isBreak();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node0.isContinue();
      node2.addChildrenAfter(node1, node0);
      node3.isWhile();
      node0.setVarArgs(true);
      node2.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isThis();
      node1.isLabelName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isDelProp();
      Node node1 = Node.newString("o6KkL");
      Node node2 = new Node(16, node1, node1, node1);
      node1.isOptionalArg();
      Node node3 = new Node(8, node2, 39, (-3159));
      node2.children();
      Node node4 = node2.useSourceInfoIfMissingFrom(node1);
      Node node5 = node4.getLastChild();
      node5.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.isAnd();
      Node node1 = new Node(49, node0, node0, node0, node0, 16, 4095);
      Node node2 = node1.copyInformationFrom(node0);
      node1.isCatch();
      node2.hasChildren();
      node2.getString();
      node1.getLength();
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node1, node1, node0, node1);
      int int0 = (-498);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node0.siblings();
      node0.addChildrenToFront(node1);
      node1.isAdd();
      node1.getQualifiedName();
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.isVoid();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1619), (-1619), (-1619));
      Node node1 = new Node(2, node0, node0, node0, node0, 53, 51);
      Node node2 = node0.detachFromParent();
      node0.isEquivalentToTyped(node1);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      nodeArray0[4] = node2;
      nodeArray0[5] = node2;
      nodeArray0[6] = node2;
      Node node3 = new Node(57, nodeArray0, 50, 5);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        nodeArray0[3].setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 46, 46);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      Node node1 = Node.newNumber((double) 46, 4, 1);
      node1.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isVoid();
      node0.isRegExp();
      Node node2 = new Node(33);
      Node node3 = new Node(95, 1, 122);
      node3.isComma();
      node3.isFromExterns();
      node2.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      Node node4 = Node.newNumber((double) 36, 8, 4095);
      Node node5 = new Node(52, 1, 53);
      node4.isContinue();
      node5.isThrow();
      node0.isNull();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(838);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1479));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      node0.isEquivalentTo(node0, false, false, false);
      node0.getProp(1);
      node0.isParamList();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString(682, "Zr\"kCv,");
      Node node1 = new Node(10, node0, 54, 1);
      node1.isSwitch();
      node1.getDirectives();
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-2397));
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      int int0 = (-4096);
      Node node0 = Node.newString("vy{ku{DQ");
      Node node1 = new Node(2080, node0, node0, node0, (-1272), 32);
      Node node2 = new Node(2860, node1, node1, node0);
      Node node3 = new Node(int0, node2);
      node3.getJSDocInfo();
      node1.isAssign();
      node2.getAncestor(node1.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node(581774);
      node0.isRegExp();
      node0.removeChildren();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = Node.newString(535, "ns.%@+tMFm\"qHz57l");
      Node node2 = new Node(256, node0, node0, (-1742), 36);
      node1.isDebugger();
      node2.isOptionalArg();
      node0.checkTreeEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-2397));
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      Node node0 = Node.newString(119, "Tl(");
      node0.getSideEffectFlags();
      Node node1 = new Node(119, node0, node0, 39, 12);
      node1.isDebugger();
      node1.isOptionalArg();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      node1.isVoid();
      node0.isRegExp();
      Node node4 = new Node(980);
      node0.isComma();
      node1.isFromExterns();
      node0.copyInformationFrom(node4);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(307, 307, 307);
      node0.getProp(307);
      Node node1 = new Node(2, node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("1l=xk", node0, functionType0);
      Set<String> set0 = enumType0.getElements();
      node0.setDirectives(set0);
      node1.useSourceInfoFromForTree(node0);
      node0.addChildBefore(node1, node1);
      Node node2 = node0.detachFromParent();
      node2.removeFirstChild();
      node2.isVarArgs();
      // Undeclared exception!
      try { 
        node1.isEquivalentToShallow(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) (-1085));
      Node node1 = new Node((-1085), node0, node0, node0, node0, 50, 30);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.getAncestor((-283));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.valueOf();
      Node node0 = Node.newString("");
      Node node1 = new Node((-2350), 2913, 117);
      Node node2 = new Node(32, node0, node1, node0, node0);
      node0.copyInformationFromForTree(node2);
      node2.isVoid();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      node0.isContinue();
      node2.addChildrenAfter(node1, node0);
      node3.isWhile();
      node0.setVarArgs(false);
      node2.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isThis();
      node2.isLabelName();
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, (-1239));
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      node1.isNoSideEffectsCall();
      node3.isFunction();
      node2.isTrue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isContinue();
      node2.addChildrenAfter(node1, node0);
      node3.isWhile();
      node0.setVarArgs(true);
      node2.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isThis();
      node1.isLabelName();
      Node node4 = node0.getParent();
      Node node5 = node2.copyInformationFrom(node4);
      node5.getLastChild();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(29, "Object#Element", 2, 12);
      node1.isTypeOf();
      node1.getIntProp(55);
      node1.isDo();
      Node node2 = new Node(114, 39, 132);
      node0.addChildrenToFront(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.getFirstChild();
      node1.isDo();
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isEquivalentToShallow(node0);
      node0.isAssign();
      node0.setVarArgs(true);
      node0.isDebugger();
      node0.isAdd();
      node0.getQualifiedName();
      node0.isTry();
      node0.setOptionalArg(false);
      node0.isDec();
      node0.getLastSibling();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node((-294), (-294), (-4167));
      int int0 = (-3194);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      String string0 = node0.toString();
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = null;
      try {
        simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -294
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(26, (-1186), 117);
      Node node1 = new Node(154, node0, node0, node0, 15, 122);
      node0.getSourceFileName();
      node1.checkTreeEqualsImpl(node0);
      node0.getInputId();
      node0.isCase();
      node0.isNoSideEffectsCall();
      node1.isEmpty();
      Node node2 = Node.newString(55, (String) null, 51, 57);
      node0.checkTreeEquals(node2);
      node0.toStringTree();
      int int0 = 2103;
      node1.getProp(int0);
      node2.isDelProp();
      node0.isContinue();
      Node node3 = null;
      try {
        node3 = new Node(node1.INCRDECR_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0, node0, node0, 57, 49);
      node0.siblings();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setLineno((-210));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node0.setLength(40);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isName();
      node0.getChangeTime();
      node0.isAssign();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(54, 42, (-111));
      node0.hasChild(node1);
      node0.isAssignAdd();
      Node.newNumber((double) 54, 117, 40);
      Node node2 = new Node(37, node1, node0);
      node2.getFirstChild();
      node2.isDo();
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(47, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node node2 = Node.newString((-1456), ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node0.siblings();
      node0.addChildrenToFront(node1);
      node1.isAdd();
      node1.getQualifiedName();
      node1.copyInformationFromForTree(node0);
      node0.isVoid();
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(838);
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1514));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      Node node1 = new Node(57, node0, 15, 16);
      node1.isEquivalentTo(node0, false, false, false);
      node1.isParamList();
      node0.getParent();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "V~I<Dh5y]nv%W";
      Node node0 = Node.newString(838, "V~I<Dh5y]nv%W");
      node0.isNumber();
      Node node1 = new Node(4, node0);
      node1.isNoSideEffectsCall();
      node0.isOr();
      Node node2 = node1.getAncestor(56);
      node1.isCase();
      node0.addChildAfter((Node) null, node1);
      node2.isAssignAdd();
      // Undeclared exception!
      try { 
        node1.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeChildren();
      node0.setIsSyntheticBlock(true);
      node0.cloneTree();
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      String string0 = "slash_v";
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("{iY4~]bpp>I");
      node0.isName();
      node0.getChangeTime();
      node0.isRegExp();
      Node node1 = new Node(120, node0, node0, node0);
      node1.isWhile();
      Node node2 = new Node(4708, 50, 15);
      node2.setDouble(2211.1582742);
      Node node3 = new Node(node0.SLASH_V);
      node1.hasChild(node3);
      node0.getType();
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      node0.getChangeTime();
      Node node1 = node0.getFirstChild();
      node1.getQualifiedName();
      Node node2 = null;
      Node node3 = new Node(53, node1, node0, (Node) null, (Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      modificationVisitor0.caseNumberType();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      node0.isVoid();
      node0.getIndexOfChild(node0);
      node0.isLabelName();
      node0.isString();
      node0.getChildCount();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isOptionalArg();
      node0.isAssign();
      Node node1 = new Node(32, node0, 36, 1143);
      node0.isEquivalentTo(node1, false, false, false);
      node0.isParamList();
      node1.getParent();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node(36);
      nodeArray0[0] = node0;
      Node node1 = new Node(29, node0);
      node1.copyInformationFromForTree(node0);
      Node node2 = node0.srcref(node0);
      nodeArray0[1] = node1;
      node2.putBooleanProp(1250, false);
      Node node3 = new Node(36, nodeArray0, 15, 1);
      node3.getDouble();
      node3.isCatch();
      node0.getSourcePosition();
      String string0 = "com.google.javascript.rhino.JSTypeExpression";
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      Node node1 = Node.newString(51, "~^DY}},@5wk] 3");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node1.addChildToFront(node0);
      Node node3 = node1.removeChildAfter((Node) null);
      node1.children();
      // Undeclared exception!
      try { 
        node2.useSourceInfoIfMissingFrom(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(101, "`|kg2", 1922, 16777216);
      Object object0 = new Object();
      node0.putProp(16777216, object0);
      node0.isFalse();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags6.setReturnsTainted();
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags9.clearAllFlags();
      node_SideEffectFlags7.setAllFlags();
      node0.isNew();
      node0.mayMutateGlobalStateOrThrow();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("Object#Key", node0, (ObjectType) null);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, jSTypeArray0);
      node0.getSourceOffset();
      jSTypeRegistry0.createEnumType("fDP=DC Nnqw@!", node0, functionType0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      node0.isCase();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.toString();
      node0.isCase();
      node0.isNoSideEffectsCall();
      node0.isAssign();
      Node node1 = Node.newString("", 3681, 103);
      node0.checkTreeEquals(node1);
      node1.getProp(4);
      node1.isDelProp();
      node1.isContinue();
      Node node2 = new Node(44, node0, node0, 77, 16);
      node2.setString((String) null);
      Node node3 = new Node(node0.SIDE_EFFECTS_ALL);
      node1.getString();
      node0.isTry();
      int int0 = 37;
      int int1 = 2655;
      Node node4 = null;
      try {
        node4 = new Node(int0, node3, node3, node2.STATIC_SOURCE_FILE, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE 77 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = Node.newString(42, "o6KkL");
      node0.getSourceFileName();
      node1.checkTreeEqualsImpl(node0);
      node0.getInputId();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(4095);
      Node node2 = Node.newString((-233), "THUKX5(B-t&", 54, 49);
      Node node3 = new Node(39, node1, node1, node2, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node3);
      node_NodeMismatch0.equals((Object) null);
      Node node4 = Node.newString("[kwOMV~ogM!&~]h");
      Node node5 = new Node(52, node4, node3, node3);
      Node node6 = node5.removeFirstChild();
      node5.isEquivalentTo(node6);
      Node.newString(37, (String) null, 0, 37);
      Node.newNumber((double) node1.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0, node0, node0, 57, 49);
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node2.isEmpty();
      node1.isLocalResultCall();
      node2.isExprResult();
      node1.isCast();
      node1.isNot();
      node0.addSuppression(";7\"k");
      node1.isBreak();
      node0.isVarArgs();
      node2.copyInformationFrom(node0);
      node1.isOptionalArg();
      Node node3 = node1.getLastSibling();
      Node node4 = node1.useSourceInfoIfMissingFrom(node3);
      node4.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("N<r", 176, 54);
      Node node1 = new Node((-345), node0, node0, 1, (-180));
      node1.mayMutateArguments();
      node0.addChildrenToBack(node1);
      node1.isBreak();
      Node.newString(49, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.putBooleanProp(57, true);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "end-line: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(1915);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isNoSideEffectsCall();
      Node node1 = new Node(306654252, node0);
      Node node2 = node1.removeFirstChild();
      node2.addChildrenToFront(node1);
      node1.mayMutateGlobalStateOrThrow();
      node1.toStringTree();
      node2.isLocalResultCall();
      node1.setWasEmptyNode(boolean0);
      node1.isObjectLit();
      node2.srcrefTree(node0);
      node0.getAncestors();
      // Undeclared exception!
      try { 
        node1.isName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 306654252
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2397));
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w[g^/C");
      node_SideEffectFlags4.clearAllFlags();
      Node node0 = Node.newString(119, "Tl(");
      node0.addSuppression("Tl(");
      node0.isBreak();
      node0.isVarArgs();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("Object#Key", node0, (ObjectType) null);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, jSTypeArray0);
      node0.getSourceOffset();
      jSTypeRegistry0.createEnumType("fDP=DC Nnqw@!", node0, functionType0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      node0.getFirstChild();
      Node node1 = new Node((-3014), 1, 29);
      node1.isDo();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      node0.getChangeTime();
      Node node1 = new Node(38);
      node0.isEquivalentTo(node0, false, false, false);
      node0.addSuppression("@T");
      node0.isGetElem();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isComma();
      node0.getChangeTime();
      Node node1 = node0.getFirstChild();
      node1.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      Node node2 = new Node(39, node1, node1, (Node) null, node1, 1, 125);
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isFalse();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isDebugger();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags5.setAllFlags();
      node0.isNew();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(100, "Object#Element", 2, 12);
      node1.isTypeOf();
      node1.getIntProp(55);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isDebugger();
      Node.newNumber((-1200.2020066661), 101, 954);
      Node node3 = node2.copyInformationFromForTree((Node) null);
      node1.useSourceInfoIfMissingFromForTree(node2);
      String string0 = "d";
      node3.addSuppression(string0);
      int int0 = 77;
      Node.newNumber((double) node1.NO_SIDE_EFFECTS, int0, node3.FLAG_ARGUMENTS_UNMODIFIED);
      int int1 = (-1513);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(26, 126, 117);
      node0.setLineno(26);
      node0.isDelProp();
      node0.isOptionalArg();
      node0.isAssignAdd();
      Node node1 = Node.newString("com.google.common.collect.AbstractListMultimap", (-210), 112);
      node1.getFirstChild();
      node0.isEquivalentTo(node1);
      Node[] nodeArray0 = new Node[6];
      Node node2 = new Node((-11));
      nodeArray0[0] = node2;
      Node node3 = new Node(1514, nodeArray0, 30, (-862048943));
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("{iY4~]bpp>I");
      node0.isName();
      node0.getChangeTime();
      node0.isRegExp();
      Node node1 = new Node(120, node0, node0, node0);
      node1.isWhile();
      node1.cloneTree();
      node0.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isAssignAdd();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING {iY4~]bpp>I is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("!kJ[V", (String) null, 300, 1830);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isComma();
      Node node1 = node0.getFirstChild();
      node1.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      Node node2 = new Node(300, node0, node0, (Node) null, (Node) null, 32, 2);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = jSDocInfo0.getAssociatedNode();
      node3.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(93, 483);
      node0.setSourceEncodedPosition(483);
      Node node1 = Node.newString(16, ".&R[&o");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node0.siblings();
      node0.addChildrenToFront(node1);
      node1.isAdd();
      node1.getQualifiedName();
      node1.isNE();
      node0.hasMoreThanOneChild();
      node1.getJSType();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.cloneTree();
      node0.isTypeOf();
      node0.getIntProp(2199);
      node0.isEquivalentTo(node1, true, false, false);
      node0.isVoid();
      node1.isVar();
      node0.isNull();
      node0.isString();
      Node.extractCharno((-1749));
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      Node node0 = new Node(57);
      node0.setSourceEncodedPosition(655);
      Node node1 = Node.newString(36, "com.google.javascript.rhino.Node$StringNode");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node0.isInc();
      node1.isThis();
      node1.getProp((-921));
      Node.newNumber((double) 57);
      node0.isGetElem();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString((-1239), " h,q[MNiQ+.[H;$J");
      Node node1 = node0.copyInformationFrom(node0);
      Locale locale0 = Locale.GERMANY;
      node0.isVarArgs();
      Node node2 = new Node(52, node1, node1);
      node2.isObjectLit();
      node1.isFunction();
      node1.isQuotedString();
      node1.isContinue();
      node0.addChildrenAfter(node2, node2);
      node0.isWhile();
      node0.children();
      node0.useSourceInfoIfMissingFrom(node2);
      // Undeclared exception!
      try { 
        node2.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2397));
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w[g^/C");
      node_SideEffectFlags4.clearAllFlags();
      Node node0 = Node.newString(119, "Tl(");
      node0.addSuppression("Tl(");
      node0.isBreak();
      node0.getLastChild();
      Node node1 = node0.getAncestor((-1126));
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getChangeTime();
      Node node1 = new Node(15);
      node1.isEquivalentTo(node0, true, false, true);
      node0.addSuppression("Object#Key");
      node1.isGetElem();
      node0.checkTreeEqualsImpl(node0);
      node0.addChildBefore(node1, node1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ns.%@+tMFm\"qHz57l");
      boolean boolean0 = node0.isSetterDef();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("~kIX@ 6b'XFq_", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Node node1 = enumElementType0.getPropertyNode("`O2S)(K@eC:");
      node0.isEquivalentToTyped((Node) null);
      int int0 = (-879);
      node0.putIntProp(node1.FLAG_THIS_UNMODIFIED, int0);
      boolean boolean1 = false;
      Node node2 = null;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node2, boolean0, boolean1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(26, 26, 117);
      node0.setLineno(26);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("xb\"}EaKW(FdQ?UAo[", "ns.%@+tMFm\"qHz57l", 55, 40);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      node1.getFirstChild();
      node0.isNot();
      node1.addSuppression("Not declared as a type name");
      node0.isBreak();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(126, "`|kg2", 1922, 16777216);
      Object object0 = new Object();
      node0.putProp(16777216, object0);
      node0.isFalse();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isStringKey();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isUnscopedQualifiedName();
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      Node node1 = null;
      node0.addChildBefore((Node) null, (Node) null);
      Node node2 = new Node(templateType0.ENUMDECL, node1, node1, node0, node1, node0.IS_DISPATCHER, node0.SYNTHETIC_BLOCK_PROP);
      node_NodeMismatch0.equals(node2);
      node2.getString();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.isAdd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString("Use SerializedForm", 301, 2911);
      Node node1 = new Node(42, node0, node0, node0, 0, (-867));
      Node node2 = node1.copyInformationFrom(node0);
      Locale locale0 = Locale.CHINESE;
      node0.isVarArgs();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node3 = Node.newString(53, "", 30, 53);
      Node node4 = node3.srcref(node1);
      node1.isNoSideEffectsCall();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node3.isFunction();
      node2.isTrue();
      node2.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node5 = new Node(46);
      node4.getString();
      node1.isTry();
      node2.isAnd();
      node0.getDirectives();
      node0.isEquivalentTo(node3);
      node2.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString("[I'Ofx9B5|");
      Node node1 = Node.newNumber((double) 32, 54, 0);
      Node node2 = new Node(36, 46, 4095);
      Node node3 = new Node(118, node1, node1, node2, 4, 48);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      StringWriter stringWriter0 = new StringWriter(1);
      node3.isInc();
      node1.setVarArgs(false);
      node2.isDebugger();
      node1.isAdd();
      node2.getQualifiedName();
      node0.isTry();
      node2.setOptionalArg(false);
      node0.isDec();
      node1.srcrefTree(node0);
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      node2.addChildToFront(node0);
      node3.isIf();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isGetProp();
      node1.isStringKey();
      Node.mergeLineCharNo(169, 54);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.getSideEffectFlags();
      node0.putProp(18, "~^DY}},@5wk] 3");
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newNumber(0.0);
      node1.isCall();
      node1.getDouble();
      Node.newString("/DG y!x.Y:LlF~/FQ >", 18, 83);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(32);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(118, node0, node0, node0, 4, 105);
      node0.getSourceFileName();
      node1.checkTreeEqualsImpl(node0);
      node0.getInputId();
      node1.isCase();
      node1.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node2 = new Node(40, node1);
      node2.useSourceInfoFrom(node1);
      node0.isRegExp();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.isAnd();
      Node node1 = Node.newString(101, "", 55, 40);
      node1.isEquivalentToTyped(node1);
      node0.getIntProp(57);
      node1.isDo();
      Node node2 = new Node(1730, 57, 282);
      Node node3 = Node.newString((-1292), "~^DY}},@5wk] 3", (-3440), 4095);
      node3.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node node4 = Node.newNumber((double) 30);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[0];
      Node node5 = new Node(39, nodeArray0, 37, 1);
      Node node6 = Node.newNumber((double) 49, 49, 118);
      node6.isContinue();
      node5.isThrow();
      node3.isNull();
      node6.isInstanceOf();
      node4.setString("~^DY}},@5wk] 3");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 40, 40);
      Node node0 = new Node(40);
      Node node1 = Node.newString("", 1, 2);
      node0.addChildToBack(node1);
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      node0.toStringTree();
      node0.hasOneChild();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.children();
      Node node1 = new Node(55);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.getLastChild();
      node2.getAncestor((-4096));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      node0.isFor();
      node0.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString("[I'Ofx9B5|");
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 32, 54, 0);
      Node node2 = new Node(36, 148, 4095);
      Node node3 = new Node(118, node1, node1, node2, 4, 105);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      node2.isCall();
      node3.copyInformationFromForTree(node1);
      node1.useSourceInfoIfMissingFromForTree(node3);
      node1.addSuppression("[I'Ofx9B5|");
      node2.isIf();
      node0.isVar();
      node1.isGetProp();
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.getLength();
      Node node1 = Node.newString("o6KkL");
      node0.isEquivalentTo(node1, true, true, false);
      node0.isLocalResultCall();
      Node node2 = new Node(50, node0, node0, node0, 57, 49);
      Node node3 = new Node(118, node2, node2, node2, 4, 105);
      node2.getSourceFileName();
      node3.checkTreeEqualsImpl(node2);
      Node node4 = Node.newString((-1016), "", 15, 119);
      node3.srcref(node0);
      node4.isNoSideEffectsCall();
      node3.isFunction();
      node1.isTrue();
      node3.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node5 = new Node(574);
      node0.setCharno(30);
      node1.getString();
      node3.isTry();
      node2.isAnd();
      node3.isUnscopedQualifiedName();
      node4.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(26, 26, 117);
      node0.setLineno(26);
      node0.isDelProp();
      node0.isSyntheticBlock();
      node0.isAssignAdd();
      node0.getFirstChild();
      node0.isEquivalentTo(node0);
      Node node1 = new Node((-11));
      node1.copyInformationFrom((Node) null);
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDec();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      Node node4 = new Node(57);
      node2.isEquivalentTo(node3, true, false, false);
      node3.addSuppression("=<*}}o");
      node3.isGetElem();
      node0.checkTreeEqualsImpl(node3);
      node1.addChildBefore(node3, node0);
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", 301, 301);
      Node node1 = Node.newString(57, " h,q[MNiQ+.[H;$J", 40, (-1742));
      node0.isTypeOf();
      node0.getIntProp(2199);
      Node.newString(42, " h,q[MNiQ+.[H;$J");
      node0.isEquivalentTo(node1, true, false, false);
      node0.isVoid();
      node1.isVar();
      Node node2 = new Node(40, node1);
      node2.getString();
      node0.isTry();
      node2.isAnd();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(29, "Object#Element", 2, 12);
      node1.isTypeOf();
      node1.getIntProp(55);
      node1.isDo();
      Node node2 = new Node(1, 39, 132);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node node3 = new Node(0, node2, node1, node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.hasMoreThanOneChild();
      node0.getJSType();
      node0.mayMutateGlobalStateOrThrow();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "~^DY}},@5wk] 3";
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.isAnd();
      Node node1 = new Node(30, node0, node0, node0, 56, 4);
      node1.isEquivalentToTyped(node1);
      node0.getIntProp(57);
      node1.isDo();
      Node node2 = new Node(1730, 57, 282);
      Node node3 = Node.newString((-1292), "~^DY}},@5wk] 3", (-3440), 4095);
      node3.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node.newNumber((double) node1.VAR_ARGS_NAME);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[0];
      Node node4 = new Node(node2.EMPTY_BLOCK, nodeArray0, node1.OPT_ARG_NAME, node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      int int0 = 118;
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      node0.getChangeTime();
      Node node1 = new Node(38);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.addSuppression("Object#Key");
      node2.isIf();
      node2.isVar();
      Node node4 = new Node(35, node3, node3, 153, (-1179));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node5 = new Node(153, node4, (Node) null);
      node5.isGetProp();
      node5.isStringKey();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InputId inputId0 = new InputId("z;<qOmKpw");
      Node node0 = Node.newNumber((double) 53);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("{iY4~]bpp>I");
      node0.isName();
      node0.getChangeTime();
      node0.setSourceEncodedPosition(0);
      Node node1 = Node.newString(47, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(31);
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setThrows();
      node_SideEffectFlags7.valueOf();
      node1.addChildrenToFront(node0);
      node1.isAdd();
      node1.getQualifiedName();
      node0.removeProp(1023);
      node1.isFromExterns();
      node1.getDirectives();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType(jSType0, (List<JSType>) immutableList0);
      jSTypeRegistry0.getType((StaticScope<JSType>) functionType0, "Not declared as a constructor", "Z82O!mY5`I\"$j6Id'g", 1, 41);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry0);
      Node node0 = new Node((-1));
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      Node node1 = new Node(118, node0, node0, node0, 4, 105);
      node0.getSourceFileName();
      node1.checkTreeEqualsImpl(node0);
      node0.getInputId();
      node1.isCase();
      node0.mayMutateGlobalStateOrThrow();
      node0.getChildBefore(node1);
      node1.isCall();
      node1.getDouble();
      // Undeclared exception!
      try { 
        node0.isBreak();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 54, 4, 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.addSuppression("Unknown class name");
      node3.isNot();
      node2.addSuppression("guP3M3>S6");
      node0.isEmpty();
      node3.isDo();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("V~I<Dh5y]nv%W", "V~I<Dh5y]nv%W", 0, (-1368));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      Node node0 = new Node(21, 1, (-1368));
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("", node0, (ObjectType) functionType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      Node node2 = Node.newNumber(1377.084976246344);
      node2.getChangeTime();
      jSType0.restrictByNotNullOrUndefined();
      node0.getFirstChild();
      Node node3 = Node.newNumber((-1.0), 2642, 30);
      node3.useSourceInfoFromForTree((Node) null);
      int int0 = (-2956);
      Node node4 = new Node(node3.DECR_FLAG, node3.QUOTED_PROP, int0);
      node2.isContinue();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(26, 26, 117);
      node0.setLineno(26);
      node0.isDelProp();
      node0.isAssignAdd();
      node0.getFirstChild();
      node0.isEquivalentTo(node0);
      Node node1 = new Node((-11));
      node1.cloneNode();
      node1.copyInformationFrom((Node) null);
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(26, (-1186), 117);
      node0.setLineno(26);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(13);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = Node.newNumber(6.0);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(15, nodeArray0, 351, 113);
      Node node3 = Node.newNumber((-447.59), 39, 112);
      node2.isContinue();
      node3.isThrow();
      node0.isNull();
      node2.isInstanceOf();
      node0.setString("com.google.common.base.CharMatcher$10");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(" h,q[MNiQ+.[H;$J", (-3332), (-1239));
      Node node1 = node0.copyInformationFrom(node0);
      Locale locale0 = Locale.GERMANY;
      boolean boolean0 = node0.isVarArgs();
      Node node2 = new Node((-3440), node0, node0, node0, (-2135), 56);
      node1.addChildToBack(node0);
      int int0 = (-4696);
      node1.getIntProp(int0);
      boolean boolean1 = false;
      node1.isEquivalentTo(node0, boolean0, boolean1, boolean0);
      // Undeclared exception!
      try { 
        node1.isVar();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList.of(jSType0, jSType0);
      Node node0 = Node.newString("Xp/a", 1, 1);
      node0.getIntProp(1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("PWp=f|<&HX1", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node1 = enumElementType1.getPropertyNode("com.google.javascript.rhino.Node$IntPropListItem");
      node0.isEquivalentTo((Node) null, false, false, false);
      node1.isVoid();
      node0.isVar();
      node1.isNull();
      node0.isString();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(101, "`|kg2", 1922, 16777216);
      Object object0 = new Object();
      node0.putProp(16777216, object0);
      node0.isFalse();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node0.getProp(16777216);
      Node node1 = Node.newString("U?<8o", 46, 42);
      node0.setLength(55);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isEquivalentToShallow(node0);
      node0.isAssign();
      node0.setVarArgs(true);
      Node node1 = new Node(12);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      Node node2 = new Node(1, node0, node0, node0, node1, 47, 12);
      node0.detachFromParent();
      node0.addChildBefore(node2, node1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
      immutableList0.stream();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isEquivalentToShallow(node0);
      node0.isAssign();
      node0.setVarArgs(true);
      node0.isDebugger();
      Node node1 = Node.newString("ns.%@+tMFm\"qHz57l", 1918, 1);
      node1.isLocalResultCall();
      node1.toString(false, false, false);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newNumber(865.8153494814);
      Node node1 = new Node((-309), node0);
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-2397));
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      Node node0 = Node.newString(119, "Fy");
      int int0 = Node.MAX_COLUMN_NUMBER;
      Node node1 = new Node(119, node0, node0, 39, 12);
      node1.isDebugger();
      node1.isOptionalArg();
      node0.isDefaultCase();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(142, 142, 142);
      node0.setLineno(2666);
      Node node1 = new Node(913);
      node1.getAncestors();
      node0.getChangeTime();
      node1.isRegExp();
      node1.isWith();
      node0.setSourceEncodedPositionForTree(40);
      node1.isCast();
      Node.newString("valueOf", 38, 1918);
      Node node2 = new Node(2519, node0, node1, 1710, 791);
      node1.isQualifiedName();
      node2.addChildrenAfter(node0, node0);
      int int0 = 101;
      node1.getAncestor(int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("~^DY}},@5wk] 3");
      node0.isAnd();
      Node node1 = Node.newString(101, "", 55, 40);
      node1.isEquivalentToTyped(node1);
      node0.getIntProp(57);
      node1.isDo();
      Node node2 = new Node(1730, 57, 282);
      Node node3 = Node.newString((-1292), "~^DY}},@5wk] 3", (-3440), 4095);
      node3.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node node4 = Node.newNumber((double) 30);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node2.addSuppression("mzim5NCWRY");
      node4.isIf();
      Node node5 = Node.newNumber(2403.0, 640, 1356);
      node5.isVar();
      node2.isGetProp();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)29;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[3] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-28.0), 400, 400);
      node0.setLength(37);
      node0.getLength();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0KZ(2");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildToBack(node1);
      node0.setSourceFileForTesting("+9?YPX");
      node0.isLabelName();
      node0.getString();
      node0.isName();
      node0.getChangeTime();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(2);
      Node node1 = new Node(31, node0, 57, 798);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getSourceOffset();
      node0.mayMutateArguments();
      Node node2 = Node.newString(56, "CW");
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = Node.newString((-2705), "CW", (-2635), 4095);
      node1.isFunction();
      node1.isScript();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yVg9+R_Vt x~*");
      node3.getBooleanProp(112);
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString("o6KkL");
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0, node0, node0, 57, 49);
      Node node2 = new Node(118, node1, node1, node1, 4, 105);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
      node1.getInputId();
      node1.isCase();
      node2.isNoSideEffectsCall();
      node2.isEmpty();
      node1.isLocalResultCall();
      node2.setVarArgs(true);
      node2.isDebugger();
      node1.isAdd();
      node1.getQualifiedName();
      node2.isTry();
      node1.setOptionalArg(true);
      node2.isDec();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", 54, 54);
      Node node0 = new Node(57);
      node0.setSourceEncodedPosition(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node0.isInc();
      node0.isThis();
      node0.getProp((-921));
      node0.isLabel();
      node0.setString("Object#Key");
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString("first new child has existing parent");
      node0.isCatch();
      node0.setWasEmptyNode(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString(8, "com.google.javascript.rhino.Node", 50, (-1));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isTry();
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newString(39, "first new child has existing parent", 1286, (-1721));
      node3.detachChildren();
      node3.getDouble();
      node0.removeChild(node3);
      node3.getFirstChild();
      node3.cloneTree();
  }
}
