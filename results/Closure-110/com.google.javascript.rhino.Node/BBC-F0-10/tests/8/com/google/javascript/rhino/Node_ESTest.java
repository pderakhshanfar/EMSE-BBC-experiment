/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:18:27 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isThis();
      node0.isDec();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(16, node0);
      node0.isTry();
      node1.children();
      node0.isVar();
      node0.srcrefTree(node1);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U2U_FUNCTION_TYPE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("U2U_FUNCTION_TYPE");
      Node node1 = new Node(21, node0, node0, (-2481), 152);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node1.srcrefTree(node0);
      node1.isArrayLit();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(91, node0, node0, node0, node0, 1, 50);
      node0.getAncestor(46);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node0.getLastSibling();
      node1.removeFirstChild();
      node3.isNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node3.putIntProp(32, 43);
      Node.newNumber((double) 55);
      node1.isNE();
      // Undeclared exception!
      try { 
        node1.replaceChild(node3, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(156, 156, 156);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(16, node0, node0, node0, 42, 37);
      node0.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isOnlyModifiesThisCall();
      Node.newString("R )='");
      node1.srcrefTree(node0);
      node0.isVoid();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(147, node0, node0, node0, node0, (-1516), 1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isDebugger();
      node1.setSourceEncodedPositionForTree(40);
      node0.useSourceInfoFromForTree(node2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isBlock();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
      Node node1 = new Node(42, node0, node0, node0);
      node1.cloneTree();
      node1.getQualifiedName();
      node1.isFalse();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(49, node0, node0, node0, node0, 54, 49);
      Node node2 = node0.getLastSibling();
      node1.isAdd();
      node1.isCall();
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString(116, "aKO<~6LJnWn'o", 116, (-669));
      Node node1 = new Node(116, node0, node0, node0, 41, 31);
      InputId inputId0 = new InputId("aKO<~6LJnWn'o");
      node0.putProp(42, inputId0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3434);
      node1.setType((-4037));
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesThisCall();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(42, node0, node0, node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.useSourceInfoIfMissingFrom(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-417.1908), (-1522), 34);
      Node node1 = new Node(34, node0, node0, node0);
      Node node2 = new Node(130, node1, node1, 42, 4095);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node2.getAncestors();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(121, nodeArray0);
      node2.srcrefTree(node3);
      Node node4 = null;
      try {
        node4 = new Node(4095, nodeArray0, (-1639), 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber((double) 11);
      Node node1 = new Node(11, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node1.getLastSibling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node2.toString();
      node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node2.isEquivalentTo(node1, true, true, false);
      node1.isNE();
      Node node4 = Node.newNumber((double) 57, 591, (-1934));
      node4.isDefaultCase();
      Node node5 = Node.newString(8, "BITAND", 3434, 31);
      node2.copyInformationFromForTree(node0);
      node5.addChildrenToBack(node3);
      Node node6 = new Node(50, node4, (-474), 47);
      node6.isRegExp();
      Node.extractCharno(36);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("h9!-JBln");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node node1 = new Node(4941, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node2.removeFirstChild();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(37, (-482), 39);
      node4.isBlock();
      node0.isSwitch();
      node4.useSourceInfoFrom(node0);
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(100, node0, node0, node0, node0, (-1522), 50);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node1.getLastSibling();
      node2.isDebugger();
      node2.putIntProp(50, 124);
      node2.isEmpty();
      node0.setWasEmptyNode(false);
      node3.isLabel();
      node2.isNumber();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // OR 100 [free_call: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(114.0);
      node0.isDelProp();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", true);
      Node node3 = new Node(86, node2, 52, 102);
      Node node4 = node3.getLastSibling();
      node2.isEquivalentTo(node4, true, false, true);
      Node node5 = new Node(43, node3, 8, 57);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node4.replaceChild(node5, node5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, (-669));
      Node node1 = new Node(119, node0, node0, node0, 42, 31);
      node1.toStringTree();
      node1.mayMutateArguments();
      node1.removeChild(node0);
      node0.isEquivalentTo(node0, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isScript();
      node1.siblings();
      node1.cloneTree();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, (-669));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node1.isCall();
      node1.useSourceInfoIfMissingFrom(node0);
      node0.removeProp(56);
      node1.isWhile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(116);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node0.isDebugger();
      int int0 = Node.NO_SIDE_EFFECTS;
      Node node1 = new Node(49, node0, 1084, 2300);
      Node node2 = node0.srcrefTree(node1);
      node2.isArrayLit();
      node1.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isThis();
      node0.isDec();
      node0.getJsDocBuilderForNode();
      node0.wasEmptyNode();
      Node node1 = new Node(16, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isAnd();
      // Undeclared exception!
      try { 
        node2.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(100, node0, node0, node0, node0, (-1522), 50);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node1.getLastSibling();
      node2.isDebugger();
      node2.putIntProp(50, 124);
      Node.newNumber((double) 4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isAnd();
      // Undeclared exception!
      try { 
        node3.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      Node node1 = new Node(39, node0, node0, node0, node0);
      node1.putIntProp(43, (-1241));
      node1.getQualifiedName();
      node1.getExistingIntProp(43);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(170);
      node0.isGetterDef();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isString();
      node0.isIn();
      InputId inputId0 = new InputId("first new child has existing parent");
      node0.getInputId();
      node0.setInputId((InputId) null);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("J-2F<2CxI14", false);
      node0.getJSDocInfo();
      node0.isLabelName();
      Node node1 = new Node(43, node0, 33, 4095);
      Node node2 = new Node(1678, node1);
      node1.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isThis();
      node0.isDec();
      node0.getJsDocBuilderForNode();
      node0.wasEmptyNode();
      Node node1 = new Node(43);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(15, node2, node1);
      node3.isQualifiedName();
      node1.mayMutateArguments();
      node0.isGetProp();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("msg.jsdoc.function.newnotobject");
      node0.setLength(121);
      Node node1 = new Node(50);
      Node node2 = new Node(48, 0, 4095);
      node1.addChildToFront(node2);
      node1.getJsDocBuilderForNode();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node1.addChildBefore(node0, node2);
      node2.isQualifiedName();
      node0.getIntProp(37);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = Node.newNumber((double) 8);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(1717, 37, (-61));
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.isCall();
      node2.removeProp((-5584));
      node1.isWhile();
      Node node4 = new Node(38, 1014, 52);
      Node node5 = new Node(54, node4, node3, node0);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      node5.isSwitch();
      node5.replaceChild(node4, node2);
      node4.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(103);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node0.isDebugger();
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.isInc();
      node0.toStringTree();
      Node node1 = new Node(45);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString(1724, "^%P1", 1724, 112);
      node0.isOptionalArg();
      // Undeclared exception!
      try { 
        node0.appendStringTree((Appendable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1724
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(121);
      node0.getStaticSourceFile();
      Node node1 = new Node(30);
      node0.isCast();
      node1.setLineno((-1576));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node0.isString();
      node_FileLevelJsDocBuilder0.append(".");
      node1.getLength();
      node1.setOptionalArg(true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.cloneTree();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node2.getAncestors();
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(154);
      node0.cloneTree();
      node0.getProp(600);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node0 = new Node(35, 35, 35);
      Node node1 = new Node(35, node0);
      node1.useSourceInfoFromForTree(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isBlock();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(121);
      node0.getStaticSourceFile();
      Node node1 = new Node(30);
      node0.isCast();
      node0.getJsDocBuilderForNode();
      node0.isString();
      Node node2 = node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node2.isString();
      node2.isTry();
      node2.setWasEmptyNode(false);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      node0.getStaticSourceFile();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node_SideEffectFlags0.setAllFlags();
      node0.isString();
      Node node1 = new Node(57, 0, 53);
      node1.isIn();
      node0.checkTreeEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-670));
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node1.isExprResult();
      node0.isOnlyModifiesThisCall();
      Node node2 = node1.getAncestor(0);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      node0.getAncestors();
      Node node1 = new Node(154);
      Node node2 = new Node(56, node0, node0, node1);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      Node node4 = node2.copyInformationFromForTree(node3);
      String string0 = "{proxy:";
      InputId inputId0 = new InputId("{proxy:");
      node4.setInputId(inputId0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("NEG", false);
      node0.getJSDocInfo();
      node1.isLabelName();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node0.isBlock();
      node0.getIntProp((-141));
      node0.toString();
      node0.isInstanceOf();
      node_AncestorIterable0.iterator();
      node0.isString();
      Node node1 = new Node((-758), node0, node0, node0, node0, 2, 0);
      node1.isTry();
      node1.setWasEmptyNode(false);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isCatch();
      node1.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(132);
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node1.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives((Set<String>) null);
      Node node2 = new Node((-850), node1, node1, node1);
      node0.getAncestors();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(121);
      node0.getStaticSourceFile();
      node0.isCast();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node0.isString();
      node_FileLevelJsDocBuilder0.append(".");
      node0.getLength();
      node0.setOptionalArg(true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node.newString(".", 1369, 1);
      node0.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.setDouble(840.2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 119;
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 119, (-669));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      InputId inputId0 = new InputId("aKO<~6LJnWn'o");
      node0.putProp(42, inputId0);
      // Undeclared exception!
      try { 
        node0.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString("h9!-JBln");
      Node node1 = new Node(32, node0, (-3064), 1);
      node1.toString();
      node0.isInstanceOf();
      node1.setVarArgs(true);
      node1.isDelProp();
      node1.isEquivalentToShallow(node0);
      node0.getQualifiedName();
      node1.isAssignAdd();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(121);
      node0.getStaticSourceFile();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isBlock();
      Node node1 = new Node((-2811));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-807));
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isExprResult();
      node0.isOnlyModifiesThisCall();
      Node.newString("S&XI8EyS6n-O`I");
      Node node2 = new Node(40, 1, (-3797));
      Node node3 = new Node(155, node2);
      Node node4 = node3.srcrefTree(node2);
      node4.isVoid();
      Node node5 = node2.copyInformationFrom(node1);
      node5.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1223), nodeArray0, (-1223), (-1292));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isEmpty();
      Node node1 = Node.newString(38, "7Go^ua@][-Wy}4WB", 4095, 122);
      Node node2 = new Node(1511, node0, node0, 128, (-2349));
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Node node3 = Node.newString("*S^ln6[Q/W1eI?FVk&<");
      node3.addChildToFront(node2);
      node2.addChildToBack(node3);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.setChangeTime(83);
      node4.isUnscopedQualifiedName();
      Node node5 = Node.newNumber((double) 29);
      node5.isFromExterns();
      node0.detachFromParent();
      node5.isNull();
      node4.isReturn();
      Node node6 = Node.newNumber((double) 1, 29, 49);
      node6.cloneTree();
      node2.isCase();
      node2.isTry();
      node4.getJSType();
      node4.isContinue();
      node2.isNE();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("f;p^U{0caPKH\"fL#E");
      node0.getQualifiedName();
      Node node1 = new Node(31);
      Node node2 = new Node(1513, node1, node1, node1);
      node1.isFromExterns();
      Node node3 = node1.useSourceInfoFrom(node2);
      Node node4 = null;
      try {
        node4 = new Node(52, node1, node0, node2, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isString();
      node1.isDefaultCase();
      Node node2 = new Node(51, node1, node1, 29, 543);
      node2.isScript();
      Node node3 = node2.cloneTree();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getAncestors();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("Object#Element");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<TemplateType> stack0 = new Stack<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) stack0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node3.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      node1.isCall();
      Node node4 = new Node(31, node3);
      node1.isEquivalentToShallow(node4);
      node3.addSuppression("Object#Element");
      node0.isIn();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      node4.setJSDocInfo(jSDocInfo1);
      Node node5 = null;
      try {
        node5 = new Node(585, node3, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(16, 57, 53);
      node1.getQualifiedName();
      Node node2 = new Node(57, 49, 4095);
      Node node3 = node0.getLastSibling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node3.putIntProp(31, 1);
      Node.newNumber((double) 55);
      // Undeclared exception!
      try { 
        node0.setDouble(12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      Node node1 = new Node(117, node0, node0, node0, node0, (-361), 50);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.getLastSibling();
      node0.putIntProp(54, (-1190));
      Node.newNumber((-2208.3566593));
      try { 
        node2.setDouble(777.7629);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETPROP NEG [slash_v: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(41, 4, 47);
      Node node2 = new Node(47, node1, node0, node0, node1, (-669), 117);
      node2.isOnlyModifiesArgumentsCall();
      node2.getLastSibling();
      node0.isNoSideEffectsCall();
      node1.putIntProp(2248, 48);
      Node.newNumber((double) 12);
      node2.isCase();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 36, 50);
      Node node2 = Node.newString(51, "no next sibling.");
      node2.putIntProp(1513, 51);
      Node node3 = Node.newNumber(85.0);
      node0.isEquivalentTo(node3, false, false, false);
      node1.isNE();
      node3.isDefaultCase();
      Node node4 = Node.newString(899, "no next sibling.", 52, 8287);
      node4.copyInformationFromForTree(node2);
      Node node5 = new Node(12, node1, 48, 47);
      node2.isUnscopedQualifiedName();
      node2.isRegExp();
      node1.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(16, 57, 53);
      node1.useSourceInfoFromForTree(node0);
      Node node2 = node0.getLastSibling();
      node2.putIntProp(33, 1);
      Node.newNumber((double) 55);
      // Undeclared exception!
      try { 
        node0.setDouble(12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(4095);
      Node node1 = new Node(51, node0, 4095, 16);
      node1.toString();
      node1.isInstanceOf();
      node1.setVarArgs(false);
      node1.isDelProp();
      node0.hasOneChild();
      Node node2 = node1.srcrefTree(node0);
      node2.isVoid();
      node2.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setLength(32);
      Node node1 = new Node(103);
      node1.isNew();
      node0.isDec();
      node0.getBooleanProp(2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(152, (-780));
      node0.getLength();
      Node node2 = Node.newString(57, "Object#Element");
      node2.setOptionalArg(true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = Node.newString("Object#Key", (-1998), 40);
      node2.setJSDocInfo(jSDocInfo0);
      try { 
        node3.setDouble((-411.88654995008));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Object#Key is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isCast();
      node0.isDec();
      node0.getJsDocBuilderForNode();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(37, "com.google.common.collect.ImmutableList");
      node0.useSourceInfoFromForTree(node1);
      node1.isCall();
      node0.removeProp(2);
      node0.isWhile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
      Node node1 = new Node(100, node0, node0);
      Node node2 = node1.getLastSibling();
      node2.getAncestors();
      node0.getString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType.cast((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("Node tree inequality:\nTree1:\n", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(147, node0, node0, node0, node0, (-1516), 1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node1.getLastSibling();
      node3.isDebugger();
      node3.setSourceEncodedPositionForTree(40);
      node2.putIntProp(39, 48);
      Node.newNumber(2150.96848413153);
      node2.isAnd();
      node2.isBreak();
      node3.getAncestor(8);
      try { 
        node2.setDouble(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETTER_DEF 0 [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setLength(32);
      Node node1 = new Node(103);
      node1.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node node2 = new Node((-294));
      Node node3 = new Node(132);
      Node node4 = node3.useSourceInfoFromForTree(node2);
      InputId inputId0 = new InputId("{proxy:");
      node0.setInputId(inputId0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{proxy:", false);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node2;
      nodeArray0[1] = node4;
      nodeArray0[2] = node2;
      nodeArray0[3] = node4;
      nodeArray0[4] = node0;
      nodeArray0[5] = node4;
      Node node5 = null;
      try {
        node5 = new Node(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(1908874353, (-760), 6);
      Node node1 = new Node(3392, node0, 120, 2);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(120, node0, 31, 12);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives(linkedHashSet0);
      Node node2 = new Node(43, node0, node0, node1);
      node1.getAncestors();
      node1.getDouble();
      node1.setSourceEncodedPositionForTree(51);
      node2.removeChildAfter(node0);
      node0.toString(false, true, false);
      node1.cloneNode();
      node1.isNot();
      node1.children();
      node2.isQualifiedName();
      node1.wasEmptyNode();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(297, (-1339), 297);
      nodeArray0[0] = node0;
      Node node1 = new Node(39, nodeArray0);
      node0.isEquivalentTo(node0, false, false, false);
      node0.isAnd();
      // Undeclared exception!
      try { 
        Node.newString((String) null, 49, (-1649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesGlobalState();
      node2.getBooleanProp(16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.addSuppression(".:h-");
      node1.isIn();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      node1.addChildAfter(node2, node3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      node0.setChangeTime(27591);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isName();
      Node node1 = node0.getLastSibling();
      node1.getChangeTime();
      node0.setVarArgs(true);
      node1.isDelProp();
      Node node2 = Node.newString("q;{)~49,q");
      Node node3 = new Node(85, node2, node0, 29, 87);
      node0.isVoid();
      node3.isTypeOf();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setLength(32);
      Node node1 = new Node(103);
      node1.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node1.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setAllFlags();
      node0.checkTreeEqualsImpl(node1);
      node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node2 = node1.getLastSibling();
      node1.isEquivalentTo(node2);
      node1.isDebugger();
      Node node3 = node2.srcrefTree(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.putIntProp(4, 1106);
      node1.isIf();
      node2.getSourcePosition();
      node3.isAnd();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(106);
      Node node0 = Node.newString(106, "Node has existing properties.");
      node0.setLength(167967);
      Node node1 = new Node(30, node0);
      node0.isEquivalentToShallow(node1);
      node1.addSuppression("Node has existing properties.");
      node1.isIn();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(132);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(103, node0, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isIn();
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newNumber((-1.0));
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber((-14.93975597948656));
      node0.getDirectives();
      Node node1 = new Node(122);
      Node node2 = node1.cloneTree();
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives((Set<String>) null);
      Node node3 = new Node(57, node2, node1, node1);
      node2.getAncestors();
      // Undeclared exception!
      try { 
        node3.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(120);
      node0.isCast();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node_FileLevelJsDocBuilder0.append("<invalid>");
      node0.isDebugger();
      node0.isParamList();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      Node node1 = new Node(102, node0, node0, node0);
      node0.srcrefTree(node1);
      node0.isArrayLit();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(132);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setSourceEncodedPositionForTree(53);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isAdd();
      node0.isOptionalArg();
      node0.isCall();
      node0.isFor();
      node0.isEmpty();
      node0.getProp(43);
      Node node1 = new Node(132, node0, node0);
      node0.srcref(node1);
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("`g|Q");
      Node node1 = new Node(13, node0, node0, node0, node0, 42, 12);
      node0.isOnlyModifiesArgumentsCall();
      node1.useSourceInfoFromForTree(node0);
      Node node2 = null;
      try {
        node2 = new Node(98, (Node[]) null, 42, 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString(33, "NEG");
      int int0 = Node.COLUMN_MASK;
      node0.isCall();
      Node node1 = new Node(8233, node0);
      node0.isEquivalentToShallow(node1);
      node1.addSuppression((String) null);
      Node node2 = Node.newString("NEG");
      Node node3 = new Node(2441, node2, node1, 2, (-2926));
      node3.isIn();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node4 = node2.setJSDocInfo(jSDocInfo0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node5 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node6 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        node5.addChildAfter(node4, node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives(linkedHashSet0);
      Node node2 = new Node(43, node0, node0, node1);
      node1.getAncestors();
      node1.getDouble();
      node1.setSourceEncodedPositionForTree(51);
      Node node3 = node0.cloneTree();
      Node node4 = new Node(21, 55, 39);
      node4.srcref(node3);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node4);
      node1.getAncestors();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-417.1908), (-1522), 34);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", false);
      Node node1 = new Node(48, node0, 54, (-471));
      node1.getLastSibling();
      node0.wasEmptyNode();
      Node node2 = Node.newString(669, "");
      node2.setLength(971);
      node0.setWasEmptyNode(true);
      node1.hasMoreThanOneChild();
      node0.isVar();
      node0.isArrayLit();
      Node node3 = new Node(39);
      // Undeclared exception!
      try { 
        node3.setDouble(38);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(91, node0, node0, node0, node0, 1, 50);
      node0.getAncestor(46);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node0.getLastSibling();
      // Undeclared exception!
      try { 
        node3.addChildAfter((Node) null, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(52);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.getLastSibling();
      node2.isDebugger();
      Node node3 = Node.newNumber((double) 0);
      node3.getJsDocBuilderForNode();
      node3.siblings();
      node3.putIntProp(1896, 48);
      node2.isIf();
      node2.isAnd();
      node2.isFor();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("Node has existing properties.");
      node0.isOr();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(91);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isEmpty();
      node0.setWasEmptyNode(true);
      node0.isLabel();
      node0.isAdd();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Node has existing properties. [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-417.1908), (-1522), 34);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", false);
      Node node1 = new Node(4);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("*`7_YcrvYFo}o9gSE", false);
      node2.getJSDocInfo();
      node1.isLabelName();
      Node node3 = new Node(2006, node0, 41, 47);
      node0.removeProp(116);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node4.isThis();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(91, node0, node0, node0, node0, 1, 50);
      node0.getAncestor(46);
      node0.isOnlyModifiesArgumentsCall();
      node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = node0.getLastSibling();
      node2.isNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.putIntProp(32, 43);
      Node node3 = Node.newNumber((double) 55);
      node0.isEquivalentTo(node3, false, false, false);
      node1.isNE();
      node1.isDefaultCase();
      Node.newString(1, "f;p^U{0caPKH\"fL#E", (-1), 839);
      Node node4 = new Node(38, node3, 48, 32);
      // Undeclared exception!
      try { 
        node4.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 48 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      node0.getStaticSourceFile();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node0.isString();
      Node node1 = new Node(38, node0);
      node1.isIn();
      node0.checkTreeEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-678));
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node1.isExprResult();
      node0.isOnlyModifiesThisCall();
      node0.isThrow();
      // Undeclared exception!
      try { 
        node1.setString("S&XI8EyS6n-O`I");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesGlobalState();
      node2.getBooleanProp(16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.setVarArgs(false);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(118, 16);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) vector0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.addChildrenAfter(node3, node0);
      Node node4 = new Node(46, node2, node1, node1, 3277, 47);
      // Undeclared exception!
      try { 
        node4.replaceChild(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(98, 98, 98);
      node0.isOr();
      node0.isDec();
      node0.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = new Node((-1959), node1, node1, node0, node0);
      node0.addChildrenToBack(node2);
      node1.isSyntheticBlock();
      node2.hasMoreThanOneChild();
      node2.isLabel();
      node0.isOr();
      node0.getAncestors();
      node0.isNull();
      Node.newNumber((double) 37, 38, 38);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(120, node0, 31, 12);
      node1.isBlock();
      node1.getLastChild();
      node1.setLineno(120);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(720, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = node0.cloneTree();
      node0.getDirectives();
      Node.extractLineno(31);
      node1.isVoid();
      Node.newString((-1075), "{proxy:", 32, (-1213));
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 30, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(32, node1, 53, 1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      node1.isString();
      node2.isDefaultCase();
      node2.isScript();
      Node node3 = node2.cloneTree();
      node3.cloneTree();
      node0.getDirectives();
      Node.extractLineno(2);
      node1.isVoid();
      Node node4 = Node.newString(32, "*0Hfznjqwq(", 8, 4095);
      node4.isSwitch();
      node1.isCatch();
      node0.isComma();
      Node.extractCharno(1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("Node has existing properties.", (-8), (-8));
      Node node1 = new Node((-8), node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isName();
      Node node2 = Node.newNumber((-217.647741173832), 14, 49);
      Node node3 = node0.srcrefTree(node1);
      node2.setDouble((-8));
      Node node4 = Node.newString("LwS\"BDcj3&i\"b#p@", (-1091), (-1842));
      node4.removeProp((-1055));
      node3.checkTreeTypeAwareEqualsImpl(node2);
      node1.isTrue();
      Node node5 = Node.newNumber(49.0);
      Node node6 = new Node((-1055), node1, node1, node1, node5, 4095, 0);
      node6.removeFirstChild();
      node5.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, (-669));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node1.toStringTree();
      node1.toString(true, true, true);
      node1.isContinue();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.spliterator();
      Node node2 = node1.srcrefTree(node0);
      node2.isArrayLit();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("h9!-JBln");
      Node node1 = new Node(32, node0, (-3064), 1);
      node1.toString();
      node0.isInstanceOf();
      node1.setVarArgs(true);
      node1.isDelProp();
      node1.hasOneChild();
      node0.isExprResult();
      node1.isOnlyModifiesThisCall();
      Node node2 = Node.newString("LwS\"BDcj3&i\"b#p@");
      Node node3 = node0.srcrefTree(node2);
      node3.isVoid();
      Node node4 = new Node(2048, node2);
      node1.copyInformationFrom(node4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      Node node2 = new Node(52, node0);
      node0.isDelProp();
      node0.isEquivalentToShallow(node2);
      Node node3 = Node.newNumber(744.7, 154, 29);
      Node node4 = node2.srcrefTree(node1);
      node3.removeProp(4095);
      node2.setVarArgs(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isHook();
      node4.isUnscopedQualifiedName();
      node4.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, (-669));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      InputId inputId0 = new InputId("aKO<~6LJnWn'o");
      node0.putProp(42, inputId0);
      node1.toStringTree();
      node1.toString(true, true, true);
      node1.isContinue();
      node1.removeChild(node0);
      node0.isFromExterns();
      node1.getQualifiedName();
      node0.isFalse();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(132);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setSourceEncodedPositionForTree(53);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isAdd();
      node0.isCall();
      node0.isFor();
      node0.isEmpty();
      node0.getProp(43);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(132);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node0.getBooleanProp((-497));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(54, 29);
      node0.getLength();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      node0.isThis();
      Node node1 = new Node(47, node0, node0, node0, 2702, 132);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(152);
      node0.putBooleanProp((-3043), true);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[2] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.areAllFlagsSet();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.getLastSibling();
      node0.isDebugger();
      node0.srcrefTree(node1);
      node1.putIntProp(38, 32);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("h9!-JBln");
      Node node1 = new Node(32, node0, (-3064), 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      node1.getLastSibling();
      node0.toString(true, true, true);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo1);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("E.H31", (-3840), (-135));
      node0.putBooleanProp(55, true);
      node0.getDirectives();
      Node.newString(36, "E.H31", 2, (-727));
      try { 
        node0.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING E.H31 [inferred: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, 119);
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node1.isOptionalArg();
      node0.toString();
      node1.isInstanceOf();
      node1.getIntProp(38);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node1.isString();
      node0.isIn();
      node1.isFromExterns();
      node1.getQualifiedName();
      node1.isFalse();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, 119);
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node1.isOptionalArg();
      node0.toString();
      node1.isInstanceOf();
      node1.getIntProp(38);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node1.isString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node1.isEquivalentToTyped(node0);
      node1.hasChildren();
      node0.isIn();
      node0.isWith();
      Node node2 = null;
      try {
        node2 = new Node(1331, node1, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(4095, node0);
      node1.setSourceEncodedPosition(52);
      Node node2 = new Node(40, 702, 4);
      // Undeclared exception!
      try { 
        node2.setString(" : ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(474.7481039001422);
      Node node1 = new Node(1082, node0, node0, node0, node0, 46, 44);
      node0.isOnlyModifiesArgumentsCall();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{(", true);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(42, node1);
      Node node3 = node2.getLastSibling();
      node2.wasEmptyNode();
      Node.newString(4, "8IQ/C^wTM)jlf-");
      node0.setLength(31);
      node1.hasMoreThanOneChild();
      node1.isLabel();
      // Undeclared exception!
      try { 
        node3.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      node0.isCall();
      Node node2 = new Node(52, node0);
      node0.isDelProp();
      node0.isEquivalentToShallow(node2);
      node0.addSuppression("K `g|Q");
      node2.isIn();
      node2.isCatch();
      node2.cloneNode();
      node2.isNot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.children();
      node1.isQualifiedName();
      node2.isAssign();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      node0.isHook();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node((-1));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getJSDocInfo();
      node2.isLabelName();
      Node node3 = new Node(38, node1, 37, (-1));
      node1.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = new Node(1);
      node0.isExprResult();
      node1.isSetterDef();
      // Undeclared exception!
      try { 
        node3.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      node0.isHook();
      node0.getProp(135);
      node0.isGetterDef();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(32);
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node1 = new Node(118, node0, node0, node0, 0, 42);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = Node.newNumber(1561.3813519215712, (-738), 40);
      node1.isEquivalentTo(node2, false, false, false);
      node1.useSourceInfoFromForTree(node2);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(46);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 46
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      node2.getBooleanProp(57);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(152, 16);
      node2.getLength();
      node2.isSwitch();
      node2.getJsDocBuilderForNode();
      node2.isThis();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node2.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(153);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(16, node0, node0, node0, 42, 37);
      Node node2 = node0.getLastSibling();
      Node node3 = null;
      try {
        node3 = new Node(116, node2, node0, node0, 116, 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.getIntProp(34);
      node_AncestorIterable0.iterator();
      node0.isString();
      node0.isName();
      node0.isDelProp();
      node0.isIn();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2600);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node0.getLength();
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      node0.isThis();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node0.getLastSibling();
      node3.isNoSideEffectsCall();
      node1.copyInformationFromForTree(node2);
      node0.getDirectives();
      node3.putIntProp(21, 43);
      Node node4 = Node.newNumber((double) 55);
      node3.isCase();
      // Undeclared exception!
      try { 
        node4.getChildAtIndex(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(297, (-1339), 297);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      Node node2 = new Node((-1987), node1, node1);
      node1.removeChildren();
      Node node3 = null;
      try {
        node3 = new Node(0, node1, node0, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTypeOf();
      node0.hasChildren();
      node0.isQualifiedName();
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      Node node1 = new Node(4, node0, node0, node0);
      node1.isName();
      Node node2 = Node.newNumber((double) 29, 33, 36);
      node2.isScript();
      Node.newString("new child has existing sibling");
      node1.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(2448);
      node0.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3774));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("    ", 0, 0);
      Node node1 = new Node(0, node0, node0);
      node0.addChildrenToBack(node1);
      Node node2 = node0.cloneNode();
      Node node3 = new Node(11, node2, 56, 50);
      node2.addChildToBack(node3);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1523);
      node_SideEffectFlags0.setMutatesGlobalState();
      node3.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isSwitch();
      node1.isOnlyModifiesThisCall();
      node1.isTypeOf();
      node0.isDo();
      Node node4 = Node.newString(30, "-!`q+[uO]UGzq", 148, 2381);
      // Undeclared exception!
      try { 
        node4.addChildToBack(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newNumber((-417.1908), (-431), 49);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", false);
      Node node2 = new Node(31, node1, 114, (-3442));
      node2.getLastSibling();
      node0.wasEmptyNode();
      Node node3 = Node.newString(53, "");
      node2.setLength(31);
      node3.setWasEmptyNode(true);
      node2.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node3.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.useSourceInfoIfMissingFrom(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = node0.getLastSibling();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node2.isDebugger();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node1.isIn();
      node0.hasChildren();
      node1.isWith();
      node0.isTrue();
      node0.isHook();
      node2.cloneNode();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      node0.getAncestors();
      node0.isBlock();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(154);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      InputId inputId0 = new InputId("CALL NEG");
      node0.setInputId(inputId0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{proxy:", false);
      node1.getJSDocInfo();
      node2.isLabelName();
      Node node3 = Node.newString(4095, "KLHE5D?S");
      Node node4 = node2.clonePropsFrom(node1);
      node4.isIn();
      Node node5 = new Node(49, node0, node4, node2, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node6 = new Node(4, (-424), 49);
      Node node7 = null;
      try {
        node7 = new Node(4, node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      node0.getAncestors();
      node0.isBlock();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(154);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      InputId inputId0 = new InputId("CALL NEG");
      node0.setInputId(inputId0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{proxy:", false);
      node1.getJSDocInfo();
      node2.isLabelName();
      Node node3 = new Node(40, node1, 43, 1614);
      node0.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = new Node(36);
      Node node5 = new Node(35);
      node4.isExprResult();
      node4.isSetterDef();
      node3.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.isCatch();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTypeOf();
      node0.hasChildren();
      node0.isQualifiedName();
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(443);
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(114, 114, 91);
      Node node1 = new Node(91, node0, node0, node0, node0, (-1522), 50);
      node0.getAncestor(46);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node0.getLastSibling();
      node3.isNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node3.putIntProp(32, 43);
      Node node4 = Node.newNumber((double) 55);
      node0.isEquivalentTo(node4, false, false, false);
      node1.isNE();
      node1.replaceChild(node3, node2);
      node2.isAssignAdd();
      try { 
        node0.setDouble(49.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO 114 [incrdecr: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isCall();
      Node node3 = node2.useSourceInfoFromForTree(node2);
      node2.addChildToFront(node3);
      node2.removeProp(43);
      node1.mayMutateArguments();
      // Undeclared exception!
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isCall();
      node2.useSourceInfoFromForTree(node2);
      node2.getLastSibling();
      node1.putIntProp(57, 36);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(42, "empty_block");
      node0.putBooleanProp(25, true);
      node0.isHook();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(21);
      node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.common.base.Predicates$CompositionPredicate", false);
      node1.isLabelName();
      Node node2 = new Node(52, node0, (-1918), 262144);
      node0.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = null;
      try {
        node3 = new Node(4265, node1, node0, (-2092), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLength(32);
      Node node1 = new Node(103);
      node0.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.isDebugger();
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node2 = node1.getLastSibling();
      node1.isEquivalentTo(node2);
      node1.isDebugger();
      node2.srcrefTree(node0);
      node1.putIntProp(4, 1106);
      node1.isIf();
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      Node node0 = Node.newString(98, "Node has existing properties.");
      node0.setLength(167967);
      Node node1 = Node.newNumber((double) 1, 40, (-794));
      node1.addChildrenToBack(node0);
      node1.isTrue();
      node0.isAnd();
      node0.isHook();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node has existing properties.");
      node0.setLineno(4);
      node0.getChildAtIndex((-3528));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(103);
      node0.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.isDebugger();
      node0.isParamList();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isSwitch();
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newString("]yX8<$WyUxU%8");
      Node node3 = node2.srcrefTree(node1);
      node3.isVoid();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      Node node4 = new Node(1611, nodeArray0, 1785, 1887);
      node4.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(132);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(44, node0, (-1910), 154);
      node1.setChangeTime(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node1.isName();
      Node node2 = node1.getLastSibling();
      Node node3 = Node.newNumber((double) 48, 9, 52);
      node3.srcrefTree(node0);
      Node node4 = Node.newString("", (-2715), 38);
      node0.removeProp(36);
      node3.setVarArgs(false);
      node2.checkTreeTypeAwareEqualsImpl(node4);
      node1.isTrue();
      node1.isHook();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      node0.putBooleanProp(52, false);
      node1.isHook();
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(48);
      Node node3 = new Node((-3150), node1, node2);
      Node node4 = node3.useSourceInfoFromForTree(node2);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.common.base.Predicates$CompositionPredicate", true);
      node2.getJSDocInfo();
      node4.isLabelName();
      Node node5 = new Node(48, node3, (-422), 1);
      node4.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node6 = null;
      try {
        node6 = new Node(900, node3, node5, 155, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(135);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(103);
      node0.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.copyInformationFrom(node0);
      node1.isDebugger();
      node0.isParamList();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Node.ORIGINALNAME_PROP;
      node1.hasChild(node1);
      Node node2 = new Node(76, node0, node0, node1);
      node2.isAssignAdd();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isSwitch();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.JSDocInfo$TypePosition", true);
      Node node1 = new Node(37, node0, 1099, 42);
      Node node2 = node1.getLastSibling();
      node1.wasEmptyNode();
      Node node3 = Node.newString(2, "");
      node2.setLength(38);
      node2.setWasEmptyNode(true);
      node3.hasMoreThanOneChild();
      node3.isVar();
      node3.isArrayLit();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node0.getLastSibling();
      node2.isDebugger();
      node3.putIntProp(44, 43);
      Node node4 = Node.newNumber((double) 55);
      node0.isEquivalentTo(node4, false, false, false);
      node0.isBreak();
      node2.isTypeOf();
      node0.isDo();
      node1.addChildToBack(node4);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, (-669));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      InputId inputId0 = new InputId("aKO<~6LJnWn'o");
      node0.putProp(42, inputId0);
      node1.toStringTree();
      node1.toString(true, true, true);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = new Node(50, 47, 2);
      node2.isContinue();
      node1.getCharno();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isQualifiedName();
      node1.isIn();
      Node node2 = Node.newNumber((double) 48);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(782, nodeArray0);
      node3.cloneNode();
      node2.isNot();
      node1.children();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-490));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node0.isSwitch();
      node1.isOnlyModifiesThisCall();
      Node.newString("DO");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node4.srcrefTree(node3);
      node2.isVoid();
      node4.copyInformationFrom(node3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber((double) 11);
      node0.putBooleanProp(11, true);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node2 = node1.getLastSibling();
      node1.isDebugger();
      Node node3 = new Node((-1680), node1, 40, 57);
      node0.srcrefTree(node3);
      node1.putIntProp((-415), 38);
      node0.isIf();
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 36
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      node1.useSourceInfoFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("c7J![n~lZ\"", "/J!DiI+el", 612, 49);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isArrayLit();
      node1.hasOneChild();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(736, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.wasEmptyNode();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 736
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node2 = new Node(39, node1, node1, node1, 53, 57);
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(30);
      node0.putBooleanProp(1083, false);
      node0.isHook();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(31);
      node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\"d `1C%K~MU3$rX5", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.getJSDocInfo();
      node0.isLabelName();
      Node node3 = new Node(52, node0, 57, 37);
      node3.isNE();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = Node.newNumber((double) 36, 49, 1491);
      Node node5 = new Node(77, node1, node4, 52, 2);
      Node node6 = new Node(49);
      node2.isExprResult();
      node2.isSetterDef();
      node4.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isOr();
      node3.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, 119);
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node0.toString();
      node1.isInstanceOf();
      node1.getAncestors();
      node1.getIntProp(38);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node1.isString();
      node0.isIn();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-862));
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.isSwitch();
      node1.isOnlyModifiesThisCall();
      Node node2 = Node.newString("WITH aKO<~6LJnWn'o 1106");
      node2.srcrefTree(node1);
      node1.isVoid();
      node1.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(135);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = Node.newString("LwS\"BDcj3&i\"b#p@");
      node1.getIndexOfChild(node2);
      node2.hasOneChild();
      node0.hasMoreThanOneChild();
      node1.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node0.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber((double) 11);
      Node node1 = new Node(11, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      node0.isString();
      node2.isName();
      node1.hasChildren();
      node0.isEquivalentTo(node1, true, true, false);
      node2.isAnd();
      node2.isNE();
      node3.addChildToBack(node2);
      node1.getChildAtIndex(1);
      Node node4 = Node.newString(52, ")- @Cu#a0*xn7a4n?");
      node4.isFor();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      node2.getBooleanProp(86);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.setVarArgs(false);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(132, 16);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) vector0);
      node2.getLength();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.addChildrenAfter(node3, node0);
      node2.setOptionalArg(true);
      node1.getDirectives();
      node2.isAdd();
      node3.isVar();
      node3.isExprResult();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getIndexOfChild(node4);
      node1.useSourceInfoFrom(node4);
      node2.getAncestor(40);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString((-2466), "PUBLIC", (-2466), 1145);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(38, node0);
      node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node1.getLastSibling();
      node2.wasEmptyNode();
      Node node3 = Node.newString(46, "can't use .skipNulls() with maps");
      node0.isCast();
      node0.setVarArgs(false);
      node3.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      try { 
        node3.setDouble(4095);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SHNE can't use .skipNulls() with maps is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(4095);
      Node node1 = Node.newNumber(3412.91194128047);
      node0.addChildrenToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Object#Element");
      jSTypeArray0[0] = jSType0;
      Node node2 = Node.newString("Not declared as a constructor", 29, 0);
      node2.isIn();
      node0.isVoid();
      jSTypeRegistry0.setLastGeneration(false);
      Node node3 = Node.newString(36, "Not declared as a type name", 57, 2);
      node1.isSetterDef();
      node3.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.mayMutateArguments();
      Node node4 = new Node(2201, node0, 3040, (-6422));
      node4.isTypeOf();
      node4.isDo();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newNumber((double) 56);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(51, node0, node0);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node0.getLastSibling();
      node2.isDebugger();
      node3.putIntProp(57, 43);
      Node node4 = Node.newNumber((double) 55);
      Node node5 = null;
      try {
        node5 = new Node(37, node0, node0, node4, 2416, 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node0.getLastSibling();
      node2.isDebugger();
      node3.putIntProp(44, 43);
      Node node4 = Node.newNumber((double) 55);
      node3.isEquivalentTo(node2, false, false, false);
      node3.isCase();
      Node.newNumber((-1591.1492));
      node1.isCall();
      node3.isAnd();
      node4.isNE();
      // Undeclared exception!
      try { 
        Node.newString(4113, (String) null, 2, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", true);
      Node node3 = Node.newString(43, "Object#Key");
      node3.isCast();
      node2.hasMoreThanOneChild();
      Node node4 = new Node(29, 120, 4095);
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node5 = new Node(42, node3, node2, 1, 42);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Object#Key", false);
      node5.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.getIntProp(34);
      node_AncestorIterable0.iterator();
      Node node1 = node0.getLastSibling();
      node1.toString();
      node1.isInstanceOf();
      node1.getAncestors();
      node0.getIntProp(49);
      node_AncestorIterable0.iterator();
      node0.isString();
      node0.isIn();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isSwitch();
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newString("LwS\"BDcj3&i\"b#p@");
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node0.getIntProp(34);
      Node node1 = node0.getLastSibling();
      node1.toString();
      node1.isInstanceOf();
      node_AncestorIterable0.iterator();
      node0.isString();
      node0.isTry();
      node1.setWasEmptyNode(false);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node0.getLastSibling();
      node2.isDebugger();
      node3.putIntProp(44, 43);
      Node node4 = Node.newNumber((double) 55);
      node0.isEquivalentTo(node4, false, false, false);
      node4.isAnd();
      node4.isSwitch();
      node1.isOnlyModifiesThisCall();
      node3.srcref(node0);
      node0.isTypeOf();
      node4.isDo();
      // Undeclared exception!
      try { 
        node3.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(135);
      node0.isHook();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node0.isString();
      node0.isIn();
      node0.isOptionalArg();
      Node.newString((-1491), "fJa#", 29, 1653);
      Node node1 = Node.newString(164, "fJa#", 57, (-2784));
      node0.getJsDocBuilderForNode();
      node1.isCatch();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      Node node2 = Node.newString(47, "r;E;wjDVE/", 12, 1);
      node2.isBlock();
      node0.addChildToBack(node2);
      node0.getChildAtIndex((-2545));
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      node0.isCall();
      Node node2 = new Node(52, node0);
      node0.isDelProp();
      node0.isEquivalentToShallow(node2);
      node2.copyInformationFromForTree(node0);
      node0.addSuppression("K `g|Q");
      node2.isIn();
      node2.isCatch();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("PIPE", false);
      node0.isBlock();
      node2.getInputId();
      // Undeclared exception!
      try { 
        node0.addChildToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      node2.getBooleanProp(57);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(152, 16);
      node2.getLength();
      node2.setOptionalArg(true);
      node1.getDirectives();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      try { 
        node1.setDouble(55);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000340] [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node((-778), (-778), 0);
      node0.getSideEffectFlags();
      node0.getLength();
      node0.addSuppression("{proxy:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isUnscopedQualifiedName();
      node0.addSuppression("k7SCZj'C)b4AD6U");
      node0.getSourcePosition();
      node0.children();
      node0.isQualifiedName();
      Node node1 = new Node(117, node0, node0, node0, node0, 775, 47);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLength(769);
      Node node1 = new Node(103);
      node0.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.isDebugger();
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node2 = node1.getLastSibling();
      node1.isDebugger();
      node2.srcrefTree(node0);
      node1.putIntProp(4, 1106);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.toString();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.getIntProp(34);
      node_AncestorIterable0.iterator();
      node0.isString();
      node0.isName();
      node0.hasChildren();
      node0.isDelProp();
      node0.isIn();
      Node node1 = new Node(54, 39, 49);
      node1.isAssign();
      node0.setLineno(27591);
      node1.getLastSibling();
      node0.setSideEffectFlags(36);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("LwS\"BDcj3&i\"b#p@", 1151, 1151);
      node0.isVarArgs();
      Node node1 = new Node(1151, node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node0.cloneNode();
      node2.useSourceInfoIfMissingFromForTree(node1);
      node0.getJsDocBuilderForNode();
      node2.getSourceOffset();
      node0.siblings();
      node2.isBlock();
      node2.isGetProp();
      Node node3 = node0.detachFromParent();
      node3.isLabelName();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber((-17.753181123032643));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      node0.getJsDocBuilderForNode();
      node1.cloneTree();
      node1.isContinue();
      node1.isReturn();
      Node.extractLineno(16);
      node0.isVoid();
      Node node2 = Node.newString(0, "c", 40, 46);
      node2.getJsDocBuilderForNode();
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node0.getLastSibling();
      node2.isDebugger();
      node3.putIntProp(44, 43);
      Node node4 = Node.newNumber((double) 55);
      node0.isEquivalentTo(node4, false, false, false);
      node4.isAnd();
      node4.isSwitch();
      node1.isOnlyModifiesThisCall();
      node0.isTypeOf();
      node4.isDo();
      // Undeclared exception!
      try { 
        node3.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1531), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(43);
      simpleSourceFile0.getLineOffset(46);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      node0.isString();
      node3.isIn();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2552));
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.isSwitch();
      node2.isOnlyModifiesThisCall();
      node2.clonePropsFrom(node0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(1355);
      node0.isQuotedString();
      Node node1 = new Node((-2490), node0, node0, node0);
      node0.detachFromParent();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      Node node1 = Node.newNumber((double) 54);
      node0.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.newNumber((double) 43);
      node1.isWhile();
      Node node2 = new Node(110, node0, node1);
      node1.srcrefTree(node2);
      Node.newString("hlji8\"D}V\bLNsvgDl", 48, 32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.setVarArgs(true);
      Node node3 = node2.cloneTree();
      node0.isContinue();
      node2.isReturn();
      Node.extractLineno(36);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        node3.appendStringTree(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildrenToBack(node0);
      node0.isFromExterns();
      Node node1 = Node.newNumber((-864.0));
      node0.getNext();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      JSType[] jSTypeArray0 = new JSType[0];
      node1.useSourceInfoFromForTree(node1);
      node0.children();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString("\"^)s-()W^Wws");
      Node node1 = node0.cloneTree();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isScript();
      int int0 = Node.COLUMN_MASK;
      node2.isFalse();
      node1.setIsSyntheticBlock(true);
      node0.isOptionalArg();
      node2.removeProp(103);
      node1.isAssign();
      node1.setLineno(1714);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.siblings();
      Node node1 = new Node(40, node0, node0, node0, (-536), 31);
      node1.getType();
      node1.isGetElem();
      Node node2 = new Node(110, node1, node1, node1);
      node2.getBooleanProp(4);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[2] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node1.isString();
      node1.isIn();
      node1.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node1.isSwitch();
      node1.isOnlyModifiesThisCall();
      node1.isTypeOf();
      node0.isDo();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node((-3343));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getType("snX;Drw*i;{wZ8'1");
      node0.setJSType((JSType) null);
      Node node1 = new Node(47);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.setSourceEncodedPosition((-3851));
      node0.setChangeTime((-3851));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isName();
      Node node1 = node0.getLastSibling();
      Node node2 = Node.newNumber(1.0, 338, 15);
      Node node3 = node1.srcrefTree(node0);
      Node node4 = Node.newString("f;p^U{0caPKH\"fL#E", 113, 54);
      node4.checkTreeEquals(node0);
      node0.removeProp(2);
      node2.setVarArgs(false);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.isTrue();
      node3.isHook();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "Node has existing properties.";
      Node node0 = Node.newString("Node has existing properties.");
      node0.setLength((-2236));
      Node node1 = new Node(16);
      node0.addChildToFront(node1);
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Node has existing properties.", false);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isGetElem();
      Node node1 = Node.newString("NEG");
      Node node2 = Node.newString("NEG", 57, 512);
      node2.isAssignAdd();
      node1.hasChildren();
      node1.isScript();
      Node node3 = Node.newString(29, "", 54, (-2544));
      node3.getJsDocBuilderForNode();
      Node node4 = node2.cloneTree();
      node4.isContinue();
      node2.isReturn();
      Node.extractLineno(44);
      node0.isVoid();
      Node.newString(247, "/MEQ~U?GjjiB@", 43, 43);
      node2.getJsDocBuilderForNode();
      node3.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isGetElem();
      Node node1 = Node.newString("NEG");
      Node node2 = Node.newString("NEG", 57, 512);
      node2.isAssignAdd();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = new Node(76, nodeArray0, 57, 51);
      Node node4 = new Node(49, node3, node1, node1);
      // Undeclared exception!
      try { 
        node4.addChildBefore(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      Node node1 = new Node(49, node0, 53, 51);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node", false);
      simpleSourceFile0.getLineOffset(858);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node3.toString();
      node3.wasEmptyNode();
      Node node4 = Node.newString(38, "THROW 0");
      Node.AncestorIterable node_AncestorIterable0 = node4.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.spliterator();
      node4.getIntProp(56);
      node_AncestorIterable0.iterator();
      node4.isFromExterns();
      node0.isIn();
      node3.hasChildren();
      node3.isScript();
      node3.getNext();
      node0.getJsDocBuilderForNode();
      node4.cloneTree();
      node2.isContinue();
      Node node5 = Node.newString("inferred", 53, 29);
      node5.isReturn();
      node0.isQuotedString();
      Node node6 = node2.useSourceInfoIfMissingFrom(node1);
      node6.getJSType();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aKWO<~6LJnBn'o");
      Node node0 = Node.newString(119, "aKWO<~6LJnBn'o", 1106, (-652));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node0.isCall();
      node0.isOptionalArg();
      Node node2 = Node.newString("Vmr|P1@y?K");
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.removeProp(1);
      node0.mayMutateArguments();
      node1.isAssign();
      node3.toStringTree();
      node0.setType(115);
      Node node4 = Node.newString("2I2g`VX*N:E7");
      node4.isCase();
      node4.checkTreeEquals(node3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(37, node0, 30, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node2.getJSDocInfo();
      node2.isLabelName();
      Node node3 = node2.cloneTree();
      node2.isNE();
      node3.isExprResult();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      node3.appendStringTree(pipedWriter0);
      node2.setLength(1547);
      node1.setWasEmptyNode(false);
      node3.getAncestor(43);
      node1.setWasEmptyNode(true);
      node2.isAssign();
      node2.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node(132);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(103, node0, node0, node0);
      node1.srcref(node0);
      Node.newString(57, " ]F!c4$aYo).1");
      node0.getAncestors();
      node1.setSourceEncodedPositionForTree(53);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      try { 
        node1.setDouble(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEC 0 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000006] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = node0.getLastSibling();
      node2.isDebugger();
      node3.putIntProp(44, 43);
      Node node4 = Node.newNumber((double) 55);
      node0.isEquivalentTo(node4, false, false, true);
      node4.isAnd();
      node1.isNE();
      node1.replaceChild(node3, node2);
      node3.isComma();
      node2.isParamList();
      node2.isWhile();
      Node node5 = node2.useSourceInfoFrom(node0);
      node5.isVar();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLength(759);
      Node node1 = new Node(103);
      node0.isNew();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.isDebugger();
      node0.isParamList();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isWhile();
      Node node2 = new Node(76, node0, node0, node1);
      node2.isAssignAdd();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.newString(20, "bv?abS", 8, 49);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSwitch();
      node1.isInc();
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      node_NodeMismatch0.equals(jSTypeNative0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(135);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#nyuS!A");
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[0] = node1;
      nodeArray0[2] = node1;
      Node.newString((-3098), "#nyuS!A", 102, (-2765));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.getLastSibling();
      Node node2 = Node.newNumber((double) 8, 1775, 0);
      node0.isDebugger();
      node1.isTry();
      node1.removeFirstChild();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{proxy:");
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node((byte)62);
      node0.isStringKey();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.extractCharno((-565));
      node0.isNot();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(4095);
      Node node1 = Node.newNumber(3412.91194128047);
      node0.addChildrenToFront(node1);
      node1.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Object#Element");
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.addSuppression(" and ");
      node2.isIn();
      node0.isCatch();
      String string0 = "";
      node2.addSuppression("INSTANCEOF");
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      node0.isHook();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.getIntProp(2238);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node0.isString();
      node0.isIn();
      node0.hasChildren();
      node0.isScript();
      Node node1 = Node.newString((-1491), "}UeV4s[w", 29, 1627);
      node1.getJsDocBuilderForNode();
      Node node2 = node0.cloneTree();
      node1.isContinue();
      node0.isReturn();
      Node.extractLineno(2);
      node0.isVoid();
      Node node3 = Node.newString(117, "}UeV4s[w", 56, 1);
      node3.getJsDocBuilderForNode();
      node2.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString("f;p^U{0caPKH\"fL#E");
      node0.getQualifiedName();
      node0.setCharno(104);
      node0.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node0.isSyntheticBlock();
      node0.getString();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isFunction();
      Node node1 = new Node(512, node0, node0);
      node1.isWith();
      node1.isTrue();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node1;
      nodeArray0[7] = node0;
      Node node2 = null;
      try {
        node2 = new Node((-3288), nodeArray0, 44, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      node0.setChangeTime(27591);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isName();
      Node node1 = node0.getLastSibling();
      Node node2 = Node.newNumber((-2906.4), (-3675), 12);
      Node node3 = node2.srcrefTree(node1);
      Node node4 = Node.newString(" : ", (-761), 31);
      node4.removeProp(1);
      node3.setVarArgs(false);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node4.isTrue();
      node0.isHook();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.ImmutableEntry");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2153);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node0.removeChildren();
      node_SideEffectFlags1.setAllFlags();
      node1.isQualifiedName();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node1.getJsDocBuilderForNode();
      node0.addSuppression("J/=`7=N2&B1D/");
      node1.isStringKey();
      Node node2 = new Node(302, node1, 63, 54);
      node0.isCatch();
      node1.addSuppression("J/=`7=N2&B1D/");
      // Undeclared exception!
      try { 
        node1.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      String string0 = "OtlCWntH12X{4MiE!.{";
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("OtlCWntH12X{4MiE!.{", false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node1.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(98, 1496, 1496);
      node0.isOr();
      node0.isDec();
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isCall();
      node1.isOptionalArg();
      Node node3 = Node.newString(";p(h+e %(0t");
      Node node4 = node2.useSourceInfoFromForTree(node0);
      node4.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      node0.removeProp((-2410));
      node1.mayMutateArguments();
      node3.isAssign();
      node0.toStringTree();
      node0.setType(15);
      node4.isCase();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node2.getJSDocInfo();
      node2.isLabelName();
      node2.cloneTree();
      node2.isNE();
      Node node3 = new Node(15, node2, node2, (-4518), (-1084));
      Node node4 = new Node(30);
      node4.cloneNode();
      try { 
        node2.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isDo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isNull();
      node0.setDirectives(linkedHashSet0);
      Node node3 = new Node(16, node2, node1, node2);
      node1.isEquivalentToShallow(node0);
      node2.getStaticSourceFile();
      Node node4 = Node.newString(38, "INSTANCEOF");
      Node node5 = new Node(39, node0, node3, node4, 821, (-122));
      node5.isHook();
      node3.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F-w1*9%Zjg$0jWE");
      Node node0 = new Node(87);
      node0.mayMutateGlobalStateOrThrow();
      node0.isRegExp();
      node0.siblings();
      Node node1 = new Node(57, node0, node0, node0, 50, 51);
      node0.getIndexOfChild(node1);
      node0.isUnscopedQualifiedName();
      node0.isBreak();
      node1.isOnlyModifiesThisCall();
      node0.isAssign();
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.valueOf();
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      Node node1 = new Node((-845), node0, node0, 1627, 42);
      node0.toStringTree();
      Node node2 = node1.removeChildren();
      Node node3 = new Node(38, node0, 46, (-1100));
      Node node4 = node0.getLastSibling();
      node4.wasEmptyNode();
      Node node5 = Node.newString(223, "NUMBER 0.0 0\n");
      node5.setLength((-142));
      Node node6 = Node.newString("V`:bU\"");
      node3.useSourceInfoIfMissingFrom(node6);
      node1.isOr();
      node4.isCast();
      node3.isCall();
      node4.isFor();
      node1.isWith();
      node2.setDouble(43.0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(98);
      node0.putBooleanProp(98, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node1 = new Node(32, node0, node0, node0, node0);
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.getLastSibling();
      node0.putIntProp(49, 152);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 98
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(118, 1496, 1496);
      node0.isOr();
      node0.isDec();
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      Node node1 = new Node(795, node0, node0, node0, 116, 0);
      node1.isDebugger();
      node1.isParamList();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = Node.EMPTY_BLOCK;
      node1.isGetElem();
      Node node2 = Node.newString("]yX8<$WyUxU%8");
      node0.isAssignAdd();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node node3 = new Node(1496, node1);
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.setQuotedString();
      node0.putProp((-491), (Object) null);
      node0.isAdd();
      node0.setLineno(37);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTypeOf();
      node0.hasChildren();
      node0.setSourceFileForTesting("");
      Node node1 = new Node(1, node0);
      node1.isReturn();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString(2514, "W", 2514, 2514);
      Node node1 = Node.newNumber((double) 54);
      node1.isCall();
      node1.setChangeTime(15);
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = new Node(0, node0, node0, node0, 2514, 52);
      node2.isWhile();
      Node node3 = new Node((-1602), node1, node2);
      node3.srcrefTree(node1);
      Node node4 = Node.newString("hlji8\"D}V\bLNsvgDl", 1369, 336);
      node1.setVarArgs(false);
      node4.checkTreeTypeAwareEqualsImpl(node0);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isBlock();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      node0.isGetProp();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.setSourceFileForTesting("VTr.FXk>gs2i");
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2153);
      node_SideEffectFlags0.setMutatesThis();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node2 = Node.newString("quoted");
      Node node3 = new Node(111, node2);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      node3.clonePropsFrom(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node3.isVar();
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node.newNumber((double) 4);
      node2.isWhile();
      Node node3 = new Node(43, node2, node1);
      Node node4 = node3.srcrefTree(node2);
      Node node5 = Node.newString("hlji8\"D}V\bLNsvgDl", 30, 37);
      node1.setVarArgs(true);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node4.isSwitch();
      node5.getJsDocBuilderForNode();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000007] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1478);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.getLastSibling();
      node2.putIntProp(54, 4095);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO [slash_v: com.google.javascript.rhino.Node$IntPropListItem@0000000006] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newNumber((double) 98);
      node0.isName();
      Node node1 = new Node(8, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isIn();
      node1.isVarArgs();
      node2.isEquivalentTo(node1, false, false, false);
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(2639);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(47, node0, node0, node0, 57, 51);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node0.isDo();
      node0.isAdd();
      Node node3 = new Node(47, 51, 52);
      node0.getQualifiedName();
      node3.isScript();
      node3.getDirectives();
      Node node4 = null;
      try {
        node4 = new Node(16, node2, node0, node1, 37, 153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("inferred", false);
      simpleSourceFile0.getLineOffset(50);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(93);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(32);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node2 = node0.getLastSibling();
      node2.isDebugger();
      node1.putIntProp(3, 31);
      node1.isIf();
      node1.isAnd();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node2.getJSDocInfo();
      node2.isLabelName();
      Node node3 = node2.cloneTree();
      node2.isNE();
      Node node4 = new Node((-1), node2, node2, (-4518), (-1084));
      Node node5 = new Node(30);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f;p^U{0caPKH\"fL#E");
      node3.isExprResult();
      node2.getJSDocInfo();
      node5.isLabelName();
      node3.cloneTree();
      node1.isLabel();
      node2.useSourceInfoIfMissingFromForTree(node3);
      node3.isArrayLit();
      Node node6 = Node.newNumber((double) 57);
      node6.isCast();
      node4.hasMoreThanOneChild();
      node3.isTrue();
      node4.isHook();
      Node.newString((-3043), "is_dispatcher");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node.newNumber((double) 4);
      node2.isWhile();
      Node node3 = new Node(43, node2, node1);
      Node node4 = node3.srcrefTree(node2);
      Node node5 = Node.newString("hlji8\"D}V\bLNsvgDl", 30, 37);
      node1.setVarArgs(true);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node4.isSwitch();
      node5.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node[] nodeArray0 = new Node[20];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isTry();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      Node node2 = new Node(57);
      node2.isExprResult();
      node2.getJSDocInfo();
      node2.isLabelName();
      Node node3 = node1.cloneTree();
      node3.isNE();
      node3.useSourceInfoFrom(node1);
      node0.isArrayLit();
      // Undeclared exception!
      try { 
        node3.setString("2iB @H;KaRi");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -840
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      Node node1 = Node.newNumber((double) 48);
      node0.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.newNumber((double) 43);
      node1.isWhile();
      Node node2 = new Node(110, node0, node1);
      Node node3 = node1.srcrefTree(node2);
      Node node4 = Node.newString("hlji8\"D}V\bLNsvgDl", 48, 32);
      node2.setVarArgs(true);
      node1.checkTreeTypeAwareEqualsImpl(node3);
      node0.toString(false, true, false);
      node2.cloneNode();
      node2.checkTreeEqualsImpl(node4);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(37, "NEG");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("is_namespace", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.removeProp(137);
      node0.mayMutateArguments();
      node0.isAssign();
      node0.toStringTree();
      node0.setType(137);
      node0.isCase();
      Node node1 = new Node(1, 16, 32);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node1.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString(119, "aKO<~6LJnWn'o", 1106, (-631));
      Node node1 = new Node(119, node0, node0, node0, 41, 31);
      node1.getAncestors();
      node1.toStringTree();
      node1.toString(true, false, false);
      node1.isContinue();
      node1.removeChild(node0);
      node1.isIf();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("%|p64$bKfc2vJ7");
      node0.getSourceOffset();
      node0.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%|p64$bKfc2vJ7");
      Node.mergeLineCharNo(2097152, (-700));
      node0.isBreak();
      Node node1 = new Node((-3555), node0, node0, node0, node0, 51, 15);
      node1.isQuotedString();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.srcrefTree(node1);
      node2.wasEmptyNode();
      node0.isEquivalentTo(node1, false, false, false);
      node2.isDo();
      node1.mayMutateGlobalStateOrThrow();
      node2.children();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("_2J]!~}Fsqskivc");
      node_FileLevelJsDocBuilder1.append("Object#Element");
      node0.getLineno();
      node2.isParamList();
      node1.getType();
      node1.isGetElem();
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("LwS\"BDcj3&i\"b#p@", false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.getLastSibling();
      node0.wasEmptyNode();
      Node node3 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node4 = node1.cloneNode();
      node3.checkTreeEqualsImpl(node1);
      node4.isNot();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLength(759);
      Node node1 = new Node(103);
      node1.isOr();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.isOr();
      node0.isParamList();
      int int0 = Node.ORIGINALNAME_PROP;
      node1.isGetElem();
      Node node2 = new Node(76, node0, node0, node1);
      node2.isAssignAdd();
      node0.toString(false, false, false);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("fQvw~x]e9w>:o']3", false);
      Node node3 = new Node((-196), 51, (-765));
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      node3.putProp(37, jSTypeNative0);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newString(132, "no next sibling.");
      node0.isDo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isFalse();
      node0.isOptionalArg();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.removeProp(3229);
      node0.mayMutateArguments();
      node0.isAssign();
      node0.toStringTree();
      node0.setType(63);
      node0.isCase();
      Node node1 = new Node(15, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(322, node1, node0, node0, 12, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.putProp(26, jSTypeRegistry0);
      node1.toString(false, false, true);
      node0.cloneNode();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(4);
      Node node1 = new Node(120, node0, 31, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", true);
      Node node4 = Node.newString(43, "Object#Key");
      node4.isCast();
      node2.hasMoreThanOneChild();
      Node node5 = new Node(29, 120, 4095);
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node5.clonePropsFrom(node3);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Object#Key", false);
      node1.isVar();
      node4.isExprResult();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      ObjectType objectType1 = jSTypeRegistry0.createObjectType(objectType0);
      Node node0 = Node.newString("not a StringNode");
      Node node1 = new Node(40, node0);
      ObjectType objectType2 = jSTypeRegistry0.createObjectType("not a StringNode", node0, objectType1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) objectType2;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType1;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      Node node2 = new Node(1964, node1, node1, node1, 3557, 385);
      node0.isLabel();
      node0.isCast();
      node1.isCall();
      node2.isFor();
      node0.isBlock();
      node0.isFunction();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1522));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node0 = Node.newNumber((double) (-1522));
      Node node1 = new Node(39, node0, node0);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node1.srcrefTree(node0);
      node1.setVarArgs(true);
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLength(759);
      Node node1 = new Node(103);
      node1.isOr();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node1.isOr();
      node0.isParamList();
      int int0 = Node.ORIGINALNAME_PROP;
      node1.isGetElem();
      Node node2 = new Node(76, node0, node0, node1);
      node1.hasChild(node0);
      Node node3 = node2.srcref(node0);
      node1.isVar();
      node1.isThis();
      node1.isSwitch();
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Node node4 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      node3.isFunction();
      node3.isIn();
      node1.hasChildren();
      node1.isScript();
      Node.newString(43, "DO", 51, 50);
      node0.getJsDocBuilderForNode();
      Node node5 = node2.cloneTree();
      node5.isContinue();
      node4.isReturn();
      Node.extractLineno(37);
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-417.1908), (-1522), 34);
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", false);
      Node node1 = new Node(48, node0, 54, (-471));
      Node node2 = node1.getLastSibling();
      node0.wasEmptyNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    ");
      Node node3 = Node.newString(656, "");
      node3.setLength(971);
      node0.setWasEmptyNode(true);
      node1.hasMoreThanOneChild();
      node0.isLabel();
      node0.isArrayLit();
      node2.isThrow();
      node3.getLastChild();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags6.areAllFlagsSet();
      node_SideEffectFlags6.clearSideEffectFlags();
      Node node3 = node2.getLastSibling();
      node3.isDebugger();
      Node node4 = Node.newString("jWP=8!e-ib|{}B", 2642, 4095);
      node1.srcrefTree(node4);
      node0.putIntProp(4, 0);
      node0.setVarArgs(true);
      node_SideEffectFlags8.setMutatesGlobalState();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node node2 = Node.newNumber(0.0);
      node0.isWhile();
      Node node3 = new Node(47, node1, node2);
      node0.srcrefTree(node3);
      Node node4 = Node.newString("hlji8\"D}V\bLNsvgDl", 49, 32);
      Node node5 = Node.newString("hlji8\"D}V\bLNsvgDl", 53, 8);
      node5.setVarArgs(true);
      node0.checkTreeTypeAwareEqualsImpl(node4);
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node0.isSwitch();
      Node node6 = Node.newNumber(529.314632);
      node6.getJsDocBuilderForNode();
      node3.removeChild(node1);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      InputId inputId0 = new InputId("6J^z\"W{FIeS");
      node0.setInputId(inputId0);
      Node node1 = new Node((-845), node0, node0, 1627, 42);
      node0.toStringTree();
      Node node2 = node1.removeChildren();
      Node node3 = new Node(38, node0, 46, (-1100));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6J^z\"W{FIeS");
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node4 = new Node(39, node3, 79, 29);
      Node node5 = node4.getLastSibling();
      node5.isDebugger();
      node0.srcrefTree(node5);
      node1.putIntProp((-837), 46);
      node2.setVarArgs(false);
      node_SideEffectFlags1.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node5.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[0] = node1;
      nodeArray0[2] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.getLastSibling();
      node0.isDebugger();
      node1.putIntProp(38, 32);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[0] = node1;
      node1.setSourceEncodedPosition((-1593));
      nodeArray0[2] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.getLastSibling();
      node1.isParamList();
      node1.getType();
      node1.isGetElem();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("]Z-@3N#kM 4", true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node.extractCharno(55);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString((-831), "Bzx@T;Az", (-831), (-831));
      node0.getIntProp(617);
      node0.putBooleanProp(617, true);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node((-971), nodeArray0);
      node1.children();
      node1.isStringKey();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber((-1265.56717538));
      Node node1 = new Node((-1974), node0, node0, node0, node0);
      Node node2 = node1.srcref(node0);
      Node node3 = node2.copyInformationFrom(node0);
      node3.isDebugger();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      node0.isEquivalentToTyped(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node1 = Node.newNumber((double) 43);
      node0.isWhile();
      Node node2 = new Node(110, node0, node0);
      node1.getQualifiedName();
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      node0.getDirectives();
      Node node1 = new Node(31, node0, node0, node0, 32, 32);
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.srcref(node0);
      node1.setDirectives(linkedHashSet0);
      Node node2 = null;
      try {
        node2 = new Node(43, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("not a YtringNode");
      Node node1 = new Node(40, node0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      node1.clonePropsFrom(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", false);
      node1.isVar();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(4095);
      Node node1 = Node.newNumber(3412.91194128047);
      node0.addChildrenToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", false);
      simpleSourceFile0.getLineOffset(1);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.wasEmptyNode();
      Node node2 = Node.newString((-2122), "\"fB>pdwr&Qh");
      node0.isCast();
      node2.setVarArgs(false);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node1.isSwitch();
      node1.getJsDocBuilderForNode();
      node0.getQualifiedName();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("inferred", false);
      simpleSourceFile0.getLineOffset(50);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node1.getLastSibling();
      node0.toString();
      node1.isInstanceOf();
      Node node3 = Node.newString(40, "inferred");
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node1.getIntProp(31);
      node_AncestorIterable0.iterator();
      node0.isString();
      node1.isIn();
      node2.hasChildren();
      node2.isScript();
      Node.newString(40, "Z\"Ra9eKq4\"z,\"tT;G{", 2, 443);
      node0.getJsDocBuilderForNode();
      node0.checkTreeTypeAwareEqualsImpl(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node3.isSwitch();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3810));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.areAllFlagsSet();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node0 = new Node(122);
      Node node1 = node0.getLastSibling();
      node0.isDebugger();
      Node node2 = Node.newNumber((double) 37);
      node2.getJsDocBuilderForNode();
      node0.putIntProp((-862048943), 4);
      node1.isIf();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Bzx@T;Az", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.isAssign();
      node1.toStringTree();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(31);
      node0.isIn();
      node0.getQualifiedName();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("f;p^U{0caPKH\"fL#E");
      node0.getQualifiedName();
      node0.setCharno(104);
      node0.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.mayMutateGlobalStateOrThrow();
      node0.isDelProp();
      node0.isFunction();
      node0.isCatch();
      Node node1 = new Node(53, node0, node0, node0, (-1755), 37);
      node1.isThis();
      // Undeclared exception!
      try { 
        node1.setDouble((-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(720, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      Node node1 = Node.newNumber((double) 37, 800, 51);
      node0.copyInformationFromForTree(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      node0.getNext();
      node0.putIntProp(414, 102);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z,V", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node3.wasEmptyNode();
      Node node4 = Node.newNumber((double) 1, 38, (-3987));
      node4.srcrefTree(node1);
      Node node5 = Node.newString("node is not a child", 57, 453);
      node3.setVarArgs(true);
      node1.checkTreeTypeAwareEqualsImpl(node4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node0.isSwitch();
      node2.getJsDocBuilderForNode();
      node4.useSourceInfoIfMissingFrom(node5);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F-w1*9%Zjg$0jWE");
      Node node0 = Node.newString("F-w1*9%Zjg$0jWE", 87, 87);
      node0.isNoSideEffectsCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setOptionalArg(true);
      node0.isRegExp();
      node0.siblings();
      node0.isCatch();
      node0.isCall();
      Node node1 = new Node(300, node0);
      node0.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("F-w1*9%Zjg$0jWE", false);
      node0.isDelProp();
      node0.addSuppression("LwS\"BDcj3&i\"b#p@");
      node0.isIn();
      Node node2 = new Node(103, node1, 49, 30);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      try { 
        node3.setDouble(48);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEC 49 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000011] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      Node node1 = Node.newNumber((double) 54);
      node0.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.newNumber((double) 43);
      node1.isWhile();
      Node node2 = new Node(110, node0, node1);
      node1.srcrefTree(node2);
      Node node3 = Node.newString("hlji8\"D}V\bLNsvgDl", 48, 32);
      node2.setVarArgs(true);
      Node node4 = node2.cloneTree();
      node0.isContinue();
      node2.isReturn();
      Node.extractLineno(36);
      node3.isVoid();
      node4.getJsDocBuilderForNode();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives(linkedHashSet0);
      Node node2 = new Node(43, node0, node0, node1);
      node1.getAncestors();
      node1.getDouble();
      node1.setSourceEncodedPositionForTree(51);
      node1.getQualifiedName();
      Node node3 = Node.newString("@2]^0vgY8<6Tif O$%", 2341, 29);
      node2.setVarArgs(true);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node3.isSwitch();
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(132);
      node0.mayMutateArguments();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      linkedHashSet0.add("no next sibling.");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("prev is not a child of this node.", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = node0.getLastSibling();
      node1.wasEmptyNode();
      node0.getStaticSourceFile();
      Node node2 = Node.newString(55, "");
      node2.isCast();
      node1.hasMoreThanOneChild();
      node2.isLabel();
      node2.isTrue();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(44);
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 44, 13, 13);
      node0.removeProp((-1787));
      Node node1 = Node.newNumber((double) 38);
      node1.getQualifiedName();
      node0.isOnlyModifiesThisCall();
      Node.mergeLineCharNo(2938, 50);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.getSourceFileName();
      Node node3 = Node.newString(1502, "Node has existing properties.", 54, 50);
      Node node4 = node3.cloneNode();
      node1.toString();
      node0.isContinue();
      node2.isCase();
      node0.isSyntheticBlock();
      node2.isComma();
      node1.isVarArgs();
      node3.getJSDocInfo();
      node4.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(8, 65529, 65529);
      Node node1 = Node.newString(56, "");
      Node node2 = Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node node3 = Node.newString("INSTANCEOF");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node4 = new Node(51, node2, 65529, 2368);
      Node node5 = node4.srcrefTree(node2);
      Node.newString("Node has existing properties.", 31, 125);
      node5.setVarArgs(true);
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node5.isSwitch();
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.getSideEffectFlags();
      node0.isNE();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Zp\u0007", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = new Node(51, node1, node2);
      node3.wasEmptyNode();
      node3.useSourceInfoFrom(node1);
      Node node4 = Node.newString(37, "RETURN");
      node3.isCast();
      node4.hasMoreThanOneChild();
      node3.isLabel();
      node3.isOr();
      node2.isCast();
      node1.isCall();
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F-w1*9%Zjg$0jWE");
      Node node0 = new Node(87);
      node0.isNoSideEffectsCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setOptionalArg(true);
      node0.isRegExp();
      node0.siblings();
      Node node1 = new Node(1, node0, node0, 231, 42);
      Node node2 = new Node(751619276);
      node2.isExprResult();
      node1.getJSDocInfo();
      node1.isLabelName();
      Node node3 = node1.cloneTree();
      node2.isNE();
      node2.isLabel();
      node0.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDeprecationReason("F-w1*9%Zjg$0jWE");
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      node4.isEquivalentTo(node1);
      node3.isTry();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isEquivalentToTyped(node0);
      node0.setChangeTime(15);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      Node node1 = Node.newNumber(1666.5192386);
      node0.isWhile();
      Node node2 = new Node(40, node0, node0);
      node2.srcrefTree(node1);
      Node node3 = Node.newString("Node has existing properties.", (-690), 38);
      node1.setVarArgs(true);
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isCall();
      node0.isOptionalArg();
      Node node3 = Node.newString("f;p^U{0caPKDH\"fL#E");
      Node node4 = Node.newString("");
      Node node5 = new Node(105, node4, node2);
      // Undeclared exception!
      try { 
        node3.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(31);
      Node node1 = new Node(2, 37, (-2482));
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isIn();
      node0.getQualifiedName();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTypeOf();
      node0.hasChildren();
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1554));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(1809, node0, node0, node0, 1787, 42);
      Node node2 = node1.getLastSibling();
      node2.isDebugger();
      node0.putIntProp(703, 55);
      node1.isIf();
      node0.isAnd();
      node0.setLineno(15);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F-w1*9%Zjg$0jWE");
      Node node0 = new Node(87);
      node0.isNoSideEffectsCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setOptionalArg(true);
      node0.isRegExp();
      node0.siblings();
      node0.isCatch();
      node0.isCall();
      node0.isOptionalArg();
      Node node1 = new Node(300, node0);
      node0.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("F-w1*9%Zjg$0jWE", false);
      node0.isDelProp();
      node0.addSuppression("LwS\"BDcj3&i\"b#p@");
      node0.isIn();
      Node node2 = new Node(103, node1, 49, 30);
      node2.isCatch();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&\"b|s{Nh6fM-p'");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("&\"b|s{Nh6fM-p'");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node1 = Node.newNumber(1394.649416613788);
      node1.isName();
      Node node2 = new Node(31, node0, node1);
      Node node3 = node2.srcrefTree(node0);
      Node node4 = Node.newString("[~h~!\"", 2, 46);
      node3.setVarArgs(false);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node4.isSwitch();
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(720, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.spliterator();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node2);
      node1.isQualifiedName();
      node1.isIn();
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node(120, node0, 31, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node4 = node3.getLastSibling();
      node1.isAssignAdd();
      node1.getLastSibling();
      node0.wasEmptyNode();
      node3.isCast();
      node4.hasMoreThanOneChild();
      node2.isLabel();
      node3.isOr();
      node0.isCast();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(52, node0, node0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node1.setChangeTime(15);
      node1.getProp(6);
      String string0 = "Jp.Ahh*S!DU";
      Node node2 = Node.newString("Jp.Ahh*S!DU");
      node2.isGetterDef();
      node2.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.getIndexOfChild(node0);
      node1.hasOneChild();
      node2.hasMoreThanOneChild();
      node0.isOnlyModifiesThisCall();
      node2.isAssign();
      node1.removeProp(48);
      node0.addChildrenToFront(node1);
      node0.isAssign();
      node2.removeProp(48);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("xfXc2s~gy!cdv.C1", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[10];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      ObjectType objectType1 = jSTypeRegistry1.createObjectType(objectType0);
      jSTypeArray0[0] = (JSType) objectType1;
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0);
      node0.isNE();
      node0.isLabel();
      node1.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(720, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.spliterator();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node2);
      Node node3 = Node.newNumber((double) 1, 8, 77);
      Node node4 = node2.srcrefTree(node3);
      node2.useSourceInfoIfMissingFrom(node4);
      Node node5 = Node.newString("LwS\"BDcj3&i\"b#p@", 55, (-2360));
      node3.setVarArgs(false);
      node1.checkTreeTypeAwareEqualsImpl(node5);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node2.isSwitch();
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(40, 56, 114);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z,V", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node3.getStaticSourceFile();
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.removeProp(43);
      Node node4 = Node.newString("Z,V");
      node4.mayMutateArguments();
      node4.isAssign();
      node2.toStringTree();
      node0.setType(148);
      node4.isCase();
      node2.checkTreeEquals(node4);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(31);
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(122);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) priorityQueue0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(8, 65529, 65529);
      Node.newString(56, "");
      Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node_SideEffectFlags0.clearAllFlags();
      Node.newString("INSTANCEOF");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      node0.isObjectLit();
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber(297.52176297);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0, 53, 154);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("//:yB3H@6xJl", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node3.wasEmptyNode();
      Node.newString(8, "ba-wMoub'ITEZV?(@");
      node1.isCast();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[1] = node3;
      nodeArray0[2] = node0;
      Node node4 = null;
      try {
        node4 = new Node((-1), nodeArray0, 31, 2040);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F-w1*9%Zjg$0jWE");
      Node node0 = new Node(87);
      node0.isNoSideEffectsCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setOptionalArg(true);
      node0.isRegExp();
      node0.siblings();
      String string0 = "String node not created with Node.newString";
      Node node1 = Node.newString("String node not created with Node.newString");
      node0.getIndexOfChild(node1);
      node0.hasOneChild();
      node0.hasMoreThanOneChild();
      node1.isOnlyModifiesThisCall();
      node0.isAssign();
      node1.removeProp(1);
      node0.addChildrenToFront(node1);
      node1.isAssign();
      node1.removeProp(47);
      String string1 = "xfXc2s~gy!cdv.C1";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("xfXc2s~gy!cdv.C1", "xfXc2s~gy!cdv.C1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // xfXc2s~gy!cdv.C1
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newNumber((double) 120);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z,V", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node.newNumber((double) 54);
      node0.addChildrenToBack(node3);
      node1.isFromExterns();
      Node node4 = null;
      try {
        node4 = new Node(1737, node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(135);
      node0.putBooleanProp((-3043), true);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[0] = node1;
      nodeArray0[2] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.areAllFlagsSet();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.getLastSibling();
      node0.isDebugger();
      node1.putIntProp(38, 32);
      node1.isIf();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isCall();
      node0.isOptionalArg();
      Node node3 = Node.newString("f;p^U{0caPKDH\"fL#E");
      node1.getChangeTime();
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node3.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.removeProp(43);
      node1.mayMutateArguments();
      node2.isAssign();
      node1.toStringTree();
      node4.setType(42);
      node4.isCase();
      node1.checkTreeEquals(node4);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newString((-2466), "PUBLIC", (-2466), 1145);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(38, node0);
      node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node1.getLastSibling();
      node2.wasEmptyNode();
      Node node3 = Node.newString(46, "can't use .skipNulls() with maps");
      node0.isCast();
      node0.setVarArgs(false);
      node3.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node2.isSwitch();
      node3.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node2.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newString("#^|O&'<)ZP=/z5");
      node0.setLength(759);
      node0.isOr();
      node0.isDec();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node0.isOr();
      node0.isParamList();
      Node node1 = new Node(57);
      node0.isExprResult();
      node0.getJSDocInfo();
      node1.isLabelName();
      node1.cloneTree();
      Node node2 = new Node(1025, node1, (-1403), (-1773));
      node2.isNE();
      Node node3 = Node.newString(42, "INSTANCEOF");
      node3.isAssign();
      node0.toStringTree();
      node1.isThis();
      Node node4 = new Node(124, node0, node3, node2, node2);
      Node node5 = null;
      try {
        node5 = new Node(4, node0, node0, node4, 39, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 123, 1);
      node0.isUnscopedQualifiedName();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.isOptionalArg();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("dk", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isHook();
      node0.removeProp(123);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet1);
      Node node1 = new Node(983, node0, node0, node0);
      node0.getAncestors();
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 983
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("{'e+> $]:");
      Node node1 = Node.newString("{'e+> $]:", (-323), 47);
      node1.setLineno((-2922));
      Node node2 = new Node(37, node1, node1, node1);
      node0.hasChild(node1);
      node2.isIn();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(38, nodeArray0);
      // Undeclared exception!
      try { 
        node3.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString((-2466), "PUBLIC", (-2466), 1145);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(54, "PUBLIC", 38, 32);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node3.wasEmptyNode();
      Node node4 = Node.newString(46, "can't use .skipNulls() with maps");
      node0.isCast();
      node2.hasMoreThanOneChild();
      node0.isLabel();
      node0.isOr();
      node1.isCast();
      node2.isCall();
      node1.removeChildren();
      node4.isIf();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Node node3 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node4 = node2.getLastSibling();
      node2.wasEmptyNode();
      Node node5 = Node.newString((-1993), "empty_block");
      node1.cloneTree();
      node0.isCast();
      node1.hasMoreThanOneChild();
      node5.isLabel();
      node4.isOr();
      node5.isCast();
      node3.isCall();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isCall();
      node0.isOptionalArg();
      Node node3 = Node.newString("f;p^U{0caPKDH\"fL#E");
      node1.getChangeTime();
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node3.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.removeProp(43);
      node1.mayMutateArguments();
      node2.isAssign();
      node1.toStringTree();
      node4.removeChildren();
      node4.setType(42);
      node4.isCase();
      node1.checkTreeEquals(node4);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      Node node1 = Node.newNumber((double) 54);
      node0.isEquivalentToTyped(node1);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.newNumber((double) 43);
      node1.isWhile();
      Node node3 = new Node(110, node0, node1);
      Node node4 = node1.srcrefTree(node3);
      Node.newString("hlji8\"D}V\bLNsvgDl", 48, 32);
      node3.setVarArgs(true);
      node1.checkTreeTypeAwareEqualsImpl(node4);
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node1.isSwitch();
      node3.getJsDocBuilderForNode();
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      ObjectType objectType1 = jSTypeRegistry1.createObjectType(objectType0);
      jSTypeArray0[0] = (JSType) objectType1;
      Node node0 = Node.newString(" p");
      Node node1 = new Node(0, node0);
      ObjectType objectType2 = jSTypeRegistry1.createObjectType("Object#Key", node1, objectType0);
      jSTypeArray0[1] = (JSType) objectType2;
      node1.srcrefTree(node0);
      node0.setType(47);
      node1.isCase();
      Node node2 = new Node(404, 30, 5341);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = jSTypeRegistry2.createOptionalParameters(jSTypeArray0);
      Node node4 = null;
      try {
        node4 = new Node(41, node0, node0, node3, node2, 2512, (-1670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newString("PUBLIC");
      Node node1 = Node.newString("%wQ*fW_Hfc", (-1392), 2);
      node1.isExprResult();
      node0.getJSDocInfo();
      node0.isLabelName();
      Node node2 = node1.cloneTree();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(1096, nodeArray0);
      node3.isNE();
      node2.setString("com.google.common.base.CharMatcher$3");
      node3.isWhile();
      node2.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node0.wasEmptyNode();
      Node node4 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      Node node5 = Node.newNumber((double) 43);
      node1.getAncestor(47);
      Node.newNumber((double) 32, 1133, (-3938));
      node3.setVarArgs(true);
      node4.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node2.isSwitch();
      node5.getJsDocBuilderForNode();
      node4.isExprResult();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(20);
      Node.newString(56, "");
      Node node1 = Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.isName();
      Node node2 = node1.getLastSibling();
      Node node3 = node2.srcrefTree(node0);
      Node node4 = Node.newString("", 64, (-3039));
      node4.setString("INSTANCEOF");
      node4.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.checkTreeEquals(node1);
      node3.getDirectives();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z,V", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node3.wasEmptyNode();
      String string0 = "can't use .skipNulls() with maps";
      Node node4 = Node.newString(37, "can't use .skipNulls() with maps");
      node3.isCast();
      node4.hasChildren();
      Node node5 = null;
      try {
        node5 = new Node((-190), node4, node3, node0, node3, (-1522), 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(98);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      Node node0 = Node.newString("number");
      node0.setChangeTime(56);
      node0.getAncestors();
      node0.isDefaultCase();
      node0.isOnlyModifiesThisCall();
      node0.getString();
      node0.getExistingIntProp(56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength((-5));
      Node node1 = Node.newString("(", 1, 8);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(720, nodeArray0);
      Node node3 = new Node(1, node2, node0, 12, 42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node4 = new Node(39);
      node1.isExprResult();
      node2.getJSDocInfo();
      node2.isLabelName();
      node3.cloneTree();
      node4.isNE();
      node3.isAssign();
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      ObjectType objectType1 = jSTypeRegistry1.createObjectType(objectType0);
      jSTypeArray0[0] = (JSType) objectType1;
      Node node0 = Node.newString(" p");
      Node node1 = new Node(0, node0);
      ObjectType objectType2 = jSTypeRegistry1.createObjectType("Object#Key", node1, objectType0);
      jSTypeArray0[1] = (JSType) objectType2;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = Node.newString("Unknown class name", 1, 49);
      Node node4 = new Node((-1850), node1, node2, node3);
      node4.hasChild((Node) null);
      node4.isVar();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("PUBLIC");
      Node node1 = new Node(32, node0, (-3064), 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = ".equivalentTo(";
      Node node0 = Node.newString(".equivalentTo(");
      Node node1 = new Node(30, node0, node0, node0, node0, 40, (-16));
      Node node2 = new Node((-16), node1, node1, node1);
      node1.isNew();
      node1.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(30);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 30
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n", 2146, 1111);
      node0.setLineno(43);
      node0.isGetProp();
      Node node1 = node0.cloneNode();
      node0.wasEmptyNode();
      node0.isCatch();
      node1.isEquivalentToTyped(node0);
      node0.useSourceInfoFromForTree(node1);
      Node node2 = Node.newNumber(29.56671474);
      node2.getIntProp(4);
      node2.putIntProp(86, 2);
      Node.newNumber((double) 4);
      node1.siblings();
      node1.isVarArgs();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      InputId inputId0 = new InputId("6J^z\"W{FIeS");
      node0.setInputId(inputId0);
      Node node1 = new Node((-840), node0, node0, 1627, 42);
      node0.toStringTree();
      node1.isCatch();
      node0.isCall();
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFromExterns();
      node1.getStaticSourceFile();
      node1.isDelProp();
      node2.addSuppression("");
      node0.isIn();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node2.isCatch();
      node2.isBreak();
      Node node3 = new Node(50, node1, 74, 114);
      node0.isAssign();
      Node.newNumber((double) 57);
      // Undeclared exception!
      try { 
        node0.addChildToFront(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString("    ", 0, 0);
      Node node1 = new Node(0, node0, 15, 51);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("=", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node0.getLastSibling();
      node2.isAssignAdd();
      Node node4 = Node.newString(30, "H");
      node4.isCast();
      node3.isQuotedString();
      node3.isLabel();
      node3.isLabel();
      node0.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node5 = null;
      try {
        node5 = new Node(38, node3, 8, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node node1 = new Node(0, node0, node0);
      Node node2 = Node.newString("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-308));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.isName();
      node1.getLastSibling();
      Node node3 = node0.srcrefTree(node1);
      Node.newString("", 1, 12);
      node2.setVarArgs(false);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node3.isSwitch();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, node0, (-1522), 50);
      Node node2 = Node.newNumber(114.0);
      node0.isOnlyModifiesArgumentsCall();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", true);
      Node node4 = new Node(54, node1, 16, 50);
      node4.getLastSibling();
      node2.isEquivalentTo(node3, false, false, false);
      node3.setCharno((-2825));
      node2.setChangeTime(52);
      node4.getFirstChild();
      node2.isCatch();
      node0.isNumber();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, node0, (-1522), 50);
      Node.newNumber(114.0);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", true);
      Node node3 = Node.newNumber((-773.266602826272));
      Node node4 = new Node(55, node3, node1);
      Node node5 = node4.getLastSibling();
      node5.srcrefTree(node1);
      node2.isNot();
      node5.isAnd();
      node5.getChildCount();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(5279, 55, 53);
      Node node2 = Node.newString(2, "R,Q#l");
      Node node3 = new Node(57, node1, (-3428), 64);
      Node node4 = node0.getLastSibling();
      node4.putBooleanProp(334, true);
      node1.isEquivalentTo(node3, false, false, false);
      node2.wasEmptyNode();
      Node node5 = new Node(57, node2, 42, 112);
      node4.setLength(50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node2.isCase();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("PUBLIC");
      node0.setQuotedString();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(20, 65535, 65535);
      Node.newString(56, "");
      Node node1 = Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node0.isName();
      Node node2 = node1.getLastSibling();
      Node node3 = node2.srcrefTree(node0);
      Node node4 = Node.newString("", 64, (-3039));
      node3.setVarArgs(false);
      node2.checkTreeTypeAwareEqualsImpl(node4);
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node3.isSwitch();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      node0.setSourceEncodedPosition(65535);
      Node node1 = new Node(764, node0, node0, 8, 53);
      Node node2 = new Node(141);
      node1.isExprResult();
      node2.getJSDocInfo();
      node0.isLabelName();
      Node node3 = node2.cloneTree();
      node2.isNoSideEffectsCall();
      node3.isAssign();
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 141
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      Node.newString("");
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(720, nodeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1910);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node3 = node2.getLastSibling();
      Node node4 = new Node(44, node0, 32, 149);
      node0.srcrefTree(node4);
      node3.isNot();
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(2872);
      node0.setVarArgs(false);
      node0.isComma();
      // Undeclared exception!
      try { 
        node0.setString("u3lJ<Yk?%AcKBg");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2872
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setDouble(0.0);
      node0.getProp((-4133));
      node0.isGetterDef();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isName();
      Node node1 = node0.getLastSibling();
      node0.setCharno(2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node2.setChangeTime(588);
      node2.getFirstChild();
      node0.isAdd();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      Node node2 = new Node(57);
      node2.isExprResult();
      node2.getJSDocInfo();
      node2.isLabelName();
      Node node3 = node1.cloneTree();
      node0.copyInformationFrom(node1);
      node0.getSourcePosition();
      node0.addChildrenToFront(node3);
      Node node4 = null;
      try {
        node4 = new Node(1359, node1, node3, node2, 2, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setDouble(0.0);
      node0.getProp((-4133));
      node0.isGetterDef();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YrQS}4mlLvFR^5[:");
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(108, nodeArray0, 1, 147);
      node1.srcrefTree(node0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.newString(",?;JCulv{h", 4, 37);
      node0.setVarArgs(false);
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newNumber(526.0836862);
      Node node1 = new Node(5279, 55, 53);
      Node node2 = Node.newString(2, "R,Q#l");
      Node node3 = new Node(56, node0, node1, node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-735));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node4 = node3.getLastSibling();
      Node node5 = node3.srcrefTree(node4);
      node1.isNot();
      node5.isAnd();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString("#^|O&'<)ZP=/z5");
      node0.setLength(759);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isCall();
      node0.isOptionalArg();
      Node.newString("f;p^U{0caPKH\"fL#E");
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node2.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.removeProp(64);
      node2.mayMutateArguments();
      node2.isAssign();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.toStringTree();
      node3.isThis();
      try { 
        node3.setDouble(49);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition((-3592));
      Node node1 = Node.newNumber((double) 32);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1935));
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(3849);
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node2 = new Node(1, node0, node1);
      Node node3 = node2.srcrefTree(node1);
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      node4.isCast();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber((-973.055149));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.setSourceEncodedPosition(297);
      int int0 = 57;
      // Undeclared exception!
      try { 
        Node.newString(86, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString("(");
      node0.setLength(0);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(720, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.spliterator();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable2.forEach(consumer0);
      node_AncestorIterable1.iterator();
      Node node3 = Node.newNumber((double) 12);
      node0.addChildrenToBack(node3);
      node1.isFromExterns();
      node0.isIn();
      Node node4 = new Node(55, nodeArray0);
      // Undeclared exception!
      try { 
        node0.removeChild(node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, 42, 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      node2.getBooleanProp(86);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<TemplateType> vector0 = new Vector<TemplateType>(152, 16);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) vector0);
      node2.getLength();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.addChildrenAfter(node3, node0);
      node2.setOptionalArg(true);
      node1.getDirectives();
      node2.isAdd();
      Node node4 = null;
      try {
        node4 = new Node(13, node3, node2, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(4095);
      Node node1 = Node.newNumber((-787.004217503916));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node1.setWasEmptyNode(true);
      Node.newString((-2730), "d(2*~[ebA!|=v/9X4");
      Node node2 = node0.getLastSibling();
      node1.srcrefTree(node0);
      node2.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      vector0.add((JSType) templateType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&\"b|s{Nh6fM-p'");
      Node node0 = Node.newString(2084, "&\"b|s{Nh6fM-p'", 3307, 21);
      node0.isDo();
      node0.isAdd();
      Node node1 = Node.newNumber(0.5);
      node0.getQualifiedName();
      node0.isNull();
      node0.getDirectives();
      node0.useSourceInfoFromForTree(node1);
      node1.isCast();
      node0.hasOneChild();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(93);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 93
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(2164, node0, 231, 51);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("//:yB3H@6xJl", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.getLastSibling();
      node2.isNot();
      Node.newString(55, "dc<k ,pn");
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.hasMoreThanOneChild();
      node2.isLabel();
      node2.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = new Node(5279, 55, 53);
      Node.newString(2, "R,Q#l");
      Node node1 = Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-735));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node2 = node1.getLastSibling();
      Node node3 = node1.srcrefTree(node2);
      node0.isNot();
      node3.isAnd();
      node0.getChildCount();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(40);
      node0.isWith();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node1 = node0.getLastSibling();
      Node node2 = new Node(4095, node1, 39, (-1040));
      node2.isDebugger();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node3 = node2.srcrefTree(node1);
      node0.putIntProp(2071, 454);
      node3.setVarArgs(true);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(5279, 55, 53);
      Node node2 = Node.newString(2, "R,Q#l");
      Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-735));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = Node.newString("INSTANCEOF", (-493), 119);
      Node node4 = new Node(32, node0, node3, node0, node1, (-935), 54);
      node4.setSourceEncodedPositionForTree(39);
      node1.getQualifiedName();
      node3.toString(true, true, true);
      node4.cloneNode();
      node2.checkTreeEqualsImpl(node3);
      node3.isNot();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      node0.getIntProp(617);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Bzx@T;Az");
      Node node1 = new Node(42, node0, node0, node0, 30, 47);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("zu");
      node_FileLevelJsDocBuilder0.append("d9'N}HZ](M^z,1G\"2(");
      Node node2 = Node.newNumber((double) 4, 4, 47);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node2.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Bzx@T;Az", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node4.isIn();
      // Undeclared exception!
      try { 
        node0.replaceChild(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newNumber((-17.0188209732502));
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      node1.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      Node node2 = node1.getLastSibling();
      node1.isDebugger();
      node0.putIntProp(4009, 4009);
      node0.isIf();
      node2.isAnd();
      node0.isNE();
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1202), node0, node0, node0, node0, 2326, 51);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z,V", false);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("no next sibling.", true);
      node2.setStaticSourceFile(simpleSourceFile1);
      Node node3 = node1.getLastSibling();
      node2.wasEmptyNode();
      Node node4 = Node.newString((-1059), "NO_OBJECT_TYPE");
      node3.isCast();
      Node node5 = new Node(53, 48, 3161);
      node5.hasMoreThanOneChild();
      node1.isLabel();
      node4.isOr();
      node3.isCast();
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = new Node(8, node0);
      Node node2 = Node.newString("ITANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node_SideEffectFlags0.setReturnsTainted();
      node1.isDefaultCase();
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      ObjectType objectType1 = jSTypeRegistry1.createObjectType(objectType0);
      jSTypeArray0[0] = (JSType) objectType1;
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0);
      ObjectType objectType2 = jSTypeRegistry1.createObjectType("Object#Key", node1, objectType0);
      jSTypeArray0[1] = (JSType) objectType2;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.clonePropsFrom(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      InputId inputId0 = new InputId("6J^z\"W{FIeS");
      node0.setInputId(inputId0);
      Node node1 = new Node((-840), node0, node0, 1627, 42);
      node0.toStringTree();
      node1.isCatch();
      node0.isCall();
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFromExterns();
      node1.getStaticSourceFile();
      node1.isDelProp();
      node2.addSuppression("");
      node0.isIn();
      node2.isCatch();
      node2.isBreak();
      Node node3 = new Node(50, node1, 74, 114);
      node3.isOr();
      Node node4 = null;
      try {
        node4 = new Node(12, node2, node3, node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("PUBLIC");
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&\"b|s{Nh6fM-p'");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("&\"b|s{Nh6fM-p'");
      Node node1 = new Node(57, node0, node0, (-2481), 152);
      Node node2 = new Node(53, node1, node1, (-3039), (-1522));
      node2.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.spliterator();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable1.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node3 = Node.newNumber((double) 15);
      node0.addChildrenToBack(node2);
      node3.isFromExterns();
      node1.isIn();
      node2.removeChild(node1);
      Node node4 = Node.newString("&\"b|s{Nh6fM-p'");
      node4.hasChildren();
      node2.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isLabel();
      node3.isArrayLit();
      node3.isThrow();
      node1.isNumber();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newNumber(474.7481039001422);
      Node node1 = new Node(1082, node0, node0, node0, node0, 46, 44);
      node0.isOnlyModifiesArgumentsCall();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{(", true);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(2, node1, 4, 4095);
      Node node3 = node2.getLastSibling();
      node2.wasEmptyNode();
      Node.newString(4, "8IQ/C^wTM)jlf-");
      node0.setLength(31);
      node1.hasMoreThanOneChild();
      node1.isLabel();
      // Undeclared exception!
      try { 
        node3.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node1.isInstanceOf();
      Node node4 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      node0.isString();
      node3.isIn();
      node1.hasChildren();
      node1.isScript();
      Node.newString(43, "DO", 51, 50);
      node0.getJsDocBuilderForNode();
      Node node5 = node2.cloneTree();
      node5.isContinue();
      node4.isReturn();
      Node.extractLineno(37);
      node1.isVoid();
      node5.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.getAncestors();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING no next sibling. 132 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newNumber(474.7481039001422);
      Node node1 = new Node(1082, node0, node0, node0, node0, 46, 44);
      node0.isOnlyModifiesArgumentsCall();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{(", true);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(2, node1, 4, 4095);
      node2.getLastSibling();
      node2.wasEmptyNode();
      Node node3 = Node.newString(4, "8IQ/C^wTM)jlf-");
      node0.setLength(31);
      node1.hasMoreThanOneChild();
      node1.isLabel();
      node3.isArrayLit();
      node2.isThrow();
      node3.isNumber();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.isOr();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("source_file");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node0.toString(true, false, true);
      node0.checkTreeEqualsImpl(node0);
      node0.isNot();
      Node.extractLineno((-1911));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString("", 0, 11);
      Node node1 = Node.newNumber((double) 40);
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isCase();
      node0.getCharno();
      node0.isBlock();
      node0.getNext();
      int int0 = 6505;
      // Undeclared exception!
      try { 
        node1.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isDec();
      node0.setType((-256));
      node0.isVoid();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      int int0 = Node.REFLECTED_OBJECT;
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Bzx@T;Az");
      Node node1 = new Node(42, node0, node0, node0, 30, 47);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("zu");
      node_FileLevelJsDocBuilder0.append("d9'N}HZ](M^z,1G\"2(");
      Node node2 = Node.newNumber((double) 4, 4, 47);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.getBooleanProp(30);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Bzx@T;Az", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.setStaticSourceFile(simpleSourceFile0);
      node3.removeProp(50);
      node3.mayMutateArguments();
      Node node5 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node5.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node6 = node4.getLastSibling();
      node6.isDebugger();
      node2.srcrefTree(node1);
      Node.newNumber((double) 4095);
      // Undeclared exception!
      try { 
        Node.newString(2, (String) null, 52, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString("    ", 0, 0);
      Node node1 = new Node(0, node0, node0);
      node0.getIntProp(36);
      node0.isRegExp();
      node0.getSourceFileName();
      Node node2 = Node.newNumber((double) 47, 90, 15);
      node1.addChildToFront(node2);
      node0.isOr();
      node1.isParamList();
      node2.getType();
      node1.isGetElem();
      Node node3 = null;
      try {
        node3 = new Node(54, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(56, "");
      Node node2 = Node.newString("ITANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node_SideEffectFlags0.clearAllFlags();
      node1.isDefaultCase();
      node2.isOnlyModifiesThisCall();
      node1.getString();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 4095
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      Node node2 = new Node(57);
      node2.isExprResult();
      node2.getJSDocInfo();
      node2.isLabelName();
      Node node3 = node1.cloneTree();
      node3.isNE();
      // Undeclared exception!
      try { 
        node3.setString("2iB @H;KaRi");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -840
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(21, "");
      Node node1 = node0.cloneTree();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isNew();
      node2.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(30);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 30
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString("{'e+> $]:");
      Node node1 = Node.newString("{'e+> $]:", (-323), 47);
      node1.setLineno((-2922));
      Node node2 = new Node(46, node1, node0);
      node2.type = 2172;
      node1.getIntProp(8);
      node1.isEquivalentTo(node0);
      node1.getSourceFileName();
      node2.getSourceFileName();
      node2.getSourceFileName();
      node2.getLength();
      node0.isHook();
      node2.isSetterDef();
      node2.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.valueOf();
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      node1.isFalse();
      node0.isOptionalArg();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      node1.removeProp(56);
      node2.isIn();
      node0.hasChildren();
      node2.isScript();
      Node.newString(49, "", 119, 46);
      node0.getJsDocBuilderForNode();
      node2.cloneTree();
      node0.isContinue();
      node0.isReturn();
      Node.extractLineno(3);
      node0.isVoid();
      node1.getJsDocBuilderForNode();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node0.wasEmptyNode();
      Node node4 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      node3.isFromExterns();
      node3.isIn();
      node1.hasChildren();
      node1.isScript();
      node0.getNext();
      node0.getJsDocBuilderForNode();
      Node node5 = node2.cloneTree();
      node5.isContinue();
      node4.isReturn();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(1.0);
      String string0 = "com.google.javascript.rhino.Node$ObjectPropListItem";
      Node node1 = Node.newString(100, "]pDq+.^", 975, (-1421));
      node0.isDo();
      node1.isAdd();
      Node node2 = Node.newNumber((double) 37);
      node1.getQualifiedName();
      node1.isNull();
      node2.getDirectives();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node2.isCast();
      node2.hasOneChild();
      // Undeclared exception!
      try { 
        node3.getExistingIntProp(16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 16
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(449);
      Node node1 = Node.newNumber((double) 51);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, immutableList0);
      JSType jSType0 = templatizedType0.getPropertyType("Unknown class name");
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[1] = jSType1;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, templatizedType0);
      JSType jSType2 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType1, (String) null);
      jSTypeArray0[2] = jSType2;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildrenToFront(node2);
      Node node3 = Node.newNumber((double) 4);
      node1.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node2.isEquivalentTo(node3);
      node3.setType(1);
      node2.isCase();
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString("", 0, 11);
      Node node1 = new Node(512, node0, node0, node0, node0, 1141, 51);
      Node node2 = Node.newNumber((-1.0));
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", false);
      Node node4 = new Node((-3217), node2, 15, 0);
      Node node5 = node2.getLastSibling();
      Node node6 = Node.newNumber((-2222.2866), 42, 33);
      node6.isEquivalentTo(node5, false, false, true);
      node6.wasEmptyNode();
      Node node7 = null;
      try {
        node7 = new Node(38, node3, 39, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(6, nodeArray0);
      node0.setSourceEncodedPositionForTree(6);
      node0.getJSDocInfo();
      Node node1 = new Node(114);
      Node node2 = node0.srcref(node1);
      node0.isThrow();
      Node node3 = new Node(2, node1, node2, node0, node0, (-2579), 13);
      Node node4 = null;
      try {
        node4 = new Node(31, node2, node2, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&\"b|s{Nh6fM-p'");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("", 1565, (-1392));
      node0.isExprResult();
      node0.getJSDocInfo();
      node0.isLabelName();
      node0.cloneTree();
      node0.isNE();
      node0.setString("");
      node0.isWhile();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.7);
      Node node1 = Node.newString(52, "com.google.javascript.rhino.Node$ObjectPropListItem", 48, 2084);
      node0.isDo();
      node0.isAdd();
      Node node2 = Node.newNumber((double) 2);
      node0.getQualifiedName();
      node0.isNull();
      node0.getDirectives();
      node1.useSourceInfoFromForTree(node2);
      node0.isCast();
      node1.hasOneChild();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(2808);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2808
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      node0.isBreak();
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node((-665), node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = Node.newNumber((double) 38, (-2808), 51);
      node0.addChildToBack(node1);
      node0.putBooleanProp(16, false);
      node0.mayMutateGlobalStateOrThrow();
      node0.isLabel();
      node0.isDelProp();
      node2.isCatch();
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, node0, (-1522), 50);
      Node.newNumber(114.0);
      node0.isOnlyModifiesArgumentsCall();
      node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", true);
      Node node2 = new Node(54, node1, 16, 50);
      Node node3 = node2.getLastSibling();
      node3.isEquivalentTo(node2, true, true, true);
      node1.wasEmptyNode();
      Node node4 = null;
      try {
        node4 = new Node(49, node1, 37, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node((-1392));
      node0.isUnscopedQualifiedName();
      node0.setSourceFileForTesting("");
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isReturn();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
      node0.isIn();
      Node node1 = new Node((-1819), node0, node0, 30, 50);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "K `g|Q";
      Node node0 = Node.newString(1053, "K `g|Q");
      Node node1 = node0.cloneTree();
      node1.useSourceInfoFromForTree(node0);
      node0.isNew();
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(4095);
      Node node1 = Node.newNumber(3412.91194128047);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newNumber((-787.004217503916));
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node0.setType(1211);
      node2.isCase();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1528), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(43);
      simpleSourceFile0.getLineOffset(46);
      Node node3 = Node.newString("f;p^U{0caPKH\"fL#E", 110, 36);
      node2.getDirectives();
      node0.setDouble(8);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node2;
      nodeArray0[1] = node3;
      nodeArray0[2] = node0;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      nodeArray0[5] = node3;
      nodeArray0[6] = node3;
      node3.getAncestor(0);
      Node node4 = null;
      try {
        node4 = new Node(1659, nodeArray0, 48, (-49));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newNumber((-4101.0));
      String string0 = "tO#_ aAxw6InLPbt.=";
      Node node1 = Node.newString("tO#_ aAxw6InLPbt.=");
      node1.setLength(40);
      node1.isOr();
      node1.getIntProp(15);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      Node.newNumber((double) 2);
      // Undeclared exception!
      try { 
        node0.getAncestor((-2123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2153);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("D\u0006#d2pXMz");
      node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      node0.isQualifiedName();
      node0.isIn();
      Node node2 = Node.newString("J=7*hvm:8kxIE");
      node1.replaceChild(node0, node2);
      Node node3 = Node.newNumber(5014.6746137282);
      node1.getAncestor(32);
      node3.getNext();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      boolean boolean0 = true;
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node0.wasEmptyNode();
      Node.newString(39, "f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      Node.newNumber((double) 43);
      node1.getAncestor(47);
      Node node4 = Node.newNumber((double) 32, 1133, (-3938));
      try { 
        node4.setString("DO");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 32.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.getSideEffectFlags();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      node_AncestorIterable1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable1.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.isFromExterns();
      node1.isIn();
      node0.hasChildren();
      node0.isScript();
      node1.getNext();
      Node node2 = null;
      try {
        node2 = new Node(56, (Node) null, 108, 536870912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newNumber((-4101.0));
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(29, node0, 0, (-3272));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("//:yB3H@6xJl", false);
      node2.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node1.isAssignAdd();
      Node node4 = Node.newString((-4096), "//:yB3H@6xJl");
      node3.isCast();
      node1.hasMoreThanOneChild();
      node4.isLabel();
      node4.isLabel();
      node1.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node5 = null;
      try {
        node5 = new Node((-2063), node0, 4095, 465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.isOr();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("source_file");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node0.toString(true, false, true);
      Node node1 = node0.cloneNode();
      node1.checkTreeEqualsImpl(node0);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node0.wasEmptyNode();
      Node.newString(39, "f;p^U{0caPKH\"fL#E");
      node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node3.wasEmptyNode();
      Node node4 = Node.newString(111, "f;p^U{0caPKH\"fL#E");
      node4.isCast();
      node1.hasMoreThanOneChild();
      node1.isLabel();
      node3.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node5 = new Node(56, 38, (-2370));
      node5.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isGetProp();
      node0.setType((-256));
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -256
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isFunction();
      node0.isTypeOf();
      node0.hasChildren();
      node0.isQualifiedName();
      Node node1 = new Node(54, node0, 435, 38);
      Node node2 = null;
      try {
        node2 = new Node(47, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 0, 53);
      node1.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      node1.putProp(36, jSTypeNative0);
      Node node2 = Node.newNumber((double) 4095);
      node2.hasMoreThanOneChild();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      node0.getIntProp(617);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Bzx@T;Az");
      Node node1 = new Node(42, node0, node0, node0, 30, 47);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("zu");
      node_FileLevelJsDocBuilder0.append("d9'N}HZ](M^z,1G\"2(");
      Node node2 = Node.newNumber((double) 4, 4, 47);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node2.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Bzx@T;Az", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.setStaticSourceFile(simpleSourceFile0);
      node3.removeProp(50);
      jSTypeRegistry0.declareType("Bzx@T;Az", (JSType) null);
      node3.mayMutateArguments();
      Node node5 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node5.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node6 = node4.getLastSibling();
      node6.isDebugger();
      node2.srcrefTree(node1);
      Node node7 = Node.newNumber((double) 4095);
      node7.isString();
      node6.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      Node node1 = new Node(49, node0, 53, 51);
      node0.toStringTree();
      node1.isCatch();
      node0.isCall();
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFromExterns();
      node1.getStaticSourceFile();
      node2.removeProp(36);
      node2.mayMutateArguments();
      node1.getInputId();
      node0.isAssign();
      node0.toStringTree();
      node1.removeChild(node0);
      node1.setType(52);
      node2.isCase();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Z,V", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node3.wasEmptyNode();
      Node node4 = Node.newString(37, "can't use .skipNulls() with maps");
      node3.isCast();
      node4.hasMoreThanOneChild();
      node3.isLabel();
      node3.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", true);
      Node node3 = new Node(54, node1, 16, 50);
      Node node4 = node3.getLastSibling();
      node1.wasEmptyNode();
      Node node5 = Node.newString(1, "$NROUtO&zlT{2Cwj");
      node5.setLength(2147483645);
      node2.hasMoreThanOneChild();
      node4.isLabel();
      node0.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(56, "");
      Node node2 = Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node.newNumber((-1.0), 42, 2859);
      node1.addChildToBack(node0);
      node2.putBooleanProp(30, true);
      node1.mayMutateGlobalStateOrThrow();
      node1.isLabel();
      node1.isDelProp();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber((-4101.0));
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(29, node0, 0, (-3272));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("//:yB3H@6xJl", false);
      node2.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node2.getLastSibling();
      node1.wasEmptyNode();
      Node node4 = Node.newString((-4096), "//:yB3H@6xJl");
      node3.isCast();
      node1.hasMoreThanOneChild();
      node4.isLabel();
      node0.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newNumber((-1265.56717538));
      Node node1 = new Node(1, node0, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node2.copyInformationFrom(node1);
      node0.isDebugger();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString((-840), "h(u_eK");
      node0.type = 4524;
      Node node1 = new Node((-840), node0, (-188), 38);
      node1.isSyntheticBlock();
      node1.getSourceFileName();
      Node node2 = null;
      try {
        node2 = new Node((-840), node1, node1, node1, node0, 31, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isOr();
      node0.isQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isName();
      Node node1 = node0.getLastSibling();
      Node node2 = node1.srcrefTree(node0);
      Node node3 = Node.newString(",?;JCulv{h", 15, 57);
      node3.setVarArgs(false);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      Node node1 = new Node((-840), node0, node0, 1627, 42);
      node0.toStringTree();
      node1.isCatch();
      node0.isCall();
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFromExterns();
      node1.getStaticSourceFile();
      node2.removeProp(36);
      node2.mayMutateArguments();
      node1.getInputId();
      node0.isAssign();
      node0.toStringTree();
      node1.setType(52);
      node2.isCase();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.isIn();
      node0.hasChildren();
      node0.isScript();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node1 = new Node(2);
      Node node2 = Node.newString("{(");
      Node node3 = new Node((-862048943), node2, node1, node1, 1140, 64);
      node3.isSwitch();
      node3.detachChildren();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newString(117, "UJ+&g*9m/6NDfB~bC", (-2394), 2747);
      node0.getQualifiedName();
      node0.getIntProp(32768);
      Node node1 = new Node(39, node0);
      node1.detachChildren();
      node1.cloneTree();
      node1.isEquivalentToTyped(node0);
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString("PUBLIC");
      node0.detachChildren();
      node0.isComma();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4064);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags4.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags7.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags7.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags10 = new Node.SideEffectFlags();
      node_SideEffectFlags10.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags9.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags10.clearSideEffectFlags();
      Node node2 = node0.getLastSibling();
      node1.isDebugger();
      node2.setCharno(56);
      Node node3 = node0.srcrefTree(node2);
      node3.putIntProp(155, 51);
      node3.setVarArgs(true);
      node_SideEffectFlags8.setMutatesGlobalState();
      node2.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0, 42, 363);
      node1.hasChildren();
      node0.isQualifiedName();
      Node node2 = new Node(49, node1, 43, 2);
      Node node3 = new Node(589);
      Node node4 = new Node(31, node3);
      node4.mayMutateGlobalStateOrThrow();
      node3.isDelProp();
      node0.isIn();
      node2.isCatch();
      node1.isBreak();
      node0.isOr();
      Node node5 = Node.newNumber((-647.965761229459), 4095, 39);
      Node node6 = null;
      try {
        node6 = new Node((-944), node2, node2, node5, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      simpleSourceFile0.getLineOffset(3365);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node2.toString();
      node0.wasEmptyNode();
      Node.newString(39, "f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node3.getIntProp(835);
      node_AncestorIterable0.iterator();
      node3.isFromExterns();
      node3.isIn();
      node1.hasChildren();
      node1.isScript();
      node0.getNext();
      node0.getJsDocBuilderForNode();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newString("    ", 0, 0);
      Node node1 = new Node(0, node0, node0);
      node0.getIntProp(36);
      node1.putBooleanProp((-2282), true);
      node0.getStaticSourceFile();
      node1.putProp(1171, (Object) null);
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(297);
      Node node1 = new Node((-840), node0, node0, 1627, 42);
      node0.toStringTree();
      node1.isCatch();
      node0.isCall();
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFromExterns();
      node1.getStaticSourceFile();
      node2.removeProp(36);
      node2.mayMutateArguments();
      node1.getInputId();
      node0.isAssign();
      node0.toStringTree();
      node0.isThis();
      node0.setDouble((-126.06408676183136));
      node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.valueOf();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(52, node0, node0, node0, node0);
      node1.setLength(47);
      node1.isOr();
      node0.isQualifiedName();
      node0.isIn();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
      node0.isIn();
      Node node1 = new Node((-1819), node0, node0, 30, 50);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString("HuU5>%w", 1717, 123);
      Node node1 = new Node(1881, node0, node0, 15, 57);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = node1.getLastSibling();
      node0.wasEmptyNode();
      Node node4 = Node.newString(39, "f;p^U{0caPKH\"fL#E");
      node2.setVarArgs(false);
      node3.isCast();
      node0.hasMoreThanOneChild();
      node4.isLabel();
      node2.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node4.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(40);
      node0.isWith();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node0.isEmpty();
      node0.isName();
      Node node1 = Node.newNumber((-809.9772647), 48, 39);
      node1.hasOneChild();
      node1.isAnd();
      node0.getAncestors();
      node0.isDec();
      node1.isScript();
      node1.getNext();
      node0.getJsDocBuilderForNode();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      Node node1 = Node.newNumber((double) 54);
      node0.isEquivalentToTyped(node1);
      node1.setChangeTime(15);
      node0.getAncestors();
      node0.isDefaultCase();
      node1.isOnlyModifiesThisCall();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 54.0 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.Property");
      Node node3 = new Node(1351, node2, node2, (-537), 47);
      node3.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node3.getInputId();
      node0.putProp(2013, (Object) null);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3842), (-632));
      node0.isWith();
      node0.getLength();
      node0.children();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int int0 = 16;
      Node[] nodeArray0 = null;
      Node node0 = null;
      try {
        node0 = new Node(16, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(40, nodeArray0, 40, (-1016));
      int int0 = 30;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of((TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = new Node((-1385), 0, 0);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("    ");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node0.isEmpty();
      node0.isName();
      Node node1 = Node.newNumber(573.52, 122, 63);
      node0.hasOneChild();
      node1.isAnd();
      node0.getAncestors();
      node1.isIn();
      node1.isScript();
      Node node2 = new Node(98, node0, node1, node1, 31, 38);
      node2.getNext();
      node1.getJsDocBuilderForNode();
      Node node3 = null;
      try {
        node3 = new Node(51, node2, node1, node2, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node.newString("com.google.javascript.rhino.jstype.Property");
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.putBooleanProp(56, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node3 = node0.getLastSibling();
      node0.isDebugger();
      Node node4 = node2.srcrefTree(node0);
      node4.isString();
      node2.clonePropsFrom(node3);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(53, node1, 2, 9);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("f;p^U{0caPKH\"fL#E");
      node_FileLevelJsDocBuilder0.append("f;p^U{0caPKH\"fL#E");
      node_FileLevelJsDocBuilder0.append("f;p^U{0caPKH\"fL#E");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node4 = null;
      try {
        node4 = new Node(135, node3, node2, 985, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, node0, (-1516), 50);
      Node.newNumber(114.0);
      boolean boolean0 = true;
      node0.isOnlyModifiesArgumentsCall();
      node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$NROUtO&zlT{2Cwj", true);
      Node node2 = null;
      try {
        node2 = new Node(56, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(738);
      node_SideEffectFlags5.setMutatesArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      node1.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node node2 = Node.newString("NUMBER 0.0 0\n");
      node2.getLineno();
      Node node3 = node1.getLastSibling();
      Node node4 = node0.srcrefTree(node3);
      Node node5 = node2.useSourceInfoIfMissingFrom(node1);
      node4.setVarArgs(true);
      node5.isCast();
      node2.hasMoreThanOneChild();
      node4.isLabel();
      node4.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      node0.getIntProp(617);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Bzx@T;Az");
      node0.getSourceFileName();
      Node.newNumber(0.0);
      node0.isGetProp();
      node0.setType(148);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString("", 0, 11);
      Node.newNumber((double) 40);
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isCase();
      node0.getCharno();
      node0.isBlock();
      node0.getNext();
      Node.newString(56, "Q2.A>HCfULHKK");
      Node node1 = Node.newString(419, "", 16, 56);
      // Undeclared exception!
      try { 
        node1.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getSideEffectFlags();
      JSType[] jSTypeArray0 = new JSType[1];
      node0.setString("DATE_TYPE");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node1 = node0.getLastSibling();
      node0.isDebugger();
      Node node2 = node1.srcrefTree(node0);
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      Node node1 = Node.newNumber((-1.0));
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isCase();
      node1.getCharno();
      node1.isBlock();
      node1.getNext();
      Node node2 = Node.newString(16, ":rYqeQ");
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.removeProp(415);
      node2.mayMutateArguments();
      JSType[] jSTypeArray0 = new JSType[1];
      node1.getJSType();
      jSTypeArray0[0] = null;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.isAssign();
      node3.toStringTree();
      Node node4 = new Node(1052);
      node4.isThis();
      Node node5 = null;
      try {
        node5 = new Node(47, (Node) null, 52, 2189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(52, node0, node0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node1.setChangeTime(15);
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags7.areAllFlagsSet();
      node_SideEffectFlags7.clearSideEffectFlags();
      Node node2 = node1.getLastSibling();
      node2.isDebugger();
      Node node3 = node0.srcrefTree(node1);
      node3.putIntProp(1750, 1);
      node3.setVarArgs(false);
      node_SideEffectFlags4.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 1750
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      Node node1 = Node.newNumber((-1.0));
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isCase();
      node1.getCharno();
      node1.isBlock();
      node1.getNext();
      Node node2 = Node.newString(16, ":rYqeQ");
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = new Node(4096, node1, node1, 32, 39);
      node3.getQualifiedName();
      // Undeclared exception!
      try { 
        node2.replaceChild((Node) null, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives(linkedHashSet0);
      Node node2 = new Node(43, node0, node0, node1);
      node1.getAncestors();
      node1.getDouble();
      node1.setSourceEncodedPositionForTree(51);
      node1.getQualifiedName();
      node1.getChangeTime();
      node0.toString(false, true, false);
      node1.cloneNode();
      node0.getDouble();
      node1.checkTreeEqualsImpl(node2);
      node1.isNot();
      node1.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(40);
      node0.isOr();
      node0.putBooleanProp(98, true);
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 98
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newString("    ", 0, 0);
      Node node1 = new Node(0, node0, node0);
      node0.getIntProp(36);
      node1.putBooleanProp((-2282), true);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node0.isFor();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.srcref(node0);
      node1.setDirectives(linkedHashSet0);
      Node node2 = new Node(43, node0, node0, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      Node.newNumber(4445.10218768773, 36, 1053);
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node.extractLineno(30);
      Node node0 = Node.newString(30, "");
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node node2 = Node.newString("INSTANCEOF");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node.newNumber((-1.0), 42, 2859);
      node1.addChildToBack(node0);
      node2.putBooleanProp(30, true);
      node1.mayMutateGlobalStateOrThrow();
      node1.isLabel();
      node1.isDelProp();
      node0.isCatch();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node(1053);
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isVarArgs();
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.isCall();
      node0.isOptionalArg();
      String string0 = "";
      // Undeclared exception!
      try { 
        node1.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1053
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newString(1053, "K `g|Q");
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      node2.isCall();
      node2.isOptionalArg();
      Node node3 = Node.newString("K `g|Q");
      Node node4 = node3.useSourceInfoFromForTree(node2);
      node4.setStaticSourceFile((StaticSourceFile) null);
      Node node5 = Node.newString("K `g|Q");
      node3.getLineno();
      node4.setOptionalArg(false);
      Node node6 = node5.useSourceInfoFromForTree(node1);
      node6.getIntProp(37);
      Node node7 = new Node(43, 40, 15);
      node4.getDirectives();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      Node node1 = Node.newNumber(2523.1570198, 8, 28);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("zu", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.removeProp(46);
      node0.mayMutateArguments();
      node2.isAssign();
      node1.toStringTree();
      node0.isThis();
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = "K `g|Q";
      Node node0 = Node.newString(1053, "K `g|Q");
      Node node1 = new Node(40, node0, node0, node0, 57, 2);
      node1.useSourceInfoFromForTree(node0);
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      node1.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node node2 = Node.newString("NUMBER 0.0 0\n");
      node2.getLineno();
      Node.newNumber((-1.0));
      node2.getDirectives();
      StringWriter stringWriter0 = new StringWriter(50);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 0.0 0\n");
      node2.appendStringTree(stringWriter1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.Property");
      node0.copyInformationFromForTree(node1);
      node1.putBooleanProp(56, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.hasChild(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.isAdd();
      node3.cloneTree();
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newString(135, "vf", 135, 135);
      node0.getIntProp(135);
      node0.putBooleanProp((-3043), true);
      node0.getStaticSourceFile();
      node0.isRegExp();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = null;
      try {
        node1 = new Node(11, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      node1.isOnlyModifiesThisCall();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node node2 = Node.newString("NUMBER 0.0 0\n");
      node2.getLineno();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.putBooleanProp(0, false);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
      try {
        node1 = new Node(42, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSideEffectFlags();
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEqualsImpl(node1);
      node1.setSourceEncodedPosition(3752);
      node0.checkTreeEqualsImpl(node1);
      node0.isSyntheticBlock();
      node1.isSyntheticBlock();
      node1.isOnlyModifiesThisCall();
      node0.addSuppression("");
      node1.isOnlyModifiesThisCall();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = new Node(1053);
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      node0.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1428));
      Node node3 = Node.newString("=O!+");
      node0.getLineno();
      node2.isParamList();
      node1.getType();
      node0.isGetElem();
      Node node4 = new Node(48, node2, node1, node2);
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.newString("");
      node3.isDebugger();
      node5.srcrefTree(node4);
      node2.setVarArgs(false);
      Node node6 = new Node(1053, node0);
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString("K `g|Q");
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      int int0 = Node.COLUMN_MASK;
      node1.isFalse();
      node0.isOptionalArg();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      node1.removeProp(56);
      node1.mayMutateArguments();
      node2.getInputId();
      node0.isAssign();
      node0.toStringTree();
      node0.isThis();
      try { 
        node2.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING K `g|Q is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = new Node(1053);
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.isCall();
      node0.isOptionalArg();
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.isFromExterns();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.isStringKey();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = new Node(1053);
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isVarArgs();
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.isCall();
      node0.isOptionalArg();
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.isFromExterns();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.removeProp(0);
      node2.putIntProp(8, (-1078));
      node3.mayMutateArguments();
      node2.getInputId();
      node0.isAssign();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1053
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      Node node1 = Node.newNumber((-1.0));
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isCall();
      node1.isOptionalArg();
      Node node2 = Node.newString("no next sibling.");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.useSourceInfoFromForTree(node2);
      node3.setStaticSourceFile((StaticSourceFile) null);
      node2.removeProp(126);
      node0.mayMutateArguments();
      node0.isAssign();
      node3.toStringTree();
      Node node4 = new Node(40, node0, node0, 114, 16);
      node4.isThis();
      node1.setDouble(1.0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newString(1053, "K `g|Q");
      Node node1 = node0.cloneTree();
      node1.useSourceInfoFromForTree(node0);
      node0.isDefaultCase();
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "{(";
      Node node0 = Node.newString("{(");
      node0.setLength(40);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      String string1 = "zu";
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING {( [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000009] [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(40);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags6.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags7.areAllFlagsSet();
      Node node1 = node0.getLastSibling();
      node0.isDebugger();
      Node node2 = node1.srcrefTree(node0);
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.getLineno();
      node0.isParamList();
      node0.getType();
      node1.isGetElem();
      Node node2 = null;
      try {
        node2 = new Node(153, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 3351, 3351);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(49, node0, node0, node0);
      Node node2 = new Node(915);
      node0.addChildrenToBack(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.isUnscopedQualifiedName();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  3351 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSideEffectFlags();
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      try { 
        node1.setString("DATE_TYPE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setDouble(0.0);
      node0.getProp((-4133));
      node0.isGetterDef();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isName();
      Node node1 = node0.getLastSibling();
      node1.isAssign();
      Node node2 = node1.srcrefTree(node0);
      node1.setVarArgs(false);
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      node0.isBreak();
      node0.setSourceEncodedPosition(515);
      Node.newNumber(0.0);
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1607));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 515
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newNumber((double) 114);
      Node node1 = new Node(114, node0, node0, node0, node0, (-1522), 50);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("f;p^U{0caPKH\"fL#E", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.getLastSibling();
      node0.wasEmptyNode();
      Node.newString(39, "f;p^U{0caPKH\"fL#E");
      node1.checkTreeTypeAwareEqualsImpl(node2);
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("sN.Qj3#@xW0(pUO", false);
      node0.putProp(1527, simpleSourceFile1);
      node2.setCharno(1527);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setDouble(0.0);
      node0.getProp((-4133));
      node0.isOnlyModifiesArgumentsCall();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(103, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.newString("NUMBER 0.0 0\n");
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node1.isEmpty();
      node0.isName();
      Node node2 = Node.newNumber((double) 51, 55, 33);
      node2.hasOneChild();
      node1.isAnd();
      Node node3 = new Node(2);
      Node node4 = null;
      try {
        node4 = new Node(15, node0, node2, (-1), 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node node2 = Node.newString("INSTANCEOF");
      node1.putBooleanProp(56, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.getLastSibling();
      Node node3 = node1.srcrefTree(node2);
      node2.isNot();
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      Node.newNumber((-1.0));
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING no next sibling. 132 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node node2 = Node.newString("NUMBER 0.0 0\n");
      node2.getLineno();
      node2.isParamList();
      node0.getType();
      node1.isGetElem();
      Node node3 = new Node(153, node2, node1, node2);
      node1.useSourceInfoIfMissingFromForTree(node2);
      Node node4 = Node.newString("");
      node4.isDebugger();
      Node node5 = node3.srcrefTree(node0);
      node2.setVarArgs(false);
      Node node6 = new Node(52, node5);
      node6.isString();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.newString("NUMBER 0.0 0\n");
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node1.isEmpty();
      node0.isName();
      Node node2 = Node.newNumber((double) 51, 55, 33);
      node2.hasOneChild();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node3 = Node.newString(0, "NUMBER 0.0 0\n");
      node3.getLastSibling();
      node1.isDebugger();
      node1.srcrefTree(node0);
      node2.setVarArgs(true);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      node0.getIntProp(617);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Bzx@T;Az");
      Node node1 = new Node(42, node0, node0, node0, 30, 47);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("zu");
      node_FileLevelJsDocBuilder0.append("d9'N}HZ](M^z,1G\"2(");
      Node node2 = Node.newNumber((double) 4, 4, 47);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node2.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Bzx@T;Az", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.setStaticSourceFile(simpleSourceFile0);
      node3.removeProp(50);
      node3.mayMutateArguments();
      Node node5 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node5.isAssign();
      node5.toStringTree();
      node4.isThis();
      Node node6 = null;
      try {
        node6 = new Node(1627, node5, node2, node4, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node(1053);
      Node node1 = node0.cloneTree();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNoSideEffectsCall();
      node0.getStaticSourceFile();
      node0.isCatch();
      node0.isCall();
      node0.isOptionalArg();
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.isFromExterns();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.removeProp(0);
      node3.mayMutateArguments();
      node2.getInputId();
      node0.isAssign();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1053
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.newString("NUMBER 0.0 0\n");
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node1.isEmpty();
      node0.isName();
      Node node2 = Node.newNumber((double) 51, 55, 33);
      node2.hasOneChild();
      node1.isAnd();
      Node node3 = new Node(2);
      Node node4 = null;
      try {
        node4 = new Node(49, node3, node0, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.Property");
      Node node3 = node0.copyInformationFromForTree(node1);
      node1.putBooleanProp(56, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node3.getLastSibling();
      node1.srcrefTree(node2);
      Node node4 = node0.useSourceInfoIfMissingFrom(node3);
      node4.isNot();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString((-2639), " _xr[r", 4745, 4745);
      node0.isCast();
      node0.mayMutateArguments();
      node0.isEquivalentToShallow(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalType(templateType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      Node node1 = Node.newNumber((-1.0));
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isCase();
      node1.getCharno();
      node1.isBlock();
      node1.getNext();
      Node node2 = Node.newString(16, ":rYqeQ");
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = new Node(4096, node1, node1, 32, 39);
      // Undeclared exception!
      try { 
        node2.replaceChild((Node) null, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = "Bzx@T;Az";
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      int int0 = 617;
      Node node1 = Node.newString("", 16, 86);
      Node node2 = new Node(46, node0, node0, node1, (-4083), 61440);
      node2.setIsSyntheticBlock(false);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString("    ", 0, 0);
      Node node1 = new Node(0, node0, node0);
      node0.getIntProp(36);
      node1.putBooleanProp((-2282), true);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isHook();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(56, nodeArray0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 54);
      node0.isEquivalentToTyped(node1);
      node1.setChangeTime(15);
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node2 = Node.newNumber((-1956.55136755), 54, (-221));
      nodeArray0[3] = node2;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      Node node3 = null;
      try {
        node3 = new Node(1263, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength((-6));
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("{(");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newString("", 2514, 2514);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 54);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertTrue(node1.isNumber());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertTrue(node1.isNumber());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      node1.setChangeTime(15);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertTrue(node1.isNumber());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.equals((Object)node0));
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node_AncestorIterable0);
      
      boolean boolean1 = node0.isDefaultCase();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean1);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = node0.isLocalResultCall();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean2);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      node1.setDouble(1.2);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertTrue(node1.isNumber());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.equals((Object)node0));
      
      boolean boolean3 = node0.isFor();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean3);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = node1.isRegExp();
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean4);
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertTrue(node1.isNumber());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = node0.isThis();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean5);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertEquals(2514, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(2514, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(10299858, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isOr();
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("zu");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      Node node1 = Node.newNumber(2523.1570198, 8, 28);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.isFromExterns();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("zu", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.removeProp(46);
      node0.mayMutateArguments();
      node2.isAssign();
      node1.toStringTree();
      node0.isThis();
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING {( 8 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000008] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000011] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newString("E.H31", (-135), (-3844));
      node0.getDirectives();
      try { 
        node0.setDouble((-3844));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING E.H31 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      int int0 = 175;
      Node node0 = new Node(175);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(175);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 175
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newString("HuU5>%w", 1715, 116);
      Node node1 = new Node(1881, node0, node0, 15, 57);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.Property");
      node_FileLevelJsDocBuilder0.append("0EqlO#\"NxdJQ<x}C");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.Property");
      node_FileLevelJsDocBuilder0.append("oyY");
      node_FileLevelJsDocBuilder0.append("oyY");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node1.isIn();
      node0.hasChildren();
      node0.isScript();
      Node node2 = new Node(29, node1);
      Node node3 = new Node(2214, node2, 31, 32);
      node3.getNext();
      node3.getJsDocBuilderForNode();
      node0.getNext();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setLength(0);
      node0.isOr();
      node0.isQualifiedName();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString("var_args_name");
      Node node2 = new Node(16, node0, node1, node0);
      Node node3 = node2.copyInformationFromForTree(node1);
      node1.putBooleanProp(0, true);
      Node node4 = null;
      try {
        node4 = new Node((-640), node2, node3, node0, 42, 386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      node0.isBreak();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      node0.isEquivalentToShallow(node0);
      nodeArray0[5] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(171);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesThis();
      node0.isHook();
      Node node1 = null;
      try {
        node1 = new Node((-1043), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      Node node1 = Node.newString(0, "R,Q#l");
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.Property");
      Node node3 = node0.copyInformationFromForTree(node1);
      node1.putBooleanProp(56, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node4 = node3.getLastSibling();
      node1.srcrefTree(node2);
      node0.useSourceInfoIfMissingFrom(node3);
      node4.setVarArgs(false);
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setSourceEncodedPosition(301);
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      node1.putProp(36, jSTypeNative0);
      node0.toStringTree();
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node node2 = Node.newString("NUMBER 0.0 0\n");
      node2.getLineno();
      node2.isParamList();
      node0.getType();
      node1.isGetElem();
      Node node3 = new Node(153, node2, node1, node2);
      node0.hasChild(node3);
      node0.isAdd();
      node1.cloneTree();
      node_SideEffectFlags0.areAllFlagsSet();
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -840
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.children();
      node0.isParamList();
      node0.getType();
      node0.isGetElem();
      Node node1 = new Node(4, node0, node0, node0);
      node1.hasChild(node0);
      node1.isAdd();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      node0.getIntProp(617);
      node0.putBooleanProp(617, true);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isHook();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node((-971), nodeArray0);
      node1.isStringKey();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString("");
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 54);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(boolean0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      node1.setChangeTime(15);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.equals((Object)node0));
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node_AncestorIterable0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      assertEquals(4095, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4087, node_SideEffectFlags0.valueOf());
      assertEquals(4087, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4071, node_SideEffectFlags0.valueOf());
      assertEquals(4071, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4071, node_SideEffectFlags2.valueOf());
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4069, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(4069, node_SideEffectFlags1.valueOf());
      assertEquals(4069, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4069, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertEquals(4065, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags3.valueOf());
      assertEquals(4065, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertEquals(4065, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags3.valueOf());
      assertEquals(4065, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
      assertNotNull(node_SideEffectFlags6);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertEquals(31, node_SideEffectFlags7.valueOf());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
      assertNotNull(node_SideEffectFlags7);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesGlobalState();
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags7.valueOf());
      assertEquals(24, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
      assertNotNull(node_SideEffectFlags8);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags6.setMutatesThis();
      assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags9.valueOf());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
      assertNotNull(node_SideEffectFlags9);
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags2.setMutatesArguments();
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertEquals(4065, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(4065, node_SideEffectFlags10.valueOf());
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags9));
      assertNotNull(node_SideEffectFlags10);
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags1.setMutatesGlobalState();
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertFalse(node_SideEffectFlags11.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags11.valueOf());
      assertEquals(4064, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags11.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags11.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags11.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags11.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags9));
      assertNotNull(node_SideEffectFlags11);
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags2.setMutatesGlobalState();
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertNotSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertEquals(4064, node_SideEffectFlags12.valueOf());
      assertFalse(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags12.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags12.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags12.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags12.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags8));
      assertNotNull(node_SideEffectFlags12);
      
      boolean boolean1 = node_SideEffectFlags8.areAllFlagsSet();
      assertFalse(boolean1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
      assertNotSame(node_SideEffectFlags7, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags10);
      assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags7.valueOf());
      assertEquals(24, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertTrue(boolean1 == boolean0);
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags12));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags11));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags10));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags10));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags11));
      assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags12));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags11));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags12));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
      assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags10));
      
      Node node2 = node1.getLastSibling();
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDefaultCase());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isParamList());
      assertTrue(node2.isNumber());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFalse());
      assertEquals(39, node2.getType());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      boolean boolean2 = node2.isDebugger();
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean2);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDefaultCase());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isParamList());
      assertTrue(node2.isNumber());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFalse());
      assertEquals(39, node2.getType());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Node node3 = node0.srcrefTree(node1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node3, node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isDo());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isOr());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.hasChildren());
      assertEquals(40, node3.getType());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isInc());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isWith());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isScript());
      assertFalse(node3.isParamList());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isStringKey());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      
      node3.setVarArgs(false);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node3, node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isNew());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isDo());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isOr());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.hasChildren());
      assertEquals(40, node3.getType());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isInc());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isWith());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isScript());
      assertFalse(node3.isParamList());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isStringKey());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags4.setMutatesGlobalState();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertNotSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertNotSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertNotSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertNotSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertNotSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertNotSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertNotSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertNotSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertNotSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertNotSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertNotSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertEquals(4064, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags13.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags13.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(4064, node_SideEffectFlags3.valueOf());
      assertEquals(4064, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags13.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags13.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags13.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags13.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags9));
      assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags7));
      assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags8));
      assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags6));
      assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags9));
      assertNotNull(node_SideEffectFlags13);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newString("MwVZ9@-liSE)%Q((");
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertNotNull(node0);
      
      Node node1 = new Node(39, node0, (-98), 36);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = new Node(1420, node1, node1, 2353, 56);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCast());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertEquals(1420, node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertEquals(56, node2.getCharno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertEquals(9637944, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertEquals(2353, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      Node node3 = null;
      try {
        node3 = new Node((-2105), node2, node0, node2, 190, 78);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      int int0 = 164;
      String string0 = "E";
      Node node0 = Node.newString(8202, "E");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertEquals(8202, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 53, (-3808), 113);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = new Node(8202, node0, node1, node1, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertEquals(8202, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isIf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isDec());
      assertEquals(8202, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      int int1 = node0.getLength();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, int1);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertEquals(8202, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertNotNull(node0);
      
      node0.setSourceEncodedPosition(301);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      
      Node node1 = Node.newNumber((-787.004217503916));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node1, node0);
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.equals((Object)node1));
      assertNull(set0);
      
      boolean boolean0 = node0.isStringKey();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.equals((Object)node1));
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags0.valueOf());
      assertEquals(27, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(27, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags2);
      
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = new Node((-26), 65535, 65535);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals(268435455, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(65535, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals((-26), node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertNotNull(node0);
      
      Node node1 = Node.newString(0, "R,Q#l");
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.Property");
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node2, node1);
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isIn());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      Node node3 = node0.copyInformationFromForTree(node1);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertSame(node0, node3);
      assertNotSame(node1, node2);
      assertSame(node3, node0);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals((-26), node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isScript());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isOr());
      assertFalse(node3.isNot());
      assertFalse(node3.isNumber());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDec());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isThis());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isAnd());
      assertEquals((-26), node3.getType());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNE());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isFor());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isBlock());
      assertFalse(node3.isHook());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNew());
      assertFalse(node3.isName());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isNull());
      assertEquals((-1), node3.getCharno());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      
      node1.putBooleanProp(56, true);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node1, node2);
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      
      StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node2, node1);
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isIn());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertNull(staticSourceFile0);
      
      node0.setStaticSourceFile((StaticSourceFile) null);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertSame(node0, node3);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals((-26), node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      
      boolean boolean0 = node0.isHook();
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean0);
      assertSame(node0, node3);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals((-26), node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node4 = new Node(37, nodeArray0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertEquals(1, node4.getChildCount());
      assertEquals(37, node4.getType());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isArrayLit());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isHook());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isTry());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isString());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isFunction());
      assertFalse(node4.isThis());
      assertEquals(0, node4.getLineno());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isCatch());
      assertFalse(node4.isWith());
      assertFalse(node4.isCast());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertTrue(node4.isCall());
      assertEquals(0, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isContinue());
      assertFalse(node4.isDo());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isWhile());
      assertFalse(node4.isBlock());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isAssign());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNumber());
      assertFalse(node4.isScript());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isVoid());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isBreak());
      assertFalse(node4.isName());
      assertFalse(node4.isGetElem());
      assertEquals(0, node4.getSourcePosition());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isVar());
      assertFalse(node4.isTrue());
      assertFalse(node4.isOr());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isEmpty());
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertEquals(1, nodeArray0.length);
      assertNotNull(node4);
      
      // Undeclared exception!
      try { 
        node1.getChildBefore(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      
      node0.setSourceEncodedPosition(301);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      
      Node node1 = new Node((-840), node0, node0, 1627, 53);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertEquals((-840), node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(6664245, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertEquals(1627, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      boolean boolean0 = node1.isOnlyModifiesThisCall();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(boolean0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertEquals((-840), node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(6664245, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertEquals(1627, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      assertEquals(JSTypeNative.FUNCTION_FUNCTION_TYPE, jSTypeNative0);
      
      node1.putProp(36, jSTypeNative0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertEquals((-840), node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(6664245, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertEquals(1627, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      String string0 = node0.toStringTree();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals("NUMBER 0.0 0\n", string0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      
      int int0 = node1.getSourceOffset();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals((-1), int0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertEquals((-840), node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(6664245, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertEquals(1627, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      assertEquals(57, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node2 = Node.newString("NUMBER 0.0 0\n");
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      
      int int1 = node2.getLineno();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals((-1), int1);
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      
      boolean boolean1 = node2.isParamList();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean1);
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      
      int int2 = node0.getType();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, int2);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      
      boolean boolean2 = node1.isGetElem();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(boolean2);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertEquals((-840), node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(6664245, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertEquals(1627, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      Node node3 = new Node(153, node2, node1, node2);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertEquals((-840), node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(6664245, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertEquals(1627, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCast());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node3.isNew());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isTry());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isString());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isHook());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isIn());
      assertEquals(153, node3.getType());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isVoid());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isAssign());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isGetProp());
      assertTrue(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      
      boolean boolean3 = node0.hasChild(node3);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(boolean3);
      assertNotSame(node1, node3);
      assertNotSame(node3, node1);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      
      boolean boolean4 = node0.isAdd();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(boolean4);
      
      Node node4 = node1.cloneTree();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotSame(node4, node1);
      assertNotSame(node4, node3);
      assertNotSame(node1, node3);
      assertNotSame(node1, node4);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isBreak();
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      boolean boolean1 = node0.isEquivalentToShallow(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertTrue(boolean1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      nodeArray0[5] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(148, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags1.valueOf());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(21, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(21, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(21, node_SideEffectFlags2.valueOf());
      assertEquals(21, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(21, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags3.valueOf());
      assertEquals(16, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags5.valueOf());
      assertNotNull(node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags6);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setThrows();
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags7);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.clearAllFlags();
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags8);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setMutatesGlobalState();
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertEquals(24, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags9.valueOf());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags9);
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags5.setMutatesThis();
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags10.valueOf());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertEquals(24, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags10);
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags9.setMutatesArguments();
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertEquals(24, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags9.valueOf());
      assertEquals(24, node_SideEffectFlags11.valueOf());
      assertFalse(node_SideEffectFlags11.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags11);
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags8.setMutatesGlobalState();
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertEquals(24, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertFalse(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags12.valueOf());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags12);
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags5.setMutatesGlobalState();
      assertSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags10);
      assertFalse(node_SideEffectFlags13.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags13.valueOf());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertEquals(24, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags13);
      
      boolean boolean2 = node_SideEffectFlags4.areAllFlagsSet();
      assertFalse(boolean2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertEquals(24, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Node node1 = node0.getLastSibling();
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(515, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertNotNull(node1);
      
      Node node2 = node0.srcrefTree(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertEquals(515, node2.getType());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertNotNull(node2);
      
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertSame(node0, node2);
      assertSame(node0, node3);
      assertSame(node0, node1);
      assertSame(node2, node0);
      assertSame(node2, node1);
      assertSame(node2, node3);
      assertSame(node3, node2);
      assertSame(node3, node0);
      assertSame(node3, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertEquals(515, node2.getType());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isCast());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDefaultCase());
      assertEquals(515, node3.getType());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isNull());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertNotNull(node3);
      
      node0.setVarArgs(true);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertSame(node0, node2);
      assertSame(node0, node3);
      assertSame(node0, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      
      boolean boolean3 = node0.isCast();
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean3);
      assertSame(node0, node2);
      assertSame(node0, node3);
      assertSame(node0, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(515, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newNumber((-872.677177529));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertNotNull(node0);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertNull(set0);
      
      boolean boolean0 = node0.isStringKey();
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      
      boolean boolean1 = node0.isSetterDef();
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean1);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertTrue(boolean1 == boolean0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNotNull(jSDocInfo0);
      
      Node node1 = jSDocInfo0.getAssociatedNode();
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(node1);
      
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(0, 1837, 1837);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertEquals(7526189, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(1837, node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(1837, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertEquals(7526189, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(1837, node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(1837, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(7526189, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertEquals(1837, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertEquals(1837, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = node1.cloneNode();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertEquals(7526189, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(1837, node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(1837, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(7526189, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertEquals(1837, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertEquals(1837, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertEquals(1837, node2.getLineno());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertEquals(7526189, node2.getSourcePosition());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertEquals(1837, node2.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      boolean boolean0 = true;
      Node node3 = null;
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newString((-2639), " _xr[r", 4745, 4745);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCast();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(boolean0);
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      
      Node node1 = Node.newNumber(0.0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean1 = node0.hasChild(node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(boolean1);
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      assertEquals(40, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(47, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean2 = node0.isCase();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(boolean2);
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = node1.getCharno();
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-1), int0);
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.equals((Object)node0));
      
      boolean boolean3 = node0.isBlock();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(boolean3);
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Node node2 = node1.getNext();
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.equals((Object)node0));
      assertNull(node2);
      
      Node node3 = Node.newString(42, " _xr[r");
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node3, node0);
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertEquals(42, node3.getType());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWith());
      assertFalse(node3.isReturn());
      assertFalse(node3.isHook());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isAdd());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isOr());
      assertFalse(node3.isVar());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNew());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isCatch());
      assertTrue(node3.isThis());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isCall());
      assertFalse(node3.isFor());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isTry());
      assertFalse(node3.isName());
      assertFalse(node3.isBlock());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWhile());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInc());
      assertFalse(node3.isNE());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFunction());
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      
      Node node4 = null;
      try {
        node4 = new Node(16, node0, (Node) null, (-1), 130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newString("{(");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNotNull(node0);
      
      node0.setLength(0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      boolean boolean0 = node0.isOr();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      boolean boolean1 = node0.isQualifiedName();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean1);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertTrue(boolean1 == boolean0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      node_FileLevelJsDocBuilder0.append("zu");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      node_FileLevelJsDocBuilder0.append("{(");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      int int0 = node0.getLineno();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), int0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      boolean boolean2 = node0.isParamList();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean2);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = node0.getType();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, int1);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(int1 == int0);
      
      boolean boolean3 = node0.isGetElem();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean3);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      Node node1 = new Node(37, node0, node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean4 = node0.hasChild(node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean4);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = node1.isRegExp();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean5);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = Node.newString("{(");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      
      node0.setLength(0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      
      Node node1 = Node.newNumber((-1736.629), 101, 16);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(101, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(413712, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(16, node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getType());
      
      node0.addChildToFront(node1);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(101, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(413712, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(16, node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getType());
      
      boolean boolean0 = node0.isOr();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      boolean boolean1 = node0.isQualifiedName();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean1);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      node_FileLevelJsDocBuilder0.append("zu");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      node_FileLevelJsDocBuilder0.append("{(");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      
      boolean boolean2 = node0.isEmpty();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean2);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      boolean boolean3 = node0.isName();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean3);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      Node node2 = Node.newNumber((-809.9772647), 48, 39);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node2, node1);
      assertFalse(node2.isExprResult());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertEquals(48, node2.getLineno());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertEquals(196647, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAdd());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      
      boolean boolean4 = node2.hasOneChild();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean4);
      assertNotSame(node2, node1);
      assertFalse(node2.isExprResult());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertEquals(48, node2.getLineno());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertEquals(196647, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAdd());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      
      boolean boolean5 = node2.isAnd();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean5);
      assertNotSame(node2, node1);
      assertFalse(node2.isExprResult());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertEquals(48, node2.getLineno());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertEquals(196647, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAdd());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      
      Node node3 = new Node(79);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertEquals(79, node3.getType());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isWith());
      assertFalse(node3.isIf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNull());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCall());
      assertFalse(node3.isVoid());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      
      Node node4 = new Node(49, node0, node2, node2, node3);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertEquals(48, node2.getLineno());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertEquals(196647, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAdd());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertEquals(39, node2.getCharno());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertEquals(79, node3.getType());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isWith());
      assertFalse(node3.isIf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDelProp());
      
      node4.addSuppression("com.google.javascript.rhino.Node$SiblingNodeIterable");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node2, node1);
      assertNotSame(node3, node4);
      assertNotSame(node4, node3);
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      node0.getDirectives();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      Node node1 = node0.cloneTree();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      boolean boolean0 = node0.isFor();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      node1.setDirectives(linkedHashSet0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Node node2 = new Node(43, node0, node0, node1);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertEquals(43, node2.getType());
      assertFalse(node2.isContinue());
      assertTrue(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isCast());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      
      node1.getAncestors();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      double double0 = node1.getDouble();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals((-657.4206764), double0, 0.01);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      node1.setSourceEncodedPositionForTree(51);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(51, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(51, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      node1.getQualifiedName();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(51, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(51, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      String string0 = node0.toString(false, false, false);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals("NUMBER -657.4206764", string0);
      assertNotSame(node0, node1);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      Node node3 = node1.cloneNode();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals(51, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(51, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSetterDef());
      assertEquals(0, node3.getLineno());
      assertEquals(51, node3.getCharno());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNew());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isName());
      assertFalse(node3.isIf());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNE());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isDo());
      assertEquals(51, node3.getSourcePosition());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isBlock());
      assertFalse(node3.isLabel());
      assertEquals(39, node3.getType());
      assertFalse(node3.isTry());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isWith());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isReturn());
      assertTrue(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isCast());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isDebugger());
      
      double double1 = node1.getDouble();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals((-657.4206764), double1, 0.01);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      
      node1.checkTreeEqualsImpl(node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      
      Node node4 = null;
      try {
        node4 = new Node(8287, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newString((-2639), " _xr[r", 4745, 4745);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(4095, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertEquals(4745, node0.getLineno());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCast();
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(boolean0);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(4095, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertEquals(4745, node0.getLineno());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      
      Node node1 = Node.newNumber(0.0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean1 = node1.mayMutateArguments();
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertTrue(boolean1);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = node1.isEquivalentToShallow(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(boolean2);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(4095, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertEquals(4745, node0.getLineno());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("Object#Element", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertNotNull(templateType0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int int0 = (-185);
      Node node0 = new Node((-185));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals((-185), node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertNotNull(node0);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals((-185), node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertNull(set0);
      
      Node node1 = new Node(1090, node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals((-185), node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertEquals(1090, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node1.addSuppression("com.google.javascript.rhino.Node$StringNode");
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals((-185), node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertEquals(1090, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      Node node2 = null;
      try {
        node2 = new Node(4095, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isFunction();
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags3.valueOf());
      assertEquals(23, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags6);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setReturnsTainted();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags7.valueOf());
      assertFalse(node_SideEffectFlags7.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags7);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags4.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags3.valueOf());
      assertEquals(7, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags8);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags5.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags9);
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags1.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertNotNull(node_SideEffectFlags10);
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags10.valueOf());
      assertFalse(node_SideEffectFlags10.areAllFlagsSet());
      assertFalse(node_SideEffectFlags11.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags11.valueOf());
      assertNotNull(node_SideEffectFlags11);
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags10.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags10.valueOf());
      assertFalse(node_SideEffectFlags10.areAllFlagsSet());
      assertFalse(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags12.valueOf());
      assertNotNull(node_SideEffectFlags12);
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags4.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags13.valueOf());
      assertTrue(node_SideEffectFlags13.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags13);
      
      Node node1 = Node.newString(100, "l");
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertTrue(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(100, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node.SideEffectFlags node_SideEffectFlags14 = node_SideEffectFlags9.setThrows();
      assertSame(node_SideEffectFlags14, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags13);
      assertTrue(node_SideEffectFlags14.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags14.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags14);
      
      Node.SideEffectFlags node_SideEffectFlags15 = node_SideEffectFlags5.setMutatesGlobalState();
      assertSame(node_SideEffectFlags15, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags14);
      assertTrue(node_SideEffectFlags15.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags15.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags15);
      
      Node.SideEffectFlags node_SideEffectFlags16 = node_SideEffectFlags9.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags13);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags16.valueOf());
      assertFalse(node_SideEffectFlags16.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags9.valueOf());
      assertNotNull(node_SideEffectFlags16);
      
      Node.SideEffectFlags node_SideEffectFlags17 = node_SideEffectFlags3.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags17.valueOf());
      assertTrue(node_SideEffectFlags17.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags17);
      
      boolean boolean1 = node0.isEquivalentToTyped(node1);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean1);
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertTrue(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(100, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags18 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags18, node_SideEffectFlags11);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags18.valueOf());
      assertFalse(node_SideEffectFlags18.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags18);
      
      Node.SideEffectFlags node_SideEffectFlags19 = node_SideEffectFlags6.setMutatesGlobalState();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags19, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags12);
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags19.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags19.valueOf());
      assertEquals(24, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags6.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags19);
      
      InputId inputId0 = new InputId("$'y@c*5cH2Fs?Ywn[P3");
      assertNotNull(inputId0);
      
      node0.setInputId(inputId0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.equals((Object)node1));
      
      Node.SideEffectFlags node_SideEffectFlags20 = node_SideEffectFlags2.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags20);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags20);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags20);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags18);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags19);
      assertSame(node_SideEffectFlags20, node_SideEffectFlags7);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags20.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags20.valueOf());
      assertNotNull(node_SideEffectFlags20);
      
      int int0 = node1.getSideEffectFlags();
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, int0);
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertTrue(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals(100, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.equals((Object)node0));
      
      Node node2 = new Node((-165), node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAdd());
      assertEquals((-165), node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isString());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(1053);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertNotNull(node0);
      
      Node node1 = node0.cloneTree();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertEquals(1053, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertEquals(1053, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIf());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertEquals(1053, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNull(staticSourceFile0);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newString((-2639), " _xr[r", 4749, 4749);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertEquals(19455999, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(4749, node0.getLineno());
      assertFalse(node0.isWhile());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCast();
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(boolean0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertEquals(19455999, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(4749, node0.getLineno());
      assertFalse(node0.isWhile());
      
      Node node1 = Node.newNumber(0.0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertTrue(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean1 = node0.hasChild(node1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean1);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertEquals(19455999, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(4749, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertTrue(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(40, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(47, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(43, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(43, node_SideEffectFlags1.valueOf());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags0.valueOf());
      assertEquals(7, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags6);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags7);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags8.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags8);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags9.valueOf());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags9);
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags4.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertNotNull(node_SideEffectFlags10);
      
      Node node2 = Node.newString(47, " _xr[r");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node2, node0);
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertTrue(node2.isRegExp());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertEquals(47, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags4.setThrows();
      assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags11.valueOf());
      assertTrue(node_SideEffectFlags11.areAllFlagsSet());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags11);
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags10.setMutatesGlobalState();
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertTrue(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags12.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertNotNull(node_SideEffectFlags12);
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags2.clearAllFlags();
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertFalse(node_SideEffectFlags13.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags13.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags13);
      
      Node.SideEffectFlags node_SideEffectFlags14 = node_SideEffectFlags12.setAllFlags();
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags13);
      assertTrue(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags12.valueOf());
      assertTrue(node_SideEffectFlags14.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags14.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertNotNull(node_SideEffectFlags14);
      
      boolean boolean2 = node1.isEquivalentToTyped(node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean2);
      assertNotSame(node0, node2);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertEquals(19455999, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isTypeOf());
      assertEquals(4749, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertTrue(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags15 = node_SideEffectFlags0.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags15.valueOf());
      assertFalse(node_SideEffectFlags15.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags15);
      
      Node.SideEffectFlags node_SideEffectFlags16 = node_SideEffectFlags0.setMutatesGlobalState();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertEquals(24, node_SideEffectFlags16.valueOf());
      assertFalse(node_SideEffectFlags16.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags16);
      
      InputId inputId0 = null;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNotNull(jSDocInfo0);
      
      Node node3 = jSDocInfo0.getAssociatedNode();
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(node3);
      
      Node node4 = null;
      try {
        node4 = new Node(154, node2, node0, (Node) null, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = Node.newString("{(");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      node0.setLength(0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      boolean boolean0 = node0.isOr();
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      boolean boolean1 = node0.isQualifiedName();
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean1);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      node_FileLevelJsDocBuilder0.append("zu");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      node_FileLevelJsDocBuilder0.append("{(");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      
      boolean boolean2 = node0.isEmpty();
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean2);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      boolean boolean3 = node0.isName();
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean3);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      Node node1 = Node.newNumber((-809.9772647), 48, 39);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertTrue(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      
      boolean boolean4 = node1.hasOneChild();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean4);
      assertTrue(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      
      boolean boolean5 = node1.isAnd();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean5);
      assertTrue(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      
      Node node2 = new Node(79);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCatch());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertEquals(79, node2.getType());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      
      Node node3 = new Node(49, node0, node1, node1, node2);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCatch());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertEquals(79, node2.getType());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFalse());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertEquals(49, node3.getType());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAssign());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isReturn());
      assertEquals(3, node3.getChildCount());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNull());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isContinue());
      assertTrue(node3.isThrow());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isCatch());
      assertFalse(node3.isThis());
      assertFalse(node3.isWith());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      
      node3.addSuppression("com.google.javascript.rhino.Node$SiblingNodeIterable");
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node2, node3);
      assertNotSame(node3, node2);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCatch());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertEquals(79, node2.getType());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString(132, "no nexte sibling.");
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isDo();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(boolean0);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("no nexte sibling."));
      
      boolean boolean1 = node0.isScript();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertTrue(boolean1);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1 == boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("no nexte sibling."));
      
      Node node1 = new Node(40, node0, node0, 30, 8);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertEquals(30, node1.getLineno());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(122888, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean2 = node1.isEquivalentToShallow(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean2);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertEquals(30, node1.getLineno());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(122888, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = node0.isDebugger();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(boolean3);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      Node node2 = node0.cloneTree();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertEquals(132, node2.getType());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isFalse());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAnd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isFunction();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      
      boolean boolean1 = node0.isIn();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean1);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = node0.hasChildren();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean2);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = node0.isScript();
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean3);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Node node1 = new Node(54, node0, 435, 38);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(38, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isExprResult());
      assertEquals(54, node1.getType());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals(435, node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(1781798, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = null;
      try {
        node2 = new Node(47, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isBreak();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = new Node((-665), node0, node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertEquals((-665), node1.getType());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      nodeArray0[5] = node1;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
      assertNull(templatizedType0);
      
      int int0 = 0;
      node1.setSourceEncodedPositionForTree((-665));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertEquals((-665), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertEquals(3431, node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals(1048575, node0.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals((-665), node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertEquals(1048575, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertEquals(3431, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertEquals((-665), node1.getType());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      Node node2 = null;
      try {
        node2 = new Node(4095, node0, (-1270), 1175);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newString("{(");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertNotNull(node0);
      
      node0.setLength(40);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      boolean boolean0 = node0.isOr();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      boolean boolean1 = node0.isQualifiedName();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertTrue(boolean1 == boolean0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      node_FileLevelJsDocBuilder0.append("zu");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      node_FileLevelJsDocBuilder0.append("{(");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertNotNull(node_SideEffectFlags5);
      
      boolean boolean2 = node0.isEmpty();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean2);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = node0.isName();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean3);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Node node1 = Node.newNumber((-809.9772647), 48, 39);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(39, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean4 = node1.hasOneChild();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean4);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(39, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = node1.isAnd();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean5);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(39, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node_AncestorIterable0);
      
      Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.equals((Object)node1));
      assertNotNull(iterator0);
      
      boolean boolean6 = node1.isIn();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean6);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(39, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      
      boolean boolean7 = node1.isScript();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean7);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(39, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      
      Node node2 = node1.getNext();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(39, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(196647, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(39, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertNull(node2);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node_FileLevelJsDocBuilder1, node_FileLevelJsDocBuilder0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
      assertNotNull(node_FileLevelJsDocBuilder1);
      
      Node node3 = node0.getNext();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.equals((Object)node1));
      assertNull(node3);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newString("{(");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node0.setLength(0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      boolean boolean0 = node0.isOr();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      boolean boolean1 = node0.isQualifiedName();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_FileLevelJsDocBuilder0.append("zu");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_FileLevelJsDocBuilder0.append("]yX8<$WyUxU%8");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_FileLevelJsDocBuilder0.append("{(");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_AncestorIterable0.spliterator();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      node_AncestorIterable0.iterator();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      boolean boolean2 = node0.isIn();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean2);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      boolean boolean3 = node0.hasChildren();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean3);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      boolean boolean4 = node0.isScript();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean4);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      
      Node node1 = new Node(32, node0, 155, 40);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isParamList());
      assertEquals(155, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertEquals(634920, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(32, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertEquals(40, node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      
      node1.getNext();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isParamList());
      assertEquals(155, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertEquals(634920, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(32, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertEquals(40, node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node_FileLevelJsDocBuilder1, node_FileLevelJsDocBuilder0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isParamList());
      assertEquals(155, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertEquals(634920, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(32, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertEquals(40, node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      
      node1.getNext();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      int int0 = 515;
      String string0 = "a8?},6=W08|xg.";
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isBreak();
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(boolean0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      boolean boolean1 = node0.isEquivalentToShallow(node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertTrue(boolean1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(515, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(boolean1 == boolean0);
      
      Node node1 = null;
      try {
        node1 = new Node((-665), nodeArray0[2], node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      node0.setSourceEncodedPosition(301);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      
      Node node1 = Node.newNumber((-787.004217503916));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node0);
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertNotSame(node0, node1);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.equals((Object)node1));
      assertNull(set0);
      
      boolean boolean0 = node0.isStringKey();
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(301, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(301, node0.getCharno());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.equals((Object)node1));
      
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-1265), (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      int int0 = 3017;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("Object#Element", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertNotNull(templateType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("&=-s)", (Node) null, templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("Object#Element", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertNotNull(enumType0);
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("Object#Element", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isStringValueType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isNumberValueType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isVoidType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isConstructor());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isTemplatizedType());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isAllType());
      assertNotNull(enumType1);
      
      jSTypeArray0[0] = (JSType) enumType1;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(1, jSTypeArray0.length);
      assertNotNull(node0);
      
      Node node1 = new Node(1717, node0, node0);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertEquals(1717, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, jSTypeArray0.length);
      assertNotNull(node1);
      
      Node node2 = Node.newNumber(691.75449794, (-1126), 32);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isVar());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertEquals(39, node2.getType());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNotNull(jSDocInfo0);
      
      Node node0 = jSDocInfo0.getAssociatedNode();
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(node0);
      
      Node node1 = null;
      try {
        node1 = new Node(761, (Node) null, (Node) null, (Node) null, 46, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals(83, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node0);
      
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      assertEquals(0, immutableList0.size());
      assertNotNull(immutableList0);
      
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node1, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertEquals(83, node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = node1.getLastSibling();
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertEquals(83, node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCatch());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isNew());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDo());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = new Node(135);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = new Node(15, 56, 54);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(229430, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = new Node(119, node1, node1, node0, node1, 1073, 2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(229430, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(1073, node2.getLineno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertEquals(119, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertTrue(node2.isWith());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertEquals(2, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertEquals(4395010, node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      Node node3 = node0.useSourceInfoFromForTree(node2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertSame(node3, node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertEquals(4395010, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertEquals(1073, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(229430, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(1073, node2.getLineno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertEquals(119, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertTrue(node2.isWith());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertEquals(2, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertEquals(4395010, node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(135, node3.getType());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertEquals(1073, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNE());
      assertEquals(4395010, node3.getSourcePosition());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isHook());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isString());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVar());
      assertEquals(2, node3.getCharno());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      
      Node node4 = node3.getLastSibling();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node4);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertSame(node1, node4);
      assertNotSame(node2, node4);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertSame(node3, node0);
      assertSame(node4, node1);
      assertNotSame(node4, node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertEquals(4395010, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertEquals(1073, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(229430, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(1073, node2.getLineno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertEquals(119, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertTrue(node2.isWith());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertEquals(2, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertEquals(4395010, node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(135, node3.getType());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertEquals(1073, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNE());
      assertEquals(4395010, node3.getSourcePosition());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isHook());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isString());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVar());
      assertEquals(2, node3.getCharno());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isNumber());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNot());
      assertEquals(56, node4.getLineno());
      assertFalse(node4.isAnd());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isReturn());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isScript());
      assertFalse(node4.isAssign());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isBlock());
      assertFalse(node4.isWhile());
      assertFalse(node4.isVar());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isNull());
      assertFalse(node4.isBreak());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isOr());
      assertFalse(node4.isLabel());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isEmpty());
      assertEquals(229430, node4.getSourcePosition());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isNE());
      assertFalse(node4.isCatch());
      assertFalse(node4.isString());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isIn());
      assertEquals(15, node4.getType());
      assertFalse(node4.isContinue());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertEquals(54, node4.getCharno());
      assertFalse(node4.isThrow());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertNotNull(node4);
      
      node3.putProp(46, (Object) null);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node4);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertSame(node1, node4);
      assertNotSame(node2, node4);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertSame(node3, node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertEquals(4395010, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertEquals(1073, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(229430, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(1073, node2.getLineno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertEquals(119, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertTrue(node2.isWith());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertEquals(2, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertEquals(4395010, node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWhile());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(135, node3.getType());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertEquals(1073, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNE());
      assertEquals(4395010, node3.getSourcePosition());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isHook());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isString());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVar());
      assertEquals(2, node3.getCharno());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      
      boolean boolean0 = node2.isDebugger();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean0);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node4);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertSame(node1, node4);
      assertNotSame(node2, node4);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertEquals(4395010, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertEquals(1073, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(229430, node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(1073, node2.getLineno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertEquals(119, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertTrue(node2.isWith());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertEquals(2, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertEquals(4395010, node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      node0.putIntProp((-314), 52);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node4);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertEquals(4395010, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertEquals(135, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertEquals(1073, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      
      Node node5 = Node.newNumber(362.533331);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(node5.isNE());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isIf());
      assertTrue(node5.isNumber());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isString());
      assertFalse(node5.isIn());
      assertFalse(node5.isFunction());
      assertFalse(node5.isDebugger());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isInc());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isParamList());
      assertFalse(node5.isThis());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isScript());
      assertFalse(node5.isBlock());
      assertFalse(node5.isTry());
      assertFalse(node5.isCase());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isFor());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isHook());
      assertEquals(39, node5.getType());
      assertFalse(node5.isRegExp());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabelName());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isOr());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isDo());
      assertFalse(node5.isContinue());
      assertFalse(node5.isVar());
      assertFalse(node5.isCast());
      assertFalse(node5.isLabel());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isNull());
      assertFalse(node5.isBreak());
      assertFalse(node5.isName());
      assertFalse(node5.isAnd());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isTrue());
      assertFalse(node5.isVoid());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isWhile());
      assertFalse(node5.isCall());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isReturn());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isComma());
      assertFalse(node5.isDec());
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertNotNull(node5);
      
      try { 
        node2.setDouble(57);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WITH 1073 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newString("no next sibling.", 132, 0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertEquals(540672, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertEquals(132, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((-1.0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean0 = node0.isFromExterns();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertEquals(540672, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertEquals(132, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.equals((Object)node1));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ERROR_FUNCTION_TYPE";
      Node node2 = new Node(57, node0, node1, node0, node1);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertEquals(540672, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertEquals(132, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isInc());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isTry());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertEquals(57, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isReturn());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "],d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      int int0 = 1204;
      int int1 = 309;
      Node[] nodeArray0 = new Node[4];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node0);
      
      Node node1 = new Node(86, node0, node0, node0, 32, 42);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals(32, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isContinue());
      assertEquals(42, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertEquals(131114, node1.getSourcePosition());
      assertEquals(86, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isAssign());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node1);
      
      Node node2 = new Node(0, node1, node1);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals(32, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isContinue());
      assertEquals(42, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertEquals(131114, node1.getSourcePosition());
      assertEquals(86, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isAssign());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node2.isName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isNull());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getType());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node2);
      
      nodeArray0[0] = node2;
      Node node3 = null;
      try {
        node3 = new Node(44, node0, node2, node2, 56, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      int int0 = 515;
      Node node0 = Node.newString(515, "a8?},6=W08|xg.");
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertEquals(515, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isBreak();
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertEquals(515, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      
      int int1 = 0;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = new Node((-665), node0, node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertEquals(515, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertEquals((-665), node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      nodeArray0[5] = node1;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
      assertNull(templatizedType0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("a8?},6=W08|xg.", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = "synthetic";
      Node node0 = Node.newString("synthetic");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newString((-2639), " _xr[r", 4745, 4745);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isCast();
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      
      Node node1 = Node.newNumber(0.0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      boolean boolean1 = node0.hasChild(node1);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      assertEquals(40, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(47, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(43, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(43, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertNotNull(node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setThrows();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertEquals(7, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(7, node_SideEffectFlags2.valueOf());
      assertEquals(7, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags5);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags6);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags7);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags8.valueOf());
      assertNotNull(node_SideEffectFlags8);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags1.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags9.valueOf());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags9);
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags4.setAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags10);
      
      Node node2 = Node.newString(47, " _xr[r");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node2, node0);
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(47, node2.getType());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isName());
      assertTrue(node2.isRegExp());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags4.setThrows();
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags11.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags11.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags11);
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags10.setMutatesGlobalState();
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags12.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags12);
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags2.clearAllFlags();
      assertSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertEquals(31, node_SideEffectFlags13.valueOf());
      assertFalse(node_SideEffectFlags13.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags13);
      
      Node.SideEffectFlags node_SideEffectFlags14 = node_SideEffectFlags12.setAllFlags();
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags12.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags12.valueOf());
      assertEquals(0, node_SideEffectFlags14.valueOf());
      assertTrue(node_SideEffectFlags14.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags14);
      
      boolean boolean2 = node1.isEquivalentToTyped(node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean2);
      assertNotSame(node0, node2);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertEquals(19439615, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(4745, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-2639), node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags15 = node_SideEffectFlags0.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags12);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags15.valueOf());
      assertFalse(node_SideEffectFlags15.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags15);
      
      Node.SideEffectFlags node_SideEffectFlags16 = node_SideEffectFlags0.setMutatesGlobalState();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags10);
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags16.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags16.valueOf());
      assertNotNull(node_SideEffectFlags16);
      
      node2.setInputId((InputId) null);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node2, node0);
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(47, node2.getType());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isName());
      assertTrue(node2.isRegExp());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      Node.SideEffectFlags node_SideEffectFlags17 = node_SideEffectFlags8.clearAllFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags17, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags17);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertFalse(node_SideEffectFlags17.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags17.valueOf());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags8.valueOf());
      assertNotNull(node_SideEffectFlags17);
      
      int int0 = node1.getSideEffectFlags();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, int0);
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      int int0 = 776;
      int int1 = 56;
      // Undeclared exception!
      try { 
        Node.newString(776, (String) null, 0, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNotNull(jSDocInfo0);
      
      Node node0 = jSDocInfo0.getAssociatedNode();
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(node0);
      
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(16, (Node) null, (Node) null, (Node) null, (Node) null, 132, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = Node.newString("{'e+> $]:");
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertNotNull(node0);
      
      node0.setSourceEncodedPosition((-323));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-323), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(1048575, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertEquals(3773, node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      
      int int0 = 26;
      Node node1 = Node.newString("");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node0);
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = new Node(39, node0, node0, node0, node1, 12, 3682);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-323), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(1048575, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertEquals(3773, node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertEquals(12, node2.getLineno());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertEquals(52834, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isSwitch());
      assertEquals(3682, node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIf());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      Node node3 = new Node(309, 54, 125);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node3.isNew());
      assertFalse(node3.isBlock());
      assertEquals(125, node3.getCharno());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCall());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isScript());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertEquals(221309, node3.getSourcePosition());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isIf());
      assertFalse(node3.isThis());
      assertFalse(node3.isFor());
      assertFalse(node3.isNE());
      assertFalse(node3.isWith());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertEquals(54, node3.getLineno());
      assertEquals(309, node3.getType());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      
      Node node4 = null;
      try {
        node4 = new Node((-758), node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      node0.setDouble(0.0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      
      Object object0 = node0.getProp((-4133));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertNull(object0);
      
      boolean boolean0 = node0.isGetterDef();
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      
      InputId inputId0 = node0.getInputId();
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertNull(inputId0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(155, (Node[]) null, 155, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = "    ";
      Node node0 = Node.newString("    ", 0, 0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertNotNull(node0);
      
      Node node1 = new Node(0, node0, node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVar());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node1.setIsSyntheticBlock(false);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVar());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      node0.addChildrenToBack(node1);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVar());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      Node node2 = node0.cloneNode();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      Node node3 = new Node(0, node2, 56, 50);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertEquals(229426, node3.getSourcePosition());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getType());
      assertFalse(node3.isTry());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isString());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertEquals(50, node3.getCharno());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isBlock());
      assertEquals(56, node3.getLineno());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isWhile());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      
      node2.addChildToBack(node3);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getSourcePosition());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNE());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertEquals(229426, node3.getSourcePosition());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getType());
      assertFalse(node3.isTry());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isString());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertEquals(50, node3.getCharno());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isBlock());
      assertEquals(56, node3.getLineno());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isWhile());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      
      // Undeclared exception!
      try { 
        node1.getChildBefore(node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      Node node0 = Node.newString("");
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = new Node(48, node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertEquals(48, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = node1.clonePropsFrom(node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertEquals(48, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThis());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertEquals(48, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isReturn());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      boolean boolean0 = node1.isOnlyModifiesThisCall();
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean0);
      assertSame(node1, node2);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertEquals(48, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "VALUE_MATCH";
      Node node0 = Node.newString("VALUE_MATCH");
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertNotNull(node0);
      
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString(135, "vf");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertEquals(135, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      int int0 = node0.getSideEffectFlags();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(0, int0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertEquals(135, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertEquals(83, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node1);
      
      Node node2 = node0.useSourceInfoFrom(node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertEquals(135, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertEquals(83, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertEquals(135, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isWith());
      assertFalse(node2.isCast());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDo());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = "E2s0^Mw $\\s|?-\"";
      Node node0 = Node.newString("E2s0^Mw $s|?-\"");
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertNotNull(node0);
      
      boolean boolean0 = true;
      node0.setIsSyntheticBlock(true);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      boolean boolean1 = node0.isLabel();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(boolean1);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      
      node0.setDirectives(linkedHashSet0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      Node node1 = new Node(38, node0, node0, node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals(38, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertTrue(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node_AncestorIterable0);
      
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString(1053, "KP `g|Q");
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertNotNull(node0);
      
      Node node1 = node0.cloneTree();
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1053, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1053, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isScript());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(1053, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(1053, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNull(staticSourceFile0);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(4194304);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertEquals(4194304, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertNotNull(node0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertEquals(4194304, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      boolean boolean0 = node0.isLocalResultCall();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean0);
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertEquals(4194304, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      
      Node node1 = Node.newString(29, "#");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(29, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newString((-832), "Bzx@T;Az", (-832), (-832));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertNotNull(node0);
      
      int int0 = node0.getIntProp(617);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, int0);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      node0.putBooleanProp(617, true);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertNull(staticSourceFile0);
      
      node0.setStaticSourceFile((StaticSourceFile) null);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      boolean boolean0 = node0.isHook();
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean0);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node((-971), nodeArray0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertEquals((-971), node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, nodeArray0.length);
      assertNotNull(node1);
      
      Node node2 = node1.getChildBefore(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-832), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertEquals((-971), node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, nodeArray0.length);
      assertNull(node2);
      
      Node node3 = new Node(526, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertEquals((-971), node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isHook());
      assertFalse(node3.isInc());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isIn());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTry());
      assertFalse(node3.isLabel());
      assertEquals(526, node3.getType());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isCast());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNot());
      assertFalse(node3.isString());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(1, nodeArray0.length);
      assertNotNull(node3);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString((-1025), ".#kvj)6[+y=9TqOn");
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1025), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertNotNull(node0);
      
      String string0 = node0.getString();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(".#kvj)6[+y=9TqOn", string0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1025), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertNotNull(string0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1511);
      assertEquals(1511, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags0);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(1519, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Object object0 = node0.getProp(1511);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1025), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertNull(object0);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(1519, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1025), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertNull(jSDocInfo0);
      
      Node node1 = Node.newString("?cLAxSl", 2, 2496);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node1, node0);
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals(2496, node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals(10688, node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node1.setLineno(114);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node1, node0);
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals(2496, node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertEquals(469440, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertEquals(114, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      
      ImmutableList<String> immutableList0 = ImmutableList.of();
      assertEquals(0, immutableList0.size());
      assertNotNull(immutableList0);
      assertFalse(immutableList0.contains(string0));
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(1519, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1519, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1025
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber((-657.4206764));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertNotNull(node0);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(set0);
      
      Node node1 = node0.cloneTree();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssign());
      assertEquals(39, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isScript());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertTrue(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      String string0 = "com.google.javascript.rhino.jstype.EnumElementType";
      node0.setDirectives((Set<String>) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node1);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.equals((Object)node1));
      
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.EnumElementType");
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isFunction();
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(boolean0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      
      node0.setType((-255));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-255), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertNotNull(node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertNotNull(node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertNotNull(node_SideEffectFlags2);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node(0, (-2335), (-2335));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getType());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      Node node2 = node1.cloneNode();
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isParamList());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      
      boolean boolean0 = true;
      Node node3 = null;
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(0, jSTypeNativeArray0.length);
      assertNotNull(noType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType((JSType) noType0, true, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(297, (-1339), 297);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertEquals(297, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertNotNull(node0);
      
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, nodeArray0.length);
      assertNotNull(node1);
      
      Node node2 = new Node((-1987), node1, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertEquals((-1987), node2.getType());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(1, nodeArray0.length);
      assertNotNull(node2);
      
      Node node3 = null;
      try {
        node3 = new Node(0, node1, node0, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString("{'e+> $]:");
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertNotNull(node0);
      
      Node node1 = Node.newString("{'e+> $]:", (-323), 47);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node0);
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node1.setLineno((-2922));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node0);
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.equals((Object)node0));
      
      Node node2 = new Node(4, node0, node1, 49, 115);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals(115, node2.getCharno());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertEquals(4, node2.getType());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertEquals(49, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertEquals(200819, node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertTrue(node2.isReturn());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCall());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      
      node2.type = 2172;
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals(115, node2.getCharno());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertEquals(2172, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertEquals(49, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertEquals(200819, node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCall());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      jSTypeRegistry0.createTemplateType("y_]7e.F,kYrV|");
      int int0 = 2369;
      Vector<TemplateType> vector0 = new Vector<TemplateType>(54);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterable<? extends TemplateType>) vector0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType("", node0, immutableList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0, 65535, 65535);
      String string0 = "R,Q#l";
      Node node1 = Node.newString(0, "R,Q#l");
      Node.newString("com.google.javascript.rhino.jstype.Property");
      node0.copyInformationFromForTree(node1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node1.toString(true, true, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      int int0 = 14;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(14, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newNumber((-187.074892496418));
      Node node1 = new Node(0);
      node0.isEquivalentToShallow(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(0, "Object#Element", 70, 0);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType((String) null, node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0, (-3309), (-2221));
      nodeArray0[0] = node0;
      Node node1 = new Node(2007, node0, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = new Node((-898), node1);
      nodeArray0[2] = node2;
      node1.putBooleanProp(2384, true);
      Node node3 = null;
      try {
        node3 = new Node((-3309), nodeArray0, (-403), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(1513);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, true, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }
}
