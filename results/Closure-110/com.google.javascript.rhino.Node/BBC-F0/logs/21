* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 18894
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 47926328
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 15:32:47.566 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:33:17.591 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch in context: com.google.javascript.rhino.Node:getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;
[MASTER] 15:33:25.521 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;
[MASTER] 15:33:25.537 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;
[MASTER] 15:34:56.439 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 316s and 15 generations, 10475 statements, best individual has fitness: 4742.0
[MASTER] 15:38:18.681 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 33 seconds more than allowed.
* Minimizing test suite
[MASTER] 15:39:26.690 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 853
* Number of covered goals: 673
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 63%
* Total number of goals: 714
* Number of covered goals: 450
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 56
* Number of covered goals: 56
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 62%
* Total number of goals: 530
* Number of covered goals: 331
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 4536
* Number of covered goals: 963
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 81%
* Total number of goals: 233
* Number of covered goals: 188
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 75%
* Total number of goals: 233
* Number of covered goals: 175
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 54%
* Total number of goals: 714
* Number of covered goals: 389
* Generated 195 tests with total length 3224
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:40:49.436 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6943166666666667% of time used, but only 7/195 tests minimized), falling back to using all assertions
[MASTER] 15:41:08.005 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 3%
* Compiling and checking tests
[MASTER] 15:41:27.520 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 19 seconds more than allowed.
[MASTER] 15:41:40.294 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_10_1605714098821/com/google/javascript/rhino/Node_10_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_10_1605714098821/com/google/javascript/rhino/Node_10_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:40.307 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:40.307 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:40.313 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 298
[MASTER] 15:41:40.357 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_10_1605714098821/com/google/javascript/rhino/Node_10_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:38 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_10_tmp__ESTest extends Node_10_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(47.27582, 0, 0);
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
24:       assertEquals(39, Node.EMPTY_BLOCK);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(4095, Node.COLUMN_MASK);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(15, Node.NO_SIDE_EFFECTS);
31:       assertEquals(53, Node.INPUT_ID);
32:       assertEquals(49, Node.DIRECT_EVAL);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(55, Node.INFERRED_FUNCTION);
35:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
36:       assertEquals(57, Node.REFLECTED_OBJECT);
37:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(32, Node.INCRDECR_PROP);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(12, Node.COLUMN_BITS);
49:       assertEquals(30, Node.VAR_ARGS_NAME);
50:       assertEquals(43, Node.IS_CONSTANT_NAME);
51:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
52:       assertEquals(54, Node.SLASH_V);
53:       assertEquals(1, Node.DECR_FLAG);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(46, Node.IS_NAMESPACE);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
58:       assertNotNull(node0);
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isComma());
66:       assertTrue(node0.isNumber());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isObjectLit());
72:       assertFalse(node0.isGetterDef());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isString());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isFunction());
78:       assertFalse(node0.isTry());
79:       assertEquals(0, node0.getCharno());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isCatch());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isNE());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isSetterDef());
89:       assertFalse(node0.isInc());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isAdd());
92:       assertFalse(node0.isBlock());
93:       assertFalse(node0.isWhile());
94:       assertFalse(node0.isVar());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isStringKey());
97:       assertFalse(node0.isContinue());
98:       assertEquals(39, node0.getType());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isCall());
101:       assertEquals(0, node0.getLineno());
102:       assertFalse(node0.hasChildren());
103:       assertFalse(node0.isParamList());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.hasOneChild());
106:       assertFalse(node0.isVoid());
107:       assertFalse(node0.isDefaultCase());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isGetElem());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isDec());
112:       assertFalse(node0.isAssign());
113:       assertFalse(node0.isLabelName());
114:       assertFalse(node0.isArrayLit());
115:       assertFalse(node0.isTypeOf());
116:       assertFalse(node0.isExprResult());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.isOr());
120:       assertEquals(0, node0.getChildCount());
121:       assertFalse(node0.isNull());
122:       assertEquals(0, node0.getSourcePosition());
123:       assertFalse(node0.isDo());
124:       assertFalse(node0.isEmpty());
125:       
126:       node0.type = 0;
127:       assertEquals(0, node0.getType());
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isSwitch());
130:       assertFalse(node0.isThrow());
131:       assertFalse(node0.isFalse());
132:       assertFalse(node0.isBreak());
133:       assertFalse(node0.isGetProp());
134:       assertFalse(node0.isComma());
135:       assertFalse(node0.isAnd());
136:       assertFalse(node0.isThis());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isCase());
139:       assertFalse(node0.isObjectLit());
140:       assertFalse(node0.isGetterDef());
141:       assertFalse(node0.isNot());
142:       assertFalse(node0.isString());
143:       assertFalse(node0.isScript());
144:       assertFalse(node0.isDebugger());
145:       assertFalse(node0.isFunction());
146:       assertFalse(node0.isTry());
147:       assertEquals(0, node0.getCharno());
148:       assertFalse(node0.isWith());
149:       assertFalse(node0.isRegExp());
150:       assertFalse(node0.isInstanceOf());
151:       assertFalse(node0.isCast());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isIf());
154:       assertFalse(node0.isNE());
155:       assertFalse(node0.isIn());
156:       assertFalse(node0.isSetterDef());
157:       assertFalse(node0.isInc());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isAdd());
160:       assertFalse(node0.isBlock());
161:       assertFalse(node0.isWhile());
162:       assertFalse(node0.isVar());
163:       assertFalse(node0.isName());
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isContinue());
166:       assertFalse(node0.hasMoreThanOneChild());
167:       assertFalse(node0.isCall());
168:       assertEquals(0, node0.getLineno());
169:       assertFalse(node0.hasChildren());
170:       assertFalse(node0.isParamList());
171:       assertFalse(node0.isReturn());
172:       assertFalse(node0.isNumber());
173:       assertFalse(node0.hasOneChild());
174:       assertFalse(node0.isVoid());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isTrue());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isAssign());
181:       assertFalse(node0.isLabelName());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isExprResult());
185:       assertFalse(node0.isAssignAdd());
186:       assertFalse(node0.isLabel());
187:       assertFalse(node0.isOr());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isNull());
190:       assertEquals(0, node0.getSourcePosition());
191:       assertFalse(node0.isDo());
192:       assertFalse(node0.isEmpty());
193:       
194:       Iterable<Node> iterable0 = node0.children();
195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
197:       assertEquals(39, Node.EMPTY_BLOCK);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(40, Node.ORIGINALNAME_PROP);
201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(57, Node.LAST_PROP);
207:       assertEquals(55, Node.INFERRED_FUNCTION);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(29, Node.JSDOC_INFO_PROP);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(2, Node.POST_FLAG);
215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
216:       assertEquals(37, Node.OPT_ARG_NAME);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(50, Node.FREE_CALL);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       assertNotNull(iterable0);
232:       assertEquals(0, node0.getType());
233:       assertFalse(node0.isHook());
234:       assertFalse(node0.isSwitch());
235:       assertFalse(node0.isThrow());
236:       assertFalse(node0.isFalse());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isGetProp());
239:       assertFalse(node0.isComma());
240:       assertFalse(node0.isAnd());
241:       assertFalse(node0.isThis());
242:       assertFalse(node0.isFor());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isObjectLit());
245:       assertFalse(node0.isGetterDef());
246:       assertFalse(node0.isNot());
247:       assertFalse(node0.isString());
248:       assertFalse(node0.isScript());
249:       assertFalse(node0.isDebugger());
250:       assertFalse(node0.isFunction());
251:       assertFalse(node0.isTry());
252:       assertEquals(0, node0.getCharno());
253:       assertFalse(node0.isWith());
254:       assertFalse(node0.isRegExp());
255:       assertFalse(node0.isInstanceOf());
256:       assertFalse(node0.isCast());
257:       assertFalse(node0.isCatch());
258:       assertFalse(node0.isIf());
259:       assertFalse(node0.isNE());
260:       assertFalse(node0.isIn());
261:       assertFalse(node0.isSetterDef());
262:       assertFalse(node0.isInc());
263:       assertFalse(node0.isNew());
264:       assertFalse(node0.isAdd());
265:       assertFalse(node0.isBlock());
266:       assertFalse(node0.isWhile());
267:       assertFalse(node0.isVar());
268:       assertFalse(node0.isName());
269:       assertFalse(node0.isStringKey());
270:       assertFalse(node0.isContinue());
271:       assertFalse(node0.hasMoreThanOneChild());
272:       assertFalse(node0.isCall());
273:       assertEquals(0, node0.getLineno());
274:       assertFalse(node0.hasChildren());
275:       assertFalse(node0.isParamList());
276:       assertFalse(node0.isReturn());
277:       assertFalse(node0.isNumber());
278:       assertFalse(node0.hasOneChild());
279:       assertFalse(node0.isVoid());
280:       assertFalse(node0.isDefaultCase());
281:       assertFalse(node0.isTrue());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.isDelProp());
284:       assertFalse(node0.isDec());
285:       assertFalse(node0.isAssign());
286:       assertFalse(node0.isLabelName());
287:       assertFalse(node0.isArrayLit());
288:       assertFalse(node0.isTypeOf());
289:       assertFalse(node0.isExprResult());
290:       assertFalse(node0.isAssignAdd());
291:       assertFalse(node0.isLabel());
292:       assertFalse(node0.isOr());
293:       assertEquals(0, node0.getChildCount());
294:       assertFalse(node0.isNull());
295:       assertEquals(0, node0.getSourcePosition());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isEmpty());
298:       assertFalse(iterable0.contains(node0));
299:       
300:       node0.setOptionalArg(false);
301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(36, Node.QUOTED_PROP);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(53, Node.INPUT_ID);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(55, Node.INFERRED_FUNCTION);
314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(29, Node.JSDOC_INFO_PROP);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(8, Node.FLAG_NO_THROWS);
320:       assertEquals(2, Node.POST_FLAG);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(32, Node.INCRDECR_PROP);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(30, Node.VAR_ARGS_NAME);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
334:       assertEquals(46, Node.IS_NAMESPACE);
335:       assertEquals(50, Node.FREE_CALL);
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       assertEquals(0, node0.getType());
338:       assertFalse(node0.isHook());
339:       assertFalse(node0.isSwitch());
340:       assertFalse(node0.isThrow());
341:       assertFalse(node0.isFalse());
342:       assertFalse(node0.isBreak());
343:       assertFalse(node0.isGetProp());
344:       assertFalse(node0.isComma());
345:       assertFalse(node0.isAnd());
346:       assertFalse(node0.isThis());
347:       assertFalse(node0.isFor());
348:       assertFalse(node0.isCase());
349:       assertFalse(node0.isObjectLit());
350:       assertFalse(node0.isGetterDef());
351:       assertFalse(node0.isNot());
352:       assertFalse(node0.isString());
353:       assertFalse(node0.isScript());
354:       assertFalse(node0.isDebugger());
355:       assertFalse(node0.isFunction());
356:       assertFalse(node0.isTry());
357:       assertEquals(0, node0.getCharno());
358:       assertFalse(node0.isWith());
359:       assertFalse(node0.isRegExp());
360:       assertFalse(node0.isInstanceOf());
361:       assertFalse(node0.isCast());
362:       assertFalse(node0.isCatch());
363:       assertFalse(node0.isIf());
364:       assertFalse(node0.isNE());
365:       assertFalse(node0.isIn());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isInc());
368:       assertFalse(node0.isNew());
369:       assertFalse(node0.isAdd());
370:       assertFalse(node0.isBlock());
371:       assertFalse(node0.isWhile());
372:       assertFalse(node0.isVar());
373:       assertFalse(node0.isName());
374:       assertFalse(node0.isStringKey());
375:       assertFalse(node0.isContinue());
376:       assertFalse(node0.hasMoreThanOneChild());
377:       assertFalse(node0.isCall());
378:       assertEquals(0, node0.getLineno());
379:       assertFalse(node0.hasChildren());
380:       assertFalse(node0.isParamList());
381:       assertFalse(node0.isReturn());
382:       assertFalse(node0.isNumber());
383:       assertFalse(node0.hasOneChild());
384:       assertFalse(node0.isVoid());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isTrue());
387:       assertFalse(node0.isGetElem());
388:       assertFalse(node0.isDelProp());
389:       assertFalse(node0.isDec());
390:       assertFalse(node0.isAssign());
391:       assertFalse(node0.isLabelName());
392:       assertFalse(node0.isArrayLit());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isExprResult());
395:       assertFalse(node0.isAssignAdd());
396:       assertFalse(node0.isLabel());
397:       assertFalse(node0.isOr());
398:       assertEquals(0, node0.getChildCount());
399:       assertFalse(node0.isNull());
400:       assertEquals(0, node0.getSourcePosition());
401:       assertFalse(node0.isDo());
402:       assertFalse(node0.isEmpty());
403:       
404:       node0.setVarArgs(true);
405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(48, Node.DIRECTIVES);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(40, Node.ORIGINALNAME_PROP);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(36, Node.QUOTED_PROP);
413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
414:       assertEquals(53, Node.INPUT_ID);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(55, Node.INFERRED_FUNCTION);
418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(8, Node.FLAG_NO_THROWS);
424:       assertEquals(2, Node.POST_FLAG);
425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(56, Node.CHANGE_TIME);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(43, Node.IS_CONSTANT_NAME);
434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
435:       assertEquals(54, Node.SLASH_V);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(46, Node.IS_NAMESPACE);
439:       assertEquals(50, Node.FREE_CALL);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(0, node0.getType());
442:       assertFalse(node0.isHook());
443:       assertFalse(node0.isSwitch());
444:       assertFalse(node0.isThrow());
445:       assertFalse(node0.isFalse());
446:       assertFalse(node0.isBreak());
447:       assertFalse(node0.isGetProp());
448:       assertFalse(node0.isComma());
449:       assertFalse(node0.isAnd());
450:       assertFalse(node0.isThis());
451:       assertFalse(node0.isFor());
452:       assertFalse(node0.isCase());
453:       assertFalse(node0.isObjectLit());
454:       assertFalse(node0.isGetterDef());
455:       assertFalse(node0.isNot());
456:       assertFalse(node0.isString());
457:       assertFalse(node0.isScript());
458:       assertFalse(node0.isDebugger());
459:       assertFalse(node0.isFunction());
460:       assertFalse(node0.isTry());
461:       assertEquals(0, node0.getCharno());
462:       assertFalse(node0.isWith());
463:       assertFalse(node0.isRegExp());
464:       assertFalse(node0.isInstanceOf());
465:       assertFalse(node0.isCast());
466:       assertFalse(node0.isCatch());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isNE());
469:       assertFalse(node0.isIn());
470:       assertFalse(node0.isSetterDef());
471:       assertFalse(node0.isInc());
472:       assertFalse(node0.isNew());
473:       assertFalse(node0.isAdd());
474:       assertFalse(node0.isBlock());
475:       assertFalse(node0.isWhile());
476:       assertFalse(node0.isVar());
477:       assertFalse(node0.isName());
478:       assertFalse(node0.isStringKey());
479:       assertFalse(node0.isContinue());
480:       assertFalse(node0.hasMoreThanOneChild());
481:       assertFalse(node0.isCall());
482:       assertEquals(0, node0.getLineno());
483:       assertFalse(node0.hasChildren());
484:       assertFalse(node0.isParamList());
485:       assertFalse(node0.isReturn());
486:       assertFalse(node0.isNumber());
487:       assertFalse(node0.hasOneChild());
488:       assertFalse(node0.isVoid());
489:       assertFalse(node0.isDefaultCase());
490:       assertFalse(node0.isTrue());
491:       assertFalse(node0.isGetElem());
492:       assertFalse(node0.isDelProp());
493:       assertFalse(node0.isDec());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isLabelName());
496:       assertFalse(node0.isArrayLit());
497:       assertFalse(node0.isTypeOf());
498:       assertFalse(node0.isExprResult());
499:       assertFalse(node0.isAssignAdd());
500:       assertFalse(node0.isLabel());
501:       assertFalse(node0.isOr());
502:       assertEquals(0, node0.getChildCount());
503:       assertFalse(node0.isNull());
504:       assertEquals(0, node0.getSourcePosition());
505:       assertFalse(node0.isDo());
506:       assertFalse(node0.isEmpty());
507:       
508:       Node node1 = Node.newString(0, "A", 8232, 0);
509:       assertEquals(8, Node.FLAG_NO_THROWS);
510:       assertEquals(48, Node.DIRECTIVES);
511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
512:       assertEquals(4095, Node.COLUMN_MASK);
513:       assertEquals(40, Node.ORIGINALNAME_PROP);
514:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
516:       assertEquals(43, Node.IS_CONSTANT_NAME);
517:       assertEquals(54, Node.SLASH_V);
518:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
519:       assertEquals(1, Node.DECR_FLAG);
520:       assertEquals(50, Node.FREE_CALL);
521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
522:       assertEquals(37, Node.OPT_ARG_NAME);
523:       assertEquals(32, Node.INCRDECR_PROP);
524:       assertEquals(2, Node.POST_FLAG);
525:       assertEquals(56, Node.CHANGE_TIME);
526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
527:       assertEquals(12, Node.COLUMN_BITS);
528:       assertEquals(47, Node.IS_DISPATCHER);
529:       assertEquals(46, Node.IS_NAMESPACE);
530:       assertEquals(30, Node.VAR_ARGS_NAME);
531:       assertEquals(49, Node.DIRECT_EVAL);
532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(52, Node.LENGTH);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(57, Node.LAST_PROP);
538:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(39, Node.EMPTY_BLOCK);
542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
543:       assertEquals(55, Node.INFERRED_FUNCTION);
544:       assertEquals(29, Node.JSDOC_INFO_PROP);
545:       assertFalse(node1.equals((Object)node0));
546:       assertNotNull(node1);
547:       assertFalse(node1.isHook());
548:       assertFalse(node1.isThrow());
549:       assertFalse(node1.isFalse());
550:       assertFalse(node1.isBreak());
551:       assertFalse(node1.isSwitch());
552:       assertEquals(0, node1.getType());
553:       assertFalse(node1.isIn());
554:       assertFalse(node1.isEmpty());
555:       assertEquals(33718272, node1.getSourcePosition());
556:       assertFalse(node1.isInc());
557:       assertFalse(node1.hasOneChild());
558:       assertEquals(8232, node1.getLineno());
559:       assertFalse(node1.isFor());
560:       assertEquals(0, node1.getCharno());
561:       assertFalse(node1.isIf());
562:       assertFalse(node1.isRegExp());
563:       assertFalse(node1.isNE());
564:       assertFalse(node1.isWith());
565:       assertFalse(node1.isLabelName());
566:       assertFalse(node1.isArrayLit());
567:       assertFalse(node1.isInstanceOf());
568:       assertFalse(node1.hasMoreThanOneChild());
569:       assertFalse(node1.isCatch());
570:       assertFalse(node1.isThis());
571:       assertFalse(node1.isNumber());
572:       assertFalse(node1.isGetterDef());
573:       assertFalse(node1.isScript());
574:       assertFalse(node1.isTry());
575:       assertFalse(node1.isCase());
576:       assertFalse(node1.isVar());
577:       assertFalse(node1.isStringKey());
578:       assertFalse(node1.isBlock());
579:       assertFalse(node1.isNull());
580:       assertFalse(node1.isParamList());
581:       assertFalse(node1.isName());
582:       assertFalse(node1.isCall());
583:       assertEquals(0, node1.getChildCount());
584:       assertFalse(node1.isAssignAdd());
585:       assertFalse(node1.isContinue());
586:       assertFalse(node1.isOr());
587:       assertFalse(node1.isLabel());
588:       assertFalse(node1.isDefaultCase());
589:       assertFalse(node1.isAdd());
590:       assertFalse(node1.isDo());
591:       assertFalse(node1.isSetterDef());
592:       assertFalse(node1.isNew());
593:       assertFalse(node1.isCast());
594:       assertFalse(node1.isTrue());
595:       assertFalse(node1.isFunction());
596:       assertFalse(node1.isAssign());
597:       assertFalse(node1.isDebugger());
598:       assertFalse(node1.isDec());
599:       assertFalse(node1.isDelProp());
600:       assertFalse(node1.isTypeOf());
601:       assertFalse(node1.isVoid());
602:       assertFalse(node1.isGetElem());
603:       assertFalse(node1.isExprResult());
604:       assertFalse(node1.isReturn());
605:       assertFalse(node1.isAnd());
606:       assertFalse(node1.isObjectLit());
607:       assertFalse(node1.isComma());
608:       assertFalse(node1.isNot());
609:       assertFalse(node1.hasChildren());
610:       assertFalse(node1.isString());
611:       assertFalse(node1.isWhile());
612:       assertFalse(node1.isGetProp());
613:       
614:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
615:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
616:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
617:       assertEquals(39, Node.EMPTY_BLOCK);
618:       assertEquals(48, Node.DIRECTIVES);
619:       assertEquals(4095, Node.COLUMN_MASK);
620:       assertEquals(40, Node.ORIGINALNAME_PROP);
621:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
622:       assertEquals(36, Node.QUOTED_PROP);
623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
624:       assertEquals(53, Node.INPUT_ID);
625:       assertEquals(49, Node.DIRECT_EVAL);
626:       assertEquals(57, Node.LAST_PROP);
627:       assertEquals(55, Node.INFERRED_FUNCTION);
628:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
629:       assertEquals(57, Node.REFLECTED_OBJECT);
630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
631:       assertEquals(29, Node.JSDOC_INFO_PROP);
632:       assertEquals(52, Node.LENGTH);
633:       assertEquals(8, Node.FLAG_NO_THROWS);
634:       assertEquals(2, Node.POST_FLAG);
635:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
636:       assertEquals(37, Node.OPT_ARG_NAME);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(32, Node.INCRDECR_PROP);
640:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
641:       assertEquals(12, Node.COLUMN_BITS);
642:       assertEquals(30, Node.VAR_ARGS_NAME);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
645:       assertEquals(54, Node.SLASH_V);
646:       assertEquals(1, Node.DECR_FLAG);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(50, Node.FREE_CALL);
650:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
651:       assertEquals(8, Node.FLAG_NO_THROWS);
652:       assertEquals(48, Node.DIRECTIVES);
653:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
654:       assertEquals(4095, Node.COLUMN_MASK);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
657:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
661:       assertEquals(1, Node.DECR_FLAG);
662:       assertEquals(50, Node.FREE_CALL);
663:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(32, Node.INCRDECR_PROP);
666:       assertEquals(2, Node.POST_FLAG);
667:       assertEquals(56, Node.CHANGE_TIME);
668:       assertEquals(51, Node.STATIC_SOURCE_FILE);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(47, Node.IS_DISPATCHER);
671:       assertEquals(46, Node.IS_NAMESPACE);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(49, Node.DIRECT_EVAL);
674:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
675:       assertEquals(53, Node.INPUT_ID);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(57, Node.REFLECTED_OBJECT);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
681:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
682:       assertEquals(15, Node.NO_SIDE_EFFECTS);
683:       assertEquals(39, Node.EMPTY_BLOCK);
684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
685:       assertEquals(55, Node.INFERRED_FUNCTION);
686:       assertEquals(29, Node.JSDOC_INFO_PROP);
687:       assertFalse(node0.equals((Object)node1));
688:       assertFalse(node1.equals((Object)node0));
689:       assertNotNull(node_NodeMismatch0);
690:       assertEquals(0, node0.getType());
691:       assertFalse(node0.isHook());
692:       assertFalse(node0.isSwitch());
693:       assertFalse(node0.isThrow());
694:       assertFalse(node0.isFalse());
695:       assertFalse(node0.isBreak());
696:       assertFalse(node0.isGetProp());
697:       assertFalse(node0.isComma());
698:       assertFalse(node0.isAnd());
699:       assertFalse(node0.isThis());
700:       assertFalse(node0.isFor());
701:       assertFalse(node0.isCase());
702:       assertFalse(node0.isObjectLit());
703:       assertFalse(node0.isGetterDef());
704:       assertFalse(node0.isNot());
705:       assertFalse(node0.isString());
706:       assertFalse(node0.isScript());
707:       assertFalse(node0.isDebugger());
708:       assertFalse(node0.isFunction());
709:       assertFalse(node0.isTry());
710:       assertEquals(0, node0.getCharno());
711:       assertFalse(node0.isWith());
712:       assertFalse(node0.isRegExp());
713:       assertFalse(node0.isInstanceOf());
714:       assertFalse(node0.isCast());
715:       assertFalse(node0.isCatch());
716:       assertFalse(node0.isIf());
717:       assertFalse(node0.isNE());
718:       assertFalse(node0.isIn());
719:       assertFalse(node0.isSetterDef());
720:       assertFalse(node0.isInc());
721:       assertFalse(node0.isNew());
722:       assertFalse(node0.isAdd());
723:       assertFalse(node0.isBlock());
724:       assertFalse(node0.isWhile());
725:       assertFalse(node0.isVar());
726:       assertFalse(node0.isName());
727:       assertFalse(node0.isStringKey());
728:       assertFalse(node0.isContinue());
729:       assertFalse(node0.hasMoreThanOneChild());
730:       assertFalse(node0.isCall());
731:       assertEquals(0, node0.getLineno());
732:       assertFalse(node0.hasChildren());
733:       assertFalse(node0.isParamList());
734:       assertFalse(node0.isReturn());
735:       assertFalse(node0.isNumber());
736:       assertFalse(node0.hasOneChild());
737:       assertFalse(node0.isVoid());
738:       assertFalse(node0.isDefaultCase());
739:       assertFalse(node0.isTrue());
740:       assertFalse(node0.isGetElem());
741:       assertFalse(node0.isDelProp());
742:       assertFalse(node0.isDec());
743:       assertFalse(node0.isAssign());
744:       assertFalse(node0.isLabelName());
745:       assertFalse(node0.isArrayLit());
746:       assertFalse(node0.isTypeOf());
747:       assertFalse(node0.isExprResult());
748:       assertFalse(node0.isAssignAdd());
749:       assertFalse(node0.isLabel());
750:       assertFalse(node0.isOr());
751:       assertEquals(0, node0.getChildCount());
752:       assertFalse(node0.isNull());
753:       assertEquals(0, node0.getSourcePosition());
754:       assertFalse(node0.isDo());
755:       assertFalse(node0.isEmpty());
756:       assertFalse(node1.isHook());
757:       assertFalse(node1.isThrow());
758:       assertFalse(node1.isFalse());
759:       assertFalse(node1.isBreak());
760:       assertFalse(node1.isSwitch());
761:       assertEquals(0, node1.getType());
762:       assertFalse(node1.isIn());
763:       assertFalse(node1.isEmpty());
764:       assertEquals(33718272, node1.getSourcePosition());
765:       assertFalse(node1.isInc());
766:       assertFalse(node1.hasOneChild());
767:       assertEquals(8232, node1.getLineno());
768:       assertFalse(node1.isFor());
769:       assertEquals(0, node1.getCharno());
770:       assertFalse(node1.isIf());
771:       assertFalse(node1.isRegExp());
772:       assertFalse(node1.isNE());
773:       assertFalse(node1.isWith());
774:       assertFalse(node1.isLabelName());
775:       assertFalse(node1.isArrayLit());
776:       assertFalse(node1.isInstanceOf());
777:       assertFalse(node1.hasMoreThanOneChild());
778:       assertFalse(node1.isCatch());
779:       assertFalse(node1.isThis());
780:       assertFalse(node1.isNumber());
781:       assertFalse(node1.isGetterDef());
782:       assertFalse(node1.isScript());
783:       assertFalse(node1.isTry());
784:       assertFalse(node1.isCase());
785:       assertFalse(node1.isVar());
786:       assertFalse(node1.isStringKey());
787:       assertFalse(node1.isBlock());
788:       assertFalse(node1.isNull());
789:       assertFalse(node1.isParamList());
790:       assertFalse(node1.isName());
791:       assertFalse(node1.isCall());
792:       assertEquals(0, node1.getChildCount());
793:       assertFalse(node1.isAssignAdd());
794:       assertFalse(node1.isContinue());
795:       assertFalse(node1.isOr());
796:       assertFalse(node1.isLabel());
797:       assertFalse(node1.isDefaultCase());
798:       assertFalse(node1.isAdd());
799:       assertFalse(node1.isDo());
800:       assertFalse(node1.isSetterDef());
801:       assertFalse(node1.isNew());
802:       assertFalse(node1.isCast());
803:       assertFalse(node1.isTrue());
804:       assertFalse(node1.isFunction());
805:       assertFalse(node1.isAssign());
806:       assertFalse(node1.isDebugger());
807:       assertFalse(node1.isDec());
808:       assertFalse(node1.isDelProp());
809:       assertFalse(node1.isTypeOf());
810:       assertFalse(node1.isVoid());
811:       assertFalse(node1.isGetElem());
812:       assertFalse(node1.isExprResult());
813:       assertFalse(node1.isReturn());
814:       assertFalse(node1.isAnd());
815:       assertFalse(node1.isObjectLit());
816:       assertFalse(node1.isComma());
817:       assertFalse(node1.isNot());
818:       assertFalse(node1.hasChildren());
819:       assertFalse(node1.isString());
820:       assertFalse(node1.isWhile());
821:       assertFalse(node1.isGetProp());
822:       
823:       // Undeclared exception!
824:       try { 
825:         node1.replaceChildAfter(node0, node0);
826:         fail("Expecting exception: IllegalArgumentException");
827:       
828:       } catch(IllegalArgumentException e) {
829:          //
830:          // prev is not a child of this node.
831:          //
832:          verifyException("com.google.common.base.Preconditions", e);
833:       }
834:   }
835: }
RegularFileObject[/tmp/EvoSuite_10_1605714098821/com/google/javascript/rhino/Node_10_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:39 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_10_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_10_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.JSDocInfo$Visibility",
85:       "com.google.javascript.rhino.jstype.NoType",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.common.collect.Iterators$12",
123:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
124:       "com.google.common.collect.Iterators$11",
125:       "com.google.javascript.rhino.jstype.JSType$1",
126:       "com.google.common.collect.EmptyImmutableBiMap",
127:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
128:       "com.google.common.base.Predicate",
129:       "com.google.javascript.rhino.jstype.VoidType",
130:       "com.google.common.base.Joiner",
131:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
132:       "com.google.common.collect.AbstractListMultimap",
133:       "com.google.javascript.rhino.jstype.JSType",
134:       "com.google.common.collect.ImmutableAsList",
135:       "com.google.javascript.rhino.Node$StringNode",
136:       "com.google.javascript.rhino.jstype.ProxyObjectType",
137:       "com.google.common.collect.Sets$SetView",
138:       "com.google.common.collect.RegularImmutableAsList",
139:       "com.google.javascript.rhino.jstype.TemplateType",
140:       "com.google.javascript.rhino.jstype.NamedType",
141:       "com.google.common.collect.Iterators$13",
142:       "com.google.javascript.rhino.InputId",
143:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
144:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
145:       "com.google.common.collect.AbstractMapBasedMultimap",
146:       "com.google.common.collect.Lists$Partition",
147:       "com.google.common.collect.Lists",
148:       "com.google.javascript.rhino.Node$SideEffectFlags",
149:       "com.google.common.collect.UnmodifiableListIterator",
150:       "com.google.javascript.rhino.jstype.NullType",
151:       "com.google.common.collect.Lists$TransformingSequentialList",
152:       "com.google.javascript.rhino.ErrorReporter",
153:       "com.google.javascript.rhino.jstype.UnknownType",
154:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
155:       "com.google.javascript.rhino.jstype.ValueType",
156:       "com.google.javascript.rhino.jstype.PropertyMap",
157:       "com.google.javascript.rhino.Token",
158:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
159:       "com.google.common.collect.ObjectArrays",
160:       "com.google.javascript.rhino.jstype.StaticSourceFile",
161:       "com.google.javascript.rhino.jstype.BooleanType",
162:       "com.google.javascript.rhino.jstype.NoObjectType",
163:       "com.google.common.collect.AbstractIterator",
164:       "com.google.javascript.rhino.jstype.FunctionBuilder",
165:       "com.google.javascript.rhino.jstype.JSType$TypePair",
166:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
167:       "com.google.common.base.Joiner$MapJoiner",
168:       "com.google.common.collect.ImmutableList$1",
169:       "com.google.common.collect.MapDifference",
170:       "com.google.javascript.rhino.JSDocInfo$1",
171:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
172:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
173:       "com.google.common.collect.Sets$ImprovedAbstractSet",
174:       "com.google.javascript.rhino.jstype.FunctionType",
175:       "com.google.common.base.Preconditions",
176:       "com.google.common.collect.UnmodifiableIterator",
177:       "com.google.javascript.rhino.JSDocInfo",
178:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
179:       "com.google.javascript.rhino.jstype.Property",
180:       "com.google.common.collect.ImmutableMapValues",
181:       "com.google.common.collect.ImmutableEntry",
182:       "com.google.common.base.Joiner$1",
183:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
184:       "com.google.common.base.Joiner$2",
185:       "com.google.common.collect.ImmutableCollection",
186:       "com.google.common.collect.ImmutableEnumMap",
187:       "com.google.javascript.rhino.jstype.TernaryValue",
188:       "com.google.javascript.rhino.Node$AncestorIterable",
189:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
190:       "com.google.common.collect.Lists$RandomAccessListWrapper",
191:       "com.google.common.collect.ImmutableEnumSet",
192:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
193:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
194:       "com.google.javascript.rhino.jstype.EnumElementType",
195:       "com.google.javascript.rhino.jstype.UnionType",
196:       "com.google.common.base.Objects",
197:       "com.google.javascript.rhino.Node$NumberNode",
198:       "com.google.common.collect.SingletonImmutableList",
199:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
200:       "com.google.common.collect.ImmutableCollection$Builder",
201:       "com.google.javascript.rhino.jstype.StaticSlot",
202:       "com.google.common.collect.Iterators$6",
203:       "com.google.common.collect.BiMap",
204:       "com.google.common.collect.Iterators$7",
205:       "com.google.common.collect.AbstractSetMultimap",
206:       "com.google.common.base.Function",
207:       "com.google.common.collect.ImmutableSet",
208:       "com.google.common.collect.Lists$AbstractListWrapper",
209:       "com.google.common.collect.ImmutableMap",
210:       "com.google.common.collect.AbstractIndexedListIterator",
211:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
212:       "com.google.common.collect.Maps$1",
213:       "com.google.javascript.rhino.jstype.EnumType",
214:       "com.google.common.collect.Iterators$1",
215:       "com.google.common.collect.Iterators$2",
216:       "com.google.javascript.rhino.jstype.NamespaceType",
217:       "com.google.common.collect.Iterators$3",
218:       "com.google.common.collect.Sets",
219:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
220:       "com.google.javascript.rhino.Node$ObjectPropListItem",
221:       "com.google.common.collect.Lists$StringAsImmutableList",
222:       "com.google.common.collect.Lists$2",
223:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
224:       "com.google.common.collect.ImmutableList$Builder",
225:       "com.google.common.collect.Lists$1",
226:       "com.google.javascript.rhino.jstype.StaticReference",
227:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
228:       "com.google.common.collect.Multiset",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.common.collect.ImmutableList",
236:       "com.google.common.collect.SingletonImmutableBiMap",
237:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
238:       "com.google.javascript.rhino.jstype.StringType",
239:       "com.google.javascript.rhino.Node$AbstractPropListItem",
240:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
241:       "com.google.javascript.rhino.jstype.TemplatizedType",
242:       "com.google.javascript.rhino.jstype.Visitor",
243:       "com.google.javascript.rhino.jstype.NoResolvedType",
244:       "com.google.javascript.rhino.jstype.JSTypeNative",
245:       "com.google.javascript.rhino.jstype.AllType",
246:       "com.google.common.collect.Maps",
247:       "com.google.common.collect.SetMultimap",
248:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
249:       "com.google.common.collect.Maps$EntryTransformer",
250:       "com.google.javascript.rhino.JSTypeExpression",
251:       "com.google.common.collect.Iterators$MergingIterator"
252:     );
253:   } 
254: 
255:   private static void resetClasses() {
256:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_10_tmp__ESTest_scaffolding.class.getClassLoader()); 
257: 
258:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
259:       "com.google.javascript.rhino.Node",
260:       "com.google.javascript.rhino.Node$NumberNode",
261:       "com.google.javascript.rhino.Node$StringNode",
262:       "com.google.javascript.rhino.Node$AbstractPropListItem",
263:       "com.google.javascript.rhino.Node$ObjectPropListItem",
264:       "com.google.javascript.rhino.Node$IntPropListItem",
265:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
266:       "com.google.javascript.rhino.Node$AncestorIterable",
267:       "com.google.javascript.rhino.Node$NodeMismatch",
268:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
269:       "com.google.javascript.rhino.Node$SideEffectFlags",
270:       "com.google.javascript.rhino.Token",
271:       "com.google.common.base.Preconditions",
272:       "com.google.javascript.rhino.JSDocInfo",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.base.Objects",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.InputId",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
357:     );
358:   }
359: }

[MASTER] 15:41:40.609 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(47.27582, 0, 0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());

node0.type = 0;
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());

Iterable<Node> iterable0 = node0.children();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(iterable0);
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(iterable0.contains(node0));

node0.setOptionalArg(false);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());

node0.setVarArgs(true);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());

Node node1 = Node.newString(0, "A", 8232, 0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertEquals(33718272, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.hasOneChild());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(0, node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertEquals(33718272, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.hasOneChild());
assertEquals(8232, node1.getLineno());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());

node1.replaceChildAfter(node0, node0);

