* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 10687
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 199045438
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 15:32:43.361 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:33:08.582 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;
[MASTER] 15:33:08.607 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true
[MASTER] 15:33:08.622 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false
[MASTER] 15:33:55.970 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false in context: com.google.javascript.rhino.Node:copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 15:33:55.994 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false in context: com.google.javascript.rhino.Node:copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 15:34:00.327 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 15:34:00.330 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
* Search finished after 306s and 24 generations, 14428 statements, best individual has fitness: 4423.0
* Minimizing test suite
[MASTER] 15:39:11.762 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 853
* Number of covered goals: 677
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 63%
* Total number of goals: 714
* Number of covered goals: 448
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 70
* Number of covered goals: 70
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 65%
* Total number of goals: 530
* Number of covered goals: 344
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 27%
* Total number of goals: 4536
* Number of covered goals: 1217
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 88%
* Total number of goals: 233
* Number of covered goals: 206
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 82%
* Total number of goals: 233
* Number of covered goals: 192
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 57%
* Total number of goals: 714
* Number of covered goals: 410
* Generated 260 tests with total length 3985
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:40:42.069 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8288166666666666% of time used, but only 7/260 tests minimized), falling back to using all assertions
[MASTER] 15:40:52.405 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 15:41:10.648 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 18 seconds more than allowed.
[MASTER] 15:41:32.971 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_31_1605714092366/com/google/javascript/rhino/Node_31_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_31_1605714092366/com/google/javascript/rhino/Node_31_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:32.971 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:32.971 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:33.019 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 653
[MASTER] 15:41:33.022 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_31_1605714092366/com/google/javascript/rhino/Node_31_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:32 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_31_tmp__ESTest extends Node_31_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node((-254));
22:       assertFalse(node0.isOr());
23:       assertFalse(node0.isLabel());
24:       assertFalse(node0.isAssignAdd());
25:       assertFalse(node0.isReturn());
26:       assertEquals((-1), node0.getLineno());
27:       assertFalse(node0.isAssign());
28:       assertFalse(node0.isDo());
29:       assertFalse(node0.isGetElem());
30:       assertFalse(node0.isContinue());
31:       assertFalse(node0.isWhile());
32:       assertFalse(node0.hasMoreThanOneChild());
33:       assertFalse(node0.isTypeOf());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isDec());
36:       assertFalse(node0.isAdd());
37:       assertEquals((-254), node0.getType());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isCall());
40:       assertFalse(node0.isNew());
41:       assertFalse(node0.isName());
42:       assertFalse(node0.isNull());
43:       assertFalse(node0.isSetterDef());
44:       assertFalse(node0.isBreak());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isFalse());
47:       assertFalse(node0.isThrow());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isComma());
50:       assertFalse(node0.isCast());
51:       assertFalse(node0.isNot());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.isString());
54:       assertFalse(node0.isObjectLit());
55:       assertFalse(node0.isDebugger());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.isIn());
58:       assertFalse(node0.isDelProp());
59:       assertFalse(node0.isCase());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isInc());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isNE());
66:       assertFalse(node0.isTrue());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isDefaultCase());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isRegExp());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isHook());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isTry());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isSwitch());
80:       assertFalse(node0.isArrayLit());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.hasOneChild());
83:       assertFalse(node0.isLabelName());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isNumber());
86:       assertEquals((-1), node0.getCharno());
87:       assertFalse(node0.isGetterDef());
88:       assertEquals(4095, Node.COLUMN_MASK);
89:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
90:       assertEquals(55, Node.INFERRED_FUNCTION);
91:       assertEquals(39, Node.EMPTY_BLOCK);
92:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(29, Node.JSDOC_INFO_PROP);
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(8, Node.FLAG_NO_THROWS);
102:       assertEquals(37, Node.OPT_ARG_NAME);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(56, Node.CHANGE_TIME);
107:       assertEquals(51, Node.STATIC_SOURCE_FILE);
108:       assertEquals(12, Node.COLUMN_BITS);
109:       assertEquals(32, Node.INCRDECR_PROP);
110:       assertEquals(1, Node.DECR_FLAG);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(47, Node.IS_DISPATCHER);
115:       assertEquals(2, Node.POST_FLAG);
116:       assertEquals(30, Node.VAR_ARGS_NAME);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(43, Node.IS_CONSTANT_NAME);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(54, Node.SLASH_V);
124:       assertNotNull(node0);
125:       
126:       node0.detachChildren();
127:       assertFalse(node0.isOr());
128:       assertFalse(node0.isLabel());
129:       assertFalse(node0.isAssignAdd());
130:       assertFalse(node0.isReturn());
131:       assertEquals((-1), node0.getLineno());
132:       assertFalse(node0.isAssign());
133:       assertFalse(node0.isDo());
134:       assertFalse(node0.isGetElem());
135:       assertFalse(node0.isContinue());
136:       assertFalse(node0.isWhile());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertFalse(node0.isTypeOf());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isDec());
141:       assertFalse(node0.isAdd());
142:       assertEquals((-254), node0.getType());
143:       assertFalse(node0.isExprResult());
144:       assertFalse(node0.isCall());
145:       assertFalse(node0.isNew());
146:       assertFalse(node0.isName());
147:       assertFalse(node0.isNull());
148:       assertFalse(node0.isSetterDef());
149:       assertFalse(node0.isBreak());
150:       assertFalse(node0.isGetProp());
151:       assertFalse(node0.isFalse());
152:       assertFalse(node0.isThrow());
153:       assertFalse(node0.isFunction());
154:       assertFalse(node0.isComma());
155:       assertFalse(node0.isCast());
156:       assertFalse(node0.isNot());
157:       assertFalse(node0.isAnd());
158:       assertFalse(node0.isString());
159:       assertFalse(node0.isObjectLit());
160:       assertFalse(node0.isDebugger());
161:       assertEquals((-1), node0.getSourcePosition());
162:       assertFalse(node0.isIn());
163:       assertFalse(node0.isDelProp());
164:       assertFalse(node0.isCase());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isInc());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isEmpty());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isNE());
171:       assertFalse(node0.isTrue());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isParamList());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isCatch());
177:       assertFalse(node0.isRegExp());
178:       assertFalse(node0.isVar());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isHook());
181:       assertEquals(0, node0.getChildCount());
182:       assertFalse(node0.isTry());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isSwitch());
185:       assertFalse(node0.isArrayLit());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.hasOneChild());
188:       assertFalse(node0.isLabelName());
189:       assertFalse(node0.isStringKey());
190:       assertFalse(node0.isNumber());
191:       assertEquals((-1), node0.getCharno());
192:       assertFalse(node0.isGetterDef());
193:       assertEquals(4095, Node.COLUMN_MASK);
194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
195:       assertEquals(55, Node.INFERRED_FUNCTION);
196:       assertEquals(39, Node.EMPTY_BLOCK);
197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(57, Node.REFLECTED_OBJECT);
200:       assertEquals(29, Node.JSDOC_INFO_PROP);
201:       assertEquals(53, Node.INPUT_ID);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(8, Node.FLAG_NO_THROWS);
207:       assertEquals(37, Node.OPT_ARG_NAME);
208:       assertEquals(48, Node.DIRECTIVES);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(56, Node.CHANGE_TIME);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(12, Node.COLUMN_BITS);
214:       assertEquals(32, Node.INCRDECR_PROP);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(47, Node.IS_DISPATCHER);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(30, Node.VAR_ARGS_NAME);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(46, Node.IS_NAMESPACE);
228:       assertEquals(54, Node.SLASH_V);
229:       
230:       Object object0 = node0.getProp((-254));
231:       assertFalse(node0.isOr());
232:       assertFalse(node0.isLabel());
233:       assertFalse(node0.isAssignAdd());
234:       assertFalse(node0.isReturn());
235:       assertEquals((-1), node0.getLineno());
236:       assertFalse(node0.isAssign());
237:       assertFalse(node0.isDo());
238:       assertFalse(node0.isGetElem());
239:       assertFalse(node0.isContinue());
240:       assertFalse(node0.isWhile());
241:       assertFalse(node0.hasMoreThanOneChild());
242:       assertFalse(node0.isTypeOf());
243:       assertFalse(node0.hasChildren());
244:       assertFalse(node0.isDec());
245:       assertFalse(node0.isAdd());
246:       assertEquals((-254), node0.getType());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.isCall());
249:       assertFalse(node0.isNew());
250:       assertFalse(node0.isName());
251:       assertFalse(node0.isNull());
252:       assertFalse(node0.isSetterDef());
253:       assertFalse(node0.isBreak());
254:       assertFalse(node0.isGetProp());
255:       assertFalse(node0.isFalse());
256:       assertFalse(node0.isThrow());
257:       assertFalse(node0.isFunction());
258:       assertFalse(node0.isComma());
259:       assertFalse(node0.isCast());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isAnd());
262:       assertFalse(node0.isString());
263:       assertFalse(node0.isObjectLit());
264:       assertFalse(node0.isDebugger());
265:       assertEquals((-1), node0.getSourcePosition());
266:       assertFalse(node0.isIn());
267:       assertFalse(node0.isDelProp());
268:       assertFalse(node0.isCase());
269:       assertFalse(node0.isFor());
270:       assertFalse(node0.isInc());
271:       assertFalse(node0.isVoid());
272:       assertFalse(node0.isEmpty());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isNE());
275:       assertFalse(node0.isTrue());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isParamList());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isDefaultCase());
280:       assertFalse(node0.isCatch());
281:       assertFalse(node0.isRegExp());
282:       assertFalse(node0.isVar());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isHook());
285:       assertEquals(0, node0.getChildCount());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isBlock());
288:       assertFalse(node0.isSwitch());
289:       assertFalse(node0.isArrayLit());
290:       assertFalse(node0.isScript());
291:       assertFalse(node0.hasOneChild());
292:       assertFalse(node0.isLabelName());
293:       assertFalse(node0.isStringKey());
294:       assertFalse(node0.isNumber());
295:       assertEquals((-1), node0.getCharno());
296:       assertFalse(node0.isGetterDef());
297:       assertEquals(4095, Node.COLUMN_MASK);
298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
299:       assertEquals(55, Node.INFERRED_FUNCTION);
300:       assertEquals(39, Node.EMPTY_BLOCK);
301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(29, Node.JSDOC_INFO_PROP);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
309:       assertEquals(36, Node.QUOTED_PROP);
310:       assertEquals(8, Node.FLAG_NO_THROWS);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(48, Node.DIRECTIVES);
313:       assertEquals(49, Node.DIRECT_EVAL);
314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
315:       assertEquals(56, Node.CHANGE_TIME);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(32, Node.INCRDECR_PROP);
319:       assertEquals(1, Node.DECR_FLAG);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
322:       assertEquals(57, Node.LAST_PROP);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(2, Node.POST_FLAG);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
327:       assertEquals(50, Node.FREE_CALL);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(54, Node.SLASH_V);
333:       assertNull(object0);
334:       
335:       int int0 = node0.getIntProp((-254));
336:       assertFalse(node0.isOr());
337:       assertFalse(node0.isLabel());
338:       assertFalse(node0.isAssignAdd());
339:       assertFalse(node0.isReturn());
340:       assertEquals((-1), node0.getLineno());
341:       assertFalse(node0.isAssign());
342:       assertFalse(node0.isDo());
343:       assertFalse(node0.isGetElem());
344:       assertFalse(node0.isContinue());
345:       assertFalse(node0.isWhile());
346:       assertFalse(node0.hasMoreThanOneChild());
347:       assertFalse(node0.isTypeOf());
348:       assertFalse(node0.hasChildren());
349:       assertFalse(node0.isDec());
350:       assertFalse(node0.isAdd());
351:       assertEquals((-254), node0.getType());
352:       assertFalse(node0.isExprResult());
353:       assertFalse(node0.isCall());
354:       assertFalse(node0.isNew());
355:       assertFalse(node0.isName());
356:       assertFalse(node0.isNull());
357:       assertFalse(node0.isSetterDef());
358:       assertFalse(node0.isBreak());
359:       assertFalse(node0.isGetProp());
360:       assertFalse(node0.isFalse());
361:       assertFalse(node0.isThrow());
362:       assertFalse(node0.isFunction());
363:       assertFalse(node0.isComma());
364:       assertFalse(node0.isCast());
365:       assertFalse(node0.isNot());
366:       assertFalse(node0.isAnd());
367:       assertFalse(node0.isString());
368:       assertFalse(node0.isObjectLit());
369:       assertFalse(node0.isDebugger());
370:       assertEquals((-1), node0.getSourcePosition());
371:       assertFalse(node0.isIn());
372:       assertFalse(node0.isDelProp());
373:       assertFalse(node0.isCase());
374:       assertFalse(node0.isFor());
375:       assertFalse(node0.isInc());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isEmpty());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isNE());
380:       assertFalse(node0.isTrue());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isParamList());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.isDefaultCase());
385:       assertFalse(node0.isCatch());
386:       assertFalse(node0.isRegExp());
387:       assertFalse(node0.isVar());
388:       assertFalse(node0.isThis());
389:       assertFalse(node0.isHook());
390:       assertEquals(0, node0.getChildCount());
391:       assertFalse(node0.isTry());
392:       assertFalse(node0.isBlock());
393:       assertFalse(node0.isSwitch());
394:       assertFalse(node0.isArrayLit());
395:       assertFalse(node0.isScript());
396:       assertFalse(node0.hasOneChild());
397:       assertFalse(node0.isLabelName());
398:       assertFalse(node0.isStringKey());
399:       assertFalse(node0.isNumber());
400:       assertEquals((-1), node0.getCharno());
401:       assertFalse(node0.isGetterDef());
402:       assertEquals(4095, Node.COLUMN_MASK);
403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
404:       assertEquals(55, Node.INFERRED_FUNCTION);
405:       assertEquals(39, Node.EMPTY_BLOCK);
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
408:       assertEquals(57, Node.REFLECTED_OBJECT);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
412:       assertEquals(52, Node.LENGTH);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(36, Node.QUOTED_PROP);
415:       assertEquals(8, Node.FLAG_NO_THROWS);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(48, Node.DIRECTIVES);
418:       assertEquals(49, Node.DIRECT_EVAL);
419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(12, Node.COLUMN_BITS);
423:       assertEquals(32, Node.INCRDECR_PROP);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(57, Node.LAST_PROP);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(2, Node.POST_FLAG);
430:       assertEquals(30, Node.VAR_ARGS_NAME);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(50, Node.FREE_CALL);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
435:       assertEquals(43, Node.IS_CONSTANT_NAME);
436:       assertEquals(46, Node.IS_NAMESPACE);
437:       assertEquals(54, Node.SLASH_V);
438:       assertEquals(0, int0);
439:       
440:       Node node1 = Node.newNumber(0.0);
441:       assertTrue(node1.isNumber());
442:       assertFalse(node1.isNE());
443:       assertFalse(node1.isIf());
444:       assertFalse(node1.isDelProp());
445:       assertFalse(node1.isFor());
446:       assertFalse(node1.isTry());
447:       assertFalse(node1.isArrayLit());
448:       assertFalse(node1.isHook());
449:       assertEquals((-1), node1.getCharno());
450:       assertFalse(node1.isSwitch());
451:       assertFalse(node1.isString());
452:       assertFalse(node1.isGetterDef());
453:       assertFalse(node1.isCase());
454:       assertFalse(node1.isDebugger());
455:       assertFalse(node1.isInstanceOf());
456:       assertFalse(node1.isAnd());
457:       assertFalse(node1.isThis());
458:       assertFalse(node1.isFunction());
459:       assertFalse(node1.isCatch());
460:       assertFalse(node1.isRegExp());
461:       assertFalse(node1.isWith());
462:       assertFalse(node1.isFalse());
463:       assertFalse(node1.isThrow());
464:       assertFalse(node1.isSetterDef());
465:       assertFalse(node1.isInc());
466:       assertFalse(node1.isIn());
467:       assertFalse(node1.isReturn());
468:       assertEquals((-1), node1.getLineno());
469:       assertFalse(node1.isOr());
470:       assertFalse(node1.isLabel());
471:       assertFalse(node1.isAssignAdd());
472:       assertFalse(node1.isWhile());
473:       assertFalse(node1.isDec());
474:       assertFalse(node1.isAssign());
475:       assertFalse(node1.isLabelName());
476:       assertFalse(node1.isGetElem());
477:       assertFalse(node1.hasChildren());
478:       assertEquals(39, node1.getType());
479:       assertFalse(node1.isCast());
480:       assertFalse(node1.isTypeOf());
481:       assertFalse(node1.isContinue());
482:       assertFalse(node1.hasMoreThanOneChild());
483:       assertFalse(node1.hasOneChild());
484:       assertFalse(node1.isBlock());
485:       assertFalse(node1.isStringKey());
486:       assertFalse(node1.isNot());
487:       assertEquals((-1), node1.getSourcePosition());
488:       assertFalse(node1.isScript());
489:       assertFalse(node1.isObjectLit());
490:       assertEquals(0, node1.getChildCount());
491:       assertFalse(node1.isGetProp());
492:       assertFalse(node1.isParamList());
493:       assertFalse(node1.isBreak());
494:       assertFalse(node1.isComma());
495:       assertFalse(node1.isExprResult());
496:       assertFalse(node1.isCall());
497:       assertFalse(node1.isAdd());
498:       assertFalse(node1.isNew());
499:       assertFalse(node1.isTrue());
500:       assertFalse(node1.isVoid());
501:       assertFalse(node1.isVar());
502:       assertFalse(node1.isName());
503:       assertFalse(node1.isDefaultCase());
504:       assertFalse(node1.isDo());
505:       assertFalse(node1.isEmpty());
506:       assertFalse(node1.isNull());
507:       assertFalse(node1.equals((Object)node0));
508:       assertEquals(55, Node.INFERRED_FUNCTION);
509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
510:       assertEquals(4095, Node.COLUMN_MASK);
511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
515:       assertEquals(54, Node.SLASH_V);
516:       assertEquals(43, Node.IS_CONSTANT_NAME);
517:       assertEquals(46, Node.IS_NAMESPACE);
518:       assertEquals(50, Node.FREE_CALL);
519:       assertEquals(51, Node.STATIC_SOURCE_FILE);
520:       assertEquals(12, Node.COLUMN_BITS);
521:       assertEquals(49, Node.DIRECT_EVAL);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(15, Node.NO_SIDE_EFFECTS);
524:       assertEquals(1, Node.DECR_FLAG);
525:       assertEquals(37, Node.OPT_ARG_NAME);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(57, Node.LAST_PROP);
528:       assertEquals(30, Node.VAR_ARGS_NAME);
529:       assertEquals(47, Node.IS_DISPATCHER);
530:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
533:       assertEquals(29, Node.JSDOC_INFO_PROP);
534:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(56, Node.CHANGE_TIME);
540:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
541:       assertEquals(52, Node.LENGTH);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertNotNull(node1);
545:       
546:       Object object1 = node0.getProp(2554);
547:       assertFalse(node0.isOr());
548:       assertFalse(node0.isLabel());
549:       assertFalse(node0.isAssignAdd());
550:       assertFalse(node0.isReturn());
551:       assertEquals((-1), node0.getLineno());
552:       assertFalse(node0.isAssign());
553:       assertFalse(node0.isDo());
554:       assertFalse(node0.isGetElem());
555:       assertFalse(node0.isContinue());
556:       assertFalse(node0.isWhile());
557:       assertFalse(node0.hasMoreThanOneChild());
558:       assertFalse(node0.isTypeOf());
559:       assertFalse(node0.hasChildren());
560:       assertFalse(node0.isDec());
561:       assertFalse(node0.isAdd());
562:       assertEquals((-254), node0.getType());
563:       assertFalse(node0.isExprResult());
564:       assertFalse(node0.isCall());
565:       assertFalse(node0.isNew());
566:       assertFalse(node0.isName());
567:       assertFalse(node0.isNull());
568:       assertFalse(node0.isSetterDef());
569:       assertFalse(node0.isBreak());
570:       assertFalse(node0.isGetProp());
571:       assertFalse(node0.isFalse());
572:       assertFalse(node0.isThrow());
573:       assertFalse(node0.isFunction());
574:       assertFalse(node0.isComma());
575:       assertFalse(node0.isCast());
576:       assertFalse(node0.isNot());
577:       assertFalse(node0.isAnd());
578:       assertFalse(node0.isString());
579:       assertFalse(node0.isObjectLit());
580:       assertFalse(node0.isDebugger());
581:       assertEquals((-1), node0.getSourcePosition());
582:       assertFalse(node0.isIn());
583:       assertFalse(node0.isDelProp());
584:       assertFalse(node0.isCase());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.isInc());
587:       assertFalse(node0.isVoid());
588:       assertFalse(node0.isEmpty());
589:       assertFalse(node0.isIf());
590:       assertFalse(node0.isNE());
591:       assertFalse(node0.isTrue());
592:       assertFalse(node0.isInstanceOf());
593:       assertFalse(node0.isParamList());
594:       assertFalse(node0.isWith());
595:       assertFalse(node0.isDefaultCase());
596:       assertFalse(node0.isCatch());
597:       assertFalse(node0.isRegExp());
598:       assertFalse(node0.isVar());
599:       assertFalse(node0.isThis());
600:       assertFalse(node0.isHook());
601:       assertEquals(0, node0.getChildCount());
602:       assertFalse(node0.isTry());
603:       assertFalse(node0.isBlock());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isArrayLit());
606:       assertFalse(node0.isScript());
607:       assertFalse(node0.hasOneChild());
608:       assertFalse(node0.isLabelName());
609:       assertFalse(node0.isStringKey());
610:       assertFalse(node0.isNumber());
611:       assertEquals((-1), node0.getCharno());
612:       assertFalse(node0.isGetterDef());
613:       assertFalse(node0.equals((Object)node1));
614:       assertEquals(4095, Node.COLUMN_MASK);
615:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
616:       assertEquals(55, Node.INFERRED_FUNCTION);
617:       assertEquals(39, Node.EMPTY_BLOCK);
618:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(57, Node.REFLECTED_OBJECT);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
624:       assertEquals(52, Node.LENGTH);
625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
626:       assertEquals(36, Node.QUOTED_PROP);
627:       assertEquals(8, Node.FLAG_NO_THROWS);
628:       assertEquals(37, Node.OPT_ARG_NAME);
629:       assertEquals(48, Node.DIRECTIVES);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
632:       assertEquals(56, Node.CHANGE_TIME);
633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
634:       assertEquals(12, Node.COLUMN_BITS);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(15, Node.NO_SIDE_EFFECTS);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(47, Node.IS_DISPATCHER);
641:       assertEquals(2, Node.POST_FLAG);
642:       assertEquals(30, Node.VAR_ARGS_NAME);
643:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
644:       assertEquals(50, Node.FREE_CALL);
645:       assertEquals(40, Node.ORIGINALNAME_PROP);
646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
647:       assertEquals(43, Node.IS_CONSTANT_NAME);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(54, Node.SLASH_V);
650:       assertNull(object1);
651:       
652:       Iterable<Node> iterable0 = node0.children();
653:       assertFalse(iterable0.contains(node1));
654:       assertFalse(node0.isOr());
655:       assertFalse(node0.isLabel());
656:       assertFalse(node0.isAssignAdd());
657:       assertFalse(node0.isReturn());
658:       assertEquals((-1), node0.getLineno());
659:       assertFalse(node0.isAssign());
660:       assertFalse(node0.isDo());
661:       assertFalse(node0.isGetElem());
662:       assertFalse(node0.isContinue());
663:       assertFalse(node0.isWhile());
664:       assertFalse(node0.hasMoreThanOneChild());
665:       assertFalse(node0.isTypeOf());
666:       assertFalse(node0.hasChildren());
667:       assertFalse(node0.isDec());
668:       assertFalse(node0.isAdd());
669:       assertEquals((-254), node0.getType());
670:       assertFalse(node0.isExprResult());
671:       assertFalse(node0.isCall());
672:       assertFalse(node0.isNew());
673:       assertFalse(node0.isName());
674:       assertFalse(node0.isNull());
675:       assertFalse(node0.isSetterDef());
676:       assertFalse(node0.isBreak());
677:       assertFalse(node0.isGetProp());
678:       assertFalse(node0.isFalse());
679:       assertFalse(node0.isThrow());
680:       assertFalse(node0.isFunction());
681:       assertFalse(node0.isComma());
682:       assertFalse(node0.isCast());
683:       assertFalse(node0.isNot());
684:       assertFalse(node0.isAnd());
685:       assertFalse(node0.isString());
686:       assertFalse(node0.isObjectLit());
687:       assertFalse(node0.isDebugger());
688:       assertEquals((-1), node0.getSourcePosition());
689:       assertFalse(node0.isIn());
690:       assertFalse(node0.isDelProp());
691:       assertFalse(node0.isCase());
692:       assertFalse(node0.isFor());
693:       assertFalse(node0.isInc());
694:       assertFalse(node0.isVoid());
695:       assertFalse(node0.isEmpty());
696:       assertFalse(node0.isIf());
697:       assertFalse(node0.isNE());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.isInstanceOf());
700:       assertFalse(node0.isParamList());
701:       assertFalse(node0.isWith());
702:       assertFalse(node0.isDefaultCase());
703:       assertFalse(node0.isCatch());
704:       assertFalse(node0.isRegExp());
705:       assertFalse(node0.isVar());
706:       assertFalse(node0.isThis());
707:       assertFalse(node0.isHook());
708:       assertEquals(0, node0.getChildCount());
709:       assertFalse(node0.isTry());
710:       assertFalse(node0.isBlock());
711:       assertFalse(node0.isSwitch());
712:       assertFalse(node0.isArrayLit());
713:       assertFalse(node0.isScript());
714:       assertFalse(node0.hasOneChild());
715:       assertFalse(node0.isLabelName());
716:       assertFalse(node0.isStringKey());
717:       assertFalse(node0.isNumber());
718:       assertEquals((-1), node0.getCharno());
719:       assertFalse(node0.isGetterDef());
720:       assertFalse(node0.equals((Object)node1));
721:       assertEquals(4095, Node.COLUMN_MASK);
722:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
723:       assertEquals(55, Node.INFERRED_FUNCTION);
724:       assertEquals(39, Node.EMPTY_BLOCK);
725:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
727:       assertEquals(57, Node.REFLECTED_OBJECT);
728:       assertEquals(29, Node.JSDOC_INFO_PROP);
729:       assertEquals(53, Node.INPUT_ID);
730:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
731:       assertEquals(52, Node.LENGTH);
732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(8, Node.FLAG_NO_THROWS);
735:       assertEquals(37, Node.OPT_ARG_NAME);
736:       assertEquals(48, Node.DIRECTIVES);
737:       assertEquals(49, Node.DIRECT_EVAL);
738:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
739:       assertEquals(56, Node.CHANGE_TIME);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
746:       assertEquals(57, Node.LAST_PROP);
747:       assertEquals(47, Node.IS_DISPATCHER);
748:       assertEquals(2, Node.POST_FLAG);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(50, Node.FREE_CALL);
752:       assertEquals(40, Node.ORIGINALNAME_PROP);
753:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
754:       assertEquals(43, Node.IS_CONSTANT_NAME);
755:       assertEquals(46, Node.IS_NAMESPACE);
756:       assertEquals(54, Node.SLASH_V);
757:       assertNotNull(iterable0);
758:       
759:       // Undeclared exception!
760:       try { 
761:         node0.setQuotedString();
762:         fail("Expecting exception: IllegalStateException");
763:       
764:       } catch(IllegalStateException e) {
765:          //
766:          // not a StringNode
767:          //
768:          verifyException("com.google.javascript.rhino.Node", e);
769:       }
770:   }
771: }
RegularFileObject[/tmp/EvoSuite_31_1605714092366/com/google/javascript/rhino/Node_31_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:32 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_31_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_31_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.common.collect.Iterators$12",
123:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
124:       "com.google.common.collect.Iterators$11",
125:       "com.google.javascript.rhino.jstype.JSType$1",
126:       "com.google.common.collect.EmptyImmutableBiMap",
127:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
128:       "com.google.common.base.Predicate",
129:       "com.google.javascript.rhino.jstype.VoidType",
130:       "com.google.common.base.Joiner",
131:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
132:       "com.google.common.collect.AbstractListMultimap",
133:       "com.google.common.collect.Iterables",
134:       "com.google.javascript.rhino.jstype.JSType",
135:       "com.google.common.collect.ImmutableAsList",
136:       "com.google.javascript.rhino.Node$StringNode",
137:       "com.google.javascript.rhino.jstype.ProxyObjectType",
138:       "com.google.common.collect.Sets$SetView",
139:       "com.google.common.collect.RegularImmutableAsList",
140:       "com.google.javascript.rhino.jstype.TemplateType",
141:       "com.google.javascript.rhino.jstype.NamedType",
142:       "com.google.common.collect.Iterators$13",
143:       "com.google.javascript.rhino.InputId",
144:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
145:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
146:       "com.google.common.collect.AbstractMapBasedMultimap",
147:       "com.google.common.collect.Lists$Partition",
148:       "com.google.common.collect.Lists",
149:       "com.google.javascript.rhino.Node$SideEffectFlags",
150:       "com.google.common.collect.UnmodifiableListIterator",
151:       "com.google.javascript.rhino.jstype.NullType",
152:       "com.google.common.collect.Lists$TransformingSequentialList",
153:       "com.google.javascript.rhino.ErrorReporter",
154:       "com.google.javascript.rhino.jstype.UnknownType",
155:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
156:       "com.google.javascript.rhino.jstype.ValueType",
157:       "com.google.javascript.rhino.jstype.PropertyMap",
158:       "com.google.javascript.rhino.Token",
159:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
160:       "com.google.common.collect.ObjectArrays",
161:       "com.google.javascript.rhino.jstype.StaticSourceFile",
162:       "com.google.javascript.rhino.jstype.BooleanType",
163:       "com.google.javascript.rhino.jstype.NoObjectType",
164:       "com.google.common.collect.AbstractIterator",
165:       "com.google.javascript.rhino.jstype.FunctionBuilder",
166:       "com.google.javascript.rhino.jstype.JSType$TypePair",
167:       "com.google.common.base.Joiner$MapJoiner",
168:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
169:       "com.google.common.collect.ImmutableList$1",
170:       "com.google.common.collect.MapDifference",
171:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
172:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
173:       "com.google.common.collect.Sets$ImprovedAbstractSet",
174:       "com.google.javascript.rhino.jstype.FunctionType",
175:       "com.google.common.base.Preconditions",
176:       "com.google.common.collect.UnmodifiableIterator",
177:       "com.google.javascript.rhino.JSDocInfo",
178:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
179:       "com.google.javascript.rhino.jstype.Property",
180:       "com.google.common.collect.ImmutableMapValues",
181:       "com.google.common.collect.ImmutableEntry",
182:       "com.google.common.base.Joiner$1",
183:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
184:       "com.google.common.base.Joiner$2",
185:       "com.google.common.collect.ImmutableCollection",
186:       "com.google.common.collect.ImmutableEnumMap",
187:       "com.google.javascript.rhino.jstype.TernaryValue",
188:       "com.google.javascript.rhino.Node$AncestorIterable",
189:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
190:       "com.google.common.collect.Lists$RandomAccessListWrapper",
191:       "com.google.common.collect.ImmutableEnumSet",
192:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
193:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
194:       "com.google.javascript.rhino.jstype.EnumElementType",
195:       "com.google.javascript.rhino.jstype.UnionType",
196:       "com.google.javascript.rhino.Node$NumberNode",
197:       "com.google.common.collect.SingletonImmutableList",
198:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
199:       "com.google.common.collect.ImmutableCollection$Builder",
200:       "com.google.javascript.rhino.jstype.StaticSlot",
201:       "com.google.common.collect.Iterators$6",
202:       "com.google.common.collect.BiMap",
203:       "com.google.common.collect.Iterators$7",
204:       "com.google.common.collect.AbstractSetMultimap",
205:       "com.google.common.base.Function",
206:       "com.google.common.collect.ImmutableSet",
207:       "com.google.common.collect.Lists$AbstractListWrapper",
208:       "com.google.common.collect.ImmutableMap",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.AbstractIndexedListIterator",
211:       "com.google.common.collect.Maps$1",
212:       "com.google.javascript.rhino.jstype.EnumType",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
234:       "com.google.common.collect.ImmutableList",
235:       "com.google.common.collect.SingletonImmutableBiMap",
236:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
237:       "com.google.javascript.rhino.jstype.StringType",
238:       "com.google.javascript.rhino.Node$AbstractPropListItem",
239:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
240:       "com.google.javascript.rhino.jstype.TemplatizedType",
241:       "com.google.javascript.rhino.jstype.Visitor",
242:       "com.google.javascript.rhino.jstype.NoResolvedType",
243:       "com.google.javascript.rhino.jstype.JSTypeNative",
244:       "com.google.javascript.rhino.jstype.AllType",
245:       "com.google.common.collect.Maps",
246:       "com.google.common.collect.SetMultimap",
247:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
248:       "com.google.common.collect.Maps$EntryTransformer",
249:       "com.google.javascript.rhino.JSTypeExpression",
250:       "com.google.common.collect.Iterators$MergingIterator"
251:     );
252:   } 
253: 
254:   private static void resetClasses() {
255:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_31_tmp__ESTest_scaffolding.class.getClassLoader()); 
256: 
257:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
258:       "com.google.javascript.rhino.Node",
259:       "com.google.javascript.rhino.Node$NumberNode",
260:       "com.google.javascript.rhino.Node$StringNode",
261:       "com.google.javascript.rhino.Node$AbstractPropListItem",
262:       "com.google.javascript.rhino.Node$ObjectPropListItem",
263:       "com.google.javascript.rhino.Node$IntPropListItem",
264:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
265:       "com.google.javascript.rhino.Node$AncestorIterable",
266:       "com.google.javascript.rhino.Node$NodeMismatch",
267:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
268:       "com.google.javascript.rhino.Node$SideEffectFlags",
269:       "com.google.javascript.rhino.Token",
270:       "com.google.common.base.Preconditions",
271:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
272:       "com.google.javascript.rhino.SimpleErrorReporter",
273:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
274:       "com.google.common.base.Joiner",
275:       "com.google.common.base.Joiner$1",
276:       "com.google.common.collect.Collections2",
277:       "com.google.common.base.Joiner$MapJoiner",
278:       "com.google.common.collect.Maps",
279:       "com.google.common.collect.AbstractMultimap",
280:       "com.google.common.collect.AbstractMapBasedMultimap",
281:       "com.google.common.collect.AbstractSetMultimap",
282:       "com.google.common.collect.LinkedHashMultimap",
283:       "com.google.common.collect.AbstractMapEntry",
284:       "com.google.common.collect.ImmutableEntry",
285:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
286:       "com.google.common.collect.AbstractListMultimap",
287:       "com.google.common.collect.ArrayListMultimap",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
289:       "com.google.common.collect.ImmutableCollection",
290:       "com.google.common.collect.RegularImmutableList",
291:       "com.google.common.collect.ObjectArrays",
292:       "com.google.common.collect.ImmutableList",
293:       "com.google.javascript.rhino.jstype.ModificationVisitor",
294:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
295:       "com.google.common.collect.ImmutableCollection$Builder",
296:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
297:       "com.google.common.collect.ImmutableList$Builder",
298:       "com.google.common.collect.UnmodifiableIterator",
299:       "com.google.common.collect.UnmodifiableListIterator",
300:       "com.google.common.collect.Iterators$1",
301:       "com.google.common.collect.Iterators$2",
302:       "com.google.common.collect.Iterators",
303:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
304:       "com.google.javascript.rhino.jstype.JSType$1",
305:       "com.google.javascript.rhino.jstype.JSType",
306:       "com.google.javascript.rhino.jstype.ObjectType",
307:       "com.google.javascript.rhino.jstype.ProxyObjectType",
308:       "com.google.javascript.rhino.jstype.TemplateType",
309:       "com.google.javascript.rhino.jstype.ValueType",
310:       "com.google.javascript.rhino.jstype.BooleanType",
311:       "com.google.javascript.rhino.jstype.NullType",
312:       "com.google.javascript.rhino.jstype.NumberType",
313:       "com.google.javascript.rhino.jstype.StringType",
314:       "com.google.javascript.rhino.jstype.UnknownType",
315:       "com.google.javascript.rhino.jstype.VoidType",
316:       "com.google.javascript.rhino.jstype.AllType",
317:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
318:       "com.google.common.collect.ImmutableMap",
319:       "com.google.common.collect.ImmutableBiMap",
320:       "com.google.common.collect.EmptyImmutableBiMap",
321:       "com.google.javascript.rhino.jstype.PropertyMap$1",
322:       "com.google.javascript.rhino.jstype.PropertyMap",
323:       "com.google.javascript.rhino.jstype.FunctionType",
324:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
325:       "com.google.javascript.rhino.jstype.ArrowType",
326:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
327:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
328:       "com.google.javascript.rhino.jstype.InstanceObjectType",
329:       "com.google.javascript.rhino.jstype.Property",
330:       "com.google.common.collect.Lists",
331:       "com.google.javascript.rhino.jstype.NoObjectType",
332:       "com.google.javascript.rhino.jstype.NoType",
333:       "com.google.javascript.rhino.jstype.NoResolvedType",
334:       "com.google.common.collect.SingletonImmutableList",
335:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
336:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
337:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
338:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
339:       "com.google.javascript.rhino.jstype.UnionType",
340:       "com.google.javascript.rhino.jstype.FunctionBuilder",
341:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
342:       "com.google.javascript.rhino.jstype.EnumType",
343:       "com.google.javascript.rhino.jstype.EnumElementType",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.JSDocInfo",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
347:       "com.google.common.collect.Sets",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.common.base.Objects",
351:       "com.google.javascript.rhino.jstype.TernaryValue",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.common.collect.Platform",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
357:     );
358:   }
359: }

[MASTER] 15:41:33.099 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-254));
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAdd());
assertEquals((-254), node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);

node0.detachChildren();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAdd());
assertEquals((-254), node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Object object0 = node0.getProp((-254));
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAdd());
assertEquals((-254), node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNull(object0);

int int0 = node0.getIntProp((-254));
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAdd());
assertEquals((-254), node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, int0);

Node node1 = Node.newNumber(0.0);
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node1);

Object object1 = node0.getProp(2554);
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAdd());
assertEquals((-254), node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNull(object1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAdd());
assertEquals((-254), node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);

node0.setQuotedString();

