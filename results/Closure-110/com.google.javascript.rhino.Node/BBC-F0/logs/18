* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 7931
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 911718920
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 15:32:48.557 [logback-1] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:34:01.993 [logback-1] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 323s and 16 generations, 12026 statements, best individual has fitness: 5007.0
[MASTER] 15:38:15.527 [logback-2] WARN  TimeController - Phase SEARCH lasted too long, 33 seconds more than allowed.
* Minimizing test suite
[MASTER] 15:39:22.451 [logback-2] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 853
* Number of covered goals: 667
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 62%
* Total number of goals: 714
* Number of covered goals: 443
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 60
* Number of covered goals: 60
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 60%
* Total number of goals: 530
* Number of covered goals: 319
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 16%
* Total number of goals: 4536
* Number of covered goals: 739
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 81%
* Total number of goals: 233
* Number of covered goals: 188
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 75%
* Total number of goals: 233
* Number of covered goals: 175
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 714
* Number of covered goals: 370
* Generated 183 tests with total length 3583
* Resulting test suite's coverage: 58% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:40:44.406 [logback-2] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7796833333333333% of time used, but only 7/183 tests minimized), falling back to using all assertions
[MASTER] 15:40:57.950 [logback-2] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 15:41:13.234 [logback-2] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 15:41:26.532 [logback-1] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_8_1605714082418/com/google/javascript/rhino/Node_8_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_8_1605714082418/com/google/javascript/rhino/Node_8_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:26.532 [logback-1] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:26.532 [logback-1] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:26.539 [logback-1] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 405
[MASTER] 15:41:26.589 [logback-1] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_8_1605714082418/com/google/javascript/rhino/Node_8_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:22 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_8_tmp__ESTest extends Node_8_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(0);
24:       assertFalse(node0.isHook());
25:       assertEquals(0, node0.getType());
26:       assertFalse(node0.isFalse());
27:       assertFalse(node0.isInc());
28:       assertFalse(node0.isComma());
29:       assertFalse(node0.isThis());
30:       assertFalse(node0.isGetProp());
31:       assertFalse(node0.isCase());
32:       assertFalse(node0.isThrow());
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isIn());
35:       assertFalse(node0.isWith());
36:       assertFalse(node0.isNE());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.isBreak());
39:       assertFalse(node0.isDelProp());
40:       assertFalse(node0.isIf());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isArrayLit());
43:       assertFalse(node0.isEmpty());
44:       assertFalse(node0.isRegExp());
45:       assertFalse(node0.isScript());
46:       assertFalse(node0.isFor());
47:       assertFalse(node0.isTry());
48:       assertFalse(node0.isDefaultCase());
49:       assertFalse(node0.isAssignAdd());
50:       assertEquals(0, node0.getChildCount());
51:       assertFalse(node0.isLabel());
52:       assertFalse(node0.isNumber());
53:       assertFalse(node0.isGetterDef());
54:       assertEquals((-1), node0.getCharno());
55:       assertFalse(node0.isLabelName());
56:       assertFalse(node0.isStringKey());
57:       assertFalse(node0.isParamList());
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isCall());
61:       assertFalse(node0.isAdd());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isNew());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.isCatch());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isTrue());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isFunction());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isContinue());
87:       assertEquals((-1), node0.getSourcePosition());
88:       assertFalse(node0.isDebugger());
89:       assertFalse(node0.isAnd());
90:       assertNotNull(node0);
91:       assertEquals(53, Node.INPUT_ID);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(56, Node.CHANGE_TIME);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(37, Node.OPT_ARG_NAME);
98:       assertEquals(2, Node.POST_FLAG);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(8, Node.FLAG_NO_THROWS);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(57, Node.LAST_PROP);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
109:       assertEquals(52, Node.LENGTH);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(48, Node.DIRECTIVES);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(12, Node.COLUMN_BITS);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
125:       assertEquals(1, Node.DECR_FLAG);
126:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
127:       
128:       int int0 = node0.getSourceOffset();
129:       assertFalse(node0.isHook());
130:       assertEquals(0, node0.getType());
131:       assertFalse(node0.isFalse());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isComma());
134:       assertFalse(node0.isThis());
135:       assertFalse(node0.isGetProp());
136:       assertFalse(node0.isCase());
137:       assertFalse(node0.isThrow());
138:       assertFalse(node0.isInstanceOf());
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isWith());
141:       assertFalse(node0.isNE());
142:       assertFalse(node0.isExprResult());
143:       assertFalse(node0.isBreak());
144:       assertFalse(node0.isDelProp());
145:       assertFalse(node0.isIf());
146:       assertFalse(node0.hasOneChild());
147:       assertFalse(node0.isArrayLit());
148:       assertFalse(node0.isEmpty());
149:       assertFalse(node0.isRegExp());
150:       assertFalse(node0.isScript());
151:       assertFalse(node0.isFor());
152:       assertFalse(node0.isTry());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.isAssignAdd());
155:       assertEquals(0, node0.getChildCount());
156:       assertFalse(node0.isLabel());
157:       assertFalse(node0.isNumber());
158:       assertFalse(node0.isGetterDef());
159:       assertEquals((-1), node0.getCharno());
160:       assertFalse(node0.isLabelName());
161:       assertFalse(node0.isStringKey());
162:       assertFalse(node0.isParamList());
163:       assertFalse(node0.isSwitch());
164:       assertFalse(node0.isVar());
165:       assertFalse(node0.isCall());
166:       assertFalse(node0.isAdd());
167:       assertFalse(node0.isSetterDef());
168:       assertFalse(node0.isBlock());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isDo());
171:       assertFalse(node0.isWhile());
172:       assertFalse(node0.isCatch());
173:       assertEquals((-1), node0.getLineno());
174:       assertFalse(node0.isReturn());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isTrue());
179:       assertFalse(node0.isName());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.isGetElem());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isString());
190:       assertFalse(node0.isObjectLit());
191:       assertFalse(node0.isContinue());
192:       assertEquals((-1), node0.getSourcePosition());
193:       assertFalse(node0.isDebugger());
194:       assertFalse(node0.isAnd());
195:       assertEquals((-1), int0);
196:       assertEquals(53, Node.INPUT_ID);
197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(56, Node.CHANGE_TIME);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(37, Node.OPT_ARG_NAME);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(57, Node.LAST_PROP);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(39, Node.EMPTY_BLOCK);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
220:       assertEquals(49, Node.DIRECT_EVAL);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
230:       assertEquals(1, Node.DECR_FLAG);
231:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
232:       
233:       String string0 = node0.getSourceFileName();
234:       assertFalse(node0.isHook());
235:       assertEquals(0, node0.getType());
236:       assertFalse(node0.isFalse());
237:       assertFalse(node0.isInc());
238:       assertFalse(node0.isComma());
239:       assertFalse(node0.isThis());
240:       assertFalse(node0.isGetProp());
241:       assertFalse(node0.isCase());
242:       assertFalse(node0.isThrow());
243:       assertFalse(node0.isInstanceOf());
244:       assertFalse(node0.isIn());
245:       assertFalse(node0.isWith());
246:       assertFalse(node0.isNE());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.isBreak());
249:       assertFalse(node0.isDelProp());
250:       assertFalse(node0.isIf());
251:       assertFalse(node0.hasOneChild());
252:       assertFalse(node0.isArrayLit());
253:       assertFalse(node0.isEmpty());
254:       assertFalse(node0.isRegExp());
255:       assertFalse(node0.isScript());
256:       assertFalse(node0.isFor());
257:       assertFalse(node0.isTry());
258:       assertFalse(node0.isDefaultCase());
259:       assertFalse(node0.isAssignAdd());
260:       assertEquals(0, node0.getChildCount());
261:       assertFalse(node0.isLabel());
262:       assertFalse(node0.isNumber());
263:       assertFalse(node0.isGetterDef());
264:       assertEquals((-1), node0.getCharno());
265:       assertFalse(node0.isLabelName());
266:       assertFalse(node0.isStringKey());
267:       assertFalse(node0.isParamList());
268:       assertFalse(node0.isSwitch());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isCall());
271:       assertFalse(node0.isAdd());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isBlock());
274:       assertFalse(node0.isNew());
275:       assertFalse(node0.isDo());
276:       assertFalse(node0.isWhile());
277:       assertFalse(node0.isCatch());
278:       assertEquals((-1), node0.getLineno());
279:       assertFalse(node0.isReturn());
280:       assertFalse(node0.isOr());
281:       assertFalse(node0.hasMoreThanOneChild());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isTrue());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isCast());
287:       assertFalse(node0.isGetElem());
288:       assertFalse(node0.isAssign());
289:       assertFalse(node0.isFunction());
290:       assertFalse(node0.isTypeOf());
291:       assertFalse(node0.isDec());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isNot());
294:       assertFalse(node0.isString());
295:       assertFalse(node0.isObjectLit());
296:       assertFalse(node0.isContinue());
297:       assertEquals((-1), node0.getSourcePosition());
298:       assertFalse(node0.isDebugger());
299:       assertFalse(node0.isAnd());
300:       assertNull(string0);
301:       assertEquals(53, Node.INPUT_ID);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(37, Node.OPT_ARG_NAME);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
310:       assertEquals(8, Node.FLAG_NO_THROWS);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(57, Node.LAST_PROP);
315:       assertEquals(55, Node.INFERRED_FUNCTION);
316:       assertEquals(39, Node.EMPTY_BLOCK);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(54, Node.SLASH_V);
321:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(30, Node.VAR_ARGS_NAME);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(40, Node.ORIGINALNAME_PROP);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(46, Node.IS_NAMESPACE);
330:       assertEquals(4095, Node.COLUMN_MASK);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(1, Node.DECR_FLAG);
336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
337:       
338:       Iterable<Node> iterable0 = node0.children();
339:       assertFalse(node0.isHook());
340:       assertEquals(0, node0.getType());
341:       assertFalse(node0.isFalse());
342:       assertFalse(node0.isInc());
343:       assertFalse(node0.isComma());
344:       assertFalse(node0.isThis());
345:       assertFalse(node0.isGetProp());
346:       assertFalse(node0.isCase());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isInstanceOf());
349:       assertFalse(node0.isIn());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.isNE());
352:       assertFalse(node0.isExprResult());
353:       assertFalse(node0.isBreak());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isIf());
356:       assertFalse(node0.hasOneChild());
357:       assertFalse(node0.isArrayLit());
358:       assertFalse(node0.isEmpty());
359:       assertFalse(node0.isRegExp());
360:       assertFalse(node0.isScript());
361:       assertFalse(node0.isFor());
362:       assertFalse(node0.isTry());
363:       assertFalse(node0.isDefaultCase());
364:       assertFalse(node0.isAssignAdd());
365:       assertEquals(0, node0.getChildCount());
366:       assertFalse(node0.isLabel());
367:       assertFalse(node0.isNumber());
368:       assertFalse(node0.isGetterDef());
369:       assertEquals((-1), node0.getCharno());
370:       assertFalse(node0.isLabelName());
371:       assertFalse(node0.isStringKey());
372:       assertFalse(node0.isParamList());
373:       assertFalse(node0.isSwitch());
374:       assertFalse(node0.isVar());
375:       assertFalse(node0.isCall());
376:       assertFalse(node0.isAdd());
377:       assertFalse(node0.isSetterDef());
378:       assertFalse(node0.isBlock());
379:       assertFalse(node0.isNew());
380:       assertFalse(node0.isDo());
381:       assertFalse(node0.isWhile());
382:       assertFalse(node0.isCatch());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isReturn());
385:       assertFalse(node0.isOr());
386:       assertFalse(node0.hasMoreThanOneChild());
387:       assertFalse(node0.isNull());
388:       assertFalse(node0.isTrue());
389:       assertFalse(node0.isName());
390:       assertFalse(node0.isVoid());
391:       assertFalse(node0.isCast());
392:       assertFalse(node0.isGetElem());
393:       assertFalse(node0.isAssign());
394:       assertFalse(node0.isFunction());
395:       assertFalse(node0.isTypeOf());
396:       assertFalse(node0.isDec());
397:       assertFalse(node0.hasChildren());
398:       assertFalse(node0.isNot());
399:       assertFalse(node0.isString());
400:       assertFalse(node0.isObjectLit());
401:       assertFalse(node0.isContinue());
402:       assertEquals((-1), node0.getSourcePosition());
403:       assertFalse(node0.isDebugger());
404:       assertFalse(node0.isAnd());
405:       assertFalse(iterable0.contains(node0));
406:       assertNotNull(iterable0);
407:       assertEquals(53, Node.INPUT_ID);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
410:       assertEquals(36, Node.QUOTED_PROP);
411:       assertEquals(56, Node.CHANGE_TIME);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(37, Node.OPT_ARG_NAME);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(8, Node.FLAG_NO_THROWS);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(57, Node.LAST_PROP);
421:       assertEquals(55, Node.INFERRED_FUNCTION);
422:       assertEquals(39, Node.EMPTY_BLOCK);
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(57, Node.REFLECTED_OBJECT);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(48, Node.DIRECTIVES);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(4095, Node.COLUMN_MASK);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
439:       assertEquals(50, Node.FREE_CALL);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(1, Node.DECR_FLAG);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       
444:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
445:       assertFalse(node0.isHook());
446:       assertEquals(0, node0.getType());
447:       assertFalse(node0.isFalse());
448:       assertFalse(node0.isInc());
449:       assertFalse(node0.isComma());
450:       assertFalse(node0.isThis());
451:       assertFalse(node0.isGetProp());
452:       assertFalse(node0.isCase());
453:       assertFalse(node0.isThrow());
454:       assertFalse(node0.isInstanceOf());
455:       assertFalse(node0.isIn());
456:       assertFalse(node0.isWith());
457:       assertFalse(node0.isNE());
458:       assertFalse(node0.isExprResult());
459:       assertFalse(node0.isBreak());
460:       assertFalse(node0.isDelProp());
461:       assertFalse(node0.isIf());
462:       assertFalse(node0.hasOneChild());
463:       assertFalse(node0.isArrayLit());
464:       assertFalse(node0.isEmpty());
465:       assertFalse(node0.isRegExp());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isFor());
468:       assertFalse(node0.isTry());
469:       assertFalse(node0.isDefaultCase());
470:       assertFalse(node0.isAssignAdd());
471:       assertEquals(0, node0.getChildCount());
472:       assertFalse(node0.isLabel());
473:       assertFalse(node0.isNumber());
474:       assertFalse(node0.isGetterDef());
475:       assertEquals((-1), node0.getCharno());
476:       assertFalse(node0.isLabelName());
477:       assertFalse(node0.isStringKey());
478:       assertFalse(node0.isParamList());
479:       assertFalse(node0.isSwitch());
480:       assertFalse(node0.isVar());
481:       assertFalse(node0.isCall());
482:       assertFalse(node0.isAdd());
483:       assertFalse(node0.isSetterDef());
484:       assertFalse(node0.isBlock());
485:       assertFalse(node0.isNew());
486:       assertFalse(node0.isDo());
487:       assertFalse(node0.isWhile());
488:       assertFalse(node0.isCatch());
489:       assertEquals((-1), node0.getLineno());
490:       assertFalse(node0.isReturn());
491:       assertFalse(node0.isOr());
492:       assertFalse(node0.hasMoreThanOneChild());
493:       assertFalse(node0.isNull());
494:       assertFalse(node0.isTrue());
495:       assertFalse(node0.isName());
496:       assertFalse(node0.isVoid());
497:       assertFalse(node0.isCast());
498:       assertFalse(node0.isGetElem());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isFunction());
501:       assertFalse(node0.isTypeOf());
502:       assertFalse(node0.isDec());
503:       assertFalse(node0.hasChildren());
504:       assertFalse(node0.isNot());
505:       assertFalse(node0.isString());
506:       assertFalse(node0.isObjectLit());
507:       assertFalse(node0.isContinue());
508:       assertEquals((-1), node0.getSourcePosition());
509:       assertFalse(node0.isDebugger());
510:       assertFalse(node0.isAnd());
511:       assertNotNull(node_FileLevelJsDocBuilder0);
512:       assertEquals(53, Node.INPUT_ID);
513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(36, Node.QUOTED_PROP);
516:       assertEquals(56, Node.CHANGE_TIME);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(37, Node.OPT_ARG_NAME);
519:       assertEquals(2, Node.POST_FLAG);
520:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
521:       assertEquals(8, Node.FLAG_NO_THROWS);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
524:       assertEquals(29, Node.JSDOC_INFO_PROP);
525:       assertEquals(57, Node.LAST_PROP);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(39, Node.EMPTY_BLOCK);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(54, Node.SLASH_V);
532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
533:       assertEquals(57, Node.REFLECTED_OBJECT);
534:       assertEquals(30, Node.VAR_ARGS_NAME);
535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
536:       assertEquals(49, Node.DIRECT_EVAL);
537:       assertEquals(40, Node.ORIGINALNAME_PROP);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(50, Node.FREE_CALL);
545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
546:       assertEquals(1, Node.DECR_FLAG);
547:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
548:       
549:       boolean boolean0 = node0.isLocalResultCall();
550:       assertFalse(node0.isHook());
551:       assertEquals(0, node0.getType());
552:       assertFalse(node0.isFalse());
553:       assertFalse(node0.isInc());
554:       assertFalse(node0.isComma());
555:       assertFalse(node0.isThis());
556:       assertFalse(node0.isGetProp());
557:       assertFalse(node0.isCase());
558:       assertFalse(node0.isThrow());
559:       assertFalse(node0.isInstanceOf());
560:       assertFalse(node0.isIn());
561:       assertFalse(node0.isWith());
562:       assertFalse(node0.isNE());
563:       assertFalse(node0.isExprResult());
564:       assertFalse(node0.isBreak());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.isIf());
567:       assertFalse(node0.hasOneChild());
568:       assertFalse(node0.isArrayLit());
569:       assertFalse(node0.isEmpty());
570:       assertFalse(node0.isRegExp());
571:       assertFalse(node0.isScript());
572:       assertFalse(node0.isFor());
573:       assertFalse(node0.isTry());
574:       assertFalse(node0.isDefaultCase());
575:       assertFalse(node0.isAssignAdd());
576:       assertEquals(0, node0.getChildCount());
577:       assertFalse(node0.isLabel());
578:       assertFalse(node0.isNumber());
579:       assertFalse(node0.isGetterDef());
580:       assertEquals((-1), node0.getCharno());
581:       assertFalse(node0.isLabelName());
582:       assertFalse(node0.isStringKey());
583:       assertFalse(node0.isParamList());
584:       assertFalse(node0.isSwitch());
585:       assertFalse(node0.isVar());
586:       assertFalse(node0.isCall());
587:       assertFalse(node0.isAdd());
588:       assertFalse(node0.isSetterDef());
589:       assertFalse(node0.isBlock());
590:       assertFalse(node0.isNew());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.isCatch());
594:       assertEquals((-1), node0.getLineno());
595:       assertFalse(node0.isReturn());
596:       assertFalse(node0.isOr());
597:       assertFalse(node0.hasMoreThanOneChild());
598:       assertFalse(node0.isNull());
599:       assertFalse(node0.isTrue());
600:       assertFalse(node0.isName());
601:       assertFalse(node0.isVoid());
602:       assertFalse(node0.isCast());
603:       assertFalse(node0.isGetElem());
604:       assertFalse(node0.isAssign());
605:       assertFalse(node0.isFunction());
606:       assertFalse(node0.isTypeOf());
607:       assertFalse(node0.isDec());
608:       assertFalse(node0.hasChildren());
609:       assertFalse(node0.isNot());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.isObjectLit());
612:       assertFalse(node0.isContinue());
613:       assertEquals((-1), node0.getSourcePosition());
614:       assertFalse(node0.isDebugger());
615:       assertFalse(node0.isAnd());
616:       assertFalse(boolean0);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(36, Node.QUOTED_PROP);
621:       assertEquals(56, Node.CHANGE_TIME);
622:       assertEquals(43, Node.IS_CONSTANT_NAME);
623:       assertEquals(37, Node.OPT_ARG_NAME);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(8, Node.FLAG_NO_THROWS);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(29, Node.JSDOC_INFO_PROP);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(55, Node.INFERRED_FUNCTION);
632:       assertEquals(39, Node.EMPTY_BLOCK);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(54, Node.SLASH_V);
637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
638:       assertEquals(57, Node.REFLECTED_OBJECT);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(49, Node.DIRECT_EVAL);
642:       assertEquals(40, Node.ORIGINALNAME_PROP);
643:       assertEquals(48, Node.DIRECTIVES);
644:       assertEquals(32, Node.INCRDECR_PROP);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(12, Node.COLUMN_BITS);
648:       assertEquals(51, Node.STATIC_SOURCE_FILE);
649:       assertEquals(50, Node.FREE_CALL);
650:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
651:       assertEquals(1, Node.DECR_FLAG);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       
654:       boolean boolean1 = node0.mayMutateArguments();
655:       assertFalse(boolean1 == boolean0);
656:       assertFalse(node0.isHook());
657:       assertEquals(0, node0.getType());
658:       assertFalse(node0.isFalse());
659:       assertFalse(node0.isInc());
660:       assertFalse(node0.isComma());
661:       assertFalse(node0.isThis());
662:       assertFalse(node0.isGetProp());
663:       assertFalse(node0.isCase());
664:       assertFalse(node0.isThrow());
665:       assertFalse(node0.isInstanceOf());
666:       assertFalse(node0.isIn());
667:       assertFalse(node0.isWith());
668:       assertFalse(node0.isNE());
669:       assertFalse(node0.isExprResult());
670:       assertFalse(node0.isBreak());
671:       assertFalse(node0.isDelProp());
672:       assertFalse(node0.isIf());
673:       assertFalse(node0.hasOneChild());
674:       assertFalse(node0.isArrayLit());
675:       assertFalse(node0.isEmpty());
676:       assertFalse(node0.isRegExp());
677:       assertFalse(node0.isScript());
678:       assertFalse(node0.isFor());
679:       assertFalse(node0.isTry());
680:       assertFalse(node0.isDefaultCase());
681:       assertFalse(node0.isAssignAdd());
682:       assertEquals(0, node0.getChildCount());
683:       assertFalse(node0.isLabel());
684:       assertFalse(node0.isNumber());
685:       assertFalse(node0.isGetterDef());
686:       assertEquals((-1), node0.getCharno());
687:       assertFalse(node0.isLabelName());
688:       assertFalse(node0.isStringKey());
689:       assertFalse(node0.isParamList());
690:       assertFalse(node0.isSwitch());
691:       assertFalse(node0.isVar());
692:       assertFalse(node0.isCall());
693:       assertFalse(node0.isAdd());
694:       assertFalse(node0.isSetterDef());
695:       assertFalse(node0.isBlock());
696:       assertFalse(node0.isNew());
697:       assertFalse(node0.isDo());
698:       assertFalse(node0.isWhile());
699:       assertFalse(node0.isCatch());
700:       assertEquals((-1), node0.getLineno());
701:       assertFalse(node0.isReturn());
702:       assertFalse(node0.isOr());
703:       assertFalse(node0.hasMoreThanOneChild());
704:       assertFalse(node0.isNull());
705:       assertFalse(node0.isTrue());
706:       assertFalse(node0.isName());
707:       assertFalse(node0.isVoid());
708:       assertFalse(node0.isCast());
709:       assertFalse(node0.isGetElem());
710:       assertFalse(node0.isAssign());
711:       assertFalse(node0.isFunction());
712:       assertFalse(node0.isTypeOf());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.hasChildren());
715:       assertFalse(node0.isNot());
716:       assertFalse(node0.isString());
717:       assertFalse(node0.isObjectLit());
718:       assertFalse(node0.isContinue());
719:       assertEquals((-1), node0.getSourcePosition());
720:       assertFalse(node0.isDebugger());
721:       assertFalse(node0.isAnd());
722:       assertTrue(boolean1);
723:       assertEquals(53, Node.INPUT_ID);
724:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
725:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
726:       assertEquals(36, Node.QUOTED_PROP);
727:       assertEquals(56, Node.CHANGE_TIME);
728:       assertEquals(43, Node.IS_CONSTANT_NAME);
729:       assertEquals(37, Node.OPT_ARG_NAME);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
732:       assertEquals(8, Node.FLAG_NO_THROWS);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(55, Node.INFERRED_FUNCTION);
738:       assertEquals(39, Node.EMPTY_BLOCK);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
741:       assertEquals(52, Node.LENGTH);
742:       assertEquals(54, Node.SLASH_V);
743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(49, Node.DIRECT_EVAL);
748:       assertEquals(40, Node.ORIGINALNAME_PROP);
749:       assertEquals(48, Node.DIRECTIVES);
750:       assertEquals(32, Node.INCRDECR_PROP);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(4095, Node.COLUMN_MASK);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
757:       assertEquals(1, Node.DECR_FLAG);
758:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
759:       
760:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
761:       assertFalse(node0.isHook());
762:       assertEquals(0, node0.getType());
763:       assertFalse(node0.isFalse());
764:       assertFalse(node0.isInc());
765:       assertFalse(node0.isComma());
766:       assertFalse(node0.isThis());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.isCase());
769:       assertFalse(node0.isThrow());
770:       assertFalse(node0.isInstanceOf());
771:       assertFalse(node0.isIn());
772:       assertFalse(node0.isWith());
773:       assertFalse(node0.isNE());
774:       assertFalse(node0.isExprResult());
775:       assertFalse(node0.isBreak());
776:       assertFalse(node0.isDelProp());
777:       assertFalse(node0.isIf());
778:       assertFalse(node0.hasOneChild());
779:       assertFalse(node0.isArrayLit());
780:       assertFalse(node0.isEmpty());
781:       assertFalse(node0.isRegExp());
782:       assertFalse(node0.isScript());
783:       assertFalse(node0.isFor());
784:       assertFalse(node0.isTry());
785:       assertFalse(node0.isDefaultCase());
786:       assertFalse(node0.isAssignAdd());
787:       assertEquals(0, node0.getChildCount());
788:       assertFalse(node0.isLabel());
789:       assertFalse(node0.isNumber());
790:       assertFalse(node0.isGetterDef());
791:       assertEquals((-1), node0.getCharno());
792:       assertFalse(node0.isLabelName());
793:       assertFalse(node0.isStringKey());
794:       assertFalse(node0.isParamList());
795:       assertFalse(node0.isSwitch());
796:       assertFalse(node0.isVar());
797:       assertFalse(node0.isCall());
798:       assertFalse(node0.isAdd());
799:       assertFalse(node0.isSetterDef());
800:       assertFalse(node0.isBlock());
801:       assertFalse(node0.isNew());
802:       assertFalse(node0.isDo());
803:       assertFalse(node0.isWhile());
804:       assertFalse(node0.isCatch());
805:       assertEquals((-1), node0.getLineno());
806:       assertFalse(node0.isReturn());
807:       assertFalse(node0.isOr());
808:       assertFalse(node0.hasMoreThanOneChild());
809:       assertFalse(node0.isNull());
810:       assertFalse(node0.isTrue());
811:       assertFalse(node0.isName());
812:       assertFalse(node0.isVoid());
813:       assertFalse(node0.isCast());
814:       assertFalse(node0.isGetElem());
815:       assertFalse(node0.isAssign());
816:       assertFalse(node0.isFunction());
817:       assertFalse(node0.isTypeOf());
818:       assertFalse(node0.isDec());
819:       assertFalse(node0.hasChildren());
820:       assertFalse(node0.isNot());
821:       assertFalse(node0.isString());
822:       assertFalse(node0.isObjectLit());
823:       assertFalse(node0.isContinue());
824:       assertEquals((-1), node0.getSourcePosition());
825:       assertFalse(node0.isDebugger());
826:       assertFalse(node0.isAnd());
827:       assertNull(jSDocInfo0);
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
831:       assertEquals(36, Node.QUOTED_PROP);
832:       assertEquals(56, Node.CHANGE_TIME);
833:       assertEquals(43, Node.IS_CONSTANT_NAME);
834:       assertEquals(37, Node.OPT_ARG_NAME);
835:       assertEquals(2, Node.POST_FLAG);
836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:       assertEquals(8, Node.FLAG_NO_THROWS);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(57, Node.LAST_PROP);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(39, Node.EMPTY_BLOCK);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(52, Node.LENGTH);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(57, Node.REFLECTED_OBJECT);
850:       assertEquals(30, Node.VAR_ARGS_NAME);
851:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertEquals(32, Node.INCRDECR_PROP);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(4095, Node.COLUMN_MASK);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
860:       assertEquals(50, Node.FREE_CALL);
861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
862:       assertEquals(1, Node.DECR_FLAG);
863:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
864:       
865:       node0.setIsSyntheticBlock(false);
866:       assertFalse(node0.isHook());
867:       assertEquals(0, node0.getType());
868:       assertFalse(node0.isFalse());
869:       assertFalse(node0.isInc());
870:       assertFalse(node0.isComma());
871:       assertFalse(node0.isThis());
872:       assertFalse(node0.isGetProp());
873:       assertFalse(node0.isCase());
874:       assertFalse(node0.isThrow());
875:       assertFalse(node0.isInstanceOf());
876:       assertFalse(node0.isIn());
877:       assertFalse(node0.isWith());
878:       assertFalse(node0.isNE());
879:       assertFalse(node0.isExprResult());
880:       assertFalse(node0.isBreak());
881:       assertFalse(node0.isDelProp());
882:       assertFalse(node0.isIf());
883:       assertFalse(node0.hasOneChild());
884:       assertFalse(node0.isArrayLit());
885:       assertFalse(node0.isEmpty());
886:       assertFalse(node0.isRegExp());
887:       assertFalse(node0.isScript());
888:       assertFalse(node0.isFor());
889:       assertFalse(node0.isTry());
890:       assertFalse(node0.isDefaultCase());
891:       assertFalse(node0.isAssignAdd());
892:       assertEquals(0, node0.getChildCount());
893:       assertFalse(node0.isLabel());
894:       assertFalse(node0.isNumber());
895:       assertFalse(node0.isGetterDef());
896:       assertEquals((-1), node0.getCharno());
897:       assertFalse(node0.isLabelName());
898:       assertFalse(node0.isStringKey());
899:       assertFalse(node0.isParamList());
900:       assertFalse(node0.isSwitch());
901:       assertFalse(node0.isVar());
902:       assertFalse(node0.isCall());
903:       assertFalse(node0.isAdd());
904:       assertFalse(node0.isSetterDef());
905:       assertFalse(node0.isBlock());
906:       assertFalse(node0.isNew());
907:       assertFalse(node0.isDo());
908:       assertFalse(node0.isWhile());
909:       assertFalse(node0.isCatch());
910:       assertEquals((-1), node0.getLineno());
911:       assertFalse(node0.isReturn());
912:       assertFalse(node0.isOr());
913:       assertFalse(node0.hasMoreThanOneChild());
914:       assertFalse(node0.isNull());
915:       assertFalse(node0.isTrue());
916:       assertFalse(node0.isName());
917:       assertFalse(node0.isVoid());
918:       assertFalse(node0.isCast());
919:       assertFalse(node0.isGetElem());
920:       assertFalse(node0.isAssign());
921:       assertFalse(node0.isFunction());
922:       assertFalse(node0.isTypeOf());
923:       assertFalse(node0.isDec());
924:       assertFalse(node0.hasChildren());
925:       assertFalse(node0.isNot());
926:       assertFalse(node0.isString());
927:       assertFalse(node0.isObjectLit());
928:       assertFalse(node0.isContinue());
929:       assertEquals((-1), node0.getSourcePosition());
930:       assertFalse(node0.isDebugger());
931:       assertFalse(node0.isAnd());
932:       assertEquals(53, Node.INPUT_ID);
933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
935:       assertEquals(36, Node.QUOTED_PROP);
936:       assertEquals(56, Node.CHANGE_TIME);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(37, Node.OPT_ARG_NAME);
939:       assertEquals(2, Node.POST_FLAG);
940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
941:       assertEquals(8, Node.FLAG_NO_THROWS);
942:       assertEquals(47, Node.IS_DISPATCHER);
943:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
944:       assertEquals(29, Node.JSDOC_INFO_PROP);
945:       assertEquals(57, Node.LAST_PROP);
946:       assertEquals(55, Node.INFERRED_FUNCTION);
947:       assertEquals(39, Node.EMPTY_BLOCK);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(15, Node.NO_SIDE_EFFECTS);
950:       assertEquals(52, Node.LENGTH);
951:       assertEquals(54, Node.SLASH_V);
952:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
953:       assertEquals(57, Node.REFLECTED_OBJECT);
954:       assertEquals(30, Node.VAR_ARGS_NAME);
955:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
956:       assertEquals(49, Node.DIRECT_EVAL);
957:       assertEquals(40, Node.ORIGINALNAME_PROP);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(32, Node.INCRDECR_PROP);
960:       assertEquals(46, Node.IS_NAMESPACE);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(51, Node.STATIC_SOURCE_FILE);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
968:       
969:       Node node1 = new Node((-113), node0, node0, node0, 152, 49);
970:       assertFalse(node1.equals((Object)node0));
971:       assertFalse(node0.isHook());
972:       assertEquals(0, node0.getType());
973:       assertFalse(node0.isFalse());
974:       assertFalse(node0.isInc());
975:       assertFalse(node0.isComma());
976:       assertFalse(node0.isThis());
977:       assertFalse(node0.isGetProp());
978:       assertFalse(node0.isCase());
979:       assertFalse(node0.isThrow());
980:       assertFalse(node0.isInstanceOf());
981:       assertFalse(node0.isIn());
982:       assertFalse(node0.isWith());
983:       assertFalse(node0.isNE());
984:       assertFalse(node0.isExprResult());
985:       assertFalse(node0.isBreak());
986:       assertFalse(node0.isDelProp());
987:       assertFalse(node0.isIf());
988:       assertFalse(node0.hasOneChild());
989:       assertFalse(node0.isArrayLit());
990:       assertFalse(node0.isEmpty());
991:       assertFalse(node0.isRegExp());
992:       assertFalse(node0.isScript());
993:       assertFalse(node0.isFor());
994:       assertFalse(node0.isTry());
995:       assertFalse(node0.isDefaultCase());
996:       assertFalse(node0.isAssignAdd());
997:       assertEquals(0, node0.getChildCount());
998:       assertFalse(node0.isLabel());
999:       assertFalse(node0.isNumber());
1000:       assertFalse(node0.isGetterDef());
1001:       assertEquals((-1), node0.getCharno());
1002:       assertFalse(node0.isLabelName());
1003:       assertFalse(node0.isStringKey());
1004:       assertFalse(node0.isParamList());
1005:       assertFalse(node0.isSwitch());
1006:       assertFalse(node0.isVar());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isAdd());
1009:       assertFalse(node0.isSetterDef());
1010:       assertFalse(node0.isBlock());
1011:       assertFalse(node0.isNew());
1012:       assertFalse(node0.isDo());
1013:       assertFalse(node0.isWhile());
1014:       assertFalse(node0.isCatch());
1015:       assertEquals((-1), node0.getLineno());
1016:       assertFalse(node0.isReturn());
1017:       assertFalse(node0.isOr());
1018:       assertFalse(node0.hasMoreThanOneChild());
1019:       assertFalse(node0.isNull());
1020:       assertFalse(node0.isTrue());
1021:       assertFalse(node0.isName());
1022:       assertFalse(node0.isVoid());
1023:       assertFalse(node0.isCast());
1024:       assertFalse(node0.isGetElem());
1025:       assertFalse(node0.isAssign());
1026:       assertFalse(node0.isFunction());
1027:       assertFalse(node0.isTypeOf());
1028:       assertFalse(node0.isDec());
1029:       assertFalse(node0.hasChildren());
1030:       assertFalse(node0.isNot());
1031:       assertFalse(node0.isString());
1032:       assertFalse(node0.isObjectLit());
1033:       assertFalse(node0.isContinue());
1034:       assertEquals((-1), node0.getSourcePosition());
1035:       assertFalse(node0.isDebugger());
1036:       assertFalse(node0.isAnd());
1037:       assertFalse(node1.isBlock());
1038:       assertFalse(node1.isAdd());
1039:       assertEquals(152, node1.getLineno());
1040:       assertFalse(node1.isVar());
1041:       assertFalse(node1.isWhile());
1042:       assertFalse(node1.isDo());
1043:       assertFalse(node1.isNew());
1044:       assertFalse(node1.isAssignAdd());
1045:       assertFalse(node1.isParamList());
1046:       assertFalse(node1.isNumber());
1047:       assertFalse(node1.isLabel());
1048:       assertFalse(node1.isContinue());
1049:       assertFalse(node1.isCast());
1050:       assertFalse(node1.isStringKey());
1051:       assertFalse(node1.isLabelName());
1052:       assertFalse(node1.isDebugger());
1053:       assertFalse(node1.isVoid());
1054:       assertFalse(node1.isTrue());
1055:       assertFalse(node1.isExprResult());
1056:       assertFalse(node1.isNot());
1057:       assertFalse(node1.isObjectLit());
1058:       assertFalse(node1.isEmpty());
1059:       assertFalse(node1.isDefaultCase());
1060:       assertFalse(node1.isNull());
1061:       assertTrue(node1.hasOneChild());
1062:       assertFalse(node1.isTypeOf());
1063:       assertFalse(node1.isReturn());
1064:       assertFalse(node1.isAssign());
1065:       assertFalse(node1.isOr());
1066:       assertFalse(node1.isDec());
1067:       assertFalse(node1.isComma());
1068:       assertFalse(node1.isName());
1069:       assertFalse(node1.isCall());
1070:       assertFalse(node1.isGetElem());
1071:       assertFalse(node1.isDelProp());
1072:       assertFalse(node1.isBreak());
1073:       assertFalse(node1.isInc());
1074:       assertFalse(node1.isSwitch());
1075:       assertFalse(node1.isHook());
1076:       assertFalse(node1.isThrow());
1077:       assertFalse(node1.isString());
1078:       assertFalse(node1.isCase());
1079:       assertFalse(node1.isGetProp());
1080:       assertFalse(node1.isGetterDef());
1081:       assertFalse(node1.isAnd());
1082:       assertFalse(node1.isFalse());
1083:       assertEquals(622641, node1.getSourcePosition());
1084:       assertFalse(node1.isArrayLit());
1085:       assertFalse(node1.isFunction());
1086:       assertFalse(node1.isScript());
1087:       assertFalse(node1.isWith());
1088:       assertFalse(node1.isRegExp());
1089:       assertFalse(node1.isFor());
1090:       assertFalse(node1.isTry());
1091:       assertEquals((-113), node1.getType());
1092:       assertFalse(node1.isSetterDef());
1093:       assertFalse(node1.isThis());
1094:       assertFalse(node1.isNE());
1095:       assertTrue(node1.hasChildren());
1096:       assertEquals(49, node1.getCharno());
1097:       assertFalse(node1.isIn());
1098:       assertEquals(1, node1.getChildCount());
1099:       assertFalse(node1.hasMoreThanOneChild());
1100:       assertFalse(node1.isCatch());
1101:       assertFalse(node1.isInstanceOf());
1102:       assertFalse(node1.isIf());
1103:       assertNotNull(node1);
1104:       assertEquals(53, Node.INPUT_ID);
1105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1107:       assertEquals(36, Node.QUOTED_PROP);
1108:       assertEquals(56, Node.CHANGE_TIME);
1109:       assertEquals(43, Node.IS_CONSTANT_NAME);
1110:       assertEquals(37, Node.OPT_ARG_NAME);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1113:       assertEquals(8, Node.FLAG_NO_THROWS);
1114:       assertEquals(47, Node.IS_DISPATCHER);
1115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1116:       assertEquals(29, Node.JSDOC_INFO_PROP);
1117:       assertEquals(57, Node.LAST_PROP);
1118:       assertEquals(55, Node.INFERRED_FUNCTION);
1119:       assertEquals(39, Node.EMPTY_BLOCK);
1120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1122:       assertEquals(52, Node.LENGTH);
1123:       assertEquals(54, Node.SLASH_V);
1124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1125:       assertEquals(57, Node.REFLECTED_OBJECT);
1126:       assertEquals(30, Node.VAR_ARGS_NAME);
1127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1128:       assertEquals(49, Node.DIRECT_EVAL);
1129:       assertEquals(40, Node.ORIGINALNAME_PROP);
1130:       assertEquals(48, Node.DIRECTIVES);
1131:       assertEquals(32, Node.INCRDECR_PROP);
1132:       assertEquals(46, Node.IS_NAMESPACE);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(12, Node.COLUMN_BITS);
1135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1136:       assertEquals(50, Node.FREE_CALL);
1137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1138:       assertEquals(1, Node.DECR_FLAG);
1139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1140:       assertEquals(43, Node.IS_CONSTANT_NAME);
1141:       assertEquals(36, Node.QUOTED_PROP);
1142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1144:       assertEquals(4095, Node.COLUMN_MASK);
1145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1146:       assertEquals(50, Node.FREE_CALL);
1147:       assertEquals(46, Node.IS_NAMESPACE);
1148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1149:       assertEquals(32, Node.INCRDECR_PROP);
1150:       assertEquals(1, Node.DECR_FLAG);
1151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1153:       assertEquals(57, Node.LAST_PROP);
1154:       assertEquals(30, Node.VAR_ARGS_NAME);
1155:       assertEquals(49, Node.DIRECT_EVAL);
1156:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1157:       assertEquals(54, Node.SLASH_V);
1158:       assertEquals(12, Node.COLUMN_BITS);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1161:       assertEquals(56, Node.CHANGE_TIME);
1162:       assertEquals(47, Node.IS_DISPATCHER);
1163:       assertEquals(37, Node.OPT_ARG_NAME);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(2, Node.POST_FLAG);
1166:       assertEquals(48, Node.DIRECTIVES);
1167:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1168:       assertEquals(57, Node.REFLECTED_OBJECT);
1169:       assertEquals(53, Node.INPUT_ID);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(52, Node.LENGTH);
1172:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1173:       assertEquals(39, Node.EMPTY_BLOCK);
1174:       assertEquals(55, Node.INFERRED_FUNCTION);
1175:       assertEquals(29, Node.JSDOC_INFO_PROP);
1176:       
1177:       int int1 = node1.getIntProp(52);
1178:       assertFalse(node0.equals((Object)node1));
1179:       assertFalse(node1.equals((Object)node0));
1180:       assertFalse(int1 == int0);
1181:       assertFalse(node0.isHook());
1182:       assertEquals(0, node0.getType());
1183:       assertFalse(node0.isFalse());
1184:       assertFalse(node0.isInc());
1185:       assertFalse(node0.isComma());
1186:       assertFalse(node0.isThis());
1187:       assertFalse(node0.isGetProp());
1188:       assertFalse(node0.isCase());
1189:       assertFalse(node0.isThrow());
1190:       assertFalse(node0.isInstanceOf());
1191:       assertFalse(node0.isIn());
1192:       assertFalse(node0.isWith());
1193:       assertFalse(node0.isNE());
1194:       assertFalse(node0.isExprResult());
1195:       assertFalse(node0.isBreak());
1196:       assertFalse(node0.isDelProp());
1197:       assertFalse(node0.isIf());
1198:       assertFalse(node0.hasOneChild());
1199:       assertFalse(node0.isArrayLit());
1200:       assertFalse(node0.isEmpty());
1201:       assertFalse(node0.isRegExp());
1202:       assertFalse(node0.isScript());
1203:       assertFalse(node0.isFor());
1204:       assertFalse(node0.isTry());
1205:       assertFalse(node0.isDefaultCase());
1206:       assertFalse(node0.isAssignAdd());
1207:       assertEquals(0, node0.getChildCount());
1208:       assertFalse(node0.isLabel());
1209:       assertFalse(node0.isNumber());
1210:       assertFalse(node0.isGetterDef());
1211:       assertEquals((-1), node0.getCharno());
1212:       assertFalse(node0.isLabelName());
1213:       assertFalse(node0.isStringKey());
1214:       assertFalse(node0.isParamList());
1215:       assertFalse(node0.isSwitch());
1216:       assertFalse(node0.isVar());
1217:       assertFalse(node0.isCall());
1218:       assertFalse(node0.isAdd());
1219:       assertFalse(node0.isSetterDef());
1220:       assertFalse(node0.isBlock());
1221:       assertFalse(node0.isNew());
1222:       assertFalse(node0.isDo());
1223:       assertFalse(node0.isWhile());
1224:       assertFalse(node0.isCatch());
1225:       assertEquals((-1), node0.getLineno());
1226:       assertFalse(node0.isReturn());
1227:       assertFalse(node0.isOr());
1228:       assertFalse(node0.hasMoreThanOneChild());
1229:       assertFalse(node0.isNull());
1230:       assertFalse(node0.isTrue());
1231:       assertFalse(node0.isName());
1232:       assertFalse(node0.isVoid());
1233:       assertFalse(node0.isCast());
1234:       assertFalse(node0.isGetElem());
1235:       assertFalse(node0.isAssign());
1236:       assertFalse(node0.isFunction());
1237:       assertFalse(node0.isTypeOf());
1238:       assertFalse(node0.isDec());
1239:       assertFalse(node0.hasChildren());
1240:       assertFalse(node0.isNot());
1241:       assertFalse(node0.isString());
1242:       assertFalse(node0.isObjectLit());
1243:       assertFalse(node0.isContinue());
1244:       assertEquals((-1), node0.getSourcePosition());
1245:       assertFalse(node0.isDebugger());
1246:       assertFalse(node0.isAnd());
1247:       assertFalse(node1.isBlock());
1248:       assertFalse(node1.isAdd());
1249:       assertEquals(152, node1.getLineno());
1250:       assertFalse(node1.isVar());
1251:       assertFalse(node1.isWhile());
1252:       assertFalse(node1.isDo());
1253:       assertFalse(node1.isNew());
1254:       assertFalse(node1.isAssignAdd());
1255:       assertFalse(node1.isParamList());
1256:       assertFalse(node1.isNumber());
1257:       assertFalse(node1.isLabel());
1258:       assertFalse(node1.isContinue());
1259:       assertFalse(node1.isCast());
1260:       assertFalse(node1.isStringKey());
1261:       assertFalse(node1.isLabelName());
1262:       assertFalse(node1.isDebugger());
1263:       assertFalse(node1.isVoid());
1264:       assertFalse(node1.isTrue());
1265:       assertFalse(node1.isExprResult());
1266:       assertFalse(node1.isNot());
1267:       assertFalse(node1.isObjectLit());
1268:       assertFalse(node1.isEmpty());
1269:       assertFalse(node1.isDefaultCase());
1270:       assertFalse(node1.isNull());
1271:       assertTrue(node1.hasOneChild());
1272:       assertFalse(node1.isTypeOf());
1273:       assertFalse(node1.isReturn());
1274:       assertFalse(node1.isAssign());
1275:       assertFalse(node1.isOr());
1276:       assertFalse(node1.isDec());
1277:       assertFalse(node1.isComma());
1278:       assertFalse(node1.isName());
1279:       assertFalse(node1.isCall());
1280:       assertFalse(node1.isGetElem());
1281:       assertFalse(node1.isDelProp());
1282:       assertFalse(node1.isBreak());
1283:       assertFalse(node1.isInc());
1284:       assertFalse(node1.isSwitch());
1285:       assertFalse(node1.isHook());
1286:       assertFalse(node1.isThrow());
1287:       assertFalse(node1.isString());
1288:       assertFalse(node1.isCase());
1289:       assertFalse(node1.isGetProp());
1290:       assertFalse(node1.isGetterDef());
1291:       assertFalse(node1.isAnd());
1292:       assertFalse(node1.isFalse());
1293:       assertEquals(622641, node1.getSourcePosition());
1294:       assertFalse(node1.isArrayLit());
1295:       assertFalse(node1.isFunction());
1296:       assertFalse(node1.isScript());
1297:       assertFalse(node1.isWith());
1298:       assertFalse(node1.isRegExp());
1299:       assertFalse(node1.isFor());
1300:       assertFalse(node1.isTry());
1301:       assertEquals((-113), node1.getType());
1302:       assertFalse(node1.isSetterDef());
1303:       assertFalse(node1.isThis());
1304:       assertFalse(node1.isNE());
1305:       assertTrue(node1.hasChildren());
1306:       assertEquals(49, node1.getCharno());
1307:       assertFalse(node1.isIn());
1308:       assertEquals(1, node1.getChildCount());
1309:       assertFalse(node1.hasMoreThanOneChild());
1310:       assertFalse(node1.isCatch());
1311:       assertFalse(node1.isInstanceOf());
1312:       assertFalse(node1.isIf());
1313:       assertNotSame(node0, node1);
1314:       assertNotSame(node1, node0);
1315:       assertEquals(0, int1);
1316:       assertEquals(53, Node.INPUT_ID);
1317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1319:       assertEquals(36, Node.QUOTED_PROP);
1320:       assertEquals(56, Node.CHANGE_TIME);
1321:       assertEquals(43, Node.IS_CONSTANT_NAME);
1322:       assertEquals(37, Node.OPT_ARG_NAME);
1323:       assertEquals(2, Node.POST_FLAG);
1324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1325:       assertEquals(8, Node.FLAG_NO_THROWS);
1326:       assertEquals(47, Node.IS_DISPATCHER);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(29, Node.JSDOC_INFO_PROP);
1329:       assertEquals(57, Node.LAST_PROP);
1330:       assertEquals(55, Node.INFERRED_FUNCTION);
1331:       assertEquals(39, Node.EMPTY_BLOCK);
1332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1333:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1334:       assertEquals(52, Node.LENGTH);
1335:       assertEquals(54, Node.SLASH_V);
1336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1337:       assertEquals(57, Node.REFLECTED_OBJECT);
1338:       assertEquals(30, Node.VAR_ARGS_NAME);
1339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1340:       assertEquals(49, Node.DIRECT_EVAL);
1341:       assertEquals(40, Node.ORIGINALNAME_PROP);
1342:       assertEquals(48, Node.DIRECTIVES);
1343:       assertEquals(32, Node.INCRDECR_PROP);
1344:       assertEquals(46, Node.IS_NAMESPACE);
1345:       assertEquals(4095, Node.COLUMN_MASK);
1346:       assertEquals(12, Node.COLUMN_BITS);
1347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1348:       assertEquals(50, Node.FREE_CALL);
1349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1350:       assertEquals(1, Node.DECR_FLAG);
1351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1352:       assertEquals(43, Node.IS_CONSTANT_NAME);
1353:       assertEquals(36, Node.QUOTED_PROP);
1354:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1356:       assertEquals(4095, Node.COLUMN_MASK);
1357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1358:       assertEquals(50, Node.FREE_CALL);
1359:       assertEquals(46, Node.IS_NAMESPACE);
1360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1361:       assertEquals(32, Node.INCRDECR_PROP);
1362:       assertEquals(1, Node.DECR_FLAG);
1363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1365:       assertEquals(57, Node.LAST_PROP);
1366:       assertEquals(30, Node.VAR_ARGS_NAME);
1367:       assertEquals(49, Node.DIRECT_EVAL);
1368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1369:       assertEquals(54, Node.SLASH_V);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(40, Node.ORIGINALNAME_PROP);
1372:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1373:       assertEquals(56, Node.CHANGE_TIME);
1374:       assertEquals(47, Node.IS_DISPATCHER);
1375:       assertEquals(37, Node.OPT_ARG_NAME);
1376:       assertEquals(8, Node.FLAG_NO_THROWS);
1377:       assertEquals(2, Node.POST_FLAG);
1378:       assertEquals(48, Node.DIRECTIVES);
1379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1380:       assertEquals(57, Node.REFLECTED_OBJECT);
1381:       assertEquals(53, Node.INPUT_ID);
1382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1383:       assertEquals(52, Node.LENGTH);
1384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1385:       assertEquals(39, Node.EMPTY_BLOCK);
1386:       assertEquals(55, Node.INFERRED_FUNCTION);
1387:       assertEquals(29, Node.JSDOC_INFO_PROP);
1388:       
1389:       Object object0 = node0.getProp(16);
1390:       assertFalse(node0.equals((Object)node1));
1391:       assertFalse(node0.isHook());
1392:       assertEquals(0, node0.getType());
1393:       assertFalse(node0.isFalse());
1394:       assertFalse(node0.isInc());
1395:       assertFalse(node0.isComma());
1396:       assertFalse(node0.isThis());
1397:       assertFalse(node0.isGetProp());
1398:       assertFalse(node0.isCase());
1399:       assertFalse(node0.isThrow());
1400:       assertFalse(node0.isInstanceOf());
1401:       assertFalse(node0.isIn());
1402:       assertFalse(node0.isWith());
1403:       assertFalse(node0.isNE());
1404:       assertFalse(node0.isExprResult());
1405:       assertFalse(node0.isBreak());
1406:       assertFalse(node0.isDelProp());
1407:       assertFalse(node0.isIf());
1408:       assertFalse(node0.hasOneChild());
1409:       assertFalse(node0.isArrayLit());
1410:       assertFalse(node0.isEmpty());
1411:       assertFalse(node0.isRegExp());
1412:       assertFalse(node0.isScript());
1413:       assertFalse(node0.isFor());
1414:       assertFalse(node0.isTry());
1415:       assertFalse(node0.isDefaultCase());
1416:       assertFalse(node0.isAssignAdd());
1417:       assertEquals(0, node0.getChildCount());
1418:       assertFalse(node0.isLabel());
1419:       assertFalse(node0.isNumber());
1420:       assertFalse(node0.isGetterDef());
1421:       assertEquals((-1), node0.getCharno());
1422:       assertFalse(node0.isLabelName());
1423:       assertFalse(node0.isStringKey());
1424:       assertFalse(node0.isParamList());
1425:       assertFalse(node0.isSwitch());
1426:       assertFalse(node0.isVar());
1427:       assertFalse(node0.isCall());
1428:       assertFalse(node0.isAdd());
1429:       assertFalse(node0.isSetterDef());
1430:       assertFalse(node0.isBlock());
1431:       assertFalse(node0.isNew());
1432:       assertFalse(node0.isDo());
1433:       assertFalse(node0.isWhile());
1434:       assertFalse(node0.isCatch());
1435:       assertEquals((-1), node0.getLineno());
1436:       assertFalse(node0.isReturn());
1437:       assertFalse(node0.isOr());
1438:       assertFalse(node0.hasMoreThanOneChild());
1439:       assertFalse(node0.isNull());
1440:       assertFalse(node0.isTrue());
1441:       assertFalse(node0.isName());
1442:       assertFalse(node0.isVoid());
1443:       assertFalse(node0.isCast());
1444:       assertFalse(node0.isGetElem());
1445:       assertFalse(node0.isAssign());
1446:       assertFalse(node0.isFunction());
1447:       assertFalse(node0.isTypeOf());
1448:       assertFalse(node0.isDec());
1449:       assertFalse(node0.hasChildren());
1450:       assertFalse(node0.isNot());
1451:       assertFalse(node0.isString());
1452:       assertFalse(node0.isObjectLit());
1453:       assertFalse(node0.isContinue());
1454:       assertEquals((-1), node0.getSourcePosition());
1455:       assertFalse(node0.isDebugger());
1456:       assertFalse(node0.isAnd());
1457:       assertNotSame(node0, node1);
1458:       assertNull(object0);
1459:       assertEquals(53, Node.INPUT_ID);
1460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1462:       assertEquals(36, Node.QUOTED_PROP);
1463:       assertEquals(56, Node.CHANGE_TIME);
1464:       assertEquals(43, Node.IS_CONSTANT_NAME);
1465:       assertEquals(37, Node.OPT_ARG_NAME);
1466:       assertEquals(2, Node.POST_FLAG);
1467:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1468:       assertEquals(8, Node.FLAG_NO_THROWS);
1469:       assertEquals(47, Node.IS_DISPATCHER);
1470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1471:       assertEquals(29, Node.JSDOC_INFO_PROP);
1472:       assertEquals(57, Node.LAST_PROP);
1473:       assertEquals(55, Node.INFERRED_FUNCTION);
1474:       assertEquals(39, Node.EMPTY_BLOCK);
1475:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1477:       assertEquals(52, Node.LENGTH);
1478:       assertEquals(54, Node.SLASH_V);
1479:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1480:       assertEquals(57, Node.REFLECTED_OBJECT);
1481:       assertEquals(30, Node.VAR_ARGS_NAME);
1482:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1483:       assertEquals(49, Node.DIRECT_EVAL);
1484:       assertEquals(40, Node.ORIGINALNAME_PROP);
1485:       assertEquals(48, Node.DIRECTIVES);
1486:       assertEquals(32, Node.INCRDECR_PROP);
1487:       assertEquals(46, Node.IS_NAMESPACE);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(12, Node.COLUMN_BITS);
1490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1491:       assertEquals(50, Node.FREE_CALL);
1492:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1493:       assertEquals(1, Node.DECR_FLAG);
1494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1495:       
1496:       // Undeclared exception!
1497:       try { 
1498:         node0.getChildBefore(node1);
1499:         fail("Expecting exception: NullPointerException");
1500:       
1501:       } catch(NullPointerException e) {
1502:          //
1503:          // no message in exception (getMessage() returned null)
1504:          //
1505:          verifyException("com.google.javascript.rhino.Node", e);
1506:       }
1507:   }
1508: }
RegularFileObject[/tmp/EvoSuite_8_1605714082418/com/google/javascript/rhino/Node_8_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:24 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_8_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_8_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Maps$KeySet",
105:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
106:       "com.google.common.collect.LinkedHashMultimap",
107:       "com.google.javascript.rhino.Node",
108:       "com.google.javascript.rhino.jstype.ObjectType",
109:       "com.google.common.collect.ImmutableMapKeySet",
110:       "com.google.javascript.rhino.JSDocInfo$Marker",
111:       "com.google.common.collect.RegularImmutableMap",
112:       "com.google.common.collect.RegularImmutableBiMap",
113:       "com.google.javascript.rhino.Node$NodeMismatch",
114:       "com.google.javascript.rhino.jstype.RecordType",
115:       "com.google.common.collect.SortedMapDifference",
116:       "com.google.javascript.rhino.jstype.ModificationVisitor",
117:       "com.google.javascript.rhino.jstype.PropertyMap$1",
118:       "com.google.common.collect.AbstractMapEntry",
119:       "com.google.common.collect.Iterators$12",
120:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
121:       "com.google.common.collect.Iterators$11",
122:       "com.google.javascript.rhino.jstype.JSType$1",
123:       "com.google.common.collect.EmptyImmutableBiMap",
124:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
125:       "com.google.common.base.Predicate",
126:       "com.google.javascript.rhino.jstype.JSType$2",
127:       "com.google.javascript.rhino.jstype.VoidType",
128:       "com.google.common.base.Joiner",
129:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
130:       "com.google.common.collect.AbstractListMultimap",
131:       "com.google.javascript.rhino.jstype.JSType",
132:       "com.google.common.collect.ImmutableAsList",
133:       "com.google.javascript.rhino.Node$StringNode",
134:       "com.google.javascript.rhino.jstype.ProxyObjectType",
135:       "com.google.common.collect.RegularImmutableAsList",
136:       "com.google.javascript.rhino.jstype.TemplateType",
137:       "com.google.javascript.rhino.jstype.NamedType",
138:       "com.google.common.collect.Iterators$13",
139:       "com.google.javascript.rhino.InputId",
140:       "com.google.common.collect.ImmutableList$SerializedForm",
141:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
142:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
143:       "com.google.common.collect.AbstractMapBasedMultimap",
144:       "com.google.common.collect.Lists$Partition",
145:       "com.google.common.collect.Lists",
146:       "com.google.javascript.rhino.Node$SideEffectFlags",
147:       "com.google.common.collect.UnmodifiableListIterator",
148:       "com.google.javascript.rhino.jstype.NullType",
149:       "com.google.common.collect.Lists$TransformingSequentialList",
150:       "com.google.javascript.rhino.ErrorReporter",
151:       "com.google.javascript.rhino.jstype.UnknownType",
152:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
153:       "com.google.javascript.rhino.jstype.ValueType",
154:       "com.google.javascript.rhino.jstype.PropertyMap",
155:       "com.google.javascript.rhino.Token",
156:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
157:       "com.google.common.collect.ObjectArrays",
158:       "com.google.javascript.rhino.jstype.StaticSourceFile",
159:       "com.google.javascript.rhino.jstype.BooleanType",
160:       "com.google.javascript.rhino.jstype.NoObjectType",
161:       "com.google.common.collect.AbstractIterator",
162:       "com.google.javascript.rhino.jstype.FunctionBuilder",
163:       "com.google.javascript.rhino.jstype.JSType$TypePair",
164:       "com.google.common.base.Joiner$MapJoiner",
165:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
166:       "com.google.common.collect.ImmutableList$1",
167:       "com.google.common.collect.MapDifference",
168:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
169:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
170:       "com.google.common.collect.Sets$ImprovedAbstractSet",
171:       "com.google.javascript.rhino.jstype.FunctionType",
172:       "com.google.common.base.Preconditions",
173:       "com.google.common.collect.UnmodifiableIterator",
174:       "com.google.javascript.rhino.JSDocInfo",
175:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
176:       "com.google.javascript.rhino.jstype.Property",
177:       "com.google.common.collect.ImmutableMapValues",
178:       "com.google.common.collect.ImmutableEntry",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.common.collect.Iterators$2",
212:       "com.google.javascript.rhino.jstype.NamespaceType",
213:       "com.google.common.collect.Iterators$3",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_8_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.javascript.rhino.JSDocInfo",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
345:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
346:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
347:       "com.google.common.collect.Sets",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.ImmutableSet",
351:       "com.google.common.collect.EmptyImmutableSet",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 15:41:26.954 [logback-1] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = node0.getSourceOffset();
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), int0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

String string0 = node0.getSourceFileName();
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNull(string0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node0.isLocalResultCall();
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node0.mayMutateArguments();
assertFalse(boolean1 == boolean0);
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertTrue(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNull(jSDocInfo0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.setIsSyntheticBlock(false);
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node1 = new Node((-113), node0, node0, node0, 152, 49);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertEquals(152, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(622641, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals((-113), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getCharno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);

int int1 = node1.getIntProp(52);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(int1 == int0);
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertEquals(152, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(622641, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals((-113), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getCharno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(0, int1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);

Object object0 = node0.getProp(16);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isHook());
assertEquals(0, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotSame(node0, node1);
assertNull(object0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.getChildBefore(node1);

