* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 4714
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2128466986
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 15:32:59.246 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
* Search finished after 308s and 16 generations, 9938 statements, best individual has fitness: 4878.0
* Minimizing test suite
[MASTER] 15:39:16.572 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 77%
* Total number of goals: 853
* Number of covered goals: 654
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 60%
* Total number of goals: 714
* Number of covered goals: 431
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 60%
* Total number of goals: 530
* Number of covered goals: 320
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 19%
* Total number of goals: 4536
* Number of covered goals: 859
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 85%
* Total number of goals: 233
* Number of covered goals: 199
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 81%
* Total number of goals: 233
* Number of covered goals: 189
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 53%
* Total number of goals: 714
* Number of covered goals: 381
* Generated 182 tests with total length 3049
* Resulting test suite's coverage: 59% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:40:29.404 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7412166666666666% of time used, but only 7/182 tests minimized), falling back to using all assertions
[MASTER] 15:40:45.087 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 15:40:57.348 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 15:41:18.195 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1605714077663/com/google/javascript/rhino/Node_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1605714077663/com/google/javascript/rhino/Node_25_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:18.197 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:18.200 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:18.206 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 15:41:18.258 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1605714077663/com/google/javascript/rhino/Node_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:17 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_25_tmp__ESTest extends Node_25_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(3682, (-1244), 49);
22:       assertNotNull(node0);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(53, Node.INPUT_ID);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(55, Node.INFERRED_FUNCTION);
31:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(56, Node.CHANGE_TIME);
36:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
37:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
38:       assertEquals(49, Node.DIRECT_EVAL);
39:       assertEquals(48, Node.DIRECTIVES);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(40, Node.ORIGINALNAME_PROP);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(50, Node.FREE_CALL);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(57, Node.REFLECTED_OBJECT);
47:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(30, Node.VAR_ARGS_NAME);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(43, Node.IS_CONSTANT_NAME);
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isDefaultCase());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isIn());
67:       assertFalse(node0.isSetterDef());
68:       assertFalse(node0.isCatch());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isTrue());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isDo());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isVar());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.isLabelName());
89:       assertEquals((-1), node0.getCharno());
90:       assertFalse(node0.isSwitch());
91:       assertFalse(node0.isParamList());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isGetElem());
95:       assertFalse(node0.isExprResult());
96:       assertFalse(node0.isCast());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.hasChildren());
99:       assertFalse(node0.isTypeOf());
100:       assertFalse(node0.isAssign());
101:       assertFalse(node0.isDec());
102:       assertFalse(node0.isAssignAdd());
103:       assertFalse(node0.isReturn());
104:       assertFalse(node0.isOr());
105:       assertEquals((-1), node0.getLineno());
106:       assertFalse(node0.hasMoreThanOneChild());
107:       assertFalse(node0.isWith());
108:       assertFalse(node0.isInstanceOf());
109:       assertFalse(node0.isBreak());
110:       assertFalse(node0.isFalse());
111:       assertFalse(node0.isInc());
112:       assertFalse(node0.isCall());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isThrow());
115:       assertFalse(node0.isWhile());
116:       assertFalse(node0.isContinue());
117:       assertFalse(node0.isGetProp());
118:       assertFalse(node0.isObjectLit());
119:       assertFalse(node0.isString());
120:       assertEquals(3682, node0.getType());
121:       assertFalse(node0.isNot());
122:       assertEquals((-1), node0.getSourcePosition());
123:       assertFalse(node0.isDebugger());
124:       assertFalse(node0.isAnd());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(29, Node.JSDOC_INFO_PROP);
132:       assertEquals(32, Node.INCRDECR_PROP);
133:       assertEquals(53, Node.INPUT_ID);
134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
135:       assertEquals(55, Node.INFERRED_FUNCTION);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(36, Node.QUOTED_PROP);
140:       assertEquals(56, Node.CHANGE_TIME);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(48, Node.DIRECTIVES);
145:       assertEquals(37, Node.OPT_ARG_NAME);
146:       assertEquals(40, Node.ORIGINALNAME_PROP);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(50, Node.FREE_CALL);
150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
153:       assertEquals(8, Node.FLAG_NO_THROWS);
154:       assertEquals(39, Node.EMPTY_BLOCK);
155:       assertEquals(57, Node.LAST_PROP);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(1, Node.DECR_FLAG);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(43, Node.IS_CONSTANT_NAME);
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isArrayLit());
166:       assertFalse(node0.isFunction());
167:       assertFalse(node0.isEmpty());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isRegExp());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isIn());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isCatch());
174:       assertFalse(node0.isIf());
175:       assertFalse(node0.isNull());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isVoid());
178:       assertFalse(node0.isName());
179:       assertFalse(node0.isTrue());
180:       assertFalse(node0.isNE());
181:       assertFalse(node0.isHook());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isAdd());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isCase());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isThis());
188:       assertFalse(node0.isVar());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isGetterDef());
192:       assertFalse(node0.isNumber());
193:       assertFalse(node0.isLabelName());
194:       assertEquals((-1), node0.getCharno());
195:       assertFalse(node0.isSwitch());
196:       assertFalse(node0.isParamList());
197:       assertFalse(node0.isStringKey());
198:       assertFalse(node0.hasOneChild());
199:       assertFalse(node0.isGetElem());
200:       assertFalse(node0.isExprResult());
201:       assertFalse(node0.isCast());
202:       assertFalse(node0.isScript());
203:       assertFalse(node0.hasChildren());
204:       assertFalse(node0.isTypeOf());
205:       assertFalse(node0.isAssign());
206:       assertFalse(node0.isDec());
207:       assertFalse(node0.isAssignAdd());
208:       assertFalse(node0.isReturn());
209:       assertFalse(node0.isOr());
210:       assertEquals((-1), node0.getLineno());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isWith());
213:       assertFalse(node0.isInstanceOf());
214:       assertFalse(node0.isBreak());
215:       assertFalse(node0.isFalse());
216:       assertFalse(node0.isInc());
217:       assertFalse(node0.isCall());
218:       assertFalse(node0.isComma());
219:       assertFalse(node0.isThrow());
220:       assertFalse(node0.isWhile());
221:       assertFalse(node0.isContinue());
222:       assertFalse(node0.isGetProp());
223:       assertFalse(node0.isObjectLit());
224:       assertFalse(node0.isString());
225:       assertEquals(3682, node0.getType());
226:       assertFalse(node0.isNot());
227:       assertEquals((-1), node0.getSourcePosition());
228:       assertFalse(node0.isDebugger());
229:       assertFalse(node0.isAnd());
230:       assertFalse(iterable0.contains(node0));
231:       
232:       Node node1 = Node.newNumber((double) 48, 122, 55);
233:       assertNotNull(node1);
234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(8, Node.FLAG_NO_THROWS);
237:       assertEquals(39, Node.EMPTY_BLOCK);
238:       assertEquals(53, Node.INPUT_ID);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(57, Node.REFLECTED_OBJECT);
243:       assertEquals(56, Node.CHANGE_TIME);
244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
245:       assertEquals(48, Node.DIRECTIVES);
246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
247:       assertEquals(37, Node.OPT_ARG_NAME);
248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
249:       assertEquals(4095, Node.COLUMN_MASK);
250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
251:       assertEquals(30, Node.VAR_ARGS_NAME);
252:       assertEquals(49, Node.DIRECT_EVAL);
253:       assertEquals(51, Node.STATIC_SOURCE_FILE);
254:       assertEquals(1, Node.DECR_FLAG);
255:       assertEquals(57, Node.LAST_PROP);
256:       assertEquals(32, Node.INCRDECR_PROP);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(12, Node.COLUMN_BITS);
259:       assertEquals(54, Node.SLASH_V);
260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
261:       assertEquals(52, Node.LENGTH);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
265:       assertEquals(40, Node.ORIGINALNAME_PROP);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
269:       assertEquals(2, Node.POST_FLAG);
270:       assertFalse(node1.isCatch());
271:       assertEquals(0, node1.getChildCount());
272:       assertFalse(node1.isSetterDef());
273:       assertFalse(node1.isDefaultCase());
274:       assertFalse(node1.isTry());
275:       assertEquals(55, node1.getCharno());
276:       assertFalse(node1.isCall());
277:       assertFalse(node1.isFor());
278:       assertFalse(node1.isBlock());
279:       assertFalse(node1.isNull());
280:       assertFalse(node1.isRegExp());
281:       assertFalse(node1.isIf());
282:       assertFalse(node1.isTrue());
283:       assertFalse(node1.isNE());
284:       assertFalse(node1.isName());
285:       assertFalse(node1.isDelProp());
286:       assertFalse(node1.isVoid());
287:       assertFalse(node1.isIn());
288:       assertFalse(node1.isContinue());
289:       assertFalse(node1.isReturn());
290:       assertFalse(node1.isInc());
291:       assertFalse(node1.hasChildren());
292:       assertFalse(node1.isWhile());
293:       assertFalse(node1.isString());
294:       assertTrue(node1.isNumber());
295:       assertFalse(node1.isCast());
296:       assertFalse(node1.isThrow());
297:       assertFalse(node1.isFalse());
298:       assertFalse(node1.isFunction());
299:       assertFalse(node1.isDebugger());
300:       assertEquals(122, node1.getLineno());
301:       assertFalse(node1.isAnd());
302:       assertFalse(node1.isInstanceOf());
303:       assertFalse(node1.isWith());
304:       assertFalse(node1.isObjectLit());
305:       assertFalse(node1.isNot());
306:       assertFalse(node1.isComma());
307:       assertFalse(node1.isScript());
308:       assertFalse(node1.isThis());
309:       assertFalse(node1.isGetProp());
310:       assertFalse(node1.hasOneChild());
311:       assertFalse(node1.isHook());
312:       assertFalse(node1.isAssign());
313:       assertFalse(node1.isDec());
314:       assertFalse(node1.isTypeOf());
315:       assertFalse(node1.isExprResult());
316:       assertFalse(node1.isGetElem());
317:       assertFalse(node1.isBreak());
318:       assertFalse(node1.hasMoreThanOneChild());
319:       assertFalse(node1.isLabel());
320:       assertEquals(39, node1.getType());
321:       assertFalse(node1.isOr());
322:       assertFalse(node1.isAdd());
323:       assertFalse(node1.isNew());
324:       assertFalse(node1.isCase());
325:       assertFalse(node1.isEmpty());
326:       assertFalse(node1.isAssignAdd());
327:       assertFalse(node1.isDo());
328:       assertFalse(node1.isVar());
329:       assertFalse(node1.isArrayLit());
330:       assertFalse(node1.isStringKey());
331:       assertEquals(499767, node1.getSourcePosition());
332:       assertFalse(node1.isGetterDef());
333:       assertFalse(node1.isSwitch());
334:       assertFalse(node1.isParamList());
335:       assertFalse(node1.isLabelName());
336:       assertFalse(node1.equals((Object)node0));
337:       
338:       // Undeclared exception!
339:       try { 
340:         node0.replaceChildAfter(node1, node1);
341:         fail("Expecting exception: IllegalArgumentException");
342:       
343:       } catch(IllegalArgumentException e) {
344:          //
345:          // prev is not a child of this node.
346:          //
347:          verifyException("com.google.common.base.Preconditions", e);
348:       }
349:   }
350: }
RegularFileObject[/tmp/EvoSuite_25_1605714077663/com/google/javascript/rhino/Node_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:17 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_25_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.javascript.rhino.Node$AncestorIterable$1",
123:       "com.google.common.collect.Iterators$12",
124:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
125:       "com.google.common.collect.Iterators$11",
126:       "com.google.javascript.rhino.jstype.JSType$1",
127:       "com.google.common.collect.EmptyImmutableBiMap",
128:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
129:       "com.google.common.base.Predicate",
130:       "com.google.javascript.rhino.jstype.VoidType",
131:       "com.google.common.base.Joiner",
132:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
133:       "com.google.common.collect.AbstractListMultimap",
134:       "com.google.javascript.rhino.jstype.JSType",
135:       "com.google.common.collect.ImmutableAsList",
136:       "com.google.javascript.rhino.Node$StringNode",
137:       "com.google.javascript.rhino.jstype.ProxyObjectType",
138:       "com.google.common.collect.Sets$SetView",
139:       "com.google.common.collect.RegularImmutableAsList",
140:       "com.google.javascript.rhino.jstype.TemplateType",
141:       "com.google.javascript.rhino.jstype.NamedType",
142:       "com.google.common.collect.Iterators$13",
143:       "com.google.javascript.rhino.InputId",
144:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
145:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
146:       "com.google.common.collect.AbstractMapBasedMultimap",
147:       "com.google.common.collect.Lists$Partition",
148:       "com.google.common.collect.Lists",
149:       "com.google.javascript.rhino.Node$SideEffectFlags",
150:       "com.google.common.collect.UnmodifiableListIterator",
151:       "com.google.javascript.rhino.jstype.NullType",
152:       "com.google.common.collect.Lists$TransformingSequentialList",
153:       "com.google.javascript.rhino.ErrorReporter",
154:       "com.google.javascript.rhino.jstype.UnknownType",
155:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
156:       "com.google.javascript.rhino.jstype.ValueType",
157:       "com.google.javascript.rhino.jstype.PropertyMap",
158:       "com.google.javascript.rhino.Token",
159:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
160:       "com.google.common.collect.ObjectArrays",
161:       "com.google.javascript.rhino.jstype.StaticSourceFile",
162:       "com.google.javascript.rhino.jstype.BooleanType",
163:       "com.google.javascript.rhino.jstype.NoObjectType",
164:       "com.google.common.collect.AbstractIterator",
165:       "com.google.javascript.rhino.jstype.FunctionBuilder",
166:       "com.google.javascript.rhino.jstype.JSType$TypePair",
167:       "com.google.common.base.Joiner$MapJoiner",
168:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
169:       "com.google.common.collect.ImmutableList$1",
170:       "com.google.common.collect.MapDifference",
171:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
172:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
173:       "com.google.common.collect.Sets$ImprovedAbstractSet",
174:       "com.google.javascript.rhino.jstype.FunctionType",
175:       "com.google.common.base.Preconditions",
176:       "com.google.common.collect.UnmodifiableIterator",
177:       "com.google.javascript.rhino.JSDocInfo",
178:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
179:       "com.google.javascript.rhino.jstype.Property",
180:       "com.google.common.collect.ImmutableMapValues",
181:       "com.google.common.collect.ImmutableEntry",
182:       "com.google.common.base.Joiner$1",
183:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
184:       "com.google.common.base.Joiner$2",
185:       "com.google.common.collect.ImmutableCollection",
186:       "com.google.common.collect.ImmutableEnumMap",
187:       "com.google.javascript.rhino.jstype.TernaryValue",
188:       "com.google.javascript.rhino.Node$AncestorIterable",
189:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
190:       "com.google.common.collect.Lists$RandomAccessListWrapper",
191:       "com.google.common.collect.ImmutableEnumSet",
192:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
193:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
194:       "com.google.javascript.rhino.jstype.EnumElementType",
195:       "com.google.javascript.rhino.jstype.UnionType",
196:       "com.google.common.base.Objects",
197:       "com.google.javascript.rhino.Node$NumberNode",
198:       "com.google.common.collect.SingletonImmutableList",
199:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
200:       "com.google.common.collect.ImmutableCollection$Builder",
201:       "com.google.javascript.rhino.jstype.StaticSlot",
202:       "com.google.common.collect.Iterators$6",
203:       "com.google.common.collect.BiMap",
204:       "com.google.common.collect.Iterators$7",
205:       "com.google.common.collect.AbstractSetMultimap",
206:       "com.google.common.base.Function",
207:       "com.google.common.collect.ImmutableSet",
208:       "com.google.common.collect.Lists$AbstractListWrapper",
209:       "com.google.common.collect.ImmutableMap",
210:       "com.google.common.collect.AbstractIndexedListIterator",
211:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
212:       "com.google.common.collect.Maps$1",
213:       "com.google.javascript.rhino.jstype.EnumType",
214:       "com.google.common.collect.Iterators$1",
215:       "com.google.common.collect.Iterators$2",
216:       "com.google.javascript.rhino.jstype.NamespaceType",
217:       "com.google.common.collect.Iterators$3",
218:       "com.google.common.collect.Sets",
219:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
220:       "com.google.javascript.rhino.Node$ObjectPropListItem",
221:       "com.google.common.collect.Lists$StringAsImmutableList",
222:       "com.google.common.collect.Lists$2",
223:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
224:       "com.google.common.collect.ImmutableList$Builder",
225:       "com.google.common.collect.Lists$1",
226:       "com.google.javascript.rhino.jstype.StaticReference",
227:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
228:       "com.google.common.collect.Multiset",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.common.collect.ImmutableList",
236:       "com.google.common.collect.SingletonImmutableBiMap",
237:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
238:       "com.google.javascript.rhino.jstype.StringType",
239:       "com.google.javascript.rhino.Node$AbstractPropListItem",
240:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
241:       "com.google.javascript.rhino.jstype.TemplatizedType",
242:       "com.google.javascript.rhino.jstype.Visitor",
243:       "com.google.javascript.rhino.jstype.NoResolvedType",
244:       "com.google.javascript.rhino.jstype.JSTypeNative",
245:       "com.google.javascript.rhino.jstype.AllType",
246:       "com.google.common.collect.Maps",
247:       "com.google.common.collect.SetMultimap",
248:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
249:       "com.google.common.collect.Maps$EntryTransformer",
250:       "com.google.javascript.rhino.JSTypeExpression",
251:       "com.google.common.collect.Iterators$MergingIterator"
252:     );
253:   } 
254: 
255:   private static void resetClasses() {
256:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
257: 
258:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
259:       "com.google.javascript.rhino.Node",
260:       "com.google.javascript.rhino.Node$NumberNode",
261:       "com.google.javascript.rhino.Node$StringNode",
262:       "com.google.javascript.rhino.Node$AbstractPropListItem",
263:       "com.google.javascript.rhino.Node$ObjectPropListItem",
264:       "com.google.javascript.rhino.Node$IntPropListItem",
265:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
266:       "com.google.javascript.rhino.Node$AncestorIterable",
267:       "com.google.javascript.rhino.Node$NodeMismatch",
268:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
269:       "com.google.javascript.rhino.Node$SideEffectFlags",
270:       "com.google.javascript.rhino.Token",
271:       "com.google.common.base.Preconditions",
272:       "com.google.javascript.rhino.InputId",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.base.Objects",
354:       "com.google.javascript.rhino.JSDocInfo$Visibility",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
356:     );
357:   }
358: }

[MASTER] 15:41:18.275 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(3682, (-1244), 49);
assertNotNull(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertEquals(3682, node0.getType());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertEquals(3682, node0.getType());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(iterable0.contains(node0));

Node node1 = Node.newNumber((double) 48, 122, 55);
assertNotNull(node1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(55, node1.getCharno());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(122, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals(499767, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.equals((Object)node0));

node0.replaceChildAfter(node1, node1);

[MASTER] 15:41:21.375 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_26_1605714078301/com/google/javascript/rhino/Node_26_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_26_1605714078301/com/google/javascript/rhino/Node_26_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:21.375 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:21.375 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:21.377 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 343
[MASTER] 15:41:21.380 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_26_1605714078301/com/google/javascript/rhino/Node_26_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:18 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import java.util.concurrent.ExecutorService;
14: import java.util.concurrent.Executors;
15: import java.util.concurrent.Future;
16: import java.util.concurrent.TimeUnit;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_26_tmp__ESTest extends Node_26_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:     Future<?> future = executor.submit(new Runnable(){ 
27:             @Override public void run() { 
28:         try {
29:           Node node0 = Node.newNumber(1.0);
30:           assertNotNull(node0);
31:           assertEquals(48, Node.DIRECTIVES);
32:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:           assertEquals(8, Node.FLAG_NO_THROWS);
34:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
35:           assertEquals(39, Node.EMPTY_BLOCK);
36:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:           assertEquals(55, Node.INFERRED_FUNCTION);
38:           assertEquals(50, Node.FREE_CALL);
39:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
40:           assertEquals(36, Node.QUOTED_PROP);
41:           assertEquals(57, Node.REFLECTED_OBJECT);
42:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:           assertEquals(1, Node.DECR_FLAG);
44:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:           assertEquals(4095, Node.COLUMN_MASK);
46:           assertEquals(12, Node.COLUMN_BITS);
47:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
48:           assertEquals(37, Node.OPT_ARG_NAME);
49:           assertEquals(2, Node.POST_FLAG);
50:           assertEquals(32, Node.INCRDECR_PROP);
51:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:           assertEquals(29, Node.JSDOC_INFO_PROP);
53:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:           assertEquals(49, Node.DIRECT_EVAL);
55:           assertEquals(46, Node.IS_NAMESPACE);
56:           assertEquals(56, Node.CHANGE_TIME);
57:           assertEquals(51, Node.STATIC_SOURCE_FILE);
58:           assertEquals(54, Node.SLASH_V);
59:           assertEquals(43, Node.IS_CONSTANT_NAME);
60:           assertEquals(52, Node.LENGTH);
61:           assertEquals(57, Node.LAST_PROP);
62:           assertEquals(53, Node.INPUT_ID);
63:           assertEquals(15, Node.NO_SIDE_EFFECTS);
64:           assertEquals(40, Node.ORIGINALNAME_PROP);
65:           assertEquals(30, Node.VAR_ARGS_NAME);
66:           assertEquals(47, Node.IS_DISPATCHER);
67:           assertFalse(node0.isNull());
68:           assertFalse(node0.isSetterDef());
69:           assertFalse(node0.isName());
70:           assertFalse(node0.isStringKey());
71:           assertFalse(node0.isParamList());
72:           assertFalse(node0.isAdd());
73:           assertFalse(node0.isRegExp());
74:           assertFalse(node0.isTrue());
75:           assertEquals(39, node0.getType());
76:           assertFalse(node0.isBlock());
77:           assertFalse(node0.isTry());
78:           assertFalse(node0.isVoid());
79:           assertFalse(node0.isWhile());
80:           assertFalse(node0.isReturn());
81:           assertEquals((-1), node0.getLineno());
82:           assertFalse(node0.isCall());
83:           assertFalse(node0.isCatch());
84:           assertFalse(node0.hasMoreThanOneChild());
85:           assertFalse(node0.isTypeOf());
86:           assertEquals((-1), node0.getSourcePosition());
87:           assertFalse(node0.isDec());
88:           assertFalse(node0.isNE());
89:           assertFalse(node0.hasChildren());
90:           assertFalse(node0.isIf());
91:           assertTrue(node0.isNumber());
92:           assertFalse(node0.isString());
93:           assertFalse(node0.isIn());
94:           assertFalse(node0.isInc());
95:           assertFalse(node0.isDebugger());
96:           assertFalse(node0.isAnd());
97:           assertFalse(node0.isCast());
98:           assertFalse(node0.isFalse());
99:           assertFalse(node0.isFunction());
100:           assertFalse(node0.isContinue());
101:           assertFalse(node0.isThis());
102:           assertFalse(node0.isComma());
103:           assertFalse(node0.isBreak());
104:           assertFalse(node0.isGetProp());
105:           assertFalse(node0.isThrow());
106:           assertFalse(node0.isNot());
107:           assertFalse(node0.isObjectLit());
108:           assertFalse(node0.isScript());
109:           assertFalse(node0.isExprResult());
110:           assertFalse(node0.isCase());
111:           assertFalse(node0.isInstanceOf());
112:           assertFalse(node0.isHook());
113:           assertFalse(node0.isGetElem());
114:           assertFalse(node0.isAssign());
115:           assertFalse(node0.isWith());
116:           assertFalse(node0.isGetterDef());
117:           assertFalse(node0.isDelProp());
118:           assertFalse(node0.isLabelName());
119:           assertFalse(node0.isFor());
120:           assertFalse(node0.isAssignAdd());
121:           assertFalse(node0.hasOneChild());
122:           assertFalse(node0.isOr());
123:           assertFalse(node0.isEmpty());
124:           assertEquals((-1), node0.getCharno());
125:           assertFalse(node0.isNew());
126:           assertFalse(node0.isDo());
127:           assertFalse(node0.isSwitch());
128:           assertFalse(node0.isDefaultCase());
129:           assertFalse(node0.isVar());
130:           assertEquals(0, node0.getChildCount());
131:           assertFalse(node0.isLabel());
132:           assertFalse(node0.isArrayLit());
133:           
134:           double double0 = node0.getDouble();
135:           assertEquals(1.0, double0, 0.01);
136:           assertEquals(48, Node.DIRECTIVES);
137:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:           assertEquals(8, Node.FLAG_NO_THROWS);
139:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
140:           assertEquals(39, Node.EMPTY_BLOCK);
141:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:           assertEquals(55, Node.INFERRED_FUNCTION);
143:           assertEquals(50, Node.FREE_CALL);
144:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
145:           assertEquals(36, Node.QUOTED_PROP);
146:           assertEquals(57, Node.REFLECTED_OBJECT);
147:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:           assertEquals(1, Node.DECR_FLAG);
149:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
150:           assertEquals(4095, Node.COLUMN_MASK);
151:           assertEquals(12, Node.COLUMN_BITS);
152:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:           assertEquals(37, Node.OPT_ARG_NAME);
154:           assertEquals(2, Node.POST_FLAG);
155:           assertEquals(32, Node.INCRDECR_PROP);
156:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:           assertEquals(29, Node.JSDOC_INFO_PROP);
158:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:           assertEquals(49, Node.DIRECT_EVAL);
160:           assertEquals(46, Node.IS_NAMESPACE);
161:           assertEquals(56, Node.CHANGE_TIME);
162:           assertEquals(51, Node.STATIC_SOURCE_FILE);
163:           assertEquals(54, Node.SLASH_V);
164:           assertEquals(43, Node.IS_CONSTANT_NAME);
165:           assertEquals(52, Node.LENGTH);
166:           assertEquals(57, Node.LAST_PROP);
167:           assertEquals(53, Node.INPUT_ID);
168:           assertEquals(15, Node.NO_SIDE_EFFECTS);
169:           assertEquals(40, Node.ORIGINALNAME_PROP);
170:           assertEquals(30, Node.VAR_ARGS_NAME);
171:           assertEquals(47, Node.IS_DISPATCHER);
172:           assertFalse(node0.isNull());
173:           assertFalse(node0.isSetterDef());
174:           assertFalse(node0.isName());
175:           assertFalse(node0.isStringKey());
176:           assertFalse(node0.isParamList());
177:           assertFalse(node0.isAdd());
178:           assertFalse(node0.isRegExp());
179:           assertFalse(node0.isTrue());
180:           assertEquals(39, node0.getType());
181:           assertFalse(node0.isBlock());
182:           assertFalse(node0.isTry());
183:           assertFalse(node0.isVoid());
184:           assertFalse(node0.isWhile());
185:           assertFalse(node0.isReturn());
186:           assertEquals((-1), node0.getLineno());
187:           assertFalse(node0.isCall());
188:           assertFalse(node0.isCatch());
189:           assertFalse(node0.hasMoreThanOneChild());
190:           assertFalse(node0.isTypeOf());
191:           assertEquals((-1), node0.getSourcePosition());
192:           assertFalse(node0.isDec());
193:           assertFalse(node0.isNE());
194:           assertFalse(node0.hasChildren());
195:           assertFalse(node0.isIf());
196:           assertTrue(node0.isNumber());
197:           assertFalse(node0.isString());
198:           assertFalse(node0.isIn());
199:           assertFalse(node0.isInc());
200:           assertFalse(node0.isDebugger());
201:           assertFalse(node0.isAnd());
202:           assertFalse(node0.isCast());
203:           assertFalse(node0.isFalse());
204:           assertFalse(node0.isFunction());
205:           assertFalse(node0.isContinue());
206:           assertFalse(node0.isThis());
207:           assertFalse(node0.isComma());
208:           assertFalse(node0.isBreak());
209:           assertFalse(node0.isGetProp());
210:           assertFalse(node0.isThrow());
211:           assertFalse(node0.isNot());
212:           assertFalse(node0.isObjectLit());
213:           assertFalse(node0.isScript());
214:           assertFalse(node0.isExprResult());
215:           assertFalse(node0.isCase());
216:           assertFalse(node0.isInstanceOf());
217:           assertFalse(node0.isHook());
218:           assertFalse(node0.isGetElem());
219:           assertFalse(node0.isAssign());
220:           assertFalse(node0.isWith());
221:           assertFalse(node0.isGetterDef());
222:           assertFalse(node0.isDelProp());
223:           assertFalse(node0.isLabelName());
224:           assertFalse(node0.isFor());
225:           assertFalse(node0.isAssignAdd());
226:           assertFalse(node0.hasOneChild());
227:           assertFalse(node0.isOr());
228:           assertFalse(node0.isEmpty());
229:           assertEquals((-1), node0.getCharno());
230:           assertFalse(node0.isNew());
231:           assertFalse(node0.isDo());
232:           assertFalse(node0.isSwitch());
233:           assertFalse(node0.isDefaultCase());
234:           assertFalse(node0.isVar());
235:           assertEquals(0, node0.getChildCount());
236:           assertFalse(node0.isLabel());
237:           assertFalse(node0.isArrayLit());
238:           
239:           Iterable<Node> iterable0 = node0.children();
240:           assertNotNull(iterable0);
241:           assertEquals(48, Node.DIRECTIVES);
242:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:           assertEquals(8, Node.FLAG_NO_THROWS);
244:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:           assertEquals(39, Node.EMPTY_BLOCK);
246:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
247:           assertEquals(55, Node.INFERRED_FUNCTION);
248:           assertEquals(50, Node.FREE_CALL);
249:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
250:           assertEquals(36, Node.QUOTED_PROP);
251:           assertEquals(57, Node.REFLECTED_OBJECT);
252:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
253:           assertEquals(1, Node.DECR_FLAG);
254:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
255:           assertEquals(4095, Node.COLUMN_MASK);
256:           assertEquals(12, Node.COLUMN_BITS);
257:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
258:           assertEquals(37, Node.OPT_ARG_NAME);
259:           assertEquals(2, Node.POST_FLAG);
260:           assertEquals(32, Node.INCRDECR_PROP);
261:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:           assertEquals(29, Node.JSDOC_INFO_PROP);
263:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:           assertEquals(49, Node.DIRECT_EVAL);
265:           assertEquals(46, Node.IS_NAMESPACE);
266:           assertEquals(56, Node.CHANGE_TIME);
267:           assertEquals(51, Node.STATIC_SOURCE_FILE);
268:           assertEquals(54, Node.SLASH_V);
269:           assertEquals(43, Node.IS_CONSTANT_NAME);
270:           assertEquals(52, Node.LENGTH);
271:           assertEquals(57, Node.LAST_PROP);
272:           assertEquals(53, Node.INPUT_ID);
273:           assertEquals(15, Node.NO_SIDE_EFFECTS);
274:           assertEquals(40, Node.ORIGINALNAME_PROP);
275:           assertEquals(30, Node.VAR_ARGS_NAME);
276:           assertEquals(47, Node.IS_DISPATCHER);
277:           assertFalse(node0.isNull());
278:           assertFalse(node0.isSetterDef());
279:           assertFalse(node0.isName());
280:           assertFalse(node0.isStringKey());
281:           assertFalse(node0.isParamList());
282:           assertFalse(node0.isAdd());
283:           assertFalse(node0.isRegExp());
284:           assertFalse(node0.isTrue());
285:           assertEquals(39, node0.getType());
286:           assertFalse(node0.isBlock());
287:           assertFalse(node0.isTry());
288:           assertFalse(node0.isVoid());
289:           assertFalse(node0.isWhile());
290:           assertFalse(node0.isReturn());
291:           assertEquals((-1), node0.getLineno());
292:           assertFalse(node0.isCall());
293:           assertFalse(node0.isCatch());
294:           assertFalse(node0.hasMoreThanOneChild());
295:           assertFalse(node0.isTypeOf());
296:           assertEquals((-1), node0.getSourcePosition());
297:           assertFalse(node0.isDec());
298:           assertFalse(node0.isNE());
299:           assertFalse(node0.hasChildren());
300:           assertFalse(node0.isIf());
301:           assertTrue(node0.isNumber());
302:           assertFalse(node0.isString());
303:           assertFalse(node0.isIn());
304:           assertFalse(node0.isInc());
305:           assertFalse(node0.isDebugger());
306:           assertFalse(node0.isAnd());
307:           assertFalse(node0.isCast());
308:           assertFalse(node0.isFalse());
309:           assertFalse(node0.isFunction());
310:           assertFalse(node0.isContinue());
311:           assertFalse(node0.isThis());
312:           assertFalse(node0.isComma());
313:           assertFalse(node0.isBreak());
314:           assertFalse(node0.isGetProp());
315:           assertFalse(node0.isThrow());
316:           assertFalse(node0.isNot());
317:           assertFalse(node0.isObjectLit());
318:           assertFalse(node0.isScript());
319:           assertFalse(node0.isExprResult());
320:           assertFalse(node0.isCase());
321:           assertFalse(node0.isInstanceOf());
322:           assertFalse(node0.isHook());
323:           assertFalse(node0.isGetElem());
324:           assertFalse(node0.isAssign());
325:           assertFalse(node0.isWith());
326:           assertFalse(node0.isGetterDef());
327:           assertFalse(node0.isDelProp());
328:           assertFalse(node0.isLabelName());
329:           assertFalse(node0.isFor());
330:           assertFalse(node0.isAssignAdd());
331:           assertFalse(node0.hasOneChild());
332:           assertFalse(node0.isOr());
333:           assertFalse(node0.isEmpty());
334:           assertEquals((-1), node0.getCharno());
335:           assertFalse(node0.isNew());
336:           assertFalse(node0.isDo());
337:           assertFalse(node0.isSwitch());
338:           assertFalse(node0.isDefaultCase());
339:           assertFalse(node0.isVar());
340:           assertEquals(0, node0.getChildCount());
341:           assertFalse(node0.isLabel());
342:           assertFalse(node0.isArrayLit());
343:           assertFalse(iterable0.contains(node0));
344:           
345:           Node node1 = Node.newNumber((double) 31, 2, 889);
346:           assertNotNull(node1);
347:           assertEquals(51, Node.STATIC_SOURCE_FILE);
348:           assertEquals(12, Node.COLUMN_BITS);
349:           assertEquals(32, Node.INCRDECR_PROP);
350:           assertEquals(46, Node.IS_NAMESPACE);
351:           assertEquals(1, Node.DECR_FLAG);
352:           assertEquals(49, Node.DIRECT_EVAL);
353:           assertEquals(37, Node.OPT_ARG_NAME);
354:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
355:           assertEquals(47, Node.IS_DISPATCHER);
356:           assertEquals(2, Node.POST_FLAG);
357:           assertEquals(57, Node.LAST_PROP);
358:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
359:           assertEquals(30, Node.VAR_ARGS_NAME);
360:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:           assertEquals(40, Node.ORIGINALNAME_PROP);
362:           assertEquals(43, Node.IS_CONSTANT_NAME);
363:           assertEquals(50, Node.FREE_CALL);
364:           assertEquals(54, Node.SLASH_V);
365:           assertEquals(55, Node.INFERRED_FUNCTION);
366:           assertEquals(4095, Node.COLUMN_MASK);
367:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
368:           assertEquals(48, Node.DIRECTIVES);
369:           assertEquals(39, Node.EMPTY_BLOCK);
370:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:           assertEquals(57, Node.REFLECTED_OBJECT);
373:           assertEquals(52, Node.LENGTH);
374:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
375:           assertEquals(53, Node.INPUT_ID);
376:           assertEquals(29, Node.JSDOC_INFO_PROP);
377:           assertEquals(56, Node.CHANGE_TIME);
378:           assertEquals(15, Node.NO_SIDE_EFFECTS);
379:           assertEquals(36, Node.QUOTED_PROP);
380:           assertEquals(8, Node.FLAG_NO_THROWS);
381:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
382:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
383:           assertTrue(node1.isNumber());
384:           assertFalse(node1.isNE());
385:           assertEquals(9081, node1.getSourcePosition());
386:           assertFalse(node1.isIf());
387:           assertFalse(node1.isFor());
388:           assertFalse(node1.isDelProp());
389:           assertFalse(node1.isTry());
390:           assertFalse(node1.isHook());
391:           assertFalse(node1.isArrayLit());
392:           assertFalse(node1.isDebugger());
393:           assertFalse(node1.isSwitch());
394:           assertFalse(node1.isGetterDef());
395:           assertFalse(node1.isCase());
396:           assertFalse(node1.isString());
397:           assertEquals(0, node1.getChildCount());
398:           assertFalse(node1.isGetProp());
399:           assertFalse(node1.isNull());
400:           assertFalse(node1.isParamList());
401:           assertFalse(node1.isName());
402:           assertFalse(node1.isBreak());
403:           assertFalse(node1.isComma());
404:           assertFalse(node1.isExprResult());
405:           assertFalse(node1.isCall());
406:           assertEquals(2, node1.getLineno());
407:           assertFalse(node1.isAdd());
408:           assertFalse(node1.isNew());
409:           assertFalse(node1.isVar());
410:           assertFalse(node1.isTrue());
411:           assertFalse(node1.isVoid());
412:           assertFalse(node1.isDefaultCase());
413:           assertFalse(node1.isDo());
414:           assertFalse(node1.isEmpty());
415:           assertFalse(node1.isReturn());
416:           assertFalse(node1.isOr());
417:           assertFalse(node1.isAssignAdd());
418:           assertFalse(node1.isLabel());
419:           assertFalse(node1.isLabelName());
420:           assertEquals(39, node1.getType());
421:           assertFalse(node1.isAssign());
422:           assertFalse(node1.isGetElem());
423:           assertFalse(node1.isDec());
424:           assertFalse(node1.hasChildren());
425:           assertFalse(node1.hasMoreThanOneChild());
426:           assertFalse(node1.isCast());
427:           assertFalse(node1.isTypeOf());
428:           assertFalse(node1.isContinue());
429:           assertFalse(node1.isBlock());
430:           assertFalse(node1.hasOneChild());
431:           assertFalse(node1.isStringKey());
432:           assertFalse(node1.isWhile());
433:           assertFalse(node1.isNot());
434:           assertFalse(node1.isScript());
435:           assertEquals(889, node1.getCharno());
436:           assertFalse(node1.isObjectLit());
437:           assertFalse(node1.isThis());
438:           assertFalse(node1.isAnd());
439:           assertFalse(node1.isWith());
440:           assertFalse(node1.isCatch());
441:           assertFalse(node1.isRegExp());
442:           assertFalse(node1.isFunction());
443:           assertFalse(node1.isInstanceOf());
444:           assertFalse(node1.isFalse());
445:           assertFalse(node1.isThrow());
446:           assertFalse(node1.isSetterDef());
447:           assertFalse(node1.isInc());
448:           assertFalse(node1.isIn());
449:           assertFalse(node1.equals((Object)node0));
450:           assertNotSame(node1, node0);
451:           
452:           boolean boolean0 = node1.isVarArgs();
453:           assertFalse(boolean0);
454:           assertEquals(51, Node.STATIC_SOURCE_FILE);
455:           assertEquals(12, Node.COLUMN_BITS);
456:           assertEquals(32, Node.INCRDECR_PROP);
457:           assertEquals(46, Node.IS_NAMESPACE);
458:           assertEquals(1, Node.DECR_FLAG);
459:           assertEquals(49, Node.DIRECT_EVAL);
460:           assertEquals(37, Node.OPT_ARG_NAME);
461:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:           assertEquals(47, Node.IS_DISPATCHER);
463:           assertEquals(2, Node.POST_FLAG);
464:           assertEquals(57, Node.LAST_PROP);
465:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
466:           assertEquals(30, Node.VAR_ARGS_NAME);
467:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
468:           assertEquals(40, Node.ORIGINALNAME_PROP);
469:           assertEquals(43, Node.IS_CONSTANT_NAME);
470:           assertEquals(50, Node.FREE_CALL);
471:           assertEquals(54, Node.SLASH_V);
472:           assertEquals(55, Node.INFERRED_FUNCTION);
473:           assertEquals(4095, Node.COLUMN_MASK);
474:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:           assertEquals(48, Node.DIRECTIVES);
476:           assertEquals(39, Node.EMPTY_BLOCK);
477:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
478:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
479:           assertEquals(57, Node.REFLECTED_OBJECT);
480:           assertEquals(52, Node.LENGTH);
481:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
482:           assertEquals(53, Node.INPUT_ID);
483:           assertEquals(29, Node.JSDOC_INFO_PROP);
484:           assertEquals(56, Node.CHANGE_TIME);
485:           assertEquals(15, Node.NO_SIDE_EFFECTS);
486:           assertEquals(36, Node.QUOTED_PROP);
487:           assertEquals(8, Node.FLAG_NO_THROWS);
488:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
489:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
490:           assertTrue(node1.isNumber());
491:           assertFalse(node1.isNE());
492:           assertEquals(9081, node1.getSourcePosition());
493:           assertFalse(node1.isIf());
494:           assertFalse(node1.isFor());
495:           assertFalse(node1.isDelProp());
496:           assertFalse(node1.isTry());
497:           assertFalse(node1.isHook());
498:           assertFalse(node1.isArrayLit());
499:           assertFalse(node1.isDebugger());
500:           assertFalse(node1.isSwitch());
501:           assertFalse(node1.isGetterDef());
502:           assertFalse(node1.isCase());
503:           assertFalse(node1.isString());
504:           assertEquals(0, node1.getChildCount());
505:           assertFalse(node1.isGetProp());
506:           assertFalse(node1.isNull());
507:           assertFalse(node1.isParamList());
508:           assertFalse(node1.isName());
509:           assertFalse(node1.isBreak());
510:           assertFalse(node1.isComma());
511:           assertFalse(node1.isExprResult());
512:           assertFalse(node1.isCall());
513:           assertEquals(2, node1.getLineno());
514:           assertFalse(node1.isAdd());
515:           assertFalse(node1.isNew());
516:           assertFalse(node1.isVar());
517:           assertFalse(node1.isTrue());
518:           assertFalse(node1.isVoid());
519:           assertFalse(node1.isDefaultCase());
520:           assertFalse(node1.isDo());
521:           assertFalse(node1.isEmpty());
522:           assertFalse(node1.isReturn());
523:           assertFalse(node1.isOr());
524:           assertFalse(node1.isAssignAdd());
525:           assertFalse(node1.isLabel());
526:           assertFalse(node1.isLabelName());
527:           assertEquals(39, node1.getType());
528:           assertFalse(node1.isAssign());
529:           assertFalse(node1.isGetElem());
530:           assertFalse(node1.isDec());
531:           assertFalse(node1.hasChildren());
532:           assertFalse(node1.hasMoreThanOneChild());
533:           assertFalse(node1.isCast());
534:           assertFalse(node1.isTypeOf());
535:           assertFalse(node1.isContinue());
536:           assertFalse(node1.isBlock());
537:           assertFalse(node1.hasOneChild());
538:           assertFalse(node1.isStringKey());
539:           assertFalse(node1.isWhile());
540:           assertFalse(node1.isNot());
541:           assertFalse(node1.isScript());
542:           assertEquals(889, node1.getCharno());
543:           assertFalse(node1.isObjectLit());
544:           assertFalse(node1.isThis());
545:           assertFalse(node1.isAnd());
546:           assertFalse(node1.isWith());
547:           assertFalse(node1.isCatch());
548:           assertFalse(node1.isRegExp());
549:           assertFalse(node1.isFunction());
550:           assertFalse(node1.isInstanceOf());
551:           assertFalse(node1.isFalse());
552:           assertFalse(node1.isThrow());
553:           assertFalse(node1.isSetterDef());
554:           assertFalse(node1.isInc());
555:           assertFalse(node1.isIn());
556:           assertFalse(node1.equals((Object)node0));
557:           assertNotSame(node1, node0);
558:           
559:           Node node2 = new Node(36, node1, node1, node1);
560:           assertNotNull(node2);
561:           assertEquals(51, Node.STATIC_SOURCE_FILE);
562:           assertEquals(12, Node.COLUMN_BITS);
563:           assertEquals(32, Node.INCRDECR_PROP);
564:           assertEquals(46, Node.IS_NAMESPACE);
565:           assertEquals(1, Node.DECR_FLAG);
566:           assertEquals(49, Node.DIRECT_EVAL);
567:           assertEquals(37, Node.OPT_ARG_NAME);
568:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
569:           assertEquals(47, Node.IS_DISPATCHER);
570:           assertEquals(2, Node.POST_FLAG);
571:           assertEquals(57, Node.LAST_PROP);
572:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
573:           assertEquals(30, Node.VAR_ARGS_NAME);
574:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
575:           assertEquals(40, Node.ORIGINALNAME_PROP);
576:           assertEquals(43, Node.IS_CONSTANT_NAME);
577:           assertEquals(50, Node.FREE_CALL);
578:           assertEquals(54, Node.SLASH_V);
579:           assertEquals(55, Node.INFERRED_FUNCTION);
580:           assertEquals(4095, Node.COLUMN_MASK);
581:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
582:           assertEquals(48, Node.DIRECTIVES);
583:           assertEquals(39, Node.EMPTY_BLOCK);
584:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
586:           assertEquals(57, Node.REFLECTED_OBJECT);
587:           assertEquals(52, Node.LENGTH);
588:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
589:           assertEquals(53, Node.INPUT_ID);
590:           assertEquals(29, Node.JSDOC_INFO_PROP);
591:           assertEquals(56, Node.CHANGE_TIME);
592:           assertEquals(15, Node.NO_SIDE_EFFECTS);
593:           assertEquals(36, Node.QUOTED_PROP);
594:           assertEquals(8, Node.FLAG_NO_THROWS);
595:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
596:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
597:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
598:           assertEquals(36, Node.QUOTED_PROP);
599:           assertEquals(43, Node.IS_CONSTANT_NAME);
600:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
601:           assertEquals(53, Node.INPUT_ID);
602:           assertEquals(55, Node.INFERRED_FUNCTION);
603:           assertEquals(29, Node.JSDOC_INFO_PROP);
604:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
605:           assertEquals(37, Node.OPT_ARG_NAME);
606:           assertEquals(8, Node.FLAG_NO_THROWS);
607:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
608:           assertEquals(48, Node.DIRECTIVES);
609:           assertEquals(56, Node.CHANGE_TIME);
610:           assertEquals(12, Node.COLUMN_BITS);
611:           assertEquals(4095, Node.COLUMN_MASK);
612:           assertEquals(49, Node.DIRECT_EVAL);
613:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
614:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
615:           assertEquals(57, Node.LAST_PROP);
616:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
617:           assertEquals(57, Node.REFLECTED_OBJECT);
618:           assertEquals(54, Node.SLASH_V);
619:           assertEquals(51, Node.STATIC_SOURCE_FILE);
620:           assertEquals(1, Node.DECR_FLAG);
621:           assertEquals(32, Node.INCRDECR_PROP);
622:           assertEquals(50, Node.FREE_CALL);
623:           assertEquals(52, Node.LENGTH);
624:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
625:           assertEquals(15, Node.NO_SIDE_EFFECTS);
626:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:           assertEquals(39, Node.EMPTY_BLOCK);
628:           assertEquals(2, Node.POST_FLAG);
629:           assertEquals(47, Node.IS_DISPATCHER);
630:           assertEquals(46, Node.IS_NAMESPACE);
631:           assertEquals(40, Node.ORIGINALNAME_PROP);
632:           assertEquals(30, Node.VAR_ARGS_NAME);
633:           assertTrue(node1.isNumber());
634:           assertFalse(node1.isNE());
635:           assertEquals(9081, node1.getSourcePosition());
636:           assertFalse(node1.isIf());
637:           assertFalse(node1.isFor());
638:           assertFalse(node1.isDelProp());
639:           assertFalse(node1.isTry());
640:           assertFalse(node1.isHook());
641:           assertFalse(node1.isArrayLit());
642:           assertFalse(node1.isDebugger());
643:           assertFalse(node1.isSwitch());
644:           assertFalse(node1.isGetterDef());
645:           assertFalse(node1.isCase());
646:           assertFalse(node1.isString());
647:           assertEquals(0, node1.getChildCount());
648:           assertFalse(node1.isGetProp());
649:           assertFalse(node1.isNull());
650:           assertFalse(node1.isParamList());
651:           assertFalse(node1.isName());
652:           assertFalse(node1.isBreak());
653:           assertFalse(node1.isComma());
654:           assertFalse(node1.isExprResult());
655:           assertFalse(node1.isCall());
656:           assertEquals(2, node1.getLineno());
657:           assertFalse(node1.isAdd());
658:           assertFalse(node1.isNew());
659:           assertFalse(node1.isVar());
660:           assertFalse(node1.isTrue());
661:           assertFalse(node1.isVoid());
662:           assertFalse(node1.isDefaultCase());
663:           assertFalse(node1.isDo());
664:           assertFalse(node1.isEmpty());
665:           assertFalse(node1.isReturn());
666:           assertFalse(node1.isOr());
667:           assertFalse(node1.isAssignAdd());
668:           assertFalse(node1.isLabel());
669:           assertFalse(node1.isLabelName());
670:           assertEquals(39, node1.getType());
671:           assertFalse(node1.isAssign());
672:           assertFalse(node1.isGetElem());
673:           assertFalse(node1.isDec());
674:           assertFalse(node1.hasChildren());
675:           assertFalse(node1.hasMoreThanOneChild());
676:           assertFalse(node1.isCast());
677:           assertFalse(node1.isTypeOf());
678:           assertFalse(node1.isContinue());
679:           assertFalse(node1.isBlock());
680:           assertFalse(node1.hasOneChild());
681:           assertFalse(node1.isStringKey());
682:           assertFalse(node1.isWhile());
683:           assertFalse(node1.isNot());
684:           assertFalse(node1.isScript());
685:           assertEquals(889, node1.getCharno());
686:           assertFalse(node1.isObjectLit());
687:           assertFalse(node1.isThis());
688:           assertFalse(node1.isAnd());
689:           assertFalse(node1.isWith());
690:           assertFalse(node1.isCatch());
691:           assertFalse(node1.isRegExp());
692:           assertFalse(node1.isFunction());
693:           assertFalse(node1.isInstanceOf());
694:           assertFalse(node1.isFalse());
695:           assertFalse(node1.isThrow());
696:           assertFalse(node1.isSetterDef());
697:           assertFalse(node1.isInc());
698:           assertFalse(node1.isIn());
699:           assertFalse(node2.isScript());
700:           assertFalse(node2.isExprResult());
701:           assertFalse(node2.isWith());
702:           assertFalse(node2.isNot());
703:           assertFalse(node2.isObjectLit());
704:           assertFalse(node2.isGetProp());
705:           assertFalse(node2.isDec());
706:           assertFalse(node2.isBreak());
707:           assertFalse(node2.isThis());
708:           assertFalse(node2.isOr());
709:           assertFalse(node2.isComma());
710:           assertFalse(node2.isAssign());
711:           assertFalse(node2.isTypeOf());
712:           assertFalse(node2.isInstanceOf());
713:           assertFalse(node2.isGetElem());
714:           assertEquals((-1), node2.getLineno());
715:           assertEquals((-1), node2.getCharno());
716:           assertFalse(node2.hasMoreThanOneChild());
717:           assertFalse(node2.isHook());
718:           assertEquals(1, node2.getChildCount());
719:           assertFalse(node2.isVar());
720:           assertFalse(node2.isAdd());
721:           assertFalse(node2.isBlock());
722:           assertFalse(node2.isNew());
723:           assertFalse(node2.isCase());
724:           assertFalse(node2.isAssignAdd());
725:           assertFalse(node2.isDo());
726:           assertFalse(node2.isNumber());
727:           assertFalse(node2.isLabel());
728:           assertFalse(node2.isGetterDef());
729:           assertFalse(node2.isArrayLit());
730:           assertFalse(node2.isStringKey());
731:           assertFalse(node2.isParamList());
732:           assertFalse(node2.isLabelName());
733:           assertFalse(node2.isSwitch());
734:           assertFalse(node2.isDefaultCase());
735:           assertFalse(node2.isTrue());
736:           assertFalse(node2.isDebugger());
737:           assertEquals(36, node2.getType());
738:           assertFalse(node2.isRegExp());
739:           assertFalse(node2.isFunction());
740:           assertFalse(node2.isTry());
741:           assertFalse(node2.isIf());
742:           assertFalse(node2.isSetterDef());
743:           assertTrue(node2.hasOneChild());
744:           assertFalse(node2.isNE());
745:           assertFalse(node2.isNull());
746:           assertFalse(node2.isFor());
747:           assertFalse(node2.isEmpty());
748:           assertFalse(node2.isCatch());
749:           assertTrue(node2.hasChildren());
750:           assertFalse(node2.isCall());
751:           assertFalse(node2.isName());
752:           assertFalse(node2.isDelProp());
753:           assertFalse(node2.isVoid());
754:           assertFalse(node2.isWhile());
755:           assertFalse(node2.isString());
756:           assertFalse(node2.isInc());
757:           assertFalse(node2.isContinue());
758:           assertFalse(node2.isIn());
759:           assertFalse(node2.isReturn());
760:           assertFalse(node2.isThrow());
761:           assertEquals((-1), node2.getSourcePosition());
762:           assertFalse(node2.isFalse());
763:           assertFalse(node2.isCast());
764:           assertFalse(node2.isAnd());
765:           assertFalse(node1.equals((Object)node0));
766:           assertFalse(node2.equals((Object)node0));
767:           assertFalse(node2.equals((Object)node1));
768:           
769:           boolean boolean1 = node2.isOnlyModifiesArgumentsCall();
770:           assertFalse(boolean1);
771:           assertEquals(51, Node.STATIC_SOURCE_FILE);
772:           assertEquals(12, Node.COLUMN_BITS);
773:           assertEquals(32, Node.INCRDECR_PROP);
774:           assertEquals(46, Node.IS_NAMESPACE);
775:           assertEquals(1, Node.DECR_FLAG);
776:           assertEquals(49, Node.DIRECT_EVAL);
777:           assertEquals(37, Node.OPT_ARG_NAME);
778:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
779:           assertEquals(47, Node.IS_DISPATCHER);
780:           assertEquals(2, Node.POST_FLAG);
781:           assertEquals(57, Node.LAST_PROP);
782:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
783:           assertEquals(30, Node.VAR_ARGS_NAME);
784:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
785:           assertEquals(40, Node.ORIGINALNAME_PROP);
786:           assertEquals(43, Node.IS_CONSTANT_NAME);
787:           assertEquals(50, Node.FREE_CALL);
788:           assertEquals(54, Node.SLASH_V);
789:           assertEquals(55, Node.INFERRED_FUNCTION);
790:           assertEquals(4095, Node.COLUMN_MASK);
791:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:           assertEquals(48, Node.DIRECTIVES);
793:           assertEquals(39, Node.EMPTY_BLOCK);
794:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
796:           assertEquals(57, Node.REFLECTED_OBJECT);
797:           assertEquals(52, Node.LENGTH);
798:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
799:           assertEquals(53, Node.INPUT_ID);
800:           assertEquals(29, Node.JSDOC_INFO_PROP);
801:           assertEquals(56, Node.CHANGE_TIME);
802:           assertEquals(15, Node.NO_SIDE_EFFECTS);
803:           assertEquals(36, Node.QUOTED_PROP);
804:           assertEquals(8, Node.FLAG_NO_THROWS);
805:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
806:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
807:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
808:           assertEquals(36, Node.QUOTED_PROP);
809:           assertEquals(43, Node.IS_CONSTANT_NAME);
810:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
811:           assertEquals(53, Node.INPUT_ID);
812:           assertEquals(55, Node.INFERRED_FUNCTION);
813:           assertEquals(29, Node.JSDOC_INFO_PROP);
814:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
815:           assertEquals(37, Node.OPT_ARG_NAME);
816:           assertEquals(8, Node.FLAG_NO_THROWS);
817:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
818:           assertEquals(48, Node.DIRECTIVES);
819:           assertEquals(56, Node.CHANGE_TIME);
820:           assertEquals(12, Node.COLUMN_BITS);
821:           assertEquals(4095, Node.COLUMN_MASK);
822:           assertEquals(49, Node.DIRECT_EVAL);
823:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
824:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
825:           assertEquals(57, Node.LAST_PROP);
826:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
827:           assertEquals(57, Node.REFLECTED_OBJECT);
828:           assertEquals(54, Node.SLASH_V);
829:           assertEquals(51, Node.STATIC_SOURCE_FILE);
830:           assertEquals(1, Node.DECR_FLAG);
831:           assertEquals(32, Node.INCRDECR_PROP);
832:           assertEquals(50, Node.FREE_CALL);
833:           assertEquals(52, Node.LENGTH);
834:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:           assertEquals(15, Node.NO_SIDE_EFFECTS);
836:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:           assertEquals(39, Node.EMPTY_BLOCK);
838:           assertEquals(2, Node.POST_FLAG);
839:           assertEquals(47, Node.IS_DISPATCHER);
840:           assertEquals(46, Node.IS_NAMESPACE);
841:           assertEquals(40, Node.ORIGINALNAME_PROP);
842:           assertEquals(30, Node.VAR_ARGS_NAME);
843:           assertTrue(node1.isNumber());
844:           assertFalse(node1.isNE());
845:           assertEquals(9081, node1.getSourcePosition());
846:           assertFalse(node1.isIf());
847:           assertFalse(node1.isFor());
848:           assertFalse(node1.isDelProp());
849:           assertFalse(node1.isTry());
850:           assertFalse(node1.isHook());
851:           assertFalse(node1.isArrayLit());
852:           assertFalse(node1.isDebugger());
853:           assertFalse(node1.isSwitch());
854:           assertFalse(node1.isGetterDef());
855:           assertFalse(node1.isCase());
856:           assertFalse(node1.isString());
857:           assertEquals(0, node1.getChildCount());
858:           assertFalse(node1.isGetProp());
859:           assertFalse(node1.isNull());
860:           assertFalse(node1.isParamList());
861:           assertFalse(node1.isName());
862:           assertFalse(node1.isBreak());
863:           assertFalse(node1.isComma());
864:           assertFalse(node1.isExprResult());
865:           assertFalse(node1.isCall());
866:           assertEquals(2, node1.getLineno());
867:           assertFalse(node1.isAdd());
868:           assertFalse(node1.isNew());
869:           assertFalse(node1.isVar());
870:           assertFalse(node1.isTrue());
871:           assertFalse(node1.isVoid());
872:           assertFalse(node1.isDefaultCase());
873:           assertFalse(node1.isDo());
874:           assertFalse(node1.isEmpty());
875:           assertFalse(node1.isReturn());
876:           assertFalse(node1.isOr());
877:           assertFalse(node1.isAssignAdd());
878:           assertFalse(node1.isLabel());
879:           assertFalse(node1.isLabelName());
880:           assertEquals(39, node1.getType());
881:           assertFalse(node1.isAssign());
882:           assertFalse(node1.isGetElem());
883:           assertFalse(node1.isDec());
884:           assertFalse(node1.hasChildren());
885:           assertFalse(node1.hasMoreThanOneChild());
886:           assertFalse(node1.isCast());
887:           assertFalse(node1.isTypeOf());
888:           assertFalse(node1.isContinue());
889:           assertFalse(node1.isBlock());
890:           assertFalse(node1.hasOneChild());
891:           assertFalse(node1.isStringKey());
892:           assertFalse(node1.isWhile());
893:           assertFalse(node1.isNot());
894:           assertFalse(node1.isScript());
895:           assertEquals(889, node1.getCharno());
896:           assertFalse(node1.isObjectLit());
897:           assertFalse(node1.isThis());
898:           assertFalse(node1.isAnd());
899:           assertFalse(node1.isWith());
900:           assertFalse(node1.isCatch());
901:           assertFalse(node1.isRegExp());
902:           assertFalse(node1.isFunction());
903:           assertFalse(node1.isInstanceOf());
904:           assertFalse(node1.isFalse());
905:           assertFalse(node1.isThrow());
906:           assertFalse(node1.isSetterDef());
907:           assertFalse(node1.isInc());
908:           assertFalse(node1.isIn());
909:           assertFalse(node2.isScript());
910:           assertFalse(node2.isExprResult());
911:           assertFalse(node2.isWith());
912:           assertFalse(node2.isNot());
913:           assertFalse(node2.isObjectLit());
914:           assertFalse(node2.isGetProp());
915:           assertFalse(node2.isDec());
916:           assertFalse(node2.isBreak());
917:           assertFalse(node2.isThis());
918:           assertFalse(node2.isOr());
919:           assertFalse(node2.isComma());
920:           assertFalse(node2.isAssign());
921:           assertFalse(node2.isTypeOf());
922:           assertFalse(node2.isInstanceOf());
923:           assertFalse(node2.isGetElem());
924:           assertEquals((-1), node2.getLineno());
925:           assertEquals((-1), node2.getCharno());
926:           assertFalse(node2.hasMoreThanOneChild());
927:           assertFalse(node2.isHook());
928:           assertEquals(1, node2.getChildCount());
929:           assertFalse(node2.isVar());
930:           assertFalse(node2.isAdd());
931:           assertFalse(node2.isBlock());
932:           assertFalse(node2.isNew());
933:           assertFalse(node2.isCase());
934:           assertFalse(node2.isAssignAdd());
935:           assertFalse(node2.isDo());
936:           assertFalse(node2.isNumber());
937:           assertFalse(node2.isLabel());
938:           assertFalse(node2.isGetterDef());
939:           assertFalse(node2.isArrayLit());
940:           assertFalse(node2.isStringKey());
941:           assertFalse(node2.isParamList());
942:           assertFalse(node2.isLabelName());
943:           assertFalse(node2.isSwitch());
944:           assertFalse(node2.isDefaultCase());
945:           assertFalse(node2.isTrue());
946:           assertFalse(node2.isDebugger());
947:           assertEquals(36, node2.getType());
948:           assertFalse(node2.isRegExp());
949:           assertFalse(node2.isFunction());
950:           assertFalse(node2.isTry());
951:           assertFalse(node2.isIf());
952:           assertFalse(node2.isSetterDef());
953:           assertTrue(node2.hasOneChild());
954:           assertFalse(node2.isNE());
955:           assertFalse(node2.isNull());
956:           assertFalse(node2.isFor());
957:           assertFalse(node2.isEmpty());
958:           assertFalse(node2.isCatch());
959:           assertTrue(node2.hasChildren());
960:           assertFalse(node2.isCall());
961:           assertFalse(node2.isName());
962:           assertFalse(node2.isDelProp());
963:           assertFalse(node2.isVoid());
964:           assertFalse(node2.isWhile());
965:           assertFalse(node2.isString());
966:           assertFalse(node2.isInc());
967:           assertFalse(node2.isContinue());
968:           assertFalse(node2.isIn());
969:           assertFalse(node2.isReturn());
970:           assertFalse(node2.isThrow());
971:           assertEquals((-1), node2.getSourcePosition());
972:           assertFalse(node2.isFalse());
973:           assertFalse(node2.isCast());
974:           assertFalse(node2.isAnd());
975:           assertFalse(node1.equals((Object)node2));
976:           assertFalse(node1.equals((Object)node0));
977:           assertFalse(node2.equals((Object)node0));
978:           assertFalse(node2.equals((Object)node1));
979:           assertTrue(boolean1 == boolean0);
980:           assertNotSame(node1, node0);
981:           
982:           Node node3 = node1.clonePropsFrom(node0);
983:           assertNotNull(node3);
984:           assertEquals(48, Node.DIRECTIVES);
985:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
986:           assertEquals(8, Node.FLAG_NO_THROWS);
987:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
988:           assertEquals(39, Node.EMPTY_BLOCK);
989:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
990:           assertEquals(55, Node.INFERRED_FUNCTION);
991:           assertEquals(50, Node.FREE_CALL);
992:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
993:           assertEquals(36, Node.QUOTED_PROP);
994:           assertEquals(57, Node.REFLECTED_OBJECT);
995:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
996:           assertEquals(1, Node.DECR_FLAG);
997:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
998:           assertEquals(4095, Node.COLUMN_MASK);
999:           assertEquals(12, Node.COLUMN_BITS);
1000:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1001:           assertEquals(37, Node.OPT_ARG_NAME);
1002:           assertEquals(2, Node.POST_FLAG);
1003:           assertEquals(32, Node.INCRDECR_PROP);
1004:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1005:           assertEquals(29, Node.JSDOC_INFO_PROP);
1006:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1007:           assertEquals(49, Node.DIRECT_EVAL);
1008:           assertEquals(46, Node.IS_NAMESPACE);
1009:           assertEquals(56, Node.CHANGE_TIME);
1010:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1011:           assertEquals(54, Node.SLASH_V);
1012:           assertEquals(43, Node.IS_CONSTANT_NAME);
1013:           assertEquals(52, Node.LENGTH);
1014:           assertEquals(57, Node.LAST_PROP);
1015:           assertEquals(53, Node.INPUT_ID);
1016:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1017:           assertEquals(40, Node.ORIGINALNAME_PROP);
1018:           assertEquals(30, Node.VAR_ARGS_NAME);
1019:           assertEquals(47, Node.IS_DISPATCHER);
1020:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1021:           assertEquals(12, Node.COLUMN_BITS);
1022:           assertEquals(32, Node.INCRDECR_PROP);
1023:           assertEquals(46, Node.IS_NAMESPACE);
1024:           assertEquals(1, Node.DECR_FLAG);
1025:           assertEquals(49, Node.DIRECT_EVAL);
1026:           assertEquals(37, Node.OPT_ARG_NAME);
1027:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1028:           assertEquals(47, Node.IS_DISPATCHER);
1029:           assertEquals(2, Node.POST_FLAG);
1030:           assertEquals(57, Node.LAST_PROP);
1031:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1032:           assertEquals(30, Node.VAR_ARGS_NAME);
1033:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1034:           assertEquals(40, Node.ORIGINALNAME_PROP);
1035:           assertEquals(43, Node.IS_CONSTANT_NAME);
1036:           assertEquals(50, Node.FREE_CALL);
1037:           assertEquals(54, Node.SLASH_V);
1038:           assertEquals(55, Node.INFERRED_FUNCTION);
1039:           assertEquals(4095, Node.COLUMN_MASK);
1040:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1041:           assertEquals(48, Node.DIRECTIVES);
1042:           assertEquals(39, Node.EMPTY_BLOCK);
1043:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1044:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1045:           assertEquals(57, Node.REFLECTED_OBJECT);
1046:           assertEquals(52, Node.LENGTH);
1047:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1048:           assertEquals(53, Node.INPUT_ID);
1049:           assertEquals(29, Node.JSDOC_INFO_PROP);
1050:           assertEquals(56, Node.CHANGE_TIME);
1051:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1052:           assertEquals(36, Node.QUOTED_PROP);
1053:           assertEquals(8, Node.FLAG_NO_THROWS);
1054:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1055:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1056:           assertEquals(40, Node.ORIGINALNAME_PROP);
1057:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:           assertEquals(52, Node.LENGTH);
1059:           assertEquals(50, Node.FREE_CALL);
1060:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:           assertEquals(57, Node.REFLECTED_OBJECT);
1062:           assertEquals(48, Node.DIRECTIVES);
1063:           assertEquals(54, Node.SLASH_V);
1064:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1065:           assertEquals(49, Node.DIRECT_EVAL);
1066:           assertEquals(12, Node.COLUMN_BITS);
1067:           assertEquals(4095, Node.COLUMN_MASK);
1068:           assertEquals(46, Node.IS_NAMESPACE);
1069:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1070:           assertEquals(32, Node.INCRDECR_PROP);
1071:           assertEquals(1, Node.DECR_FLAG);
1072:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1074:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1075:           assertEquals(47, Node.IS_DISPATCHER);
1076:           assertEquals(37, Node.OPT_ARG_NAME);
1077:           assertEquals(2, Node.POST_FLAG);
1078:           assertEquals(43, Node.IS_CONSTANT_NAME);
1079:           assertEquals(56, Node.CHANGE_TIME);
1080:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1081:           assertEquals(55, Node.INFERRED_FUNCTION);
1082:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1083:           assertEquals(30, Node.VAR_ARGS_NAME);
1084:           assertEquals(36, Node.QUOTED_PROP);
1085:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1086:           assertEquals(8, Node.FLAG_NO_THROWS);
1087:           assertEquals(39, Node.EMPTY_BLOCK);
1088:           assertEquals(57, Node.LAST_PROP);
1089:           assertEquals(29, Node.JSDOC_INFO_PROP);
1090:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1091:           assertEquals(53, Node.INPUT_ID);
1092:           assertFalse(node0.isNull());
1093:           assertFalse(node0.isSetterDef());
1094:           assertFalse(node0.isName());
1095:           assertFalse(node0.isStringKey());
1096:           assertFalse(node0.isParamList());
1097:           assertFalse(node0.isAdd());
1098:           assertFalse(node0.isRegExp());
1099:           assertFalse(node0.isTrue());
1100:           assertEquals(39, node0.getType());
1101:           assertFalse(node0.isBlock());
1102:           assertFalse(node0.isTry());
1103:           assertFalse(node0.isVoid());
1104:           assertFalse(node0.isWhile());
1105:           assertFalse(node0.isReturn());
1106:           assertEquals((-1), node0.getLineno());
1107:           assertFalse(node0.isCall());
1108:           assertFalse(node0.isCatch());
1109:           assertFalse(node0.hasMoreThanOneChild());
1110:           assertFalse(node0.isTypeOf());
1111:           assertEquals((-1), node0.getSourcePosition());
1112:           assertFalse(node0.isDec());
1113:           assertFalse(node0.isNE());
1114:           assertFalse(node0.hasChildren());
1115:           assertFalse(node0.isIf());
1116:           assertTrue(node0.isNumber());
1117:           assertFalse(node0.isString());
1118:           assertFalse(node0.isIn());
1119:           assertFalse(node0.isInc());
1120:           assertFalse(node0.isDebugger());
1121:           assertFalse(node0.isAnd());
1122:           assertFalse(node0.isCast());
1123:           assertFalse(node0.isFalse());
1124:           assertFalse(node0.isFunction());
1125:           assertFalse(node0.isContinue());
1126:           assertFalse(node0.isThis());
1127:           assertFalse(node0.isComma());
1128:           assertFalse(node0.isBreak());
1129:           assertFalse(node0.isGetProp());
1130:           assertFalse(node0.isThrow());
1131:           assertFalse(node0.isNot());
1132:           assertFalse(node0.isObjectLit());
1133:           assertFalse(node0.isScript());
1134:           assertFalse(node0.isExprResult());
1135:           assertFalse(node0.isCase());
1136:           assertFalse(node0.isInstanceOf());
1137:           assertFalse(node0.isHook());
1138:           assertFalse(node0.isGetElem());
1139:           assertFalse(node0.isAssign());
1140:           assertFalse(node0.isWith());
1141:           assertFalse(node0.isGetterDef());
1142:           assertFalse(node0.isDelProp());
1143:           assertFalse(node0.isLabelName());
1144:           assertFalse(node0.isFor());
1145:           assertFalse(node0.isAssignAdd());
1146:           assertFalse(node0.hasOneChild());
1147:           assertFalse(node0.isOr());
1148:           assertFalse(node0.isEmpty());
1149:           assertEquals((-1), node0.getCharno());
1150:           assertFalse(node0.isNew());
1151:           assertFalse(node0.isDo());
1152:           assertFalse(node0.isSwitch());
1153:           assertFalse(node0.isDefaultCase());
1154:           assertFalse(node0.isVar());
1155:           assertEquals(0, node0.getChildCount());
1156:           assertFalse(node0.isLabel());
1157:           assertFalse(node0.isArrayLit());
1158:           assertTrue(node1.isNumber());
1159:           assertFalse(node1.isNE());
1160:           assertEquals(9081, node1.getSourcePosition());
1161:           assertFalse(node1.isIf());
1162:           assertFalse(node1.isFor());
1163:           assertFalse(node1.isDelProp());
1164:           assertFalse(node1.isTry());
1165:           assertFalse(node1.isHook());
1166:           assertFalse(node1.isArrayLit());
1167:           assertFalse(node1.isDebugger());
1168:           assertFalse(node1.isSwitch());
1169:           assertFalse(node1.isGetterDef());
1170:           assertFalse(node1.isCase());
1171:           assertFalse(node1.isString());
1172:           assertEquals(0, node1.getChildCount());
1173:           assertFalse(node1.isGetProp());
1174:           assertFalse(node1.isNull());
1175:           assertFalse(node1.isParamList());
1176:           assertFalse(node1.isName());
1177:           assertFalse(node1.isBreak());
1178:           assertFalse(node1.isComma());
1179:           assertFalse(node1.isExprResult());
1180:           assertFalse(node1.isCall());
1181:           assertEquals(2, node1.getLineno());
1182:           assertFalse(node1.isAdd());
1183:           assertFalse(node1.isNew());
1184:           assertFalse(node1.isVar());
1185:           assertFalse(node1.isTrue());
1186:           assertFalse(node1.isVoid());
1187:           assertFalse(node1.isDefaultCase());
1188:           assertFalse(node1.isDo());
1189:           assertFalse(node1.isEmpty());
1190:           assertFalse(node1.isReturn());
1191:           assertFalse(node1.isOr());
1192:           assertFalse(node1.isAssignAdd());
1193:           assertFalse(node1.isLabel());
1194:           assertFalse(node1.isLabelName());
1195:           assertEquals(39, node1.getType());
1196:           assertFalse(node1.isAssign());
1197:           assertFalse(node1.isGetElem());
1198:           assertFalse(node1.isDec());
1199:           assertFalse(node1.hasChildren());
1200:           assertFalse(node1.hasMoreThanOneChild());
1201:           assertFalse(node1.isCast());
1202:           assertFalse(node1.isTypeOf());
1203:           assertFalse(node1.isContinue());
1204:           assertFalse(node1.isBlock());
1205:           assertFalse(node1.hasOneChild());
1206:           assertFalse(node1.isStringKey());
1207:           assertFalse(node1.isWhile());
1208:           assertFalse(node1.isNot());
1209:           assertFalse(node1.isScript());
1210:           assertEquals(889, node1.getCharno());
1211:           assertFalse(node1.isObjectLit());
1212:           assertFalse(node1.isThis());
1213:           assertFalse(node1.isAnd());
1214:           assertFalse(node1.isWith());
1215:           assertFalse(node1.isCatch());
1216:           assertFalse(node1.isRegExp());
1217:           assertFalse(node1.isFunction());
1218:           assertFalse(node1.isInstanceOf());
1219:           assertFalse(node1.isFalse());
1220:           assertFalse(node1.isThrow());
1221:           assertFalse(node1.isSetterDef());
1222:           assertFalse(node1.isInc());
1223:           assertFalse(node1.isIn());
1224:           assertFalse(node3.isHook());
1225:           assertFalse(node3.isFalse());
1226:           assertFalse(node3.isInc());
1227:           assertFalse(node3.isBreak());
1228:           assertFalse(node3.isSwitch());
1229:           assertFalse(node3.isInstanceOf());
1230:           assertTrue(node3.isNumber());
1231:           assertFalse(node3.isGetProp());
1232:           assertFalse(node3.isObjectLit());
1233:           assertFalse(node3.isWith());
1234:           assertFalse(node3.isString());
1235:           assertFalse(node3.isScript());
1236:           assertFalse(node3.isThis());
1237:           assertFalse(node3.isComma());
1238:           assertFalse(node3.isCase());
1239:           assertFalse(node3.isFor());
1240:           assertEquals(9081, node3.getSourcePosition());
1241:           assertFalse(node3.isFunction());
1242:           assertFalse(node3.isCast());
1243:           assertFalse(node3.isIf());
1244:           assertFalse(node3.isNot());
1245:           assertFalse(node3.isDebugger());
1246:           assertFalse(node3.isNE());
1247:           assertFalse(node3.isAnd());
1248:           assertFalse(node3.isIn());
1249:           assertFalse(node3.isContinue());
1250:           assertFalse(node3.isSetterDef());
1251:           assertFalse(node3.isThrow());
1252:           assertFalse(node3.isVar());
1253:           assertEquals(889, node3.getCharno());
1254:           assertFalse(node3.isNew());
1255:           assertFalse(node3.isAdd());
1256:           assertFalse(node3.isCall());
1257:           assertFalse(node3.isNull());
1258:           assertFalse(node3.isStringKey());
1259:           assertFalse(node3.isName());
1260:           assertFalse(node3.isParamList());
1261:           assertFalse(node3.isReturn());
1262:           assertFalse(node3.hasMoreThanOneChild());
1263:           assertFalse(node3.isCatch());
1264:           assertFalse(node3.isDec());
1265:           assertFalse(node3.hasChildren());
1266:           assertFalse(node3.isTypeOf());
1267:           assertFalse(node3.isRegExp());
1268:           assertEquals(39, node3.getType());
1269:           assertFalse(node3.isAssign());
1270:           assertFalse(node3.isBlock());
1271:           assertFalse(node3.isTry());
1272:           assertFalse(node3.isWhile());
1273:           assertFalse(node3.hasOneChild());
1274:           assertFalse(node3.isArrayLit());
1275:           assertFalse(node3.isGetElem());
1276:           assertFalse(node3.isEmpty());
1277:           assertFalse(node3.isExprResult());
1278:           assertFalse(node3.isGetterDef());
1279:           assertFalse(node3.isDelProp());
1280:           assertFalse(node3.isLabelName());
1281:           assertFalse(node3.isTrue());
1282:           assertFalse(node3.isVoid());
1283:           assertEquals(0, node3.getChildCount());
1284:           assertFalse(node3.isOr());
1285:           assertFalse(node3.isLabel());
1286:           assertEquals(2, node3.getLineno());
1287:           assertFalse(node3.isDefaultCase());
1288:           assertFalse(node3.isDo());
1289:           assertFalse(node3.isAssignAdd());
1290:           assertFalse(node0.equals((Object)node2));
1291:           assertFalse(node0.equals((Object)node1));
1292:           assertFalse(node1.equals((Object)node2));
1293:           assertFalse(node1.equals((Object)node0));
1294:           assertFalse(node3.equals((Object)node2));
1295:           assertFalse(node3.equals((Object)node0));
1296:           assertNotSame(node0, node3);
1297:           assertNotSame(node0, node1);
1298:           assertNotSame(node1, node0);
1299:           assertSame(node1, node3);
1300:           assertSame(node3, node1);
1301:           assertNotSame(node3, node0);
1302:           
1303:           node1.addChildrenToFront(node2);
1304:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1305:           assertEquals(12, Node.COLUMN_BITS);
1306:           assertEquals(32, Node.INCRDECR_PROP);
1307:           assertEquals(46, Node.IS_NAMESPACE);
1308:           assertEquals(1, Node.DECR_FLAG);
1309:           assertEquals(49, Node.DIRECT_EVAL);
1310:           assertEquals(37, Node.OPT_ARG_NAME);
1311:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1312:           assertEquals(47, Node.IS_DISPATCHER);
1313:           assertEquals(2, Node.POST_FLAG);
1314:           assertEquals(57, Node.LAST_PROP);
1315:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1316:           assertEquals(30, Node.VAR_ARGS_NAME);
1317:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1318:           assertEquals(40, Node.ORIGINALNAME_PROP);
1319:           assertEquals(43, Node.IS_CONSTANT_NAME);
1320:           assertEquals(50, Node.FREE_CALL);
1321:           assertEquals(54, Node.SLASH_V);
1322:           assertEquals(55, Node.INFERRED_FUNCTION);
1323:           assertEquals(4095, Node.COLUMN_MASK);
1324:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1325:           assertEquals(48, Node.DIRECTIVES);
1326:           assertEquals(39, Node.EMPTY_BLOCK);
1327:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1328:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1329:           assertEquals(57, Node.REFLECTED_OBJECT);
1330:           assertEquals(52, Node.LENGTH);
1331:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1332:           assertEquals(53, Node.INPUT_ID);
1333:           assertEquals(29, Node.JSDOC_INFO_PROP);
1334:           assertEquals(56, Node.CHANGE_TIME);
1335:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1336:           assertEquals(36, Node.QUOTED_PROP);
1337:           assertEquals(8, Node.FLAG_NO_THROWS);
1338:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1339:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1340:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1341:           assertEquals(36, Node.QUOTED_PROP);
1342:           assertEquals(43, Node.IS_CONSTANT_NAME);
1343:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1344:           assertEquals(53, Node.INPUT_ID);
1345:           assertEquals(55, Node.INFERRED_FUNCTION);
1346:           assertEquals(29, Node.JSDOC_INFO_PROP);
1347:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1348:           assertEquals(37, Node.OPT_ARG_NAME);
1349:           assertEquals(8, Node.FLAG_NO_THROWS);
1350:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1351:           assertEquals(48, Node.DIRECTIVES);
1352:           assertEquals(56, Node.CHANGE_TIME);
1353:           assertEquals(12, Node.COLUMN_BITS);
1354:           assertEquals(4095, Node.COLUMN_MASK);
1355:           assertEquals(49, Node.DIRECT_EVAL);
1356:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1357:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1358:           assertEquals(57, Node.LAST_PROP);
1359:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1360:           assertEquals(57, Node.REFLECTED_OBJECT);
1361:           assertEquals(54, Node.SLASH_V);
1362:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1363:           assertEquals(1, Node.DECR_FLAG);
1364:           assertEquals(32, Node.INCRDECR_PROP);
1365:           assertEquals(50, Node.FREE_CALL);
1366:           assertEquals(52, Node.LENGTH);
1367:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1368:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1369:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1370:           assertEquals(39, Node.EMPTY_BLOCK);
1371:           assertEquals(2, Node.POST_FLAG);
1372:           assertEquals(47, Node.IS_DISPATCHER);
1373:           assertEquals(46, Node.IS_NAMESPACE);
1374:           assertEquals(40, Node.ORIGINALNAME_PROP);
1375:           assertEquals(30, Node.VAR_ARGS_NAME);
1376:           assertTrue(node1.isNumber());
1377:           assertTrue(node1.hasChildren());
1378:           assertEquals(1, node1.getChildCount());
1379:           assertFalse(node1.isNE());
1380:           assertEquals(9081, node1.getSourcePosition());
1381:           assertFalse(node1.isIf());
1382:           assertTrue(node1.hasOneChild());
1383:           assertFalse(node1.isFor());
1384:           assertFalse(node1.isDelProp());
1385:           assertFalse(node1.isTry());
1386:           assertFalse(node1.isHook());
1387:           assertFalse(node1.isArrayLit());
1388:           assertFalse(node1.isDebugger());
1389:           assertFalse(node1.isSwitch());
1390:           assertFalse(node1.isGetterDef());
1391:           assertFalse(node1.isCase());
1392:           assertFalse(node1.isString());
1393:           assertFalse(node1.isGetProp());
1394:           assertFalse(node1.isNull());
1395:           assertFalse(node1.isParamList());
1396:           assertFalse(node1.isName());
1397:           assertFalse(node1.isBreak());
1398:           assertFalse(node1.isComma());
1399:           assertFalse(node1.isExprResult());
1400:           assertFalse(node1.isCall());
1401:           assertEquals(2, node1.getLineno());
1402:           assertFalse(node1.isAdd());
1403:           assertFalse(node1.isNew());
1404:           assertFalse(node1.isVar());
1405:           assertFalse(node1.isTrue());
1406:           assertFalse(node1.isVoid());
1407:           assertFalse(node1.isDefaultCase());
1408:           assertFalse(node1.isDo());
1409:           assertFalse(node1.isEmpty());
1410:           assertFalse(node1.isReturn());
1411:           assertFalse(node1.isOr());
1412:           assertFalse(node1.isAssignAdd());
1413:           assertFalse(node1.isLabel());
1414:           assertFalse(node1.isLabelName());
1415:           assertEquals(39, node1.getType());
1416:           assertFalse(node1.isAssign());
1417:           assertFalse(node1.isGetElem());
1418:           assertFalse(node1.isDec());
1419:           assertFalse(node1.hasMoreThanOneChild());
1420:           assertFalse(node1.isCast());
1421:           assertFalse(node1.isTypeOf());
1422:           assertFalse(node1.isContinue());
1423:           assertFalse(node1.isBlock());
1424:           assertFalse(node1.isStringKey());
1425:           assertFalse(node1.isWhile());
1426:           assertFalse(node1.isNot());
1427:           assertFalse(node1.isScript());
1428:           assertEquals(889, node1.getCharno());
1429:           assertFalse(node1.isObjectLit());
1430:           assertFalse(node1.isThis());
1431:           assertFalse(node1.isAnd());
1432:           assertFalse(node1.isWith());
1433:           assertFalse(node1.isCatch());
1434:           assertFalse(node1.isRegExp());
1435:           assertFalse(node1.isFunction());
1436:           assertFalse(node1.isInstanceOf());
1437:           assertFalse(node1.isFalse());
1438:           assertFalse(node1.isThrow());
1439:           assertFalse(node1.isSetterDef());
1440:           assertFalse(node1.isInc());
1441:           assertFalse(node1.isIn());
1442:           assertFalse(node2.isScript());
1443:           assertFalse(node2.isExprResult());
1444:           assertFalse(node2.isWith());
1445:           assertFalse(node2.isNot());
1446:           assertFalse(node2.isObjectLit());
1447:           assertFalse(node2.isGetProp());
1448:           assertFalse(node2.isDec());
1449:           assertFalse(node2.isBreak());
1450:           assertFalse(node2.isThis());
1451:           assertFalse(node2.isOr());
1452:           assertFalse(node2.isComma());
1453:           assertFalse(node2.isAssign());
1454:           assertFalse(node2.isTypeOf());
1455:           assertFalse(node2.isInstanceOf());
1456:           assertFalse(node2.isGetElem());
1457:           assertEquals((-1), node2.getLineno());
1458:           assertEquals((-1), node2.getCharno());
1459:           assertFalse(node2.hasMoreThanOneChild());
1460:           assertFalse(node2.isHook());
1461:           assertEquals(1, node2.getChildCount());
1462:           assertFalse(node2.isVar());
1463:           assertFalse(node2.isAdd());
1464:           assertFalse(node2.isBlock());
1465:           assertFalse(node2.isNew());
1466:           assertFalse(node2.isCase());
1467:           assertFalse(node2.isAssignAdd());
1468:           assertFalse(node2.isDo());
1469:           assertFalse(node2.isNumber());
1470:           assertFalse(node2.isLabel());
1471:           assertFalse(node2.isGetterDef());
1472:           assertFalse(node2.isArrayLit());
1473:           assertFalse(node2.isStringKey());
1474:           assertFalse(node2.isParamList());
1475:           assertFalse(node2.isLabelName());
1476:           assertFalse(node2.isSwitch());
1477:           assertFalse(node2.isDefaultCase());
1478:           assertFalse(node2.isTrue());
1479:           assertFalse(node2.isDebugger());
1480:           assertEquals(36, node2.getType());
1481:           assertFalse(node2.isRegExp());
1482:           assertFalse(node2.isFunction());
1483:           assertFalse(node2.isTry());
1484:           assertFalse(node2.isIf());
1485:           assertFalse(node2.isSetterDef());
1486:           assertTrue(node2.hasOneChild());
1487:           assertFalse(node2.isNE());
1488:           assertFalse(node2.isNull());
1489:           assertFalse(node2.isFor());
1490:           assertFalse(node2.isEmpty());
1491:           assertFalse(node2.isCatch());
1492:           assertTrue(node2.hasChildren());
1493:           assertFalse(node2.isCall());
1494:           assertFalse(node2.isName());
1495:           assertFalse(node2.isDelProp());
1496:           assertFalse(node2.isVoid());
1497:           assertFalse(node2.isWhile());
1498:           assertFalse(node2.isString());
1499:           assertFalse(node2.isInc());
1500:           assertFalse(node2.isContinue());
1501:           assertFalse(node2.isIn());
1502:           assertFalse(node2.isReturn());
1503:           assertFalse(node2.isThrow());
1504:           assertEquals((-1), node2.getSourcePosition());
1505:           assertFalse(node2.isFalse());
1506:           assertFalse(node2.isCast());
1507:           assertFalse(node2.isAnd());
1508:           assertFalse(node1.equals((Object)node2));
1509:           assertFalse(node1.equals((Object)node0));
1510:           assertFalse(node2.equals((Object)node0));
1511:           assertFalse(node2.equals((Object)node3));
1512:           assertFalse(node2.equals((Object)node1));
1513:           assertNotSame(node1, node0);
1514:           assertSame(node1, node3);
1515:           
1516:           Node node4 = node0.copyInformationFrom(node1);
1517:           assertNotNull(node4);
1518:           assertEquals(48, Node.DIRECTIVES);
1519:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1520:           assertEquals(8, Node.FLAG_NO_THROWS);
1521:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1522:           assertEquals(39, Node.EMPTY_BLOCK);
1523:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1524:           assertEquals(55, Node.INFERRED_FUNCTION);
1525:           assertEquals(50, Node.FREE_CALL);
1526:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1527:           assertEquals(36, Node.QUOTED_PROP);
1528:           assertEquals(57, Node.REFLECTED_OBJECT);
1529:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1530:           assertEquals(1, Node.DECR_FLAG);
1531:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1532:           assertEquals(4095, Node.COLUMN_MASK);
1533:           assertEquals(12, Node.COLUMN_BITS);
1534:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1535:           assertEquals(37, Node.OPT_ARG_NAME);
1536:           assertEquals(2, Node.POST_FLAG);
1537:           assertEquals(32, Node.INCRDECR_PROP);
1538:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1539:           assertEquals(29, Node.JSDOC_INFO_PROP);
1540:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1541:           assertEquals(49, Node.DIRECT_EVAL);
1542:           assertEquals(46, Node.IS_NAMESPACE);
1543:           assertEquals(56, Node.CHANGE_TIME);
1544:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1545:           assertEquals(54, Node.SLASH_V);
1546:           assertEquals(43, Node.IS_CONSTANT_NAME);
1547:           assertEquals(52, Node.LENGTH);
1548:           assertEquals(57, Node.LAST_PROP);
1549:           assertEquals(53, Node.INPUT_ID);
1550:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1551:           assertEquals(40, Node.ORIGINALNAME_PROP);
1552:           assertEquals(30, Node.VAR_ARGS_NAME);
1553:           assertEquals(47, Node.IS_DISPATCHER);
1554:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1555:           assertEquals(12, Node.COLUMN_BITS);
1556:           assertEquals(32, Node.INCRDECR_PROP);
1557:           assertEquals(46, Node.IS_NAMESPACE);
1558:           assertEquals(1, Node.DECR_FLAG);
1559:           assertEquals(49, Node.DIRECT_EVAL);
1560:           assertEquals(37, Node.OPT_ARG_NAME);
1561:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1562:           assertEquals(47, Node.IS_DISPATCHER);
1563:           assertEquals(2, Node.POST_FLAG);
1564:           assertEquals(57, Node.LAST_PROP);
1565:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1566:           assertEquals(30, Node.VAR_ARGS_NAME);
1567:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1568:           assertEquals(40, Node.ORIGINALNAME_PROP);
1569:           assertEquals(43, Node.IS_CONSTANT_NAME);
1570:           assertEquals(50, Node.FREE_CALL);
1571:           assertEquals(54, Node.SLASH_V);
1572:           assertEquals(55, Node.INFERRED_FUNCTION);
1573:           assertEquals(4095, Node.COLUMN_MASK);
1574:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1575:           assertEquals(48, Node.DIRECTIVES);
1576:           assertEquals(39, Node.EMPTY_BLOCK);
1577:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1578:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1579:           assertEquals(57, Node.REFLECTED_OBJECT);
1580:           assertEquals(52, Node.LENGTH);
1581:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1582:           assertEquals(53, Node.INPUT_ID);
1583:           assertEquals(29, Node.JSDOC_INFO_PROP);
1584:           assertEquals(56, Node.CHANGE_TIME);
1585:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1586:           assertEquals(36, Node.QUOTED_PROP);
1587:           assertEquals(8, Node.FLAG_NO_THROWS);
1588:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1589:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1590:           assertEquals(52, Node.LENGTH);
1591:           assertEquals(50, Node.FREE_CALL);
1592:           assertEquals(54, Node.SLASH_V);
1593:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1594:           assertEquals(57, Node.REFLECTED_OBJECT);
1595:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1596:           assertEquals(8, Node.FLAG_NO_THROWS);
1597:           assertEquals(57, Node.LAST_PROP);
1598:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1599:           assertEquals(1, Node.DECR_FLAG);
1600:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1601:           assertEquals(39, Node.EMPTY_BLOCK);
1602:           assertEquals(12, Node.COLUMN_BITS);
1603:           assertEquals(4095, Node.COLUMN_MASK);
1604:           assertEquals(55, Node.INFERRED_FUNCTION);
1605:           assertEquals(32, Node.INCRDECR_PROP);
1606:           assertEquals(56, Node.CHANGE_TIME);
1607:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1608:           assertEquals(49, Node.DIRECT_EVAL);
1609:           assertEquals(48, Node.DIRECTIVES);
1610:           assertEquals(37, Node.OPT_ARG_NAME);
1611:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1612:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1613:           assertEquals(47, Node.IS_DISPATCHER);
1614:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1615:           assertEquals(36, Node.QUOTED_PROP);
1616:           assertEquals(29, Node.JSDOC_INFO_PROP);
1617:           assertEquals(53, Node.INPUT_ID);
1618:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1619:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1620:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1621:           assertEquals(30, Node.VAR_ARGS_NAME);
1622:           assertEquals(46, Node.IS_NAMESPACE);
1623:           assertEquals(2, Node.POST_FLAG);
1624:           assertEquals(43, Node.IS_CONSTANT_NAME);
1625:           assertEquals(40, Node.ORIGINALNAME_PROP);
1626:           assertFalse(node0.isNull());
1627:           assertFalse(node0.isSetterDef());
1628:           assertFalse(node0.isName());
1629:           assertFalse(node0.isStringKey());
1630:           assertFalse(node0.isParamList());
1631:           assertEquals(889, node0.getCharno());
1632:           assertFalse(node0.isAdd());
1633:           assertFalse(node0.isRegExp());
1634:           assertFalse(node0.isTrue());
1635:           assertEquals(39, node0.getType());
1636:           assertFalse(node0.isBlock());
1637:           assertFalse(node0.isTry());
1638:           assertFalse(node0.isVoid());
1639:           assertFalse(node0.isWhile());
1640:           assertFalse(node0.isReturn());
1641:           assertFalse(node0.isCall());
1642:           assertFalse(node0.isCatch());
1643:           assertFalse(node0.hasMoreThanOneChild());
1644:           assertFalse(node0.isTypeOf());
1645:           assertFalse(node0.isDec());
1646:           assertFalse(node0.isNE());
1647:           assertFalse(node0.hasChildren());
1648:           assertFalse(node0.isIf());
1649:           assertTrue(node0.isNumber());
1650:           assertFalse(node0.isString());
1651:           assertFalse(node0.isIn());
1652:           assertFalse(node0.isInc());
1653:           assertFalse(node0.isDebugger());
1654:           assertFalse(node0.isAnd());
1655:           assertFalse(node0.isCast());
1656:           assertFalse(node0.isFalse());
1657:           assertFalse(node0.isFunction());
1658:           assertFalse(node0.isContinue());
1659:           assertFalse(node0.isThis());
1660:           assertFalse(node0.isComma());
1661:           assertFalse(node0.isBreak());
1662:           assertFalse(node0.isGetProp());
1663:           assertFalse(node0.isThrow());
1664:           assertFalse(node0.isNot());
1665:           assertFalse(node0.isObjectLit());
1666:           assertFalse(node0.isScript());
1667:           assertFalse(node0.isExprResult());
1668:           assertFalse(node0.isCase());
1669:           assertFalse(node0.isInstanceOf());
1670:           assertFalse(node0.isHook());
1671:           assertFalse(node0.isGetElem());
1672:           assertFalse(node0.isAssign());
1673:           assertFalse(node0.isWith());
1674:           assertFalse(node0.isGetterDef());
1675:           assertFalse(node0.isDelProp());
1676:           assertFalse(node0.isLabelName());
1677:           assertFalse(node0.isFor());
1678:           assertEquals(9081, node0.getSourcePosition());
1679:           assertFalse(node0.isAssignAdd());
1680:           assertFalse(node0.hasOneChild());
1681:           assertFalse(node0.isOr());
1682:           assertFalse(node0.isEmpty());
1683:           assertFalse(node0.isNew());
1684:           assertFalse(node0.isDo());
1685:           assertFalse(node0.isSwitch());
1686:           assertFalse(node0.isDefaultCase());
1687:           assertFalse(node0.isVar());
1688:           assertEquals(0, node0.getChildCount());
1689:           assertFalse(node0.isLabel());
1690:           assertFalse(node0.isArrayLit());
1691:           assertEquals(2, node0.getLineno());
1692:           assertTrue(node1.isNumber());
1693:           assertTrue(node1.hasChildren());
1694:           assertEquals(1, node1.getChildCount());
1695:           assertFalse(node1.isNE());
1696:           assertEquals(9081, node1.getSourcePosition());
1697:           assertFalse(node1.isIf());
1698:           assertTrue(node1.hasOneChild());
1699:           assertFalse(node1.isFor());
1700:           assertFalse(node1.isDelProp());
1701:           assertFalse(node1.isTry());
1702:           assertFalse(node1.isHook());
1703:           assertFalse(node1.isArrayLit());
1704:           assertFalse(node1.isDebugger());
1705:           assertFalse(node1.isSwitch());
1706:           assertFalse(node1.isGetterDef());
1707:           assertFalse(node1.isCase());
1708:           assertFalse(node1.isString());
1709:           assertFalse(node1.isGetProp());
1710:           assertFalse(node1.isNull());
1711:           assertFalse(node1.isParamList());
1712:           assertFalse(node1.isName());
1713:           assertFalse(node1.isBreak());
1714:           assertFalse(node1.isComma());
1715:           assertFalse(node1.isExprResult());
1716:           assertFalse(node1.isCall());
1717:           assertEquals(2, node1.getLineno());
1718:           assertFalse(node1.isAdd());
1719:           assertFalse(node1.isNew());
1720:           assertFalse(node1.isVar());
1721:           assertFalse(node1.isTrue());
1722:           assertFalse(node1.isVoid());
1723:           assertFalse(node1.isDefaultCase());
1724:           assertFalse(node1.isDo());
1725:           assertFalse(node1.isEmpty());
1726:           assertFalse(node1.isReturn());
1727:           assertFalse(node1.isOr());
1728:           assertFalse(node1.isAssignAdd());
1729:           assertFalse(node1.isLabel());
1730:           assertFalse(node1.isLabelName());
1731:           assertEquals(39, node1.getType());
1732:           assertFalse(node1.isAssign());
1733:           assertFalse(node1.isGetElem());
1734:           assertFalse(node1.isDec());
1735:           assertFalse(node1.hasMoreThanOneChild());
1736:           assertFalse(node1.isCast());
1737:           assertFalse(node1.isTypeOf());
1738:           assertFalse(node1.isContinue());
1739:           assertFalse(node1.isBlock());
1740:           assertFalse(node1.isStringKey());
1741:           assertFalse(node1.isWhile());
1742:           assertFalse(node1.isNot());
1743:           assertFalse(node1.isScript());
1744:           assertEquals(889, node1.getCharno());
1745:           assertFalse(node1.isObjectLit());
1746:           assertFalse(node1.isThis());
1747:           assertFalse(node1.isAnd());
1748:           assertFalse(node1.isWith());
1749:           assertFalse(node1.isCatch());
1750:           assertFalse(node1.isRegExp());
1751:           assertFalse(node1.isFunction());
1752:           assertFalse(node1.isInstanceOf());
1753:           assertFalse(node1.isFalse());
1754:           assertFalse(node1.isThrow());
1755:           assertFalse(node1.isSetterDef());
1756:           assertFalse(node1.isInc());
1757:           assertFalse(node1.isIn());
1758:           assertFalse(node4.isAdd());
1759:           assertFalse(node4.isNew());
1760:           assertFalse(node4.isBlock());
1761:           assertEquals(889, node4.getCharno());
1762:           assertFalse(node4.isCall());
1763:           assertFalse(node4.isWhile());
1764:           assertFalse(node4.isDo());
1765:           assertEquals(39, node4.getType());
1766:           assertFalse(node4.isSetterDef());
1767:           assertFalse(node4.isVar());
1768:           assertFalse(node4.isReturn());
1769:           assertFalse(node4.isOr());
1770:           assertFalse(node4.isCatch());
1771:           assertFalse(node4.isTypeOf());
1772:           assertFalse(node4.hasMoreThanOneChild());
1773:           assertFalse(node4.isGetElem());
1774:           assertFalse(node4.isNull());
1775:           assertFalse(node4.isTrue());
1776:           assertFalse(node4.isVoid());
1777:           assertFalse(node4.isName());
1778:           assertFalse(node4.isExprResult());
1779:           assertFalse(node4.isFunction());
1780:           assertFalse(node4.isDebugger());
1781:           assertFalse(node4.isCast());
1782:           assertFalse(node4.isAssign());
1783:           assertFalse(node4.isDec());
1784:           assertFalse(node4.hasChildren());
1785:           assertTrue(node4.isNumber());
1786:           assertFalse(node4.isGetProp());
1787:           assertFalse(node4.isContinue());
1788:           assertFalse(node4.isObjectLit());
1789:           assertFalse(node4.isNot());
1790:           assertFalse(node4.isAnd());
1791:           assertFalse(node4.isHook());
1792:           assertFalse(node4.isInc());
1793:           assertFalse(node4.isFalse());
1794:           assertFalse(node4.isString());
1795:           assertFalse(node4.isCase());
1796:           assertFalse(node4.isThis());
1797:           assertFalse(node4.isThrow());
1798:           assertFalse(node4.isInstanceOf());
1799:           assertFalse(node4.isComma());
1800:           assertFalse(node4.isWith());
1801:           assertFalse(node4.isIn());
1802:           assertFalse(node4.isDelProp());
1803:           assertFalse(node4.isBreak());
1804:           assertFalse(node4.isNE());
1805:           assertFalse(node4.isIf());
1806:           assertFalse(node4.isTry());
1807:           assertFalse(node4.isArrayLit());
1808:           assertFalse(node4.hasOneChild());
1809:           assertFalse(node4.isRegExp());
1810:           assertFalse(node4.isEmpty());
1811:           assertFalse(node4.isFor());
1812:           assertFalse(node4.isScript());
1813:           assertEquals(9081, node4.getSourcePosition());
1814:           assertFalse(node4.isAssignAdd());
1815:           assertFalse(node4.isDefaultCase());
1816:           assertEquals(0, node4.getChildCount());
1817:           assertFalse(node4.isLabel());
1818:           assertEquals(2, node4.getLineno());
1819:           assertFalse(node4.isGetterDef());
1820:           assertFalse(node4.isLabelName());
1821:           assertFalse(node4.isParamList());
1822:           assertFalse(node4.isStringKey());
1823:           assertFalse(node4.isSwitch());
1824:           assertFalse(node0.equals((Object)node3));
1825:           assertFalse(node0.equals((Object)node2));
1826:           assertFalse(node0.equals((Object)node1));
1827:           assertFalse(node1.equals((Object)node2));
1828:           assertFalse(node1.equals((Object)node0));
1829:           assertFalse(node4.equals((Object)node2));
1830:           assertFalse(node4.equals((Object)node1));
1831:           assertFalse(node4.equals((Object)node3));
1832:           assertSame(node0, node4);
1833:           assertNotSame(node0, node3);
1834:           assertNotSame(node0, node1);
1835:           assertNotSame(node1, node0);
1836:           assertNotSame(node1, node4);
1837:           assertSame(node1, node3);
1838:           assertNotSame(node4, node1);
1839:           assertSame(node4, node0);
1840:           assertNotSame(node4, node3);
1841:           
1842:           boolean boolean2 = node1.isNoSideEffectsCall();
1843:           assertFalse(boolean2);
1844:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1845:           assertEquals(12, Node.COLUMN_BITS);
1846:           assertEquals(32, Node.INCRDECR_PROP);
1847:           assertEquals(46, Node.IS_NAMESPACE);
1848:           assertEquals(1, Node.DECR_FLAG);
1849:           assertEquals(49, Node.DIRECT_EVAL);
1850:           assertEquals(37, Node.OPT_ARG_NAME);
1851:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1852:           assertEquals(47, Node.IS_DISPATCHER);
1853:           assertEquals(2, Node.POST_FLAG);
1854:           assertEquals(57, Node.LAST_PROP);
1855:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1856:           assertEquals(30, Node.VAR_ARGS_NAME);
1857:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1858:           assertEquals(40, Node.ORIGINALNAME_PROP);
1859:           assertEquals(43, Node.IS_CONSTANT_NAME);
1860:           assertEquals(50, Node.FREE_CALL);
1861:           assertEquals(54, Node.SLASH_V);
1862:           assertEquals(55, Node.INFERRED_FUNCTION);
1863:           assertEquals(4095, Node.COLUMN_MASK);
1864:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1865:           assertEquals(48, Node.DIRECTIVES);
1866:           assertEquals(39, Node.EMPTY_BLOCK);
1867:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1868:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1869:           assertEquals(57, Node.REFLECTED_OBJECT);
1870:           assertEquals(52, Node.LENGTH);
1871:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1872:           assertEquals(53, Node.INPUT_ID);
1873:           assertEquals(29, Node.JSDOC_INFO_PROP);
1874:           assertEquals(56, Node.CHANGE_TIME);
1875:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1876:           assertEquals(36, Node.QUOTED_PROP);
1877:           assertEquals(8, Node.FLAG_NO_THROWS);
1878:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1879:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1880:           assertTrue(node1.isNumber());
1881:           assertTrue(node1.hasChildren());
1882:           assertEquals(1, node1.getChildCount());
1883:           assertFalse(node1.isNE());
1884:           assertEquals(9081, node1.getSourcePosition());
1885:           assertFalse(node1.isIf());
1886:           assertTrue(node1.hasOneChild());
1887:           assertFalse(node1.isFor());
1888:           assertFalse(node1.isDelProp());
1889:           assertFalse(node1.isTry());
1890:           assertFalse(node1.isHook());
1891:           assertFalse(node1.isArrayLit());
1892:           assertFalse(node1.isDebugger());
1893:           assertFalse(node1.isSwitch());
1894:           assertFalse(node1.isGetterDef());
1895:           assertFalse(node1.isCase());
1896:           assertFalse(node1.isString());
1897:           assertFalse(node1.isGetProp());
1898:           assertFalse(node1.isNull());
1899:           assertFalse(node1.isParamList());
1900:           assertFalse(node1.isName());
1901:           assertFalse(node1.isBreak());
1902:           assertFalse(node1.isComma());
1903:           assertFalse(node1.isExprResult());
1904:           assertFalse(node1.isCall());
1905:           assertEquals(2, node1.getLineno());
1906:           assertFalse(node1.isAdd());
1907:           assertFalse(node1.isNew());
1908:           assertFalse(node1.isVar());
1909:           assertFalse(node1.isTrue());
1910:           assertFalse(node1.isVoid());
1911:           assertFalse(node1.isDefaultCase());
1912:           assertFalse(node1.isDo());
1913:           assertFalse(node1.isEmpty());
1914:           assertFalse(node1.isReturn());
1915:           assertFalse(node1.isOr());
1916:           assertFalse(node1.isAssignAdd());
1917:           assertFalse(node1.isLabel());
1918:           assertFalse(node1.isLabelName());
1919:           assertEquals(39, node1.getType());
1920:           assertFalse(node1.isAssign());
1921:           assertFalse(node1.isGetElem());
1922:           assertFalse(node1.isDec());
1923:           assertFalse(node1.hasMoreThanOneChild());
1924:           assertFalse(node1.isCast());
1925:           assertFalse(node1.isTypeOf());
1926:           assertFalse(node1.isContinue());
1927:           assertFalse(node1.isBlock());
1928:           assertFalse(node1.isStringKey());
1929:           assertFalse(node1.isWhile());
1930:           assertFalse(node1.isNot());
1931:           assertFalse(node1.isScript());
1932:           assertEquals(889, node1.getCharno());
1933:           assertFalse(node1.isObjectLit());
1934:           assertFalse(node1.isThis());
1935:           assertFalse(node1.isAnd());
1936:           assertFalse(node1.isWith());
1937:           assertFalse(node1.isCatch());
1938:           assertFalse(node1.isRegExp());
1939:           assertFalse(node1.isFunction());
1940:           assertFalse(node1.isInstanceOf());
1941:           assertFalse(node1.isFalse());
1942:           assertFalse(node1.isThrow());
1943:           assertFalse(node1.isSetterDef());
1944:           assertFalse(node1.isInc());
1945:           assertFalse(node1.isIn());
1946:           assertFalse(node1.equals((Object)node2));
1947:           assertFalse(node1.equals((Object)node0));
1948:           assertFalse(node1.equals((Object)node4));
1949:           assertTrue(boolean2 == boolean1);
1950:           assertTrue(boolean2 == boolean0);
1951:           assertNotSame(node1, node0);
1952:           assertNotSame(node1, node4);
1953:           assertSame(node1, node3);
1954:           
1955:           Node.AncestorIterable node_AncestorIterable0 = node4.getAncestors();
1956:           assertNotNull(node_AncestorIterable0);
1957:           assertEquals(48, Node.DIRECTIVES);
1958:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1959:           assertEquals(8, Node.FLAG_NO_THROWS);
1960:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1961:           assertEquals(39, Node.EMPTY_BLOCK);
1962:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1963:           assertEquals(55, Node.INFERRED_FUNCTION);
1964:           assertEquals(50, Node.FREE_CALL);
1965:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1966:           assertEquals(36, Node.QUOTED_PROP);
1967:           assertEquals(57, Node.REFLECTED_OBJECT);
1968:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1969:           assertEquals(1, Node.DECR_FLAG);
1970:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
1971:           assertEquals(4095, Node.COLUMN_MASK);
1972:           assertEquals(12, Node.COLUMN_BITS);
1973:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1974:           assertEquals(37, Node.OPT_ARG_NAME);
1975:           assertEquals(2, Node.POST_FLAG);
1976:           assertEquals(32, Node.INCRDECR_PROP);
1977:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1978:           assertEquals(29, Node.JSDOC_INFO_PROP);
1979:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1980:           assertEquals(49, Node.DIRECT_EVAL);
1981:           assertEquals(46, Node.IS_NAMESPACE);
1982:           assertEquals(56, Node.CHANGE_TIME);
1983:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1984:           assertEquals(54, Node.SLASH_V);
1985:           assertEquals(43, Node.IS_CONSTANT_NAME);
1986:           assertEquals(52, Node.LENGTH);
1987:           assertEquals(57, Node.LAST_PROP);
1988:           assertEquals(53, Node.INPUT_ID);
1989:           assertEquals(15, Node.NO_SIDE_EFFECTS);
1990:           assertEquals(40, Node.ORIGINALNAME_PROP);
1991:           assertEquals(30, Node.VAR_ARGS_NAME);
1992:           assertEquals(47, Node.IS_DISPATCHER);
1993:           assertEquals(51, Node.STATIC_SOURCE_FILE);
1994:           assertEquals(12, Node.COLUMN_BITS);
1995:           assertEquals(32, Node.INCRDECR_PROP);
1996:           assertEquals(46, Node.IS_NAMESPACE);
1997:           assertEquals(1, Node.DECR_FLAG);
1998:           assertEquals(49, Node.DIRECT_EVAL);
1999:           assertEquals(37, Node.OPT_ARG_NAME);
2000:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2001:           assertEquals(47, Node.IS_DISPATCHER);
2002:           assertEquals(2, Node.POST_FLAG);
2003:           assertEquals(57, Node.LAST_PROP);
2004:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2005:           assertEquals(30, Node.VAR_ARGS_NAME);
2006:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2007:           assertEquals(40, Node.ORIGINALNAME_PROP);
2008:           assertEquals(43, Node.IS_CONSTANT_NAME);
2009:           assertEquals(50, Node.FREE_CALL);
2010:           assertEquals(54, Node.SLASH_V);
2011:           assertEquals(55, Node.INFERRED_FUNCTION);
2012:           assertEquals(4095, Node.COLUMN_MASK);
2013:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2014:           assertEquals(48, Node.DIRECTIVES);
2015:           assertEquals(39, Node.EMPTY_BLOCK);
2016:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2017:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2018:           assertEquals(57, Node.REFLECTED_OBJECT);
2019:           assertEquals(52, Node.LENGTH);
2020:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
2021:           assertEquals(53, Node.INPUT_ID);
2022:           assertEquals(29, Node.JSDOC_INFO_PROP);
2023:           assertEquals(56, Node.CHANGE_TIME);
2024:           assertEquals(15, Node.NO_SIDE_EFFECTS);
2025:           assertEquals(36, Node.QUOTED_PROP);
2026:           assertEquals(8, Node.FLAG_NO_THROWS);
2027:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2028:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2029:           assertEquals(52, Node.LENGTH);
2030:           assertEquals(50, Node.FREE_CALL);
2031:           assertEquals(54, Node.SLASH_V);
2032:           assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2033:           assertEquals(57, Node.REFLECTED_OBJECT);
2034:           assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2035:           assertEquals(8, Node.FLAG_NO_THROWS);
2036:           assertEquals(57, Node.LAST_PROP);
2037:           assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2038:           assertEquals(1, Node.DECR_FLAG);
2039:           assertEquals(15, Node.NO_SIDE_EFFECTS);
2040:           assertEquals(39, Node.EMPTY_BLOCK);
2041:           assertEquals(12, Node.COLUMN_BITS);
2042:           assertEquals(4095, Node.COLUMN_MASK);
2043:           assertEquals(55, Node.INFERRED_FUNCTION);
2044:           assertEquals(32, Node.INCRDECR_PROP);
2045:           assertEquals(56, Node.CHANGE_TIME);
2046:           assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2047:           assertEquals(49, Node.DIRECT_EVAL);
2048:           assertEquals(48, Node.DIRECTIVES);
2049:           assertEquals(37, Node.OPT_ARG_NAME);
2050:           assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2051:           assertEquals(0, Node.SIDE_EFFECTS_ALL);
2052:           assertEquals(47, Node.IS_DISPATCHER);
2053:           assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2054:           assertEquals(36, Node.QUOTED_PROP);
2055:           assertEquals(29, Node.JSDOC_INFO_PROP);
2056:           assertEquals(53, Node.INPUT_ID);
2057:           assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2058:           assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2059:           assertEquals(51, Node.STATIC_SOURCE_FILE);
2060:           assertEquals(30, Node.VAR_ARGS_NAME);
2061:           assertEquals(46, Node.IS_NAMESPACE);
2062:           assertEquals(2, Node.POST_FLAG);
2063:           assertEquals(43, Node.IS_CONSTANT_NAME);
2064:           assertEquals(40, Node.ORIGINALNAME_PROP);
2065:           assertFalse(node0.isNull());
2066:           assertFalse(node0.isSetterDef());
2067:           assertFalse(node0.isName());
2068:           assertFalse(node0.isStringKey());
2069:           assertFalse(node0.isParamList());
2070:           assertEquals(889, node0.getCharno());
2071:           assertFalse(node0.isAdd());
2072:           assertFalse(node0.isRegExp());
2073:           assertFalse(node0.isTrue());
2074:           assertEquals(39, node0.getType());
2075:           assertFalse(node0.isBlock());
2076:           assertFalse(node0.isTry());
2077:           assertFalse(node0.isVoid());
2078:           assertFalse(node0.isWhile());
2079:           assertFalse(node0.isReturn());
2080:           assertFalse(node0.isCall());
2081:           assertFalse(node0.isCatch());
2082:           assertFalse(node0.hasMoreThanOneChild());
2083:           assertFalse(node0.isTypeOf());
2084:           assertFalse(node0.isDec());
2085:           assertFalse(node0.isNE());
2086:           assertFalse(node0.hasChildren());
2087:           assertFalse(node0.isIf());
2088:           assertTrue(node0.isNumber());
2089:           assertFalse(node0.isString());
2090:           assertFalse(node0.isIn());
2091:           assertFalse(node0.isInc());
2092:           assertFalse(node0.isDebugger());
2093:           assertFalse(node0.isAnd());
2094:           assertFalse(node0.isCast());
2095:           assertFalse(node0.isFalse());
2096:           assertFalse(node0.isFunction());
2097:           assertFalse(node0.isContinue());
2098:           assertFalse(node0.isThis());
2099:           assertFalse(node0.isComma());
2100:           assertFalse(node0.isBreak());
2101:           assertFalse(node0.isGetProp());
2102:           assertFalse(node0.isThrow());
2103:           assertFalse(node0.isNot());
2104:           assertFalse(node0.isObjectLit());
2105:           assertFalse(node0.isScript());
2106:           assertFalse(node0.isExprResult());
2107:           assertFalse(node0.isCase());
2108:           assertFalse(node0.isInstanceOf());
2109:           assertFalse(node0.isHook());
2110:           assertFalse(node0.isGetElem());
2111:           assertFalse(node0.isAssign());
2112:           assertFalse(node0.isWith());
2113:           assertFalse(node0.isGetterDef());
2114:           assertFalse(node0.isDelProp());
2115:           assertFalse(node0.isLabelName());
2116:           assertFalse(node0.isFor());
2117:           assertEquals(9081, node0.getSourcePosition());
2118:           assertFalse(node0.isAssignAdd());
2119:           assertFalse(node0.hasOneChild());
2120:           assertFalse(node0.isOr());
2121:           assertFalse(node0.isEmpty());
2122:           assertFalse(node0.isNew());
2123:           assertFalse(node0.isDo());
2124:           assertFalse(node0.isSwitch());
2125:           assertFalse(node0.isDefaultCase());
2126:           assertFalse(node0.isVar());
2127:           assertEquals(0, node0.getChildCount());
2128:           assertFalse(node0.isLabel());
2129:           assertFalse(node0.isArrayLit());
2130:           assertEquals(2, node0.getLineno());
2131:           assertTrue(node1.isNumber());
2132:           assertTrue(node1.hasChildren());
2133:           assertEquals(1, node1.getChildCount());
2134:           assertFalse(node1.isNE());
2135:           assertEquals(9081, node1.getSourcePosition());
2136:           assertFalse(node1.isIf());
2137:           assertTrue(node1.hasOneChild());
2138:           assertFalse(node1.isFor());
2139:           assertFalse(node1.isDelProp());
2140:           assertFalse(node1.isTry());
2141:           assertFalse(node1.isHook());
2142:           assertFalse(node1.isArrayLit());
2143:           assertFalse(node1.isDebugger());
2144:           assertFalse(node1.isSwitch());
2145:           assertFalse(node1.isGetterDef());
2146:           assertFalse(node1.isCase());
2147:           assertFalse(node1.isString());
2148:           assertFalse(node1.isGetProp());
2149:           assertFalse(node1.isNull());
2150:           assertFalse(node1.isParamList());
2151:           assertFalse(node1.isName());
2152:           assertFalse(node1.isBreak());
2153:           assertFalse(node1.isComma());
2154:           assertFalse(node1.isExprResult());
2155:           assertFalse(node1.isCall());
2156:           assertEquals(2, node1.getLineno());
2157:           assertFalse(node1.isAdd());
2158:           assertFalse(node1.isNew());
2159:           assertFalse(node1.isVar());
2160:           assertFalse(node1.isTrue());
2161:           assertFalse(node1.isVoid());
2162:           assertFalse(node1.isDefaultCase());
2163:           assertFalse(node1.isDo());
2164:           assertFalse(node1.isEmpty());
2165:           assertFalse(node1.isReturn());
2166:           assertFalse(node1.isOr());
2167:           assertFalse(node1.isAssignAdd());
2168:           assertFalse(node1.isLabel());
2169:           assertFalse(node1.isLabelName());
2170:           assertEquals(39, node1.getType());
2171:           assertFalse(node1.isAssign());
2172:           assertFalse(node1.isGetElem());
2173:           assertFalse(node1.isDec());
2174:           assertFalse(node1.hasMoreThanOneChild());
2175:           assertFalse(node1.isCast());
2176:           assertFalse(node1.isTypeOf());
2177:           assertFalse(node1.isContinue());
2178:           assertFalse(node1.isBlock());
2179:           assertFalse(node1.isStringKey());
2180:           assertFalse(node1.isWhile());
2181:           assertFalse(node1.isNot());
2182:           assertFalse(node1.isScript());
2183:           assertEquals(889, node1.getCharno());
2184:           assertFalse(node1.isObjectLit());
2185:           assertFalse(node1.isThis());
2186:           assertFalse(node1.isAnd());
2187:           assertFalse(node1.isWith());
2188:           assertFalse(node1.isCatch());
2189:           assertFalse(node1.isRegExp());
2190:           assertFalse(node1.isFunction());
2191:           assertFalse(node1.isInstanceOf());
2192:           assertFalse(node1.isFalse());
2193:           assertFalse(node1.isThrow());
2194:           assertFalse(node1.isSetterDef());
2195:           assertFalse(node1.isInc());
2196:           assertFalse(node1.isIn());
2197:           assertFalse(node4.isAdd());
2198:           assertFalse(node4.isNew());
2199:           assertFalse(node4.isBlock());
2200:           assertEquals(889, node4.getCharno());
2201:           assertFalse(node4.isCall());
2202:           assertFalse(node4.isWhile());
2203:           assertFalse(node4.isDo());
2204:           assertEquals(39, node4.getType());
2205:           assertFalse(node4.isSetterDef());
2206:           assertFalse(node4.isVar());
2207:           assertFalse(node4.isReturn());
2208:           assertFalse(node4.isOr());
2209:           assertFalse(node4.isCatch());
2210:           assertFalse(node4.isTypeOf());
2211:           assertFalse(node4.hasMoreThanOneChild());
2212:           assertFalse(node4.isGetElem());
2213:           assertFalse(node4.isNull());
2214:           assertFalse(node4.isTrue());
2215:           assertFalse(node4.isVoid());
2216:           assertFalse(node4.isName());
2217:           assertFalse(node4.isExprResult());
2218:           assertFalse(node4.isFunction());
2219:           assertFalse(node4.isDebugger());
2220:           assertFalse(node4.isCast());
2221:           assertFalse(node4.isAssign());
2222:           assertFalse(node4.isDec());
2223:           assertFalse(node4.hasChildren());
2224:           assertTrue(node4.isNumber());
2225:           assertFalse(node4.isGetProp());
2226:           assertFalse(node4.isContinue());
2227:           assertFalse(node4.isObjectLit());
2228:           assertFalse(node4.isNot());
2229:           assertFalse(node4.isAnd());
2230:           assertFalse(node4.isHook());
2231:           assertFalse(node4.isInc());
2232:           assertFalse(node4.isFalse());
2233:           assertFalse(node4.isString());
2234:           assertFalse(node4.isCase());
2235:           assertFalse(node4.isThis());
2236:           assertFalse(node4.isThrow());
2237:           assertFalse(node4.isInstanceOf());
2238:           assertFalse(node4.isComma());
2239:           assertFalse(node4.isWith());
2240:           assertFalse(node4.isIn());
2241:           assertFalse(node4.isDelProp());
2242:           assertFalse(node4.isBreak());
2243:           assertFalse(node4.isNE());
2244:           assertFalse(node4.isIf());
2245:           assertFalse(node4.isTry());
2246:           assertFalse(node4.isArrayLit());
2247:           assertFalse(node4.hasOneChild());
2248:           assertFalse(node4.isRegExp());
2249:           assertFalse(node4.isEmpty());
2250:           assertFalse(node4.isFor());
2251:           assertFalse(node4.isScript());
2252:           assertEquals(9081, node4.getSourcePosition());
2253:           assertFalse(node4.isAssignAdd());
2254:           assertFalse(node4.isDefaultCase());
2255:           assertEquals(0, node4.getChildCount());
2256:           assertFalse(node4.isLabel());
2257:           assertEquals(2, node4.getLineno());
2258:           assertFalse(node4.isGetterDef());
2259:           assertFalse(node4.isLabelName());
2260:           assertFalse(node4.isParamList());
2261:           assertFalse(node4.isStringKey());
2262:           assertFalse(node4.isSwitch());
2263:           assertFalse(node0.equals((Object)node3));
2264:           assertFalse(node0.equals((Object)node2));
2265:           assertFalse(node0.equals((Object)node1));
2266:           assertFalse(node1.equals((Object)node2));
2267:           assertFalse(node1.equals((Object)node0));
2268:           assertFalse(node1.equals((Object)node4));
2269:           assertFalse(node4.equals((Object)node2));
2270:           assertFalse(node4.equals((Object)node1));
2271:           assertFalse(node4.equals((Object)node3));
2272:           assertSame(node0, node4);
2273:           assertNotSame(node0, node3);
2274:           assertNotSame(node0, node1);
2275:           assertNotSame(node1, node0);
2276:           assertNotSame(node1, node4);
2277:           assertSame(node1, node3);
2278:           assertNotSame(node4, node1);
2279:           assertSame(node4, node0);
2280:           assertNotSame(node4, node3);
2281:           
2282:           // Undeclared exception!
2283:           try { 
2284:             node0.getChildBefore(node1);
2285:             fail("Expecting exception: NullPointerException");
2286:           
2287:           } catch(NullPointerException e) {
2288:              //
2289:              // no message in exception (getMessage() returned null)
2290:              //
2291:              verifyException("com.google.javascript.rhino.Node", e);
2292:           }
2293:         } catch(Throwable t) {
2294:             // Need to catch declared exceptions
2295:         }
2296:       } 
2297:     });
2298:     future.get(4000, TimeUnit.MILLISECONDS);
2299:   }
2300: }
RegularFileObject[/tmp/EvoSuite_26_1605714078301/com/google/javascript/rhino/Node_26_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:20 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: import java.util.concurrent.ExecutorService;
17: import java.util.concurrent.Executors;
18: import java.util.concurrent.Future;
19: import java.util.concurrent.TimeUnit;
20: 
21: @EvoSuiteClassExclude
22: public class Node_26_tmp__ESTest_scaffolding {
23: 
24:   @org.junit.Rule 
25:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
26: 
27:   protected static ExecutorService executor; 
28: 
29:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
30: 
31:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
32: 
33: 
34:   @BeforeClass 
35:   public static void initEvoSuiteFramework() { 
36:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
37:     org.evosuite.runtime.GuiSupport.initialize(); 
38:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
39:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
40:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
41:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
42:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
43:     executor = Executors.newCachedThreadPool(); 
44:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
45:     setSystemProperties();
46:     initializeClasses();
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:   } 
49: 
50:   @AfterClass 
51:   public static void clearEvoSuiteFramework(){ 
52:     Sandbox.resetDefaultSecurityManager(); 
53:     executor.shutdownNow(); 
54:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
55:   } 
56: 
57:   @Before 
58:   public void initTestCase(){ 
59:     threadStopper.storeCurrentThreads();
60:     threadStopper.startRecordingTime();
61:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
62:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
63:     setSystemProperties(); 
64:     org.evosuite.runtime.GuiSupport.setHeadless(); 
65:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
66:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
67:   } 
68: 
69:   @After 
70:   public void doneWithTestCase(){ 
71:     threadStopper.killAndJoinClientThreads();
72:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
73:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
74:     resetClasses(); 
75:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
76:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
77:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
78:   } 
79: 
80:   public static void setSystemProperties() {
81:  
82:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
83:     java.lang.System.setProperty("user.dir", "/experiment"); 
84:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
85:   }
86: 
87:   private static void initializeClasses() {
88:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_26_tmp__ESTest_scaffolding.class.getClassLoader() ,
89:       "com.google.common.collect.ArrayListMultimap",
90:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
91:       "com.google.common.collect.ImmutableList$SubList",
92:       "com.google.javascript.rhino.jstype.NoType",
93:       "com.google.javascript.rhino.JSDocInfo$Visibility",
94:       "com.google.common.collect.ListMultimap",
95:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
96:       "com.google.javascript.rhino.jstype.ArrowType",
97:       "com.google.javascript.rhino.SimpleErrorReporter",
98:       "com.google.common.collect.Lists$RandomAccessPartition",
99:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
100:       "com.google.common.collect.Collections2",
101:       "com.google.javascript.rhino.jstype.NumberType",
102:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
103:       "com.google.common.collect.PeekingIterator",
104:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
105:       "com.google.common.collect.RegularImmutableList",
106:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
107:       "com.google.javascript.rhino.jstype.StaticScope",
108:       "com.google.javascript.rhino.jstype.InstanceObjectType",
109:       "com.google.common.collect.Lists$TransformingRandomAccessList",
110:       "com.google.javascript.rhino.Node$PropListItem",
111:       "com.google.javascript.rhino.Node$IntPropListItem",
112:       "com.google.common.collect.Sets$2",
113:       "com.google.common.collect.Maps$KeySet",
114:       "com.google.common.collect.Sets$3",
115:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
116:       "com.google.common.collect.LinkedHashMultimap",
117:       "com.google.javascript.rhino.Node",
118:       "com.google.javascript.rhino.jstype.ObjectType",
119:       "com.google.common.collect.Sets$1",
120:       "com.google.common.collect.ImmutableMapKeySet",
121:       "com.google.javascript.rhino.JSDocInfo$Marker",
122:       "com.google.common.collect.RegularImmutableMap",
123:       "com.google.common.collect.RegularImmutableBiMap",
124:       "com.google.javascript.rhino.Node$NodeMismatch",
125:       "com.google.javascript.rhino.jstype.RecordType",
126:       "com.google.common.collect.SortedMapDifference",
127:       "com.google.javascript.rhino.jstype.ModificationVisitor",
128:       "com.google.javascript.rhino.jstype.PropertyMap$1",
129:       "com.google.common.collect.AbstractMapEntry",
130:       "com.google.javascript.rhino.Node$AncestorIterable$1",
131:       "com.google.common.collect.Iterators$12",
132:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
133:       "com.google.common.collect.Iterators$11",
134:       "com.google.javascript.rhino.jstype.JSType$1",
135:       "com.google.common.collect.EmptyImmutableBiMap",
136:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
137:       "com.google.common.base.Predicate",
138:       "com.google.javascript.rhino.jstype.VoidType",
139:       "com.google.common.base.Joiner",
140:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
141:       "com.google.common.collect.AbstractListMultimap",
142:       "com.google.javascript.rhino.jstype.JSType",
143:       "com.google.common.collect.ImmutableAsList",
144:       "com.google.javascript.rhino.Node$StringNode",
145:       "com.google.javascript.rhino.jstype.ProxyObjectType",
146:       "com.google.common.collect.Sets$SetView",
147:       "com.google.common.collect.RegularImmutableAsList",
148:       "com.google.javascript.rhino.jstype.TemplateType",
149:       "com.google.javascript.rhino.jstype.NamedType",
150:       "com.google.common.collect.Iterators$13",
151:       "com.google.javascript.rhino.InputId",
152:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
153:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
154:       "com.google.common.collect.AbstractMapBasedMultimap",
155:       "com.google.common.collect.Lists$Partition",
156:       "com.google.common.collect.Lists",
157:       "com.google.javascript.rhino.Node$SideEffectFlags",
158:       "com.google.common.collect.UnmodifiableListIterator",
159:       "com.google.javascript.rhino.jstype.NullType",
160:       "com.google.common.collect.Lists$TransformingSequentialList",
161:       "com.google.javascript.rhino.ErrorReporter",
162:       "com.google.javascript.rhino.jstype.UnknownType",
163:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
164:       "com.google.javascript.rhino.jstype.ValueType",
165:       "com.google.javascript.rhino.jstype.PropertyMap",
166:       "com.google.javascript.rhino.Token",
167:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
168:       "com.google.common.collect.ObjectArrays",
169:       "com.google.javascript.rhino.jstype.StaticSourceFile",
170:       "com.google.javascript.rhino.jstype.BooleanType",
171:       "com.google.javascript.rhino.jstype.NoObjectType",
172:       "com.google.common.collect.AbstractIterator",
173:       "com.google.javascript.rhino.jstype.FunctionBuilder",
174:       "com.google.javascript.rhino.jstype.JSType$TypePair",
175:       "com.google.common.base.Joiner$MapJoiner",
176:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
177:       "com.google.common.collect.ImmutableList$1",
178:       "com.google.common.collect.MapDifference",
179:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
180:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
181:       "com.google.common.collect.Sets$ImprovedAbstractSet",
182:       "com.google.javascript.rhino.jstype.FunctionType",
183:       "com.google.common.base.Preconditions",
184:       "com.google.common.collect.UnmodifiableIterator",
185:       "com.google.javascript.rhino.JSDocInfo",
186:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
187:       "com.google.javascript.rhino.jstype.Property",
188:       "com.google.common.collect.ImmutableMapValues",
189:       "com.google.common.collect.ImmutableEntry",
190:       "com.google.common.base.Joiner$1",
191:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
192:       "com.google.common.base.Joiner$2",
193:       "com.google.common.collect.ImmutableCollection",
194:       "com.google.common.collect.ImmutableEnumMap",
195:       "com.google.javascript.rhino.jstype.TernaryValue",
196:       "com.google.javascript.rhino.Node$AncestorIterable",
197:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
198:       "com.google.common.collect.Lists$RandomAccessListWrapper",
199:       "com.google.common.collect.ImmutableEnumSet",
200:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
201:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
202:       "com.google.javascript.rhino.jstype.EnumElementType",
203:       "com.google.javascript.rhino.jstype.UnionType",
204:       "com.google.common.base.Objects",
205:       "com.google.javascript.rhino.Node$NumberNode",
206:       "com.google.common.collect.SingletonImmutableList",
207:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
208:       "com.google.common.collect.ImmutableCollection$Builder",
209:       "com.google.javascript.rhino.jstype.StaticSlot",
210:       "com.google.common.collect.Iterators$6",
211:       "com.google.common.collect.BiMap",
212:       "com.google.common.collect.Iterators$7",
213:       "com.google.common.collect.AbstractSetMultimap",
214:       "com.google.common.base.Function",
215:       "com.google.common.collect.ImmutableSet",
216:       "com.google.common.collect.Lists$AbstractListWrapper",
217:       "com.google.common.collect.ImmutableMap",
218:       "com.google.common.collect.AbstractIndexedListIterator",
219:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
220:       "com.google.common.collect.Maps$1",
221:       "com.google.javascript.rhino.jstype.EnumType",
222:       "com.google.common.collect.Iterators$1",
223:       "com.google.common.collect.Iterators$2",
224:       "com.google.javascript.rhino.jstype.NamespaceType",
225:       "com.google.common.collect.Iterators$3",
226:       "com.google.common.collect.Sets",
227:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
228:       "com.google.javascript.rhino.Node$ObjectPropListItem",
229:       "com.google.common.collect.Lists$StringAsImmutableList",
230:       "com.google.common.collect.Lists$2",
231:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
232:       "com.google.common.collect.ImmutableList$Builder",
233:       "com.google.common.collect.Lists$1",
234:       "com.google.javascript.rhino.jstype.StaticReference",
235:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
236:       "com.google.common.collect.Multiset",
237:       "com.google.common.collect.AbstractMultimap",
238:       "com.google.common.collect.Multimap",
239:       "com.google.common.collect.Iterators",
240:       "com.google.common.collect.Maps$ImprovedAbstractMap",
241:       "com.google.common.collect.ImmutableBiMap",
242:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
243:       "com.google.common.collect.ImmutableList",
244:       "com.google.common.collect.SingletonImmutableBiMap",
245:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
246:       "com.google.javascript.rhino.jstype.StringType",
247:       "com.google.javascript.rhino.Node$AbstractPropListItem",
248:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
249:       "com.google.javascript.rhino.jstype.TemplatizedType",
250:       "com.google.javascript.rhino.jstype.Visitor",
251:       "com.google.javascript.rhino.jstype.NoResolvedType",
252:       "com.google.javascript.rhino.jstype.JSTypeNative",
253:       "com.google.javascript.rhino.jstype.AllType",
254:       "com.google.common.collect.Maps",
255:       "com.google.common.collect.SetMultimap",
256:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
257:       "com.google.common.collect.Maps$EntryTransformer",
258:       "com.google.javascript.rhino.JSTypeExpression",
259:       "com.google.common.collect.Iterators$MergingIterator"
260:     );
261:   } 
262: 
263:   private static void resetClasses() {
264:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_26_tmp__ESTest_scaffolding.class.getClassLoader()); 
265: 
266:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
267:       "com.google.javascript.rhino.Node",
268:       "com.google.javascript.rhino.Node$NumberNode",
269:       "com.google.javascript.rhino.Node$StringNode",
270:       "com.google.javascript.rhino.Node$AbstractPropListItem",
271:       "com.google.javascript.rhino.Node$ObjectPropListItem",
272:       "com.google.javascript.rhino.Node$IntPropListItem",
273:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
274:       "com.google.javascript.rhino.Node$AncestorIterable",
275:       "com.google.javascript.rhino.Node$NodeMismatch",
276:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
277:       "com.google.javascript.rhino.Node$SideEffectFlags",
278:       "com.google.javascript.rhino.Token",
279:       "com.google.common.base.Preconditions",
280:       "com.google.javascript.rhino.InputId",
281:       "com.google.javascript.rhino.SimpleErrorReporter",
282:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
283:       "com.google.common.base.Joiner",
284:       "com.google.common.base.Joiner$1",
285:       "com.google.common.collect.Collections2",
286:       "com.google.common.base.Joiner$MapJoiner",
287:       "com.google.common.collect.Maps",
288:       "com.google.common.collect.AbstractMultimap",
289:       "com.google.common.collect.AbstractMapBasedMultimap",
290:       "com.google.common.collect.AbstractSetMultimap",
291:       "com.google.common.collect.LinkedHashMultimap",
292:       "com.google.common.collect.AbstractMapEntry",
293:       "com.google.common.collect.ImmutableEntry",
294:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
295:       "com.google.common.collect.AbstractListMultimap",
296:       "com.google.common.collect.ArrayListMultimap",
297:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
298:       "com.google.common.collect.ImmutableCollection",
299:       "com.google.common.collect.RegularImmutableList",
300:       "com.google.common.collect.ObjectArrays",
301:       "com.google.common.collect.ImmutableList",
302:       "com.google.javascript.rhino.jstype.ModificationVisitor",
303:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
304:       "com.google.common.collect.ImmutableCollection$Builder",
305:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
306:       "com.google.common.collect.ImmutableList$Builder",
307:       "com.google.common.collect.UnmodifiableIterator",
308:       "com.google.common.collect.UnmodifiableListIterator",
309:       "com.google.common.collect.Iterators$1",
310:       "com.google.common.collect.Iterators$2",
311:       "com.google.common.collect.Iterators",
312:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
313:       "com.google.javascript.rhino.jstype.JSType$1",
314:       "com.google.javascript.rhino.jstype.JSType",
315:       "com.google.javascript.rhino.jstype.ObjectType",
316:       "com.google.javascript.rhino.jstype.ProxyObjectType",
317:       "com.google.javascript.rhino.jstype.TemplateType",
318:       "com.google.javascript.rhino.jstype.ValueType",
319:       "com.google.javascript.rhino.jstype.BooleanType",
320:       "com.google.javascript.rhino.jstype.NullType",
321:       "com.google.javascript.rhino.jstype.NumberType",
322:       "com.google.javascript.rhino.jstype.StringType",
323:       "com.google.javascript.rhino.jstype.UnknownType",
324:       "com.google.javascript.rhino.jstype.VoidType",
325:       "com.google.javascript.rhino.jstype.AllType",
326:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
327:       "com.google.common.collect.ImmutableMap",
328:       "com.google.common.collect.ImmutableBiMap",
329:       "com.google.common.collect.EmptyImmutableBiMap",
330:       "com.google.javascript.rhino.jstype.PropertyMap$1",
331:       "com.google.javascript.rhino.jstype.PropertyMap",
332:       "com.google.javascript.rhino.jstype.FunctionType",
333:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
334:       "com.google.javascript.rhino.jstype.ArrowType",
335:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
336:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
337:       "com.google.javascript.rhino.jstype.InstanceObjectType",
338:       "com.google.javascript.rhino.jstype.Property",
339:       "com.google.common.collect.Lists",
340:       "com.google.javascript.rhino.jstype.NoObjectType",
341:       "com.google.javascript.rhino.jstype.NoType",
342:       "com.google.javascript.rhino.jstype.NoResolvedType",
343:       "com.google.common.collect.SingletonImmutableList",
344:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
345:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
346:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
347:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
348:       "com.google.javascript.rhino.jstype.UnionType",
349:       "com.google.javascript.rhino.jstype.FunctionBuilder",
350:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
351:       "com.google.javascript.rhino.jstype.EnumType",
352:       "com.google.javascript.rhino.jstype.EnumElementType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
356:       "com.google.javascript.rhino.JSDocInfo",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
358:       "com.google.common.collect.Sets",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.javascript.rhino.Node$AncestorIterable$1",
361:       "com.google.common.base.Objects",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
364:     );
365:   }
366: }

[MASTER] 15:41:22.193 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertNotNull(node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());

double double0 = node0.getDouble();
assertEquals(1.0, double0, 0.01);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(iterable0.contains(node0));

Node node1 = Node.newNumber((double) 31, 2, 889);
assertNotNull(node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

Node node2 = new Node(36, node1, node1, node1);
assertNotNull(node2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertEquals((-1), node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertEquals(36, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isThrow());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node2.isOnlyModifiesArgumentsCall();
assertFalse(boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertEquals((-1), node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertEquals(36, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isThrow());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node1, node0);

Node node3 = node1.clonePropsFrom(node0);
assertNotNull(node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertTrue(node3.isNumber());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWith());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertEquals(9081, node3.getSourcePosition());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isIf());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isNE());
assertFalse(node3.isAnd());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThrow());
assertFalse(node3.isVar());
assertEquals(889, node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isParamList());
assertFalse(node3.isReturn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isRegExp());
assertEquals(39, node3.getType());
assertFalse(node3.isAssign());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isWhile());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isLabelName());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertEquals(2, node3.getLineno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node3, node1);
assertNotSame(node3, node0);

node1.addChildrenToFront(node2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(node1.isNumber());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertEquals((-1), node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertEquals(36, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isThrow());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node0);
assertSame(node1, node3);

Node node4 = node0.copyInformationFrom(node1);
assertNotNull(node4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(889, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertEquals(9081, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(2, node0.getLineno());
assertTrue(node1.isNumber());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isBlock());
assertEquals(889, node4.getCharno());
assertFalse(node4.isCall());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertEquals(39, node4.getType());
assertFalse(node4.isSetterDef());
assertFalse(node4.isVar());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isCatch());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isExprResult());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertTrue(node4.isNumber());
assertFalse(node4.isGetProp());
assertFalse(node4.isContinue());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isComma());
assertFalse(node4.isWith());
assertFalse(node4.isIn());
assertFalse(node4.isDelProp());
assertFalse(node4.isBreak());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isEmpty());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertEquals(9081, node4.getSourcePosition());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertEquals(2, node4.getLineno());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isSwitch());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertSame(node0, node4);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertSame(node1, node3);
assertNotSame(node4, node1);
assertSame(node4, node0);
assertNotSame(node4, node3);

boolean boolean2 = node1.isNoSideEffectsCall();
assertFalse(boolean2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertTrue(node1.isNumber());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertSame(node1, node3);

Node.AncestorIterable node_AncestorIterable0 = node4.getAncestors();
assertNotNull(node_AncestorIterable0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(889, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isNE());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertEquals(9081, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(2, node0.getLineno());
assertTrue(node1.isNumber());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertEquals(9081, node1.getSourcePosition());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(2, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertEquals(889, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isBlock());
assertEquals(889, node4.getCharno());
assertFalse(node4.isCall());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertEquals(39, node4.getType());
assertFalse(node4.isSetterDef());
assertFalse(node4.isVar());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isCatch());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isExprResult());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertTrue(node4.isNumber());
assertFalse(node4.isGetProp());
assertFalse(node4.isContinue());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isComma());
assertFalse(node4.isWith());
assertFalse(node4.isIn());
assertFalse(node4.isDelProp());
assertFalse(node4.isBreak());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isEmpty());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertEquals(9081, node4.getSourcePosition());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertEquals(2, node4.getLineno());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isSwitch());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertSame(node0, node4);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertSame(node1, node3);
assertNotSame(node4, node1);
assertSame(node4, node0);
assertNotSame(node4, node3);

node0.getChildBefore(node1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0/tests/27
