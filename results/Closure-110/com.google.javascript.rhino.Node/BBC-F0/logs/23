* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 2049
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1988358288
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 15:32:45.551 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 15:33:22.531 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setQuotedString()V
* Search finished after 319s and 15 generations, 8407 statements, best individual has fitness: 4846.0
[MASTER] 15:38:18.119 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 34 seconds more than allowed.
* Minimizing test suite
[MASTER] 15:39:28.280 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 853
* Number of covered goals: 638
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 714
* Number of covered goals: 392
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 60%
* Total number of goals: 530
* Number of covered goals: 319
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 22%
* Total number of goals: 4536
* Number of covered goals: 1016
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 79%
* Total number of goals: 233
* Number of covered goals: 183
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 73%
* Total number of goals: 233
* Number of covered goals: 171
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 714
* Number of covered goals: 336
* Generated 186 tests with total length 2858
* Resulting test suite's coverage: 56% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:40:45.566 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6746833333333333% of time used, but only 8/186 tests minimized), falling back to using all assertions
[MASTER] 15:41:05.129 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 3%
* Compiling and checking tests
[MASTER] 15:41:19.688 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 15:41:45.514 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_16_1605714103804/com/google/javascript/rhino/Node_16_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_16_1605714103804/com/google/javascript/rhino/Node_16_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:45.535 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:45.535 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:45.548 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 165
[MASTER] 15:41:45.590 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_16_1605714103804/com/google/javascript/rhino/Node_16_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:43 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_16_tmp__ESTest extends Node_16_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       String string0 = "";
23:       Node node0 = Node.newString(431, "");
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(8, Node.FLAG_NO_THROWS);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(36, Node.QUOTED_PROP);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(32, Node.INCRDECR_PROP);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(51, Node.STATIC_SOURCE_FILE);
47:       assertEquals(12, Node.COLUMN_BITS);
48:       assertEquals(46, Node.IS_NAMESPACE);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(1, Node.DECR_FLAG);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(29, Node.JSDOC_INFO_PROP);
54:       assertEquals(53, Node.INPUT_ID);
55:       assertEquals(57, Node.LAST_PROP);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(30, Node.VAR_ARGS_NAME);
59:       assertEquals(40, Node.ORIGINALNAME_PROP);
60:       assertNotNull(node0);
61:       assertFalse(node0.isExprResult());
62:       assertFalse(node0.hasOneChild());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isScript());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isGetProp());
69:       assertFalse(node0.isDec());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isOr());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.hasMoreThanOneChild());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isWith());
77:       assertEquals((-1), node0.getLineno());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isString());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isSetterDef());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isThrow());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isContinue());
90:       assertFalse(node0.isFalse());
91:       assertFalse(node0.isCast());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isFunction());
94:       assertFalse(node0.isDebugger());
95:       assertFalse(node0.isTry());
96:       assertFalse(node0.isRegExp());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isDefaultCase());
99:       assertFalse(node0.isEmpty());
100:       assertFalse(node0.isDelProp());
101:       assertFalse(node0.isIf());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isFor());
104:       assertFalse(node0.isNE());
105:       assertFalse(node0.isCall());
106:       assertFalse(node0.isCatch());
107:       assertFalse(node0.isName());
108:       assertEquals((-1), node0.getCharno());
109:       assertFalse(node0.isSwitch());
110:       assertFalse(node0.isNew());
111:       assertFalse(node0.isBlock());
112:       assertFalse(node0.isHook());
113:       assertFalse(node0.isVar());
114:       assertFalse(node0.isCase());
115:       assertFalse(node0.isDo());
116:       assertEquals(431, node0.getType());
117:       assertFalse(node0.isAdd());
118:       assertFalse(node0.isParamList());
119:       assertFalse(node0.isNumber());
120:       assertFalse(node0.isGetterDef());
121:       assertFalse(node0.isAssignAdd());
122:       assertFalse(node0.isLabel());
123:       assertFalse(node0.isStringKey());
124:       assertFalse(node0.isArrayLit());
125:       assertFalse(node0.isLabelName());
126:       assertEquals(0, node0.getChildCount());
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertEquals(48, Node.DIRECTIVES);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(55, Node.INFERRED_FUNCTION);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(57, Node.REFLECTED_OBJECT);
141:       assertEquals(36, Node.QUOTED_PROP);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(32, Node.INCRDECR_PROP);
149:       assertEquals(56, Node.CHANGE_TIME);
150:       assertEquals(47, Node.IS_DISPATCHER);
151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(46, Node.IS_NAMESPACE);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(1, Node.DECR_FLAG);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(29, Node.JSDOC_INFO_PROP);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(30, Node.VAR_ARGS_NAME);
164:       assertEquals(40, Node.ORIGINALNAME_PROP);
165:       assertFalse(iterable0.contains(node0));
166:       assertNotNull(iterable0);
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.hasOneChild());
169:       assertFalse(node0.isObjectLit());
170:       assertFalse(node0.isNot());
171:       assertFalse(node0.isScript());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isGetProp());
175:       assertFalse(node0.isDec());
176:       assertFalse(node0.isTypeOf());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.hasMoreThanOneChild());
181:       assertFalse(node0.isAssign());
182:       assertFalse(node0.isWith());
183:       assertEquals((-1), node0.getLineno());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isString());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isSetterDef());
192:       assertEquals((-1), node0.getSourcePosition());
193:       assertFalse(node0.isThrow());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isContinue());
196:       assertFalse(node0.isFalse());
197:       assertFalse(node0.isCast());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isFunction());
200:       assertFalse(node0.isDebugger());
201:       assertFalse(node0.isTry());
202:       assertFalse(node0.isRegExp());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isDefaultCase());
205:       assertFalse(node0.isEmpty());
206:       assertFalse(node0.isDelProp());
207:       assertFalse(node0.isIf());
208:       assertFalse(node0.isNull());
209:       assertFalse(node0.isFor());
210:       assertFalse(node0.isNE());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.isCatch());
213:       assertFalse(node0.isName());
214:       assertEquals((-1), node0.getCharno());
215:       assertFalse(node0.isSwitch());
216:       assertFalse(node0.isNew());
217:       assertFalse(node0.isBlock());
218:       assertFalse(node0.isHook());
219:       assertFalse(node0.isVar());
220:       assertFalse(node0.isCase());
221:       assertFalse(node0.isDo());
222:       assertEquals(431, node0.getType());
223:       assertFalse(node0.isAdd());
224:       assertFalse(node0.isParamList());
225:       assertFalse(node0.isNumber());
226:       assertFalse(node0.isGetterDef());
227:       assertFalse(node0.isAssignAdd());
228:       assertFalse(node0.isLabel());
229:       assertFalse(node0.isStringKey());
230:       assertFalse(node0.isArrayLit());
231:       assertFalse(node0.isLabelName());
232:       assertEquals(0, node0.getChildCount());
233:       
234:       boolean boolean0 = node0.isVoid();
235:       assertEquals(48, Node.DIRECTIVES);
236:       assertEquals(8, Node.FLAG_NO_THROWS);
237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(55, Node.INFERRED_FUNCTION);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(57, Node.REFLECTED_OBJECT);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       assertEquals(47, Node.IS_DISPATCHER);
257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
258:       assertEquals(12, Node.COLUMN_BITS);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(57, Node.LAST_PROP);
267:       assertEquals(43, Node.IS_CONSTANT_NAME);
268:       assertEquals(54, Node.SLASH_V);
269:       assertEquals(30, Node.VAR_ARGS_NAME);
270:       assertEquals(40, Node.ORIGINALNAME_PROP);
271:       assertFalse(boolean0);
272:       assertFalse(node0.isExprResult());
273:       assertFalse(node0.hasOneChild());
274:       assertFalse(node0.isObjectLit());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isScript());
277:       assertFalse(node0.isComma());
278:       assertFalse(node0.isThis());
279:       assertFalse(node0.isGetProp());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isOr());
283:       assertFalse(node0.isReturn());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.hasMoreThanOneChild());
286:       assertFalse(node0.isAssign());
287:       assertFalse(node0.isWith());
288:       assertEquals((-1), node0.getLineno());
289:       assertFalse(node0.isBreak());
290:       assertFalse(node0.isInstanceOf());
291:       assertFalse(node0.isGetElem());
292:       assertFalse(node0.isInc());
293:       assertFalse(node0.isWhile());
294:       assertFalse(node0.isString());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isSetterDef());
297:       assertEquals((-1), node0.getSourcePosition());
298:       assertFalse(node0.isThrow());
299:       assertFalse(node0.isAnd());
300:       assertFalse(node0.isContinue());
301:       assertFalse(node0.isFalse());
302:       assertFalse(node0.isCast());
303:       assertFalse(node0.isTrue());
304:       assertFalse(node0.isFunction());
305:       assertFalse(node0.isDebugger());
306:       assertFalse(node0.isTry());
307:       assertFalse(node0.isRegExp());
308:       assertFalse(node0.isVoid());
309:       assertFalse(node0.isDefaultCase());
310:       assertFalse(node0.isEmpty());
311:       assertFalse(node0.isDelProp());
312:       assertFalse(node0.isIf());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isFor());
315:       assertFalse(node0.isNE());
316:       assertFalse(node0.isCall());
317:       assertFalse(node0.isCatch());
318:       assertFalse(node0.isName());
319:       assertEquals((-1), node0.getCharno());
320:       assertFalse(node0.isSwitch());
321:       assertFalse(node0.isNew());
322:       assertFalse(node0.isBlock());
323:       assertFalse(node0.isHook());
324:       assertFalse(node0.isVar());
325:       assertFalse(node0.isCase());
326:       assertFalse(node0.isDo());
327:       assertEquals(431, node0.getType());
328:       assertFalse(node0.isAdd());
329:       assertFalse(node0.isParamList());
330:       assertFalse(node0.isNumber());
331:       assertFalse(node0.isGetterDef());
332:       assertFalse(node0.isAssignAdd());
333:       assertFalse(node0.isLabel());
334:       assertFalse(node0.isStringKey());
335:       assertFalse(node0.isArrayLit());
336:       assertFalse(node0.isLabelName());
337:       assertEquals(0, node0.getChildCount());
338:       
339:       boolean boolean1 = node0.isAssign();
340:       assertEquals(48, Node.DIRECTIVES);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
344:       assertEquals(50, Node.FREE_CALL);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(39, Node.EMPTY_BLOCK);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
349:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(57, Node.REFLECTED_OBJECT);
352:       assertEquals(36, Node.QUOTED_PROP);
353:       assertEquals(49, Node.DIRECT_EVAL);
354:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
355:       assertEquals(4095, Node.COLUMN_MASK);
356:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
357:       assertEquals(37, Node.OPT_ARG_NAME);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(32, Node.INCRDECR_PROP);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(47, Node.IS_DISPATCHER);
362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
363:       assertEquals(12, Node.COLUMN_BITS);
364:       assertEquals(46, Node.IS_NAMESPACE);
365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(29, Node.JSDOC_INFO_PROP);
370:       assertEquals(53, Node.INPUT_ID);
371:       assertEquals(57, Node.LAST_PROP);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(54, Node.SLASH_V);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertFalse(boolean1);
377:       assertTrue(boolean1 == boolean0);
378:       assertFalse(node0.isExprResult());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isObjectLit());
381:       assertFalse(node0.isNot());
382:       assertFalse(node0.isScript());
383:       assertFalse(node0.isComma());
384:       assertFalse(node0.isThis());
385:       assertFalse(node0.isGetProp());
386:       assertFalse(node0.isDec());
387:       assertFalse(node0.isTypeOf());
388:       assertFalse(node0.isOr());
389:       assertFalse(node0.isReturn());
390:       assertFalse(node0.hasChildren());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isAssign());
393:       assertFalse(node0.isWith());
394:       assertEquals((-1), node0.getLineno());
395:       assertFalse(node0.isBreak());
396:       assertFalse(node0.isInstanceOf());
397:       assertFalse(node0.isGetElem());
398:       assertFalse(node0.isInc());
399:       assertFalse(node0.isWhile());
400:       assertFalse(node0.isString());
401:       assertFalse(node0.isIn());
402:       assertFalse(node0.isSetterDef());
403:       assertEquals((-1), node0.getSourcePosition());
404:       assertFalse(node0.isThrow());
405:       assertFalse(node0.isAnd());
406:       assertFalse(node0.isContinue());
407:       assertFalse(node0.isFalse());
408:       assertFalse(node0.isCast());
409:       assertFalse(node0.isTrue());
410:       assertFalse(node0.isFunction());
411:       assertFalse(node0.isDebugger());
412:       assertFalse(node0.isTry());
413:       assertFalse(node0.isRegExp());
414:       assertFalse(node0.isVoid());
415:       assertFalse(node0.isDefaultCase());
416:       assertFalse(node0.isEmpty());
417:       assertFalse(node0.isDelProp());
418:       assertFalse(node0.isIf());
419:       assertFalse(node0.isNull());
420:       assertFalse(node0.isFor());
421:       assertFalse(node0.isNE());
422:       assertFalse(node0.isCall());
423:       assertFalse(node0.isCatch());
424:       assertFalse(node0.isName());
425:       assertEquals((-1), node0.getCharno());
426:       assertFalse(node0.isSwitch());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isBlock());
429:       assertFalse(node0.isHook());
430:       assertFalse(node0.isVar());
431:       assertFalse(node0.isCase());
432:       assertFalse(node0.isDo());
433:       assertEquals(431, node0.getType());
434:       assertFalse(node0.isAdd());
435:       assertFalse(node0.isParamList());
436:       assertFalse(node0.isNumber());
437:       assertFalse(node0.isGetterDef());
438:       assertFalse(node0.isAssignAdd());
439:       assertFalse(node0.isLabel());
440:       assertFalse(node0.isStringKey());
441:       assertFalse(node0.isArrayLit());
442:       assertFalse(node0.isLabelName());
443:       assertEquals(0, node0.getChildCount());
444:       
445:       boolean boolean2 = node0.isParamList();
446:       assertEquals(48, Node.DIRECTIVES);
447:       assertEquals(8, Node.FLAG_NO_THROWS);
448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
450:       assertEquals(50, Node.FREE_CALL);
451:       assertEquals(55, Node.INFERRED_FUNCTION);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
456:       assertEquals(52, Node.LENGTH);
457:       assertEquals(57, Node.REFLECTED_OBJECT);
458:       assertEquals(36, Node.QUOTED_PROP);
459:       assertEquals(49, Node.DIRECT_EVAL);
460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
461:       assertEquals(4095, Node.COLUMN_MASK);
462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
463:       assertEquals(37, Node.OPT_ARG_NAME);
464:       assertEquals(2, Node.POST_FLAG);
465:       assertEquals(32, Node.INCRDECR_PROP);
466:       assertEquals(56, Node.CHANGE_TIME);
467:       assertEquals(47, Node.IS_DISPATCHER);
468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
469:       assertEquals(12, Node.COLUMN_BITS);
470:       assertEquals(46, Node.IS_NAMESPACE);
471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
472:       assertEquals(1, Node.DECR_FLAG);
473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(29, Node.JSDOC_INFO_PROP);
476:       assertEquals(53, Node.INPUT_ID);
477:       assertEquals(57, Node.LAST_PROP);
478:       assertEquals(43, Node.IS_CONSTANT_NAME);
479:       assertEquals(54, Node.SLASH_V);
480:       assertEquals(30, Node.VAR_ARGS_NAME);
481:       assertEquals(40, Node.ORIGINALNAME_PROP);
482:       assertFalse(boolean2);
483:       assertTrue(boolean2 == boolean1);
484:       assertTrue(boolean2 == boolean0);
485:       assertFalse(node0.isExprResult());
486:       assertFalse(node0.hasOneChild());
487:       assertFalse(node0.isObjectLit());
488:       assertFalse(node0.isNot());
489:       assertFalse(node0.isScript());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isThis());
492:       assertFalse(node0.isGetProp());
493:       assertFalse(node0.isDec());
494:       assertFalse(node0.isTypeOf());
495:       assertFalse(node0.isOr());
496:       assertFalse(node0.isReturn());
497:       assertFalse(node0.hasChildren());
498:       assertFalse(node0.hasMoreThanOneChild());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isWith());
501:       assertEquals((-1), node0.getLineno());
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isInstanceOf());
504:       assertFalse(node0.isGetElem());
505:       assertFalse(node0.isInc());
506:       assertFalse(node0.isWhile());
507:       assertFalse(node0.isString());
508:       assertFalse(node0.isIn());
509:       assertFalse(node0.isSetterDef());
510:       assertEquals((-1), node0.getSourcePosition());
511:       assertFalse(node0.isThrow());
512:       assertFalse(node0.isAnd());
513:       assertFalse(node0.isContinue());
514:       assertFalse(node0.isFalse());
515:       assertFalse(node0.isCast());
516:       assertFalse(node0.isTrue());
517:       assertFalse(node0.isFunction());
518:       assertFalse(node0.isDebugger());
519:       assertFalse(node0.isTry());
520:       assertFalse(node0.isRegExp());
521:       assertFalse(node0.isVoid());
522:       assertFalse(node0.isDefaultCase());
523:       assertFalse(node0.isEmpty());
524:       assertFalse(node0.isDelProp());
525:       assertFalse(node0.isIf());
526:       assertFalse(node0.isNull());
527:       assertFalse(node0.isFor());
528:       assertFalse(node0.isNE());
529:       assertFalse(node0.isCall());
530:       assertFalse(node0.isCatch());
531:       assertFalse(node0.isName());
532:       assertEquals((-1), node0.getCharno());
533:       assertFalse(node0.isSwitch());
534:       assertFalse(node0.isNew());
535:       assertFalse(node0.isBlock());
536:       assertFalse(node0.isHook());
537:       assertFalse(node0.isVar());
538:       assertFalse(node0.isCase());
539:       assertFalse(node0.isDo());
540:       assertEquals(431, node0.getType());
541:       assertFalse(node0.isAdd());
542:       assertFalse(node0.isParamList());
543:       assertFalse(node0.isNumber());
544:       assertFalse(node0.isGetterDef());
545:       assertFalse(node0.isAssignAdd());
546:       assertFalse(node0.isLabel());
547:       assertFalse(node0.isStringKey());
548:       assertFalse(node0.isArrayLit());
549:       assertFalse(node0.isLabelName());
550:       assertEquals(0, node0.getChildCount());
551:       
552:       node0.detachChildren();
553:       assertEquals(48, Node.DIRECTIVES);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
556:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
557:       assertEquals(50, Node.FREE_CALL);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
562:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
563:       assertEquals(52, Node.LENGTH);
564:       assertEquals(57, Node.REFLECTED_OBJECT);
565:       assertEquals(36, Node.QUOTED_PROP);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
568:       assertEquals(4095, Node.COLUMN_MASK);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(37, Node.OPT_ARG_NAME);
571:       assertEquals(2, Node.POST_FLAG);
572:       assertEquals(32, Node.INCRDECR_PROP);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(1, Node.DECR_FLAG);
580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
582:       assertEquals(29, Node.JSDOC_INFO_PROP);
583:       assertEquals(53, Node.INPUT_ID);
584:       assertEquals(57, Node.LAST_PROP);
585:       assertEquals(43, Node.IS_CONSTANT_NAME);
586:       assertEquals(54, Node.SLASH_V);
587:       assertEquals(30, Node.VAR_ARGS_NAME);
588:       assertEquals(40, Node.ORIGINALNAME_PROP);
589:       assertFalse(node0.isExprResult());
590:       assertFalse(node0.hasOneChild());
591:       assertFalse(node0.isObjectLit());
592:       assertFalse(node0.isNot());
593:       assertFalse(node0.isScript());
594:       assertFalse(node0.isComma());
595:       assertFalse(node0.isThis());
596:       assertFalse(node0.isGetProp());
597:       assertFalse(node0.isDec());
598:       assertFalse(node0.isTypeOf());
599:       assertFalse(node0.isOr());
600:       assertFalse(node0.isReturn());
601:       assertFalse(node0.hasChildren());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isAssign());
604:       assertFalse(node0.isWith());
605:       assertEquals((-1), node0.getLineno());
606:       assertFalse(node0.isBreak());
607:       assertFalse(node0.isInstanceOf());
608:       assertFalse(node0.isGetElem());
609:       assertFalse(node0.isInc());
610:       assertFalse(node0.isWhile());
611:       assertFalse(node0.isString());
612:       assertFalse(node0.isIn());
613:       assertFalse(node0.isSetterDef());
614:       assertEquals((-1), node0.getSourcePosition());
615:       assertFalse(node0.isThrow());
616:       assertFalse(node0.isAnd());
617:       assertFalse(node0.isContinue());
618:       assertFalse(node0.isFalse());
619:       assertFalse(node0.isCast());
620:       assertFalse(node0.isTrue());
621:       assertFalse(node0.isFunction());
622:       assertFalse(node0.isDebugger());
623:       assertFalse(node0.isTry());
624:       assertFalse(node0.isRegExp());
625:       assertFalse(node0.isVoid());
626:       assertFalse(node0.isDefaultCase());
627:       assertFalse(node0.isEmpty());
628:       assertFalse(node0.isDelProp());
629:       assertFalse(node0.isIf());
630:       assertFalse(node0.isNull());
631:       assertFalse(node0.isFor());
632:       assertFalse(node0.isNE());
633:       assertFalse(node0.isCall());
634:       assertFalse(node0.isCatch());
635:       assertFalse(node0.isName());
636:       assertEquals((-1), node0.getCharno());
637:       assertFalse(node0.isSwitch());
638:       assertFalse(node0.isNew());
639:       assertFalse(node0.isBlock());
640:       assertFalse(node0.isHook());
641:       assertFalse(node0.isVar());
642:       assertFalse(node0.isCase());
643:       assertFalse(node0.isDo());
644:       assertEquals(431, node0.getType());
645:       assertFalse(node0.isAdd());
646:       assertFalse(node0.isParamList());
647:       assertFalse(node0.isNumber());
648:       assertFalse(node0.isGetterDef());
649:       assertFalse(node0.isAssignAdd());
650:       assertFalse(node0.isLabel());
651:       assertFalse(node0.isStringKey());
652:       assertFalse(node0.isArrayLit());
653:       assertFalse(node0.isLabelName());
654:       assertEquals(0, node0.getChildCount());
655:       
656:       boolean boolean3 = node0.isNE();
657:       assertEquals(48, Node.DIRECTIVES);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
660:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
661:       assertEquals(50, Node.FREE_CALL);
662:       assertEquals(55, Node.INFERRED_FUNCTION);
663:       assertEquals(39, Node.EMPTY_BLOCK);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
666:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
667:       assertEquals(52, Node.LENGTH);
668:       assertEquals(57, Node.REFLECTED_OBJECT);
669:       assertEquals(36, Node.QUOTED_PROP);
670:       assertEquals(49, Node.DIRECT_EVAL);
671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
672:       assertEquals(4095, Node.COLUMN_MASK);
673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
674:       assertEquals(37, Node.OPT_ARG_NAME);
675:       assertEquals(2, Node.POST_FLAG);
676:       assertEquals(32, Node.INCRDECR_PROP);
677:       assertEquals(56, Node.CHANGE_TIME);
678:       assertEquals(47, Node.IS_DISPATCHER);
679:       assertEquals(51, Node.STATIC_SOURCE_FILE);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(46, Node.IS_NAMESPACE);
682:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
683:       assertEquals(1, Node.DECR_FLAG);
684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
686:       assertEquals(29, Node.JSDOC_INFO_PROP);
687:       assertEquals(53, Node.INPUT_ID);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(43, Node.IS_CONSTANT_NAME);
690:       assertEquals(54, Node.SLASH_V);
691:       assertEquals(30, Node.VAR_ARGS_NAME);
692:       assertEquals(40, Node.ORIGINALNAME_PROP);
693:       assertFalse(boolean3);
694:       assertTrue(boolean3 == boolean1);
695:       assertTrue(boolean3 == boolean0);
696:       assertTrue(boolean3 == boolean2);
697:       assertFalse(node0.isExprResult());
698:       assertFalse(node0.hasOneChild());
699:       assertFalse(node0.isObjectLit());
700:       assertFalse(node0.isNot());
701:       assertFalse(node0.isScript());
702:       assertFalse(node0.isComma());
703:       assertFalse(node0.isThis());
704:       assertFalse(node0.isGetProp());
705:       assertFalse(node0.isDec());
706:       assertFalse(node0.isTypeOf());
707:       assertFalse(node0.isOr());
708:       assertFalse(node0.isReturn());
709:       assertFalse(node0.hasChildren());
710:       assertFalse(node0.hasMoreThanOneChild());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isWith());
713:       assertEquals((-1), node0.getLineno());
714:       assertFalse(node0.isBreak());
715:       assertFalse(node0.isInstanceOf());
716:       assertFalse(node0.isGetElem());
717:       assertFalse(node0.isInc());
718:       assertFalse(node0.isWhile());
719:       assertFalse(node0.isString());
720:       assertFalse(node0.isIn());
721:       assertFalse(node0.isSetterDef());
722:       assertEquals((-1), node0.getSourcePosition());
723:       assertFalse(node0.isThrow());
724:       assertFalse(node0.isAnd());
725:       assertFalse(node0.isContinue());
726:       assertFalse(node0.isFalse());
727:       assertFalse(node0.isCast());
728:       assertFalse(node0.isTrue());
729:       assertFalse(node0.isFunction());
730:       assertFalse(node0.isDebugger());
731:       assertFalse(node0.isTry());
732:       assertFalse(node0.isRegExp());
733:       assertFalse(node0.isVoid());
734:       assertFalse(node0.isDefaultCase());
735:       assertFalse(node0.isEmpty());
736:       assertFalse(node0.isDelProp());
737:       assertFalse(node0.isIf());
738:       assertFalse(node0.isNull());
739:       assertFalse(node0.isFor());
740:       assertFalse(node0.isNE());
741:       assertFalse(node0.isCall());
742:       assertFalse(node0.isCatch());
743:       assertFalse(node0.isName());
744:       assertEquals((-1), node0.getCharno());
745:       assertFalse(node0.isSwitch());
746:       assertFalse(node0.isNew());
747:       assertFalse(node0.isBlock());
748:       assertFalse(node0.isHook());
749:       assertFalse(node0.isVar());
750:       assertFalse(node0.isCase());
751:       assertFalse(node0.isDo());
752:       assertEquals(431, node0.getType());
753:       assertFalse(node0.isAdd());
754:       assertFalse(node0.isParamList());
755:       assertFalse(node0.isNumber());
756:       assertFalse(node0.isGetterDef());
757:       assertFalse(node0.isAssignAdd());
758:       assertFalse(node0.isLabel());
759:       assertFalse(node0.isStringKey());
760:       assertFalse(node0.isArrayLit());
761:       assertFalse(node0.isLabelName());
762:       assertEquals(0, node0.getChildCount());
763:       
764:       InputId inputId0 = node0.getInputId();
765:       assertEquals(48, Node.DIRECTIVES);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
768:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
769:       assertEquals(50, Node.FREE_CALL);
770:       assertEquals(55, Node.INFERRED_FUNCTION);
771:       assertEquals(39, Node.EMPTY_BLOCK);
772:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
774:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
775:       assertEquals(52, Node.LENGTH);
776:       assertEquals(57, Node.REFLECTED_OBJECT);
777:       assertEquals(36, Node.QUOTED_PROP);
778:       assertEquals(49, Node.DIRECT_EVAL);
779:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
780:       assertEquals(4095, Node.COLUMN_MASK);
781:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
782:       assertEquals(37, Node.OPT_ARG_NAME);
783:       assertEquals(2, Node.POST_FLAG);
784:       assertEquals(32, Node.INCRDECR_PROP);
785:       assertEquals(56, Node.CHANGE_TIME);
786:       assertEquals(47, Node.IS_DISPATCHER);
787:       assertEquals(51, Node.STATIC_SOURCE_FILE);
788:       assertEquals(12, Node.COLUMN_BITS);
789:       assertEquals(46, Node.IS_NAMESPACE);
790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
791:       assertEquals(1, Node.DECR_FLAG);
792:       assertEquals(15, Node.NO_SIDE_EFFECTS);
793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
794:       assertEquals(29, Node.JSDOC_INFO_PROP);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(57, Node.LAST_PROP);
797:       assertEquals(43, Node.IS_CONSTANT_NAME);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(30, Node.VAR_ARGS_NAME);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertNull(inputId0);
802:       assertFalse(node0.isExprResult());
803:       assertFalse(node0.hasOneChild());
804:       assertFalse(node0.isObjectLit());
805:       assertFalse(node0.isNot());
806:       assertFalse(node0.isScript());
807:       assertFalse(node0.isComma());
808:       assertFalse(node0.isThis());
809:       assertFalse(node0.isGetProp());
810:       assertFalse(node0.isDec());
811:       assertFalse(node0.isTypeOf());
812:       assertFalse(node0.isOr());
813:       assertFalse(node0.isReturn());
814:       assertFalse(node0.hasChildren());
815:       assertFalse(node0.hasMoreThanOneChild());
816:       assertFalse(node0.isAssign());
817:       assertFalse(node0.isWith());
818:       assertEquals((-1), node0.getLineno());
819:       assertFalse(node0.isBreak());
820:       assertFalse(node0.isInstanceOf());
821:       assertFalse(node0.isGetElem());
822:       assertFalse(node0.isInc());
823:       assertFalse(node0.isWhile());
824:       assertFalse(node0.isString());
825:       assertFalse(node0.isIn());
826:       assertFalse(node0.isSetterDef());
827:       assertEquals((-1), node0.getSourcePosition());
828:       assertFalse(node0.isThrow());
829:       assertFalse(node0.isAnd());
830:       assertFalse(node0.isContinue());
831:       assertFalse(node0.isFalse());
832:       assertFalse(node0.isCast());
833:       assertFalse(node0.isTrue());
834:       assertFalse(node0.isFunction());
835:       assertFalse(node0.isDebugger());
836:       assertFalse(node0.isTry());
837:       assertFalse(node0.isRegExp());
838:       assertFalse(node0.isVoid());
839:       assertFalse(node0.isDefaultCase());
840:       assertFalse(node0.isEmpty());
841:       assertFalse(node0.isDelProp());
842:       assertFalse(node0.isIf());
843:       assertFalse(node0.isNull());
844:       assertFalse(node0.isFor());
845:       assertFalse(node0.isNE());
846:       assertFalse(node0.isCall());
847:       assertFalse(node0.isCatch());
848:       assertFalse(node0.isName());
849:       assertEquals((-1), node0.getCharno());
850:       assertFalse(node0.isSwitch());
851:       assertFalse(node0.isNew());
852:       assertFalse(node0.isBlock());
853:       assertFalse(node0.isHook());
854:       assertFalse(node0.isVar());
855:       assertFalse(node0.isCase());
856:       assertFalse(node0.isDo());
857:       assertEquals(431, node0.getType());
858:       assertFalse(node0.isAdd());
859:       assertFalse(node0.isParamList());
860:       assertFalse(node0.isNumber());
861:       assertFalse(node0.isGetterDef());
862:       assertFalse(node0.isAssignAdd());
863:       assertFalse(node0.isLabel());
864:       assertFalse(node0.isStringKey());
865:       assertFalse(node0.isArrayLit());
866:       assertFalse(node0.isLabelName());
867:       assertEquals(0, node0.getChildCount());
868:       
869:       int int0 = 26;
870:       int int1 = 309;
871:       Node node1 = new Node(49, node0, node0);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(8, Node.FLAG_NO_THROWS);
874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(39, Node.EMPTY_BLOCK);
879:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
880:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
881:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
882:       assertEquals(52, Node.LENGTH);
883:       assertEquals(57, Node.REFLECTED_OBJECT);
884:       assertEquals(36, Node.QUOTED_PROP);
885:       assertEquals(49, Node.DIRECT_EVAL);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
889:       assertEquals(37, Node.OPT_ARG_NAME);
890:       assertEquals(2, Node.POST_FLAG);
891:       assertEquals(32, Node.INCRDECR_PROP);
892:       assertEquals(56, Node.CHANGE_TIME);
893:       assertEquals(47, Node.IS_DISPATCHER);
894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
895:       assertEquals(12, Node.COLUMN_BITS);
896:       assertEquals(46, Node.IS_NAMESPACE);
897:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(15, Node.NO_SIDE_EFFECTS);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(29, Node.JSDOC_INFO_PROP);
902:       assertEquals(53, Node.INPUT_ID);
903:       assertEquals(57, Node.LAST_PROP);
904:       assertEquals(43, Node.IS_CONSTANT_NAME);
905:       assertEquals(54, Node.SLASH_V);
906:       assertEquals(30, Node.VAR_ARGS_NAME);
907:       assertEquals(40, Node.ORIGINALNAME_PROP);
908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
909:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
914:       assertEquals(37, Node.OPT_ARG_NAME);
915:       assertEquals(46, Node.IS_NAMESPACE);
916:       assertEquals(43, Node.IS_CONSTANT_NAME);
917:       assertEquals(56, Node.CHANGE_TIME);
918:       assertEquals(51, Node.STATIC_SOURCE_FILE);
919:       assertEquals(36, Node.QUOTED_PROP);
920:       assertEquals(1, Node.DECR_FLAG);
921:       assertEquals(49, Node.DIRECT_EVAL);
922:       assertEquals(4095, Node.COLUMN_MASK);
923:       assertEquals(32, Node.INCRDECR_PROP);
924:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
925:       assertEquals(12, Node.COLUMN_BITS);
926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
929:       assertEquals(40, Node.ORIGINALNAME_PROP);
930:       assertEquals(39, Node.EMPTY_BLOCK);
931:       assertEquals(48, Node.DIRECTIVES);
932:       assertEquals(54, Node.SLASH_V);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(57, Node.REFLECTED_OBJECT);
936:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
937:       assertEquals(30, Node.VAR_ARGS_NAME);
938:       assertEquals(55, Node.INFERRED_FUNCTION);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
941:       assertEquals(2, Node.POST_FLAG);
942:       assertEquals(57, Node.LAST_PROP);
943:       assertEquals(47, Node.IS_DISPATCHER);
944:       assertFalse(node1.equals((Object)node0));
945:       assertNotNull(node1);
946:       assertFalse(node0.isExprResult());
947:       assertFalse(node0.hasOneChild());
948:       assertFalse(node0.isObjectLit());
949:       assertFalse(node0.isNot());
950:       assertFalse(node0.isScript());
951:       assertFalse(node0.isComma());
952:       assertFalse(node0.isThis());
953:       assertFalse(node0.isGetProp());
954:       assertFalse(node0.isDec());
955:       assertFalse(node0.isTypeOf());
956:       assertFalse(node0.isOr());
957:       assertFalse(node0.isReturn());
958:       assertFalse(node0.hasChildren());
959:       assertFalse(node0.hasMoreThanOneChild());
960:       assertFalse(node0.isAssign());
961:       assertFalse(node0.isWith());
962:       assertEquals((-1), node0.getLineno());
963:       assertFalse(node0.isBreak());
964:       assertFalse(node0.isInstanceOf());
965:       assertFalse(node0.isGetElem());
966:       assertFalse(node0.isInc());
967:       assertFalse(node0.isWhile());
968:       assertFalse(node0.isString());
969:       assertFalse(node0.isIn());
970:       assertFalse(node0.isSetterDef());
971:       assertEquals((-1), node0.getSourcePosition());
972:       assertFalse(node0.isThrow());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node0.isContinue());
975:       assertFalse(node0.isFalse());
976:       assertFalse(node0.isCast());
977:       assertFalse(node0.isTrue());
978:       assertFalse(node0.isFunction());
979:       assertFalse(node0.isDebugger());
980:       assertFalse(node0.isTry());
981:       assertFalse(node0.isRegExp());
982:       assertFalse(node0.isVoid());
983:       assertFalse(node0.isDefaultCase());
984:       assertFalse(node0.isEmpty());
985:       assertFalse(node0.isDelProp());
986:       assertFalse(node0.isIf());
987:       assertFalse(node0.isNull());
988:       assertFalse(node0.isFor());
989:       assertFalse(node0.isNE());
990:       assertFalse(node0.isCall());
991:       assertFalse(node0.isCatch());
992:       assertFalse(node0.isName());
993:       assertEquals((-1), node0.getCharno());
994:       assertFalse(node0.isSwitch());
995:       assertFalse(node0.isNew());
996:       assertFalse(node0.isBlock());
997:       assertFalse(node0.isHook());
998:       assertFalse(node0.isVar());
999:       assertFalse(node0.isCase());
1000:       assertFalse(node0.isDo());
1001:       assertEquals(431, node0.getType());
1002:       assertFalse(node0.isAdd());
1003:       assertFalse(node0.isParamList());
1004:       assertFalse(node0.isNumber());
1005:       assertFalse(node0.isGetterDef());
1006:       assertFalse(node0.isAssignAdd());
1007:       assertFalse(node0.isLabel());
1008:       assertFalse(node0.isStringKey());
1009:       assertFalse(node0.isArrayLit());
1010:       assertFalse(node0.isLabelName());
1011:       assertEquals(0, node0.getChildCount());
1012:       assertFalse(node1.isIn());
1013:       assertTrue(node1.hasChildren());
1014:       assertFalse(node1.isCase());
1015:       assertFalse(node1.isString());
1016:       assertEquals(49, node1.getType());
1017:       assertFalse(node1.isSwitch());
1018:       assertFalse(node1.isNE());
1019:       assertEquals((-1), node1.getCharno());
1020:       assertFalse(node1.isIf());
1021:       assertFalse(node1.isGetterDef());
1022:       assertFalse(node1.isDelProp());
1023:       assertFalse(node1.isBreak());
1024:       assertFalse(node1.isComma());
1025:       assertFalse(node1.isThis());
1026:       assertFalse(node1.isTry());
1027:       assertFalse(node1.isRegExp());
1028:       assertTrue(node1.hasOneChild());
1029:       assertEquals(1, node1.getChildCount());
1030:       assertFalse(node1.isHook());
1031:       assertFalse(node1.isFor());
1032:       assertFalse(node1.isCatch());
1033:       assertFalse(node1.isAnd());
1034:       assertFalse(node1.isObjectLit());
1035:       assertFalse(node1.isWith());
1036:       assertFalse(node1.isInstanceOf());
1037:       assertFalse(node1.isGetProp());
1038:       assertFalse(node1.isDebugger());
1039:       assertFalse(node1.isNot());
1040:       assertFalse(node1.isCast());
1041:       assertFalse(node1.isFalse());
1042:       assertFalse(node1.isInc());
1043:       assertFalse(node1.isSetterDef());
1044:       assertFalse(node1.isFunction());
1045:       assertFalse(node1.hasMoreThanOneChild());
1046:       assertFalse(node1.isContinue());
1047:       assertFalse(node1.isDo());
1048:       assertEquals((-1), node1.getLineno());
1049:       assertEquals((-1), node1.getSourcePosition());
1050:       assertFalse(node1.isNumber());
1051:       assertFalse(node1.isOr());
1052:       assertFalse(node1.isName());
1053:       assertFalse(node1.isGetElem());
1054:       assertFalse(node1.isCall());
1055:       assertFalse(node1.isExprResult());
1056:       assertFalse(node1.isDec());
1057:       assertFalse(node1.isTypeOf());
1058:       assertFalse(node1.isReturn());
1059:       assertFalse(node1.isAssign());
1060:       assertFalse(node1.isWhile());
1061:       assertFalse(node1.isBlock());
1062:       assertFalse(node1.isScript());
1063:       assertFalse(node1.isParamList());
1064:       assertFalse(node1.isVoid());
1065:       assertFalse(node1.isStringKey());
1066:       assertFalse(node1.isNull());
1067:       assertFalse(node1.isTrue());
1068:       assertFalse(node1.isArrayLit());
1069:       assertFalse(node1.isLabelName());
1070:       assertFalse(node1.isNew());
1071:       assertFalse(node1.isAdd());
1072:       assertFalse(node1.isEmpty());
1073:       assertTrue(node1.isThrow());
1074:       assertFalse(node1.isDefaultCase());
1075:       assertFalse(node1.isAssignAdd());
1076:       assertFalse(node1.isLabel());
1077:       assertFalse(node1.isVar());
1078:       
1079:       Node node2 = new Node(15, node1, node1, 0, 47);
1080:       assertEquals(48, Node.DIRECTIVES);
1081:       assertEquals(8, Node.FLAG_NO_THROWS);
1082:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1083:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1084:       assertEquals(50, Node.FREE_CALL);
1085:       assertEquals(55, Node.INFERRED_FUNCTION);
1086:       assertEquals(39, Node.EMPTY_BLOCK);
1087:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1088:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1089:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1090:       assertEquals(52, Node.LENGTH);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(36, Node.QUOTED_PROP);
1093:       assertEquals(49, Node.DIRECT_EVAL);
1094:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1095:       assertEquals(4095, Node.COLUMN_MASK);
1096:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1097:       assertEquals(37, Node.OPT_ARG_NAME);
1098:       assertEquals(2, Node.POST_FLAG);
1099:       assertEquals(32, Node.INCRDECR_PROP);
1100:       assertEquals(56, Node.CHANGE_TIME);
1101:       assertEquals(47, Node.IS_DISPATCHER);
1102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1103:       assertEquals(12, Node.COLUMN_BITS);
1104:       assertEquals(46, Node.IS_NAMESPACE);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1109:       assertEquals(29, Node.JSDOC_INFO_PROP);
1110:       assertEquals(53, Node.INPUT_ID);
1111:       assertEquals(57, Node.LAST_PROP);
1112:       assertEquals(43, Node.IS_CONSTANT_NAME);
1113:       assertEquals(54, Node.SLASH_V);
1114:       assertEquals(30, Node.VAR_ARGS_NAME);
1115:       assertEquals(40, Node.ORIGINALNAME_PROP);
1116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1119:       assertEquals(29, Node.JSDOC_INFO_PROP);
1120:       assertEquals(53, Node.INPUT_ID);
1121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1122:       assertEquals(37, Node.OPT_ARG_NAME);
1123:       assertEquals(46, Node.IS_NAMESPACE);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       assertEquals(56, Node.CHANGE_TIME);
1126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1127:       assertEquals(36, Node.QUOTED_PROP);
1128:       assertEquals(1, Node.DECR_FLAG);
1129:       assertEquals(49, Node.DIRECT_EVAL);
1130:       assertEquals(4095, Node.COLUMN_MASK);
1131:       assertEquals(32, Node.INCRDECR_PROP);
1132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1133:       assertEquals(12, Node.COLUMN_BITS);
1134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1135:       assertEquals(50, Node.FREE_CALL);
1136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1137:       assertEquals(40, Node.ORIGINALNAME_PROP);
1138:       assertEquals(39, Node.EMPTY_BLOCK);
1139:       assertEquals(48, Node.DIRECTIVES);
1140:       assertEquals(54, Node.SLASH_V);
1141:       assertEquals(52, Node.LENGTH);
1142:       assertEquals(8, Node.FLAG_NO_THROWS);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1145:       assertEquals(30, Node.VAR_ARGS_NAME);
1146:       assertEquals(55, Node.INFERRED_FUNCTION);
1147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1149:       assertEquals(2, Node.POST_FLAG);
1150:       assertEquals(57, Node.LAST_PROP);
1151:       assertEquals(47, Node.IS_DISPATCHER);
1152:       assertEquals(37, Node.OPT_ARG_NAME);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1155:       assertEquals(47, Node.IS_DISPATCHER);
1156:       assertEquals(2, Node.POST_FLAG);
1157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(29, Node.JSDOC_INFO_PROP);
1160:       assertEquals(12, Node.COLUMN_BITS);
1161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1162:       assertEquals(57, Node.LAST_PROP);
1163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1164:       assertEquals(32, Node.INCRDECR_PROP);
1165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1166:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1167:       assertEquals(53, Node.INPUT_ID);
1168:       assertEquals(57, Node.REFLECTED_OBJECT);
1169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1170:       assertEquals(36, Node.QUOTED_PROP);
1171:       assertEquals(52, Node.LENGTH);
1172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1173:       assertEquals(56, Node.CHANGE_TIME);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(48, Node.DIRECTIVES);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(4095, Node.COLUMN_MASK);
1179:       assertEquals(8, Node.FLAG_NO_THROWS);
1180:       assertEquals(50, Node.FREE_CALL);
1181:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1182:       assertEquals(55, Node.INFERRED_FUNCTION);
1183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1184:       assertEquals(54, Node.SLASH_V);
1185:       assertEquals(30, Node.VAR_ARGS_NAME);
1186:       assertEquals(40, Node.ORIGINALNAME_PROP);
1187:       assertEquals(43, Node.IS_CONSTANT_NAME);
1188:       assertFalse(node0.equals((Object)node1));
1189:       assertFalse(node1.equals((Object)node0));
1190:       assertFalse(node2.equals((Object)node0));
1191:       assertFalse(node2.equals((Object)node1));
1192:       assertNotNull(node2);
1193:       assertFalse(node0.isExprResult());
1194:       assertFalse(node0.hasOneChild());
1195:       assertFalse(node0.isObjectLit());
1196:       assertFalse(node0.isNot());
1197:       assertFalse(node0.isScript());
1198:       assertFalse(node0.isComma());
1199:       assertFalse(node0.isThis());
1200:       assertFalse(node0.isGetProp());
1201:       assertFalse(node0.isDec());
1202:       assertFalse(node0.isTypeOf());
1203:       assertFalse(node0.isOr());
1204:       assertFalse(node0.isReturn());
1205:       assertFalse(node0.hasChildren());
1206:       assertFalse(node0.hasMoreThanOneChild());
1207:       assertFalse(node0.isAssign());
1208:       assertFalse(node0.isWith());
1209:       assertEquals((-1), node0.getLineno());
1210:       assertFalse(node0.isBreak());
1211:       assertFalse(node0.isInstanceOf());
1212:       assertFalse(node0.isGetElem());
1213:       assertFalse(node0.isInc());
1214:       assertFalse(node0.isWhile());
1215:       assertFalse(node0.isString());
1216:       assertFalse(node0.isIn());
1217:       assertFalse(node0.isSetterDef());
1218:       assertEquals((-1), node0.getSourcePosition());
1219:       assertFalse(node0.isThrow());
1220:       assertFalse(node0.isAnd());
1221:       assertFalse(node0.isContinue());
1222:       assertFalse(node0.isFalse());
1223:       assertFalse(node0.isCast());
1224:       assertFalse(node0.isTrue());
1225:       assertFalse(node0.isFunction());
1226:       assertFalse(node0.isDebugger());
1227:       assertFalse(node0.isTry());
1228:       assertFalse(node0.isRegExp());
1229:       assertFalse(node0.isVoid());
1230:       assertFalse(node0.isDefaultCase());
1231:       assertFalse(node0.isEmpty());
1232:       assertFalse(node0.isDelProp());
1233:       assertFalse(node0.isIf());
1234:       assertFalse(node0.isNull());
1235:       assertFalse(node0.isFor());
1236:       assertFalse(node0.isNE());
1237:       assertFalse(node0.isCall());
1238:       assertFalse(node0.isCatch());
1239:       assertFalse(node0.isName());
1240:       assertEquals((-1), node0.getCharno());
1241:       assertFalse(node0.isSwitch());
1242:       assertFalse(node0.isNew());
1243:       assertFalse(node0.isBlock());
1244:       assertFalse(node0.isHook());
1245:       assertFalse(node0.isVar());
1246:       assertFalse(node0.isCase());
1247:       assertFalse(node0.isDo());
1248:       assertEquals(431, node0.getType());
1249:       assertFalse(node0.isAdd());
1250:       assertFalse(node0.isParamList());
1251:       assertFalse(node0.isNumber());
1252:       assertFalse(node0.isGetterDef());
1253:       assertFalse(node0.isAssignAdd());
1254:       assertFalse(node0.isLabel());
1255:       assertFalse(node0.isStringKey());
1256:       assertFalse(node0.isArrayLit());
1257:       assertFalse(node0.isLabelName());
1258:       assertEquals(0, node0.getChildCount());
1259:       assertFalse(node1.isIn());
1260:       assertTrue(node1.hasChildren());
1261:       assertFalse(node1.isCase());
1262:       assertFalse(node1.isString());
1263:       assertEquals(49, node1.getType());
1264:       assertFalse(node1.isSwitch());
1265:       assertFalse(node1.isNE());
1266:       assertEquals((-1), node1.getCharno());
1267:       assertFalse(node1.isIf());
1268:       assertFalse(node1.isGetterDef());
1269:       assertFalse(node1.isDelProp());
1270:       assertFalse(node1.isBreak());
1271:       assertFalse(node1.isComma());
1272:       assertFalse(node1.isThis());
1273:       assertFalse(node1.isTry());
1274:       assertFalse(node1.isRegExp());
1275:       assertTrue(node1.hasOneChild());
1276:       assertEquals(1, node1.getChildCount());
1277:       assertFalse(node1.isHook());
1278:       assertFalse(node1.isFor());
1279:       assertFalse(node1.isCatch());
1280:       assertFalse(node1.isAnd());
1281:       assertFalse(node1.isObjectLit());
1282:       assertFalse(node1.isWith());
1283:       assertFalse(node1.isInstanceOf());
1284:       assertFalse(node1.isGetProp());
1285:       assertFalse(node1.isDebugger());
1286:       assertFalse(node1.isNot());
1287:       assertFalse(node1.isCast());
1288:       assertFalse(node1.isFalse());
1289:       assertFalse(node1.isInc());
1290:       assertFalse(node1.isSetterDef());
1291:       assertFalse(node1.isFunction());
1292:       assertFalse(node1.hasMoreThanOneChild());
1293:       assertFalse(node1.isContinue());
1294:       assertFalse(node1.isDo());
1295:       assertEquals((-1), node1.getLineno());
1296:       assertEquals((-1), node1.getSourcePosition());
1297:       assertFalse(node1.isNumber());
1298:       assertFalse(node1.isOr());
1299:       assertFalse(node1.isName());
1300:       assertFalse(node1.isGetElem());
1301:       assertFalse(node1.isCall());
1302:       assertFalse(node1.isExprResult());
1303:       assertFalse(node1.isDec());
1304:       assertFalse(node1.isTypeOf());
1305:       assertFalse(node1.isReturn());
1306:       assertFalse(node1.isAssign());
1307:       assertFalse(node1.isWhile());
1308:       assertFalse(node1.isBlock());
1309:       assertFalse(node1.isScript());
1310:       assertFalse(node1.isParamList());
1311:       assertFalse(node1.isVoid());
1312:       assertFalse(node1.isStringKey());
1313:       assertFalse(node1.isNull());
1314:       assertFalse(node1.isTrue());
1315:       assertFalse(node1.isArrayLit());
1316:       assertFalse(node1.isLabelName());
1317:       assertFalse(node1.isNew());
1318:       assertFalse(node1.isAdd());
1319:       assertFalse(node1.isEmpty());
1320:       assertTrue(node1.isThrow());
1321:       assertFalse(node1.isDefaultCase());
1322:       assertFalse(node1.isAssignAdd());
1323:       assertFalse(node1.isLabel());
1324:       assertFalse(node1.isVar());
1325:       assertFalse(node2.isInc());
1326:       assertFalse(node2.isSwitch());
1327:       assertFalse(node2.isString());
1328:       assertEquals(47, node2.getSourcePosition());
1329:       assertFalse(node2.isHook());
1330:       assertFalse(node2.isThrow());
1331:       assertFalse(node2.isCase());
1332:       assertFalse(node2.isComma());
1333:       assertFalse(node2.isThis());
1334:       assertFalse(node2.isNE());
1335:       assertTrue(node2.hasChildren());
1336:       assertTrue(node2.hasOneChild());
1337:       assertEquals(1, node2.getChildCount());
1338:       assertFalse(node2.isIn());
1339:       assertFalse(node2.isInstanceOf());
1340:       assertFalse(node2.isDelProp());
1341:       assertFalse(node2.isIf());
1342:       assertFalse(node2.isBreak());
1343:       assertFalse(node2.isVoid());
1344:       assertFalse(node2.isTrue());
1345:       assertFalse(node2.isScript());
1346:       assertFalse(node2.isWith());
1347:       assertFalse(node2.isRegExp());
1348:       assertFalse(node2.isFor());
1349:       assertFalse(node2.isEmpty());
1350:       assertFalse(node2.isDefaultCase());
1351:       assertFalse(node2.isTry());
1352:       assertFalse(node2.isParamList());
1353:       assertFalse(node2.isLabel());
1354:       assertFalse(node2.isNumber());
1355:       assertFalse(node2.isGetterDef());
1356:       assertFalse(node2.isStringKey());
1357:       assertFalse(node2.isArrayLit());
1358:       assertFalse(node2.isLabelName());
1359:       assertFalse(node2.isBlock());
1360:       assertFalse(node2.isAdd());
1361:       assertFalse(node2.isVar());
1362:       assertFalse(node2.isWhile());
1363:       assertFalse(node2.isAssignAdd());
1364:       assertFalse(node2.isNew());
1365:       assertFalse(node2.isDo());
1366:       assertFalse(node2.isSetterDef());
1367:       assertEquals(47, node2.getCharno());
1368:       assertFalse(node2.isNull());
1369:       assertFalse(node2.isReturn());
1370:       assertFalse(node2.isDec());
1371:       assertFalse(node2.isTypeOf());
1372:       assertFalse(node2.isOr());
1373:       assertFalse(node2.isAssign());
1374:       assertFalse(node2.isCall());
1375:       assertFalse(node2.hasMoreThanOneChild());
1376:       assertFalse(node2.isGetElem());
1377:       assertFalse(node2.isCatch());
1378:       assertFalse(node2.isName());
1379:       assertFalse(node2.isExprResult());
1380:       assertFalse(node2.isFunction());
1381:       assertFalse(node2.isDebugger());
1382:       assertFalse(node2.isNot());
1383:       assertFalse(node2.isObjectLit());
1384:       assertEquals(15, node2.getType());
1385:       assertFalse(node2.isGetProp());
1386:       assertFalse(node2.isFalse());
1387:       assertFalse(node2.isAnd());
1388:       assertFalse(node2.isContinue());
1389:       assertFalse(node2.isCast());
1390:       assertEquals(0, node2.getLineno());
1391:       
1392:       // Undeclared exception!
1393:       try { 
1394:         node0.getChildBefore(node2);
1395:         fail("Expecting exception: NullPointerException");
1396:       
1397:       } catch(NullPointerException e) {
1398:          //
1399:          // no message in exception (getMessage() returned null)
1400:          //
1401:          verifyException("com.google.javascript.rhino.Node", e);
1402:       }
1403:   }
1404: }
RegularFileObject[/tmp/EvoSuite_16_1605714103804/com/google/javascript/rhino/Node_16_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:45 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_16_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_16_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.common.collect.Iterators$12",
123:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
124:       "com.google.common.collect.Iterators$11",
125:       "com.google.javascript.rhino.jstype.JSType$1",
126:       "com.google.common.collect.EmptyImmutableBiMap",
127:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
128:       "com.google.common.base.Predicate",
129:       "com.google.javascript.rhino.jstype.VoidType",
130:       "com.google.common.base.Joiner",
131:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
132:       "com.google.common.collect.AbstractListMultimap",
133:       "com.google.javascript.rhino.jstype.JSType",
134:       "com.google.common.collect.ImmutableAsList",
135:       "com.google.javascript.rhino.Node$StringNode",
136:       "com.google.javascript.rhino.jstype.ProxyObjectType",
137:       "com.google.common.collect.Sets$SetView",
138:       "com.google.common.collect.RegularImmutableAsList",
139:       "com.google.javascript.rhino.jstype.TemplateType",
140:       "com.google.javascript.rhino.jstype.NamedType",
141:       "com.google.common.collect.Iterators$13",
142:       "com.google.javascript.rhino.InputId",
143:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
144:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
145:       "com.google.common.collect.AbstractMapBasedMultimap",
146:       "com.google.common.collect.Lists$Partition",
147:       "com.google.common.collect.Lists",
148:       "com.google.javascript.rhino.Node$SideEffectFlags",
149:       "com.google.common.collect.UnmodifiableListIterator",
150:       "com.google.javascript.rhino.jstype.NullType",
151:       "com.google.common.collect.Lists$TransformingSequentialList",
152:       "com.google.javascript.rhino.ErrorReporter",
153:       "com.google.javascript.rhino.jstype.UnknownType",
154:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
155:       "com.google.javascript.rhino.jstype.ValueType",
156:       "com.google.javascript.rhino.jstype.PropertyMap",
157:       "com.google.javascript.rhino.Token",
158:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
159:       "com.google.common.collect.ObjectArrays",
160:       "com.google.javascript.rhino.jstype.StaticSourceFile",
161:       "com.google.javascript.rhino.jstype.BooleanType",
162:       "com.google.javascript.rhino.jstype.NoObjectType",
163:       "com.google.common.collect.AbstractIterator",
164:       "com.google.javascript.rhino.jstype.FunctionBuilder",
165:       "com.google.javascript.rhino.jstype.JSType$TypePair",
166:       "com.google.common.base.Joiner$MapJoiner",
167:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
168:       "com.google.common.collect.ImmutableList$1",
169:       "com.google.common.collect.MapDifference",
170:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
171:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
172:       "com.google.common.collect.Sets$ImprovedAbstractSet",
173:       "com.google.javascript.rhino.jstype.FunctionType",
174:       "com.google.common.base.Preconditions",
175:       "com.google.common.collect.UnmodifiableIterator",
176:       "com.google.javascript.rhino.JSDocInfo",
177:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
178:       "com.google.javascript.rhino.jstype.Property",
179:       "com.google.common.collect.ImmutableMapValues",
180:       "com.google.common.collect.ImmutableEntry",
181:       "com.google.common.base.Joiner$1",
182:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
183:       "com.google.common.base.Joiner$2",
184:       "com.google.common.collect.ImmutableCollection",
185:       "com.google.common.collect.ImmutableEnumMap",
186:       "com.google.javascript.rhino.jstype.TernaryValue",
187:       "com.google.javascript.rhino.Node$AncestorIterable",
188:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
189:       "com.google.common.collect.Lists$RandomAccessListWrapper",
190:       "com.google.common.collect.ImmutableEnumSet",
191:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
192:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
193:       "com.google.javascript.rhino.jstype.EnumElementType",
194:       "com.google.javascript.rhino.jstype.UnionType",
195:       "com.google.common.base.Objects",
196:       "com.google.javascript.rhino.Node$NumberNode",
197:       "com.google.common.collect.SingletonImmutableList",
198:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
199:       "com.google.common.collect.ImmutableCollection$Builder",
200:       "com.google.javascript.rhino.jstype.StaticSlot",
201:       "com.google.common.collect.Iterators$6",
202:       "com.google.common.collect.BiMap",
203:       "com.google.common.collect.Iterators$7",
204:       "com.google.common.collect.AbstractSetMultimap",
205:       "com.google.common.base.Function",
206:       "com.google.common.collect.ImmutableSet",
207:       "com.google.common.collect.Lists$AbstractListWrapper",
208:       "com.google.common.collect.ImmutableMap",
209:       "com.google.common.collect.AbstractIndexedListIterator",
210:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
211:       "com.google.common.collect.Maps$1",
212:       "com.google.javascript.rhino.jstype.EnumType",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
234:       "com.google.common.collect.ImmutableList",
235:       "com.google.common.collect.SingletonImmutableBiMap",
236:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
237:       "com.google.javascript.rhino.jstype.StringType",
238:       "com.google.javascript.rhino.Node$AbstractPropListItem",
239:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
240:       "com.google.javascript.rhino.jstype.TemplatizedType",
241:       "com.google.javascript.rhino.jstype.Visitor",
242:       "com.google.javascript.rhino.jstype.NoResolvedType",
243:       "com.google.javascript.rhino.jstype.JSTypeNative",
244:       "com.google.javascript.rhino.jstype.AllType",
245:       "com.google.common.collect.Maps",
246:       "com.google.common.collect.SetMultimap",
247:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
248:       "com.google.common.collect.Maps$EntryTransformer",
249:       "com.google.javascript.rhino.JSTypeExpression",
250:       "com.google.common.collect.Iterators$MergingIterator"
251:     );
252:   } 
253: 
254:   private static void resetClasses() {
255:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_16_tmp__ESTest_scaffolding.class.getClassLoader()); 
256: 
257:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
258:       "com.google.javascript.rhino.Node",
259:       "com.google.javascript.rhino.Node$NumberNode",
260:       "com.google.javascript.rhino.Node$StringNode",
261:       "com.google.javascript.rhino.Node$AbstractPropListItem",
262:       "com.google.javascript.rhino.Node$ObjectPropListItem",
263:       "com.google.javascript.rhino.Node$IntPropListItem",
264:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
265:       "com.google.javascript.rhino.Node$AncestorIterable",
266:       "com.google.javascript.rhino.Node$NodeMismatch",
267:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
268:       "com.google.javascript.rhino.Node$SideEffectFlags",
269:       "com.google.javascript.rhino.Token",
270:       "com.google.common.base.Preconditions",
271:       "com.google.javascript.rhino.SimpleErrorReporter",
272:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
273:       "com.google.common.base.Joiner",
274:       "com.google.common.base.Joiner$1",
275:       "com.google.common.collect.Collections2",
276:       "com.google.common.base.Joiner$MapJoiner",
277:       "com.google.common.collect.Maps",
278:       "com.google.common.collect.AbstractMultimap",
279:       "com.google.common.collect.AbstractMapBasedMultimap",
280:       "com.google.common.collect.AbstractSetMultimap",
281:       "com.google.common.collect.LinkedHashMultimap",
282:       "com.google.common.collect.AbstractMapEntry",
283:       "com.google.common.collect.ImmutableEntry",
284:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
285:       "com.google.common.collect.AbstractListMultimap",
286:       "com.google.common.collect.ArrayListMultimap",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
288:       "com.google.common.collect.ImmutableCollection",
289:       "com.google.common.collect.RegularImmutableList",
290:       "com.google.common.collect.ObjectArrays",
291:       "com.google.common.collect.ImmutableList",
292:       "com.google.javascript.rhino.jstype.ModificationVisitor",
293:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
294:       "com.google.common.collect.ImmutableCollection$Builder",
295:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
296:       "com.google.common.collect.ImmutableList$Builder",
297:       "com.google.common.collect.UnmodifiableIterator",
298:       "com.google.common.collect.UnmodifiableListIterator",
299:       "com.google.common.collect.Iterators$1",
300:       "com.google.common.collect.Iterators$2",
301:       "com.google.common.collect.Iterators",
302:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
303:       "com.google.javascript.rhino.jstype.JSType$1",
304:       "com.google.javascript.rhino.jstype.JSType",
305:       "com.google.javascript.rhino.jstype.ObjectType",
306:       "com.google.javascript.rhino.jstype.ProxyObjectType",
307:       "com.google.javascript.rhino.jstype.TemplateType",
308:       "com.google.javascript.rhino.jstype.ValueType",
309:       "com.google.javascript.rhino.jstype.BooleanType",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.javascript.rhino.jstype.NumberType",
312:       "com.google.javascript.rhino.jstype.StringType",
313:       "com.google.javascript.rhino.jstype.UnknownType",
314:       "com.google.javascript.rhino.jstype.VoidType",
315:       "com.google.javascript.rhino.jstype.AllType",
316:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
317:       "com.google.common.collect.ImmutableMap",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.collect.EmptyImmutableBiMap",
320:       "com.google.javascript.rhino.jstype.PropertyMap$1",
321:       "com.google.javascript.rhino.jstype.PropertyMap",
322:       "com.google.javascript.rhino.jstype.FunctionType",
323:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
324:       "com.google.javascript.rhino.jstype.ArrowType",
325:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
326:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
327:       "com.google.javascript.rhino.jstype.InstanceObjectType",
328:       "com.google.javascript.rhino.jstype.Property",
329:       "com.google.common.collect.Lists",
330:       "com.google.javascript.rhino.jstype.NoObjectType",
331:       "com.google.javascript.rhino.jstype.NoType",
332:       "com.google.javascript.rhino.jstype.NoResolvedType",
333:       "com.google.common.collect.SingletonImmutableList",
334:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
335:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
336:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
337:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
338:       "com.google.javascript.rhino.jstype.UnionType",
339:       "com.google.javascript.rhino.jstype.FunctionBuilder",
340:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.base.Objects",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
354:     );
355:   }
356: }

[MASTER] 15:41:45.929 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "";
Node node0 = Node.newString(431, "");
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

Iterable<Node> iterable0 = node0.children();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean0 = node0.isVoid();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean1 = node0.isAssign();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean2 = node0.isParamList();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

node0.detachChildren();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean3 = node0.isNE();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean3);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

InputId inputId0 = node0.getInputId();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(inputId0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

int int0 = 26;
int int1 = 309;
Node node1 = new Node(49, node0, node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());

Node node2 = new Node(15, node1, node1, 0, 47);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(431, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertEquals(47, node2.getSourcePosition());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertTrue(node2.hasChildren());
assertTrue(node2.hasOneChild());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertEquals(47, node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(15, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(0, node2.getLineno());

node0.getChildBefore(node2);

[MASTER] 15:41:54.260 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_27_1605714113376/com/google/javascript/rhino/Node_27_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_27_1605714113376/com/google/javascript/rhino/Node_27_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:54.268 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:54.268 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:54.271 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 691
[MASTER] 15:41:54.274 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_27_1605714113376/com/google/javascript/rhino/Node_27_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:53 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_27_tmp__ESTest extends Node_27_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(1945, "Window", 26, 10);
21:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
22:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
23:       assertEquals(53, Node.INPUT_ID);
24:       assertEquals(29, Node.JSDOC_INFO_PROP);
25:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
26:       assertEquals(37, Node.OPT_ARG_NAME);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(43, Node.IS_CONSTANT_NAME);
29:       assertEquals(56, Node.CHANGE_TIME);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(15, Node.NO_SIDE_EFFECTS);
33:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
34:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
35:       assertEquals(39, Node.EMPTY_BLOCK);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(57, Node.LAST_PROP);
39:       assertEquals(47, Node.IS_DISPATCHER);
40:       assertEquals(40, Node.ORIGINALNAME_PROP);
41:       assertEquals(50, Node.FREE_CALL);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(48, Node.DIRECTIVES);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(54, Node.SLASH_V);
49:       assertEquals(4095, Node.COLUMN_MASK);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(1, Node.DECR_FLAG);
52:       assertEquals(49, Node.DIRECT_EVAL);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertNotNull(node0);
58:       assertFalse(node0.isIn());
59:       assertFalse(node0.isCase());
60:       assertFalse(node0.isString());
61:       assertFalse(node0.isIf());
62:       assertFalse(node0.isSwitch());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isDelProp());
65:       assertEquals(26, node0.getLineno());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isArrayLit());
68:       assertFalse(node0.isFalse());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isEmpty());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isThrow());
74:       assertEquals(10, node0.getCharno());
75:       assertFalse(node0.isObjectLit());
76:       assertEquals(106506, node0.getSourcePosition());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isNull());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isDebugger());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isTrue());
85:       assertEquals(1945, node0.getType());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isCall());
89:       assertFalse(node0.isExprResult());
90:       assertFalse(node0.isTypeOf());
91:       assertFalse(node0.hasChildren());
92:       assertFalse(node0.isComma());
93:       assertFalse(node0.isDec());
94:       assertFalse(node0.isAssign());
95:       assertFalse(node0.isReturn());
96:       assertFalse(node0.isWhile());
97:       assertFalse(node0.hasMoreThanOneChild());
98:       assertFalse(node0.isOr());
99:       assertFalse(node0.isContinue());
100:       assertFalse(node0.isNumber());
101:       assertFalse(node0.isLabelName());
102:       assertFalse(node0.isNew());
103:       assertFalse(node0.isAdd());
104:       assertFalse(node0.isCast());
105:       assertFalse(node0.isSetterDef());
106:       assertFalse(node0.isDo());
107:       assertFalse(node0.isAssignAdd());
108:       assertFalse(node0.isLabel());
109:       assertFalse(node0.isVar());
110:       assertEquals(0, node0.getChildCount());
111:       assertFalse(node0.isWith());
112:       assertFalse(node0.isCatch());
113:       assertFalse(node0.isInstanceOf());
114:       assertFalse(node0.isParamList());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isHook());
118:       assertFalse(node0.isTry());
119:       assertFalse(node0.isRegExp());
120:       assertFalse(node0.isScript());
121:       assertFalse(node0.isBlock());
122:       assertFalse(node0.isFor());
123:       assertFalse(node0.isThis());
124:       
125:       String string0 = node0.getQualifiedName();
126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(29, Node.JSDOC_INFO_PROP);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(43, Node.IS_CONSTANT_NAME);
134:       assertEquals(56, Node.CHANGE_TIME);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(57, Node.LAST_PROP);
144:       assertEquals(47, Node.IS_DISPATCHER);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(50, Node.FREE_CALL);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(4095, Node.COLUMN_MASK);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(1, Node.DECR_FLAG);
157:       assertEquals(49, Node.DIRECT_EVAL);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertNull(string0);
163:       assertFalse(node0.isIn());
164:       assertFalse(node0.isCase());
165:       assertFalse(node0.isString());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isSwitch());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isDelProp());
170:       assertEquals(26, node0.getLineno());
171:       assertFalse(node0.isNE());
172:       assertFalse(node0.isArrayLit());
173:       assertFalse(node0.isFalse());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isDefaultCase());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isThrow());
179:       assertEquals(10, node0.getCharno());
180:       assertFalse(node0.isObjectLit());
181:       assertEquals(106506, node0.getSourcePosition());
182:       assertFalse(node0.isGetProp());
183:       assertFalse(node0.isNull());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isDebugger());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isNot());
188:       assertFalse(node0.isName());
189:       assertFalse(node0.isTrue());
190:       assertEquals(1945, node0.getType());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isCall());
194:       assertFalse(node0.isExprResult());
195:       assertFalse(node0.isTypeOf());
196:       assertFalse(node0.hasChildren());
197:       assertFalse(node0.isComma());
198:       assertFalse(node0.isDec());
199:       assertFalse(node0.isAssign());
200:       assertFalse(node0.isReturn());
201:       assertFalse(node0.isWhile());
202:       assertFalse(node0.hasMoreThanOneChild());
203:       assertFalse(node0.isOr());
204:       assertFalse(node0.isContinue());
205:       assertFalse(node0.isNumber());
206:       assertFalse(node0.isLabelName());
207:       assertFalse(node0.isNew());
208:       assertFalse(node0.isAdd());
209:       assertFalse(node0.isCast());
210:       assertFalse(node0.isSetterDef());
211:       assertFalse(node0.isDo());
212:       assertFalse(node0.isAssignAdd());
213:       assertFalse(node0.isLabel());
214:       assertFalse(node0.isVar());
215:       assertEquals(0, node0.getChildCount());
216:       assertFalse(node0.isWith());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isInstanceOf());
219:       assertFalse(node0.isParamList());
220:       assertFalse(node0.isStringKey());
221:       assertFalse(node0.hasOneChild());
222:       assertFalse(node0.isHook());
223:       assertFalse(node0.isTry());
224:       assertFalse(node0.isRegExp());
225:       assertFalse(node0.isScript());
226:       assertFalse(node0.isBlock());
227:       assertFalse(node0.isFor());
228:       assertFalse(node0.isThis());
229:       
230:       Node node1 = Node.newNumber(0.5);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       assertEquals(57, Node.REFLECTED_OBJECT);
233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
234:       assertEquals(50, Node.FREE_CALL);
235:       assertEquals(52, Node.LENGTH);
236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
242:       assertEquals(1, Node.DECR_FLAG);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(2, Node.POST_FLAG);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
253:       assertEquals(29, Node.JSDOC_INFO_PROP);
254:       assertEquals(53, Node.INPUT_ID);
255:       assertEquals(32, Node.INCRDECR_PROP);
256:       assertEquals(12, Node.COLUMN_BITS);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(48, Node.DIRECTIVES);
266:       assertEquals(37, Node.OPT_ARG_NAME);
267:       assertFalse(node1.equals((Object)node0));
268:       assertNotNull(node1);
269:       assertFalse(node1.isInstanceOf());
270:       assertFalse(node1.isAnd());
271:       assertFalse(node1.isThis());
272:       assertFalse(node1.isObjectLit());
273:       assertFalse(node1.isComma());
274:       assertFalse(node1.isNot());
275:       assertFalse(node1.isScript());
276:       assertFalse(node1.isGetProp());
277:       assertFalse(node1.isCast());
278:       assertFalse(node1.isThrow());
279:       assertFalse(node1.isFalse());
280:       assertEquals((-1), node1.getCharno());
281:       assertFalse(node1.isSwitch());
282:       assertFalse(node1.isLabelName());
283:       assertFalse(node1.isReturn());
284:       assertFalse(node1.isAssignAdd());
285:       assertFalse(node1.isOr());
286:       assertFalse(node1.isLabel());
287:       assertEquals((-1), node1.getSourcePosition());
288:       assertFalse(node1.hasChildren());
289:       assertFalse(node1.isEmpty());
290:       assertFalse(node1.isWhile());
291:       assertFalse(node1.isString());
292:       assertFalse(node1.isAdd());
293:       assertFalse(node1.isDo());
294:       assertTrue(node1.isNumber());
295:       assertFalse(node1.isNew());
296:       assertFalse(node1.isTrue());
297:       assertFalse(node1.isAssign());
298:       assertFalse(node1.isBreak());
299:       assertFalse(node1.isDec());
300:       assertFalse(node1.isNull());
301:       assertFalse(node1.isDelProp());
302:       assertFalse(node1.isTypeOf());
303:       assertFalse(node1.isVoid());
304:       assertFalse(node1.isCall());
305:       assertFalse(node1.isName());
306:       assertFalse(node1.isGetElem());
307:       assertFalse(node1.isExprResult());
308:       assertEquals(0, node1.getChildCount());
309:       assertFalse(node1.isCatch());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isSetterDef());
312:       assertFalse(node1.isTry());
313:       assertFalse(node1.isVar());
314:       assertFalse(node1.isStringKey());
315:       assertFalse(node1.isFunction());
316:       assertFalse(node1.isDebugger());
317:       assertFalse(node1.isParamList());
318:       assertFalse(node1.isArrayLit());
319:       assertFalse(node1.isIn());
320:       assertFalse(node1.hasMoreThanOneChild());
321:       assertFalse(node1.isContinue());
322:       assertEquals(39, node1.getType());
323:       assertFalse(node1.isGetterDef());
324:       assertFalse(node1.isInc());
325:       assertFalse(node1.isCase());
326:       assertFalse(node1.hasOneChild());
327:       assertFalse(node1.isHook());
328:       assertFalse(node1.isBlock());
329:       assertFalse(node1.isFor());
330:       assertFalse(node1.isIf());
331:       assertFalse(node1.isRegExp());
332:       assertFalse(node1.isWith());
333:       assertFalse(node1.isNE());
334:       assertEquals((-1), node1.getLineno());
335:       
336:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
337:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
338:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(29, Node.JSDOC_INFO_PROP);
341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
342:       assertEquals(37, Node.OPT_ARG_NAME);
343:       assertEquals(36, Node.QUOTED_PROP);
344:       assertEquals(43, Node.IS_CONSTANT_NAME);
345:       assertEquals(56, Node.CHANGE_TIME);
346:       assertEquals(46, Node.IS_NAMESPACE);
347:       assertEquals(55, Node.INFERRED_FUNCTION);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(30, Node.VAR_ARGS_NAME);
354:       assertEquals(57, Node.LAST_PROP);
355:       assertEquals(47, Node.IS_DISPATCHER);
356:       assertEquals(40, Node.ORIGINALNAME_PROP);
357:       assertEquals(50, Node.FREE_CALL);
358:       assertEquals(52, Node.LENGTH);
359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
360:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(57, Node.REFLECTED_OBJECT);
364:       assertEquals(54, Node.SLASH_V);
365:       assertEquals(4095, Node.COLUMN_MASK);
366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
367:       assertEquals(1, Node.DECR_FLAG);
368:       assertEquals(49, Node.DIRECT_EVAL);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertFalse(node0.equals((Object)node1));
374:       assertNotNull(node_FileLevelJsDocBuilder0);
375:       assertFalse(node0.isIn());
376:       assertFalse(node0.isCase());
377:       assertFalse(node0.isString());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isSwitch());
380:       assertFalse(node0.isGetterDef());
381:       assertFalse(node0.isDelProp());
382:       assertEquals(26, node0.getLineno());
383:       assertFalse(node0.isNE());
384:       assertFalse(node0.isArrayLit());
385:       assertFalse(node0.isFalse());
386:       assertFalse(node0.isInc());
387:       assertFalse(node0.isEmpty());
388:       assertFalse(node0.isDefaultCase());
389:       assertFalse(node0.isFunction());
390:       assertFalse(node0.isThrow());
391:       assertEquals(10, node0.getCharno());
392:       assertFalse(node0.isObjectLit());
393:       assertEquals(106506, node0.getSourcePosition());
394:       assertFalse(node0.isGetProp());
395:       assertFalse(node0.isNull());
396:       assertFalse(node0.isBreak());
397:       assertFalse(node0.isDebugger());
398:       assertFalse(node0.isVoid());
399:       assertFalse(node0.isNot());
400:       assertFalse(node0.isName());
401:       assertFalse(node0.isTrue());
402:       assertEquals(1945, node0.getType());
403:       assertFalse(node0.isAnd());
404:       assertFalse(node0.isGetElem());
405:       assertFalse(node0.isCall());
406:       assertFalse(node0.isExprResult());
407:       assertFalse(node0.isTypeOf());
408:       assertFalse(node0.hasChildren());
409:       assertFalse(node0.isComma());
410:       assertFalse(node0.isDec());
411:       assertFalse(node0.isAssign());
412:       assertFalse(node0.isReturn());
413:       assertFalse(node0.isWhile());
414:       assertFalse(node0.hasMoreThanOneChild());
415:       assertFalse(node0.isOr());
416:       assertFalse(node0.isContinue());
417:       assertFalse(node0.isNumber());
418:       assertFalse(node0.isLabelName());
419:       assertFalse(node0.isNew());
420:       assertFalse(node0.isAdd());
421:       assertFalse(node0.isCast());
422:       assertFalse(node0.isSetterDef());
423:       assertFalse(node0.isDo());
424:       assertFalse(node0.isAssignAdd());
425:       assertFalse(node0.isLabel());
426:       assertFalse(node0.isVar());
427:       assertEquals(0, node0.getChildCount());
428:       assertFalse(node0.isWith());
429:       assertFalse(node0.isCatch());
430:       assertFalse(node0.isInstanceOf());
431:       assertFalse(node0.isParamList());
432:       assertFalse(node0.isStringKey());
433:       assertFalse(node0.hasOneChild());
434:       assertFalse(node0.isHook());
435:       assertFalse(node0.isTry());
436:       assertFalse(node0.isRegExp());
437:       assertFalse(node0.isScript());
438:       assertFalse(node0.isBlock());
439:       assertFalse(node0.isFor());
440:       assertFalse(node0.isThis());
441:       
442:       node_FileLevelJsDocBuilder0.append("cV%Rns");
443:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertEquals(29, Node.JSDOC_INFO_PROP);
447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
448:       assertEquals(37, Node.OPT_ARG_NAME);
449:       assertEquals(36, Node.QUOTED_PROP);
450:       assertEquals(43, Node.IS_CONSTANT_NAME);
451:       assertEquals(56, Node.CHANGE_TIME);
452:       assertEquals(46, Node.IS_NAMESPACE);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
455:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
457:       assertEquals(39, Node.EMPTY_BLOCK);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(30, Node.VAR_ARGS_NAME);
460:       assertEquals(57, Node.LAST_PROP);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertEquals(50, Node.FREE_CALL);
464:       assertEquals(52, Node.LENGTH);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(48, Node.DIRECTIVES);
469:       assertEquals(57, Node.REFLECTED_OBJECT);
470:       assertEquals(54, Node.SLASH_V);
471:       assertEquals(4095, Node.COLUMN_MASK);
472:       assertEquals(51, Node.STATIC_SOURCE_FILE);
473:       assertEquals(1, Node.DECR_FLAG);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
478:       assertEquals(12, Node.COLUMN_BITS);
479:       assertFalse(node0.equals((Object)node1));
480:       assertFalse(node0.isIn());
481:       assertFalse(node0.isCase());
482:       assertFalse(node0.isString());
483:       assertFalse(node0.isIf());
484:       assertFalse(node0.isSwitch());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isDelProp());
487:       assertEquals(26, node0.getLineno());
488:       assertFalse(node0.isNE());
489:       assertFalse(node0.isArrayLit());
490:       assertFalse(node0.isFalse());
491:       assertFalse(node0.isInc());
492:       assertFalse(node0.isEmpty());
493:       assertFalse(node0.isDefaultCase());
494:       assertFalse(node0.isFunction());
495:       assertFalse(node0.isThrow());
496:       assertEquals(10, node0.getCharno());
497:       assertFalse(node0.isObjectLit());
498:       assertEquals(106506, node0.getSourcePosition());
499:       assertFalse(node0.isGetProp());
500:       assertFalse(node0.isNull());
501:       assertFalse(node0.isBreak());
502:       assertFalse(node0.isDebugger());
503:       assertFalse(node0.isVoid());
504:       assertFalse(node0.isNot());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isTrue());
507:       assertEquals(1945, node0.getType());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isGetElem());
510:       assertFalse(node0.isCall());
511:       assertFalse(node0.isExprResult());
512:       assertFalse(node0.isTypeOf());
513:       assertFalse(node0.hasChildren());
514:       assertFalse(node0.isComma());
515:       assertFalse(node0.isDec());
516:       assertFalse(node0.isAssign());
517:       assertFalse(node0.isReturn());
518:       assertFalse(node0.isWhile());
519:       assertFalse(node0.hasMoreThanOneChild());
520:       assertFalse(node0.isOr());
521:       assertFalse(node0.isContinue());
522:       assertFalse(node0.isNumber());
523:       assertFalse(node0.isLabelName());
524:       assertFalse(node0.isNew());
525:       assertFalse(node0.isAdd());
526:       assertFalse(node0.isCast());
527:       assertFalse(node0.isSetterDef());
528:       assertFalse(node0.isDo());
529:       assertFalse(node0.isAssignAdd());
530:       assertFalse(node0.isLabel());
531:       assertFalse(node0.isVar());
532:       assertEquals(0, node0.getChildCount());
533:       assertFalse(node0.isWith());
534:       assertFalse(node0.isCatch());
535:       assertFalse(node0.isInstanceOf());
536:       assertFalse(node0.isParamList());
537:       assertFalse(node0.isStringKey());
538:       assertFalse(node0.hasOneChild());
539:       assertFalse(node0.isHook());
540:       assertFalse(node0.isTry());
541:       assertFalse(node0.isRegExp());
542:       assertFalse(node0.isScript());
543:       assertFalse(node0.isBlock());
544:       assertFalse(node0.isFor());
545:       assertFalse(node0.isThis());
546:       
547:       boolean boolean0 = node0.isScript();
548:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(29, Node.JSDOC_INFO_PROP);
552:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
553:       assertEquals(37, Node.OPT_ARG_NAME);
554:       assertEquals(36, Node.QUOTED_PROP);
555:       assertEquals(43, Node.IS_CONSTANT_NAME);
556:       assertEquals(56, Node.CHANGE_TIME);
557:       assertEquals(46, Node.IS_NAMESPACE);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
562:       assertEquals(39, Node.EMPTY_BLOCK);
563:       assertEquals(2, Node.POST_FLAG);
564:       assertEquals(30, Node.VAR_ARGS_NAME);
565:       assertEquals(57, Node.LAST_PROP);
566:       assertEquals(47, Node.IS_DISPATCHER);
567:       assertEquals(40, Node.ORIGINALNAME_PROP);
568:       assertEquals(50, Node.FREE_CALL);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(57, Node.REFLECTED_OBJECT);
575:       assertEquals(54, Node.SLASH_V);
576:       assertEquals(4095, Node.COLUMN_MASK);
577:       assertEquals(51, Node.STATIC_SOURCE_FILE);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(49, Node.DIRECT_EVAL);
580:       assertEquals(32, Node.INCRDECR_PROP);
581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertFalse(boolean0);
585:       assertFalse(node0.equals((Object)node1));
586:       assertFalse(node0.isIn());
587:       assertFalse(node0.isCase());
588:       assertFalse(node0.isString());
589:       assertFalse(node0.isIf());
590:       assertFalse(node0.isSwitch());
591:       assertFalse(node0.isGetterDef());
592:       assertFalse(node0.isDelProp());
593:       assertEquals(26, node0.getLineno());
594:       assertFalse(node0.isNE());
595:       assertFalse(node0.isArrayLit());
596:       assertFalse(node0.isFalse());
597:       assertFalse(node0.isInc());
598:       assertFalse(node0.isEmpty());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isFunction());
601:       assertFalse(node0.isThrow());
602:       assertEquals(10, node0.getCharno());
603:       assertFalse(node0.isObjectLit());
604:       assertEquals(106506, node0.getSourcePosition());
605:       assertFalse(node0.isGetProp());
606:       assertFalse(node0.isNull());
607:       assertFalse(node0.isBreak());
608:       assertFalse(node0.isDebugger());
609:       assertFalse(node0.isVoid());
610:       assertFalse(node0.isNot());
611:       assertFalse(node0.isName());
612:       assertFalse(node0.isTrue());
613:       assertEquals(1945, node0.getType());
614:       assertFalse(node0.isAnd());
615:       assertFalse(node0.isGetElem());
616:       assertFalse(node0.isCall());
617:       assertFalse(node0.isExprResult());
618:       assertFalse(node0.isTypeOf());
619:       assertFalse(node0.hasChildren());
620:       assertFalse(node0.isComma());
621:       assertFalse(node0.isDec());
622:       assertFalse(node0.isAssign());
623:       assertFalse(node0.isReturn());
624:       assertFalse(node0.isWhile());
625:       assertFalse(node0.hasMoreThanOneChild());
626:       assertFalse(node0.isOr());
627:       assertFalse(node0.isContinue());
628:       assertFalse(node0.isNumber());
629:       assertFalse(node0.isLabelName());
630:       assertFalse(node0.isNew());
631:       assertFalse(node0.isAdd());
632:       assertFalse(node0.isCast());
633:       assertFalse(node0.isSetterDef());
634:       assertFalse(node0.isDo());
635:       assertFalse(node0.isAssignAdd());
636:       assertFalse(node0.isLabel());
637:       assertFalse(node0.isVar());
638:       assertEquals(0, node0.getChildCount());
639:       assertFalse(node0.isWith());
640:       assertFalse(node0.isCatch());
641:       assertFalse(node0.isInstanceOf());
642:       assertFalse(node0.isParamList());
643:       assertFalse(node0.isStringKey());
644:       assertFalse(node0.hasOneChild());
645:       assertFalse(node0.isHook());
646:       assertFalse(node0.isTry());
647:       assertFalse(node0.isRegExp());
648:       assertFalse(node0.isScript());
649:       assertFalse(node0.isBlock());
650:       assertFalse(node0.isFor());
651:       assertFalse(node0.isThis());
652:       
653:       Iterable<Node> iterable0 = node1.children();
654:       assertEquals(40, Node.ORIGINALNAME_PROP);
655:       assertEquals(57, Node.REFLECTED_OBJECT);
656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
657:       assertEquals(50, Node.FREE_CALL);
658:       assertEquals(52, Node.LENGTH);
659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
661:       assertEquals(8, Node.FLAG_NO_THROWS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(57, Node.LAST_PROP);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(46, Node.IS_NAMESPACE);
667:       assertEquals(30, Node.VAR_ARGS_NAME);
668:       assertEquals(51, Node.STATIC_SOURCE_FILE);
669:       assertEquals(2, Node.POST_FLAG);
670:       assertEquals(54, Node.SLASH_V);
671:       assertEquals(43, Node.IS_CONSTANT_NAME);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
674:       assertEquals(47, Node.IS_DISPATCHER);
675:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
676:       assertEquals(29, Node.JSDOC_INFO_PROP);
677:       assertEquals(53, Node.INPUT_ID);
678:       assertEquals(32, Node.INCRDECR_PROP);
679:       assertEquals(12, Node.COLUMN_BITS);
680:       assertEquals(4095, Node.COLUMN_MASK);
681:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
682:       assertEquals(55, Node.INFERRED_FUNCTION);
683:       assertEquals(36, Node.QUOTED_PROP);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(56, Node.CHANGE_TIME);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(48, Node.DIRECTIVES);
689:       assertEquals(37, Node.OPT_ARG_NAME);
690:       assertFalse(node1.equals((Object)node0));
691:       assertFalse(iterable0.contains(node0));
692:       assertNotNull(iterable0);
693:       assertFalse(node1.isInstanceOf());
694:       assertFalse(node1.isAnd());
695:       assertFalse(node1.isThis());
696:       assertFalse(node1.isObjectLit());
697:       assertFalse(node1.isComma());
698:       assertFalse(node1.isNot());
699:       assertFalse(node1.isScript());
700:       assertFalse(node1.isGetProp());
701:       assertFalse(node1.isCast());
702:       assertFalse(node1.isThrow());
703:       assertFalse(node1.isFalse());
704:       assertEquals((-1), node1.getCharno());
705:       assertFalse(node1.isSwitch());
706:       assertFalse(node1.isLabelName());
707:       assertFalse(node1.isReturn());
708:       assertFalse(node1.isAssignAdd());
709:       assertFalse(node1.isOr());
710:       assertFalse(node1.isLabel());
711:       assertEquals((-1), node1.getSourcePosition());
712:       assertFalse(node1.hasChildren());
713:       assertFalse(node1.isEmpty());
714:       assertFalse(node1.isWhile());
715:       assertFalse(node1.isString());
716:       assertFalse(node1.isAdd());
717:       assertFalse(node1.isDo());
718:       assertTrue(node1.isNumber());
719:       assertFalse(node1.isNew());
720:       assertFalse(node1.isTrue());
721:       assertFalse(node1.isAssign());
722:       assertFalse(node1.isBreak());
723:       assertFalse(node1.isDec());
724:       assertFalse(node1.isNull());
725:       assertFalse(node1.isDelProp());
726:       assertFalse(node1.isTypeOf());
727:       assertFalse(node1.isVoid());
728:       assertFalse(node1.isCall());
729:       assertFalse(node1.isName());
730:       assertFalse(node1.isGetElem());
731:       assertFalse(node1.isExprResult());
732:       assertEquals(0, node1.getChildCount());
733:       assertFalse(node1.isCatch());
734:       assertFalse(node1.isDefaultCase());
735:       assertFalse(node1.isSetterDef());
736:       assertFalse(node1.isTry());
737:       assertFalse(node1.isVar());
738:       assertFalse(node1.isStringKey());
739:       assertFalse(node1.isFunction());
740:       assertFalse(node1.isDebugger());
741:       assertFalse(node1.isParamList());
742:       assertFalse(node1.isArrayLit());
743:       assertFalse(node1.isIn());
744:       assertFalse(node1.hasMoreThanOneChild());
745:       assertFalse(node1.isContinue());
746:       assertEquals(39, node1.getType());
747:       assertFalse(node1.isGetterDef());
748:       assertFalse(node1.isInc());
749:       assertFalse(node1.isCase());
750:       assertFalse(node1.hasOneChild());
751:       assertFalse(node1.isHook());
752:       assertFalse(node1.isBlock());
753:       assertFalse(node1.isFor());
754:       assertFalse(node1.isIf());
755:       assertFalse(node1.isRegExp());
756:       assertFalse(node1.isWith());
757:       assertFalse(node1.isNE());
758:       assertEquals((-1), node1.getLineno());
759:       
760:       Object object0 = node0.getProp(10);
761:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
762:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
763:       assertEquals(53, Node.INPUT_ID);
764:       assertEquals(29, Node.JSDOC_INFO_PROP);
765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
766:       assertEquals(37, Node.OPT_ARG_NAME);
767:       assertEquals(36, Node.QUOTED_PROP);
768:       assertEquals(43, Node.IS_CONSTANT_NAME);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(46, Node.IS_NAMESPACE);
771:       assertEquals(55, Node.INFERRED_FUNCTION);
772:       assertEquals(15, Node.NO_SIDE_EFFECTS);
773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
775:       assertEquals(39, Node.EMPTY_BLOCK);
776:       assertEquals(2, Node.POST_FLAG);
777:       assertEquals(30, Node.VAR_ARGS_NAME);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(40, Node.ORIGINALNAME_PROP);
781:       assertEquals(50, Node.FREE_CALL);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
785:       assertEquals(8, Node.FLAG_NO_THROWS);
786:       assertEquals(48, Node.DIRECTIVES);
787:       assertEquals(57, Node.REFLECTED_OBJECT);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(4095, Node.COLUMN_MASK);
790:       assertEquals(51, Node.STATIC_SOURCE_FILE);
791:       assertEquals(1, Node.DECR_FLAG);
792:       assertEquals(49, Node.DIRECT_EVAL);
793:       assertEquals(32, Node.INCRDECR_PROP);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertFalse(node0.equals((Object)node1));
798:       assertNull(object0);
799:       assertFalse(node0.isIn());
800:       assertFalse(node0.isCase());
801:       assertFalse(node0.isString());
802:       assertFalse(node0.isIf());
803:       assertFalse(node0.isSwitch());
804:       assertFalse(node0.isGetterDef());
805:       assertFalse(node0.isDelProp());
806:       assertEquals(26, node0.getLineno());
807:       assertFalse(node0.isNE());
808:       assertFalse(node0.isArrayLit());
809:       assertFalse(node0.isFalse());
810:       assertFalse(node0.isInc());
811:       assertFalse(node0.isEmpty());
812:       assertFalse(node0.isDefaultCase());
813:       assertFalse(node0.isFunction());
814:       assertFalse(node0.isThrow());
815:       assertEquals(10, node0.getCharno());
816:       assertFalse(node0.isObjectLit());
817:       assertEquals(106506, node0.getSourcePosition());
818:       assertFalse(node0.isGetProp());
819:       assertFalse(node0.isNull());
820:       assertFalse(node0.isBreak());
821:       assertFalse(node0.isDebugger());
822:       assertFalse(node0.isVoid());
823:       assertFalse(node0.isNot());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isTrue());
826:       assertEquals(1945, node0.getType());
827:       assertFalse(node0.isAnd());
828:       assertFalse(node0.isGetElem());
829:       assertFalse(node0.isCall());
830:       assertFalse(node0.isExprResult());
831:       assertFalse(node0.isTypeOf());
832:       assertFalse(node0.hasChildren());
833:       assertFalse(node0.isComma());
834:       assertFalse(node0.isDec());
835:       assertFalse(node0.isAssign());
836:       assertFalse(node0.isReturn());
837:       assertFalse(node0.isWhile());
838:       assertFalse(node0.hasMoreThanOneChild());
839:       assertFalse(node0.isOr());
840:       assertFalse(node0.isContinue());
841:       assertFalse(node0.isNumber());
842:       assertFalse(node0.isLabelName());
843:       assertFalse(node0.isNew());
844:       assertFalse(node0.isAdd());
845:       assertFalse(node0.isCast());
846:       assertFalse(node0.isSetterDef());
847:       assertFalse(node0.isDo());
848:       assertFalse(node0.isAssignAdd());
849:       assertFalse(node0.isLabel());
850:       assertFalse(node0.isVar());
851:       assertEquals(0, node0.getChildCount());
852:       assertFalse(node0.isWith());
853:       assertFalse(node0.isCatch());
854:       assertFalse(node0.isInstanceOf());
855:       assertFalse(node0.isParamList());
856:       assertFalse(node0.isStringKey());
857:       assertFalse(node0.hasOneChild());
858:       assertFalse(node0.isHook());
859:       assertFalse(node0.isTry());
860:       assertFalse(node0.isRegExp());
861:       assertFalse(node0.isScript());
862:       assertFalse(node0.isBlock());
863:       assertFalse(node0.isFor());
864:       assertFalse(node0.isThis());
865:       
866:       Node node2 = node0.srcrefTree(node1);
867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(53, Node.INPUT_ID);
870:       assertEquals(29, Node.JSDOC_INFO_PROP);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(36, Node.QUOTED_PROP);
874:       assertEquals(43, Node.IS_CONSTANT_NAME);
875:       assertEquals(56, Node.CHANGE_TIME);
876:       assertEquals(46, Node.IS_NAMESPACE);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(15, Node.NO_SIDE_EFFECTS);
879:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
880:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
881:       assertEquals(39, Node.EMPTY_BLOCK);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(30, Node.VAR_ARGS_NAME);
884:       assertEquals(57, Node.LAST_PROP);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertEquals(40, Node.ORIGINALNAME_PROP);
887:       assertEquals(50, Node.FREE_CALL);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
891:       assertEquals(8, Node.FLAG_NO_THROWS);
892:       assertEquals(48, Node.DIRECTIVES);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(54, Node.SLASH_V);
895:       assertEquals(4095, Node.COLUMN_MASK);
896:       assertEquals(51, Node.STATIC_SOURCE_FILE);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(49, Node.DIRECT_EVAL);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(40, Node.ORIGINALNAME_PROP);
904:       assertEquals(57, Node.REFLECTED_OBJECT);
905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
906:       assertEquals(50, Node.FREE_CALL);
907:       assertEquals(52, Node.LENGTH);
908:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
909:       assertEquals(15, Node.NO_SIDE_EFFECTS);
910:       assertEquals(8, Node.FLAG_NO_THROWS);
911:       assertEquals(39, Node.EMPTY_BLOCK);
912:       assertEquals(57, Node.LAST_PROP);
913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
914:       assertEquals(1, Node.DECR_FLAG);
915:       assertEquals(46, Node.IS_NAMESPACE);
916:       assertEquals(30, Node.VAR_ARGS_NAME);
917:       assertEquals(51, Node.STATIC_SOURCE_FILE);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(54, Node.SLASH_V);
920:       assertEquals(43, Node.IS_CONSTANT_NAME);
921:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
922:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
923:       assertEquals(47, Node.IS_DISPATCHER);
924:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
925:       assertEquals(29, Node.JSDOC_INFO_PROP);
926:       assertEquals(53, Node.INPUT_ID);
927:       assertEquals(32, Node.INCRDECR_PROP);
928:       assertEquals(12, Node.COLUMN_BITS);
929:       assertEquals(4095, Node.COLUMN_MASK);
930:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
931:       assertEquals(55, Node.INFERRED_FUNCTION);
932:       assertEquals(36, Node.QUOTED_PROP);
933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
935:       assertEquals(56, Node.CHANGE_TIME);
936:       assertEquals(49, Node.DIRECT_EVAL);
937:       assertEquals(48, Node.DIRECTIVES);
938:       assertEquals(37, Node.OPT_ARG_NAME);
939:       assertEquals(29, Node.JSDOC_INFO_PROP);
940:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
941:       assertEquals(56, Node.CHANGE_TIME);
942:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
943:       assertEquals(37, Node.OPT_ARG_NAME);
944:       assertEquals(53, Node.INPUT_ID);
945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
946:       assertEquals(46, Node.IS_NAMESPACE);
947:       assertEquals(36, Node.QUOTED_PROP);
948:       assertEquals(51, Node.STATIC_SOURCE_FILE);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(43, Node.IS_CONSTANT_NAME);
952:       assertEquals(15, Node.NO_SIDE_EFFECTS);
953:       assertEquals(57, Node.LAST_PROP);
954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
955:       assertEquals(2, Node.POST_FLAG);
956:       assertEquals(47, Node.IS_DISPATCHER);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
962:       assertEquals(39, Node.EMPTY_BLOCK);
963:       assertEquals(48, Node.DIRECTIVES);
964:       assertEquals(52, Node.LENGTH);
965:       assertEquals(54, Node.SLASH_V);
966:       assertEquals(8, Node.FLAG_NO_THROWS);
967:       assertEquals(57, Node.REFLECTED_OBJECT);
968:       assertEquals(49, Node.DIRECT_EVAL);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
972:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
973:       assertEquals(12, Node.COLUMN_BITS);
974:       assertEquals(4095, Node.COLUMN_MASK);
975:       assertFalse(node0.equals((Object)node1));
976:       assertFalse(node1.equals((Object)node0));
977:       assertFalse(node2.equals((Object)node1));
978:       assertNotNull(node2);
979:       assertFalse(node0.isIn());
980:       assertFalse(node0.isCase());
981:       assertFalse(node0.isString());
982:       assertFalse(node0.isIf());
983:       assertFalse(node0.isSwitch());
984:       assertFalse(node0.isGetterDef());
985:       assertFalse(node0.isDelProp());
986:       assertEquals((-1), node0.getCharno());
987:       assertFalse(node0.isNE());
988:       assertFalse(node0.isArrayLit());
989:       assertFalse(node0.isFalse());
990:       assertFalse(node0.isInc());
991:       assertFalse(node0.isEmpty());
992:       assertFalse(node0.isDefaultCase());
993:       assertFalse(node0.isFunction());
994:       assertFalse(node0.isThrow());
995:       assertFalse(node0.isObjectLit());
996:       assertFalse(node0.isGetProp());
997:       assertFalse(node0.isNull());
998:       assertFalse(node0.isBreak());
999:       assertFalse(node0.isDebugger());
1000:       assertFalse(node0.isVoid());
1001:       assertFalse(node0.isNot());
1002:       assertFalse(node0.isName());
1003:       assertFalse(node0.isTrue());
1004:       assertEquals(1945, node0.getType());
1005:       assertFalse(node0.isAnd());
1006:       assertFalse(node0.isGetElem());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isExprResult());
1009:       assertFalse(node0.isTypeOf());
1010:       assertFalse(node0.hasChildren());
1011:       assertFalse(node0.isComma());
1012:       assertFalse(node0.isDec());
1013:       assertFalse(node0.isAssign());
1014:       assertFalse(node0.isReturn());
1015:       assertFalse(node0.isWhile());
1016:       assertFalse(node0.hasMoreThanOneChild());
1017:       assertEquals((-1), node0.getLineno());
1018:       assertFalse(node0.isOr());
1019:       assertFalse(node0.isContinue());
1020:       assertEquals((-1), node0.getSourcePosition());
1021:       assertFalse(node0.isNumber());
1022:       assertFalse(node0.isLabelName());
1023:       assertFalse(node0.isNew());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isCast());
1026:       assertFalse(node0.isSetterDef());
1027:       assertFalse(node0.isDo());
1028:       assertFalse(node0.isAssignAdd());
1029:       assertFalse(node0.isLabel());
1030:       assertFalse(node0.isVar());
1031:       assertEquals(0, node0.getChildCount());
1032:       assertFalse(node0.isWith());
1033:       assertFalse(node0.isCatch());
1034:       assertFalse(node0.isInstanceOf());
1035:       assertFalse(node0.isParamList());
1036:       assertFalse(node0.isStringKey());
1037:       assertFalse(node0.hasOneChild());
1038:       assertFalse(node0.isHook());
1039:       assertFalse(node0.isTry());
1040:       assertFalse(node0.isRegExp());
1041:       assertFalse(node0.isScript());
1042:       assertFalse(node0.isBlock());
1043:       assertFalse(node0.isFor());
1044:       assertFalse(node0.isThis());
1045:       assertFalse(node1.isInstanceOf());
1046:       assertFalse(node1.isAnd());
1047:       assertFalse(node1.isThis());
1048:       assertFalse(node1.isObjectLit());
1049:       assertFalse(node1.isComma());
1050:       assertFalse(node1.isNot());
1051:       assertFalse(node1.isScript());
1052:       assertFalse(node1.isGetProp());
1053:       assertFalse(node1.isCast());
1054:       assertFalse(node1.isThrow());
1055:       assertFalse(node1.isFalse());
1056:       assertEquals((-1), node1.getCharno());
1057:       assertFalse(node1.isSwitch());
1058:       assertFalse(node1.isLabelName());
1059:       assertFalse(node1.isReturn());
1060:       assertFalse(node1.isAssignAdd());
1061:       assertFalse(node1.isOr());
1062:       assertFalse(node1.isLabel());
1063:       assertEquals((-1), node1.getSourcePosition());
1064:       assertFalse(node1.hasChildren());
1065:       assertFalse(node1.isEmpty());
1066:       assertFalse(node1.isWhile());
1067:       assertFalse(node1.isString());
1068:       assertFalse(node1.isAdd());
1069:       assertFalse(node1.isDo());
1070:       assertTrue(node1.isNumber());
1071:       assertFalse(node1.isNew());
1072:       assertFalse(node1.isTrue());
1073:       assertFalse(node1.isAssign());
1074:       assertFalse(node1.isBreak());
1075:       assertFalse(node1.isDec());
1076:       assertFalse(node1.isNull());
1077:       assertFalse(node1.isDelProp());
1078:       assertFalse(node1.isTypeOf());
1079:       assertFalse(node1.isVoid());
1080:       assertFalse(node1.isCall());
1081:       assertFalse(node1.isName());
1082:       assertFalse(node1.isGetElem());
1083:       assertFalse(node1.isExprResult());
1084:       assertEquals(0, node1.getChildCount());
1085:       assertFalse(node1.isCatch());
1086:       assertFalse(node1.isDefaultCase());
1087:       assertFalse(node1.isSetterDef());
1088:       assertFalse(node1.isTry());
1089:       assertFalse(node1.isVar());
1090:       assertFalse(node1.isStringKey());
1091:       assertFalse(node1.isFunction());
1092:       assertFalse(node1.isDebugger());
1093:       assertFalse(node1.isParamList());
1094:       assertFalse(node1.isArrayLit());
1095:       assertFalse(node1.isIn());
1096:       assertFalse(node1.hasMoreThanOneChild());
1097:       assertFalse(node1.isContinue());
1098:       assertEquals(39, node1.getType());
1099:       assertFalse(node1.isGetterDef());
1100:       assertFalse(node1.isInc());
1101:       assertFalse(node1.isCase());
1102:       assertFalse(node1.hasOneChild());
1103:       assertFalse(node1.isHook());
1104:       assertFalse(node1.isBlock());
1105:       assertFalse(node1.isFor());
1106:       assertFalse(node1.isIf());
1107:       assertFalse(node1.isRegExp());
1108:       assertFalse(node1.isWith());
1109:       assertFalse(node1.isNE());
1110:       assertEquals((-1), node1.getLineno());
1111:       assertFalse(node2.isString());
1112:       assertFalse(node2.isCase());
1113:       assertEquals((-1), node2.getCharno());
1114:       assertFalse(node2.isInc());
1115:       assertFalse(node2.isSwitch());
1116:       assertFalse(node2.isNE());
1117:       assertFalse(node2.isGetterDef());
1118:       assertFalse(node2.isIn());
1119:       assertFalse(node2.isThrow());
1120:       assertFalse(node2.isFalse());
1121:       assertFalse(node2.isEmpty());
1122:       assertFalse(node2.isArrayLit());
1123:       assertFalse(node2.isFunction());
1124:       assertFalse(node2.isCatch());
1125:       assertFalse(node2.isWith());
1126:       assertFalse(node2.isInstanceOf());
1127:       assertFalse(node2.isSetterDef());
1128:       assertFalse(node2.isScript());
1129:       assertFalse(node2.isParamList());
1130:       assertFalse(node2.isFor());
1131:       assertFalse(node2.isIf());
1132:       assertFalse(node2.isTry());
1133:       assertFalse(node2.hasOneChild());
1134:       assertFalse(node2.isBlock());
1135:       assertFalse(node2.isThis());
1136:       assertFalse(node2.isRegExp());
1137:       assertFalse(node2.isHook());
1138:       assertFalse(node2.isContinue());
1139:       assertFalse(node2.hasMoreThanOneChild());
1140:       assertFalse(node2.isWhile());
1141:       assertFalse(node2.isDo());
1142:       assertEquals((-1), node2.getLineno());
1143:       assertFalse(node2.isAdd());
1144:       assertFalse(node2.isNumber());
1145:       assertFalse(node2.isOr());
1146:       assertEquals((-1), node2.getSourcePosition());
1147:       assertFalse(node2.isVar());
1148:       assertFalse(node2.isCast());
1149:       assertFalse(node2.isStringKey());
1150:       assertFalse(node2.isLabelName());
1151:       assertFalse(node2.isNew());
1152:       assertFalse(node2.isAssignAdd());
1153:       assertEquals(0, node2.getChildCount());
1154:       assertFalse(node2.isLabel());
1155:       assertFalse(node2.isAnd());
1156:       assertFalse(node2.isObjectLit());
1157:       assertFalse(node2.isDefaultCase());
1158:       assertFalse(node2.isVoid());
1159:       assertFalse(node2.isGetProp());
1160:       assertFalse(node2.isTrue());
1161:       assertFalse(node2.isNull());
1162:       assertFalse(node2.isNot());
1163:       assertFalse(node2.isDebugger());
1164:       assertFalse(node2.isCall());
1165:       assertFalse(node2.isName());
1166:       assertEquals(1945, node2.getType());
1167:       assertFalse(node2.isGetElem());
1168:       assertFalse(node2.isBreak());
1169:       assertFalse(node2.isDelProp());
1170:       assertFalse(node2.isExprResult());
1171:       assertFalse(node2.hasChildren());
1172:       assertFalse(node2.isReturn());
1173:       assertFalse(node2.isTypeOf());
1174:       assertFalse(node2.isAssign());
1175:       assertFalse(node2.isComma());
1176:       assertFalse(node2.isDec());
1177:       assertSame(node0, node2);
1178:       assertSame(node2, node0);
1179:       
1180:       boolean boolean1 = node1.isThrow();
1181:       assertEquals(40, Node.ORIGINALNAME_PROP);
1182:       assertEquals(57, Node.REFLECTED_OBJECT);
1183:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1184:       assertEquals(50, Node.FREE_CALL);
1185:       assertEquals(52, Node.LENGTH);
1186:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1188:       assertEquals(8, Node.FLAG_NO_THROWS);
1189:       assertEquals(39, Node.EMPTY_BLOCK);
1190:       assertEquals(57, Node.LAST_PROP);
1191:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1192:       assertEquals(1, Node.DECR_FLAG);
1193:       assertEquals(46, Node.IS_NAMESPACE);
1194:       assertEquals(30, Node.VAR_ARGS_NAME);
1195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1196:       assertEquals(2, Node.POST_FLAG);
1197:       assertEquals(54, Node.SLASH_V);
1198:       assertEquals(43, Node.IS_CONSTANT_NAME);
1199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1200:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1201:       assertEquals(47, Node.IS_DISPATCHER);
1202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1203:       assertEquals(29, Node.JSDOC_INFO_PROP);
1204:       assertEquals(53, Node.INPUT_ID);
1205:       assertEquals(32, Node.INCRDECR_PROP);
1206:       assertEquals(12, Node.COLUMN_BITS);
1207:       assertEquals(4095, Node.COLUMN_MASK);
1208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1209:       assertEquals(55, Node.INFERRED_FUNCTION);
1210:       assertEquals(36, Node.QUOTED_PROP);
1211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1213:       assertEquals(56, Node.CHANGE_TIME);
1214:       assertEquals(49, Node.DIRECT_EVAL);
1215:       assertEquals(48, Node.DIRECTIVES);
1216:       assertEquals(37, Node.OPT_ARG_NAME);
1217:       assertFalse(boolean1);
1218:       assertFalse(node1.equals((Object)node2));
1219:       assertFalse(node1.equals((Object)node0));
1220:       assertTrue(boolean1 == boolean0);
1221:       assertFalse(node1.isInstanceOf());
1222:       assertFalse(node1.isAnd());
1223:       assertFalse(node1.isThis());
1224:       assertFalse(node1.isObjectLit());
1225:       assertFalse(node1.isComma());
1226:       assertFalse(node1.isNot());
1227:       assertFalse(node1.isScript());
1228:       assertFalse(node1.isGetProp());
1229:       assertFalse(node1.isCast());
1230:       assertFalse(node1.isThrow());
1231:       assertFalse(node1.isFalse());
1232:       assertEquals((-1), node1.getCharno());
1233:       assertFalse(node1.isSwitch());
1234:       assertFalse(node1.isLabelName());
1235:       assertFalse(node1.isReturn());
1236:       assertFalse(node1.isAssignAdd());
1237:       assertFalse(node1.isOr());
1238:       assertFalse(node1.isLabel());
1239:       assertEquals((-1), node1.getSourcePosition());
1240:       assertFalse(node1.hasChildren());
1241:       assertFalse(node1.isEmpty());
1242:       assertFalse(node1.isWhile());
1243:       assertFalse(node1.isString());
1244:       assertFalse(node1.isAdd());
1245:       assertFalse(node1.isDo());
1246:       assertTrue(node1.isNumber());
1247:       assertFalse(node1.isNew());
1248:       assertFalse(node1.isTrue());
1249:       assertFalse(node1.isAssign());
1250:       assertFalse(node1.isBreak());
1251:       assertFalse(node1.isDec());
1252:       assertFalse(node1.isNull());
1253:       assertFalse(node1.isDelProp());
1254:       assertFalse(node1.isTypeOf());
1255:       assertFalse(node1.isVoid());
1256:       assertFalse(node1.isCall());
1257:       assertFalse(node1.isName());
1258:       assertFalse(node1.isGetElem());
1259:       assertFalse(node1.isExprResult());
1260:       assertEquals(0, node1.getChildCount());
1261:       assertFalse(node1.isCatch());
1262:       assertFalse(node1.isDefaultCase());
1263:       assertFalse(node1.isSetterDef());
1264:       assertFalse(node1.isTry());
1265:       assertFalse(node1.isVar());
1266:       assertFalse(node1.isStringKey());
1267:       assertFalse(node1.isFunction());
1268:       assertFalse(node1.isDebugger());
1269:       assertFalse(node1.isParamList());
1270:       assertFalse(node1.isArrayLit());
1271:       assertFalse(node1.isIn());
1272:       assertFalse(node1.hasMoreThanOneChild());
1273:       assertFalse(node1.isContinue());
1274:       assertEquals(39, node1.getType());
1275:       assertFalse(node1.isGetterDef());
1276:       assertFalse(node1.isInc());
1277:       assertFalse(node1.isCase());
1278:       assertFalse(node1.hasOneChild());
1279:       assertFalse(node1.isHook());
1280:       assertFalse(node1.isBlock());
1281:       assertFalse(node1.isFor());
1282:       assertFalse(node1.isIf());
1283:       assertFalse(node1.isRegExp());
1284:       assertFalse(node1.isWith());
1285:       assertFalse(node1.isNE());
1286:       assertEquals((-1), node1.getLineno());
1287:   }
1288: }
RegularFileObject[/tmp/EvoSuite_27_1605714113376/com/google/javascript/rhino/Node_27_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:53 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_27_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_27_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.common.collect.Iterators$12",
123:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
124:       "com.google.common.collect.Iterators$11",
125:       "com.google.javascript.rhino.jstype.JSType$1",
126:       "com.google.common.collect.EmptyImmutableBiMap",
127:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
128:       "com.google.common.base.Predicate",
129:       "com.google.javascript.rhino.jstype.VoidType",
130:       "com.google.common.base.Joiner",
131:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
132:       "com.google.common.collect.AbstractListMultimap",
133:       "com.google.javascript.rhino.jstype.JSType",
134:       "com.google.common.collect.ImmutableAsList",
135:       "com.google.javascript.rhino.Node$StringNode",
136:       "com.google.javascript.rhino.jstype.ProxyObjectType",
137:       "com.google.common.collect.Sets$SetView",
138:       "com.google.common.collect.RegularImmutableAsList",
139:       "com.google.javascript.rhino.jstype.TemplateType",
140:       "com.google.javascript.rhino.jstype.NamedType",
141:       "com.google.common.collect.Iterators$13",
142:       "com.google.javascript.rhino.InputId",
143:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
144:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
145:       "com.google.common.collect.AbstractMapBasedMultimap",
146:       "com.google.common.collect.Lists$Partition",
147:       "com.google.common.collect.Lists",
148:       "com.google.javascript.rhino.Node$SideEffectFlags",
149:       "com.google.common.collect.UnmodifiableListIterator",
150:       "com.google.javascript.rhino.jstype.NullType",
151:       "com.google.common.collect.Lists$TransformingSequentialList",
152:       "com.google.javascript.rhino.ErrorReporter",
153:       "com.google.javascript.rhino.jstype.UnknownType",
154:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
155:       "com.google.javascript.rhino.jstype.ValueType",
156:       "com.google.javascript.rhino.jstype.PropertyMap",
157:       "com.google.javascript.rhino.Token",
158:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
159:       "com.google.common.collect.ObjectArrays",
160:       "com.google.javascript.rhino.jstype.StaticSourceFile",
161:       "com.google.javascript.rhino.jstype.BooleanType",
162:       "com.google.javascript.rhino.jstype.NoObjectType",
163:       "com.google.common.collect.AbstractIterator",
164:       "com.google.javascript.rhino.jstype.FunctionBuilder",
165:       "com.google.javascript.rhino.jstype.JSType$TypePair",
166:       "com.google.common.base.Joiner$MapJoiner",
167:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
168:       "com.google.common.collect.ImmutableList$1",
169:       "com.google.common.collect.MapDifference",
170:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
171:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
172:       "com.google.common.collect.Sets$ImprovedAbstractSet",
173:       "com.google.javascript.rhino.jstype.FunctionType",
174:       "com.google.common.base.Preconditions",
175:       "com.google.common.collect.UnmodifiableIterator",
176:       "com.google.javascript.rhino.JSDocInfo",
177:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
178:       "com.google.javascript.rhino.jstype.Property",
179:       "com.google.common.collect.ImmutableMapValues",
180:       "com.google.common.collect.ImmutableEntry",
181:       "com.google.common.base.Joiner$1",
182:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
183:       "com.google.common.base.Joiner$2",
184:       "com.google.common.collect.ImmutableCollection",
185:       "com.google.common.collect.ImmutableEnumMap",
186:       "com.google.javascript.rhino.jstype.TernaryValue",
187:       "com.google.javascript.rhino.Node$AncestorIterable",
188:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
189:       "com.google.common.collect.Lists$RandomAccessListWrapper",
190:       "com.google.common.collect.ImmutableEnumSet",
191:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
192:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
193:       "com.google.javascript.rhino.jstype.EnumElementType",
194:       "com.google.javascript.rhino.jstype.UnionType",
195:       "com.google.common.base.Objects",
196:       "com.google.javascript.rhino.Node$NumberNode",
197:       "com.google.common.collect.SingletonImmutableList",
198:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
199:       "com.google.common.collect.ImmutableCollection$Builder",
200:       "com.google.javascript.rhino.jstype.StaticSlot",
201:       "com.google.common.collect.Iterators$6",
202:       "com.google.common.collect.BiMap",
203:       "com.google.common.collect.Iterators$7",
204:       "com.google.common.collect.AbstractSetMultimap",
205:       "com.google.common.base.Function",
206:       "com.google.common.collect.ImmutableSet",
207:       "com.google.common.collect.Lists$AbstractListWrapper",
208:       "com.google.common.collect.ImmutableMap",
209:       "com.google.common.collect.AbstractIndexedListIterator",
210:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
211:       "com.google.common.collect.Maps$1",
212:       "com.google.javascript.rhino.jstype.EnumType",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
234:       "com.google.common.collect.ImmutableList",
235:       "com.google.common.collect.SingletonImmutableBiMap",
236:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
237:       "com.google.javascript.rhino.jstype.StringType",
238:       "com.google.javascript.rhino.Node$AbstractPropListItem",
239:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
240:       "com.google.javascript.rhino.jstype.TemplatizedType",
241:       "com.google.javascript.rhino.jstype.Visitor",
242:       "com.google.javascript.rhino.jstype.NoResolvedType",
243:       "com.google.javascript.rhino.jstype.JSTypeNative",
244:       "com.google.javascript.rhino.jstype.AllType",
245:       "com.google.common.collect.Maps",
246:       "com.google.common.collect.SetMultimap",
247:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
248:       "com.google.common.collect.Maps$EntryTransformer",
249:       "com.google.javascript.rhino.JSTypeExpression",
250:       "com.google.common.collect.Iterators$MergingIterator"
251:     );
252:   } 
253: 
254:   private static void resetClasses() {
255:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_27_tmp__ESTest_scaffolding.class.getClassLoader()); 
256: 
257:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
258:       "com.google.javascript.rhino.Node",
259:       "com.google.javascript.rhino.Node$NumberNode",
260:       "com.google.javascript.rhino.Node$StringNode",
261:       "com.google.javascript.rhino.Node$AbstractPropListItem",
262:       "com.google.javascript.rhino.Node$ObjectPropListItem",
263:       "com.google.javascript.rhino.Node$IntPropListItem",
264:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
265:       "com.google.javascript.rhino.Node$AncestorIterable",
266:       "com.google.javascript.rhino.Node$NodeMismatch",
267:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
268:       "com.google.javascript.rhino.Node$SideEffectFlags",
269:       "com.google.javascript.rhino.Token",
270:       "com.google.common.base.Preconditions",
271:       "com.google.javascript.rhino.SimpleErrorReporter",
272:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
273:       "com.google.common.base.Joiner",
274:       "com.google.common.base.Joiner$1",
275:       "com.google.common.collect.Collections2",
276:       "com.google.common.base.Joiner$MapJoiner",
277:       "com.google.common.collect.Maps",
278:       "com.google.common.collect.AbstractMultimap",
279:       "com.google.common.collect.AbstractMapBasedMultimap",
280:       "com.google.common.collect.AbstractSetMultimap",
281:       "com.google.common.collect.LinkedHashMultimap",
282:       "com.google.common.collect.AbstractMapEntry",
283:       "com.google.common.collect.ImmutableEntry",
284:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
285:       "com.google.common.collect.AbstractListMultimap",
286:       "com.google.common.collect.ArrayListMultimap",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
288:       "com.google.common.collect.ImmutableCollection",
289:       "com.google.common.collect.RegularImmutableList",
290:       "com.google.common.collect.ObjectArrays",
291:       "com.google.common.collect.ImmutableList",
292:       "com.google.javascript.rhino.jstype.ModificationVisitor",
293:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
294:       "com.google.common.collect.ImmutableCollection$Builder",
295:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
296:       "com.google.common.collect.ImmutableList$Builder",
297:       "com.google.common.collect.UnmodifiableIterator",
298:       "com.google.common.collect.UnmodifiableListIterator",
299:       "com.google.common.collect.Iterators$1",
300:       "com.google.common.collect.Iterators$2",
301:       "com.google.common.collect.Iterators",
302:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
303:       "com.google.javascript.rhino.jstype.JSType$1",
304:       "com.google.javascript.rhino.jstype.JSType",
305:       "com.google.javascript.rhino.jstype.ObjectType",
306:       "com.google.javascript.rhino.jstype.ProxyObjectType",
307:       "com.google.javascript.rhino.jstype.TemplateType",
308:       "com.google.javascript.rhino.jstype.ValueType",
309:       "com.google.javascript.rhino.jstype.BooleanType",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.javascript.rhino.jstype.NumberType",
312:       "com.google.javascript.rhino.jstype.StringType",
313:       "com.google.javascript.rhino.jstype.UnknownType",
314:       "com.google.javascript.rhino.jstype.VoidType",
315:       "com.google.javascript.rhino.jstype.AllType",
316:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
317:       "com.google.common.collect.ImmutableMap",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.collect.EmptyImmutableBiMap",
320:       "com.google.javascript.rhino.jstype.PropertyMap$1",
321:       "com.google.javascript.rhino.jstype.PropertyMap",
322:       "com.google.javascript.rhino.jstype.FunctionType",
323:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
324:       "com.google.javascript.rhino.jstype.ArrowType",
325:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
326:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
327:       "com.google.javascript.rhino.jstype.InstanceObjectType",
328:       "com.google.javascript.rhino.jstype.Property",
329:       "com.google.common.collect.Lists",
330:       "com.google.javascript.rhino.jstype.NoObjectType",
331:       "com.google.javascript.rhino.jstype.NoType",
332:       "com.google.javascript.rhino.jstype.NoResolvedType",
333:       "com.google.common.collect.SingletonImmutableList",
334:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
335:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
336:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
337:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
338:       "com.google.javascript.rhino.jstype.UnionType",
339:       "com.google.javascript.rhino.jstype.FunctionBuilder",
340:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.base.Objects",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
354:     );
355:   }
356: }

[MASTER] 15:41:54.539 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(1945, "Window", 26, 10);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node0);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(26, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(10, node0.getCharno());
assertFalse(node0.isObjectLit());
assertEquals(106506, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());

String string0 = node0.getQualifiedName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNull(string0);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(26, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(10, node0.getCharno());
assertFalse(node0.isObjectLit());
assertEquals(106506, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());

Node node1 = Node.newNumber(0.5);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(26, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(10, node0.getCharno());
assertFalse(node0.isObjectLit());
assertEquals(106506, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());

node_FileLevelJsDocBuilder0.append("cV%Rns");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(26, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(10, node0.getCharno());
assertFalse(node0.isObjectLit());
assertEquals(106506, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());

boolean boolean0 = node0.isScript();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(26, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(10, node0.getCharno());
assertFalse(node0.isObjectLit());
assertEquals(106506, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());

Iterable<Node> iterable0 = node1.children();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());

Object object0 = node0.getProp(10);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertNull(object0);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(26, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(10, node0.getCharno());
assertFalse(node0.isObjectLit());
assertEquals(106506, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());

Node node2 = node0.srcrefTree(node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(1945, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isGetProp());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(1945, node2.getType());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean1 = node1.isThrow();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(boolean1);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());


[MASTER] 15:41:57.074 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1605714116685/com/google/javascript/rhino/Node_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1605714116685/com/google/javascript/rhino/Node_35_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:57.075 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:57.076 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:57.081 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1294
[MASTER] 15:41:57.084 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1605714116685/com/google/javascript/rhino/Node_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:56 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_35_tmp__ESTest extends Node_35_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(52, "Number node not created with Node.newNumber");
22:       assertEquals(15, Node.NO_SIDE_EFFECTS);
23:       assertEquals(57, Node.LAST_PROP);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(32, Node.INCRDECR_PROP);
27:       assertEquals(12, Node.COLUMN_BITS);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(2, Node.POST_FLAG);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(50, Node.FREE_CALL);
37:       assertEquals(51, Node.STATIC_SOURCE_FILE);
38:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(4095, Node.COLUMN_MASK);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(57, Node.REFLECTED_OBJECT);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(52, Node.LENGTH);
56:       assertEquals(8, Node.FLAG_NO_THROWS);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isName());
60:       assertFalse(node0.isStringKey());
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isVar());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isContinue());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isParamList());
69:       assertEquals((-1), node0.getSourcePosition());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isGetElem());
76:       assertFalse(node0.isArrayLit());
77:       assertFalse(node0.isAssignAdd());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isTypeOf());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isDo());
84:       assertTrue(node0.isInstanceOf());
85:       assertFalse(node0.isDefaultCase());
86:       assertFalse(node0.isExprResult());
87:       assertFalse(node0.isVoid());
88:       assertFalse(node0.isNew());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isThrow());
94:       assertFalse(node0.isFalse());
95:       assertFalse(node0.isGetProp());
96:       assertFalse(node0.isBreak());
97:       assertFalse(node0.isComma());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isHook());
100:       assertFalse(node0.isNot());
101:       assertFalse(node0.isAnd());
102:       assertFalse(node0.isString());
103:       assertFalse(node0.isSwitch());
104:       assertFalse(node0.isScript());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isObjectLit());
107:       assertEquals((-1), node0.getCharno());
108:       assertFalse(node0.isFor());
109:       assertFalse(node0.isGetterDef());
110:       assertFalse(node0.isIf());
111:       assertFalse(node0.isNumber());
112:       assertFalse(node0.isCast());
113:       assertFalse(node0.hasOneChild());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.hasMoreThanOneChild());
116:       assertFalse(node0.isRegExp());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isWith());
119:       assertFalse(node0.isCatch());
120:       assertFalse(node0.isInc());
121:       assertEquals((-1), node0.getLineno());
122:       assertFalse(node0.isIn());
123:       assertFalse(node0.isNE());
124:       assertEquals(52, node0.getType());
125:       
126:       node0.type = 1048576;
127:       assertFalse(node0.isName());
128:       assertFalse(node0.isStringKey());
129:       assertFalse(node0.isSetterDef());
130:       assertFalse(node0.isCall());
131:       assertFalse(node0.isBlock());
132:       assertFalse(node0.isVar());
133:       assertEquals(0, node0.getChildCount());
134:       assertFalse(node0.isContinue());
135:       assertFalse(node0.isWhile());
136:       assertFalse(node0.isParamList());
137:       assertEquals((-1), node0.getSourcePosition());
138:       assertFalse(node0.isDebugger());
139:       assertFalse(node0.isLabelName());
140:       assertFalse(node0.isAssign());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isDelProp());
143:       assertFalse(node0.isGetElem());
144:       assertFalse(node0.isArrayLit());
145:       assertFalse(node0.isAssignAdd());
146:       assertFalse(node0.isReturn());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.hasChildren());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isLabel());
151:       assertFalse(node0.isDo());
152:       assertFalse(node0.isDefaultCase());
153:       assertFalse(node0.isExprResult());
154:       assertFalse(node0.isVoid());
155:       assertFalse(node0.isNew());
156:       assertFalse(node0.isOr());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isNull());
159:       assertFalse(node0.isTrue());
160:       assertFalse(node0.isThrow());
161:       assertFalse(node0.isFalse());
162:       assertFalse(node0.isGetProp());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isInstanceOf());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isHook());
168:       assertFalse(node0.isNot());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isString());
171:       assertFalse(node0.isSwitch());
172:       assertFalse(node0.isScript());
173:       assertFalse(node0.isCase());
174:       assertEquals(1048576, node0.getType());
175:       assertFalse(node0.isObjectLit());
176:       assertEquals((-1), node0.getCharno());
177:       assertFalse(node0.isFor());
178:       assertFalse(node0.isGetterDef());
179:       assertFalse(node0.isIf());
180:       assertFalse(node0.isNumber());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.hasMoreThanOneChild());
185:       assertFalse(node0.isRegExp());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isCatch());
189:       assertFalse(node0.isInc());
190:       assertEquals((-1), node0.getLineno());
191:       assertFalse(node0.isIn());
192:       assertFalse(node0.isNE());
193:       
194:       node0.putBooleanProp(1369, true);
195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
196:       assertEquals(57, Node.LAST_PROP);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(49, Node.DIRECT_EVAL);
199:       assertEquals(32, Node.INCRDECR_PROP);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
202:       assertEquals(2, Node.POST_FLAG);
203:       assertEquals(30, Node.VAR_ARGS_NAME);
204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
205:       assertEquals(40, Node.ORIGINALNAME_PROP);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(54, Node.SLASH_V);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(43, Node.IS_CONSTANT_NAME);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(53, Node.INPUT_ID);
215:       assertEquals(4095, Node.COLUMN_MASK);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(57, Node.REFLECTED_OBJECT);
227:       assertEquals(55, Node.INFERRED_FUNCTION);
228:       assertEquals(52, Node.LENGTH);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(36, Node.QUOTED_PROP);
231:       assertFalse(node0.isName());
232:       assertFalse(node0.isStringKey());
233:       assertFalse(node0.isSetterDef());
234:       assertFalse(node0.isCall());
235:       assertFalse(node0.isBlock());
236:       assertFalse(node0.isVar());
237:       assertEquals(0, node0.getChildCount());
238:       assertFalse(node0.isContinue());
239:       assertFalse(node0.isWhile());
240:       assertFalse(node0.isParamList());
241:       assertEquals((-1), node0.getSourcePosition());
242:       assertFalse(node0.isDebugger());
243:       assertFalse(node0.isLabelName());
244:       assertFalse(node0.isAssign());
245:       assertFalse(node0.isEmpty());
246:       assertFalse(node0.isDelProp());
247:       assertFalse(node0.isGetElem());
248:       assertFalse(node0.isArrayLit());
249:       assertFalse(node0.isAssignAdd());
250:       assertFalse(node0.isReturn());
251:       assertFalse(node0.isTypeOf());
252:       assertFalse(node0.hasChildren());
253:       assertFalse(node0.isDec());
254:       assertFalse(node0.isLabel());
255:       assertFalse(node0.isDo());
256:       assertFalse(node0.isDefaultCase());
257:       assertFalse(node0.isExprResult());
258:       assertFalse(node0.isVoid());
259:       assertFalse(node0.isNew());
260:       assertFalse(node0.isOr());
261:       assertFalse(node0.isAdd());
262:       assertFalse(node0.isNull());
263:       assertFalse(node0.isTrue());
264:       assertFalse(node0.isThrow());
265:       assertFalse(node0.isFalse());
266:       assertFalse(node0.isGetProp());
267:       assertFalse(node0.isBreak());
268:       assertFalse(node0.isInstanceOf());
269:       assertFalse(node0.isComma());
270:       assertFalse(node0.isThis());
271:       assertFalse(node0.isHook());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isAnd());
274:       assertFalse(node0.isString());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isScript());
277:       assertFalse(node0.isCase());
278:       assertEquals(1048576, node0.getType());
279:       assertFalse(node0.isObjectLit());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isFor());
282:       assertFalse(node0.isGetterDef());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.isCast());
286:       assertFalse(node0.hasOneChild());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.hasMoreThanOneChild());
289:       assertFalse(node0.isRegExp());
290:       assertFalse(node0.isFunction());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.isCatch());
293:       assertFalse(node0.isInc());
294:       assertEquals((-1), node0.getLineno());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isNE());
297:       
298:       boolean boolean0 = node0.isVarArgs();
299:       assertEquals(15, Node.NO_SIDE_EFFECTS);
300:       assertEquals(57, Node.LAST_PROP);
301:       assertEquals(1, Node.DECR_FLAG);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
309:       assertEquals(40, Node.ORIGINALNAME_PROP);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
316:       assertEquals(43, Node.IS_CONSTANT_NAME);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(53, Node.INPUT_ID);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
321:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(39, Node.EMPTY_BLOCK);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(57, Node.REFLECTED_OBJECT);
331:       assertEquals(55, Node.INFERRED_FUNCTION);
332:       assertEquals(52, Node.LENGTH);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertEquals(36, Node.QUOTED_PROP);
335:       assertFalse(boolean0);
336:       assertFalse(node0.isName());
337:       assertFalse(node0.isStringKey());
338:       assertFalse(node0.isSetterDef());
339:       assertFalse(node0.isCall());
340:       assertFalse(node0.isBlock());
341:       assertFalse(node0.isVar());
342:       assertEquals(0, node0.getChildCount());
343:       assertFalse(node0.isContinue());
344:       assertFalse(node0.isWhile());
345:       assertFalse(node0.isParamList());
346:       assertEquals((-1), node0.getSourcePosition());
347:       assertFalse(node0.isDebugger());
348:       assertFalse(node0.isLabelName());
349:       assertFalse(node0.isAssign());
350:       assertFalse(node0.isEmpty());
351:       assertFalse(node0.isDelProp());
352:       assertFalse(node0.isGetElem());
353:       assertFalse(node0.isArrayLit());
354:       assertFalse(node0.isAssignAdd());
355:       assertFalse(node0.isReturn());
356:       assertFalse(node0.isTypeOf());
357:       assertFalse(node0.hasChildren());
358:       assertFalse(node0.isDec());
359:       assertFalse(node0.isLabel());
360:       assertFalse(node0.isDo());
361:       assertFalse(node0.isDefaultCase());
362:       assertFalse(node0.isExprResult());
363:       assertFalse(node0.isVoid());
364:       assertFalse(node0.isNew());
365:       assertFalse(node0.isOr());
366:       assertFalse(node0.isAdd());
367:       assertFalse(node0.isNull());
368:       assertFalse(node0.isTrue());
369:       assertFalse(node0.isThrow());
370:       assertFalse(node0.isFalse());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node0.isBreak());
373:       assertFalse(node0.isInstanceOf());
374:       assertFalse(node0.isComma());
375:       assertFalse(node0.isThis());
376:       assertFalse(node0.isHook());
377:       assertFalse(node0.isNot());
378:       assertFalse(node0.isAnd());
379:       assertFalse(node0.isString());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isScript());
382:       assertFalse(node0.isCase());
383:       assertEquals(1048576, node0.getType());
384:       assertFalse(node0.isObjectLit());
385:       assertEquals((-1), node0.getCharno());
386:       assertFalse(node0.isFor());
387:       assertFalse(node0.isGetterDef());
388:       assertFalse(node0.isIf());
389:       assertFalse(node0.isNumber());
390:       assertFalse(node0.isCast());
391:       assertFalse(node0.hasOneChild());
392:       assertFalse(node0.isTry());
393:       assertFalse(node0.hasMoreThanOneChild());
394:       assertFalse(node0.isRegExp());
395:       assertFalse(node0.isFunction());
396:       assertFalse(node0.isWith());
397:       assertFalse(node0.isCatch());
398:       assertFalse(node0.isInc());
399:       assertEquals((-1), node0.getLineno());
400:       assertFalse(node0.isIn());
401:       assertFalse(node0.isNE());
402:       
403:       Node node1 = new Node(1405);
404:       assertEquals(52, Node.LENGTH);
405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
406:       assertEquals(54, Node.SLASH_V);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(57, Node.LAST_PROP);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(30, Node.VAR_ARGS_NAME);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(39, Node.EMPTY_BLOCK);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(49, Node.DIRECT_EVAL);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(55, Node.INFERRED_FUNCTION);
422:       assertEquals(56, Node.CHANGE_TIME);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(57, Node.REFLECTED_OBJECT);
426:       assertEquals(53, Node.INPUT_ID);
427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(4095, Node.COLUMN_MASK);
431:       assertEquals(47, Node.IS_DISPATCHER);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(1, Node.DECR_FLAG);
436:       assertEquals(50, Node.FREE_CALL);
437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
440:       assertFalse(node1.equals((Object)node0));
441:       assertNotNull(node1);
442:       assertFalse(node1.isSetterDef());
443:       assertFalse(node1.isParamList());
444:       assertFalse(node1.isCall());
445:       assertFalse(node1.isVar());
446:       assertFalse(node1.isCatch());
447:       assertEquals(0, node1.getChildCount());
448:       assertFalse(node1.isRegExp());
449:       assertFalse(node1.isVoid());
450:       assertFalse(node1.isTrue());
451:       assertFalse(node1.isAdd());
452:       assertFalse(node1.isDefaultCase());
453:       assertFalse(node1.isDo());
454:       assertFalse(node1.isNew());
455:       assertFalse(node1.isName());
456:       assertFalse(node1.isEmpty());
457:       assertFalse(node1.isNull());
458:       assertFalse(node1.isOr());
459:       assertFalse(node1.isDelProp());
460:       assertFalse(node1.isContinue());
461:       assertFalse(node1.isGetElem());
462:       assertFalse(node1.isCast());
463:       assertFalse(node1.isWhile());
464:       assertFalse(node1.hasChildren());
465:       assertFalse(node1.isReturn());
466:       assertFalse(node1.isTypeOf());
467:       assertFalse(node1.isAssign());
468:       assertFalse(node1.isDec());
469:       assertFalse(node1.isFunction());
470:       assertFalse(node1.isAnd());
471:       assertFalse(node1.isObjectLit());
472:       assertFalse(node1.isString());
473:       assertFalse(node1.isNot());
474:       assertEquals((-1), node1.getSourcePosition());
475:       assertFalse(node1.isDebugger());
476:       assertFalse(node1.isGetProp());
477:       assertFalse(node1.isThis());
478:       assertFalse(node1.isBreak());
479:       assertFalse(node1.isThrow());
480:       assertFalse(node1.isFalse());
481:       assertFalse(node1.isWith());
482:       assertFalse(node1.isInstanceOf());
483:       assertFalse(node1.isHook());
484:       assertFalse(node1.isComma());
485:       assertFalse(node1.isInc());
486:       assertFalse(node1.isExprResult());
487:       assertFalse(node1.isIn());
488:       assertFalse(node1.isAssignAdd());
489:       assertFalse(node1.isNE());
490:       assertFalse(node1.isIf());
491:       assertFalse(node1.isLabelName());
492:       assertEquals((-1), node1.getLineno());
493:       assertFalse(node1.isFor());
494:       assertFalse(node1.hasMoreThanOneChild());
495:       assertFalse(node1.isLabel());
496:       assertEquals((-1), node1.getCharno());
497:       assertFalse(node1.isBlock());
498:       assertFalse(node1.isSwitch());
499:       assertFalse(node1.isScript());
500:       assertEquals(1405, node1.getType());
501:       assertFalse(node1.isTry());
502:       assertFalse(node1.isArrayLit());
503:       assertFalse(node1.hasOneChild());
504:       assertFalse(node1.isCase());
505:       assertFalse(node1.isStringKey());
506:       assertFalse(node1.isGetterDef());
507:       assertFalse(node1.isNumber());
508:       
509:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertEquals(1, Node.DECR_FLAG);
513:       assertEquals(49, Node.DIRECT_EVAL);
514:       assertEquals(32, Node.INCRDECR_PROP);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
520:       assertEquals(40, Node.ORIGINALNAME_PROP);
521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(54, Node.SLASH_V);
524:       assertEquals(50, Node.FREE_CALL);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
527:       assertEquals(43, Node.IS_CONSTANT_NAME);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(53, Node.INPUT_ID);
530:       assertEquals(4095, Node.COLUMN_MASK);
531:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(47, Node.IS_DISPATCHER);
534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(56, Node.CHANGE_TIME);
537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(39, Node.EMPTY_BLOCK);
540:       assertEquals(37, Node.OPT_ARG_NAME);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(55, Node.INFERRED_FUNCTION);
543:       assertEquals(52, Node.LENGTH);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertEquals(36, Node.QUOTED_PROP);
546:       assertEquals(52, Node.LENGTH);
547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
548:       assertEquals(54, Node.SLASH_V);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(57, Node.LAST_PROP);
551:       assertEquals(40, Node.ORIGINALNAME_PROP);
552:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
553:       assertEquals(12, Node.COLUMN_BITS);
554:       assertEquals(30, Node.VAR_ARGS_NAME);
555:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
556:       assertEquals(39, Node.EMPTY_BLOCK);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(48, Node.DIRECTIVES);
559:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
560:       assertEquals(29, Node.JSDOC_INFO_PROP);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
563:       assertEquals(55, Node.INFERRED_FUNCTION);
564:       assertEquals(56, Node.CHANGE_TIME);
565:       assertEquals(36, Node.QUOTED_PROP);
566:       assertEquals(8, Node.FLAG_NO_THROWS);
567:       assertEquals(57, Node.REFLECTED_OBJECT);
568:       assertEquals(53, Node.INPUT_ID);
569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
570:       assertEquals(2, Node.POST_FLAG);
571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
572:       assertEquals(4095, Node.COLUMN_MASK);
573:       assertEquals(47, Node.IS_DISPATCHER);
574:       assertEquals(46, Node.IS_NAMESPACE);
575:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
576:       assertEquals(32, Node.INCRDECR_PROP);
577:       assertEquals(1, Node.DECR_FLAG);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
580:       assertEquals(43, Node.IS_CONSTANT_NAME);
581:       assertEquals(51, Node.STATIC_SOURCE_FILE);
582:       assertFalse(node0.equals((Object)node1));
583:       assertFalse(node1.equals((Object)node0));
584:       assertNotNull(node_NodeMismatch0);
585:       assertFalse(node0.isName());
586:       assertFalse(node0.isStringKey());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isCall());
589:       assertFalse(node0.isBlock());
590:       assertFalse(node0.isVar());
591:       assertEquals(0, node0.getChildCount());
592:       assertFalse(node0.isContinue());
593:       assertFalse(node0.isWhile());
594:       assertFalse(node0.isParamList());
595:       assertEquals((-1), node0.getSourcePosition());
596:       assertFalse(node0.isDebugger());
597:       assertFalse(node0.isLabelName());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isEmpty());
600:       assertFalse(node0.isDelProp());
601:       assertFalse(node0.isGetElem());
602:       assertFalse(node0.isArrayLit());
603:       assertFalse(node0.isAssignAdd());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.isTypeOf());
606:       assertFalse(node0.hasChildren());
607:       assertFalse(node0.isDec());
608:       assertFalse(node0.isLabel());
609:       assertFalse(node0.isDo());
610:       assertFalse(node0.isDefaultCase());
611:       assertFalse(node0.isExprResult());
612:       assertFalse(node0.isVoid());
613:       assertFalse(node0.isNew());
614:       assertFalse(node0.isOr());
615:       assertFalse(node0.isAdd());
616:       assertFalse(node0.isNull());
617:       assertFalse(node0.isTrue());
618:       assertFalse(node0.isThrow());
619:       assertFalse(node0.isFalse());
620:       assertFalse(node0.isGetProp());
621:       assertFalse(node0.isBreak());
622:       assertFalse(node0.isInstanceOf());
623:       assertFalse(node0.isComma());
624:       assertFalse(node0.isThis());
625:       assertFalse(node0.isHook());
626:       assertFalse(node0.isNot());
627:       assertFalse(node0.isAnd());
628:       assertFalse(node0.isString());
629:       assertFalse(node0.isSwitch());
630:       assertFalse(node0.isScript());
631:       assertFalse(node0.isCase());
632:       assertEquals(1048576, node0.getType());
633:       assertFalse(node0.isObjectLit());
634:       assertEquals((-1), node0.getCharno());
635:       assertFalse(node0.isFor());
636:       assertFalse(node0.isGetterDef());
637:       assertFalse(node0.isIf());
638:       assertFalse(node0.isNumber());
639:       assertFalse(node0.isCast());
640:       assertFalse(node0.hasOneChild());
641:       assertFalse(node0.isTry());
642:       assertFalse(node0.hasMoreThanOneChild());
643:       assertFalse(node0.isRegExp());
644:       assertFalse(node0.isFunction());
645:       assertFalse(node0.isWith());
646:       assertFalse(node0.isCatch());
647:       assertFalse(node0.isInc());
648:       assertEquals((-1), node0.getLineno());
649:       assertFalse(node0.isIn());
650:       assertFalse(node0.isNE());
651:       assertFalse(node1.isSetterDef());
652:       assertFalse(node1.isParamList());
653:       assertFalse(node1.isCall());
654:       assertFalse(node1.isVar());
655:       assertFalse(node1.isCatch());
656:       assertEquals(0, node1.getChildCount());
657:       assertFalse(node1.isRegExp());
658:       assertFalse(node1.isVoid());
659:       assertFalse(node1.isTrue());
660:       assertFalse(node1.isAdd());
661:       assertFalse(node1.isDefaultCase());
662:       assertFalse(node1.isDo());
663:       assertFalse(node1.isNew());
664:       assertFalse(node1.isName());
665:       assertFalse(node1.isEmpty());
666:       assertFalse(node1.isNull());
667:       assertFalse(node1.isOr());
668:       assertFalse(node1.isDelProp());
669:       assertFalse(node1.isContinue());
670:       assertFalse(node1.isGetElem());
671:       assertFalse(node1.isCast());
672:       assertFalse(node1.isWhile());
673:       assertFalse(node1.hasChildren());
674:       assertFalse(node1.isReturn());
675:       assertFalse(node1.isTypeOf());
676:       assertFalse(node1.isAssign());
677:       assertFalse(node1.isDec());
678:       assertFalse(node1.isFunction());
679:       assertFalse(node1.isAnd());
680:       assertFalse(node1.isObjectLit());
681:       assertFalse(node1.isString());
682:       assertFalse(node1.isNot());
683:       assertEquals((-1), node1.getSourcePosition());
684:       assertFalse(node1.isDebugger());
685:       assertFalse(node1.isGetProp());
686:       assertFalse(node1.isThis());
687:       assertFalse(node1.isBreak());
688:       assertFalse(node1.isThrow());
689:       assertFalse(node1.isFalse());
690:       assertFalse(node1.isWith());
691:       assertFalse(node1.isInstanceOf());
692:       assertFalse(node1.isHook());
693:       assertFalse(node1.isComma());
694:       assertFalse(node1.isInc());
695:       assertFalse(node1.isExprResult());
696:       assertFalse(node1.isIn());
697:       assertFalse(node1.isAssignAdd());
698:       assertFalse(node1.isNE());
699:       assertFalse(node1.isIf());
700:       assertFalse(node1.isLabelName());
701:       assertEquals((-1), node1.getLineno());
702:       assertFalse(node1.isFor());
703:       assertFalse(node1.hasMoreThanOneChild());
704:       assertFalse(node1.isLabel());
705:       assertEquals((-1), node1.getCharno());
706:       assertFalse(node1.isBlock());
707:       assertFalse(node1.isSwitch());
708:       assertFalse(node1.isScript());
709:       assertEquals(1405, node1.getType());
710:       assertFalse(node1.isTry());
711:       assertFalse(node1.isArrayLit());
712:       assertFalse(node1.hasOneChild());
713:       assertFalse(node1.isCase());
714:       assertFalse(node1.isStringKey());
715:       assertFalse(node1.isGetterDef());
716:       assertFalse(node1.isNumber());
717:       
718:       Node node2 = node1.getAncestor(57);
719:       assertEquals(52, Node.LENGTH);
720:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
721:       assertEquals(54, Node.SLASH_V);
722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
723:       assertEquals(57, Node.LAST_PROP);
724:       assertEquals(40, Node.ORIGINALNAME_PROP);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(12, Node.COLUMN_BITS);
727:       assertEquals(30, Node.VAR_ARGS_NAME);
728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
729:       assertEquals(39, Node.EMPTY_BLOCK);
730:       assertEquals(37, Node.OPT_ARG_NAME);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
733:       assertEquals(29, Node.JSDOC_INFO_PROP);
734:       assertEquals(49, Node.DIRECT_EVAL);
735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
736:       assertEquals(55, Node.INFERRED_FUNCTION);
737:       assertEquals(56, Node.CHANGE_TIME);
738:       assertEquals(36, Node.QUOTED_PROP);
739:       assertEquals(8, Node.FLAG_NO_THROWS);
740:       assertEquals(57, Node.REFLECTED_OBJECT);
741:       assertEquals(53, Node.INPUT_ID);
742:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
743:       assertEquals(2, Node.POST_FLAG);
744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
745:       assertEquals(4095, Node.COLUMN_MASK);
746:       assertEquals(47, Node.IS_DISPATCHER);
747:       assertEquals(46, Node.IS_NAMESPACE);
748:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(1, Node.DECR_FLAG);
751:       assertEquals(50, Node.FREE_CALL);
752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
755:       assertFalse(node1.equals((Object)node0));
756:       assertNull(node2);
757:       assertFalse(node1.isSetterDef());
758:       assertFalse(node1.isParamList());
759:       assertFalse(node1.isCall());
760:       assertFalse(node1.isVar());
761:       assertFalse(node1.isCatch());
762:       assertEquals(0, node1.getChildCount());
763:       assertFalse(node1.isRegExp());
764:       assertFalse(node1.isVoid());
765:       assertFalse(node1.isTrue());
766:       assertFalse(node1.isAdd());
767:       assertFalse(node1.isDefaultCase());
768:       assertFalse(node1.isDo());
769:       assertFalse(node1.isNew());
770:       assertFalse(node1.isName());
771:       assertFalse(node1.isEmpty());
772:       assertFalse(node1.isNull());
773:       assertFalse(node1.isOr());
774:       assertFalse(node1.isDelProp());
775:       assertFalse(node1.isContinue());
776:       assertFalse(node1.isGetElem());
777:       assertFalse(node1.isCast());
778:       assertFalse(node1.isWhile());
779:       assertFalse(node1.hasChildren());
780:       assertFalse(node1.isReturn());
781:       assertFalse(node1.isTypeOf());
782:       assertFalse(node1.isAssign());
783:       assertFalse(node1.isDec());
784:       assertFalse(node1.isFunction());
785:       assertFalse(node1.isAnd());
786:       assertFalse(node1.isObjectLit());
787:       assertFalse(node1.isString());
788:       assertFalse(node1.isNot());
789:       assertEquals((-1), node1.getSourcePosition());
790:       assertFalse(node1.isDebugger());
791:       assertFalse(node1.isGetProp());
792:       assertFalse(node1.isThis());
793:       assertFalse(node1.isBreak());
794:       assertFalse(node1.isThrow());
795:       assertFalse(node1.isFalse());
796:       assertFalse(node1.isWith());
797:       assertFalse(node1.isInstanceOf());
798:       assertFalse(node1.isHook());
799:       assertFalse(node1.isComma());
800:       assertFalse(node1.isInc());
801:       assertFalse(node1.isExprResult());
802:       assertFalse(node1.isIn());
803:       assertFalse(node1.isAssignAdd());
804:       assertFalse(node1.isNE());
805:       assertFalse(node1.isIf());
806:       assertFalse(node1.isLabelName());
807:       assertEquals((-1), node1.getLineno());
808:       assertFalse(node1.isFor());
809:       assertFalse(node1.hasMoreThanOneChild());
810:       assertFalse(node1.isLabel());
811:       assertEquals((-1), node1.getCharno());
812:       assertFalse(node1.isBlock());
813:       assertFalse(node1.isSwitch());
814:       assertFalse(node1.isScript());
815:       assertEquals(1405, node1.getType());
816:       assertFalse(node1.isTry());
817:       assertFalse(node1.isArrayLit());
818:       assertFalse(node1.hasOneChild());
819:       assertFalse(node1.isCase());
820:       assertFalse(node1.isStringKey());
821:       assertFalse(node1.isGetterDef());
822:       assertFalse(node1.isNumber());
823:       
824:       Node node3 = Node.newString("Number node not created with Node.newNumber");
825:       assertEquals(50, Node.FREE_CALL);
826:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
827:       assertEquals(54, Node.SLASH_V);
828:       assertEquals(57, Node.REFLECTED_OBJECT);
829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
830:       assertEquals(8, Node.FLAG_NO_THROWS);
831:       assertEquals(39, Node.EMPTY_BLOCK);
832:       assertEquals(57, Node.LAST_PROP);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(52, Node.LENGTH);
835:       assertEquals(15, Node.NO_SIDE_EFFECTS);
836:       assertEquals(55, Node.INFERRED_FUNCTION);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertEquals(1, Node.DECR_FLAG);
839:       assertEquals(49, Node.DIRECT_EVAL);
840:       assertEquals(32, Node.INCRDECR_PROP);
841:       assertEquals(12, Node.COLUMN_BITS);
842:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
843:       assertEquals(37, Node.OPT_ARG_NAME);
844:       assertEquals(48, Node.DIRECTIVES);
845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(56, Node.CHANGE_TIME);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
850:       assertEquals(36, Node.QUOTED_PROP);
851:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
852:       assertEquals(29, Node.JSDOC_INFO_PROP);
853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(51, Node.STATIC_SOURCE_FILE);
856:       assertEquals(30, Node.VAR_ARGS_NAME);
857:       assertEquals(46, Node.IS_NAMESPACE);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(43, Node.IS_CONSTANT_NAME);
860:       assertEquals(40, Node.ORIGINALNAME_PROP);
861:       assertFalse(node3.equals((Object)node1));
862:       assertFalse(node3.equals((Object)node0));
863:       assertNotNull(node3);
864:       assertEquals(0, node3.getChildCount());
865:       assertEquals(40, node3.getType());
866:       assertFalse(node3.isParamList());
867:       assertFalse(node3.isNull());
868:       assertFalse(node3.isDefaultCase());
869:       assertFalse(node3.isSetterDef());
870:       assertFalse(node3.isTry());
871:       assertFalse(node3.isName());
872:       assertFalse(node3.isBlock());
873:       assertTrue(node3.isString());
874:       assertFalse(node3.isTrue());
875:       assertFalse(node3.isFor());
876:       assertFalse(node3.isIf());
877:       assertFalse(node3.isRegExp());
878:       assertFalse(node3.isDelProp());
879:       assertFalse(node3.isVoid());
880:       assertFalse(node3.isCall());
881:       assertFalse(node3.isCatch());
882:       assertFalse(node3.isIn());
883:       assertEquals((-1), node3.getLineno());
884:       assertFalse(node3.isReturn());
885:       assertFalse(node3.isWhile());
886:       assertFalse(node3.isNE());
887:       assertEquals((-1), node3.getSourcePosition());
888:       assertFalse(node3.isInc());
889:       assertFalse(node3.isDebugger());
890:       assertFalse(node3.isThrow());
891:       assertFalse(node3.isFunction());
892:       assertFalse(node3.isFalse());
893:       assertFalse(node3.isContinue());
894:       assertFalse(node3.isCast());
895:       assertFalse(node3.isInstanceOf());
896:       assertFalse(node3.isObjectLit());
897:       assertFalse(node3.isAnd());
898:       assertFalse(node3.isThis());
899:       assertFalse(node3.isNot());
900:       assertFalse(node3.isGetProp());
901:       assertFalse(node3.isScript());
902:       assertFalse(node3.hasOneChild());
903:       assertFalse(node3.isHook());
904:       assertFalse(node3.isDec());
905:       assertFalse(node3.isBreak());
906:       assertFalse(node3.hasChildren());
907:       assertFalse(node3.isWith());
908:       assertFalse(node3.isComma());
909:       assertFalse(node3.isAssign());
910:       assertFalse(node3.isTypeOf());
911:       assertFalse(node3.isGetElem());
912:       assertFalse(node3.isExprResult());
913:       assertFalse(node3.hasMoreThanOneChild());
914:       assertFalse(node3.isOr());
915:       assertFalse(node3.isAssignAdd());
916:       assertFalse(node3.isLabel());
917:       assertFalse(node3.isNumber());
918:       assertFalse(node3.isDo());
919:       assertFalse(node3.isGetterDef());
920:       assertFalse(node3.isNew());
921:       assertFalse(node3.isCase());
922:       assertFalse(node3.isAdd());
923:       assertFalse(node3.isEmpty());
924:       assertFalse(node3.isArrayLit());
925:       assertFalse(node3.isStringKey());
926:       assertEquals((-1), node3.getCharno());
927:       assertFalse(node3.isVar());
928:       assertFalse(node3.isSwitch());
929:       assertFalse(node3.isLabelName());
930:       assertNotSame(node3, node0);
931:       
932:       Node node4 = node1.getAncestor(52);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
935:       assertEquals(54, Node.SLASH_V);
936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
937:       assertEquals(57, Node.LAST_PROP);
938:       assertEquals(40, Node.ORIGINALNAME_PROP);
939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
940:       assertEquals(12, Node.COLUMN_BITS);
941:       assertEquals(30, Node.VAR_ARGS_NAME);
942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
943:       assertEquals(39, Node.EMPTY_BLOCK);
944:       assertEquals(37, Node.OPT_ARG_NAME);
945:       assertEquals(48, Node.DIRECTIVES);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(49, Node.DIRECT_EVAL);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(56, Node.CHANGE_TIME);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(53, Node.INPUT_ID);
956:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
957:       assertEquals(2, Node.POST_FLAG);
958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
959:       assertEquals(4095, Node.COLUMN_MASK);
960:       assertEquals(47, Node.IS_DISPATCHER);
961:       assertEquals(46, Node.IS_NAMESPACE);
962:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
963:       assertEquals(32, Node.INCRDECR_PROP);
964:       assertEquals(1, Node.DECR_FLAG);
965:       assertEquals(50, Node.FREE_CALL);
966:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
967:       assertEquals(43, Node.IS_CONSTANT_NAME);
968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
969:       assertFalse(node1.equals((Object)node0));
970:       assertFalse(node1.equals((Object)node3));
971:       assertNull(node4);
972:       assertFalse(node1.isSetterDef());
973:       assertFalse(node1.isParamList());
974:       assertFalse(node1.isCall());
975:       assertFalse(node1.isVar());
976:       assertFalse(node1.isCatch());
977:       assertEquals(0, node1.getChildCount());
978:       assertFalse(node1.isRegExp());
979:       assertFalse(node1.isVoid());
980:       assertFalse(node1.isTrue());
981:       assertFalse(node1.isAdd());
982:       assertFalse(node1.isDefaultCase());
983:       assertFalse(node1.isDo());
984:       assertFalse(node1.isNew());
985:       assertFalse(node1.isName());
986:       assertFalse(node1.isEmpty());
987:       assertFalse(node1.isNull());
988:       assertFalse(node1.isOr());
989:       assertFalse(node1.isDelProp());
990:       assertFalse(node1.isContinue());
991:       assertFalse(node1.isGetElem());
992:       assertFalse(node1.isCast());
993:       assertFalse(node1.isWhile());
994:       assertFalse(node1.hasChildren());
995:       assertFalse(node1.isReturn());
996:       assertFalse(node1.isTypeOf());
997:       assertFalse(node1.isAssign());
998:       assertFalse(node1.isDec());
999:       assertFalse(node1.isFunction());
1000:       assertFalse(node1.isAnd());
1001:       assertFalse(node1.isObjectLit());
1002:       assertFalse(node1.isString());
1003:       assertFalse(node1.isNot());
1004:       assertEquals((-1), node1.getSourcePosition());
1005:       assertFalse(node1.isDebugger());
1006:       assertFalse(node1.isGetProp());
1007:       assertFalse(node1.isThis());
1008:       assertFalse(node1.isBreak());
1009:       assertFalse(node1.isThrow());
1010:       assertFalse(node1.isFalse());
1011:       assertFalse(node1.isWith());
1012:       assertFalse(node1.isInstanceOf());
1013:       assertFalse(node1.isHook());
1014:       assertFalse(node1.isComma());
1015:       assertFalse(node1.isInc());
1016:       assertFalse(node1.isExprResult());
1017:       assertFalse(node1.isIn());
1018:       assertFalse(node1.isAssignAdd());
1019:       assertFalse(node1.isNE());
1020:       assertFalse(node1.isIf());
1021:       assertFalse(node1.isLabelName());
1022:       assertEquals((-1), node1.getLineno());
1023:       assertFalse(node1.isFor());
1024:       assertFalse(node1.hasMoreThanOneChild());
1025:       assertFalse(node1.isLabel());
1026:       assertEquals((-1), node1.getCharno());
1027:       assertFalse(node1.isBlock());
1028:       assertFalse(node1.isSwitch());
1029:       assertFalse(node1.isScript());
1030:       assertEquals(1405, node1.getType());
1031:       assertFalse(node1.isTry());
1032:       assertFalse(node1.isArrayLit());
1033:       assertFalse(node1.hasOneChild());
1034:       assertFalse(node1.isCase());
1035:       assertFalse(node1.isStringKey());
1036:       assertFalse(node1.isGetterDef());
1037:       assertFalse(node1.isNumber());
1038:       
1039:       boolean boolean1 = node0.isVar();
1040:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1041:       assertEquals(57, Node.LAST_PROP);
1042:       assertEquals(1, Node.DECR_FLAG);
1043:       assertEquals(49, Node.DIRECT_EVAL);
1044:       assertEquals(32, Node.INCRDECR_PROP);
1045:       assertEquals(12, Node.COLUMN_BITS);
1046:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1047:       assertEquals(2, Node.POST_FLAG);
1048:       assertEquals(30, Node.VAR_ARGS_NAME);
1049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1050:       assertEquals(40, Node.ORIGINALNAME_PROP);
1051:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1052:       assertEquals(46, Node.IS_NAMESPACE);
1053:       assertEquals(54, Node.SLASH_V);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1056:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1057:       assertEquals(43, Node.IS_CONSTANT_NAME);
1058:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1059:       assertEquals(53, Node.INPUT_ID);
1060:       assertEquals(4095, Node.COLUMN_MASK);
1061:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1063:       assertEquals(47, Node.IS_DISPATCHER);
1064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1065:       assertEquals(29, Node.JSDOC_INFO_PROP);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(48, Node.DIRECTIVES);
1069:       assertEquals(39, Node.EMPTY_BLOCK);
1070:       assertEquals(37, Node.OPT_ARG_NAME);
1071:       assertEquals(57, Node.REFLECTED_OBJECT);
1072:       assertEquals(55, Node.INFERRED_FUNCTION);
1073:       assertEquals(52, Node.LENGTH);
1074:       assertEquals(8, Node.FLAG_NO_THROWS);
1075:       assertEquals(36, Node.QUOTED_PROP);
1076:       assertFalse(boolean1);
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertFalse(node0.equals((Object)node3));
1079:       assertTrue(boolean1 == boolean0);
1080:       assertFalse(node0.isName());
1081:       assertFalse(node0.isStringKey());
1082:       assertFalse(node0.isSetterDef());
1083:       assertFalse(node0.isCall());
1084:       assertFalse(node0.isBlock());
1085:       assertFalse(node0.isVar());
1086:       assertEquals(0, node0.getChildCount());
1087:       assertFalse(node0.isContinue());
1088:       assertFalse(node0.isWhile());
1089:       assertFalse(node0.isParamList());
1090:       assertEquals((-1), node0.getSourcePosition());
1091:       assertFalse(node0.isDebugger());
1092:       assertFalse(node0.isLabelName());
1093:       assertFalse(node0.isAssign());
1094:       assertFalse(node0.isEmpty());
1095:       assertFalse(node0.isDelProp());
1096:       assertFalse(node0.isGetElem());
1097:       assertFalse(node0.isArrayLit());
1098:       assertFalse(node0.isAssignAdd());
1099:       assertFalse(node0.isReturn());
1100:       assertFalse(node0.isTypeOf());
1101:       assertFalse(node0.hasChildren());
1102:       assertFalse(node0.isDec());
1103:       assertFalse(node0.isLabel());
1104:       assertFalse(node0.isDo());
1105:       assertFalse(node0.isDefaultCase());
1106:       assertFalse(node0.isExprResult());
1107:       assertFalse(node0.isVoid());
1108:       assertFalse(node0.isNew());
1109:       assertFalse(node0.isOr());
1110:       assertFalse(node0.isAdd());
1111:       assertFalse(node0.isNull());
1112:       assertFalse(node0.isTrue());
1113:       assertFalse(node0.isThrow());
1114:       assertFalse(node0.isFalse());
1115:       assertFalse(node0.isGetProp());
1116:       assertFalse(node0.isBreak());
1117:       assertFalse(node0.isInstanceOf());
1118:       assertFalse(node0.isComma());
1119:       assertFalse(node0.isThis());
1120:       assertFalse(node0.isHook());
1121:       assertFalse(node0.isNot());
1122:       assertFalse(node0.isAnd());
1123:       assertFalse(node0.isString());
1124:       assertFalse(node0.isSwitch());
1125:       assertFalse(node0.isScript());
1126:       assertFalse(node0.isCase());
1127:       assertEquals(1048576, node0.getType());
1128:       assertFalse(node0.isObjectLit());
1129:       assertEquals((-1), node0.getCharno());
1130:       assertFalse(node0.isFor());
1131:       assertFalse(node0.isGetterDef());
1132:       assertFalse(node0.isIf());
1133:       assertFalse(node0.isNumber());
1134:       assertFalse(node0.isCast());
1135:       assertFalse(node0.hasOneChild());
1136:       assertFalse(node0.isTry());
1137:       assertFalse(node0.hasMoreThanOneChild());
1138:       assertFalse(node0.isRegExp());
1139:       assertFalse(node0.isFunction());
1140:       assertFalse(node0.isWith());
1141:       assertFalse(node0.isCatch());
1142:       assertFalse(node0.isInc());
1143:       assertEquals((-1), node0.getLineno());
1144:       assertFalse(node0.isIn());
1145:       assertFalse(node0.isNE());
1146:       assertNotSame(node0, node3);
1147:       
1148:       node0.addSuppression("|t@8|`i3z{<~");
1149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1150:       assertEquals(57, Node.LAST_PROP);
1151:       assertEquals(1, Node.DECR_FLAG);
1152:       assertEquals(49, Node.DIRECT_EVAL);
1153:       assertEquals(32, Node.INCRDECR_PROP);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1156:       assertEquals(2, Node.POST_FLAG);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1161:       assertEquals(46, Node.IS_NAMESPACE);
1162:       assertEquals(54, Node.SLASH_V);
1163:       assertEquals(50, Node.FREE_CALL);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1166:       assertEquals(43, Node.IS_CONSTANT_NAME);
1167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1168:       assertEquals(53, Node.INPUT_ID);
1169:       assertEquals(4095, Node.COLUMN_MASK);
1170:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1172:       assertEquals(47, Node.IS_DISPATCHER);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(29, Node.JSDOC_INFO_PROP);
1175:       assertEquals(56, Node.CHANGE_TIME);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(48, Node.DIRECTIVES);
1178:       assertEquals(39, Node.EMPTY_BLOCK);
1179:       assertEquals(37, Node.OPT_ARG_NAME);
1180:       assertEquals(57, Node.REFLECTED_OBJECT);
1181:       assertEquals(55, Node.INFERRED_FUNCTION);
1182:       assertEquals(52, Node.LENGTH);
1183:       assertEquals(8, Node.FLAG_NO_THROWS);
1184:       assertEquals(36, Node.QUOTED_PROP);
1185:       assertFalse(node0.equals((Object)node1));
1186:       assertFalse(node0.equals((Object)node3));
1187:       assertFalse(node0.isName());
1188:       assertFalse(node0.isStringKey());
1189:       assertFalse(node0.isSetterDef());
1190:       assertFalse(node0.isCall());
1191:       assertFalse(node0.isBlock());
1192:       assertFalse(node0.isVar());
1193:       assertEquals(0, node0.getChildCount());
1194:       assertFalse(node0.isContinue());
1195:       assertFalse(node0.isWhile());
1196:       assertFalse(node0.isParamList());
1197:       assertEquals((-1), node0.getSourcePosition());
1198:       assertFalse(node0.isDebugger());
1199:       assertFalse(node0.isLabelName());
1200:       assertFalse(node0.isAssign());
1201:       assertFalse(node0.isEmpty());
1202:       assertFalse(node0.isDelProp());
1203:       assertFalse(node0.isGetElem());
1204:       assertFalse(node0.isArrayLit());
1205:       assertFalse(node0.isAssignAdd());
1206:       assertFalse(node0.isReturn());
1207:       assertFalse(node0.isTypeOf());
1208:       assertFalse(node0.hasChildren());
1209:       assertFalse(node0.isDec());
1210:       assertFalse(node0.isLabel());
1211:       assertFalse(node0.isDo());
1212:       assertFalse(node0.isDefaultCase());
1213:       assertFalse(node0.isExprResult());
1214:       assertFalse(node0.isVoid());
1215:       assertFalse(node0.isNew());
1216:       assertFalse(node0.isOr());
1217:       assertFalse(node0.isAdd());
1218:       assertFalse(node0.isNull());
1219:       assertFalse(node0.isTrue());
1220:       assertFalse(node0.isThrow());
1221:       assertFalse(node0.isFalse());
1222:       assertFalse(node0.isGetProp());
1223:       assertFalse(node0.isBreak());
1224:       assertFalse(node0.isInstanceOf());
1225:       assertFalse(node0.isComma());
1226:       assertFalse(node0.isThis());
1227:       assertFalse(node0.isHook());
1228:       assertFalse(node0.isNot());
1229:       assertFalse(node0.isAnd());
1230:       assertFalse(node0.isString());
1231:       assertFalse(node0.isSwitch());
1232:       assertFalse(node0.isScript());
1233:       assertFalse(node0.isCase());
1234:       assertEquals(1048576, node0.getType());
1235:       assertFalse(node0.isObjectLit());
1236:       assertEquals((-1), node0.getCharno());
1237:       assertFalse(node0.isFor());
1238:       assertFalse(node0.isGetterDef());
1239:       assertFalse(node0.isIf());
1240:       assertFalse(node0.isNumber());
1241:       assertFalse(node0.isCast());
1242:       assertFalse(node0.hasOneChild());
1243:       assertFalse(node0.isTry());
1244:       assertFalse(node0.hasMoreThanOneChild());
1245:       assertFalse(node0.isRegExp());
1246:       assertFalse(node0.isFunction());
1247:       assertFalse(node0.isWith());
1248:       assertFalse(node0.isCatch());
1249:       assertFalse(node0.isInc());
1250:       assertEquals((-1), node0.getLineno());
1251:       assertFalse(node0.isIn());
1252:       assertFalse(node0.isNE());
1253:       assertNotSame(node0, node3);
1254:       
1255:       Iterable<Node> iterable0 = node0.children();
1256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1257:       assertEquals(57, Node.LAST_PROP);
1258:       assertEquals(1, Node.DECR_FLAG);
1259:       assertEquals(49, Node.DIRECT_EVAL);
1260:       assertEquals(32, Node.INCRDECR_PROP);
1261:       assertEquals(12, Node.COLUMN_BITS);
1262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1263:       assertEquals(2, Node.POST_FLAG);
1264:       assertEquals(30, Node.VAR_ARGS_NAME);
1265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1266:       assertEquals(40, Node.ORIGINALNAME_PROP);
1267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1268:       assertEquals(46, Node.IS_NAMESPACE);
1269:       assertEquals(54, Node.SLASH_V);
1270:       assertEquals(50, Node.FREE_CALL);
1271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1273:       assertEquals(43, Node.IS_CONSTANT_NAME);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(53, Node.INPUT_ID);
1276:       assertEquals(4095, Node.COLUMN_MASK);
1277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1279:       assertEquals(47, Node.IS_DISPATCHER);
1280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1281:       assertEquals(29, Node.JSDOC_INFO_PROP);
1282:       assertEquals(56, Node.CHANGE_TIME);
1283:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1284:       assertEquals(48, Node.DIRECTIVES);
1285:       assertEquals(39, Node.EMPTY_BLOCK);
1286:       assertEquals(37, Node.OPT_ARG_NAME);
1287:       assertEquals(57, Node.REFLECTED_OBJECT);
1288:       assertEquals(55, Node.INFERRED_FUNCTION);
1289:       assertEquals(52, Node.LENGTH);
1290:       assertEquals(8, Node.FLAG_NO_THROWS);
1291:       assertEquals(36, Node.QUOTED_PROP);
1292:       assertFalse(node0.equals((Object)node1));
1293:       assertFalse(node0.equals((Object)node3));
1294:       assertFalse(iterable0.contains(node0));
1295:       assertNotNull(iterable0);
1296:       assertFalse(node0.isName());
1297:       assertFalse(node0.isStringKey());
1298:       assertFalse(node0.isSetterDef());
1299:       assertFalse(node0.isCall());
1300:       assertFalse(node0.isBlock());
1301:       assertFalse(node0.isVar());
1302:       assertEquals(0, node0.getChildCount());
1303:       assertFalse(node0.isContinue());
1304:       assertFalse(node0.isWhile());
1305:       assertFalse(node0.isParamList());
1306:       assertEquals((-1), node0.getSourcePosition());
1307:       assertFalse(node0.isDebugger());
1308:       assertFalse(node0.isLabelName());
1309:       assertFalse(node0.isAssign());
1310:       assertFalse(node0.isEmpty());
1311:       assertFalse(node0.isDelProp());
1312:       assertFalse(node0.isGetElem());
1313:       assertFalse(node0.isArrayLit());
1314:       assertFalse(node0.isAssignAdd());
1315:       assertFalse(node0.isReturn());
1316:       assertFalse(node0.isTypeOf());
1317:       assertFalse(node0.hasChildren());
1318:       assertFalse(node0.isDec());
1319:       assertFalse(node0.isLabel());
1320:       assertFalse(node0.isDo());
1321:       assertFalse(node0.isDefaultCase());
1322:       assertFalse(node0.isExprResult());
1323:       assertFalse(node0.isVoid());
1324:       assertFalse(node0.isNew());
1325:       assertFalse(node0.isOr());
1326:       assertFalse(node0.isAdd());
1327:       assertFalse(node0.isNull());
1328:       assertFalse(node0.isTrue());
1329:       assertFalse(node0.isThrow());
1330:       assertFalse(node0.isFalse());
1331:       assertFalse(node0.isGetProp());
1332:       assertFalse(node0.isBreak());
1333:       assertFalse(node0.isInstanceOf());
1334:       assertFalse(node0.isComma());
1335:       assertFalse(node0.isThis());
1336:       assertFalse(node0.isHook());
1337:       assertFalse(node0.isNot());
1338:       assertFalse(node0.isAnd());
1339:       assertFalse(node0.isString());
1340:       assertFalse(node0.isSwitch());
1341:       assertFalse(node0.isScript());
1342:       assertFalse(node0.isCase());
1343:       assertEquals(1048576, node0.getType());
1344:       assertFalse(node0.isObjectLit());
1345:       assertEquals((-1), node0.getCharno());
1346:       assertFalse(node0.isFor());
1347:       assertFalse(node0.isGetterDef());
1348:       assertFalse(node0.isIf());
1349:       assertFalse(node0.isNumber());
1350:       assertFalse(node0.isCast());
1351:       assertFalse(node0.hasOneChild());
1352:       assertFalse(node0.isTry());
1353:       assertFalse(node0.hasMoreThanOneChild());
1354:       assertFalse(node0.isRegExp());
1355:       assertFalse(node0.isFunction());
1356:       assertFalse(node0.isWith());
1357:       assertFalse(node0.isCatch());
1358:       assertFalse(node0.isInc());
1359:       assertEquals((-1), node0.getLineno());
1360:       assertFalse(node0.isIn());
1361:       assertFalse(node0.isNE());
1362:       assertNotSame(node0, node3);
1363:       
1364:       // Undeclared exception!
1365:       try { 
1366:         Node.newString((String) null);
1367:         fail("Expecting exception: IllegalArgumentException");
1368:       
1369:       } catch(IllegalArgumentException e) {
1370:          //
1371:          // StringNode: str is null
1372:          //
1373:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
1374:       }
1375:   }
1376: }
RegularFileObject[/tmp/EvoSuite_35_1605714116685/com/google/javascript/rhino/Node_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:57 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_35_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.common.collect.Iterators$12",
123:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
124:       "com.google.common.collect.Iterators$11",
125:       "com.google.javascript.rhino.jstype.JSType$1",
126:       "com.google.common.collect.EmptyImmutableBiMap",
127:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
128:       "com.google.common.base.Predicate",
129:       "com.google.javascript.rhino.jstype.VoidType",
130:       "com.google.common.base.Joiner",
131:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
132:       "com.google.common.collect.AbstractListMultimap",
133:       "com.google.javascript.rhino.jstype.JSType",
134:       "com.google.common.collect.ImmutableAsList",
135:       "com.google.javascript.rhino.Node$StringNode",
136:       "com.google.javascript.rhino.jstype.ProxyObjectType",
137:       "com.google.common.collect.Sets$SetView",
138:       "com.google.common.collect.RegularImmutableAsList",
139:       "com.google.javascript.rhino.jstype.TemplateType",
140:       "com.google.javascript.rhino.jstype.NamedType",
141:       "com.google.common.collect.Iterators$13",
142:       "com.google.javascript.rhino.InputId",
143:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
144:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
145:       "com.google.common.collect.AbstractMapBasedMultimap",
146:       "com.google.common.collect.Lists$Partition",
147:       "com.google.common.collect.Lists",
148:       "com.google.javascript.rhino.Node$SideEffectFlags",
149:       "com.google.common.collect.UnmodifiableListIterator",
150:       "com.google.javascript.rhino.jstype.NullType",
151:       "com.google.common.collect.Lists$TransformingSequentialList",
152:       "com.google.javascript.rhino.ErrorReporter",
153:       "com.google.javascript.rhino.jstype.UnknownType",
154:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
155:       "com.google.javascript.rhino.jstype.ValueType",
156:       "com.google.javascript.rhino.jstype.PropertyMap",
157:       "com.google.javascript.rhino.Token",
158:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
159:       "com.google.common.collect.ObjectArrays",
160:       "com.google.javascript.rhino.jstype.StaticSourceFile",
161:       "com.google.javascript.rhino.jstype.BooleanType",
162:       "com.google.javascript.rhino.jstype.NoObjectType",
163:       "com.google.common.collect.AbstractIterator",
164:       "com.google.javascript.rhino.jstype.FunctionBuilder",
165:       "com.google.javascript.rhino.jstype.JSType$TypePair",
166:       "com.google.common.base.Joiner$MapJoiner",
167:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
168:       "com.google.common.collect.ImmutableList$1",
169:       "com.google.common.collect.MapDifference",
170:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
171:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
172:       "com.google.common.collect.Sets$ImprovedAbstractSet",
173:       "com.google.javascript.rhino.jstype.FunctionType",
174:       "com.google.common.base.Preconditions",
175:       "com.google.common.collect.UnmodifiableIterator",
176:       "com.google.javascript.rhino.JSDocInfo",
177:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
178:       "com.google.javascript.rhino.jstype.Property",
179:       "com.google.common.collect.ImmutableMapValues",
180:       "com.google.common.collect.ImmutableEntry",
181:       "com.google.common.base.Joiner$1",
182:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
183:       "com.google.common.base.Joiner$2",
184:       "com.google.common.collect.ImmutableCollection",
185:       "com.google.common.collect.ImmutableEnumMap",
186:       "com.google.javascript.rhino.jstype.TernaryValue",
187:       "com.google.javascript.rhino.Node$AncestorIterable",
188:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
189:       "com.google.common.collect.Lists$RandomAccessListWrapper",
190:       "com.google.common.collect.ImmutableEnumSet",
191:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
192:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
193:       "com.google.javascript.rhino.jstype.EnumElementType",
194:       "com.google.javascript.rhino.jstype.UnionType",
195:       "com.google.common.base.Objects",
196:       "com.google.javascript.rhino.Node$NumberNode",
197:       "com.google.common.collect.SingletonImmutableList",
198:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
199:       "com.google.common.collect.ImmutableCollection$Builder",
200:       "com.google.javascript.rhino.jstype.StaticSlot",
201:       "com.google.common.collect.Iterators$6",
202:       "com.google.common.collect.BiMap",
203:       "com.google.common.collect.Iterators$7",
204:       "com.google.common.collect.AbstractSetMultimap",
205:       "com.google.common.base.Function",
206:       "com.google.common.collect.ImmutableSet",
207:       "com.google.common.collect.Lists$AbstractListWrapper",
208:       "com.google.common.collect.ImmutableMap",
209:       "com.google.common.collect.AbstractIndexedListIterator",
210:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
211:       "com.google.common.collect.Maps$1",
212:       "com.google.javascript.rhino.jstype.EnumType",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
234:       "com.google.common.collect.ImmutableList",
235:       "com.google.common.collect.SingletonImmutableBiMap",
236:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
237:       "com.google.javascript.rhino.jstype.StringType",
238:       "com.google.javascript.rhino.Node$AbstractPropListItem",
239:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
240:       "com.google.javascript.rhino.jstype.TemplatizedType",
241:       "com.google.javascript.rhino.jstype.Visitor",
242:       "com.google.javascript.rhino.jstype.NoResolvedType",
243:       "com.google.javascript.rhino.jstype.JSTypeNative",
244:       "com.google.javascript.rhino.jstype.AllType",
245:       "com.google.common.collect.Maps",
246:       "com.google.common.collect.SetMultimap",
247:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
248:       "com.google.common.collect.Maps$EntryTransformer",
249:       "com.google.javascript.rhino.JSTypeExpression",
250:       "com.google.common.collect.Iterators$MergingIterator"
251:     );
252:   } 
253: 
254:   private static void resetClasses() {
255:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
256: 
257:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
258:       "com.google.javascript.rhino.Node",
259:       "com.google.javascript.rhino.Node$NumberNode",
260:       "com.google.javascript.rhino.Node$StringNode",
261:       "com.google.javascript.rhino.Node$AbstractPropListItem",
262:       "com.google.javascript.rhino.Node$ObjectPropListItem",
263:       "com.google.javascript.rhino.Node$IntPropListItem",
264:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
265:       "com.google.javascript.rhino.Node$AncestorIterable",
266:       "com.google.javascript.rhino.Node$NodeMismatch",
267:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
268:       "com.google.javascript.rhino.Node$SideEffectFlags",
269:       "com.google.javascript.rhino.Token",
270:       "com.google.common.base.Preconditions",
271:       "com.google.javascript.rhino.SimpleErrorReporter",
272:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
273:       "com.google.common.base.Joiner",
274:       "com.google.common.base.Joiner$1",
275:       "com.google.common.collect.Collections2",
276:       "com.google.common.base.Joiner$MapJoiner",
277:       "com.google.common.collect.Maps",
278:       "com.google.common.collect.AbstractMultimap",
279:       "com.google.common.collect.AbstractMapBasedMultimap",
280:       "com.google.common.collect.AbstractSetMultimap",
281:       "com.google.common.collect.LinkedHashMultimap",
282:       "com.google.common.collect.AbstractMapEntry",
283:       "com.google.common.collect.ImmutableEntry",
284:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
285:       "com.google.common.collect.AbstractListMultimap",
286:       "com.google.common.collect.ArrayListMultimap",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
288:       "com.google.common.collect.ImmutableCollection",
289:       "com.google.common.collect.RegularImmutableList",
290:       "com.google.common.collect.ObjectArrays",
291:       "com.google.common.collect.ImmutableList",
292:       "com.google.javascript.rhino.jstype.ModificationVisitor",
293:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
294:       "com.google.common.collect.ImmutableCollection$Builder",
295:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
296:       "com.google.common.collect.ImmutableList$Builder",
297:       "com.google.common.collect.UnmodifiableIterator",
298:       "com.google.common.collect.UnmodifiableListIterator",
299:       "com.google.common.collect.Iterators$1",
300:       "com.google.common.collect.Iterators$2",
301:       "com.google.common.collect.Iterators",
302:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
303:       "com.google.javascript.rhino.jstype.JSType$1",
304:       "com.google.javascript.rhino.jstype.JSType",
305:       "com.google.javascript.rhino.jstype.ObjectType",
306:       "com.google.javascript.rhino.jstype.ProxyObjectType",
307:       "com.google.javascript.rhino.jstype.TemplateType",
308:       "com.google.javascript.rhino.jstype.ValueType",
309:       "com.google.javascript.rhino.jstype.BooleanType",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.javascript.rhino.jstype.NumberType",
312:       "com.google.javascript.rhino.jstype.StringType",
313:       "com.google.javascript.rhino.jstype.UnknownType",
314:       "com.google.javascript.rhino.jstype.VoidType",
315:       "com.google.javascript.rhino.jstype.AllType",
316:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
317:       "com.google.common.collect.ImmutableMap",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.collect.EmptyImmutableBiMap",
320:       "com.google.javascript.rhino.jstype.PropertyMap$1",
321:       "com.google.javascript.rhino.jstype.PropertyMap",
322:       "com.google.javascript.rhino.jstype.FunctionType",
323:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
324:       "com.google.javascript.rhino.jstype.ArrowType",
325:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
326:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
327:       "com.google.javascript.rhino.jstype.InstanceObjectType",
328:       "com.google.javascript.rhino.jstype.Property",
329:       "com.google.common.collect.Lists",
330:       "com.google.javascript.rhino.jstype.NoObjectType",
331:       "com.google.javascript.rhino.jstype.NoType",
332:       "com.google.javascript.rhino.jstype.NoResolvedType",
333:       "com.google.common.collect.SingletonImmutableList",
334:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
335:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
336:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
337:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
338:       "com.google.javascript.rhino.jstype.UnionType",
339:       "com.google.javascript.rhino.jstype.FunctionBuilder",
340:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.base.Objects",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
354:     );
355:   }
356: }

[MASTER] 15:41:57.169 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(52, "Number node not created with Node.newNumber");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(52, node0.getType());

node0.type = 1048576;
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());

node0.putBooleanProp(1369, true);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());

boolean boolean0 = node0.isVarArgs();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(boolean0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());

Node node1 = new Node(1405);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(1405, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(1405, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

Node node2 = node1.getAncestor(57);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertNull(node2);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(1405, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

Node node3 = Node.newString("Number node not created with Node.newNumber");
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotNull(node3);
assertEquals(0, node3.getChildCount());
assertEquals(40, node3.getType());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertTrue(node3.isString());
assertFalse(node3.isTrue());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isInc());
assertFalse(node3.isDebugger());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isThis());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isNumber());
assertFalse(node3.isDo());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isCase());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertNotSame(node3, node0);

Node node4 = node1.getAncestor(52);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertNull(node4);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(1405, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

boolean boolean1 = node0.isVar();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertNotSame(node0, node3);

node0.addSuppression("|t@8|`i3z{<~");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertNotSame(node0, node3);

Iterable<Node> iterable0 = node0.children();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(1048576, node0.getType());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertNotSame(node0, node3);

Node.newString((String) null);

[MASTER] 15:41:57.530 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_36_1605714117181/com/google/javascript/rhino/Node_36_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_36_1605714117181/com/google/javascript/rhino/Node_36_tmp__ESTest_scaffolding.java]]
[MASTER] 15:41:57.531 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:57.531 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 15:41:57.554 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1246
[MASTER] 15:41:57.557 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_36_1605714117181/com/google/javascript/rhino/Node_36_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 18 15:41:57 GMT 2020
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_36_tmp__ESTest extends Node_36_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1444));
22:       assertNotNull(node_SideEffectFlags0);
23:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
24:       assertEquals((-1444), node_SideEffectFlags0.valueOf());
25:       
26:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
27:       assertNotNull(node_SideEffectFlags1);
28:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
29:       assertEquals((-1460), node_SideEffectFlags0.valueOf());
30:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
31:       assertEquals((-1460), node_SideEffectFlags1.valueOf());
32:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
33:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
34:       
35:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
36:       assertNotNull(node_SideEffectFlags2);
37:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
38:       assertEquals(0, node_SideEffectFlags0.valueOf());
39:       assertEquals(0, node_SideEffectFlags1.valueOf());
40:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
41:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
42:       assertEquals(0, node_SideEffectFlags2.valueOf());
43:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
44:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
45:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
46:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
47:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
48:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
49:       
50:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
51:       assertNotNull(node_SideEffectFlags3);
52:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
53:       assertEquals(31, node_SideEffectFlags0.valueOf());
54:       assertEquals(31, node_SideEffectFlags1.valueOf());
55:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
56:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
57:       assertEquals(31, node_SideEffectFlags3.valueOf());
58:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
59:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
60:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
61:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
62:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
63:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
64:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
65:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
66:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
67:       
68:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
69:       assertNotNull(node_SideEffectFlags4);
70:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
71:       assertEquals(24, node_SideEffectFlags0.valueOf());
72:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
73:       assertEquals(24, node_SideEffectFlags4.valueOf());
74:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
75:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
76:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
77:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
78:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
79:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
80:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
81:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
82:       
83:       node_SideEffectFlags3.clearSideEffectFlags();
84:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
85:       assertEquals(31, node_SideEffectFlags0.valueOf());
86:       assertEquals(31, node_SideEffectFlags1.valueOf());
87:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
88:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
89:       assertEquals(31, node_SideEffectFlags3.valueOf());
90:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
91:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
92:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
93:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
94:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
95:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
96:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
97:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
98:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
99:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
100:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
101:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
102:       
103:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
104:       assertNotNull(node_SideEffectFlags5);
105:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
106:       assertEquals(27, node_SideEffectFlags0.valueOf());
107:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
108:       assertEquals(27, node_SideEffectFlags1.valueOf());
109:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
110:       assertEquals(27, node_SideEffectFlags3.valueOf());
111:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
112:       assertEquals(27, node_SideEffectFlags5.valueOf());
113:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
114:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
115:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
116:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
117:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
118:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
119:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
120:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
121:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
122:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
123:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
124:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
125:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
126:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
127:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
128:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
129:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
130:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
131:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
132:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
133:       
134:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesThis();
135:       assertNotNull(node_SideEffectFlags6);
136:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
137:       assertEquals(25, node_SideEffectFlags0.valueOf());
138:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
139:       assertEquals(25, node_SideEffectFlags1.valueOf());
140:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
141:       assertEquals(25, node_SideEffectFlags3.valueOf());
142:       assertEquals(25, node_SideEffectFlags6.valueOf());
143:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
144:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
145:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
146:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
147:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
148:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
149:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
150:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
151:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
152:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
153:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
154:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
155:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
156:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
157:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
158:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
159:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
160:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
161:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
162:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
163:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
164:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
165:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
166:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
167:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
168:       
169:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesArguments();
170:       assertNotNull(node_SideEffectFlags7);
171:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
172:       assertEquals(25, node_SideEffectFlags0.valueOf());
173:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
174:       assertEquals(25, node_SideEffectFlags1.valueOf());
175:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
176:       assertEquals(25, node_SideEffectFlags3.valueOf());
177:       assertEquals(25, node_SideEffectFlags6.valueOf());
178:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
179:       assertFalse(node_SideEffectFlags7.areAllFlagsSet());
180:       assertEquals(25, node_SideEffectFlags7.valueOf());
181:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
182:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
183:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
184:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
185:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
186:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
187:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
188:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
189:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
190:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
191:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
192:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
193:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
194:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
195:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
196:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
197:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
198:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
199:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
200:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
201:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
202:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
203:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
204:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
205:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
206:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
207:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
208:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
209:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
210:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
211:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
212:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
213:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
214:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
215:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
216:       
217:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags6.clearAllFlags();
218:       assertNotNull(node_SideEffectFlags8);
219:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
220:       assertEquals(31, node_SideEffectFlags0.valueOf());
221:       assertEquals(31, node_SideEffectFlags1.valueOf());
222:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
223:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
224:       assertEquals(31, node_SideEffectFlags3.valueOf());
225:       assertEquals(31, node_SideEffectFlags6.valueOf());
226:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
227:       assertEquals(31, node_SideEffectFlags8.valueOf());
228:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
229:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
230:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
231:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
232:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
233:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
234:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
235:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
236:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
237:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
238:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
239:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
240:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
241:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
242:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
243:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
244:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
245:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
246:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
247:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
248:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
249:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
250:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
251:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
252:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
253:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
254:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
255:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
256:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
257:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
258:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
259:       assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
260:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
261:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
262:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
263:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
264:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
265:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
266:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
267:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
268:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
269:       
270:       Node node0 = Node.newString(2427, "PRZ`");
271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
273:       assertEquals(56, Node.CHANGE_TIME);
274:       assertEquals(36, Node.QUOTED_PROP);
275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
277:       assertEquals(53, Node.INPUT_ID);
278:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
279:       assertEquals(55, Node.INFERRED_FUNCTION);
280:       assertEquals(29, Node.JSDOC_INFO_PROP);
281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
282:       assertEquals(46, Node.IS_NAMESPACE);
283:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
284:       assertEquals(43, Node.IS_CONSTANT_NAME);
285:       assertEquals(47, Node.IS_DISPATCHER);
286:       assertEquals(2, Node.POST_FLAG);
287:       assertEquals(30, Node.VAR_ARGS_NAME);
288:       assertEquals(40, Node.ORIGINALNAME_PROP);
289:       assertEquals(57, Node.REFLECTED_OBJECT);
290:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
291:       assertEquals(54, Node.SLASH_V);
292:       assertEquals(15, Node.NO_SIDE_EFFECTS);
293:       assertEquals(8, Node.FLAG_NO_THROWS);
294:       assertEquals(39, Node.EMPTY_BLOCK);
295:       assertEquals(57, Node.LAST_PROP);
296:       assertEquals(50, Node.FREE_CALL);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(52, Node.LENGTH);
299:       assertEquals(12, Node.COLUMN_BITS);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(32, Node.INCRDECR_PROP);
302:       assertEquals(1, Node.DECR_FLAG);
303:       assertEquals(37, Node.OPT_ARG_NAME);
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(49, Node.DIRECT_EVAL);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertNotNull(node0);
308:       assertFalse(node0.isReturn());
309:       assertFalse(node0.isOr());
310:       assertFalse(node0.isLabel());
311:       assertEquals((-1), node0.getLineno());
312:       assertFalse(node0.isAssignAdd());
313:       assertFalse(node0.isWhile());
314:       assertFalse(node0.isNumber());
315:       assertFalse(node0.isDo());
316:       assertEquals((-1), node0.getSourcePosition());
317:       assertFalse(node0.isAdd());
318:       assertFalse(node0.isNew());
319:       assertFalse(node0.isVar());
320:       assertFalse(node0.isStringKey());
321:       assertFalse(node0.isLabelName());
322:       assertFalse(node0.isContinue());
323:       assertFalse(node0.isCast());
324:       assertFalse(node0.isThis());
325:       assertFalse(node0.isParamList());
326:       assertFalse(node0.isSetterDef());
327:       assertFalse(node0.isScript());
328:       assertFalse(node0.isHook());
329:       assertFalse(node0.isTry());
330:       assertFalse(node0.hasOneChild());
331:       assertFalse(node0.isBlock());
332:       assertFalse(node0.isFor());
333:       assertFalse(node0.isIf());
334:       assertFalse(node0.isWith());
335:       assertFalse(node0.isRegExp());
336:       assertFalse(node0.hasMoreThanOneChild());
337:       assertFalse(node0.isCatch());
338:       assertFalse(node0.isInstanceOf());
339:       assertFalse(node0.isIn());
340:       assertFalse(node0.isNE());
341:       assertFalse(node0.isGetterDef());
342:       assertFalse(node0.isString());
343:       assertFalse(node0.isCase());
344:       assertFalse(node0.isInc());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isArrayLit());
347:       assertEquals((-1), node0.getCharno());
348:       assertFalse(node0.isDebugger());
349:       assertFalse(node0.isSwitch());
350:       assertEquals(2427, node0.getType());
351:       assertFalse(node0.isThrow());
352:       assertFalse(node0.isFalse());
353:       assertFalse(node0.isFunction());
354:       assertEquals(0, node0.getChildCount());
355:       assertFalse(node0.isAnd());
356:       assertFalse(node0.isNull());
357:       assertFalse(node0.isDefaultCase());
358:       assertFalse(node0.isNot());
359:       assertFalse(node0.isObjectLit());
360:       assertFalse(node0.isGetProp());
361:       assertFalse(node0.isTrue());
362:       assertFalse(node0.isVoid());
363:       assertFalse(node0.isBreak());
364:       assertFalse(node0.isDelProp());
365:       assertFalse(node0.hasChildren());
366:       assertFalse(node0.isName());
367:       assertFalse(node0.isAssign());
368:       assertFalse(node0.isTypeOf());
369:       assertFalse(node0.isComma());
370:       assertFalse(node0.isDec());
371:       assertFalse(node0.isCall());
372:       assertFalse(node0.isExprResult());
373:       assertFalse(node0.isGetElem());
374:       
375:       Node node1 = new Node(2427, node0, node0, 4, (-3007));
376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
378:       assertEquals(56, Node.CHANGE_TIME);
379:       assertEquals(36, Node.QUOTED_PROP);
380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
382:       assertEquals(53, Node.INPUT_ID);
383:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
384:       assertEquals(55, Node.INFERRED_FUNCTION);
385:       assertEquals(29, Node.JSDOC_INFO_PROP);
386:       assertEquals(51, Node.STATIC_SOURCE_FILE);
387:       assertEquals(46, Node.IS_NAMESPACE);
388:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
389:       assertEquals(43, Node.IS_CONSTANT_NAME);
390:       assertEquals(47, Node.IS_DISPATCHER);
391:       assertEquals(2, Node.POST_FLAG);
392:       assertEquals(30, Node.VAR_ARGS_NAME);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(57, Node.REFLECTED_OBJECT);
395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(57, Node.LAST_PROP);
401:       assertEquals(50, Node.FREE_CALL);
402:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
403:       assertEquals(52, Node.LENGTH);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(4095, Node.COLUMN_MASK);
406:       assertEquals(32, Node.INCRDECR_PROP);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(37, Node.OPT_ARG_NAME);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(49, Node.DIRECT_EVAL);
411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
412:       assertEquals(55, Node.INFERRED_FUNCTION);
413:       assertEquals(4095, Node.COLUMN_MASK);
414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(46, Node.IS_NAMESPACE);
424:       assertEquals(54, Node.SLASH_V);
425:       assertEquals(30, Node.VAR_ARGS_NAME);
426:       assertEquals(49, Node.DIRECT_EVAL);
427:       assertEquals(57, Node.LAST_PROP);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
430:       assertEquals(32, Node.INCRDECR_PROP);
431:       assertEquals(2, Node.POST_FLAG);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
436:       assertEquals(29, Node.JSDOC_INFO_PROP);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
439:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
440:       assertEquals(39, Node.EMPTY_BLOCK);
441:       assertEquals(52, Node.LENGTH);
442:       assertEquals(48, Node.DIRECTIVES);
443:       assertEquals(8, Node.FLAG_NO_THROWS);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(56, Node.CHANGE_TIME);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(57, Node.REFLECTED_OBJECT);
448:       assertFalse(node1.equals((Object)node0));
449:       assertNotNull(node1);
450:       assertFalse(node0.isReturn());
451:       assertFalse(node0.isOr());
452:       assertFalse(node0.isLabel());
453:       assertEquals((-1), node0.getLineno());
454:       assertFalse(node0.isAssignAdd());
455:       assertFalse(node0.isWhile());
456:       assertFalse(node0.isNumber());
457:       assertFalse(node0.isDo());
458:       assertEquals((-1), node0.getSourcePosition());
459:       assertFalse(node0.isAdd());
460:       assertFalse(node0.isNew());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isStringKey());
463:       assertFalse(node0.isLabelName());
464:       assertFalse(node0.isContinue());
465:       assertFalse(node0.isCast());
466:       assertFalse(node0.isThis());
467:       assertFalse(node0.isParamList());
468:       assertFalse(node0.isSetterDef());
469:       assertFalse(node0.isScript());
470:       assertFalse(node0.isHook());
471:       assertFalse(node0.isTry());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isBlock());
474:       assertFalse(node0.isFor());
475:       assertFalse(node0.isIf());
476:       assertFalse(node0.isWith());
477:       assertFalse(node0.isRegExp());
478:       assertFalse(node0.hasMoreThanOneChild());
479:       assertFalse(node0.isCatch());
480:       assertFalse(node0.isInstanceOf());
481:       assertFalse(node0.isIn());
482:       assertFalse(node0.isNE());
483:       assertFalse(node0.isGetterDef());
484:       assertFalse(node0.isString());
485:       assertFalse(node0.isCase());
486:       assertFalse(node0.isInc());
487:       assertFalse(node0.isEmpty());
488:       assertFalse(node0.isArrayLit());
489:       assertEquals((-1), node0.getCharno());
490:       assertFalse(node0.isDebugger());
491:       assertFalse(node0.isSwitch());
492:       assertEquals(2427, node0.getType());
493:       assertFalse(node0.isThrow());
494:       assertFalse(node0.isFalse());
495:       assertFalse(node0.isFunction());
496:       assertEquals(0, node0.getChildCount());
497:       assertFalse(node0.isAnd());
498:       assertFalse(node0.isNull());
499:       assertFalse(node0.isDefaultCase());
500:       assertFalse(node0.isNot());
501:       assertFalse(node0.isObjectLit());
502:       assertFalse(node0.isGetProp());
503:       assertFalse(node0.isTrue());
504:       assertFalse(node0.isVoid());
505:       assertFalse(node0.isBreak());
506:       assertFalse(node0.isDelProp());
507:       assertFalse(node0.hasChildren());
508:       assertFalse(node0.isName());
509:       assertFalse(node0.isAssign());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isComma());
512:       assertFalse(node0.isDec());
513:       assertFalse(node0.isCall());
514:       assertFalse(node0.isExprResult());
515:       assertFalse(node0.isGetElem());
516:       assertFalse(node1.isGetterDef());
517:       assertFalse(node1.isDelProp());
518:       assertFalse(node1.isArrayLit());
519:       assertFalse(node1.isEmpty());
520:       assertFalse(node1.isTry());
521:       assertFalse(node1.isRegExp());
522:       assertFalse(node1.isFunction());
523:       assertFalse(node1.isDefaultCase());
524:       assertEquals(1, node1.getChildCount());
525:       assertTrue(node1.hasOneChild());
526:       assertFalse(node1.isFor());
527:       assertFalse(node1.isCase());
528:       assertFalse(node1.isString());
529:       assertEquals((-1), node1.getCharno());
530:       assertFalse(node1.isParamList());
531:       assertFalse(node1.isDebugger());
532:       assertFalse(node1.isSwitch());
533:       assertEquals(2427, node1.getType());
534:       assertFalse(node1.isStringKey());
535:       assertFalse(node1.isName());
536:       assertFalse(node1.isBreak());
537:       assertFalse(node1.isCall());
538:       assertFalse(node1.isAdd());
539:       assertFalse(node1.isGetProp());
540:       assertFalse(node1.isNew());
541:       assertFalse(node1.isComma());
542:       assertFalse(node1.isWhile());
543:       assertFalse(node1.isVar());
544:       assertFalse(node1.isDo());
545:       assertFalse(node1.isExprResult());
546:       assertFalse(node1.isOr());
547:       assertFalse(node1.isVoid());
548:       assertFalse(node1.isNull());
549:       assertFalse(node1.isTrue());
550:       assertFalse(node1.isGetElem());
551:       assertFalse(node1.isLabelName());
552:       assertFalse(node1.isAssign());
553:       assertFalse(node1.isNumber());
554:       assertFalse(node1.isCast());
555:       assertFalse(node1.isLabel());
556:       assertFalse(node1.isAssignAdd());
557:       assertFalse(node1.isTypeOf());
558:       assertFalse(node1.isDec());
559:       assertFalse(node1.isReturn());
560:       assertFalse(node1.isAnd());
561:       assertFalse(node1.isContinue());
562:       assertFalse(node1.isNot());
563:       assertFalse(node1.isObjectLit());
564:       assertFalse(node1.isScript());
565:       assertEquals((-1), node1.getSourcePosition());
566:       assertFalse(node1.isThrow());
567:       assertFalse(node1.isFalse());
568:       assertFalse(node1.isSetterDef());
569:       assertFalse(node1.isHook());
570:       assertFalse(node1.isThis());
571:       assertFalse(node1.isBlock());
572:       assertFalse(node1.hasMoreThanOneChild());
573:       assertFalse(node1.isWith());
574:       assertFalse(node1.isInstanceOf());
575:       assertFalse(node1.isIn());
576:       assertFalse(node1.isCatch());
577:       assertFalse(node1.isInc());
578:       assertTrue(node1.hasChildren());
579:       assertEquals((-1), node1.getLineno());
580:       assertFalse(node1.isIf());
581:       assertFalse(node1.isNE());
582:       
583:       boolean boolean0 = node1.isGetProp();
584:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
585:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
586:       assertEquals(56, Node.CHANGE_TIME);
587:       assertEquals(36, Node.QUOTED_PROP);
588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertEquals(53, Node.INPUT_ID);
591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
592:       assertEquals(55, Node.INFERRED_FUNCTION);
593:       assertEquals(29, Node.JSDOC_INFO_PROP);
594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
595:       assertEquals(46, Node.IS_NAMESPACE);
596:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
597:       assertEquals(43, Node.IS_CONSTANT_NAME);
598:       assertEquals(47, Node.IS_DISPATCHER);
599:       assertEquals(2, Node.POST_FLAG);
600:       assertEquals(30, Node.VAR_ARGS_NAME);
601:       assertEquals(40, Node.ORIGINALNAME_PROP);
602:       assertEquals(57, Node.REFLECTED_OBJECT);
603:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
604:       assertEquals(54, Node.SLASH_V);
605:       assertEquals(15, Node.NO_SIDE_EFFECTS);
606:       assertEquals(8, Node.FLAG_NO_THROWS);
607:       assertEquals(39, Node.EMPTY_BLOCK);
608:       assertEquals(57, Node.LAST_PROP);
609:       assertEquals(50, Node.FREE_CALL);
610:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
611:       assertEquals(52, Node.LENGTH);
612:       assertEquals(12, Node.COLUMN_BITS);
613:       assertEquals(4095, Node.COLUMN_MASK);
614:       assertEquals(32, Node.INCRDECR_PROP);
615:       assertEquals(1, Node.DECR_FLAG);
616:       assertEquals(37, Node.OPT_ARG_NAME);
617:       assertEquals(48, Node.DIRECTIVES);
618:       assertEquals(49, Node.DIRECT_EVAL);
619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
620:       assertEquals(55, Node.INFERRED_FUNCTION);
621:       assertEquals(4095, Node.COLUMN_MASK);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
625:       assertEquals(50, Node.FREE_CALL);
626:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
627:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
628:       assertEquals(40, Node.ORIGINALNAME_PROP);
629:       assertEquals(43, Node.IS_CONSTANT_NAME);
630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
631:       assertEquals(46, Node.IS_NAMESPACE);
632:       assertEquals(54, Node.SLASH_V);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(49, Node.DIRECT_EVAL);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(15, Node.NO_SIDE_EFFECTS);
638:       assertEquals(32, Node.INCRDECR_PROP);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(47, Node.IS_DISPATCHER);
641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
642:       assertEquals(12, Node.COLUMN_BITS);
643:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
648:       assertEquals(39, Node.EMPTY_BLOCK);
649:       assertEquals(52, Node.LENGTH);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(8, Node.FLAG_NO_THROWS);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertEquals(56, Node.CHANGE_TIME);
654:       assertEquals(36, Node.QUOTED_PROP);
655:       assertEquals(57, Node.REFLECTED_OBJECT);
656:       assertFalse(boolean0);
657:       assertFalse(node0.equals((Object)node1));
658:       assertFalse(node1.equals((Object)node0));
659:       assertFalse(node0.isReturn());
660:       assertFalse(node0.isOr());
661:       assertFalse(node0.isLabel());
662:       assertEquals((-1), node0.getLineno());
663:       assertFalse(node0.isAssignAdd());
664:       assertFalse(node0.isWhile());
665:       assertFalse(node0.isNumber());
666:       assertFalse(node0.isDo());
667:       assertEquals((-1), node0.getSourcePosition());
668:       assertFalse(node0.isAdd());
669:       assertFalse(node0.isNew());
670:       assertFalse(node0.isVar());
671:       assertFalse(node0.isStringKey());
672:       assertFalse(node0.isLabelName());
673:       assertFalse(node0.isContinue());
674:       assertFalse(node0.isCast());
675:       assertFalse(node0.isThis());
676:       assertFalse(node0.isParamList());
677:       assertFalse(node0.isSetterDef());
678:       assertFalse(node0.isScript());
679:       assertFalse(node0.isHook());
680:       assertFalse(node0.isTry());
681:       assertFalse(node0.hasOneChild());
682:       assertFalse(node0.isBlock());
683:       assertFalse(node0.isFor());
684:       assertFalse(node0.isIf());
685:       assertFalse(node0.isWith());
686:       assertFalse(node0.isRegExp());
687:       assertFalse(node0.hasMoreThanOneChild());
688:       assertFalse(node0.isCatch());
689:       assertFalse(node0.isInstanceOf());
690:       assertFalse(node0.isIn());
691:       assertFalse(node0.isNE());
692:       assertFalse(node0.isGetterDef());
693:       assertFalse(node0.isString());
694:       assertFalse(node0.isCase());
695:       assertFalse(node0.isInc());
696:       assertFalse(node0.isEmpty());
697:       assertFalse(node0.isArrayLit());
698:       assertEquals((-1), node0.getCharno());
699:       assertFalse(node0.isDebugger());
700:       assertFalse(node0.isSwitch());
701:       assertEquals(2427, node0.getType());
702:       assertFalse(node0.isThrow());
703:       assertFalse(node0.isFalse());
704:       assertFalse(node0.isFunction());
705:       assertEquals(0, node0.getChildCount());
706:       assertFalse(node0.isAnd());
707:       assertFalse(node0.isNull());
708:       assertFalse(node0.isDefaultCase());
709:       assertFalse(node0.isNot());
710:       assertFalse(node0.isObjectLit());
711:       assertFalse(node0.isGetProp());
712:       assertFalse(node0.isTrue());
713:       assertFalse(node0.isVoid());
714:       assertFalse(node0.isBreak());
715:       assertFalse(node0.isDelProp());
716:       assertFalse(node0.hasChildren());
717:       assertFalse(node0.isName());
718:       assertFalse(node0.isAssign());
719:       assertFalse(node0.isTypeOf());
720:       assertFalse(node0.isComma());
721:       assertFalse(node0.isDec());
722:       assertFalse(node0.isCall());
723:       assertFalse(node0.isExprResult());
724:       assertFalse(node0.isGetElem());
725:       assertFalse(node1.isGetterDef());
726:       assertFalse(node1.isDelProp());
727:       assertFalse(node1.isArrayLit());
728:       assertFalse(node1.isEmpty());
729:       assertFalse(node1.isTry());
730:       assertFalse(node1.isRegExp());
731:       assertFalse(node1.isFunction());
732:       assertFalse(node1.isDefaultCase());
733:       assertEquals(1, node1.getChildCount());
734:       assertTrue(node1.hasOneChild());
735:       assertFalse(node1.isFor());
736:       assertFalse(node1.isCase());
737:       assertFalse(node1.isString());
738:       assertEquals((-1), node1.getCharno());
739:       assertFalse(node1.isParamList());
740:       assertFalse(node1.isDebugger());
741:       assertFalse(node1.isSwitch());
742:       assertEquals(2427, node1.getType());
743:       assertFalse(node1.isStringKey());
744:       assertFalse(node1.isName());
745:       assertFalse(node1.isBreak());
746:       assertFalse(node1.isCall());
747:       assertFalse(node1.isAdd());
748:       assertFalse(node1.isGetProp());
749:       assertFalse(node1.isNew());
750:       assertFalse(node1.isComma());
751:       assertFalse(node1.isWhile());
752:       assertFalse(node1.isVar());
753:       assertFalse(node1.isDo());
754:       assertFalse(node1.isExprResult());
755:       assertFalse(node1.isOr());
756:       assertFalse(node1.isVoid());
757:       assertFalse(node1.isNull());
758:       assertFalse(node1.isTrue());
759:       assertFalse(node1.isGetElem());
760:       assertFalse(node1.isLabelName());
761:       assertFalse(node1.isAssign());
762:       assertFalse(node1.isNumber());
763:       assertFalse(node1.isCast());
764:       assertFalse(node1.isLabel());
765:       assertFalse(node1.isAssignAdd());
766:       assertFalse(node1.isTypeOf());
767:       assertFalse(node1.isDec());
768:       assertFalse(node1.isReturn());
769:       assertFalse(node1.isAnd());
770:       assertFalse(node1.isContinue());
771:       assertFalse(node1.isNot());
772:       assertFalse(node1.isObjectLit());
773:       assertFalse(node1.isScript());
774:       assertEquals((-1), node1.getSourcePosition());
775:       assertFalse(node1.isThrow());
776:       assertFalse(node1.isFalse());
777:       assertFalse(node1.isSetterDef());
778:       assertFalse(node1.isHook());
779:       assertFalse(node1.isThis());
780:       assertFalse(node1.isBlock());
781:       assertFalse(node1.hasMoreThanOneChild());
782:       assertFalse(node1.isWith());
783:       assertFalse(node1.isInstanceOf());
784:       assertFalse(node1.isIn());
785:       assertFalse(node1.isCatch());
786:       assertFalse(node1.isInc());
787:       assertTrue(node1.hasChildren());
788:       assertEquals((-1), node1.getLineno());
789:       assertFalse(node1.isIf());
790:       assertFalse(node1.isNE());
791:       
792:       node1.putIntProp((-431), 53);
793:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
794:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(36, Node.QUOTED_PROP);
797:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
799:       assertEquals(53, Node.INPUT_ID);
800:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
801:       assertEquals(55, Node.INFERRED_FUNCTION);
802:       assertEquals(29, Node.JSDOC_INFO_PROP);
803:       assertEquals(51, Node.STATIC_SOURCE_FILE);
804:       assertEquals(46, Node.IS_NAMESPACE);
805:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
806:       assertEquals(43, Node.IS_CONSTANT_NAME);
807:       assertEquals(47, Node.IS_DISPATCHER);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(30, Node.VAR_ARGS_NAME);
810:       assertEquals(40, Node.ORIGINALNAME_PROP);
811:       assertEquals(57, Node.REFLECTED_OBJECT);
812:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
813:       assertEquals(54, Node.SLASH_V);
814:       assertEquals(15, Node.NO_SIDE_EFFECTS);
815:       assertEquals(8, Node.FLAG_NO_THROWS);
816:       assertEquals(39, Node.EMPTY_BLOCK);
817:       assertEquals(57, Node.LAST_PROP);
818:       assertEquals(50, Node.FREE_CALL);
819:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
820:       assertEquals(52, Node.LENGTH);
821:       assertEquals(12, Node.COLUMN_BITS);
822:       assertEquals(4095, Node.COLUMN_MASK);
823:       assertEquals(32, Node.INCRDECR_PROP);
824:       assertEquals(1, Node.DECR_FLAG);
825:       assertEquals(37, Node.OPT_ARG_NAME);
826:       assertEquals(48, Node.DIRECTIVES);
827:       assertEquals(49, Node.DIRECT_EVAL);
828:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
829:       assertEquals(55, Node.INFERRED_FUNCTION);
830:       assertEquals(4095, Node.COLUMN_MASK);
831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
832:       assertEquals(53, Node.INPUT_ID);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(50, Node.FREE_CALL);
835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
836:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
837:       assertEquals(40, Node.ORIGINALNAME_PROP);
838:       assertEquals(43, Node.IS_CONSTANT_NAME);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(54, Node.SLASH_V);
842:       assertEquals(30, Node.VAR_ARGS_NAME);
843:       assertEquals(49, Node.DIRECT_EVAL);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(15, Node.NO_SIDE_EFFECTS);
847:       assertEquals(32, Node.INCRDECR_PROP);
848:       assertEquals(2, Node.POST_FLAG);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
851:       assertEquals(12, Node.COLUMN_BITS);
852:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertEquals(39, Node.EMPTY_BLOCK);
858:       assertEquals(52, Node.LENGTH);
859:       assertEquals(48, Node.DIRECTIVES);
860:       assertEquals(8, Node.FLAG_NO_THROWS);
861:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
862:       assertEquals(56, Node.CHANGE_TIME);
863:       assertEquals(36, Node.QUOTED_PROP);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertFalse(node0.equals((Object)node1));
866:       assertFalse(node1.equals((Object)node0));
867:       assertFalse(node0.isReturn());
868:       assertFalse(node0.isOr());
869:       assertFalse(node0.isLabel());
870:       assertEquals((-1), node0.getLineno());
871:       assertFalse(node0.isAssignAdd());
872:       assertFalse(node0.isWhile());
873:       assertFalse(node0.isNumber());
874:       assertFalse(node0.isDo());
875:       assertEquals((-1), node0.getSourcePosition());
876:       assertFalse(node0.isAdd());
877:       assertFalse(node0.isNew());
878:       assertFalse(node0.isVar());
879:       assertFalse(node0.isStringKey());
880:       assertFalse(node0.isLabelName());
881:       assertFalse(node0.isContinue());
882:       assertFalse(node0.isCast());
883:       assertFalse(node0.isThis());
884:       assertFalse(node0.isParamList());
885:       assertFalse(node0.isSetterDef());
886:       assertFalse(node0.isScript());
887:       assertFalse(node0.isHook());
888:       assertFalse(node0.isTry());
889:       assertFalse(node0.hasOneChild());
890:       assertFalse(node0.isBlock());
891:       assertFalse(node0.isFor());
892:       assertFalse(node0.isIf());
893:       assertFalse(node0.isWith());
894:       assertFalse(node0.isRegExp());
895:       assertFalse(node0.hasMoreThanOneChild());
896:       assertFalse(node0.isCatch());
897:       assertFalse(node0.isInstanceOf());
898:       assertFalse(node0.isIn());
899:       assertFalse(node0.isNE());
900:       assertFalse(node0.isGetterDef());
901:       assertFalse(node0.isString());
902:       assertFalse(node0.isCase());
903:       assertFalse(node0.isInc());
904:       assertFalse(node0.isEmpty());
905:       assertFalse(node0.isArrayLit());
906:       assertEquals((-1), node0.getCharno());
907:       assertFalse(node0.isDebugger());
908:       assertFalse(node0.isSwitch());
909:       assertEquals(2427, node0.getType());
910:       assertFalse(node0.isThrow());
911:       assertFalse(node0.isFalse());
912:       assertFalse(node0.isFunction());
913:       assertEquals(0, node0.getChildCount());
914:       assertFalse(node0.isAnd());
915:       assertFalse(node0.isNull());
916:       assertFalse(node0.isDefaultCase());
917:       assertFalse(node0.isNot());
918:       assertFalse(node0.isObjectLit());
919:       assertFalse(node0.isGetProp());
920:       assertFalse(node0.isTrue());
921:       assertFalse(node0.isVoid());
922:       assertFalse(node0.isBreak());
923:       assertFalse(node0.isDelProp());
924:       assertFalse(node0.hasChildren());
925:       assertFalse(node0.isName());
926:       assertFalse(node0.isAssign());
927:       assertFalse(node0.isTypeOf());
928:       assertFalse(node0.isComma());
929:       assertFalse(node0.isDec());
930:       assertFalse(node0.isCall());
931:       assertFalse(node0.isExprResult());
932:       assertFalse(node0.isGetElem());
933:       assertFalse(node1.isGetterDef());
934:       assertFalse(node1.isDelProp());
935:       assertFalse(node1.isArrayLit());
936:       assertFalse(node1.isEmpty());
937:       assertFalse(node1.isTry());
938:       assertFalse(node1.isRegExp());
939:       assertFalse(node1.isFunction());
940:       assertFalse(node1.isDefaultCase());
941:       assertEquals(1, node1.getChildCount());
942:       assertTrue(node1.hasOneChild());
943:       assertFalse(node1.isFor());
944:       assertFalse(node1.isCase());
945:       assertFalse(node1.isString());
946:       assertEquals((-1), node1.getCharno());
947:       assertFalse(node1.isParamList());
948:       assertFalse(node1.isDebugger());
949:       assertFalse(node1.isSwitch());
950:       assertEquals(2427, node1.getType());
951:       assertFalse(node1.isStringKey());
952:       assertFalse(node1.isName());
953:       assertFalse(node1.isBreak());
954:       assertFalse(node1.isCall());
955:       assertFalse(node1.isAdd());
956:       assertFalse(node1.isGetProp());
957:       assertFalse(node1.isNew());
958:       assertFalse(node1.isComma());
959:       assertFalse(node1.isWhile());
960:       assertFalse(node1.isVar());
961:       assertFalse(node1.isDo());
962:       assertFalse(node1.isExprResult());
963:       assertFalse(node1.isOr());
964:       assertFalse(node1.isVoid());
965:       assertFalse(node1.isNull());
966:       assertFalse(node1.isTrue());
967:       assertFalse(node1.isGetElem());
968:       assertFalse(node1.isLabelName());
969:       assertFalse(node1.isAssign());
970:       assertFalse(node1.isNumber());
971:       assertFalse(node1.isCast());
972:       assertFalse(node1.isLabel());
973:       assertFalse(node1.isAssignAdd());
974:       assertFalse(node1.isTypeOf());
975:       assertFalse(node1.isDec());
976:       assertFalse(node1.isReturn());
977:       assertFalse(node1.isAnd());
978:       assertFalse(node1.isContinue());
979:       assertFalse(node1.isNot());
980:       assertFalse(node1.isObjectLit());
981:       assertFalse(node1.isScript());
982:       assertEquals((-1), node1.getSourcePosition());
983:       assertFalse(node1.isThrow());
984:       assertFalse(node1.isFalse());
985:       assertFalse(node1.isSetterDef());
986:       assertFalse(node1.isHook());
987:       assertFalse(node1.isThis());
988:       assertFalse(node1.isBlock());
989:       assertFalse(node1.hasMoreThanOneChild());
990:       assertFalse(node1.isWith());
991:       assertFalse(node1.isInstanceOf());
992:       assertFalse(node1.isIn());
993:       assertFalse(node1.isCatch());
994:       assertFalse(node1.isInc());
995:       assertTrue(node1.hasChildren());
996:       assertEquals((-1), node1.getLineno());
997:       assertFalse(node1.isIf());
998:       assertFalse(node1.isNE());
999:       
1000:       node1.putBooleanProp(52, true);
1001:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1002:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1003:       assertEquals(56, Node.CHANGE_TIME);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1006:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1007:       assertEquals(53, Node.INPUT_ID);
1008:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1009:       assertEquals(55, Node.INFERRED_FUNCTION);
1010:       assertEquals(29, Node.JSDOC_INFO_PROP);
1011:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1012:       assertEquals(46, Node.IS_NAMESPACE);
1013:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1014:       assertEquals(43, Node.IS_CONSTANT_NAME);
1015:       assertEquals(47, Node.IS_DISPATCHER);
1016:       assertEquals(2, Node.POST_FLAG);
1017:       assertEquals(30, Node.VAR_ARGS_NAME);
1018:       assertEquals(40, Node.ORIGINALNAME_PROP);
1019:       assertEquals(57, Node.REFLECTED_OBJECT);
1020:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1021:       assertEquals(54, Node.SLASH_V);
1022:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1023:       assertEquals(8, Node.FLAG_NO_THROWS);
1024:       assertEquals(39, Node.EMPTY_BLOCK);
1025:       assertEquals(57, Node.LAST_PROP);
1026:       assertEquals(50, Node.FREE_CALL);
1027:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1028:       assertEquals(52, Node.LENGTH);
1029:       assertEquals(12, Node.COLUMN_BITS);
1030:       assertEquals(4095, Node.COLUMN_MASK);
1031:       assertEquals(32, Node.INCRDECR_PROP);
1032:       assertEquals(1, Node.DECR_FLAG);
1033:       assertEquals(37, Node.OPT_ARG_NAME);
1034:       assertEquals(48, Node.DIRECTIVES);
1035:       assertEquals(49, Node.DIRECT_EVAL);
1036:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1037:       assertEquals(55, Node.INFERRED_FUNCTION);
1038:       assertEquals(4095, Node.COLUMN_MASK);
1039:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1040:       assertEquals(53, Node.INPUT_ID);
1041:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1042:       assertEquals(50, Node.FREE_CALL);
1043:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1044:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1045:       assertEquals(40, Node.ORIGINALNAME_PROP);
1046:       assertEquals(43, Node.IS_CONSTANT_NAME);
1047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1048:       assertEquals(46, Node.IS_NAMESPACE);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(49, Node.DIRECT_EVAL);
1052:       assertEquals(57, Node.LAST_PROP);
1053:       assertEquals(1, Node.DECR_FLAG);
1054:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1055:       assertEquals(32, Node.INCRDECR_PROP);
1056:       assertEquals(2, Node.POST_FLAG);
1057:       assertEquals(47, Node.IS_DISPATCHER);
1058:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1059:       assertEquals(12, Node.COLUMN_BITS);
1060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1061:       assertEquals(29, Node.JSDOC_INFO_PROP);
1062:       assertEquals(37, Node.OPT_ARG_NAME);
1063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1064:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1065:       assertEquals(39, Node.EMPTY_BLOCK);
1066:       assertEquals(52, Node.LENGTH);
1067:       assertEquals(48, Node.DIRECTIVES);
1068:       assertEquals(8, Node.FLAG_NO_THROWS);
1069:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(36, Node.QUOTED_PROP);
1072:       assertEquals(57, Node.REFLECTED_OBJECT);
1073:       assertFalse(node0.equals((Object)node1));
1074:       assertFalse(node1.equals((Object)node0));
1075:       assertFalse(node0.isReturn());
1076:       assertFalse(node0.isOr());
1077:       assertFalse(node0.isLabel());
1078:       assertEquals((-1), node0.getLineno());
1079:       assertFalse(node0.isAssignAdd());
1080:       assertFalse(node0.isWhile());
1081:       assertFalse(node0.isNumber());
1082:       assertFalse(node0.isDo());
1083:       assertEquals((-1), node0.getSourcePosition());
1084:       assertFalse(node0.isAdd());
1085:       assertFalse(node0.isNew());
1086:       assertFalse(node0.isVar());
1087:       assertFalse(node0.isStringKey());
1088:       assertFalse(node0.isLabelName());
1089:       assertFalse(node0.isContinue());
1090:       assertFalse(node0.isCast());
1091:       assertFalse(node0.isThis());
1092:       assertFalse(node0.isParamList());
1093:       assertFalse(node0.isSetterDef());
1094:       assertFalse(node0.isScript());
1095:       assertFalse(node0.isHook());
1096:       assertFalse(node0.isTry());
1097:       assertFalse(node0.hasOneChild());
1098:       assertFalse(node0.isBlock());
1099:       assertFalse(node0.isFor());
1100:       assertFalse(node0.isIf());
1101:       assertFalse(node0.isWith());
1102:       assertFalse(node0.isRegExp());
1103:       assertFalse(node0.hasMoreThanOneChild());
1104:       assertFalse(node0.isCatch());
1105:       assertFalse(node0.isInstanceOf());
1106:       assertFalse(node0.isIn());
1107:       assertFalse(node0.isNE());
1108:       assertFalse(node0.isGetterDef());
1109:       assertFalse(node0.isString());
1110:       assertFalse(node0.isCase());
1111:       assertFalse(node0.isInc());
1112:       assertFalse(node0.isEmpty());
1113:       assertFalse(node0.isArrayLit());
1114:       assertEquals((-1), node0.getCharno());
1115:       assertFalse(node0.isDebugger());
1116:       assertFalse(node0.isSwitch());
1117:       assertEquals(2427, node0.getType());
1118:       assertFalse(node0.isThrow());
1119:       assertFalse(node0.isFalse());
1120:       assertFalse(node0.isFunction());
1121:       assertEquals(0, node0.getChildCount());
1122:       assertFalse(node0.isAnd());
1123:       assertFalse(node0.isNull());
1124:       assertFalse(node0.isDefaultCase());
1125:       assertFalse(node0.isNot());
1126:       assertFalse(node0.isObjectLit());
1127:       assertFalse(node0.isGetProp());
1128:       assertFalse(node0.isTrue());
1129:       assertFalse(node0.isVoid());
1130:       assertFalse(node0.isBreak());
1131:       assertFalse(node0.isDelProp());
1132:       assertFalse(node0.hasChildren());
1133:       assertFalse(node0.isName());
1134:       assertFalse(node0.isAssign());
1135:       assertFalse(node0.isTypeOf());
1136:       assertFalse(node0.isComma());
1137:       assertFalse(node0.isDec());
1138:       assertFalse(node0.isCall());
1139:       assertFalse(node0.isExprResult());
1140:       assertFalse(node0.isGetElem());
1141:       assertFalse(node1.isGetterDef());
1142:       assertFalse(node1.isDelProp());
1143:       assertFalse(node1.isArrayLit());
1144:       assertFalse(node1.isEmpty());
1145:       assertFalse(node1.isTry());
1146:       assertFalse(node1.isRegExp());
1147:       assertFalse(node1.isFunction());
1148:       assertFalse(node1.isDefaultCase());
1149:       assertEquals(1, node1.getChildCount());
1150:       assertTrue(node1.hasOneChild());
1151:       assertFalse(node1.isFor());
1152:       assertFalse(node1.isCase());
1153:       assertFalse(node1.isString());
1154:       assertEquals((-1), node1.getCharno());
1155:       assertFalse(node1.isParamList());
1156:       assertFalse(node1.isDebugger());
1157:       assertFalse(node1.isSwitch());
1158:       assertEquals(2427, node1.getType());
1159:       assertFalse(node1.isStringKey());
1160:       assertFalse(node1.isName());
1161:       assertFalse(node1.isBreak());
1162:       assertFalse(node1.isCall());
1163:       assertFalse(node1.isAdd());
1164:       assertFalse(node1.isGetProp());
1165:       assertFalse(node1.isNew());
1166:       assertFalse(node1.isComma());
1167:       assertFalse(node1.isWhile());
1168:       assertFalse(node1.isVar());
1169:       assertFalse(node1.isDo());
1170:       assertFalse(node1.isExprResult());
1171:       assertFalse(node1.isOr());
1172:       assertFalse(node1.isVoid());
1173:       assertFalse(node1.isNull());
1174:       assertFalse(node1.isTrue());
1175:       assertFalse(node1.isGetElem());
1176:       assertFalse(node1.isLabelName());
1177:       assertFalse(node1.isAssign());
1178:       assertFalse(node1.isNumber());
1179:       assertFalse(node1.isCast());
1180:       assertFalse(node1.isLabel());
1181:       assertFalse(node1.isAssignAdd());
1182:       assertFalse(node1.isTypeOf());
1183:       assertFalse(node1.isDec());
1184:       assertFalse(node1.isReturn());
1185:       assertFalse(node1.isAnd());
1186:       assertFalse(node1.isContinue());
1187:       assertFalse(node1.isNot());
1188:       assertFalse(node1.isObjectLit());
1189:       assertFalse(node1.isScript());
1190:       assertEquals((-1), node1.getSourcePosition());
1191:       assertFalse(node1.isThrow());
1192:       assertFalse(node1.isFalse());
1193:       assertFalse(node1.isSetterDef());
1194:       assertFalse(node1.isHook());
1195:       assertFalse(node1.isThis());
1196:       assertFalse(node1.isBlock());
1197:       assertFalse(node1.hasMoreThanOneChild());
1198:       assertFalse(node1.isWith());
1199:       assertFalse(node1.isInstanceOf());
1200:       assertFalse(node1.isIn());
1201:       assertFalse(node1.isCatch());
1202:       assertFalse(node1.isInc());
1203:       assertTrue(node1.hasChildren());
1204:       assertEquals((-1), node1.getLineno());
1205:       assertFalse(node1.isIf());
1206:       assertFalse(node1.isNE());
1207:       
1208:       Iterable<Node> iterable0 = node0.children();
1209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1211:       assertEquals(56, Node.CHANGE_TIME);
1212:       assertEquals(36, Node.QUOTED_PROP);
1213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1215:       assertEquals(53, Node.INPUT_ID);
1216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1217:       assertEquals(55, Node.INFERRED_FUNCTION);
1218:       assertEquals(29, Node.JSDOC_INFO_PROP);
1219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1220:       assertEquals(46, Node.IS_NAMESPACE);
1221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1222:       assertEquals(43, Node.IS_CONSTANT_NAME);
1223:       assertEquals(47, Node.IS_DISPATCHER);
1224:       assertEquals(2, Node.POST_FLAG);
1225:       assertEquals(30, Node.VAR_ARGS_NAME);
1226:       assertEquals(40, Node.ORIGINALNAME_PROP);
1227:       assertEquals(57, Node.REFLECTED_OBJECT);
1228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1229:       assertEquals(54, Node.SLASH_V);
1230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1231:       assertEquals(8, Node.FLAG_NO_THROWS);
1232:       assertEquals(39, Node.EMPTY_BLOCK);
1233:       assertEquals(57, Node.LAST_PROP);
1234:       assertEquals(50, Node.FREE_CALL);
1235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1236:       assertEquals(52, Node.LENGTH);
1237:       assertEquals(12, Node.COLUMN_BITS);
1238:       assertEquals(4095, Node.COLUMN_MASK);
1239:       assertEquals(32, Node.INCRDECR_PROP);
1240:       assertEquals(1, Node.DECR_FLAG);
1241:       assertEquals(37, Node.OPT_ARG_NAME);
1242:       assertEquals(48, Node.DIRECTIVES);
1243:       assertEquals(49, Node.DIRECT_EVAL);
1244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1245:       assertFalse(node0.equals((Object)node1));
1246:       assertFalse(iterable0.contains(node1));
1247:       assertNotNull(iterable0);
1248:       assertFalse(node0.isReturn());
1249:       assertFalse(node0.isOr());
1250:       assertFalse(node0.isLabel());
1251:       assertEquals((-1), node0.getLineno());
1252:       assertFalse(node0.isAssignAdd());
1253:       assertFalse(node0.isWhile());
1254:       assertFalse(node0.isNumber());
1255:       assertFalse(node0.isDo());
1256:       assertEquals((-1), node0.getSourcePosition());
1257:       assertFalse(node0.isAdd());
1258:       assertFalse(node0.isNew());
1259:       assertFalse(node0.isVar());
1260:       assertFalse(node0.isStringKey());
1261:       assertFalse(node0.isLabelName());
1262:       assertFalse(node0.isContinue());
1263:       assertFalse(node0.isCast());
1264:       assertFalse(node0.isThis());
1265:       assertFalse(node0.isParamList());
1266:       assertFalse(node0.isSetterDef());
1267:       assertFalse(node0.isScript());
1268:       assertFalse(node0.isHook());
1269:       assertFalse(node0.isTry());
1270:       assertFalse(node0.hasOneChild());
1271:       assertFalse(node0.isBlock());
1272:       assertFalse(node0.isFor());
1273:       assertFalse(node0.isIf());
1274:       assertFalse(node0.isWith());
1275:       assertFalse(node0.isRegExp());
1276:       assertFalse(node0.hasMoreThanOneChild());
1277:       assertFalse(node0.isCatch());
1278:       assertFalse(node0.isInstanceOf());
1279:       assertFalse(node0.isIn());
1280:       assertFalse(node0.isNE());
1281:       assertFalse(node0.isGetterDef());
1282:       assertFalse(node0.isString());
1283:       assertFalse(node0.isCase());
1284:       assertFalse(node0.isInc());
1285:       assertFalse(node0.isEmpty());
1286:       assertFalse(node0.isArrayLit());
1287:       assertEquals((-1), node0.getCharno());
1288:       assertFalse(node0.isDebugger());
1289:       assertFalse(node0.isSwitch());
1290:       assertEquals(2427, node0.getType());
1291:       assertFalse(node0.isThrow());
1292:       assertFalse(node0.isFalse());
1293:       assertFalse(node0.isFunction());
1294:       assertEquals(0, node0.getChildCount());
1295:       assertFalse(node0.isAnd());
1296:       assertFalse(node0.isNull());
1297:       assertFalse(node0.isDefaultCase());
1298:       assertFalse(node0.isNot());
1299:       assertFalse(node0.isObjectLit());
1300:       assertFalse(node0.isGetProp());
1301:       assertFalse(node0.isTrue());
1302:       assertFalse(node0.isVoid());
1303:       assertFalse(node0.isBreak());
1304:       assertFalse(node0.isDelProp());
1305:       assertFalse(node0.hasChildren());
1306:       assertFalse(node0.isName());
1307:       assertFalse(node0.isAssign());
1308:       assertFalse(node0.isTypeOf());
1309:       assertFalse(node0.isComma());
1310:       assertFalse(node0.isDec());
1311:       assertFalse(node0.isCall());
1312:       assertFalse(node0.isExprResult());
1313:       assertFalse(node0.isGetElem());
1314:       
1315:       // Undeclared exception!
1316:       try { 
1317:         node0.addChildBefore(node1, node1);
1318:         fail("Expecting exception: IllegalArgumentException");
1319:       
1320:       } catch(IllegalArgumentException e) {
1321:          //
1322:          // The existing child node of the parent should not be null.
1323:          //
1324:          verifyException("com.google.common.base.Preconditions", e);
1325:       }
1326:   }
1327: }
RegularFileObject[/tmp/EvoSuite_36_1605714117181/com/google/javascript/rhino/Node_36_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 18 15:41:57 GMT 2020
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_36_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_36_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
83:       "com.google.common.collect.ImmutableList$SubList",
84:       "com.google.javascript.rhino.jstype.NoType",
85:       "com.google.javascript.rhino.JSDocInfo$Visibility",
86:       "com.google.common.collect.ListMultimap",
87:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
88:       "com.google.javascript.rhino.jstype.ArrowType",
89:       "com.google.javascript.rhino.SimpleErrorReporter",
90:       "com.google.common.collect.Lists$RandomAccessPartition",
91:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
92:       "com.google.common.collect.Collections2",
93:       "com.google.javascript.rhino.jstype.NumberType",
94:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
95:       "com.google.common.collect.PeekingIterator",
96:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
97:       "com.google.common.collect.RegularImmutableList",
98:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
99:       "com.google.javascript.rhino.jstype.StaticScope",
100:       "com.google.javascript.rhino.jstype.InstanceObjectType",
101:       "com.google.common.collect.Lists$TransformingRandomAccessList",
102:       "com.google.javascript.rhino.Node$PropListItem",
103:       "com.google.javascript.rhino.Node$IntPropListItem",
104:       "com.google.common.collect.Sets$2",
105:       "com.google.common.collect.Maps$KeySet",
106:       "com.google.common.collect.Sets$3",
107:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
108:       "com.google.common.collect.LinkedHashMultimap",
109:       "com.google.javascript.rhino.Node",
110:       "com.google.javascript.rhino.jstype.ObjectType",
111:       "com.google.common.collect.Sets$1",
112:       "com.google.common.collect.ImmutableMapKeySet",
113:       "com.google.javascript.rhino.JSDocInfo$Marker",
114:       "com.google.common.collect.RegularImmutableMap",
115:       "com.google.common.collect.RegularImmutableBiMap",
116:       "com.google.javascript.rhino.Node$NodeMismatch",
117:       "com.google.javascript.rhino.jstype.RecordType",
118:       "com.google.common.collect.SortedMapDifference",
119:       "com.google.javascript.rhino.jstype.ModificationVisitor",
120:       "com.google.javascript.rhino.jstype.PropertyMap$1",
121:       "com.google.common.collect.AbstractMapEntry",
122:       "com.google.common.collect.Iterators$12",
123:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
124:       "com.google.common.collect.Iterators$11",
125:       "com.google.javascript.rhino.jstype.JSType$1",
126:       "com.google.common.collect.EmptyImmutableBiMap",
127:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
128:       "com.google.common.base.Predicate",
129:       "com.google.javascript.rhino.jstype.VoidType",
130:       "com.google.common.base.Joiner",
131:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
132:       "com.google.common.collect.AbstractListMultimap",
133:       "com.google.javascript.rhino.jstype.JSType",
134:       "com.google.common.collect.ImmutableAsList",
135:       "com.google.javascript.rhino.Node$StringNode",
136:       "com.google.javascript.rhino.jstype.ProxyObjectType",
137:       "com.google.common.collect.Sets$SetView",
138:       "com.google.common.collect.RegularImmutableAsList",
139:       "com.google.javascript.rhino.jstype.TemplateType",
140:       "com.google.javascript.rhino.jstype.NamedType",
141:       "com.google.common.collect.Iterators$13",
142:       "com.google.javascript.rhino.InputId",
143:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
144:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
145:       "com.google.common.collect.AbstractMapBasedMultimap",
146:       "com.google.common.collect.Lists$Partition",
147:       "com.google.common.collect.Lists",
148:       "com.google.javascript.rhino.Node$SideEffectFlags",
149:       "com.google.common.collect.UnmodifiableListIterator",
150:       "com.google.javascript.rhino.jstype.NullType",
151:       "com.google.common.collect.Lists$TransformingSequentialList",
152:       "com.google.javascript.rhino.ErrorReporter",
153:       "com.google.javascript.rhino.jstype.UnknownType",
154:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
155:       "com.google.javascript.rhino.jstype.ValueType",
156:       "com.google.javascript.rhino.jstype.PropertyMap",
157:       "com.google.javascript.rhino.Token",
158:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
159:       "com.google.common.collect.ObjectArrays",
160:       "com.google.javascript.rhino.jstype.StaticSourceFile",
161:       "com.google.javascript.rhino.jstype.BooleanType",
162:       "com.google.javascript.rhino.jstype.NoObjectType",
163:       "com.google.common.collect.AbstractIterator",
164:       "com.google.javascript.rhino.jstype.FunctionBuilder",
165:       "com.google.javascript.rhino.jstype.JSType$TypePair",
166:       "com.google.common.base.Joiner$MapJoiner",
167:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
168:       "com.google.common.collect.ImmutableList$1",
169:       "com.google.common.collect.MapDifference",
170:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
171:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
172:       "com.google.common.collect.Sets$ImprovedAbstractSet",
173:       "com.google.javascript.rhino.jstype.FunctionType",
174:       "com.google.common.base.Preconditions",
175:       "com.google.common.collect.UnmodifiableIterator",
176:       "com.google.javascript.rhino.JSDocInfo",
177:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
178:       "com.google.javascript.rhino.jstype.Property",
179:       "com.google.common.collect.ImmutableMapValues",
180:       "com.google.common.collect.ImmutableEntry",
181:       "com.google.common.base.Joiner$1",
182:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
183:       "com.google.common.base.Joiner$2",
184:       "com.google.common.collect.ImmutableCollection",
185:       "com.google.common.collect.ImmutableEnumMap",
186:       "com.google.javascript.rhino.jstype.TernaryValue",
187:       "com.google.javascript.rhino.Node$AncestorIterable",
188:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
189:       "com.google.common.collect.Lists$RandomAccessListWrapper",
190:       "com.google.common.collect.ImmutableEnumSet",
191:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
192:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
193:       "com.google.javascript.rhino.jstype.EnumElementType",
194:       "com.google.javascript.rhino.jstype.UnionType",
195:       "com.google.common.base.Objects",
196:       "com.google.javascript.rhino.Node$NumberNode",
197:       "com.google.common.collect.SingletonImmutableList",
198:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
199:       "com.google.common.collect.ImmutableCollection$Builder",
200:       "com.google.javascript.rhino.jstype.StaticSlot",
201:       "com.google.common.collect.Iterators$6",
202:       "com.google.common.collect.BiMap",
203:       "com.google.common.collect.Iterators$7",
204:       "com.google.common.collect.AbstractSetMultimap",
205:       "com.google.common.base.Function",
206:       "com.google.common.collect.ImmutableSet",
207:       "com.google.common.collect.Lists$AbstractListWrapper",
208:       "com.google.common.collect.ImmutableMap",
209:       "com.google.common.collect.AbstractIndexedListIterator",
210:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
211:       "com.google.common.collect.Maps$1",
212:       "com.google.javascript.rhino.jstype.EnumType",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
234:       "com.google.common.collect.ImmutableList",
235:       "com.google.common.collect.SingletonImmutableBiMap",
236:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
237:       "com.google.javascript.rhino.jstype.StringType",
238:       "com.google.javascript.rhino.Node$AbstractPropListItem",
239:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
240:       "com.google.javascript.rhino.jstype.TemplatizedType",
241:       "com.google.javascript.rhino.jstype.Visitor",
242:       "com.google.javascript.rhino.jstype.NoResolvedType",
243:       "com.google.javascript.rhino.jstype.JSTypeNative",
244:       "com.google.javascript.rhino.jstype.AllType",
245:       "com.google.common.collect.Maps",
246:       "com.google.common.collect.SetMultimap",
247:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
248:       "com.google.common.collect.Maps$EntryTransformer",
249:       "com.google.javascript.rhino.JSTypeExpression",
250:       "com.google.common.collect.Iterators$MergingIterator"
251:     );
252:   } 
253: 
254:   private static void resetClasses() {
255:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_36_tmp__ESTest_scaffolding.class.getClassLoader()); 
256: 
257:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
258:       "com.google.javascript.rhino.Node",
259:       "com.google.javascript.rhino.Node$NumberNode",
260:       "com.google.javascript.rhino.Node$StringNode",
261:       "com.google.javascript.rhino.Node$AbstractPropListItem",
262:       "com.google.javascript.rhino.Node$ObjectPropListItem",
263:       "com.google.javascript.rhino.Node$IntPropListItem",
264:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
265:       "com.google.javascript.rhino.Node$AncestorIterable",
266:       "com.google.javascript.rhino.Node$NodeMismatch",
267:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
268:       "com.google.javascript.rhino.Node$SideEffectFlags",
269:       "com.google.javascript.rhino.Token",
270:       "com.google.common.base.Preconditions",
271:       "com.google.javascript.rhino.SimpleErrorReporter",
272:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
273:       "com.google.common.base.Joiner",
274:       "com.google.common.base.Joiner$1",
275:       "com.google.common.collect.Collections2",
276:       "com.google.common.base.Joiner$MapJoiner",
277:       "com.google.common.collect.Maps",
278:       "com.google.common.collect.AbstractMultimap",
279:       "com.google.common.collect.AbstractMapBasedMultimap",
280:       "com.google.common.collect.AbstractSetMultimap",
281:       "com.google.common.collect.LinkedHashMultimap",
282:       "com.google.common.collect.AbstractMapEntry",
283:       "com.google.common.collect.ImmutableEntry",
284:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
285:       "com.google.common.collect.AbstractListMultimap",
286:       "com.google.common.collect.ArrayListMultimap",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
288:       "com.google.common.collect.ImmutableCollection",
289:       "com.google.common.collect.RegularImmutableList",
290:       "com.google.common.collect.ObjectArrays",
291:       "com.google.common.collect.ImmutableList",
292:       "com.google.javascript.rhino.jstype.ModificationVisitor",
293:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
294:       "com.google.common.collect.ImmutableCollection$Builder",
295:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
296:       "com.google.common.collect.ImmutableList$Builder",
297:       "com.google.common.collect.UnmodifiableIterator",
298:       "com.google.common.collect.UnmodifiableListIterator",
299:       "com.google.common.collect.Iterators$1",
300:       "com.google.common.collect.Iterators$2",
301:       "com.google.common.collect.Iterators",
302:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
303:       "com.google.javascript.rhino.jstype.JSType$1",
304:       "com.google.javascript.rhino.jstype.JSType",
305:       "com.google.javascript.rhino.jstype.ObjectType",
306:       "com.google.javascript.rhino.jstype.ProxyObjectType",
307:       "com.google.javascript.rhino.jstype.TemplateType",
308:       "com.google.javascript.rhino.jstype.ValueType",
309:       "com.google.javascript.rhino.jstype.BooleanType",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.javascript.rhino.jstype.NumberType",
312:       "com.google.javascript.rhino.jstype.StringType",
313:       "com.google.javascript.rhino.jstype.UnknownType",
314:       "com.google.javascript.rhino.jstype.VoidType",
315:       "com.google.javascript.rhino.jstype.AllType",
316:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
317:       "com.google.common.collect.ImmutableMap",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.collect.EmptyImmutableBiMap",
320:       "com.google.javascript.rhino.jstype.PropertyMap$1",
321:       "com.google.javascript.rhino.jstype.PropertyMap",
322:       "com.google.javascript.rhino.jstype.FunctionType",
323:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
324:       "com.google.javascript.rhino.jstype.ArrowType",
325:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
326:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
327:       "com.google.javascript.rhino.jstype.InstanceObjectType",
328:       "com.google.javascript.rhino.jstype.Property",
329:       "com.google.common.collect.Lists",
330:       "com.google.javascript.rhino.jstype.NoObjectType",
331:       "com.google.javascript.rhino.jstype.NoType",
332:       "com.google.javascript.rhino.jstype.NoResolvedType",
333:       "com.google.common.collect.SingletonImmutableList",
334:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
335:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
336:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
337:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
338:       "com.google.javascript.rhino.jstype.UnionType",
339:       "com.google.javascript.rhino.jstype.FunctionBuilder",
340:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.base.Objects",
349:       "com.google.common.collect.Sets",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
354:     );
355:   }
356: }

[MASTER] 15:41:57.722 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1444));
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1444), node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1460), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals((-1460), node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
assertNotNull(node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
assertNotNull(node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags4);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags4.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);

node_SideEffectFlags3.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
assertNotNull(node_SideEffectFlags5);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags5.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesThis();
assertNotNull(node_SideEffectFlags6);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags3.valueOf());
assertEquals(25, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesArguments();
assertNotNull(node_SideEffectFlags7);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags3.valueOf());
assertEquals(25, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertFalse(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(25, node_SideEffectFlags7.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags6.clearAllFlags();
assertNotNull(node_SideEffectFlags8);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertEquals(31, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags8.valueOf());
assertFalse(node_SideEffectFlags8.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);

Node node0 = Node.newString(2427, "PRZ`");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertEquals(2427, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());

Node node1 = new Node(2427, node0, node0, 4, (-3007));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertEquals(2427, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(2427, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

boolean boolean0 = node1.isGetProp();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertEquals(2427, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(2427, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

node1.putIntProp((-431), 53);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertEquals(2427, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(2427, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

node1.putBooleanProp(52, true);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertEquals(2427, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(2427, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertEquals(2427, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());

node0.addChildBefore(node1, node1);

