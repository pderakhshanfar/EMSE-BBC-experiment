/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 18 04:30:33 GMT 2020
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnknownType;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 11;
      Node node0 = Node.newString(11, "", 52, 11);
      Node node1 = new Node(52, node0, node0);
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isHook();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node1.setIsSyntheticBlock(false);
      Node node4 = null;
      try {
        node4 = new Node(57, node2, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(101, "undefined", 48, 235);
      node0.isFromExterns();
      Node node1 = Node.newNumber((-1.0));
      node0.isObjectLit();
      node0.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      Node node2 = new Node(12, node1, node1, node0, 1, 52);
      node2.isNoSideEffectsCall();
      Node node3 = Node.newNumber(0.0);
      node3.hasChildren();
      Node.newString(1035, "svq~MDrl*05A");
      node0.isCase();
      node1.isGetElem();
      node0.isAssignAdd();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", 0, 0);
      node0.isFromExterns();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.isObjectLit();
      node0.getSourcePosition();
      node1.setIsSyntheticBlock(true);
      Node node2 = new Node((-1550), node1, node1, node0, 57, (-1645));
      node0.isNoSideEffectsCall();
      Node node3 = Node.newNumber(Double.POSITIVE_INFINITY);
      node3.hasChildren();
      Node.newString(54, "svq~MDrl*05A");
      node3.isCase();
      node3.isGetElem();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node.extractCharno(8);
      Node node0 = Node.newString("D", 8, 122910);
      node0.isNew();
      Node.extractCharno(49);
      node0.isContinue();
      Node node1 = new Node(130, node0, node0, 37, 1994);
      Node node2 = null;
      try {
        node2 = new Node(4, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node2.setLineno(15);
      node2.getSourcePosition();
      node0.setType((-411));
      node4.isSyntheticBlock();
      node3.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("e\":(Q6Mf0k\t");
      node_FileLevelJsDocBuilder0.append("");
      node4.isAssignAdd();
      node1.siblings();
      node3.isThis();
      node0.isOnlyModifiesThisCall();
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 1, 47);
      node0.isNoSideEffectsCall();
      node1.hasChildren();
      Node node2 = Node.newNumber((double) 46);
      Node node3 = node1.clonePropsFrom(node2);
      node2.getProp((-2462));
      node1.isQualifiedName();
      node3.addChildrenToBack(node0);
      node3.isParamList();
      node3.toString(false, false, true);
      Node node4 = node1.getLastSibling();
      node4.checkTreeEquals(node1);
      node1.setType(85);
      node1.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node1.isAssignAdd();
      node3.siblings();
      node3.isThis();
      node1.isOnlyModifiesThisCall();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString((-1261), ".negate()", 0, (-1261));
      Node node1 = new Node(46, node0, 42, 1);
      Node node2 = node1.clonePropsFrom(node0);
      node1.getProp(16);
      node2.isQualifiedName();
      Node node3 = null;
      // Undeclared exception!
      try { 
        node1.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString("", 130, 49);
      node0.isStringKey();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      Node.extractCharno(38);
      node0.isContinue();
      node0.setWasEmptyNode(false);
      node0.isCatch();
      node0.isOnlyModifiesThisCall();
      Node.mergeLineCharNo(103, (-730));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = new Node(8, node0, node0, node0, 49, 83);
      node1.isNoSideEffectsCall();
      node1.hasChildren();
      Node node2 = Node.newNumber((-1.0));
      Node node3 = node2.clonePropsFrom(node1);
      node3.getProp((-536870912));
      node1.isQualifiedName();
      node1.addChildrenToBack(node2);
      node2.isParamList();
      node0.getLastSibling();
      Node node4 = Node.newNumber((double) 8, 40, 2147483645);
      Node node5 = Node.newString(36, "new child has existing parent", 13, 49);
      // Undeclared exception!
      try { 
        node4.checkTreeEquals(node5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber(453.0, (-1261), 34);
      Node node1 = Node.newString(2964, "", (-1934), 16);
      node1.isThis();
      node1.isFromExterns();
      Node.newString("", 50, 4095);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isQualifiedName();
      node0.getAncestors();
      node0.setWasEmptyNode(false);
      node0.getSideEffectFlags();
      node0.isGetProp();
      Node node1 = Node.newString(153, "EBBGB-*hD3)r%");
      node1.isLocalResultCall();
      node1.isLabelName();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      Node node1 = Node.newNumber((-1203.1160524));
      Node node2 = node1.clonePropsFrom(node0);
      node1.getProp((-1135));
      node0.isQualifiedName();
      node2.addChildrenToBack(node0);
      Node node3 = node2.getLastSibling();
      node2.setDouble((-4824.61287439202));
      node2.checkTreeEquals(node3);
      Node node4 = new Node(3740);
      Node node5 = null;
      try {
        node5 = new Node(30, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isNumber();
      node0.setChangeTime(74);
      node0.setType(54);
      node0.isCatch();
      Node node1 = Node.newNumber((double) 2, (-3027), 29);
      node1.isDefaultCase();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.setChangeTime(35);
      node0.isNumber();
      node0.setChangeTime(74);
      node0.setType(54);
      node0.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      Node node1 = new Node(43, 1, 43);
      Node.newString(2, "|Yyr(Heh<BfDI;,TAt?X");
      Node node2 = new Node(40, node0, node0, node1, node0, 32, 48);
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node2.isCase();
      node2.isGetElem();
      node2.isTypeOf();
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node0.mayMutateArguments();
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
      node_AncestorIterable0.iterator();
      node3.isCall();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node((-3195));
      node0.getIntProp((-3195));
      node0.hasChildren();
      Node.newNumber(0.0, 700, 155);
      node0.isDefaultCase();
      Node.mergeLineCharNo(37, 2114);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 'D';
      charArray0[2] = '^';
      charArray0[3] = '>';
      charArray0[4] = 'Q';
      charArray0[5] = ':';
      charArray0[6] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        node0.appendStringTree(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3195
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      node0.isQualifiedName();
      node0.setChangeTime((-1588));
      node0.setType((-1588));
      Node node1 = new Node(5557, 47, 52);
      node1.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(4, "shuld never be called", 37, 40);
      node0.isThis();
      node1.isFromExterns();
      node1.getInputId();
      Node node2 = Node.newString("shuld never be called", 152, 48);
      Node node3 = new Node((-1288), node1, node0, node2, node2, 147, 49);
      node1.isParamList();
      node2.isIf();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isQualifiedName();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node1.setLineno(1872);
      node4.getSourcePosition();
      node0.setType(15);
      Node node5 = Node.newString(2, "void", 38, 39);
      node5.isSyntheticBlock();
      node5.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node1.isAssignAdd();
      node0.siblings();
      node5.isThis();
      node3.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(40, "}|0");
      node0.isReturn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.isFromExterns();
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.valueOf();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.NullType", 2, 37);
      node1.isNoSideEffectsCall();
      node1.hasChildren();
      Node node2 = Node.newNumber((double) 52);
      Node node3 = node2.clonePropsFrom(node0);
      node3.getProp(15);
      node2.isQualifiedName();
      node1.addChildrenToBack(node0);
      Node node4 = new Node(113, node1, node1);
      node4.isParamList();
      node3.getLastSibling();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isNumber();
      node0.setChangeTime(74);
      node0.setType(54);
      node0.isCatch();
      Node node1 = Node.newString("");
      node0.setWasEmptyNode(false);
      node0.addChildToBack(node1);
      node0.copyInformationFromForTree(node1);
      node0.setOptionalArg(true);
      node1.isEmpty();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isEquivalentTo(node2);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.getLastSibling();
      node2.getJSDocInfo();
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-1594), (-793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("", 110, 110);
      Node node1 = new Node(15, node0, node0, node0, node0);
      Node node2 = node1.clonePropsFrom(node0);
      node2.setChangeTime(1630);
      node1.setType((-336));
      node0.isCatch();
      Node node3 = Node.newNumber((double) 47);
      node1.isObjectLit();
      node3.setLineno(42);
      node0.getSourcePosition();
      node3.setType(49);
      node1.isSyntheticBlock();
      node1.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      Node node4 = new Node((-1572), 15, 33);
      node4.isAssignAdd();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 6, 6);
      node0.isExprResult();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node1.clonePropsFrom(node0);
      node1.setType(31);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.cloneNode();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      node1.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Node tree inequality:\nTree1:\nNUMBER Infinity\n\n\nTree2:\nSTRING EBBGB-*hD3)r% 30\n    NUMBER Infinity\n\n\nSubtree1: NUMBER Infinity\n\n\nSubtree2: STRING EBBGB-*hD3)r% 30\n    NUMBER Infinity\n");
      node2.isAssignAdd();
      node0.siblings();
      node0.isThis();
      node1.isOnlyModifiesThisCall();
      node3.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setSourceEncodedPositionForTree(0);
      Node node1 = Node.newString(4, "shuld never be called", 37, 40);
      node0.isThis();
      node1.isFromExterns();
      Node node2 = Node.newString("shuld never be called", 152, 48);
      node0.setWasEmptyNode(false);
      node1.getSideEffectFlags();
      node0.isGetProp();
      node1.isIn();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("vL6;C ?[jvl:", (-1), (-1));
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString((-1261), ".negate()", 0, (-1261));
      node0.getIntProp(287);
      node0.setString(".negate()");
      Node node1 = new Node(0, node0);
      Node node2 = new Node(27, node1, 0, 4095);
      node2.mayMutateGlobalStateOrThrow();
      node0.setWasEmptyNode(true);
      Node node3 = null;
      try {
        node3 = new Node((-1045), node2, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      Node node1 = Node.newString(57, "|YyHeh<BfDI;,TAt?X");
      node1.isCase();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      node0.setIsSyntheticBlock(false);
      node0.isQualifiedName();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.setDouble(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(6, nodeArray0);
      Node node1 = new Node(51, node0, node0, node0, 152, 684);
      node1.isNoSideEffectsCall();
      node0.hasChildren();
      Node node2 = Node.newNumber((double) 8);
      Node node3 = node2.clonePropsFrom(node1);
      node0.getProp(1);
      node0.isQualifiedName();
      node1.addChildrenToBack(node3);
      node3.isParamList();
      node1.getLastSibling();
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 6
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      boolean boolean0 = node0.isThis();
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(boolean0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      node0.isQualifiedName();
      Node node1 = new Node(1735, 13, 1735);
      node0.addChildrenToBack(node1);
      node1.getLastSibling();
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1735
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isObjectLit();
      Node node1 = new Node(52, 54, (-2106));
      node1.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isNumber();
      node0.setChangeTime(74);
      Node node1 = Node.newString("", 1886, 43);
      node1.setWasEmptyNode(false);
      Node node2 = Node.newNumber((-1182.280716881045), 40, 4);
      node2.getSideEffectFlags();
      node1.isGetProp();
      node2.isLabelName();
      Node node3 = Node.newString(51, "");
      node3.isIn();
      node3.isNull();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      String string0 = ",Ek:Wp";
      node2.getIntProp((-454));
      int int0 = 3518;
      // Undeclared exception!
      try { 
        node1.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      node0.isQualifiedName();
      Node.extractCharno(2147483645);
      node0.getAncestors();
      node0.isContinue();
      node0.setWasEmptyNode(false);
      try { 
        node0.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER Infinity is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(40, "}|0");
      node0.isReturn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.newNumber(Double.POSITIVE_INFINITY);
      node0.isQualifiedName();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isAnd();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node0.clonePropsFrom(node1);
      node1.getProp(42);
      node0.isQualifiedName();
      node2.addChildrenToBack(node1);
      Node node3 = node1.getLastSibling();
      node2.checkTreeEquals(node0);
      Node node4 = new Node(48);
      Node node5 = null;
      try {
        node5 = new Node(3986, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node.extractCharno(8);
      Node node0 = Node.newString("D", 8, 122910);
      node0.isNew();
      Node.extractCharno(49);
      node0.isContinue();
      Node node1 = new Node(130, node0, node0, 37, 1994);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node1.isDo();
      node1.putIntProp(37, 45);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(3518, "NiF>d1");
      node0.isCase();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString((-1285), "");
      Node node1 = Node.newString(43, "", 37, 4095);
      Node.newString("", 83, 12);
      Node node2 = node0.cloneTree();
      node2.getAncestor(57);
      Node.newString("");
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(4, "shuld never be called", 37, 40);
      node0.isThis();
      node1.isFromExterns();
      Node node2 = Node.newString("shuld never be called", 152, 48);
      node0.setWasEmptyNode(false);
      node1.getSideEffectFlags();
      node0.isGetProp();
      node2.isLabelName();
      node1.isIn();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      node0.isThis();
      node0.isFromExterns();
      Node node1 = Node.newString(48, "");
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOnlyModifiesThisCall();
      node1.isEquivalentTo(node0);
      node1.addChildrenToBack(node0);
      Node node2 = node1.getLastSibling();
      node1.checkTreeEquals(node2);
      node1.setType(37);
      node2.isEquivalentToTyped(node1);
      node0.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 1, 47);
      node0.isNoSideEffectsCall();
      node1.hasChildren();
      Node node2 = Node.newNumber((double) 46);
      Node node3 = node1.clonePropsFrom(node2);
      node2.getProp((-2462));
      node1.isQualifiedName();
      node3.addChildrenToBack(node0);
      node3.isParamList();
      Node node4 = node1.getLastSibling();
      node4.checkTreeEquals(node1);
      node1.setType(85);
      node0.isSyntheticBlock();
      node1.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node1.isAssignAdd();
      node3.siblings();
      node3.isThis();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.setLength(42);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = Node.newString(57, "", (-550), 4095);
      node3.getSourceFileName();
      node0.detachChildren();
      node0.addChildToFront(node1);
      node0.getSourcePosition();
      node2.setIsSyntheticBlock(true);
      node2.isUnscopedQualifiedName();
      Node node4 = new Node(40, node0);
      node2.srcrefTree(node3);
      node3.setType(4095);
      node4.isDo();
      node2.isEquivalentTo(node1, false, false, false);
      node3.setQuotedString();
      node2.isVarArgs();
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER Infinity [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000006] [length: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(453.0, (-1261), 34);
      Node node1 = Node.newString(2964, "", (-1934), 16);
      node1.isThis();
      node1.isFromExterns();
      Node node2 = Node.newString("", 50, 4095);
      node2.setWasEmptyNode(false);
      node1.getSideEffectFlags();
      node0.isGetProp();
      node1.isLabelName();
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      node0.isThis();
      node0.isFromExterns();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.isObjectLit();
      node0.getSourcePosition();
      node1.setIsSyntheticBlock(true);
      node0.isFromExterns();
      Node node2 = Node.newString("<,Zb_4gLQA[]R", 9, 122880);
      node2.setWasEmptyNode(false);
      node2.getSideEffectFlags();
      node0.isGetProp();
      node1.isLabelName();
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString((-1285), "");
      Node node1 = Node.newString(43, "", 37, 4095);
      node0.removeChildren();
      Node.newString("", 83, 12);
      Node.newString("");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
      node3.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node.extractCharno(8);
      Node node0 = Node.newString("D", 8, 122910);
      node0.isNew();
      Node.extractCharno(49);
      node0.isContinue();
      Node node1 = new Node(130, node0, node0, 37, 1994);
      node1.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", 0, 0);
      node0.isFromExterns();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.isObjectLit();
      node0.getSourcePosition();
      node1.setIsSyntheticBlock(true);
      node1.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      node0.isQualifiedName();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = new Node(38, node0, node0, node0);
      node0.getProp(53);
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      node1.getAncestors();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Node tree inequality:\nTree1:\nNUMBER Infinity\n\n\nTree2:\nSTRING EBBGB-*hD3)r% 30\n    NUMBER Infinity\n\n\nSubtree1: NUMBER Infinity\n\n\nSubtree2: STRING EBBGB-*hD3)r% 30\n    NUMBER Infinity\n");
      node2.isAssignAdd();
      node0.siblings();
      node0.isThis();
      node1.isOnlyModifiesThisCall();
      node3.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1775;
      Node[] nodeArray0 = new Node[9];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = null;
      int int1 = 11;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2147483645, (Node) null, 1775, 472);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node2.setIsSyntheticBlock(false);
      Node node4 = Node.newString("EBBGB-*hD3)r%");
      Node node5 = null;
      try {
        node5 = new Node((-2229), node4, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      node0.isThis();
      node0.getProp(3603);
      node0.isQualifiedName();
      Node node1 = Node.newNumber(0.0);
      node0.addChildrenToBack(node1);
      Node node2 = node0.getLastSibling();
      node2.checkTreeEquals(node0);
      Node node3 = new Node(12);
      Node node4 = new Node((-2812), node2);
      node3.srcrefTree(node4);
      node1.setType(43);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 6, 6);
      node0.isExprResult();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node1.clonePropsFrom(node0);
      node1.setType(31);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", (-6), (-6));
      node0.isExprResult();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node1.clonePropsFrom(node0);
      node1.setType(31);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber(453.0, (-1261), 34);
      node0.getAncestors();
      Node node1 = Node.newString((-1261), "Should not happen\n", 152, 1);
      Node node2 = null;
      Node node3 = null;
      try {
        node3 = new Node(2, node1, (Node) null, (Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isVarArgs();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      node2.getSourceOffset();
      node1.getAncestors();
      Node.newString("start index", 64, 56);
      node1.setWasEmptyNode(false);
      node1.getSideEffectFlags();
      node1.isGetProp();
      int int0 = 4;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node((-733));
      Node node5 = new Node(16, node3);
      node1.srcrefTree(node0);
      node4.setType(4);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node4.isDo();
      node_AncestorIterable0.iterator();
      node5.isAssignAdd();
      node1.siblings();
      // Undeclared exception!
      try { 
        node0.replaceChild(node3, node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node.extractCharno(8);
      Node node0 = Node.newString("D", (-1830), 122910);
      node0.isNew();
      Node node1 = Node.newNumber(1.2, 0, (-1274));
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node(12288);
      Node node5 = new Node(4, node4);
      node1.srcrefTree(node5);
      node2.setType((-862048943));
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
      node_AncestorIterable0.iterator();
      node5.copyInformationFromForTree(node2);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node2 = node0.getLastSibling();
      // Undeclared exception!
      try { 
        node2.setDouble(49);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString((-1285), "");
      Node node1 = Node.newString(43, "", 37, 4095);
      Node.newString("", 83, 12);
      Node.newString("");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 13;
      int int1 = (-2723);
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(13, (Node) null, (Node) null, (Node) null, (Node) null, 42, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node3 = Node.newNumber((-1163.057));
      node3.isObjectLit();
      node2.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      Node node4 = new Node(30, node3, node3, node3);
      Node node5 = new Node(2, 54, 30);
      Node node6 = node2.useSourceInfoFromForTree(node0);
      node6.detachChildren();
      int int0 = 776;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplatizedType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("void", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("", 131, 49);
      node0.isStringKey();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node1 = Node.newString("%");
      node1.setWasEmptyNode(false);
      node0.addChildToBack(node1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setOptionalArg(false);
      node0.isEmpty();
      node1.setSourceFileForTesting("%");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(12, node0, node1, node0);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node2.getSourcePosition();
      int int0 = Node.ORIGINALNAME_PROP;
      node1.setIsSyntheticBlock(true);
      node2.isUnscopedQualifiedName();
      Node node5 = Node.newString(1, "void");
      node3.isEquivalentTo(node2, false, true, true);
      Node.newString(152, "");
      node5.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isNumber();
      node0.setChangeTime(74);
      node0.setType(54);
      node0.isCatch();
      Node.extractCharno(8);
      node0.isContinue();
      node0.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node(12288);
      Node node5 = new Node(4, node4);
      node1.srcrefTree(node5);
      node2.setType((-862048943));
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      try { 
        node5.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RETURN is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node((-733));
      Node node5 = new Node(16, node3);
      node1.srcrefTree(node0);
      node4.setType(4);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node4.isDo();
      node_AncestorIterable0.iterator();
      node5.isAssignAdd();
      node1.siblings();
      node3.isParamList();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(39, node0);
      node0.isThis();
      node1.isFromExterns();
      Node node2 = Node.newString("shuld never be called", 152, 48);
      Node node3 = null;
      try {
        node3 = new Node((-1288), node1, node0, node2, node2, 147, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isDelProp();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NOT
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(0);
      String string0 = "";
      Node node1 = Node.newString((-1765), "", 55, 15);
      Node node2 = Node.newString("");
      Node node3 = new Node(30, node1, node1, node2, node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node(12288);
      Node node5 = new Node(4, node4);
      node1.srcrefTree(node5);
      node2.setType((-862048943));
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
      node_AncestorIterable0.iterator();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      node1.isAssignAdd();
      node1.siblings();
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(0, 0, (-285));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.getType();
      int int0 = 16;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(43, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node2.setLineno(15);
      node2.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      Node node5 = new Node(30, node4, node4, node4);
      node5.cloneTree();
      node5.isSwitch();
      node4.setType(2);
      node4.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newString(63, "com.google.javascript.rhino.jstype.RecordType");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node3.useSourceInfoIfMissingFrom(node1);
      node0.isOnlyModifiesThisCall();
      node4.isEquivalentTo(node2);
      node0.addChildrenToBack(node4);
      Node node5 = node3.getLastSibling();
      node5.setType(227);
      node0.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node4.getAncestors();
      node_AncestorIterable0.iterator();
      node5.isDo();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isVarArgs();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      node2.getSourceOffset();
      String string0 = "~UQe1JBE]Bx;s";
      node1.getAncestors();
      int int0 = 8;
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node(12288);
      Node node5 = new Node(4, node4);
      Node node6 = node1.srcrefTree(node5);
      node2.setType((-862048943));
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
      node_AncestorIterable0.iterator();
      node6.isAssignAdd();
      node5.siblings();
      node6.isParamList();
      node4.isIf();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(0);
      String string0 = "shuld never be called";
      Node node1 = Node.newString(4, "shuld never be called", 37, 40);
      node0.isThis();
      node1.isFromExterns();
      Node.newString("\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(111);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newNumber((double) (-2170), (-2170), (-2170));
      node0.addChildrenToFront(node0);
      node0.addSuppression("%WScDkq");
      int int0 = Node.JSDOC_INFO_PROP;
      node0.isThis();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add((String) null);
      node0.setDirectives(hashSet0);
      node0.getType();
      int int1 = (-140);
      Node node1 = null;
      try {
        node1 = new Node(57, node0, node0, node0, node0, 57, 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      Node node4 = new Node(12288);
      Node node5 = new Node(4, node4);
      Node node6 = node1.srcrefTree(node5);
      node2.setType((-862048943));
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
      node_AncestorIterable0.iterator();
      node2.isEquivalentTo(node3, false, true, true);
      node5.isVarArgs();
      try { 
        node6.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node0 = Node.newString(859, ".", 2444, (-3843));
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      node0.cloneTree();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node2.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      Node node5 = new Node(30, node4, node4, node4);
      node5.cloneTree();
      node5.isSwitch();
      node4.setType(2);
      node4.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      Node node1 = Node.newNumber((-1.0));
      Node node2 = node0.srcref(node1);
      node0.putBooleanProp(1, true);
      node0.getSourceFileName();
      node0.isComma();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      nodeArray0[6] = node2;
      nodeArray0[7] = node2;
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      node0.isThis();
      node0.isFromExterns();
      Node node1 = Node.newString(525, "");
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOnlyModifiesThisCall();
      node1.isEquivalentTo(node0);
      node1.addChildrenToBack(node0);
      Node node2 = node1.getLastSibling();
      node1.checkTreeEquals(node2);
      node1.setType(2079);
      node0.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(4, "shuld never be called", 37, 40);
      node0.isThis();
      node1.isFromExterns();
      Node node2 = Node.newString("shuld never be called", 152, 48);
      node0.isEquivalentToTyped(node1);
      Node node3 = new Node((-1288), node1, node0, node2, node2, 147, 49);
      // Undeclared exception!
      try { 
        node0.replaceChild(node3, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(26, (-2497), 0);
      node0.isFor();
      Node node1 = Node.newString("void", (-1415), 55);
      Node node2 = new Node(567, node1, node0, node0, node0);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(15);
      node1.setType(3552);
      node1.isCatch();
      Node node3 = Node.newNumber(0.0);
      node2.isObjectLit();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node0.getSourcePosition();
      node3.setIsSyntheticBlock(false);
      Node node4 = null;
      try {
        node4 = new Node(1, node3, node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("", 130, 49);
      node0.isStringKey();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node1 = Node.newString("%");
      node1.setWasEmptyNode(false);
      node0.addChildToBack(node1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setOptionalArg(false);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", (-285), 0);
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.getType();
      int int0 = 16;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(43, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isExprResult();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node1.clonePropsFrom(node0);
      node1.setType(31);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      String string0 = "void";
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node2.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      node4.getQualifiedName();
      Node node5 = new Node(30, node4, node4, node4);
      // Undeclared exception!
      try { 
        node4.addChildrenAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString("", (-285), 0);
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.getType();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      node0.isThis();
      node0.isFromExterns();
      Node node1 = Node.newString(525, "");
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOnlyModifiesThisCall();
      node1.isEquivalentTo(node0);
      node0.useSourceInfoFromForTree(node1);
      node1.getAncestors();
      node0.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(153);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 153
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(4, "shuld never be called", 37, 40);
      node0.isThis();
      node1.isFromExterns();
      Node node2 = Node.newString("shuld never be called", 152, 48);
      Node node3 = new Node((-1288), node1, node0, node2, node2, 147, 49);
      // Undeclared exception!
      try { 
        node0.replaceChild(node3, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(0, ".negate()", 0, (-1288));
      node0.setString(".negate()");
      Node node1 = new Node(4095, node0);
      Node node2 = null;
      try {
        node2 = new Node(2071, node0, 0, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getProp(53);
      node1.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node2.getLastSibling();
      node3.checkTreeEquals(node0);
      node3.setType(48);
      node3.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.isDo();
      node_AncestorIterable0.iterator();
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isVarArgs();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.isUnscopedQualifiedName();
      Node node4 = node2.removeChildAfter(node3);
      node0.isEquivalentTo(node4, false, true, false);
      Node node5 = Node.newString(53, "7sEa&7cX[A$N/?$");
      Node node6 = null;
      try {
        node6 = new Node(48, node5, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.setLength(42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getSourceFileName();
      node0.detachChildren();
      node0.addChildToFront(node1);
      node0.getSourcePosition();
      node2.setIsSyntheticBlock(true);
      node0.setType(1554);
      node2.isCatch();
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isVarArgs();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      node1.getAncestors();
      Node.extractCharno(8);
      // Undeclared exception!
      try { 
        node0.setString("~UQe1JBE]Bx;s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString((-921), "", (-3999), (-921));
      Node node1 = new Node(153, node0, node0, node0, node0);
      node0.getFirstChild();
      node1.setIsSyntheticBlock(true);
      node1.setInputId((InputId) null);
      Node node2 = new Node((-921), node1, node1);
      int int0 = 136;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = null;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      nodeArray0[4] = null;
      Node node3 = null;
      try {
        node3 = new Node((-360), nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(453.0, (-1261), 34);
      node0.getAncestors();
      node0.isFalse();
      node0.toStringTree();
      node0.isLabelName();
      node0.isNE();
      Node node1 = new Node(40, node0, node0, node0, 751619276, (-360));
      node0.srcrefTree(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("", (-285), 0);
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.getType();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(32);
      Node node2 = node0.clonePropsFrom(node1);
      node1.getProp(55);
      node2.isQualifiedName();
      node0.addChildrenToBack(node1);
      Node node3 = Node.newNumber((double) 4095);
      Node node4 = new Node((-1292), node2, node3, node0, node3);
      node4.isParamList();
      node2.getLastSibling();
      // Undeclared exception!
      try { 
        node4.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newNumber((double) 38);
      node0.setInputId((InputId) null);
      Node node1 = new Node(53, node0, node0);
      Node node2 = new Node(47, node1, (-1838), 1568);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      node2.useSourceInfoIfMissingFromForTree(node1);
      node2.removeChildren();
      Node node3 = null;
      try {
        node3 = new Node(50, nodeArray0, 4095, 1792);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(847, "", 277, 53);
      Node node1 = new Node(51, node0);
      node0.copyInformationFromForTree(node1);
      node0.getJSDocInfo();
      node0.isThis();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(1792);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(117);
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = Node.newNumber(1.0, 56, 117);
      Node node2 = new Node(1344, node0);
      node2.addChildrenToFront(node1);
      node1.addSuppression("VOID_TYPE");
      node0.isThis();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1792
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newNumber((double) (-2170), (-2170), (-2170));
      node0.addChildrenToFront(node0);
      node0.addSuppression("%WScDkq");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-2170));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -2170
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      String string0 = "void";
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      Node node3 = node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node4 = Node.newNumber((-1163.057));
      node4.isObjectLit();
      node2.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      Node node5 = new Node(30, node4, node4, node4);
      // Undeclared exception!
      try { 
        node4.addChildrenAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<UnknownType> stack0 = new Stack<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(57, node0, node0);
      node1.isExprResult();
      node1.isInc();
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("([,M/", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      Node node1 = Node.newNumber((-1.0));
      Node node2 = node0.srcref(node1);
      node0.putBooleanProp(1, true);
      node0.getSourceFileName();
      node0.isComma();
      node0.getInputId();
      Node node3 = Node.newNumber((-0.7837983283732616));
      node1.setLength(47);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node1);
      node4.getSourceFileName();
      node3.detachChildren();
      node3.addChildToFront(node1);
      node1.getSourcePosition();
      node2.setIsSyntheticBlock(false);
      node3.isUnscopedQualifiedName();
      Node node5 = new Node(51, node2, node0, node0, 57, 54);
      node5.isEquivalentTo(node1, false, true, true);
      node0.isNoSideEffectsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node3.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-1261);
      int int1 = 0;
      int int2 = 27;
      Node node0 = Node.newString((-1261), ".negate()", 0, 9);
      node0.setString(".negate()");
      Node node1 = new Node(0, node0);
      int int3 = 0;
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isVarArgs();
      String string0 = "void";
      node0.isLocalResultCall();
      node0.getSourceFileName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<UnknownType> stack0 = new Stack<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(57, node0, node0);
      node1.isExprResult();
      node0.wasEmptyNode();
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("([,M/", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      String string0 = "";
      Node node0 = null;
      try {
        node0 = new Node(3239, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(847, "", 277, 53);
      Node node1 = new Node(51, node0);
      node0.copyInformationFromForTree(node1);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node(1792);
      Node node1 = new Node(4095, node0, node0, node0, node0, 4, 1);
      nodeArray0[1] = nodeArray0[0];
      Node node2 = null;
      try {
        node2 = new Node((-207), nodeArray0, 1617, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(859, nodeArray0);
      node0.getBooleanProp(147);
      node0.siblings();
      node0.getProp(8);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-1998);
      Node node0 = new Node(47, (-1998), 47);
      Node node1 = new Node((-880), node0, node0, node0, 64, 2);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = null;
      try {
        node2 = new Node(31, node0, node0, node0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isFor();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      Node node3 = Node.newNumber((-1163.057));
      node3.isObjectLit();
      node2.getSourcePosition();
      node0.setIsSyntheticBlock(false);
      Node node4 = new Node(30, node3, node3, node3);
      node4.cloneTree();
      node4.isSwitch();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseNoObjectType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ".~u{;O{\"ms|%C1";
      Node node0 = Node.newString(90, ".~u{;O{\"ms|%C1", 90, 90);
      Node node1 = new Node(90, node0, node0, node0, node0, 0, 4095);
      Node node2 = node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_LSH
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString(0, "<,Zb_4gLQA[]R", (-1), (-1));
      node0.isThis();
      node0.isFromExterns();
      Node node1 = Node.newString("is_dispatcher", 2, 2292);
      Node node2 = new Node(53, node0, node1, node0, node1, 30, 1);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      int int0 = 10;
      Node node0 = null;
      try {
        node0 = new Node(10, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newNumber((double) (-2170), 26, (-2170));
      Node node1 = new Node((-2170), node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString(0, "}|0");
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setThrows();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      Node node1 = Node.newNumber((-1.0));
      Node node2 = node0.srcref(node1);
      node0.putBooleanProp(1, true);
      node0.getSourceFileName();
      node0.isComma();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      nodeArray0[6] = node2;
      nodeArray0[7] = node2;
      Node node3 = null;
      try {
        node3 = new Node((-1620), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.setLength(42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = Node.newString(57, "", (-550), 4095);
      node3.getSourceFileName();
      node0.detachChildren();
      node0.addChildToFront(node1);
      node0.getSourcePosition();
      boolean boolean0 = true;
      node2.setIsSyntheticBlock(true);
      node2.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 1792;
      Node node0 = new Node(1792);
      Node node1 = new Node((-207), node0);
      node0.getIntProp(1);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -207
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node(1792);
      Node node1 = new Node((-207), node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(1551, node1, 29, 3516);
      nodeArray0[1] = node2;
      // Undeclared exception!
      try { 
        node2.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node(1792);
      Node node1 = new Node((-207), node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(1551, node1, 29, 3516);
      nodeArray0[1] = node2;
      Node node3 = null;
      try {
        node3 = new Node((-207), nodeArray0, 1617, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NOT
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = ".~u{;O{\"ms|%C1";
      Node node0 = Node.newString(102, ".~u{;O{\"ms|%C1", 102, 102);
      Node node1 = new Node(102, node0, node0, node0, node0, 0, 2292);
      Node node2 = node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INC
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-440), nodeArray0);
      node0.isNoSideEffectsCall();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(1924, (String) null, 1924, 1924);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-921);
      Node node0 = Node.newString((-921), "", (-3999), (-921));
      Node node1 = new Node(153, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = (-1998);
      Node node0 = new Node(47, (-1998), 47);
      Node node1 = new Node((-880), node0, node0, node0, 64, 2);
      node0.isEquivalentTo(node1, false, false, true);
      Node node2 = null;
      try {
        node2 = new Node(15, node0, node0, node0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 4849;
      Node node0 = null;
      try {
        node0 = new Node(4849, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 88;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(0);
      // Undeclared exception!
      try { 
        node0.setString("Y?{-~'\"K~a{ix1%.5");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      int int0 = 1685;
      Node node1 = Node.newString((-462), "");
      node0.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 25;
      Node node0 = new Node(25);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        simpleSourceFile0.getLineOffset((-959));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number -959
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = (-901);
      int int1 = 2985;
      Node node0 = Node.newString(878, "", 0, (-901));
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '/';
      charArray0[2] = 'd';
      charArray0[3] = '\"';
      charArray0[4] = '8';
      charArray0[5] = 'D';
      charArray0[6] = 'M';
      charArray0[7] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        node0.appendStringTree(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 878
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = (-1261);
      int int1 = 0;
      Node node0 = Node.newString((-1261), ".negate()", 0, 9);
      node0.setString(".negate()");
      Node node1 = new Node(0, node0);
      Node node2 = new Node(27, node1, 0, 4095);
      node2.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = (-1473);
      Node node0 = new Node((-1473), (-1625), (-1625));
      node0.isSwitch();
      node0.getChangeTime();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      node0.isVarArgs();
      Node node1 = Node.newString("void", 40, 1630);
      Node node2 = new Node(1, node0, node0, node1, node1);
      node0.clonePropsFrom(node2);
      node0.setChangeTime(57);
      node0.setType(54);
      node0.isCatch();
      // Undeclared exception!
      try { 
        node0.setString("~UQe1JBE]Bx;s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString("EBBGB-*hD3)r%", 30, 30);
      Node node1 = Node.newString(2, "9^h(c8595,*dSzV:Ox,");
      node0.isSyntheticBlock();
      Node.newString(4095, "", 332, 0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "}|0";
      Node node0 = Node.newString(0, "}|0");
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = null;
      try {
        node1 = new Node(8, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("(Hg7L7E*9DImX(>V", 0, 0);
      node0.isFor();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = Node.newString("br17Cv 0", (-569), (-1409));
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "3Tdr+g1>");
      jSDocInfo0.setTypedefType(jSTypeExpression0);
      // Undeclared exception!
      try { 
        Node.newString((String) null, 1, 1277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      int int0 = (-2170);
      Node node0 = Node.newNumber((double) (-2170), 26, (-2170));
      Node node1 = new Node((-2170), node0);
      Node node2 = new Node((-2170), node1, node1, 30, 10);
      Node node3 = null;
      try {
        node3 = new Node((-2170), node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "%4fOmv!;Y-W&&7dqN;", 4095, 25);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = jSTypeRegistry0.getType((StaticScope<JSType>) functionType0, "", "", 102, 25);
      jSTypeArray0[1] = jSType1;
      Node node0 = Node.newString("Not declared as a constructor", 953, 0);
      Node node1 = new Node(0, node0, 2048, 128);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node1, jSType1);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType2 = enumElementType1.autoboxesTo();
      jSTypeArray0[2] = null;
      JSType jSType3 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType2, "Named type with empty name component");
      jSTypeArray0[3] = jSType3;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType4 = jSTypeRegistry0.createFunctionType((ObjectType) enumElementType0, jSTypeArray0[3], (List<JSType>) linkedList0);
      jSTypeArray0[4] = jSType4;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString(323, ")NGe l>cc+#p59WSk~`");
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(323, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      
      Node node1 = new Node(323, node0, (-1), (-1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(323, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertEquals(323, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(323, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertEquals(323, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node2.isScript());
      assertEquals(323, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssignAdd());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isTrue());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(" : ");
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      
      boolean boolean0 = node0.getBooleanProp(0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isNoSideEffectsCall();
      node0.hasChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(3603);
      node0.isQualifiedName();
      node0.addChildrenToBack(node1);
      node0.isParamList();
      Node node3 = node0.getLastSibling();
      node3.checkTreeEquals(node2);
      node2.setType((-862048943));
      node2.isSyntheticBlock();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isDo();
      node_AncestorIterable0.iterator();
      assertTrue(node0.hasOneChild());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "9:d- j";
      objectArray0[1] = (Object) simpleErrorReporter0;
      objectArray0[2] = (Object) "9:d- j";
      Node node0 = Node.newString("free_call", (-360), 1745);
      Node node1 = new Node(0, node0, 42, (-5901));
      node1.getProp(50);
      objectArray0[3] = null;
      objectArray0[4] = (Object) "9:d- j";
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("9:d- j", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 9:d- j
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      Node node1 = Node.newNumber((-1.0));
      Node node2 = node0.srcref(node1);
      boolean boolean0 = true;
      node0.putBooleanProp(1, true);
      node0.getSourceFileName();
      node0.isComma();
      node0.getInputId();
      Node node3 = Node.newNumber(0.0);
      node1.setLength(47);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node1);
      node4.getSourceFileName();
      node3.detachChildren();
      node3.addChildToFront(node1);
      node1.getSourcePosition();
      node2.setIsSyntheticBlock(false);
      node3.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
