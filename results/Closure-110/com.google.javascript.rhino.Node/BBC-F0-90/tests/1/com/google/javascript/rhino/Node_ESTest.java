/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 21:44:18 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      String string0 = "null";
      Node node0 = Node.newString(0, "VOID_TYPE");
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, ".");
      ObjectType objectType1 = ObjectType.cast(objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType1);
      JSType[] jSTypeArray0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) enumType0, jSType0, (JSType) enumType0, jSType0, jSType0, jSType0, (JSType) enumType0, (JSType) functionType0, (JSType) objectType1, (JSType) objectType1, (JSType) functionType0, (JSType) functionType0, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 547;
      int int1 = (-506);
      Node node0 = Node.newString("unexpected prop id ", (-3732), 1124);
      int int2 = 0;
      node0.setDouble((-3732));
      int int3 = 42;
      Node node1 = new Node(int1, node0, int2, int3);
      // Undeclared exception!
      try { 
        node1.removeChildren();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING unexpected prop id  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      Node.newString(19, "&*");
      node2.isExprResult();
      node1.srcrefTree(node0);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$Kind", 0, 0);
      node0.isAdd();
      node0.setLineno(0);
      node0.isUnscopedQualifiedName();
      node0.getProp(1252);
      node0.isSwitch();
      node0.isLocalResultCall();
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.addChildBefore((Node) null, (Node) null);
      Node node2 = node1.removeFirstChild();
      node0.getFirstChild();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(2528, "com.google.javascript.rhino.jstype.RecordType");
      node0.mayMutateArguments();
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = new Node(0, node1, node1);
      node2.isWhile();
      node0.isQuotedString();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node", 0, 1386);
      node0.getLength();
      node0.isNoSideEffectsCall();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(0, "", 1073741824, 0);
      node0.getInputId();
      node0.setQuotedString();
      node0.getLength();
      node0.setCharno(0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-368);
      Node.newString((String) null, (-368), (-368));
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "kjsumaO.8Jssf8";
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "is_constant_name");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getElementsType();
      String string1 = "Aj'<1(8z\"rte+pXo?q";
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(78);
      node0.addSuppression("");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 2789;
      Node node0 = new Node(2518, 2518, 2518);
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[4];
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getImplicitPrototype();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(91, node0, node0, 12, 51);
      node1.removeProp(38);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-214), nodeArray0);
      boolean boolean0 = node0.isDec();
      node0.removeProp((-214));
      node0.siblings();
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.setLength((-1826));
      node0.setType(860);
      node0.putBooleanProp((-214), false);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.newNumber(0.0, 52, 0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node0.addChildrenToFront(node1);
      node0.siblings();
      Node node2 = node0.cloneTree();
      node1.getDouble();
      node2.setSourceEncodedPositionForTree(node1.VAR_ARGS_NAME);
      node1.isVarArgs();
      node2.setVarArgs(boolean0);
      node_SideEffectFlags0.clearAllFlags();
      node0.setSourceEncodedPositionForTree(node2.FREE_CALL);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -214
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.detachChildren();
      node0.isFalse();
      Node node1 = node0.cloneTree();
      node1.isOnlyModifiesThisCall();
      node0.isSyntheticBlock();
      node1.setChangeTime(2);
      node1.getSideEffectFlags();
      node0.isIn();
      node1.getChildAtIndex(49);
      int int0 = 79;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(1647.649, 0, 0);
      Node node1 = new Node(0, node0, node0, node0, node0, 1875, 0);
      node0.isNoSideEffectsCall();
      node1.addChildToBack(node0);
      node1.isFromExterns();
      String string0 = "xBE15z|(W|";
      Node.newString(string0);
      node1.isComma();
      int int0 = (-1059);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "wo/o5E;ZAb&{2-)dM";
      Node node0 = Node.newString("wo/o5E;ZAb&{2-)dM");
      Node node1 = new Node(31);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch", 241, 382);
      node0.toStringTree();
      node0.getLength();
      node0.isSyntheticBlock();
      node0.setString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node(0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node0.toString();
      node0.isUnscopedQualifiedName();
      node0.isContinue();
      node1.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node0.getDouble();
      Set<String> set0 = node1.getDirectives();
      node1.wasEmptyNode();
      // Undeclared exception!
      try { 
        node0.setDirectives(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.javascript.rhino.Node$NodeMismatch 241 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(0, node3, 12, 56);
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node4.getSourceFileName();
      node3.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isQuotedString();
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = null;
      ObjectType objectType1 = FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Key");
      // Undeclared exception!
      try { 
        JSType.toMaybeFunctionType((JSType) objectType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      String string0 = "GLOBAL_THIS";
      Node node0 = Node.newString(0, "GLOBAL_THIS");
      Node node1 = new Node(1829, node0, node0, node0, node0, 2, 43);
      Node node2 = new Node(0, node1, node0, node0, 0, 1);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString((-2972), "ALWAYS_FALSE");
      Node node1 = Node.newString("ALWAYS_FALSE", 4095, 15);
      node1.removeProp((-515));
      Node.newString("Recorded bad position information\nstart-line: ");
      Node node2 = new Node((-2972), node0, node0, 0, 43);
      node0.siblings();
      node0.setLineno((-597));
      node2.getString();
      node2.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node2.REFLECTED_OBJECT);
      int int0 = 0;
      node0.getExistingIntProp(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesThis();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2972
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(262, 262, 262);
      node0.setWasEmptyNode(true);
      node0.setLineno((-1138));
      node0.setCharno(8202);
      node0.putProp(1337, "(O)NuSt]cvJHdV=>kv");
      int int0 = 715;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = null;
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = ObjectType.cast((JSType) null);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      ObjectType objectType1 = FunctionType.getTopDefiningInterface((ObjectType) null, "NUMBER_STRING_BOOLEAN");
      objectType1.hasDisplayName();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) objectType0, (JSType) functionType0, (JSType) objectType0, (JSType) objectType1, jSType0, (JSType) templateType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(int0, node1, node0.LENGTH, templateType0.NOT_ENUMDECL);
      node0.addChildToBack(node2);
      node2.setType(node0.REFLECTED_OBJECT);
      int int1 = (-2034);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = new Node(2415, 357, 132);
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, (Node) null, (-858), 32);
      Node node2 = node1.detachFromParent();
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.isHook();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, (-1987), 0);
      Node node2 = new Node(int0, node1, node0, node0);
      Node node3 = null;
      try {
        node3 = new Node(int0, node2, node2, node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString(0, "8EfFqc`{b}Q");
      Node node1 = new Node(0, node0);
      node0.isEquivalentTo(node1);
      node1.isEquivalentTo(node0, true, true, true);
      node1.isArrayLit();
      node1.setOptionalArg(true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(739, (Node) null, 3055, 3055);
      Node node2 = new Node(node1.OPT_ARG_NAME, node1, node1, node1, node0);
      // Undeclared exception!
      try { 
        node2.isEquivalentToTyped(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      int int0 = 331;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NullType nullType0 = mock(NullType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(nullType0).toString();
      NullType nullType1 = mock(NullType.class, new ViolatedAssumptionAnswer());
      doReturn((TemplateTypeMap) null).when(nullType1).getTemplateTypeMap();
      doReturn(false).when(nullType1).hasAnyTemplateTypes();
      doReturn(false, false, false).when(nullType1).isAllType();
      doReturn(false).when(nullType1).isEmptyType();
      doReturn(false, false).when(nullType1).isFunctionType();
      doReturn(false).when(nullType1).isNoResolvedType();
      doReturn(false).when(nullType1).isNoType();
      doReturn(false).when(nullType1).isTemplatizedType();
      doReturn(false).when(nullType1).isUnionType();
      doReturn(false, false, false).when(nullType1).isUnknownType();
      doReturn((String) null, (String) null, (String) null).when(nullType1).toString();
      ImmutableList<NullType> immutableList0 = ImmutableList.of(nullType0, nullType0, nullType0, nullType0, nullType0, nullType1, nullType1, nullType1, nullType1);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.TemplateTypeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(0, node3, 12, 56);
      node5.isSetterDef();
      node2.getInputId();
      node5.isEmpty();
      node3.addChildrenToBack(node1);
      node5.isContinue();
      node4.checkTreeEqualsImpl(node1);
      node1.isTry();
      node1.getIntProp(2);
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("IoHI%", 0, 0);
      Node node1 = node0.cloneNode();
      node1.isQuotedString();
      node1.toString();
      node1.isVarArgs();
      Node node2 = new Node((-619));
      Node node3 = node0.removeChildAfter(node2);
      node3.getJSDocInfo();
      InputId inputId0 = node0.getInputId();
      // Undeclared exception!
      try { 
        inputId0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(0, 34, 0);
      Node node1 = Node.newString("", 0, 53);
      node1.isQuotedString();
      Node node2 = node0.srcref(node1);
      node2.checkTreeEquals(node1);
      node1.isVarArgs();
      node2.srcrefTree(node0);
      node0.getLineno();
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getSourcePosition();
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("");
      node0.isOr();
      node0.isThis();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = new Node(55, nodeArray0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$NotPredicate");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("com.google.common.base.Predicates$NotPredicate", (String) null, (-783), 12);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = null;
      Node node1 = new Node(1684, node0, node0, 30, 3521);
      node0.removeChild(node1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      FunctionType functionType0 = null;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      functionType1.getPropertiesCount();
      jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType1, functionType1);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("\n", 2762, 2762);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber(1034.649912568);
      node0.getJsDocBuilderForNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoShadow(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.setSourceEncodedPosition(26);
      node0.isWhile();
      node0.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      node0.toString(true, false, true);
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      String string0 = null;
      simpleErrorReporter0.warning("", (String) null, 48, 0);
      SimpleErrorReporter.getMessage0("");
      int int0 = 0;
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getBaseType();
      jSDocInfo0.setBaseType(jSTypeExpression0);
      node1.removeProp(int0);
      int int1 = (-150);
      simpleErrorReporter0.error(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node2.FLAG_GLOBAL_STATE_UNMODIFIED, int1);
      // Undeclared exception!
      try { 
        node2.checkTreeEqualsImpl(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(0, 2048, 0);
      node0.setString("");
      node0.isOnlyModifiesThisCall();
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node0.detachChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node0.setSourceFileForTesting((String) null);
      node1.mayMutateArguments();
      node0.getCharno();
      node1.detachChildren();
      node1.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition((-447));
      Node node2 = node1.srcref(node0);
      node2.getStaticSourceFile();
      node2.getLength();
      node2.replaceChild(node1, node0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isLocalResultCall();
      Node node1 = Node.newNumber(0.0, 49, 47);
      node1.isEquivalentTo(node0);
      node1.setIsSyntheticBlock(false);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setChangeTime((-1855));
      node0.setSourceEncodedPositionForTree((-4046));
      Node node3 = node1.copyInformationFrom(node0);
      node0.isSyntheticBlock();
      node0.getIndexOfChild((Node) null);
      node1.isEquivalentTo(node0, true, false, true);
      node0.getJSDocInfo();
      node1.isEquivalentTo(node3);
      node1.setString((String) null);
      node3.getLength();
      int int0 = 2672;
      node1.setType(int0);
      int int1 = 532;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.setAllFlags();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 1048575 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString((-2646), (String) null, 0, (-2646));
      int int0 = 305;
      Node node1 = new Node(node0.CHANGE_TIME, node0, node0, node0, node0, int0, node0.LENGTH);
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("'");
      Node node1 = new Node(784, node0);
      Node node2 = node0.clonePropsFrom(node1);
      Node.newNumber((double) 50);
      node2.isOptionalArg();
      Node node3 = new Node(784, node1, node1, node0, node1);
      node3.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node3.checkTreeEqualsImpl(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      Node.newString(19, "&*");
      node2.isExprResult();
      node1.srcrefTree(node0);
      Node node4 = new Node(48, 2, 50);
      node3.isParamList();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = new Node(50, node2, 32, 1972);
      node1.removeChildren();
      node0.addSuppression("%D00E>1fe31hw4vX");
      Node node5 = new Node(38, node3, 55, (-1));
      Node node6 = new Node(47);
      node5.checkTreeEqualsImpl(node6);
      Node node7 = new Node(8, node0, node2, node0);
      node7.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      boolean boolean0 = node2.isExprResult();
      Node node3 = node1.srcrefTree(node0);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node node4 = new Node(32, node0, node3);
      node4.setVarArgs(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(2528, "com.google.javascript.rhino.jstype.RecordType");
      node0.mayMutateArguments();
      node0.getCharno();
      node0.detachChildren();
      node0.isGetElem();
      node0.setSourceEncodedPosition((-1));
      Node node1 = Node.newNumber(4215.556708368493);
      node0.srcref(node1);
      node1.setType(2528);
      node0.getStaticSourceFile();
      node0.getLength();
      node1.replaceChild(node0, node0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(0, node3, 12, 56);
      node5.mayMutateArguments();
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node2.isNew();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node0.setSourceFileForTesting((String) null);
      node1.mayMutateArguments();
      node0.getCharno();
      Node node2 = Node.newString(31, "&*");
      node0.isExprResult();
      Node node3 = new Node(12, node1, node2);
      Node node4 = node1.srcrefTree(node3);
      node4.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node3.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      node0.replaceChildAfter(node3, node2);
      node1.detachChildren();
      node1.isOnlyModifiesThisCall();
      int int0 = 0;
      node0.setSourceEncodedPosition(int0);
      int int1 = 2121;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getSourcePosition();
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("");
      node0.isOr();
      node0.isThis();
      node0.getString();
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(2528, "com.google.javascript.rhino.jstype.RecordType");
      node0.mayMutateArguments();
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = new Node(0, node1, node1);
      node2.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node2.isOr();
      node0.isEquivalentToShallow(node2);
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.detachChildren();
      boolean boolean0 = node0.isNot();
      Node node1 = node0.cloneTree();
      node1.isAdd();
      node0.isSyntheticBlock();
      node1.setChangeTime(2);
      node1.getSideEffectFlags();
      node0.isIn();
      Node node2 = node1.getChildAtIndex(49);
      // Undeclared exception!
      try { 
        node2.setOptionalArg(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(305, 9, 13);
      node0.putIntProp(85, 9);
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      String string0 = "directives";
      ObjectType objectType1 = FunctionType.getTopDefiningInterface(enumType0, string0);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) enumType0);
      ImmutableList.of((JSType) functionType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType1, (JSType) objectType0);
      Object object0 = null;
      try {
        object0 = new Object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("iO");
      node_FileLevelJsDocBuilder0.append("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesThis();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags8.clearSideEffectFlags();
      node_SideEffectFlags10.setMutatesThis();
      Node node0 = null;
      Node node1 = new Node(774, (Node) null, (Node) null, 13, 49);
      node1.replaceChild(node0, node0);
      node1.setQuotedString();
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node((-5), (-5), (-5));
      Node node1 = new Node(54, (-1781), (-2988));
      node0.addChildrenToBack(node1);
      node0.setString("");
      node0.isOnlyModifiesThisCall();
      node0.isOnlyModifiesArgumentsCall();
      node0.detachChildren();
      // Undeclared exception!
      try { 
        node0.isDo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -5
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(91, node0, node0, 12, 51);
      node1.setWasEmptyNode(false);
      node1.isCast();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node.extractCharno(32);
      Node node0 = Node.newNumber((double) 369, 154, Integer.MAX_VALUE);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      node0.cloneNode();
      Node node1 = new Node(0, node0, node0);
      Node node2 = Node.newString("", 14, 56);
      node2.getChangeTime();
      node0.getSideEffectFlags();
      node1.isIn();
      Node node3 = node1.getChildAtIndex(47);
      Node node4 = new Node(node3.LENGTH);
      boolean boolean0 = true;
      node4.setOptionalArg(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      Node node0 = Node.newNumber((-3167.535027947), 32, 38);
      node0.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(117);
      node0.getExistingIntProp(3787);
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags7.areAllFlagsSet();
      int int0 = 4;
      int int1 = 86;
      int int2 = 96;
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.detachChildren();
      node0.isFalse();
      Node node1 = node0.cloneTree();
      node1.isOnlyModifiesThisCall();
      node0.isSyntheticBlock();
      node1.setChangeTime(2);
      node1.getSideEffectFlags();
      node0.isIn();
      Node node2 = new Node(36, node1, node0);
      node2.srcrefTree(node0);
      node2.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-214), nodeArray0);
      node0.isDec();
      node0.removeProp((-214));
      node0.siblings();
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.setLength((-1826));
      node0.setType(860);
      node0.putBooleanProp((-214), false);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = Node.newNumber(0.0, 52, 0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      Node node3 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node4 = node1.srcref(node3);
      node0.setType(1);
      node1.getStaticSourceFile();
      Node node5 = new Node(1124);
      node5.getLength();
      node5.replaceChild(node2, node4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.RecordType";
      Node node0 = Node.newString(2528, "com.google.javascript.rhino.jstype.RecordType");
      node0.mayMutateArguments();
      node0.getCharno();
      node0.detachChildren();
      boolean boolean0 = node0.isGetElem();
      node0.setSourceEncodedPosition((-1));
      Node node1 = new Node(46, 1598, 1401);
      node1.addChildrenToFront(node0);
      node0.siblings();
      Node node2 = node1.cloneTree();
      node0.getDouble();
      node2.setSourceEncodedPositionForTree(node0.LENGTH);
      node1.isVarArgs();
      // Undeclared exception!
      try { 
        node0.setVarArgs(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2528
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      node1.getAncestor(0);
      Node node2 = new Node(0, node0, node0);
      Node node3 = Node.newString("", 14, 56);
      node3.getChangeTime();
      node2.getSideEffectFlags();
      node3.isIn();
      node3.getChildAtIndex(0);
      node1.setOptionalArg(false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(0, node3, 12, 56);
      node5.isSetterDef();
      node2.getInputId();
      node5.isEmpty();
      Node node6 = new Node(823, node0, node3);
      node6.addChildrenToBack(node1);
      node5.isContinue();
      node4.checkTreeEqualsImpl(node1);
      node1.isTry();
      node1.getIntProp(node4.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 64;
      Node[] nodeArray0 = new Node[2];
      String string0 = null;
      Node node0 = new Node(64);
      Node node1 = new Node(23, node0, node0);
      Node node2 = new Node(31, node0, node1, node0, node1, 0, 8);
      // Undeclared exception!
      try { 
        nodeArray0[0].addChildBefore(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      Node.newString("");
      Node.newString(8, "Number node not created with Node.newNumber");
      Node.newString("Number node not created with Node.newNumber");
      node0.getBooleanProp((-480));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      node0.getChildBefore(node1);
      node1.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node2.DIRECT_EVAL);
      node_SideEffectFlags0.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(305, 9, 13);
      node0.putIntProp(85, 9);
      Node node1 = Node.newString("");
      Node node2 = new Node(305, node0, node1, node0, 1318, 52);
      node1.getJSType();
      node2.getIndexOfChild(node0);
      node2.isEquivalentTo(node1, true, false, false);
      node1.getJSDocInfo();
      node2.isEquivalentTo(node0);
      node0.setString("");
      node0.getLength();
      node0.setType(node2.INCRDECR_PROP);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node2.EMPTY_BLOCK);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.setMutatesGlobalState();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 85
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isLocalResultCall();
      Node node1 = Node.newNumber(0.0, 49, 47);
      node1.isEquivalentTo(node0);
      node1.setIsSyntheticBlock(true);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setChangeTime((-1855));
      node0.setSourceEncodedPositionForTree((-4046));
      Node node3 = node1.copyInformationFrom(node0);
      node0.isSyntheticBlock();
      node0.getIndexOfChild((Node) null);
      node1.isEquivalentTo(node0, true, true, true);
      node0.getJSDocInfo();
      node1.isEquivalentTo(node3);
      node1.setString((String) null);
      node3.getLength();
      int int0 = 2672;
      node1.setType(int0);
      int int1 = 532;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.setAllFlags();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 1048575 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString((-2972), "ALWAYS_FALSE");
      Node node1 = Node.newString("ALWAYS_FALSE", 4095, 15);
      node1.removeProp((-515));
      Node.newString("Recorded bad position information\nstart-line: ");
      Node node2 = new Node((-2972), node0, node0, 0, 43);
      node0.siblings();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Recorded bad position information\nstart-line: ", false);
      simpleSourceFile0.getLineOffset(1273);
      node1.putProp(117, "_");
      Node node3 = Node.newString(3584, (String) null);
      node3.isExprResult();
      node2.srcrefTree(node0);
      node1.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      node0.copyInformationFrom(node1);
      Node node2 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      node1.setLineno(56);
      node2.getString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-267));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node3 = new Node(147, 4095, 16);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node node0 = Node.newString("'894c\bwani\"", (-1170), 0);
      Node node1 = node0.getAncestor(0);
      Node node2 = new Node(4095, node1, node1);
      Node node3 = new Node(4095, node0, (-3507), (-187));
      Node node4 = node3.removeChildren();
      String string0 = ",7gVJ({";
      node0.addSuppression(string0);
      Node node5 = new Node(node3.CHANGE_TIME, node0, node4.IS_NAMESPACE, node4.DIRECTIVES);
      Node node6 = new Node(node5.FLAG_ARGUMENTS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node1.checkTreeEqualsImpl(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NullType nullType0 = mock(NullType.class, new ViolatedAssumptionAnswer());
      NullType nullType1 = mock(NullType.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newString(1, "", (-597), (-841));
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1);
      node2.getChangeTime();
      Node node3 = new Node(15, node1, 5238, (-1449));
      node2.isSetterDef();
      node3.getInputId();
      node0.isEmpty();
      int int0 = 2017;
      Node node4 = new Node(int0, node0, node1);
      node4.addChildrenToBack(node2);
      node1.isContinue();
      node2.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node4.isTry();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = new Node(4, 96, 86);
      node0.isParamList();
      Node node1 = Node.newNumber((double) 2762, 4095, 47);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = new Node(38, node2, node1, 877, (-1586));
      node1.getDirectives();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node1.setWasEmptyNode(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      node0.setStaticSourceFile((StaticSourceFile) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(1115);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(1034.649912568);
      node0.getJsDocBuilderForNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoShadow(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.setSourceEncodedPosition(26);
      node0.isWhile();
      node0.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      node0.toString(true, false, false);
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.warning("", "Object#Element", 48, 0);
      SimpleErrorReporter.getMessage0("");
      int int0 = 0;
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getBaseType();
      jSDocInfo0.setBaseType(jSTypeExpression0);
      node1.removeProp(int0);
      int int1 = (-150);
      // Undeclared exception!
      try { 
        simpleErrorReporter0.error(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node2.FLAG_GLOBAL_STATE_UNMODIFIED, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("");
      int int0 = (-363);
      node1.setQuotedString();
      int int1 = 44;
      Node node3 = null;
      try {
        node3 = new Node(node0.FLAG_GLOBAL_STATE_UNMODIFIED, node2, node2, int0, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node1;
      nodeArray0[7] = node0;
      Node node4 = Node.newString(".-0m^V@!>ka");
      nodeArray0[8] = node4;
      Node node5 = new Node((-3813), nodeArray0);
      node4.getChildBefore(nodeArray0[8]);
      node1.useSourceInfoIfMissingFrom(nodeArray0[2]);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.ORIGINALNAME_PROP);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(85, (-955), 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("eGE()57!l.<!m");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("%D00E>1fe31hw4vX", true);
      simpleSourceFile0.getLineOffset(3851);
      simpleSourceFile0.getLineOffset(4);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      node2.putProp((-165), jSTypeNative0);
      Node node3 = Node.newString(2, "Object#Key");
      node3.isExprResult();
      Node node4 = Node.newString(16, "%D00E>1fe31hw4vX");
      Node node5 = node3.srcrefTree(node4);
      Node node6 = new Node(37, node3, node5, node2, node4);
      node6.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node6.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      String string0 = "G$0l>D";
      Node.newString("G$0l>D", (-2724), 148);
      Node node2 = node1.cloneNode();
      Node node3 = node2.getAncestor((-1010));
      Node node4 = new Node(node0.SIDE_EFFECT_FLAGS, node3, node3);
      String string1 = null;
      Node.newString(string1, node2.DIRECTIVES, node3.FLAG_THIS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node2.getChangeTime();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(64);
      node2.putProp(54, simpleSourceFile0);
      Node node4 = new Node(15, node1);
      node2.isExprResult();
      node1.srcrefTree(node0);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.useSourceInfoFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "%D00E>1fe31hw4vX";
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = Node.newString("%D00E>1fe31hw4vX");
      node0.isStringKey();
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node2.isNew();
      Node node6 = new Node(36, node3, node0, node4);
      Node node7 = Node.newString(string0);
      node7.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      Node.newString(19, "&*");
      node1.type = 105;
      node2.isExprResult();
      node1.srcrefTree(node0);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags3);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("%D00E>1fe31hw4vX", 51, 48);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(0, node3, 12, 56);
      node5.hasChildren();
      node2.isName();
      node4.isVoid();
      node1.isDo();
      node1.getLength();
      node2.setSourceFileForTesting("");
      node2.useSourceInfoFromForTree(node1);
      node0.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1747, (-307));
      node0.cloneNode();
      node0.getAncestor(742);
      Node node1 = new Node(41, node0, (Node) null);
      String string0 = " [";
      int int0 = 2273;
      Node.newString(string0, node1.LENGTH, int0);
      node1.getChangeTime();
      int int1 = (-587);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.detachChildren();
      node0.isFalse();
      Node node1 = node0.cloneTree();
      node1.isOnlyModifiesThisCall();
      node0.isSyntheticBlock();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      Node node2 = Node.newNumber(0.0);
      nodeArray0[5] = node2;
      nodeArray0[4].type = 57;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      Node node3 = new Node(944, nodeArray0);
      nodeArray0[7].getChildBefore(nodeArray0[5]);
      Node node4 = nodeArray0[2].useSourceInfoIfMissingFrom(nodeArray0[6]);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node4.SIDE_EFFECT_FLAGS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(37);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting("cIU1>7g=baC!zC0:V8");
      node0.getJSDocInfo();
      node0.getInputId();
      node0.isNew();
      node0.getSourceOffset();
      Node node1 = null;
      Node node2 = node0.copyInformationFromForTree((Node) null);
      node2.getBooleanProp(node0.DIRECTIVES);
      // Undeclared exception!
      try { 
        node0.getSideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("QZ{g$eBw1'?1BMPQ<m", (-144), 26);
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray1 = new JSType[6];
      jSTypeArray1[0] = jSType0;
      jSTypeArray1[1] = jSType0;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "oEFas'S,eZ8__g.");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      JSType jSType1 = jSTypeExpression0.evaluate(templateType0, jSTypeRegistry1);
      jSTypeArray1[2] = jSType1;
      jSTypeArray1[3] = jSType0;
      jSTypeArray1[4] = jSType0;
      jSTypeArray1[5] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray1);
      jSTypeArray0[0] = (JSType) functionType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isEquivalentTo(node1, false, false, false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      node1.getJSType();
      node1.isEquivalentTo(node3, true, true, true);
      node2.getJSDocInfo();
      node2.isEquivalentTo(node3);
      node0.setString("Not declared as a constructor");
      node1.getLength();
      node0.setType(8199);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2235);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isNot();
      node3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(305, 9, 13);
      node0.putIntProp(85, 9);
      Node node1 = Node.newString("");
      Node node2 = new Node(305, node0, node1, node0, 1318, 52);
      Node node3 = new Node(0, 37, 2);
      node3.getChangeTime();
      Node node4 = Node.newString("D[</VyV7hcMw H7vU3");
      node2.isStringKey();
      node4.isSetterDef();
      node1.getInputId();
      node1.setInputId((InputId) null);
      node0.isNew();
      Node node5 = new Node((-411), node4, node0, node1);
      String string0 = "n'4R/$4XrXA59";
      Node.newString(string0);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node2.isEquivalentTo(node0, false, true, true);
      node2.getJSDocInfo();
      node0.isEquivalentTo(node3);
      node1.setString("h|!-\"U?8&,5pn2fk");
      node3.getLength();
      int int0 = 15;
      node3.setType(int0);
      int int1 = 50;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setThrows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(305, 9, 13);
      node0.putIntProp(85, 9);
      Node node1 = Node.newString("");
      Node node2 = new Node(305, node0, node1, node0, 1318, 52);
      node1.getJSType();
      node2.getIndexOfChild(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(1810);
      simpleSourceFile0.getLineOffset(558);
      node0.putProp(32, (Object) null);
      node0.replaceChildAfter(node1, node2);
      node1.detachChildren();
      node0.isOnlyModifiesThisCall();
      Node node3 = new Node(node0.DIRECT_EVAL, node1, node2);
      node3.isWhile();
      node0.isQuotedString();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(12, "Object#Key");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node((-15), node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node((-15), node3, 12, 56);
      node3.isFromExterns();
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node4.getSourceFileName();
      node5.checkTreeEqualsImpl(node5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(153);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.mayMutateArguments();
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      node3.isSetterDef();
      node0.replaceChildAfter(node3, node2);
      node1.detachChildren();
      node1.isOnlyModifiesThisCall();
      Node node4 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node3, node0);
      node4.isWhile();
      // Undeclared exception!
      try { 
        node2.isQuotedString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node((-619));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node0.mayMutateGlobalStateOrThrow();
      node0.isCase();
      Node node1 = new Node(48, node0, node0, node0);
      node0.addSuppression("IoHm");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-214));
      node0.isDec();
      node0.siblings();
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.setLength((-1826));
      node0.setType(860);
      node0.putBooleanProp((-214), false);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(48, node1);
      Node node3 = new Node(39, node2, 48, (-214));
      Node node4 = Node.newString((String) null, (-267), 57);
      node4.removeChildren();
      String string0 = null;
      node1.addSuppression(string0);
      node1.checkTreeEqualsImpl(node4);
      Node node5 = new Node(node4.INFERRED_FUNCTION, node3, node3, node1);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString("IoHI%", 0, 0);
      Node node1 = node0.cloneNode();
      node1.isQuotedString();
      node1.toString();
      node1.isVarArgs();
      node1.setType((-4000));
      node1.putBooleanProp(1242, false);
      node1.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(30, node0);
      Node node3 = new Node((-1522), node2, 1, 98);
      Node node4 = Node.newString("IoHI%", 57, 8);
      node4.isUnscopedQualifiedName();
      Node node5 = node2.removeChildren();
      String string0 = "com.google.javascript.rhino.Node$FileLevelJsDocBuilder";
      node0.addSuppression("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      node3.checkTreeEqualsImpl(node5);
      Node node6 = new Node(108, node0, node5, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterable<? extends TemplateType>) null);
      ImmutableList<TemplateType> immutableList1 = immutableList0.subList(node5.INCRDECR_PROP, node6.DIRECT_EVAL);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node3, immutableList1);
      ImmutableList<JSType> immutableList2 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList2);
      node6.getChangeTime();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("])sxS", 101, 101);
      Node node1 = new Node(51, node0, 112, (-2165));
      node0.addChildAfter(node1, node1);
      String string0 = "";
      node0.setSourceFileForTesting(string0);
      node0.getJSDocInfo();
      int int0 = 1984;
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPosition(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isLocalResultCall();
      Node node1 = Node.newNumber(0.0, 49, 47);
      node1.isEquivalentTo(node0);
      node1.setIsSyntheticBlock(true);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setChangeTime((-1855));
      node0.setSourceEncodedPositionForTree((-4046));
      Node node3 = node1.copyInformationFrom(node0);
      node0.isSyntheticBlock();
      node3.getChangeTime();
      node0.getIndexOfChild((Node) null);
      node1.isEquivalentTo(node0, true, true, true);
      node0.getJSDocInfo();
      node1.isEquivalentTo(node3);
      node1.setString((String) null);
      node2.isGetterDef();
      node3.getLength();
      int int0 = 2672;
      node1.setType(int0);
      int int1 = 532;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      // Undeclared exception!
      try { 
        node_SideEffectFlags2.setMutatesGlobalState();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 1048575 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node((-619));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      Node node1 = new Node(37, node0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Xl6PG/d%R.`!G", false);
      node_NodeMismatch0.equals(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("%D00E>1fe31hw4vX", 55, 1067);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(0, node3, 12, 56);
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node4.getSourceFileName();
      Node node6 = new Node(2, (Node[]) null);
      node6.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node0.setSourceFileForTesting((String) null);
      node1.mayMutateArguments();
      node0.getCharno();
      Node node2 = Node.newString(31, "&*");
      node0.isExprResult();
      Node node3 = new Node(12, node1, node2);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node((-619));
      node0.getChangeTime();
      Node node1 = new Node(36, node0, 49, 2651);
      node0.hasChildren();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node((-3319), nodeArray0);
      node2.isName();
      node1.isVoid();
      // Undeclared exception!
      try { 
        node1.isDo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-296);
      Node node0 = Node.newNumber((double) (-296));
      Node node1 = new Node(2477, node0, node0, 46, (-597));
      node0.addChildrenToFront(node1);
      Node node2 = new Node((-1260), node0, node0, node0, node0);
      Node node3 = new Node(int0, node2, node2);
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString((-2972), "ALWAYS_FALSE");
      Node node1 = Node.newString("ALWAYS_FALSE", 4095, 15);
      node1.removeProp((-515));
      Node node2 = Node.newString("Recorded bad position information\nstart-line: ");
      Node node3 = new Node((-2972), node0, node0, 0, 43);
      Node node4 = Node.newString(1100, "ALWAYS_FALSE", 56, 49);
      node4.isFromExterns();
      node2.isSetterDef();
      node2.getInputId();
      node2.setInputId((InputId) null);
      node1.getSourceFileName();
      node2.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = Node.newString("%D00E>1fe31hw4vX");
      Node.newString(46, "KY8ab#3Y");
      node0.isStringKey();
      node5.isSetterDef();
      node2.getInputId();
      Node node6 = new Node((-2586), node3, (-2835), 46);
      node0.isFromExterns();
      node4.isSetterDef();
      node2.getInputId();
      node4.setInputId((InputId) null);
      node6.getSourceFileName();
      node5.checkTreeEqualsImpl(node4);
      node0.setVarArgs(true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(1972, 1972, 1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(310);
      node0.siblings();
      simpleSourceFile0.getLineOffset(51);
      node2.putProp(54, simpleSourceFile0);
      Node node3 = Node.newString(19, "&*");
      node2.isExprResult();
      Node node4 = node1.srcrefTree(node0);
      Node node5 = node3.useSourceInfoIfMissingFromForTree(node4);
      node0.isDec();
      InputId inputId0 = new InputId("");
      node3.putProp(31, simpleSourceFile0);
      node3.checkTreeEqualsImpl(node5);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("");
      node0.isOr();
      node0.isWith();
      node0.getString();
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      simpleSourceFile0.getLineOffset(39);
      simpleSourceFile0.getLineOffset(2683);
      Node node1 = new Node((-5001), node0, 4095, 1520);
      node1.replaceChild(node0, node0);
      node1.setQuotedString();
      Node node2 = Node.newNumber((double) node1.QUOTED_PROP, node1.FLAG_ARGUMENTS_UNMODIFIED, node1.SYNTHETIC_BLOCK_PROP);
      node0.getChangeTime();
      node0.isStringKey();
      // Undeclared exception!
      try { 
        node2.isEmpty();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(369, 369, 77);
      node0.detachChildren();
      node0.isFalse();
      node0.isOnlyModifiesThisCall();
      node0.isSyntheticBlock();
      node0.setChangeTime(50);
      Node node1 = new Node(47, (-751), (-1645));
      node1.getSideEffectFlags();
      node0.isIn();
      InputId inputId0 = new InputId((String) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      node1.putProp(53, jSTypeNative0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node.extractCharno(0);
      Node node0 = Node.newNumber((double) Integer.MAX_VALUE, 0, 0);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      Node node1 = new Node(52, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.srcrefTree(node2);
      node1.setSourceEncodedPositionForTree(54);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(305, 9, 38);
      node0.putIntProp(85, 9);
      Node node1 = new Node(55);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node1;
      nodeArray0[8] = node1;
      node0.setChangeTime((-3226));
      Node node2 = new Node(37, nodeArray0, (-1), 37);
      node2.mayMutateGlobalStateOrThrow();
      int int0 = (-481);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 1285);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(1285, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      int int0 = Node.DECR_FLAG;
      Node node5 = new Node(1285, node3, 12, 56);
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node4.getSourceFileName();
      node3.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node((-898), (-898), (-898));
      node0.isEquivalentTo((Node) null);
      int int0 = (-3073);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw43X", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(57, node1);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node(15, 50, 14);
      node5.hasChildren();
      node2.isName();
      node4.isVoid();
      node1.isDo();
      node1.getLength();
      node2.setSourceFileForTesting("");
      Node node6 = node2.useSourceInfoFromForTree(node1);
      Node node7 = Node.newString((-1210), "p(P.xxG^*U7a,s1", 2, 15);
      Node.NodeMismatch node_NodeMismatch0 = node7.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node6);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node((-619));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.getSourceFileName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedHashSet0);
      immutableList0.reverse();
      node0.setVarArgs(true);
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(46, node0, 36, (-1597));
      node0.hasChildren();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      Node node3 = new Node(307, nodeArray0);
      node2.isName();
      nodeArray0[0].isVoid();
      node3.isDo();
      nodeArray0[2].getLength();
      String string0 = "HuYG;7\\HR";
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.detachChildren();
      node0.isFalse();
      node0.isOnlyModifiesThisCall();
      node0.isSyntheticBlock();
      node0.setChangeTime(2);
      node0.getSideEffectFlags();
      node0.isIn();
      Node node1 = new Node(43, node0, node0);
      node1.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("", 241, 382);
      node0.toStringTree();
      node0.isSyntheticBlock();
      node0.setString("");
      Node node1 = new Node(0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node0.toString();
      node0.isUnscopedQualifiedName();
      node0.isContinue();
      node1.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      Node node2 = Node.newString((-1082), "STRING  241\n");
      node0.isExprResult();
      Node node3 = new Node((-370), node1, node2);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      node2.getDirectives();
      Node node4 = node3.clonePropsFrom(node2);
      Node node5 = new Node(56, node4, node1, node1, node1, 54, 47);
      node5.clonePropsFrom(node1);
      node4.checkTreeTypeAwareEqualsImpl(node0);
      node2.getDouble();
      node4.isEquivalentToShallow(node3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(2528, "com.google.javascript.rhino.jstype.RecordType");
      node0.mayMutateArguments();
      node0.getCharno();
      node0.detachChildren();
      node0.isGetElem();
      node0.setSourceEncodedPosition((-1));
      Node node1 = Node.newNumber(4215.556708368493);
      Node node2 = node0.srcref(node1);
      node1.isOnlyModifiesThisCall();
      Node node3 = new Node(50, node0, node0);
      node0.isWhile();
      node2.isQuotedString();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1620, 1620, 2993);
      node0.getStaticSourceFile();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      simpleSourceFile0.getLineOffset(64);
      simpleSourceFile0.getLineOffset(310);
      simpleSourceFile0.getLineOffset(51);
      node3.addChildrenAfter(node2, node0);
      node2.putProp(node1.SLASH_V, simpleSourceFile0);
      node0.replaceChildAfter(node3, node2);
      node1.detachChildren();
      node1.isOnlyModifiesThisCall();
      Node node4 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node3, node0);
      // Undeclared exception!
      try { 
        node4.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node0.setSourceFileForTesting((String) null);
      node1.mayMutateArguments();
      node0.getCharno();
      Node node2 = Node.newString(32, "*k&u^");
      node1.setDouble(40);
      Node node3 = new Node(node2.INFERRED_FUNCTION, node0);
      node1.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1987));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      Node node1 = Node.newString(42, "6d=P1t=\"/PTtejk85)", 32, 46);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node((-619));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      Node node1 = new Node(37, node0);
      node1.isNew();
      node1.getSourceOffset();
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getBooleanProp(8232);
      Node node3 = new Node(8, node0, node0);
      node3.getSideEffectFlags();
      String string0 = "Wk3ma\\Fja#'Ip`4K[d";
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(37);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting("cIU1>7g=baC!zC0:V8");
      node0.getJSDocInfo();
      node0.isNew();
      node0.getSourceOffset();
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.getBooleanProp(48);
      node0.getSideEffectFlags();
      String string0 = "Wk3ma\\Fja#'Ip`4K[d";
      node1.setString("Wk3maFja#'Ip`4K[d");
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node2.isEquivalentTo(node0, false, false, true);
      node2.getJSDocInfo();
      node0.isEquivalentTo(node3);
      node1.setString("h|!-\"U?8&,5pn2fk");
      node3.getLength();
      int int0 = 15;
      node3.setType(int0);
      int int1 = 50;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setThrows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node((-15), node3, 12, 56);
      node3.isFromExterns();
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node5.checkTreeEqualsImpl(node5);
      node2.isLocalResultCall();
      node4.isSwitch();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = Node.newString("%D00E>1fe31hw4vX");
      Node node6 = Node.newString(46, "KY8ab#3Y");
      node0.isStringKey();
      node5.isSetterDef();
      node2.getInputId();
      Node node7 = new Node((-2586), node3, (-2835), 46);
      node0.isFromExterns();
      node4.isSetterDef();
      Node node8 = new Node(31, 12, 32);
      node8.isAnd();
      node5.isOnlyModifiesArgumentsCall();
      Node node9 = new Node(63, 38, 1);
      node9.isSetterDef();
      Node node10 = new Node(38, node6, node8, node1, node3, 4, 39);
      node10.isTry();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node0.setSourceFileForTesting((String) null);
      node1.mayMutateArguments();
      node0.getCharno();
      Node node2 = Node.newString(31, "&*");
      node2.putIntProp(46, 31);
      node0.isExprResult();
      Node node3 = new Node(1284, node1, node2);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node1.removeChild(node2);
      node0.isOnlyModifiesArgumentsCall();
      node3.removeChild(node0);
      node3.getChildCount();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "$tV0s}_PdvFBGv|";
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      node0.setSourceFileForTesting("$tV0s}_PdvFBGv|");
      node0.getJSDocInfo();
      node0.isNew();
      node0.getSourceOffset();
      Node node1 = new Node(4095, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.getBooleanProp((-2021161078));
      node0.getSideEffectFlags();
      node2.setString("ALWAYS_FALSE");
      node2.isGetterDef();
      node2.replaceChild(node0, node1);
      node1.isFromExterns();
      // Undeclared exception!
      try { 
        node0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.REFLECTED_OBJECT;
      simpleSourceFile0.getLineOffset(2683);
      Node.newString((-5001), "&*");
      Node node0 = new Node(86, 48, 692);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node((-619));
      node0.getChangeTime();
      Node node1 = new Node(42, node0, 113, 56);
      node0.isParamList();
      int int0 = (-1669);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      Node node2 = new Node(48, node1, node0);
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 54;
      Node node0 = new Node(2152, 54, 36);
      Node node1 = new Node(54, node0, 2484, (-2329));
      Node node2 = new Node(31, node1, node1, node0, 56, 2054);
      node2.getAncestors();
      Node node3 = new Node(node1.FLAG_LOCAL_RESULTS, node2, node0);
      Node node4 = new Node(int0, node2, node0, node2, node3);
      Node node5 = new Node(int0, node4, node0, node1);
      String string0 = "this";
      // Undeclared exception!
      try { 
        node5.addSuppression(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "%D00E>1fe31hw4vX";
      Node node0 = Node.newString("%D00E>1fe31hw4vX");
      node0.removeChild((Node) null);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "%D00E>1fe31hw4vX";
      Node node0 = Node.newString("%D00E>1fe31hw4vX");
      node0.removeChild((Node) null);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isIf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(39, node0, node0, node0);
      node1.isVarArgs();
      node1.removeChild(node0);
      node1.isOnlyModifiesArgumentsCall();
      node0.removeChild(node1);
      int int0 = (-1773);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(117, (Node) null);
      // Undeclared exception!
      try { 
        node1.isAssignAdd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = (-619);
      Node node0 = new Node((-619));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      Node node1 = new Node(37, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Xl6PG/d%R.`!G", false);
      Node node2 = new Node(47, node1, node0, node1, node1, (-334), 899);
      Node node3 = new Node(int0, node2, node1, node1);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node2.isEquivalentTo(node0, false, true, true);
      node2.getJSDocInfo();
      node0.isEquivalentTo(node3);
      node3.getLength();
      node3.setType(15);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.newString("}[a&NVv dK");
      node1.getChangeTime();
      node0.addChildToBack(node1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = new Node(91, node0, node0, 12, 51);
      node1.addChildrenAfter(node0, node0);
      int int0 = 382;
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      Node node1 = Node.newNumber((-763.85023501));
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isVoid();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1987));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      node0.isSetterDef();
      node0.getNext();
      node0.getFirstChild();
      Node node1 = new Node(46, node0, node0, (Node) null);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node((-619));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      node2.getDirectives();
      Node node4 = Node.newString(4095, "");
      Node node5 = new Node(56, node4, node1, node1, node1, 54, 47);
      Node node6 = node5.clonePropsFrom(node1);
      node6.removeChildAfter(node4);
      node0.isTry();
      node3.isWhile();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|");
      node0.isString();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "%D00E>1fe31hw4vX";
      Node.newString((String) null);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isIf();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1987));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      node0.setDouble((-1987));
      Node node1 = new Node(node0.JSDOC_INFO_PROP, node0);
      Node node2 = null;
      try {
        node2 = new Node(node1.LENGTH, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 536870912
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      simpleSourceFile0.getLineOffset(39);
      Node node1 = new Node(536870912);
      Node node2 = new Node((-1257));
      node2.isLocalResultCall();
      node2.addChildrenToFront(node1);
      node2.isGetterDef();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(1061, "com.google.common.collect.UnmodifiableIterator", 1967, 1770);
      Node node1 = new Node(1061, node0, node0, 8, 119);
      node1.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2410);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isNot();
      node1.isEmpty();
      Node node2 = Node.newString((-15), "originalname", 12, 1);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node3.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-3786));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node((-3786), node0, node0);
      Node.newString(50, "%D00E>1fe31hw4vX", 57, 36);
      Node node4 = Node.newString("", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node((-3786), node3, 12, 56);
      StringWriter stringWriter0 = new StringWriter(1395);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      node5.appendStringTree(stringBuffer0);
      node3.isFromExterns();
      node5.isSetterDef();
      node2.getInputId();
      node1.setDouble(node3.ORIGINALNAME_PROP);
      int int0 = (-1051);
      Node node6 = new Node(int0, node1);
      node3.addChildToBack(node1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.REFLECTED_OBJECT;
      simpleSourceFile0.getLineOffset(2683);
      Node node1 = Node.newString((-5001), "&*");
      node1.toStringTree();
      int int1 = 110;
      int int2 = 2093;
      node1.putIntProp(int1, int2);
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry2.createAnonymousObjectType(jSDocInfo0);
      objectType0.clearResolved();
      JSType jSType0 = jSTypeRegistry1.getGreatestSubtypeWithProperty(objectType0, "Object#Key");
      stack0.add(jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node1.getBooleanProp((-2099));
      node0.replaceChild(node1, node1);
      node0.isSetterDef();
      node0.isNE();
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Node node1 = new Node(36);
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      node_AncestorIterable0.iterator();
      Node.newString((String) null);
      node4.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString("", 241, 382);
      node0.removeFirstChild();
      node0.toStringTree();
      node0.isSyntheticBlock();
      node0.setString("");
      Node node1 = new Node(0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node0.toString();
      node0.isUnscopedQualifiedName();
      node0.isContinue();
      node1.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node0.getDouble();
      node0.isComma();
      node1.getDirectives();
      // Undeclared exception!
      try { 
        node1.wasEmptyNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  241 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.detachChildren();
      node0.isFalse();
      node0.isOnlyModifiesThisCall();
      node0.isSyntheticBlock();
      node0.setChangeTime(2);
      node0.getSideEffectFlags();
      node0.isIn();
      InputId inputId0 = new InputId("ANY");
      node0.putProp(79, inputId0);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(12);
      node0.setWasEmptyNode(true);
      node0.isCast();
      node0.checkTreeEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("ALWAYS_FALSE", "Y10OT/q8C+F[M7XkCOH", 38, 38);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(12);
      Node node1 = new Node(2587, node0, node0, 57, 50);
      Node node2 = null;
      Node node3 = node0.srcref((Node) null);
      node3.setType(node1.FLAG_LOCAL_RESULTS);
      node1.getStaticSourceFile();
      node1.replaceChild(node2, node3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(0, (-691), 57);
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      Node node1 = Node.newString(16, "6d=P1t=\"/PTtejk85)", 1583, 1453);
      Node node2 = new Node((-2138), 54, 52);
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = new Node(51, node1, node0, 2, 752);
      node1.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("");
      node0.isOr();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12288);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      node0.isArrayLit();
      node0.setWasEmptyNode(false);
      node0.isCast();
      Node[] nodeArray0 = new Node[7];
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = jSDocInfo0.getAssociatedNode();
      nodeArray0[0] = null;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node2 = new Node(1917, nodeArray0);
      node0.checkTreeEqualsImpl(node2);
      nodeArray0[3].removeChild(node1);
      int int1 = 255;
      int int2 = 9;
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("Ee[(sH.4q");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node0.getString();
      node0.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(37);
      node0.getExistingIntProp(37);
      Node node1 = Node.newNumber((double) node0.CHANGE_TIME);
      // Undeclared exception!
      try { 
        node1.srcref(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 37
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = null;
      Node node2 = node0.clonePropsFrom((Node) null);
      // Undeclared exception!
      try { 
        node0.setLineno(node2.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = new Node(0, 48, 50);
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      String string0 = "";
      int int0 = 1053;
      node3.getString();
      Node node4 = Node.newString(string0, int0, node2.CHANGE_TIME);
      node4.getChangeTime();
      node3.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node4.isIn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("ALWAYS_FALSE", 29, 1067);
      Node node1 = node0.cloneNode();
      node0.getAncestor(32);
      Node node2 = new Node(155, node0, node1);
      String string0 = "";
      Node.newString("", 53, (-1063));
      node2.getChangeTime();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(57, node1);
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node3, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      String string1 = "duplicate child";
      // Undeclared exception!
      try { 
        enumElementType0.getPropertyNode(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(47, node0, node0);
      node1.isEquivalentTo(node0, false, true, true);
      node1.isOnlyModifiesThisCall();
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = Node.newString(52, "$tV0s}_PdvFBGv|");
      node3.getJSDocInfo();
      node0.isEquivalentTo(node3);
      node2.setString("ac@|smgqh:<^");
      node2.getLength();
      int int0 = 3216;
      node2.setType(int0);
      node3.isOnlyModifiesThisCall();
      node3.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node3.detachChildren();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // REGEXP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      node3.isSetterDef();
      node2.getInputId();
      node2.isEmpty();
      node3.addChildrenToBack(node1);
      node3.isContinue();
      node4.checkTreeEqualsImpl(node1);
      node3.useSourceInfoFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getBooleanProp(4095);
      node1.getSideEffectFlags();
      node1.setString("0(I=n9v}<u:$>(XaBp");
      node0.isGetterDef();
      int int0 = (-2519);
      int int1 = 77;
      Node node3 = null;
      try {
        node3 = new Node(int0, node1.SIDE_EFFECTS_FLAGS_MASK, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      jSTypeRegistry0.incrementGeneration();
      node0.getProp((-56));
      Node node1 = Node.newString(0, "(C", 29, (-56));
      Node node2 = node0.clonePropsFrom(node1);
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node.extractCharno(0);
      Node node0 = Node.newNumber((double) Integer.MAX_VALUE, 0, 0);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node0.getDouble();
      node0.isComma();
      node0.getDirectives();
      node0.wasEmptyNode();
      node0.isVarArgs();
      Node node1 = Node.newNumber(0.0);
      node1.setDirectives((Set<String>) null);
      node1.isNull();
      node1.isOnlyModifiesArgumentsCall();
      node0.detachChildren();
      node1.isDo();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      node0.isQuotedString();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      node1.toString(false, false, false);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      node3.isSetterDef();
      node2.getInputId();
      node2.isEmpty();
      node3.addChildrenToBack(node1);
      node3.isContinue();
      node4.checkTreeEqualsImpl(node1);
      node3.useSourceInfoFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("");
      node2.getDirectives();
      Node node4 = Node.newString(4095, "");
      node1.cloneNode();
      node4.addChildrenToFront(node3);
      node2.isGetterDef();
      node4.getExistingIntProp(57);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 0;
      String string0 = "%D00E>1fe31hw4vX";
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      node2.addChildBefore(node1, node0);
      Node node3 = new Node(int0, node0, node0);
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.detachChildren();
      node0.setSourceEncodedPosition(41);
      node0.removeProp(41);
      jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      Node node1 = new Node(40, node0, node0);
      node1.children();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node3 = Node.newNumber((double) 48);
      Node node4 = new Node(2, node1, 100, 16);
      node3.checkTreeTypeAwareEqualsImpl(node4);
      node0.replaceChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node.extractCharno(0);
      Node node0 = Node.newNumber((double) Integer.MAX_VALUE, 0, 0);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("jCK_jCC!;k*#M)d*", false);
      node0.getCharno();
      node0.isExprResult();
      Node node1 = new Node(2, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node0.setSideEffectFlags(node_SideEffectFlags6);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node((-619));
      node0.getAncestors();
      node0.isString();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isDec();
      Node node1 = new Node(53, node0, 113, (-1110));
      node1.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isNot();
      node1.isEmpty();
      Node.newString(0, "", 1, 40);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(1751);
      Node node4 = node2.srcrefTree(node3);
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node.extractCharno((-1616));
      Node node0 = Node.newNumber((double) 536870912, (-4994), 536870912);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(53);
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setReturnsTainted();
      node0.getDouble();
      Node node1 = Node.newNumber((double) 15);
      node1.isComma();
      node1.getDirectives();
      node1.wasEmptyNode();
      node1.isVarArgs();
      Node node2 = Node.newNumber((double) 49);
      node2.setDirectives((Set<String>) null);
      node2.isNull();
      node2.isOnlyModifiesArgumentsCall();
      node1.detachChildren();
      node2.isDo();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(16, 114, 103);
      Node node1 = Node.newString("`avo!h)pnT", (-619), (-422));
      node0.isQuotedString();
      Node node2 = node1.srcref(node0);
      node1.checkTreeEquals(node2);
      node2.isVarArgs();
      node2.srcrefTree(node1);
      node2.getLineno();
      node2.isQualifiedName();
      node0.toStringTree();
      node0.isGetterDef();
      node1.getLastChild();
      node2.isOnlyModifiesArgumentsCall();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(2010);
      Node node1 = new Node(4095, node0, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node2.getDirectives();
      Node node3 = Node.newString(4095, "");
      node0.clonePropsFrom(node1);
      node3.isGetterDef();
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(103, "~&&SX^{G", (-5902), 1339);
      node0.setSourceEncodedPosition(103);
      Node node1 = new Node((-3226), node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      nodeArray0[0] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(256);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("~&&SX^{G", true);
      node0.getCharno();
      node0.isExprResult();
      Node node2 = new Node(86, node1, node1);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-2900));
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags5);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isEquivalentTo(node0, false, false, true);
      node2.copyInformationFrom(node1);
      node2.getJSDocInfo();
      node2.isOnlyModifiesThisCall();
      node0.isOnlyModifiesArgumentsCall();
      node0.isDo();
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(1795, "com.google.common.collect.ImmutableList");
      nodeArray0[0] = node0;
      Node node1 = new Node(1795, nodeArray0);
      Node node2 = new Node(0, node1, node0, node0);
      node2.addChildrenToBack(node1);
      node2.replaceChildAfter(node0, nodeArray0[0]);
      node2.mayMutateGlobalStateOrThrow();
      nodeArray0[0].getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(65535, 65535, (-1484));
      node0.isWhile();
      node0.getChildCount();
      node0.setInputId((InputId) null);
      node0.isLabelName();
      node0.getJsDocBuilderForNode();
      node0.isObjectLit();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node1 = Node.newNumber((-763.85023501));
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isTypeOf();
      node1.removeFirstChild();
      node1.setSideEffectFlags(103);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node((-15), node3, 12, 56);
      node3.isFromExterns();
      node5.isSetterDef();
      node2.getInputId();
      node1.setInputId((InputId) null);
      node5.checkTreeEqualsImpl(node5);
      node2.isLocalResultCall();
      node2.setSideEffectFlags(3211);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1987));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      Node node1 = new Node(42, node0, node0, node0);
      node0.srcref(node1);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      Node node2 = new Node(4441, node0, node0, node0, 2, 122);
      Node node3 = new Node(node0.POST_FLAG, node0, node2);
      node3.getJsDocBuilderForNode();
      node3.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString(4095, "$tV0s}_PdvFBGv|");
      node0.toString();
      node0.isDec();
      node0.isTypeOf();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node1.mayMutateArguments();
      node0.getCharno();
      Node node2 = Node.newString(31, "&*");
      node2.putIntProp(46, 31);
      node0.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("g./K]_CFL4");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      node2.setJSType(templateType1);
      node0.isDec();
      Node.newString(29, "\n\nTree2:\n");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(536870912, 536870912, 536870912);
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1987));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      node0.useSourceInfoIfMissingFromForTree(node0);
      node0.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = true;
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.REFLECTED_OBJECT;
      simpleSourceFile0.getLineOffset(2683);
      int int1 = 48;
      node0.putIntProp((-5001), (-5001));
      Node node1 = null;
      node0.addChildrenAfter((Node) null, (Node) null);
      String string0 = "ALWAYS_FALSE";
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile(string0, boolean0);
      // Undeclared exception!
      try { 
        node0.setStaticSourceFile(simpleSourceFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(77, "}BuSx-+>j/C,7", 1610612736, 77);
      Node node1 = new Node(77, node0, node0, node0, node0, 38, 419);
      Node node2 = new Node(77, node1, 30, 4);
      node2.addSuppression("}BuSx-+>j/C,7");
      node2.toStringTree();
      node2.getInputId();
      node2.setQuotedString();
      node1.isInstanceOf();
      node0.isAdd();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|");
      Node node1 = new Node(153);
      Node node2 = new Node(122, node1, node0, 29, 16);
      node2.removeChild(node1);
      node1.removeChild(node2);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      node1.isInstanceOf();
      node1.isAdd();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(301, "}M.bNp,<_(~%lR]");
      node0.isExprResult();
      node1.isName();
      node1.isVoid();
      node0.isDo();
      node0.getLength();
      Node node2 = new Node(4095, node0, node1, node1, node1);
      node0.setSourceFileForTesting("~6x");
      Node node3 = new Node(29, 43, 31);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("WITH");
      node0.isReturn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags1.setThrows();
      Node node1 = Node.newNumber(0.0, 77, 108);
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.clearSideEffectFlags();
      node1.setVarArgs(false);
      node0.getJsDocBuilderForNode();
      node0.isTry();
      node0.getJsDocBuilderForNode();
      node0.getLength();
      node1.addSuppression("WITH");
      node0.checkTreeEqualsImpl(node1);
      node1.siblings();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(128);
      node0.getIntProp(5);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.checkTreeEqualsImpl(node1);
      node0.siblings();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(33, "ALWAYS_FALSE");
      node1.isExprResult();
      Node node2 = new Node((-15), node0, node0);
      node2.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node2.isDelProp();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isTypeOf();
      Node node2 = node1.removeFirstChild();
      node2.setSideEffectFlags(51);
      // Undeclared exception!
      try { 
        node0.isSwitch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("#FmOXV&wxA0");
      node0.isString();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString(407, "$tV0s}_PdvFBGv|");
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newNumber((double) 1);
      node0.isNot();
      node0.isHook();
      node0.isVoid();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(2683);
      Node node1 = Node.newString(38, "");
      node1.isExprResult();
      node0.isName();
      node0.isVoid();
      node1.isQualifiedName();
      node0.toStringTree();
      node1.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.getLastChild();
      node0.isOnlyModifiesArgumentsCall();
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(53, 53, 52);
      node0.getLength();
      node0.isNumber();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 2147483645;
      Node node0 = new Node(2147483645, (Node[]) null, 2147483645, 2147483645);
      int int1 = (-1271);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString((-748), "2`iy", 51, (-748));
      Node node1 = new Node((-748), node0);
      node0.setLength((-748));
      node0.isOnlyModifiesThisCall();
      node1.putIntProp(1302, 3663);
      Node node2 = node1.getLastChild();
      node2.isSyntheticBlock();
      node1.addChildToFront(node2);
      boolean boolean0 = true;
      int int0 = 3410;
      String string0 = "\n\nTree2:\n";
      Node.newString(int0, string0);
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      Node node1 = new Node((-612), (-1378), 1274);
      node1.addChildrenToFront(node0);
      Node node2 = node0.cloneTree();
      node2.getDouble();
      int int0 = 3179;
      node0.setSourceEncodedPositionForTree(int0);
      node2.isVarArgs();
      node2.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node1.isCase();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", false);
      int int0 = Node.DIRECTIVES;
      Node node1 = Node.newString(38, "");
      node1.isExprResult();
      Node node2 = new Node(57, node1, node0);
      node2.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isEquivalentToTyped(node1);
      node0.isUnscopedQualifiedName();
      Node.extractLineno(788);
      node2.putIntProp(31, 108);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(37);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting("cIU1>7g=baC!zC0:V8");
      node0.getJSDocInfo();
      node0.isEquivalentToTyped(node0);
      node0.getSourceOffset();
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.getBooleanProp(48);
      node0.getSideEffectFlags();
      String string0 = "Wk3ma\\Fja#'Ip`4K[d";
      node1.setString("Wk3maFja#'Ip`4K[d");
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node.extractCharno(0);
      Node node0 = Node.newNumber((double) Integer.MAX_VALUE, 0, 0);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node0.getDouble();
      node0.isComma();
      node0.getDirectives();
      node0.wasEmptyNode();
      node0.isVarArgs();
      Node node1 = Node.newNumber(0.04541113097096393);
      node1.setDirectives((Set<String>) null);
      node0.toString();
      node0.isDebugger();
      node1.isReturn();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) arrayList0);
      simpleErrorReporter0.error("\"E", "Object#Element", 1177, 12);
      node0.isIf();
      node0.isVarArgs();
      int int0 = 2097152;
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = (JSType) templateType1;
      jSTypeArray0[2] = (JSType) templateType1;
      jSTypeArray0[3] = (JSType) templateType0;
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = null;
      jSTypeArray0[6] = (JSType) templateType1;
      jSTypeArray0[7] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry1.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
      templateType1.canTestForEqualityWith(functionType1);
      jSTypeRegistry0.createOptionalNullableType(templateType1);
      int int1 = 1123;
      Node node1 = Node.newString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, int0, int1);
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(18, node0, node0, node0, 40, (-1612));
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$NumberNode", false);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(2683);
      Node node0 = Node.newString(824, "O4uGh.@LtYJ");
      node0.isExprResult();
      node0.isName();
      node0.isVoid();
      node0.isDo();
      node0.getLength();
      Node node1 = new Node(102, node0, node0, node0, node0);
      node0.setSourceFileForTesting("O4uGh.@LtYJ");
      node1.useSourceInfoFromForTree(node0);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(42, "%iya;vV`E(L{O\"", 1, 122);
      node1.getSourceFileName();
      node0.getLength();
      node1.getChangeTime();
      node0.isNoSideEffectsCall();
      node0.isContinue();
      node1.isTrue();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(65535, 65535, (-1484));
      node0.isWhile();
      node0.getChildCount();
      node0.setInputId((InputId) null);
      node0.isLabelName();
      Node node1 = Node.newNumber(0.0);
      node1.isEquivalentToTyped(node0);
      node1.isUnscopedQualifiedName();
      node1.hasChild(node0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node.extractCharno(0);
      Node node0 = Node.newNumber((double) Integer.MAX_VALUE, 0, 0);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node0.getDouble();
      node0.isComma();
      node0.getDirectives();
      node0.wasEmptyNode();
      node0.isVarArgs();
      Node node1 = Node.newNumber(0.04541113097096393);
      node1.setDirectives((Set<String>) null);
      node0.toString();
      node0.isDebugger();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(33, 1257, (-1363));
      node0.isWhile();
      node0.getChildCount();
      node0.setInputId((InputId) null);
      node0.isLabelName();
      Node node1 = Node.newString(131072, "", 32, 85);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(33, "ALWAYS_FALSE");
      node1.isExprResult();
      Node node2 = new Node((-15), node0, node0);
      node2.addChildBefore(node1, node0);
      node2.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node2.isDelProp();
      node0.isLocalResultCall();
      node0.toString(true, true, false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("Object#Key");
      node0.isExprResult();
      Node node1 = new Node(1273, node0, node0);
      node1.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isDelProp();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(65536, 65536, (-1489));
      node0.isOnlyModifiesArgumentsCall();
      node0.getChildCount();
      node0.setInputId((InputId) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString(91, "com.google.javascript.rhino.jstype.RecordType");
      node0.mayMutateArguments();
      node0.getCharno();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.RecordType");
      Node node2 = new Node((-3387), node0, node1);
      node2.isGetElem();
      node2.setSourceEncodedPosition(2);
      Node node3 = new Node(35, (-1300), 15);
      node2.addChildrenToFront(node3);
      node2.cloneTree();
      node1.getDouble();
      int int0 = (-4096);
      node1.setSourceEncodedPositionForTree(int0);
      node1.isVarArgs();
      node3.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node0.isCase();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.javascript.rhino.jstype.RecordType is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(1795, "com.google.common.collect.ImmutableList");
      nodeArray0[0] = node0;
      Node node1 = new Node(37, node0);
      node1.addChildrenToBack(node0);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      Node node1 = Node.newString(38, "");
      node1.isExprResult();
      node0.isVar();
      node1.getJsDocBuilderForNode();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(103, "~&&SX^{G", (-5902), 1339);
      node0.setSourceEncodedPosition(103);
      Node node1 = new Node((-3226), node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      nodeArray0[0] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(256);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.addChildrenToFront(node0);
      nodeArray0[0].isGetterDef();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(2683);
      Node node1 = Node.newString(38, "");
      node1.isExprResult();
      node1.setSourceEncodedPosition(51);
      node0.isQuotedString();
      node1.isNE();
      node0.getSideEffectFlags();
      node1.isNull();
      node0.isBreak();
      Node node2 = node1.clonePropsFrom(node0);
      node2.addChildToFront(node0);
      node2.isNoSideEffectsCall();
      Node node3 = new Node(105, node1, node2, 48, 1539);
      node3.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(1067, "%D00E>1fe31hw4vX", 25, 1067);
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("%D00E>1fe31hw4vX");
      Node node3 = new Node(1, node2, node0, 8, 32);
      node3.setWasEmptyNode(false);
      node1.isCast();
      node3.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString(91, "");
      node0.isExprResult();
      Node node1 = new Node((-1868), node0, node0);
      node1.addChildBefore(node0, node0);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), (-3801), (-3801));
      Node node1 = new Node(30, node0, node0, 53, 53);
      node1.replaceChildAfter(node0, node0);
      node1.addChildrenToFront(node0);
      Node node2 = null;
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node.extractCharno(0);
      Node node0 = Node.newNumber((double) Integer.MAX_VALUE, 0, 0);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1);
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node0.getDouble();
      node0.isComma();
      node0.getDirectives();
      node0.wasEmptyNode();
      node0.isVarArgs();
      Node node1 = Node.newNumber(0.04541113097096393);
      node1.setDirectives((Set<String>) null);
      node1.isNull();
      node1.isOnlyModifiesArgumentsCall();
      node0.detachChildren();
      node1.isDo();
      node0.getLineno();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node1 = Node.newNumber((-763.85023501));
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isTypeOf();
      Node node2 = new Node(16, node0, node1, node1);
      node1.setSourceFileForTesting("ALWAYS_FALSE");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node4 = node3.useSourceInfoFromForTree(node2);
      node1.removeChild(node4);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node1.putBooleanProp(32, true);
      InputId inputId0 = new InputId("Object#Key");
      node0.setInputId(inputId0);
      node0.isNew();
      Node node2 = new Node(0, node0, node0, node1);
      int int0 = 303;
      Node node3 = null;
      try {
        node3 = new Node(int0, node1, node1, node2, node0.FLAG_THIS_UNMODIFIED, node2.COLUMN_BITS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node1.mayMutateArguments();
      node0.getCharno();
      node0.isExprResult();
      node0.isName();
      node1.isVoid();
      node1.isDo();
      node0.getLength();
      Node node2 = new Node(47, (Node) null, node0, node0, node1);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node2.removeChild(node3);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("", 122, 345);
      Node node1 = node0.cloneNode();
      node1.isOnlyModifiesArgumentsCall();
      node1.isOnlyModifiesThisCall();
      node1.removeProp(122);
      node1.setChangeTime(29);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getQualifiedName();
      node1.getDirectives();
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      boolean boolean0 = false;
      int int0 = 1667;
      node1.getBooleanProp(int0);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node2, boolean0, boolean0, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isFunction();
      node0.isNull();
      node0.isInc();
      node0.isFalse();
      node0.isGetterDef();
      node0.isThrow();
      node0.getChildAtIndex(148);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = node0.cloneNode();
      node1.getAncestor(3154);
      Node node2 = new Node((-1755), (Node) null, node0, node0);
      String string0 = "itb'N";
      int int0 = 3377;
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, node0.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(2195, "");
      node0.isLabelName();
      Node node1 = node0.useSourceInfoIfMissingFromForTree((Node) null);
      Node node2 = Node.newString(node1.CHANGE_TIME, string0, node0.SIDE_EFFECT_FLAGS, node0.COLUMN_BITS);
      // Undeclared exception!
      try { 
        node2.hasMoreThanOneChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1345, nodeArray0, 85, (-2886));
      Node node1 = new Node((-1469), nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.newNumber(3229.560968521585, 42, 0);
      Node.newNumber((double) 4);
      node0.isTypeOf();
      node0.removeFirstChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParameters((JSType[]) null);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("cE6ar&)>oC$2}sf4o");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("slash_v", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(48);
      String string0 = "Q'6g-?s77|\\LC-d6gR";
      Node node1 = Node.newString(32, "Q'6g-?s77|LC-d6gR");
      node0.isExprResult();
      node1.isName();
      Node node2 = new Node(8, node1, node0, node1, node0, (-1472), (-463));
      node2.isVoid();
      node2.isDo();
      node0.getLength();
      Node node3 = new Node(15, node0, node1, node1, node1);
      Node node4 = null;
      Node node5 = node0.useSourceInfoFromForTree(node4);
      node1.removeChild(node5);
      int int1 = (-361);
      // Undeclared exception!
      try { 
        Node.newString(string0, node0.IS_DISPATCHER, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = Node.newString("NRmHe%%p7");
      node1.checkTreeEqualsImpl(node0);
      Node node2 = new Node(2, node1, 43, 30);
      node2.addChildrenAfter(node0, node1);
      Node node3 = Node.newString("ALWAYS_FLSE");
      node1.isContinue();
      node3.isGetProp();
      node2.clonePropsFrom(node3);
      node2.removeChildAfter(node0);
      int int0 = 262144;
      int int1 = 2517;
      Node node4 = null;
      try {
        node4 = new Node(int0, node2, int1, node1.FLAG_THIS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("");
      node0.isOr();
      node0.isWith();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      node_AncestorIterable1.iterator();
      Node node1 = new Node(37, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString(95, "is_dispatcher");
      node0.isLabelName();
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = new Node(53, node0, node1, node1, node1);
      node2.setSideEffectFlags(8);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      node1.isInstanceOf();
      node0.isDebugger();
      node0.isReturn();
      Node node2 = Node.newNumber(0.0, 793, 155);
      node2.isString();
      node2.isThis();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(103, "~&&SX^{G", (-5902), 1339);
      node0.setSourceEncodedPosition(103);
      Node node1 = new Node((-3226), node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      nodeArray0[0] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(256);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isGetterDef();
      node0.isThrow();
      node1.getChildAtIndex(8);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(16, 114, 103);
      Node node1 = Node.newString("`avo!h)pnT", (-619), (-422));
      node0.isQuotedString();
      Node node2 = node1.srcref(node0);
      node1.checkTreeEquals(node2);
      node2.isVarArgs();
      Node node3 = node2.srcrefTree(node1);
      node3.isFromExterns();
      node2.getLineno();
      node2.isQualifiedName();
      node0.toStringTree();
      node0.isGetterDef();
      node1.getLastChild();
      node2.isOnlyModifiesArgumentsCall();
      node1.isAssignAdd();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      jSTypeRegistry0.createTemplateType("");
      node0.isOr();
      node0.isWith();
      node0.addChildrenToFront((Node) null);
      Node node1 = null;
      int int1 = 35;
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "/(e;kN$P";
      Node node0 = Node.newString(2281, "/(e;kN$P", 2281, 2281);
      node0.children();
      node0.isQuotedString();
      node0.isNull();
      node0.toString();
      Node node1 = null;
      try {
        node1 = new Node(node0.VAR_ARGS_NAME, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2281
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString(">X6NF3&Q9H|D>S");
      Node node1 = node0.getFirstChild();
      Node node2 = Node.newNumber((-1976.41), 15, 662);
      node0.isLabel();
      node0.isCatch();
      Node node3 = node0.getLastSibling();
      Node node4 = node2.copyInformationFromForTree(node0);
      node4.setString(">X6NF3&Q9H|D>S");
      node3.clonePropsFrom(node0);
      node1.toStringTree();
      // Undeclared exception!
      try { 
        node0.getIntProp(node1.SIDE_EFFECT_FLAGS);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1976.41 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node(1, 1, 2219);
      int int0 = Node.MAX_COLUMN_NUMBER;
      node0.isNumber();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isNull();
      node1.isOnlyModifiesArgumentsCall();
      node0.detachChildren();
      node0.isDo();
      Node node2 = Node.newNumber((double) 4095);
      node2.getLineno();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, 0);
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(0, node0, node0);
      Node node4 = Node.newString("", 14, 56);
      node2.isEquivalentToTyped(node0);
      node4.toString();
      node2.isUnscopedQualifiedName();
      node4.isEquivalentTo(node3, false, false, false);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      nodeArray0[2] = node4;
      Node node5 = new Node(37, nodeArray0, 57, 4);
      node5.isContinue();
      Node node6 = new Node(38);
      node6.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.putIntProp((-539), 1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node3.isNot();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "com.google.common.collect.ImmutableList";
      Node node0 = Node.newString(1795, "com.google.common.collect.ImmutableList");
      Node node1 = Node.newString(51, "com.google.common.collect.ImmutableList");
      Node node2 = new Node(2367, node0, node1, node1, node0, 57, 1795);
      node2.clonePropsFrom(node1);
      Node node3 = new Node((-2062), node1, node1, node0, 612, 43);
      double double0 = 0.0;
      Node node4 = Node.newNumber(double0);
      node3.removeChildAfter(node4);
      // Undeclared exception!
      try { 
        node1.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isOnlyModifiesThisCall();
      jSTypeRegistry0.incrementGeneration();
      node0.getProp((-56));
      Node node1 = Node.newString(0, "(C", 29, (-56));
      Node.newString(2, "Object#Key", 30, 39);
      node1.getInputId();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(53, 53, 52);
      node0.getLength();
      node0.isDec();
      Node.newString(54, "[Q");
      node0.getJsDocBuilderForNode();
      node0.isHook();
      node0.isExprResult();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = 37;
      Node node0 = new Node(37);
      Node node1 = Node.newString("NRmHe%%p7");
      Node node2 = new Node(2709, node1, node1, 77, 10);
      node2.addChildrenAfter(node0, node1);
      node0.putProp(580, node2);
      Node node3 = new Node(56);
      node3.replaceChildAfter(node0, node2);
      node3.detachChildren();
      node2.isAdd();
      int int1 = (-797);
      String string0 = "synthetic";
      int int2 = (-1894);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) arrayList0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeArray0[3] = null;
      jSTypeArray0[4] = null;
      jSTypeRegistry0.createConstructorType((JSType) functionType0, false, jSTypeArray0);
      functionType0.isArrayType();
      simpleErrorReporter0.error("toString", "4L?^a^:!u+`jx{", 40, 48);
      node0.isIf();
      node0.isVarArgs();
      node0.putIntProp(33, 0);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = Node.REFLECTED_OBJECT;
      Node node0 = Node.newString(57, "&*");
      Node node1 = new Node(36, node0, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.addSuppression("NoResolvedType");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(116);
      node0.getSourceFileName();
      node0.getLength();
      node0.getChangeTime();
      node0.isCase();
      node0.isContinue();
      node0.isTrue();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(53);
      Node node2 = new Node((-2742));
      node1.getIntProp((-1205));
      node2.addChildrenToFront(node1);
      node0.isGetterDef();
      node0.isArrayLit();
      node0.getQualifiedName();
      node1.getBooleanProp(42);
      node1.getExistingIntProp(2574);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(128);
      node0.isStringKey();
      node0.isSetterDef();
      node0.getInputId();
      Node node1 = new Node(55, node0, 54, (-413));
      node1.isFromExterns();
      node0.isSetterDef();
      Node node2 = new Node(28, 57, 36);
      node0.isAnd();
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = new Node(57, 54, 61);
      node1.isSetterDef();
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(128);
      node0.isStringKey();
      node0.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      node0.getInputId();
      Node node1 = new Node(55, node0, 54, (-413));
      node1.isFromExterns();
      node0.isSetterDef();
      node0.addChildrenToFront(node1);
      node1.isGetterDef();
      node0.isArrayLit();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      int int0 = Node.ORIGINALNAME_PROP;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newString((-235), "com.google.common.collect.ImmutableMapValues");
      Node node1 = new Node(40, node0, (-177), (-235));
      node1.srcrefTree(node0);
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node0.isNE();
      node0.getSideEffectFlags();
      node0.isNull();
      node0.isBreak();
      Node node1 = new Node((-353), node0, node0, node0, node0);
      Node node2 = node0.clonePropsFrom(node1);
      node1.addChildToFront(node2);
      node2.isNoSideEffectsCall();
      int int0 = 1539;
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(2683);
      Node node1 = Node.newString(38, "");
      node1.isExprResult();
      node0.getJSDocInfo();
      node1.isOnlyModifiesThisCall();
      node1.isOnlyModifiesArgumentsCall();
      node0.isDo();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node((-975), node0, node0, node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber(1385.043356122);
      String string0 = "8rqh:Km8(^mDVp0";
      node0.setOptionalArg(true);
      Node node1 = Node.newString((-2608), "8rqh:Km8(^mDVp0");
      node0.checkTreeEquals(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setThrows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2608
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-1859));
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isNot();
      node0.isScript();
      node0.isNull();
      node0.isUnscopedQualifiedName();
      node0.isThrow();
      Node node1 = Node.newNumber(2.147483647E9, 48, (-1487));
      node0.checkTreeEquals(node1);
      node0.isInc();
      node1.getExistingIntProp(node0.FLAG_LOCAL_RESULTS);
      node0.isTrue();
      node0.isBlock();
      // Undeclared exception!
      try { 
        node1.isBreak();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node1.getInputId();
      Node node2 = Node.newString("C<QDArKC=wxJPa^5p");
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 74, (-3187));
      node0.isFromExterns();
      node0.isNumber();
      Node node1 = Node.newString(131072, "is_dispatcher");
      node0.getString();
      int int0 = 50;
      int int1 = (-2991);
      int int2 = 1141;
      Node node2 = new Node(int0, int1, int2);
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber((double) 95);
      node0.isNot();
      node0.isUnscopedQualifiedName();
      node0.isVoid();
      Node node1 = new Node(1, node0, node0, node0, 16, 42);
      node0.isEquivalentToTyped(node1);
      node0.isUnscopedQualifiedName();
      node1.isNew();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(116);
      node0.isBreak();
      Node node1 = new Node(1463, node0, node0, node0, node0);
      Node node2 = new Node(113, node1);
      node1.clonePropsFrom(node2);
      node2.addChildToFront(node1);
      String string0 = "&h\\!x;'Ey";
      int int0 = 16777216;
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, node0.DECR_FLAG);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", false);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(95);
      Node node1 = Node.newString(32, "is_constant_name");
      node0.isExprResult();
      node0.isName();
      node0.isVoid();
      node1.isQualifiedName();
      node0.toStringTree();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.isContinue();
      node2.isTrue();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.isAssign();
      node0.isDebugger();
      Node.extractLineno(2267);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      String string0 = "\"E";
      int int0 = 1177;
      node0.cloneNode();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) arrayList0);
      int int1 = 12;
      functionType0.testForEquality((JSType) null);
      // Undeclared exception!
      try { 
        simpleErrorReporter0.error(string0, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node((-619));
      node0.getAncestors();
      Node node1 = Node.newString("6^*xx8SQ,", 47, 8);
      Node node2 = node0.cloneNode();
      Node node3 = new Node(2);
      Node node4 = new Node(39, node3, node3, node1, node0);
      Node node5 = new Node(39, node2, node2, node4, node3, 54, 29);
      Node node6 = node5.getAncestor(node2.FLAG_NO_THROWS);
      int int0 = 1810;
      Node node7 = new Node(int0, node6, node1);
      String string0 = "%D00E>1fe31hw4vX";
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-1859));
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isNot();
      node0.isScript();
      node0.isNull();
      Node node1 = new Node(55, node0, 49, 32);
      node1.isFromExterns();
      node0.isSetterDef();
      Node node2 = Node.newNumber((double) 1, 55, 130);
      node2.addChildrenToFront(node1);
      node0.isGetterDef();
      node2.isArrayLit();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(119);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry1.createTemplateType("Object#Key");
      node0.isOr();
      node0.isWith();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable1 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node1);
      node_AncestorIterable1.iterator();
      Node node2 = new Node(2142, node1, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber((double) 95);
      node0.isNot();
      node0.isSyntheticBlock();
      node0.isVoid();
      Node node1 = Node.newNumber((double) 49);
      Node node2 = node0.clonePropsFrom(node1);
      node1.addChildToFront(node2);
      node0.isEquivalentToTyped(node2);
      Node node3 = new Node(48, node0, node0, node2);
      int int0 = 3020;
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(1972);
      node0.isObjectLit();
      node0.isQualifiedName();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(116);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.isCase();
      node0.isVar();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(91);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createTemplateType("~Gg,:7>%#bq6+6X");
      node0.isOr();
      node0.isWith();
      Node node1 = null;
      node0.checkTreeEquals((Node) null);
      node0.isInc();
      int int1 = (-312);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int int0 = 53;
      Node node0 = Node.newString(53, "com.google.common.collect.AbstractSetMultimap");
      Node node1 = new Node((-2299), node0, node0, node0);
      node0.isEquivalentTo(node1);
      Node node2 = node0.getLastSibling();
      Node node3 = Node.newNumber((double) 4095);
      node1.getChildBefore(node3);
      String string0 = "RecordProperty associated with a property should not be null!";
      // Undeclared exception!
      try { 
        Node.newString(string0, node2.IS_DISPATCHER, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isFunction();
      node0.isNull();
      Node node1 = Node.newString(38, "com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isExprResult();
      node0.isName();
      node1.isVoid();
      node1.isQualifiedName();
      node0.toStringTree();
      Node node2 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node2.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isContinue();
      node3.isTrue();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      Node node2 = Node.newNumber((double) 55);
      Node node3 = node1.clonePropsFrom(node2);
      node0.addChildToFront(node1);
      Node node4 = new Node(52, node0, node3, node2);
      // Undeclared exception!
      try { 
        node4.useSourceInfoIfMissingFromForTree(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = 37;
      Node node0 = new Node(37);
      Node node1 = Node.newString("NRmHe%%p7");
      Node node2 = new Node(2709, node1, node1, 77, 10);
      node0.isEquivalentTo(node1, false, true, false);
      node2.addChildrenAfter(node0, node1);
      node0.putProp(580, node2);
      node2.replaceChildAfter(node0, node2);
      node0.detachChildren();
      node2.isAdd();
      int int1 = (-797);
      String string0 = "synthetic";
      int int2 = (-1894);
      Node node3 = Node.newString(int1, string0, node2.SIDE_EFFECTS_ALL, int2);
      node3.useSourceInfoIfMissingFromForTree(node0);
      Node[] nodeArray0 = new Node[9];
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString(",t]B$ah", (-15), 115);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      String string0 = "cIU1>7g=baC!zC0:V8";
      Node node1 = new Node(117, node0, node0, node0, node0, 40, 35);
      node1.setSourceFileForTesting((String) null);
      node0.getJSDocInfo();
      node0.isNew();
      node0.getSourceOffset();
      Node node2 = Node.newString(46, "cIU1>7g=baC!zC0:V8", 51, 52);
      Node node3 = node1.copyInformationFromForTree(node2);
      node2.getBooleanProp(48);
      node2.getSideEffectFlags();
      node3.setString((String) null);
      node0.isGetterDef();
      int int0 = 94;
      int int1 = 2215;
      Node node4 = Node.newString(int1, string0);
      int int2 = 10;
      Node node5 = new Node(int0, node4, node1, node3, int2, node1.ORIGINALNAME_PROP);
      node5.replaceChild(node0, node1);
      // Undeclared exception!
      try { 
        node1.isFromExterns();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CONTINUE 40 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(57, node0, node0);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isInstanceOf();
      node0.isDebugger();
      node0.isReturn();
      node0.isCase();
      node1.isVar();
      node0.getSourceOffset();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(16, 114, 103);
      Node node1 = Node.newString("`avo!h)pnT", (-619), (-422));
      node0.isQuotedString();
      node0.getQualifiedName();
      Node node2 = node1.srcref(node0);
      node1.checkTreeEquals(node2);
      node2.isVarArgs();
      Node node3 = node2.srcrefTree(node1);
      node3.isFromExterns();
      node2.getLineno();
      node0.toStringTree();
      node0.isGetterDef();
      node1.getLastChild();
      node2.isOnlyModifiesArgumentsCall();
      node2.isRegExp();
      node2.isTrue();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      node0.isVoid();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      node0.isGetProp();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(902, node0, node0, node0, node0, 893, 38);
      node0.isEquivalentToTyped(node1);
      node1.mayMutateArguments();
      node1.getCharno();
      node1.putIntProp(55, 46);
      node1.isExprResult();
      node1.isDec();
      Node.newString(783, "\n\nTree2:\n");
      node1.isTypeOf();
      node0.isLocalResultCall();
      node0.addChildToFront((Node) null);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node1.setChangeTime(64);
      node0.children();
      node1.getAncestors();
      node0.addChildrenToBack(node1);
      node1.isIn();
      InputId inputId0 = new InputId("$tV0s}_PdvFBGv|");
      node1.isSyntheticBlock();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString("Use SerializedForm");
      node0.getChildCount();
      node0.hasChild(node0);
      node0.isIf();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(95);
      Node node1 = new Node(95, node0);
      Node node2 = new Node(95, node1, 36, 17);
      node0.addSuppression("qW1[y");
      node1.toStringTree();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node3 = new Node(54, node1, node1, node2, node2);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      node_AncestorIterable1.iterator();
      int int0 = 1093;
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(53);
      Node node2 = Node.newString(51, "Udp hfO]:#FY-[=C", 155, 50);
      node1.toString(false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.checkTreeEqualsImpl(node2);
      node1.siblings();
      node1.isObjectLit();
      node1.getAncestors();
      // Undeclared exception!
      try { 
        node1.isGetterDef();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      node1.isInstanceOf();
      node1.isAdd();
      node1.getAncestors();
      node0.isSwitch();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(53);
      Node node2 = Node.newString("pL%wJY>866TF");
      Node.newString("pL%wJY>866TF", 16, 31);
      Node node3 = new Node(1103, node1, node2);
      node3.checkTreeEqualsImpl(node1);
      node3.getIntProp(2010);
      node2.isOnlyModifiesArgumentsCall();
      node3.isDo();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(33, "ALWAYS_FALSE");
      node1.isExprResult();
      Node node2 = new Node((-15), node0, node0);
      node2.isEquivalentTo(node1, false, false, true);
      Node node3 = node2.copyInformationFrom(node1);
      node0.getJSDocInfo();
      node2.isOnlyModifiesThisCall();
      node1.addChildAfter(node3, node3);
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node((-619));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.setType((-619));
      node0.getStaticSourceFile();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node.newString(42, "s2Q&DZm{[@X(>Q");
      node1.isTrue();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("}/pc4p}");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node0.getInputId();
      node0.setSourceEncodedPosition(4095);
      node0.setQuotedString();
      node0.isInstanceOf();
      node0.isAdd();
      node0.getAncestors();
      node0.isSwitch();
      node0.getChildAtIndex((-1404));
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = Node.DECR_FLAG;
      Node node0 = Node.newString(37, "%GN7=nFsz");
      node0.isExprResult();
      Node node1 = Node.newString(">P@J@fBr9E9}");
      Node node2 = new Node((-456), node0);
      node0.checkTreeEqualsImpl(node1);
      node0.getIntProp(787);
      node0.isOnlyModifiesArgumentsCall();
      node0.isDo();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(1984);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(117);
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isNot();
      node0.isString();
      node0.isNull();
      Node node1 = new Node(16, node0, 57, 135);
      Node node2 = new Node(40);
      node2.isFromExterns();
      node0.isSetterDef();
      Node node3 = Node.newNumber(1111.9252538, 57, 54);
      node0.addChildrenToFront(node2);
      node2.isGetterDef();
      node3.isArrayLit();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newNumber((-763.85023501));
      node0.isNot();
      node0.isHook();
      node0.isVoid();
      node0.getJSDocInfo();
      node0.isGetElem();
      Node node1 = new Node(52, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.isNoSideEffectsCall();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(139);
      node0.getIntProp(139);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.isCase();
      node0.isVar();
      node0.isComma();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.addChildAfter((Node) null, (Node) null);
      node0.getAncestor(node1.LENGTH);
      // Undeclared exception!
      try { 
        node0.isLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(149);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry1.createTemplateType("Object#Key");
      node0.isOr();
      node0.isWith();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable1 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node1);
      node_AncestorIterable1.iterator();
      Node node2 = new Node(2142, node1, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(54, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("F");
      node0.setIsSyntheticBlock(false);
      node2.getDirectives();
      Node node4 = Node.newString(4095, "F");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node5 = new Node(1, node4, node1, node1, node1, 54, 47);
      Node node6 = node5.clonePropsFrom(node1);
      node6.removeChildAfter(node4);
      node3.isWhile();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = Node.newString("NRmHe%%p7");
      Node node2 = new Node(2709, node1, node1, 77, 10);
      node2.addChildrenAfter(node0, node1);
      node0.putProp(580, node2);
      node1.addSuppression("qW1[y");
      Node node3 = Node.newString(38, "V'ij6");
      node3.toStringTree();
      node2.getInputId();
      Node node4 = Node.newString("quoted", 30, (-3846));
      node3.isOnlyModifiesArgumentsCall();
      node2.getChildBefore(node1);
      node0.isFor();
      node3.children();
      node4.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      node1.isInstanceOf();
      node1.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(0);
      node0.mayMutateArguments();
      Node node1 = new Node(0, node0, node0, node0, node0, (-2519), 21);
      node0.isEquivalentToTyped(node1);
      node1.mayMutateArguments();
      node0.getCharno();
      node0.isNoSideEffectsCall();
      node0.isContinue();
      node0.isGetProp();
      Node node2 = new Node(15, node1, node0, node1, (-471), (-3453));
      String string0 = "WBO*,w";
      Node node3 = Node.newString(string0);
      node3.getAncestors();
      node0.checkTreeEqualsImpl(node3);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(128);
      node0.isStringKey();
      node0.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      node0.getInputId();
      node0.isUnscopedQualifiedName();
      node0.isCast();
      Node node1 = new Node((-3616), node0, node0);
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isDelProp();
      Node node2 = Node.newString(39, "\n\nSubtree2: ");
      node2.isRegExp();
      Node node3 = new Node(49);
      node3.cloneNode();
      node1.isIf();
      node1.isCatch();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = new Node(57, 29, 57);
      node1.addChildrenToBack(node0);
      node0.setString("%D00E>1fe31hw4vX");
      node0.addChildrenToBack((Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = Node.newString(1, "ReferenceError");
      node0.isExprResult();
      node1.isDec();
      Node node2 = Node.newString("ReferenceError");
      Node node3 = Node.newString("Mp~Wv\u0001-B{<CZz^", 38, 49);
      Node node4 = new Node(4095, node2, node3);
      node1.isEquivalentToTyped(node4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.isContinue();
      node4.replaceChild(node3, node5);
      node5.isFor();
      node5.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node.mergeLineCharNo(33, 33);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(33, nodeArray0, 51, 2947);
      Node node1 = new Node(31, node0, node0, node0, 45, 43);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Recorded bad position information\nstart-line: ", node1, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      ObjectType.createDelegateSuffix(enumElementType0.NOT_A_TYPE);
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      String string0 = "com.google.javascript.rhino.Node$AncestorIterable";
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        enumElementType1.setValidator(predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(42, "%iya;vV`E(L{O\"", 1, 122);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isQualifiedName();
      node1.getSourceFileName();
      node0.isNoSideEffectsCall();
      node0.isContinue();
      node1.isTrue();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node.extractLineno((-3355));
      Node node0 = null;
      Node node1 = new Node(1048575, (Node) null, (Node) null, (Node) null);
      int int0 = 1206;
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(111);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(1, "ReferenceError");
      node0.isExprResult();
      node1.isDec();
      node0.removeProp(48);
      node0.setChangeTime(2240);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(57);
      node0.isNot();
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = new Node(57, 29, 57);
      node1.addChildrenToBack(node0);
      node0.setString("%D00E>1fe31hw4vX");
      node1.isSetterDef();
      node0.addChildrenToFront(node1);
      node1.isGetterDef();
      node1.isArrayLit();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = new Node(51, 306, 1756);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("s2Q&DZm{[@X(>Q", node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType0 = enumElementType1.getPrimitiveType();
      jSTypeArray0[1] = jSType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[2] = jSType1;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(1208, node1, node1);
      node2.getProp(119);
      Node node3 = Node.newString(751619276, "Not declared as a type name", 53, 36);
      node0.clonePropsFrom(node3);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setMutatesArguments();
      node0.isInc();
      node0.isFalse();
      node0.putIntProp(35, 1623);
      node0.isExprResult();
      node0.isDec();
      Node.newString(30, "\n\nTree2:\n");
      node0.isTypeOf();
      node0.toStringTree();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(53);
      Node node2 = Node.newString(51, "Udp hfO]:#FY-[=C", 155, 50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.checkTreeEqualsImpl(node2);
      node1.siblings();
      node1.isObjectLit();
      node0.srcrefTree(node2);
      node0.getParent();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      Node node1 = Node.newString(12, "!B]dN`ZP_f'");
      node0.isExprResult();
      Node node2 = Node.newString(57, "!B]dN`ZP_f'");
      node1.putIntProp(1, 4095);
      node2.isExprResult();
      node1.isDec();
      Node.newString(0, ">UU}FtG8Lr-h)bNR");
      node0.isTypeOf();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getChildCount();
      Node node3 = new Node(56, node2);
      node3.isCast();
      node3.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = new Node(47, node0, node0, node0, node0);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node1);
      Node node2 = new Node(16, node1, node1);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = Node.newString((-1094), "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation", 16, 49);
      node3.isOnlyModifiesThisCall();
      Node node4 = Node.newString("com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation", 54, 116);
      node2.addChildToFront(node4);
      node0.mayMutateArguments();
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(53);
      node1.getIntProp((-15));
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      Node node2 = Node.newString("ALWAYS_FALSE");
      node2.setVarArgs(false);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      int int0 = Node.LENGTH;
      node0.isOnlyModifiesArgumentsCall();
      node0.getLastSibling();
      node0.isDo();
      node2.setDouble(54);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-58));
      node0.setChangeTime(1067);
      node0.children();
      node0.getAncestors();
      node0.getSourceFileName();
      node0.isEquivalentToShallow(node0);
      node0.isContinue();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = Node.DIRECTIVES;
      Node node0 = Node.newString(37, "%GN7=nFsz");
      node0.isExprResult();
      node0.isName();
      node0.isVoid();
      Node node1 = new Node(86, (-82), 54);
      node0.isParamList();
      node0.isGetterDef();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString("\n", 2762, 2762);
      node0.setType(2762);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 14, 56);
      node4.getChangeTime();
      Node node5 = new Node((-15), node3, 12, 56);
      node3.isFromExterns();
      node5.isSetterDef();
      node5.getProp(38);
      Node.newString(39, "dJE)leFG4&a", (-1078), 57);
      Node node6 = node3.clonePropsFrom(node0);
      node6.isAdd();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node.mergeLineCharNo(49, (-3485));
      Node node0 = Node.newString(4370527, "Recorded bad position information\nstart-line: ");
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'1_YtqdYP");
      Node node0 = new Node(0, (-691), 57);
      node0.isDec();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isNot();
      node0.isEmpty();
      Node node1 = Node.newString(16, "6d=P1t=\"/PTtejk85)", 1583, 1453);
      Node node2 = new Node((-2138), 54, 52);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node node4 = new Node(51, node1, node0, 2, 752);
      Node node5 = new Node(4095, node2, node3, node0, node1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("F");
      node2.getDirectives();
      Node node4 = Node.newString(4095, "F");
      Node node5 = new Node(1, node4, node1, node1, node1, 54, 47);
      Node node6 = node5.clonePropsFrom(node1);
      node6.useSourceInfoIfMissingFrom(node1);
      node6.removeChildAfter(node4);
      node3.isWhile();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isCast();
      node0.isSyntheticBlock();
      node0.addSuppression("u11ou 6$`a");
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      node1.isInstanceOf();
      node1.isAdd();
      node1.isArrayLit();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(95);
      Node node1 = new Node(95, node0);
      Node node2 = new Node(95, node1, 36, 17);
      node0.addSuppression("qW1[y");
      node1.toStringTree();
      Node node3 = Node.newString(26, "qW1[y");
      node1.isNoSideEffectsCall();
      Node node4 = new Node(65536);
      node4.isContinue();
      node1.isGetProp();
      Node node5 = new Node(2638, node3, node0, node1, (-2426), 2937);
      String string0 = "Error";
      Node.newString(string0);
      node0.checkTreeEqualsImpl(node1);
      node5.checkTreeTypeAwareEqualsImpl(node4);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = Node.newString("n#|pSrV(rrlw", (-286), 32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      Node node1 = Node.newString(49, "n#|pSrV(rrlw");
      Node node2 = node1.clonePropsFrom(node0);
      node2.checkTreeEquals(node0);
      node1.getProp(16);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node1.putIntProp(39, 39);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      Node node4 = new Node(117, node0, node0, node0);
      node4.getInputId();
      node4.addChildrenAfter(node0, node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.replaceChild(node4, node4);
      node3.isDo();
      node1.setSideEffectFlags(node0.SIDE_EFFECT_FLAGS);
      node2.isAssignAdd();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = new Node(57, 29, 57);
      node1.addChildrenToBack(node0);
      node1.setType(152);
      node0.addChildrenToFront(node1);
      node1.isGetterDef();
      node0.removeFirstChild();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|", 442, 1067);
      node0.getAncestors();
      Node node1 = new Node(40, 40, 125);
      node0.addChildrenToBack(node1);
      node1.setString("free_call");
      node0.isSetterDef();
      node1.addChildrenToFront(node0);
      node1.isGetterDef();
      node1.isArrayLit();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString("Recorded bad position information\nstart-line: ", 1626, (-1774));
      node0.getSideEffectFlags();
      Node node1 = new Node((-1035), node0);
      node1.getIndexOfChild(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.checkTreeEquals(node2);
      Node node3 = Node.newString(38, ",az3}4EIW=R7d");
      node3.isWhile();
      node3.removeProp(38);
      node3.cloneTree();
      node2.getProp(38);
      Node node4 = node2.srcref(node3);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Recorded bad position information\nstart-line: ", true);
      node4.setStaticSourceFile(simpleSourceFile0);
      node3.replaceChildAfter(node4, node2);
      node2.setDouble(node1.IS_DISPATCHER);
      node2.getLastSibling();
      node3.getStaticSourceFile();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", false);
      simpleSourceFile0.getLineOffset(14);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(95);
      Node node1 = Node.newString(32, "is_constant_name");
      node0.isExprResult();
      node0.isVoid();
      node1.isQualifiedName();
      node0.toStringTree();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node0.isSwitch();
      Node node2 = new Node(37, node0, node0, node0, node1);
      node2.isBlock();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(1795, "com.google.common.collect.ImmutableList");
      nodeArray0[0] = node0;
      Node node1 = new Node(1795, nodeArray0);
      node1.addChildrenToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isLabel();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = Node.newString(1, "ReferenceError");
      node0.isExprResult();
      node1.isDec();
      Node.newString("ReferenceError");
      Node node2 = Node.newString("Mp~Wv\u0001-B{<CZz^", 38, 49);
      Node node3 = Node.newString((-852), "");
      node0.isExprResult();
      node3.isDec();
      node2.isVoid();
      node3.getDirectives();
      node3.getLength();
      Node node4 = new Node(457, node0, node0, node2, node3);
      node0.useSourceInfoFromForTree(node2);
      node4.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isSyntheticBlock();
      Node node1 = Node.newString(10, "t(Ib'QxXg'<*zYlV+*[");
      node1.isExprResult();
      node1.isDec();
      node0.srcrefTree(node1);
      Node node2 = Node.newString(16, "$tV0s}_PdvFBGv|");
      node0.getJsDocBuilderForNode();
      node0.isDelProp();
      node0.isHook();
      Node node3 = Node.newNumber((double) 29, (-2900), 54);
      Node node4 = new Node(47, node3, node3, 100, 1464);
      node2.useSourceInfoFrom(node4);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("value", "t(Ib'QxXg'<*zYlV+*[", 47, 37);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node5.replaceChild(node2, node0);
      node0.isFor();
      node0.isAssignAdd();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(41);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = new Node(2, 1, 31);
      node2.isNull();
      node2.isOnlyModifiesArgumentsCall();
      node1.detachChildren();
      node1.isDo();
      Node.newNumber((double) 52);
      node2.getLineno();
      node0.isFor();
      node1.mayMutateGlobalStateOrThrow();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node(128);
      node0.isStringKey();
      node0.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      node0.getInputId();
      Node node1 = new Node(55, node0, 54, (-413));
      node0.isOnlyModifiesThisCall();
      node0.isCast();
      Node node2 = Node.newNumber((double) 1, 63, (-1724));
      Node node3 = Node.newString(4, "Recorded bad position information\nstart-line: ");
      node3.isBlock();
      node0.detachFromParent();
      node2.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newNumber((-763.85023501));
      node0.isExprResult();
      node0.isName();
      node0.isVoid();
      int int0 = Node.IS_DISPATCHER;
      Node node1 = new Node(153, node0);
      node0.addChildToFront(node1);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = Node.newString(47, "is_constant_name", 50, 43);
      Node node2 = new Node(4095, node0, node1, node0, 55, 40);
      Node node3 = node0.copyInformationFrom(node1);
      Node.newString("is_constant_name");
      node3.getDirectives();
      Node.newString(56, (String) null);
      Node node4 = new Node(node0.EMPTY_BLOCK, node1, node1);
      int int0 = 117;
      Node node5 = null;
      try {
        node5 = new Node(node3.INCRDECR_PROP, node1, node0, node4, node4, int0, node2.STATIC_SOURCE_FILE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(1972);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = Node.newString(40, "ReferenceError");
      node1.isExprResult();
      node1.isDec();
      Node node2 = Node.newString("ReferenceError");
      Node node3 = Node.newString("end-char: ", 87, 52);
      Node node4 = new Node(152, node1, node3);
      node2.isEquivalentToTyped(node4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.isContinue();
      Node node5 = new Node(46, node4, 39, 49);
      node5.replaceChild(node4, node2);
      node3.isFor();
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(1972);
      Node node1 = node0.copyInformationFrom(node0);
      Node node2 = Node.newString("F");
      node1.getDirectives();
      Node node3 = Node.newString(4095, "F");
      Node node4 = new Node(1, node3, node0, node0, node0, 54, 47);
      Node node5 = node4.clonePropsFrom(node0);
      node5.removeChildAfter(node3);
      node2.isWhile();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("n#|pSrV(rrlw", (-286), 32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString("Mp~Wv\u0001-B{<CZz^", 52, 3398);
      Node node2 = new Node(38, node1, node0);
      node2.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.isContinue();
      node2.replaceChild(node1, node3);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node1 = Node.newString("n#|pSrV(rrlw", (-4370), 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.setDirectives(hashSet0);
      Node node2 = Node.newString(2, "WEPIwM\"iiy");
      Node node3 = node1.clonePropsFrom(node0);
      node0.checkTreeEquals(node3);
      node1.setSourceEncodedPosition(node0.DECR_FLAG);
      node2.setQuotedString();
      node2.isInstanceOf();
      node1.getAncestors();
      node2.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node1.isDo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(116);
      node0.getSourceFileName();
      node0.getJsDocBuilderForNode();
      node0.isHook();
      node0.isNE();
      Node node1 = node0.cloneTree();
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node0.isInstanceOf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-430));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString((-430), "p;PK^");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'qGiCFN_");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of((TemplateType) null);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        templateType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString("Recorded bad position information\nstart-line: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node((-1109), node0, node0, node0, node0, 120, 32);
      Node node2 = node1.clonePropsFrom(node0);
      node1.isEquivalentTo(node0, false, false, true);
      node0.removeChildAfter(node2);
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(41);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node2 = new Node(2, 1, 31);
      node2.isNull();
      node2.isOnlyModifiesArgumentsCall();
      node1.detachChildren();
      node1.isDo();
      Node.newNumber((double) 52);
      node2.getLineno();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node1.srcref(node0);
      node1.checkTreeEqualsImpl(node0);
      node1.isLabelName();
      Node node2 = new Node(47, (Node[]) null, 32, 54);
      node0.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = new Node(128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isOnlyModifiesArgumentsCall();
      node0.isOnlyModifiesThisCall();
      node0.removeProp(128);
      Node node1 = new Node(2);
      node1.setChangeTime(29);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(2135);
      node2.isNot();
      node0.isEmpty();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString("");
      String string0 = "ALWAYS_FALSE";
      node0.setChangeTime(262);
      node0.setSourceEncodedPositionForTree((-4046));
      Node node1 = Node.newString(114, "ALWAYS_FALSE");
      Node node2 = new Node((-4965), node1);
      Node node3 = node2.copyInformationFrom((Node) null);
      node3.isSyntheticBlock();
      node3.getIndexOfChild(node1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      node3.isEquivalentTo(node0, boolean1, boolean0, boolean0);
      // Undeclared exception!
      try { 
        node0.getJSDocInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = Node.newString("C+/#m8Zp;g5//avI");
      node1.getDirectives();
      Node node2 = Node.newString(91, "%D00E>1fe31hw4vX");
      Node node3 = new Node(31, node1, node1, node2, node0, 31, 1067);
      node2.clonePropsFrom(node1);
      node3.removeChildAfter(node1);
      node3.isWhile();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.setSourceFileForTesting("");
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = node0.copyInformationFrom(node1);
      node0.getJSDocInfo();
      node1.addChildAfter(node2, node0);
      node0.getJsDocBuilderForNode();
      node0.isAssign();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(128, 128, 128);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isExprResult();
      node0.isName();
      node0.isVarArgs();
      node0.isVoid();
      node0.isParamList();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString("Recorded bad position information\nstart-line: ", 42, 1226);
      Node node1 = new Node((-769), node0, node0);
      int int0 = 14;
      node1.setVarArgs(true);
      Node node2 = Node.newString(";#kCyr", 2692, 30);
      node0.toString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.isUnscopedQualifiedName();
      Node node4 = Node.newNumber((double) 38);
      node0.isEquivalentTo(node4, false, false, true);
      node1.isContinue();
      Node node5 = new Node(102);
      node5.appendStringTree((Appendable) null);
      node5.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node6 = new Node(int0, node4, node1);
      int int1 = 49;
      int int2 = 102;
      Node node7 = new Node(int1, int2, node2.FLAG_NO_THROWS);
      int int3 = 56;
      Node node8 = new Node(int3, node4.POST_FLAG, node0.INPUT_ID);
      node8.isParamList();
      // Undeclared exception!
      try { 
        node8.isTrue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(37, node0, 8, 56);
      node0.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
      node1.toStringTree();
      node0.getInputId();
      node0.setSourceEncodedPosition(1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.toStringTree();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = (-15);
      String string0 = "%D00E>1fe31hw4vX";
      Node node0 = Node.newString("%D00E>1fe31hw4vX", 1067, (-15));
      node0.getAncestors();
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      int int1 = 14;
      // Undeclared exception!
      try { 
        Node.newString(string0, int1, node2.CHANGE_TIME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("n#|pSrV(rrlw", (-286), 18);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      Node node1 = Node.newString(49, "n#|pSrV(rrlw");
      Node node2 = node1.clonePropsFrom(node0);
      node2.checkTreeEquals(node0);
      node1.setSourceEncodedPosition(12);
      node2.getChangeTime();
      node2.isCase();
      node2.isVar();
      node2.isComma();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(39);
      Node node1 = Node.newString(36, "cha_time");
      node0.isNoSideEffectsCall();
      node0.isGetterDef();
      Node node2 = node0.removeFirstChild();
      node0.getInputId();
      node0.addChildToBack((Node) null);
      node2.isInc();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = new Node(37);
      node0.getStaticSourceFile();
      Node node1 = Node.newString("", 3396, 905);
      Node node2 = node0.cloneNode();
      node0.isOnlyModifiesArgumentsCall();
      node1.isOnlyModifiesThisCall();
      node0.removeProp((-3577));
      node2.setChangeTime(56);
      Node node3 = new Node((-483), node0, node2, node2);
      node2.copyInformationFromForTree(node3);
      node3.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node3.isNot();
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isParamList();
      node1.getChildAtIndex(4);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("Recorded bad position information\nstart-line: ", 42, 1226);
      Node node1 = new Node((-769), node0, node0);
      node1.setVarArgs(true);
      Node node2 = Node.newString(";#kCyr", 2692, 30);
      node0.toString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.isUnscopedQualifiedName();
      Node node4 = new Node(8, node3, node2);
      node0.isEquivalentTo(node4, false, false, true);
      node1.isContinue();
      node3.copyInformationFromForTree(node0);
      Node node5 = new Node(102);
      node5.appendStringTree((Appendable) null);
      node5.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node4.INPUT_ID);
      node0.isNot();
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.setVarArgs(true);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node1.isInstanceOf();
      node0.isBlock();
      node0.isWhile();
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isVoid();
      Node node1 = Node.newNumber((double) 29);
      Node node2 = new Node(154, node0);
      node2.isEmpty();
      node0.isThis();
      node0.isAssignAdd();
      node1.isIn();
      node1.setDouble(43);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString("4k=Zwc\"k", (-2200), 273);
      Node node1 = new Node(273, node0, node0, 42, 154);
      node1.isFromExterns();
      Node node2 = new Node(273, node1, node1, node1, node1);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals(node2);
      node0.isCase();
      node1.getSideEffectFlags();
      node1.isNull();
      node0.detachFromParent();
      node0.isAssign();
      node2.toStringTree();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(155, "NoResolvedType", (-3250), 13);
      node0.isNot();
      node0.isSyntheticBlock();
      node0.isVoid();
      node0.toString();
      node0.isDebugger();
      node0.isReturn();
      node0.isString();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      Node node1 = new Node(427);
      Node node2 = node0.srcref(node1);
      node0.isString();
      node1.isEmpty();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(42, "%iya;vV`E(L{O\"", 1, 1);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.getQualifiedName();
      node2.replaceChildAfter(node0, node0);
      node1.isGetterDef();
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node2.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(32, "is_constant_name");
      node0.isVoid();
      node1.isQualifiedName();
      node1.isHook();
      node1.isNE();
      Node node2 = node0.cloneTree();
      node2.setQuotedString();
      Node node3 = new Node(37, node2, node2, node1);
      Node node4 = node3.copyInformationFromForTree(node0);
      Node node5 = new Node(48, (-755), 3037);
      node5.getSourceFileName();
      node2.isContinue();
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = new Node(163, node0, node0, node0, 51, 0);
      node1.getJSType();
      node1.getIndexOfChild(node0);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node0.setSourceEncodedPosition(48);
      node1.isInstanceOf();
      node1.isBlock();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      jSTypeArray0[3] = null;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isWhile();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      jSTypeArray0[0] = jSType0;
      JSType.toMaybeTemplatizedType(jSTypeArray0[0]);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, (Map<TemplateType, JSType>) hashMap0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      templateTypeMap0.getTemplateTypeKeyByName("k");
      jSTypeArray0[1] = (JSType) null;
      TemplatizedType templatizedType1 = templatizedType0.toMaybeTemplatizedType();
      jSTypeArray0[2] = (JSType) templatizedType1;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1189), node0);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isSyntheticBlock();
      node0.isFalse();
      node0.putIntProp(35, 95);
      node0.isExprResult();
      node0.addSuppression("$tV0s}_PdvFBGv|");
      String string0 = node0.toStringTree();
      node0.getInputId();
      int int0 = 583;
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, node0.LAST_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 35
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getSourceFileName();
      int int0 = Node.LENGTH;
      int int1 = Node.EMPTY_BLOCK;
      node0.isCase();
      node0.isContinue();
      Node node1 = new Node(56, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(2, node0, node2, node0, node0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(95);
      Node node1 = new Node(95, node0);
      Node node2 = new Node(95, node1, 36, 17);
      node2.getChangeTime();
      node2.getIndexOfChild(node0);
      node2.isEquivalentTo(node0, true, true, false);
      node2.getJSDocInfo();
      node0.setString("Recorded bad position information\nstart-line: ");
      double double0 = (-763.85023501);
      int int0 = 859;
      Node node3 = Node.newNumber(double0, int0, node0.DECR_FLAG);
      node3.getLength();
      int int1 = (-2091);
      // Undeclared exception!
      try { 
        node1.setType(int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ASSIGN_MUL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      Node node1 = new Node(32);
      node1.isStringKey();
      node1.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      Node node2 = new Node(37);
      Node node3 = node1.srcref(node0);
      node3.isString();
      Node node4 = new Node(43, node3, node3, node3, node0);
      node4.isEmpty();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0);
      node1.isLabelName();
      node0.getJsDocBuilderForNode();
      node0.setLineno((-1406));
      node1.isObjectLit();
      node1.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-214), nodeArray0);
      node0.isDec();
      node0.siblings();
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.setLength((-1826));
      node0.setType(860);
      node0.putBooleanProp((-214), false);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = new Node(29, node0, node1, node0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      Node node3 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node4 = node1.srcref(node3);
      node0.setType(1);
      node1.getStaticSourceFile();
      Node node5 = new Node(1124);
      node5.getLength();
      node5.replaceChild(node2, node4);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, node0, 2, 16);
      node0.toStringTree();
      node1.getInputId();
      node1.setSourceEncodedPosition(1201);
      node0.setQuotedString();
      node1.isInstanceOf();
      node1.isAdd();
      node0.getLineno();
      node1.isFor();
      node0.setDouble(4095);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(116);
      node0.getSourceFileName();
      node0.isObjectLit();
      Node node1 = Node.newNumber((double) 15, (-853), 53);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.hasOneChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "vm< 9wM<AA_", (String) null, 30, 125);
      jSTypeArray0[0] = jSType0;
      ObjectType objectType0 = ObjectType.cast(jSType0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ListIterator<JSType> listIterator0 = arrayList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, immutableList0);
      TemplatizedType templatizedType1 = templatizedType0.toMaybeTemplatizedType();
      JSType jSType1 = jSTypeRegistry0.getType((StaticScope<JSType>) templatizedType1, "}q(d4$BN.&[swEg`-", "Unknown class name", 32, 30);
      jSTypeArray0[1] = jSType1;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node4 = new Node(8, node3, node1);
      Node node5 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node4.checkTreeEqualsImpl(node5);
      Node node6 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node6);
      node_NodeMismatch0.equals(immutableList0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newNumber((double) 74, 74, 74);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.isFromExterns();
      node0.getString();
      Node node1 = node0.getParent();
      // Undeclared exception!
      try { 
        node0.addChildrenToBack(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 74.0 74 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int int0 = 95;
      Node node0 = Node.newString(95, "1.", 95, 95);
      node0.useSourceInfoFrom((Node) null);
      node0.getProp(int0);
      // Undeclared exception!
      try { 
        node0.getSideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = null;
      Node node2 = Node.newNumber((double) 57, 44, 52);
      node0.useSourceInfoFrom(node2);
      node2.toStringTree();
      node2.checkTreeEquals(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSideEffectFlags(56);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = new Node(47, node0);
      node1.copyInformationFromForTree(node0);
      node1.getSourceFileName();
      node0.isContinue();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      int int0 = 675;
      Node[] nodeArray0 = new Node[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("opt_arg");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, (Node) null);
      jSTypeArray0[0] = (JSType) functionType0;
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of(jSTypeArray0[0], (JSType) functionType0, jSTypeArray0[0], (JSType) functionType0, jSTypeArray0[0], (JSType) functionType0, (JSType) templateType0, (JSType) templateType0, jSTypeArray0[0]);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseFunctionType(functionType0);
      jSTypeArray0[1] = jSType0;
      JSType jSType1 = templateTypeMapReplacer0.caseUnknownType();
      jSTypeArray0[2] = jSType1;
      JSType.toMaybeTemplatizedType(jSTypeArray0[1]);
      jSTypeArray0[3] = (JSType) null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, (Node) null, jSTypeArray0[1]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getParentScope();
      jSTypeArray0[4] = (JSType) null;
      EnumElementType enumElementType1 = enumType0.getElementsType();
      JSType jSType2 = templateTypeMapReplacer0.caseEnumElementType(enumElementType1);
      jSTypeArray0[5] = jSType2;
      JSType jSType3 = templateTypeMapReplacer0.caseUnknownType();
      jSTypeArray0[6] = jSType3;
      EnumElementType enumElementType2 = enumElementType0.toMaybeEnumElementType();
      jSTypeArray0[7] = (JSType) enumElementType2;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      int int1 = 95;
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JtGkyu7$zhz3IN");
      Node node1 = new Node(32, node0, node0, node0, 30, 47);
      node1.copyInformationFromForTree(node0);
      node1.getSourceFileName();
      node0.isContinue();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(39);
      Node node1 = Node.newString(36, "change_time");
      node0.isNoSideEffectsCall();
      node0.isContinue();
      node1.isGetProp();
      Node.newString(38, "$tV0s}_PdvFBGv|", 4, 0);
      node1.getJsDocBuilderForNode();
      Node node2 = node1.clonePropsFrom(node0);
      node1.isFor();
      node1.isUnscopedQualifiedName();
      node1.addChildrenAfter(node2, (Node) null);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = new Node(1959);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isNumber();
      Node node3 = node1.copyInformationFrom(node2);
      node2.getJSDocInfo();
      node0.addChildAfter(node3, node2);
      node1.isAssign();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      int int0 = Node.POST_FLAG;
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createTemplateType("~Gg,:7>%#bq6+6X");
      node0.isSyntheticBlock();
      node0.isVoid();
      node0.toString();
      node0.isDebugger();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isReturn();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString(") must be less than the number of elements that remained (", (-1020), 372827);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives((Set<String>) null);
      Node node1 = Node.newString(55, "side_effect_flags");
      Node node2 = new Node(40, node0, node1, 57, (-732));
      Node node3 = node2.clonePropsFrom(node0);
      node0.checkTreeEquals(node1);
      int int0 = 113;
      node1.setSourceEncodedPosition(int0);
      node3.setQuotedString();
      node2.isInstanceOf();
      node2.getAncestors();
      node0.isOnlyModifiesArgumentsCall();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = new Node(38);
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newString("o&Ahzcvsy");
      Node node1 = new Node(98, node0, node0, 4378, 4095);
      node0.isLabelName();
      node0.getJsDocBuilderForNode();
      node1.isObjectLit();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.hasOneChild();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getSourceFileName();
      int int0 = Node.LENGTH;
      int int1 = Node.EMPTY_BLOCK;
      node0.isCase();
      Node node1 = new Node(52, node0, node0, (-3326), 16);
      Node node2 = node0.copyInformationFrom(node1);
      node2.getIndexOfChild(node0);
      node1.isEquivalentTo(node0, false, false, false);
      node2.getJSDocInfo();
      node0.isEquivalentTo(node2);
      node1.getLength();
      Node node3 = new Node(1827);
      Node node4 = new Node(15);
      node4.isNew();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONTINUE");
      Node node0 = Node.newNumber((-1067.0), 751619276, 21);
      Node node1 = new Node(39);
      Node node2 = node0.clonePropsFrom(node1);
      node2.checkTreeEqualsImpl(node1);
      node2.setLineno(2);
      node2.isNoSideEffectsCall();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node3 = node0.cloneNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONTINUE");
      Node node4 = Node.newString("CONTINUE", 4095, 54);
      node3.getDirectives();
      node3.getAncestors();
      node3.isVarArgs();
      node0.isAdd();
      node1.isCatch();
      node3.addChildAfter(node4, node1);
      node3.isScript();
      node3.copyInformationFrom(node0);
      node4.isUnscopedQualifiedName();
      node4.isScript();
      // Undeclared exception!
      try { 
        node4.isIf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 1146, 49, 1146);
      Node node1 = new Node(1146, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.setSideEffectFlags((-1692));
      node2.isContinue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setThrows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0, 55, 36);
      node0.getJsDocBuilderForNode();
      node0.isObjectLit();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.putIntProp(51, 29);
      node2.hasOneChild();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      Node node1 = new Node(2147483645);
      Node node2 = node0.srcref(node1);
      node1.isString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node has existing properties.");
      node0.isEmpty();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isTrue();
      Node node1 = Node.newNumber((double) 48, 49, 47);
      node1.isEquivalentTo(node0);
      Node node2 = Node.newString(981, "com.google.javascript.rhino.Node$AbstractPropListItem", 1385, 50);
      node0.isNot();
      node2.isSyntheticBlock();
      node0.isSetterDef();
      node2.setVarArgs(false);
      Node node3 = new Node((-2460), node2, node1, node1, node2);
      node0.addChildrenToFront(node3);
      node2.isGetterDef();
      node2.isArrayLit();
      node0.removeFirstChild();
      node1.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(13, 13, 504);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(48);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.addSuppression("T6<?]G=D8Z#rLWL_ _u");
      node2.toStringTree();
      String string0 = node2.getSourceFileName();
      node2.mayMutateGlobalStateOrThrow();
      node1.isDefaultCase();
      node0.removeChild(node1);
      nodeArray0[0].isOnlyModifiesThisCall();
      nodeArray0[0].getLength();
      Node.newString(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      node0.getChildCount();
      node0.isQuotedString();
      node0.removeChildren();
      Node node1 = node0.removeChildAfter((Node) null);
      // Undeclared exception!
      try { 
        node1.isOnlyModifiesThisCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(39);
      Node node1 = new Node(40, node0);
      node0.isNoSideEffectsCall();
      node0.isContinue();
      node1.isGetProp();
      node1.clonePropsFrom(node0);
      node1.isFor();
      node1.isUnscopedQualifiedName();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isStringKey();
      node0.isCase();
      node0.isCatch();
      node0.isRegExp();
      node0.isComma();
      Node node1 = Node.newNumber((double) 39);
      Node node2 = node0.clonePropsFrom(node1);
      node0.removeChild(node2);
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isStringKey();
      node0.isCase();
      node0.isCatch();
      node0.isRegExp();
      node0.isComma();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(13, 13, 504);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(48);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      node3.getSourceFileName();
      node2.isContinue();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      int int0 = (-2550);
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = '7';
      charArray0[2] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      node0.appendStringTree(charBuffer0);
      node0.getIntProp(int0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      Node.NodeMismatch node_NodeMismatch0 = null;
      try {
        node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(57, "$tV0s}_PdvFBGv|");
      node1.setWasEmptyNode(true);
      node1.setString((String) null);
      node1.getLength();
      node0.isExprResult();
      node1.setLineno(node0.COLUMN_BITS);
      // Undeclared exception!
      try { 
        node1.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2023), nodeArray0);
      node0.getStaticSourceFile();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      String string0 = ",pb";
      node0.setSourceFileForTesting(",pb");
      node0.getJSDocInfo();
      node0.isNew();
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(40, 40, 40);
      node0.getString();
      int int0 = 100;
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      node0.isNot();
      node0.getInputId();
      Node node1 = Node.newString("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = node0.clonePropsFrom(node1);
      node2.isAssign();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = "%D00E>1fe31hw4vX";
      Node node0 = Node.newString("%D00E>1fe31hw4vX", (-15), (-15));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      Node node4 = Node.newString("%D00E>1fe31hw4vX", 51, 56);
      node3.copyInformationFrom(node4);
      node2.getIndexOfChild(node1);
      boolean boolean0 = true;
      Node node5 = new Node((-78), node3, node4, node0);
      boolean boolean1 = false;
      node0.isEquivalentTo(node5, boolean0, boolean1, boolean0);
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.REFLECTED_OBJECT;
      simpleSourceFile0.getLineOffset(57);
      Node.newNumber(1868.973455172);
      Node node1 = Node.newString("Htz#r[0JSG#.$<x;", 152, 79);
      Node node2 = new Node(50, node1, node0);
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = Node.newString("$tV0s}_PdvFBGv|", 83, 29);
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isOr();
      node0.isWith();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node1 = Node.newNumber((-402.46985365212));
      Node node2 = new Node(110, node0, node0, node1, (-1736), 30);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node1.toStringTree();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = new Node(1959, 1959, 1959);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isObjectLit();
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node2.putIntProp(1, 38);
      node0.hasOneChild();
      node2.isString();
      node2.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = 41;
      Node node0 = new Node(41);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting("cIU1>7g=baC!zC0:V8");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isNew();
      node0.getSourceOffset();
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.getBooleanProp(48);
      node0.getSideEffectFlags();
      node1.setString("Wk3maFja#'Ip`4K[d");
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getSourceFileName();
      int int0 = Node.LENGTH;
      int int1 = Node.EMPTY_BLOCK;
      node0.addSuppression("MOD");
      node0.toStringTree();
      node0.mayMutateGlobalStateOrThrow();
      node0.isUnscopedQualifiedName();
      node0.isDefaultCase();
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ji>nIqp7<#^-8w4", false);
      int int0 = Node.DECR_FLAG;
      simpleSourceFile0.getLineOffset(1);
      Node node0 = Node.newString(112, "Ji>nIqp7<#^-8w4");
      node0.isNoSideEffectsCall();
      node0.isContinue();
      node0.isRegExp();
      node0.isContinue();
      Node node1 = new Node(8);
      node1.setLength((-2092));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4095);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) simpleSourceFile0;
      objectArray0[1] = (Object) simpleSourceFile0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) simpleSourceFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("WEPIwM\"iiy", objectArray0);
      node0.appendStringTree(printWriter0);
      node0.isCall();
      node0.getIndexOfChild(node1);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.getIntProp((-2550));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node0.siblings();
      node_AncestorIterable0.iterator();
      node0.isFunction();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = new Node(56);
      Node node1 = new Node(56, node0);
      node1.getLastSibling();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(25);
      Node node1 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", (-1216), 32);
      node0.useSourceInfoIfMissingFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<NullType> hashSet0 = new HashSet<NullType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) hashSet0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      NullType nullType0 = mock(NullType.class, new ViolatedAssumptionAnswer());
      hashSet0.add(nullType0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.addChildBefore(node2, node2);
      node0.getSideEffectFlags();
      node0.getJSDocInfo();
      // Undeclared exception!
      try { 
        node0.isCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(16, "ALWAYS_FALSE");
      node0.isExprResult();
      node0.isDec();
      Node node2 = new Node(38, node1);
      node1.isTypeOf();
      node2.getChildCount();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = new Node(134);
      node0.isStringKey();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      Node node1 = new Node(12, node0, node0, node0, node0, 0, 48);
      Node node2 = node0.srcref(node1);
      node1.isEmpty();
      node0.isObjectLit();
      node1.setSourceEncodedPositionForTree(30);
      node1.isNE();
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, 43, 39);
      node0.getJsDocBuilderForNode();
      node0.isObjectLit();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.putIntProp(51, 29);
      node1.isString();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = new Node(37);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting("cIU1>7g=baC!zC0:V8");
      node0.getJSDocInfo();
      node0.isNew();
      node0.setSideEffectFlags(37);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isCatch();
      Node node1 = new Node(1, node0, node0, node0, node0);
      node1.getInputId();
      node1.isDo();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0, 55, 36);
      node0.getJsDocBuilderForNode();
      node0.isObjectLit();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.getSourceOffset();
      node2.putIntProp(51, 29);
      node2.hasOneChild();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isOptionalArg();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getSourceFileName();
      int int0 = Node.LENGTH;
      int int1 = Node.EMPTY_BLOCK;
      node0.isCase();
      node0.isContinue();
      Node node1 = Node.newNumber((double) 55, 47, 2);
      Node node2 = new Node(0, node0, node1, node0);
      node2.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isQualifiedName();
      Node node1 = new Node(52);
      Node node2 = node1.srcref(node0);
      node1.isString();
      Node node3 = new Node(30, node0, node1, node0, (-1020), 31);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isStringKey();
      node0.isCase();
      node0.isCatch();
      node0.isHook();
      node0.isVoid();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString("#FmOXV&wxA0", (-2097), (-2097));
      node0.getAncestors();
      Node node1 = new Node(38, 53, 19);
      node1.addChildrenToBack(node0);
      node1.setString("0");
      node1.isSetterDef();
      node0.addChildrenToFront(node1);
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117);
      Node node1 = new Node(117, node0, node0, node0, node0);
      Node node2 = node1.cloneNode();
      node2.getAncestor(42);
      int int0 = 276;
      Node node3 = new Node(16, node0, node0, node0, node2);
      String string0 = "*{=&R";
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newString(24, "inferred", 24, 3420);
      node0.isNot();
      node0.isSyntheticBlock();
      node0.addSuppression((String) null);
      node0.toStringTree();
      node0.getInputId();
      node0.setQuotedString();
      node0.isAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(49);
      node0.addChildrenToFront(node1);
      node0.isGetterDef();
      node0.isContinue();
      node1.isTrue();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.REFLECTED_OBJECT;
      simpleSourceFile0.getLineOffset(57);
      Node node0 = Node.newString((-5001), "&*");
      Node node1 = new Node(86, 48, 86);
      node1.clonePropsFrom(node0);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("mL");
      Node node1 = new Node(38, node0, node0, 1183, 14);
      node1.wasEmptyNode();
      node0.getJsDocBuilderForNode();
      node1.isObjectLit();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(31, nodeArray0);
      node2.getSourceFileName();
      node2.useSourceInfoFromForTree(node1);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.getLastChild();
      node2.useSourceInfoIfMissingFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "9ZMBlb");
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isComma();
      node0.getJsDocBuilderForNode();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("{M d?!A,c/1", node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getOwnPropertyJSDocInfo("Named type with empty name component");
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isAssignAdd();
      node0.isNot();
      node0.isHook();
      node0.isVoid();
      node0.getJSDocInfo();
      node0.getJSDocInfo();
      node0.isOptionalArg();
      Node node1 = Node.newNumber((double) 4095);
      node0.copyInformationFrom(node1);
      node0.isGetElem();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(57, "$tV0s}_PdvFBGv|");
      node1.isName();
      node1.getLength();
      node1.getStaticSourceFile();
      Node node2 = new Node(42, node0, node0, node1, node0);
      node2.srcref(node0);
      node1.useSourceInfoFromForTree(node0);
      node2.removeChild(node1);
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isCall();
      node0.isHook();
      node0.isVoid();
      node0.getJSDocInfo();
      node0.getJSDocInfo();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isGetElem();
      node0.isDebugger();
      node0.hasOneChild();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4e", (-35), (-35));
      node0.addChildrenToBack(node0);
      node0.isLocalResultCall();
      node0.putIntProp(31, (-35));
      node0.isUnscopedQualifiedName();
      node0.isReturn();
      node0.isNot();
      Node node1 = new Node(33);
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2023), nodeArray0);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting(",pb");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node0.setSourceEncodedPosition(39);
      Node node1 = new Node(53, node0, (-1511), 293);
      node1.getLength();
      node0.isAnd();
      node0.isBlock();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isInstanceOf();
      node0.isExprResult();
      node0.isVoid();
      Node node1 = new Node(4095, node0, node0, node0);
      Node node2 = new Node(92, node1);
      node2.isEmpty();
      node0.isRegExp();
      node2.isAssignAdd();
      node1.isIn();
      node2.isBlock();
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4e", (-10), (-10));
      node0.addChildrenToBack(node0);
      node0.putIntProp(31, (-10));
      node0.getDouble();
      node0.isAnd();
      node0.isBlock();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(57, "$tV0s}_PdvFBGv|");
      int int1 = Node.DIRECTIVES;
      node0.getStaticSourceFile();
      Node node2 = new Node(42, node0, node0, node1, node0);
      node1.isContinue();
      node0.isGetProp();
      Node node3 = node2.clonePropsFrom(node0);
      node0.isFor();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", (-15), (-15));
      node0.getAncestors();
      Node node1 = node0.cloneNode();
      Node node2 = node1.getAncestor(0);
      Node node3 = new Node(37, node2, node0, node2);
      Node.newString("%D00E>1fe31hw4vX", 51, 56);
      Node node4 = new Node((-15), node3, 12, 56);
      node3.isFromExterns();
      node4.isSetterDef();
      InputId inputId0 = new InputId("%D00E>1fe31hw4vX");
      node1.setInputId(inputId0);
      node4.checkTreeEqualsImpl(node4);
      node0.getLength();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = new Node(1959, 1959, 1959);
      Node node1 = new Node(39, node0, node0, node0, 47, 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.copyInformationFromForTree(node0);
      node2.setChangeTime(57);
      node2.setSourceEncodedPositionForTree(54);
      Node node4 = node0.copyInformationFrom(node2);
      node4.getIndexOfChild((Node) null);
      node0.isEquivalentTo(node3, true, false, false);
      node2.getJSDocInfo();
      node1.isEquivalentTo((Node) null);
      node2.getLength();
      Node node5 = new Node(node3.VAR_ARGS_NAME);
      int int0 = 41;
      Node node6 = new Node(int0);
      node5.isNew();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2023), nodeArray0);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getQualifiedName();
      node0.children();
      node0.getLength();
      node0.setSourceFileForTesting(",pb");
      node0.getJSDocInfo();
      node0.isNew();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isEmpty();
      node0.isRegExp();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = new Node(26, 26, 116);
      node0.isStringKey();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      node0.getStaticSourceFile();
      Node node1 = new Node(15, node0, node0, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      node0.removeChild(node1);
      node0.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.isArrayLit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString((int) (byte) (-42), "Oe{eyp.N", (int) (byte) (-42), (int) (byte)119);
      node0.getSideEffectFlags();
      node0.getAncestor(0);
      node0.getInputId();
      node0.isVar();
      Node node1 = null;
      Node node2 = node0.useSourceInfoFromForTree((Node) null);
      node2.cloneTree();
      int int0 = 1964;
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.getIntProp((-2550));
      node0.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isVar();
      node0.isComma();
      node0.isSwitch();
      Node node1 = new Node(0, node0, node0, node0, node0, 50, 15);
      node1.getQualifiedName();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.newString((-5001), "&*");
      Node node1 = new Node(86, 48, 86);
      node1.srcrefTree(node0);
      node1.isTry();
      Node.newNumber(74.0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      node0.getStaticSourceFile();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.isUnscopedQualifiedName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.removeChild(node0);
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(33, "ALWAYS_FALSE");
      node1.isExprResult();
      int int0 = (-15);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(int0, node0, node0);
      node2.addChildBefore(node1, node0);
      // Undeclared exception!
      try { 
        node2.isDec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.isOr();
      Node node1 = new Node(37, node0, node0);
      node0.addChildrenToBack(node1);
      node1.hasOneChild();
      node0.isString();
      node1.isNoSideEffectsCall();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = new Node(39);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node1 = new Node(5330, node0, 12, (-2410));
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(42, "%iya;vV`E(L{O\"", 1, 1);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.srcrefTree(node1);
      node0.hasOneChild();
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString(41, "'KTFK`G:tBtbB^%(,,t");
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isLabelName();
      Node node2 = new Node(42);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      node2.useSourceInfoIfMissingFromForTree(node1);
      Node.newString(4095, "'KTFK`G:tBtbB^%(,,t", 43, 30);
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element", 163, 163);
      Node node1 = Node.newString("w~wb%.w>", 4095, 40);
      node1.addChildrenToBack(node0);
      node1.putIntProp(52, 42);
      node1.getDouble();
      node1.isAnd();
      // Undeclared exception!
      try { 
        node1.isBlock();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING w~wb%.w> 4095 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000337] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(116);
      node0.getSourceFileName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      node0.getStaticSourceFile();
      Node node1 = new Node(115, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.removeChild(node2);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newString(" is not a string node", 95, 63);
      Node node1 = new Node(132, 87, 1436);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = Node.newString(97, " is not a string node");
      node3.addChildrenToBack(node0);
      node1.addChildAfter(node3, node3);
      node0.isObjectLit();
      node1.isCast();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.getInputId();
      node0.setSourceEncodedPosition(44);
      node0.isInstanceOf();
      Node node1 = new Node((-1783));
      Node node2 = new Node(52, node0, node1);
      node0.isFromExterns();
      node2.isString();
      node0.isWhile();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = new Node(51, node0, 53, 2);
      node0.cloneTree();
      node1.getIntProp((-15));
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node0.setSourceEncodedPosition(57);
      node1.getLength();
      node0.isAnd();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(91, "$tV0s}_PdvFBGv|", 91, 91);
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(57, "$tV0s}_PdvFBGv|");
      node1.getStaticSourceFile();
      Node node2 = new Node(42, node0, node0, node1, node0);
      node1.isObjectLit();
      node2.isNew();
      node2.isFalse();
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.setVarArgs(true);
      node0.isNot();
      Node node1 = new Node(29, node0, 1347, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node1.isLabelName();
      Node node2 = new Node(49, node1);
      node2.useSourceInfoIfMissingFromForTree(node0);
      int int0 = 1132;
      Node node3 = Node.newNumber((double) 29, (-3480), 32);
      node3.setQuotedString();
      Node node4 = new Node(int0, node2, node3, node2, node3);
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.getChangeTime();
      Node node1 = new Node(43);
      node1.isStringKey();
      node0.isBreak();
      node1.getInputId();
      node0.isOnlyModifiesThisCall();
      node0.isEmpty();
      Node node2 = new Node(46, node1, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newString(95, "1.", 95, 95);
      node0.isParamList();
      Node node1 = new Node(44, node0, node0, node0, node0);
      node0.useSourceInfoFrom(node1);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = "h;~^";
      Node node0 = Node.newString(512, "h;~^", 512, 39);
      Node node1 = null;
      node0.srcrefTree((Node) null);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getLastChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(1795, "s2Q&DZm{[@X(>Q");
      nodeArray0[0] = node0;
      Node node1 = new Node(1795, nodeArray0);
      node1.addChildrenToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node((-1309));
      node0.clonePropsFrom(node2);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node(92, 92, 2246);
      node0.getStaticSourceFile();
      node0.getQualifiedName();
      node0.children();
      node0.setSourceFileForTesting("pL2\"4JU[");
      node0.getJSDocInfo();
      node0.isNew();
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(56, node0, node0, node0, node0, 939, 112);
      node0.addChildrenToFront(node1);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.getInputId();
      node0.isInstanceOf();
      Node node1 = null;
      node0.isEquivalentTo((Node) null, true, true, false);
      int int0 = (-1842);
      Node node2 = null;
      try {
        node2 = new Node(int0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(1984);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(117);
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*vto~Y<GK7@@9^W1}5>");
      node0.isNot();
      node0.isString();
      node0.isNull();
      Node node1 = new Node(16, node0, 57, 135);
      node1.removeChildren();
      Node node2 = new Node(40);
      node2.isFromExterns();
      node0.isSetterDef();
      Node node3 = Node.newNumber(1111.9252538, 57, 54);
      node0.addChildrenToFront(node2);
      node2.isGetterDef();
      node3.isArrayLit();
      Node node4 = new Node(57, node2, node0, node0, 4095, 16);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.putIntProp(46, 95);
      node0.toStringTree();
      node0.isDefaultCase();
      node0.getSideEffectFlags();
      node0.isScript();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(49);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isFor();
      node_NodeMismatch0.equals(iterator0);
      node0.getLength();
      Node node1 = Node.newString("o[.e~Lu?o\"EJnf'w4q", 8, 0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1003, nodeArray0);
      Node node1 = new Node(2084, node0);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      Node node1 = new Node(504, node0, 36, (-957));
      node0.addSuppression((String) null);
      node0.toStringTree();
      Node node2 = Node.newNumber((double) 15);
      node1.getQualifiedName();
      node0.isNot();
      node1.isHook();
      node2.isVoid();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.putIntProp(46, 95);
      node0.toStringTree();
      node0.getExistingIntProp(46);
      node0.isVarArgs();
      Node node1 = Node.newString(30, "$tV0s}_PdvFBGv|", (-1909), (-1909));
      node1.setVarArgs(false);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setDirectives((Set<String>) null);
      Node node1 = new Node(41, node0, (-3655), 43);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.getAncestors();
      node0.isQualifiedName();
      Node node2 = node1.srcrefTree(node0);
      node0.getStaticSourceFile();
      node2.getInputId();
      node2.addChildrenToFront(node0);
      node2.mayMutateGlobalStateOrThrow();
      int int0 = 124;
      node2.removeProp(int0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      Node node1 = new Node(93, node0, node0, node0, node0);
      node0.isUnscopedQualifiedName();
      Node node2 = new Node((-72), node1);
      node2.useSourceInfoFromForTree(node0);
      node1.children();
      Node node3 = new Node(4);
      Node node4 = node3.getChildBefore(node0);
      node4.removeChild(node2);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(32, node0, node0, node0, node0, (-2256), 1660);
      node0.clonePropsFrom(node1);
      Node node2 = Node.newString("ALWAYS_TRUE", 36, 39);
      Node.newNumber((double) 2, 4095, 37);
      Node node3 = new Node((-1), node0, node2, node0, 303, 1048576);
      node3.getInputId();
      node0.isEquivalentTo(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.setMutatesThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      Node node1 = new Node(36, 8232, 85);
      Node node2 = new Node(42, node1, node0, node0, 8, 15);
      node2.replaceChildAfter(node0, node1);
      node1.addChildrenToFront(node2);
      Node node3 = new Node(node2.MAX_COLUMN_NUMBER, node0.LENGTH, node0.DIRECTIVES);
      Node node4 = new Node(node0.DIRECT_EVAL, node1, node2);
      // Undeclared exception!
      try { 
        node0.isStringKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isCall();
      node0.getJSDocInfo();
      node0.isGetElem();
      node0.isDebugger();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(32, "is_constant_name");
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node2 = new Node(32, node1, node0);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node0.isDec();
      node1.toStringTree();
      node0.isCast();
      node0.getAncestors();
      node2.useSourceInfoFromForTree(node0);
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(13, 13, 504);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(48);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.useSourceInfoFromForTree(node0);
      Node node1 = new Node(1, nodeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.addSuppression("T6<?]G=D8Z#rLWL_ _u");
      node2.toStringTree();
      node2.getSourceFileName();
      node1.isCast();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = "Ji>nUp7<#^-8w4";
      Node node0 = Node.newString("Ji>nUp7<#^-8w4");
      node0.setSourceFileForTesting("com.google.common.collect.AbstractMultimap$Entries");
      node0.getSourceFileName();
      node0.getDouble();
      int int0 = 56;
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.addSuppression("qW1[y");
      node0.toStringTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node1 = new Node(102, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDec();
      node1.isDebugger();
      node1.isFunction();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString(24, "inferred", 24, 24);
      node0.isQualifiedName();
      node0.isSyntheticBlock();
      node0.toStringTree();
      node0.getInputId();
      node0.setQuotedString();
      node0.isAdd();
      Node node1 = new Node(1321, node0, node0);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString("inferred");
      node0.addChildrenToFront(node2);
      node2.isGetProp();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setLineno((-1447));
      node1.isObjectLit();
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node0.isFromExterns();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(33, "ALWAYS_FALSE");
      node1.isExprResult();
      node1.getInputId();
      node1.isOnlyModifiesThisCall();
      node1.isQualifiedName();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.addSuppression("qW1[y");
      node0.toStringTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node1 = new Node(102, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDec();
      node1.isDebugger();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = Node.newString(47, "is_constant_name", 50, 43);
      Node node2 = new Node(4095, node0, node1, node0, 55, 40);
      Node node3 = node0.copyInformationFrom(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("is_constant_name");
      node3.getDirectives();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      Node.newString(56, (String) null);
      node2.isContinue();
      Node node4 = new Node(node0.EMPTY_BLOCK, node1, node1);
      int int0 = 117;
      Node node5 = new Node(node3.INCRDECR_PROP, node1, node0, node4, node4, int0, node2.STATIC_SOURCE_FILE);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isVoid();
      Node node1 = new Node(47, node0, node0, node0);
      Node node2 = new Node(92, node1);
      node2.removeFirstChild();
      node2.isAssignAdd();
      node2.isOnlyModifiesThisCall();
      node2.isCatch();
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newString("");
      Locale locale0 = new Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      Node node1 = new Node(38, node0);
      Node node2 = node1.cloneTree();
      node1.isDec();
      node0.setDouble(40);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node2.addChildToFront(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(13, 13, 504);
      node0.setIsSyntheticBlock(true);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node1 = new Node(84, node0, node0);
      node0.checkTreeEqualsImpl(node0);
      node1.clonePropsFrom(node0);
      node1.getNext();
      node0.detachFromParent();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = new Node(130);
      node0.detachChildren();
      node0.putIntProp(34, (-1260));
      node0.getDouble();
      node0.isVarArgs();
      node0.isDo();
      // Undeclared exception!
      try { 
        node0.isBlock();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 34
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      Node node1 = new Node(24, node0);
      Node node2 = new Node(3831, 4095, 2);
      node1.children();
      Node node3 = node0.getChildBefore(node1);
      node2.removeChild(node1);
      // Undeclared exception!
      try { 
        node3.isOnlyModifiesThisCall();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(0, 1856, 1856);
      node0.getSourceFileName();
      int int0 = Node.DIRECTIVES;
      Node node1 = new Node(32, node0);
      node1.isCase();
      node1.removeFirstChild();
      node0.children();
      Node node2 = new Node(0, node1);
      node2.isContinue();
      node2.setOptionalArg(false);
      node1.toStringTree();
      node1.isLabel();
      int int1 = Node.POST_FLAG;
      node2.isIf();
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node(120);
      node0.toStringTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("5aR~a");
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node_AncestorIterable0.iterator();
      Node node2 = new Node(32, node0, node0, 2, 15);
      node2.addChildAfter(node1, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDec();
      node0.mayMutateArguments();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString("Ji>nUp7<#P-8w4");
      node0.setSourceFileForTesting("Ji>nUp7<#P-8w4");
      Node node1 = Node.newNumber((double) 57, 40, 1);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = node2.useSourceInfoFrom(node0);
      node0.getBooleanProp(54);
      node0.isCast();
      node0.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4vX", (-15), (-15));
      node0.getAncestors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = node0.getAncestor(0);
      Node node2 = new Node(37, node1, node0, node1);
      Node.newString("%D00E>1fe31hw4vX", 51, 56);
      Node node3 = new Node((-15), node2, 12, 56);
      node3.isSetterDef();
      node3.checkTreeEqualsImpl(node3);
      node2.getJSType();
      node3.getType();
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node((-246));
      Node node1 = new Node(38, node0, node0, node0, node0, 44, 44);
      node1.setType(31);
      node1.useSourceInfoFrom(node0);
      node0.addChildrenToBack(node1);
      node1.setSideEffectFlags(48);
      node1.getQualifiedName();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.getSourceFileName();
      node0.isCase();
      Node node1 = Node.newString(54, "0");
      node0.isContinue();
      node1.isGetProp();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString("");
      Locale locale0 = new Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      Node node1 = new Node((-699), 30, 3193);
      node1.children();
      Node node2 = new Node(2103, node0, node0, node1, 40, 149);
      Node node3 = node2.getChildBefore(node1);
      node1.removeChild(node3);
      node3.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newString(95, "$tV0s}_PdvFBGv|", 95, 95);
      node0.setVarArgs(true);
      Node node1 = new Node(29, node0, 1347, 16);
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node0.toStringTree();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      int int0 = Node.IS_DISPATCHER;
      node1.isNew();
      node0.setVarArgs(true);
      node0.getSourceOffset();
      node0.addChildrenToFront(node1);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString("$tV0}_PdvFBGv|");
      int int0 = Node.STATIC_SOURCE_FILE;
      node0.setSourceFileForTesting("ZI");
      Node node1 = Node.newString(50, "$tV0}_PdvFBGv|");
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getBooleanProp(32);
      node0.isCast();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.LinkedHashMultimap");
      node0.setSourceFileForTesting("com.google.common.collect.LinkedHashMultimap");
      node0.getJSDocInfo();
      node0.isGetProp();
      node0.getSourceOffset();
      Node node1 = new Node(112, 1028, 82);
      node1.copyInformationFromForTree(node0);
      Node node2 = new Node(763, node1, node1, 572, 1554);
      node0.removeChildAfter(node2);
      node0.getQualifiedName();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(134);
      node0.isStringKey();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      Node node1 = new Node(12, node0, node0, node0, node0, 0, 48);
      Node node2 = node0.srcref(node1);
      node1.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.isObjectLit();
      node1.setSourceEncodedPositionForTree(30);
      node1.isNE();
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.addSuppression("B]4{TCE-");
      node0.toStringTree();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      int int0 = Node.IS_DISPATCHER;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      node0.isNew();
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(55);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      node0.appendStringTree(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = new Node(111);
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = Node.newNumber((-1140.1162585143215), (-2821), 46);
      Node node2 = node0.copyInformationFrom(node1);
      node2.setDirectives((Set<String>) null);
      node0.isComma();
      node0.isSwitch();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(42, "%iya;vV`E(L{O\"", 1, 1);
      node1.copyInformationFromForTree(node0);
      node1.getSourceFileName();
      node0.isContinue();
      node1.isTrue();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isCall();
      node0.getJSDocInfo();
      node0.isGetElem();
      node0.isDebugger();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(91, "$tV0s}_PdvFBGv|", 91, 91);
      int int0 = Node.DECR_FLAG;
      Node node1 = Node.newString(57, "$tV0s}_PdvFBGv|");
      node1.getStaticSourceFile();
      Node node2 = new Node(42, node0, node0, node1, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      node1.isObjectLit();
      node2.isNew();
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber((-1707.12517));
      node0.getAncestor(53);
      Node node1 = new Node(148, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isStringKey();
      node3.getSourceOffset();
      node2.useSourceInfoIfMissingFrom(node0);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.getIntProp(125);
      node0.getInputId();
      node0.setSourceEncodedPosition(98);
      node0.isInstanceOf();
      node0.isString();
      node0.isWhile();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = Node.POST_FLAG;
      Node node0 = new Node(111);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isDebugger();
      node0.isObjectLit();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.addSuppression("B]4{TCE-");
      node0.toStringTree();
      int int0 = Node.IS_DISPATCHER;
      node0.getSourceOffset();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      Node node1 = new Node(12, node0, node0, node0, node0, 0, 48);
      node0.useSourceInfoFromForTree(node1);
      node0.isCase();
      node0.children();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isContinue();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("ZI", false);
      Node node0 = Node.newString(85, "(;[]lkzkvFKzU<?Y6Y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isContinue();
      node0.setLineno(85);
      node0.isGetProp();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getIntProp(116);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.isCase();
      node0.cloneNode();
      node0.isVar();
      node0.isComma();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(0.0, (-2049), (-1978));
      Node node1 = new Node(31, node0, 4095, 39);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("ZI");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Node node0 = Node.newString(307, "ZI", 994, (-714));
      node0.setDirectives(set0);
      Node node1 = new Node(40, 29, 12);
      node1.useSourceInfoFrom(node0);
      node0.setDouble(57);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(130);
      node0.putIntProp(43, 37);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT [is_constant_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = new Node(55, 1, 52);
      node1.getIntProp((-15));
      node0.setIsSyntheticBlock(false);
      node0.setChangeTime(51);
      Node node2 = node0.copyInformationFrom(node1);
      node1.addSuppression("L~.");
      node2.toStringTree();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 7);
      nodeArray0[0] = node0;
      Node node1 = new Node(7, nodeArray0, (-593), 54);
      node1.setSourceFileForTesting("~ASyh!Zphr&");
      node1.getBooleanProp(51);
      nodeArray0[0].isCast();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = new Node(130);
      node0.putIntProp(34, (-1260));
      node0.isExprResult();
      int int0 = 2613;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) null);
      Node node2 = new Node(int0, node0, node1);
      node2.addChildBefore(node0, node1);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = new Node(154);
      node0.isStringKey();
      node0.isArrayLit();
      node0.getInputId();
      node0.isQualifiedName();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.detachChildren();
      node0.toStringTree();
      node0.putIntProp(31, 31);
      Node node1 = new Node(56, 30, (-1861));
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getDouble();
      node0.isDo();
      node0.isBlock();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqulToPredicate");
      Node node1 = Node.newString(38, "com.google.common.base.Predicates$IsEqulToPredicate");
      node1.isUnscopedQualifiedName();
      node0.isOr();
      node0.isVoid();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newString(33, "ALWAYS_FALSE");
      node0.getQualifiedName();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isSyntheticBlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = new Node(63, 95, 40);
      Node node1 = new Node(40);
      node0.isStringKey();
      node0.isArrayLit();
      node1.getInputId();
      node1.isQualifiedName();
      Node node2 = Node.newNumber((double) 32, 52, 36);
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      node0.getSourceFileName();
      int int0 = Node.DIRECTIVES;
      node0.children();
      node0.isContinue();
      node0.isContinue();
      node0.isLabel();
      node0.isVar();
      Node node1 = new Node(4, node0, 1732, 48);
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = new Node(43, node0, 1, 776);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(57, "Named type with empty name component");
      Node node3 = Node.newString(32, "Unknown class name", (-480), (-1457));
      Node node4 = node1.copyInformationFromForTree(node0);
      Node node5 = new Node(39);
      Node node6 = new Node(0, node2, node3, node5);
      node6.getSourceFileName();
      node4.isContinue();
      Node node7 = Node.newString("%iya;vV`E(L{O\"", (-133), 29);
      node7.isTrue();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1003, nodeArray0);
      node0.cloneNode();
      node0.setLineno(15);
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = new Node(130);
      node0.putIntProp(34, 2);
      node0.removeProp(34);
      node0.isOnlyModifiesArgumentsCall();
      node0.getDouble();
      node0.isSetterDef();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(8, node0, node0, node0, 43, 43);
      Node node2 = Node.newString(56, "uV}&Yjj", 2, 103);
      node1.setType(42);
      node2.removeChildren();
      node2.isGetProp();
      node0.isLabelName();
      node0.isReturn();
      node2.getSideEffectFlags();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = Node.newString(38, "");
      node0.getQualifiedName();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = Node.newString((String) null);
      node1.addChildAfter(node0, node0);
      node1.isLocalResultCall();
      node0.isScript();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = new Node(35, 967, 40);
      Node node1 = new Node(46);
      node1.isStringKey();
      node0.isGetElem();
      node1.getInputId();
      node1.isQualifiedName();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = new Node(56, 37, 100);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(49, node0, 34, 389215);
      node0.isCast();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.addSuppression("B]4{TCE-");
      node0.toStringTree();
      Node node1 = Node.newString("Not declared as a constructor");
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newString(1061, "com.google.common.clluct.Unmodifiableterator", 1967, 1770);
      Node node1 = new Node(1061, node0, node0, 8, 119);
      node1.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2410);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node0.isNot();
      node1.isEmpty();
      Node node2 = Node.newString((-15), "originalname", 12, 1);
      Node node3 = new Node(31, node1, node1, node2, 55, 1);
      node3.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r`&\"im)[Q");
      Node node0 = Node.newString(100, "ppB.[tG", 100, 100);
      node0.isHook();
      node0.isEquivalentToShallow((Node) null);
      node0.isOnlyModifiesArgumentsCall();
      node0.isInc();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = new Node((-246));
      node0.getInputId();
      Node node1 = new Node(114, node0, node0, node0, node0, (-2168), 31);
      node1.srcref(node0);
      node1.isEmpty();
      node1.isObjectLit();
      node1.setSourceEncodedPositionForTree(52);
      node1.isNE();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = new Node(102);
      node0.getSourceFileName();
      node0.isCase();
      node0.toStringTree();
      node0.hasOneChild();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(43, "", 43, 0);
      int int0 = Node.DECR_FLAG;
      node0.getStaticSourceFile();
      Node node1 = new Node(1900, node0, node0, node0, node0);
      node0.isObjectLit();
      node1.isNew();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber((-2061.21396643));
      Node node1 = new Node(38, node0, node0, node0);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      Node node1 = Node.newString("$tV0s}_PdvFBGv|");
      Node node2 = Node.newNumber((-1.0), 2, 30);
      node2.isEquivalentTo(node1);
      node2.setIsSyntheticBlock(false);
      Node node3 = new Node(51, node1, node2, 55, 30);
      Node node4 = node3.copyInformationFromForTree(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node4.isNot();
      Node.newString(38, "$tV0s}_PdvFBGv|");
      node3.isExprResult();
      node3.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      int int0 = Node.LENGTH;
      Node node0 = new Node(52);
      node0.setSourceEncodedPosition(52);
      node0.isInstanceOf();
      node0.isString();
      Node node1 = new Node(49, 52, 13);
      node1.isWhile();
      Node node2 = new Node(57, 51, 1);
      node2.isBlock();
      node1.setLineno(48);
      node1.getAncestors();
      node1.isOnlyModifiesThisCall();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(42, nodeArray0);
      Node node1 = Node.newString(1, "7UBS}$B", 52, 51);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newString("lW'*C|O#|j48/c_c", 4095, 1);
      node3.getSourceFileName();
      node2.isContinue();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = "com.google.common.collect.LinkedHashMultimap";
      Node node0 = Node.newString("com.google.common.collect.LinkedHashMultimap");
      node0.setSourceFileForTesting("com.google.common.collect.LinkedHashMultimap");
      node0.isGetProp();
      node0.getSourceOffset();
      node0.isObjectLit();
      node0.isEquivalentToTyped((Node) null);
      // Undeclared exception!
      try { 
        node0.isReturn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = new Node(29);
      node0.putIntProp(47, 538);
      node0.getDouble();
      node0.isSetterDef();
      node0.getBooleanProp(node0.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newNumber(1131.8103994109272, 771, 46);
      node1.getInputId();
      Node node2 = node0.srcref(node1);
      node0.isObjectLit();
      Node node3 = Node.newNumber(1500.906538209532, 959, 37);
      node3.setSourceEncodedPositionForTree(29);
      node2.isNE();
      node0.isScript();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = Node.newString("ALWAYS_FALSE");
      Node node1 = new Node((-302), node0, node0, node0, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newString("Ji>nUp7<#^-8w4");
      node0.setSourceFileForTesting("Ji>nUp7<#^-8w4");
      node0.putIntProp(57, 57);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPositionForTree(node0.FLAG_GLOBAL_STATE_UNMODIFIED);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Ji>nUp7<#^-8w4 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = Node.newString(42, "%iya;vV`E(L{O\"", 1, 1);
      node1.copyInformationFromForTree(node0);
      node1.getSourceFileName();
      node0.isContinue();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newString(33, "ALWAYS_FALSE");
      node0.isOnlyModifiesArgumentsCall();
      node0.isObjectLit();
      Node node1 = new Node(0, node0);
      node0.isEquivalentToTyped(node1);
      node1.isReturn();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isEquivalentTo(node2, true, true, true);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = new Node(64, 1073741823, 2080);
      Node.newString(51, ":?=h>PR;vR");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("EhT=K~DBIR", 12, 1048576);
      node0.getInputId();
      Node node1 = new Node(98, node0, node0, node0, node0, 49, 2495);
      Node node2 = node1.srcref(node0);
      node1.isEmpty();
      node1.isObjectLit();
      node0.setSourceEncodedPositionForTree(15);
      node0.isTrue();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.toStringTree();
      node0.getAncestors();
      Node node1 = new Node(102, node0, node0);
      node1.useSourceInfoFrom(node0);
      node1.isSyntheticBlock();
      node0.isSetterDef();
      node1.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r`&\"im)[Q");
      Node node0 = Node.newString(100, "ppB.[tG", 100, 100);
      node0.isFunction();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newString(33, "ALWAYS_FALSE");
      node0.isLabelName();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Node node1 = new Node(2147483645, node0, node0, node0, node0, 54, 992);
      Node node2 = node0.srcref(node1);
      node2.isReturn();
      node0.isObjectLit();
      node2.isNE();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.addChildrenToBack(node0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqulToPredicate");
      Node node1 = new Node(38, node0, node0, node0, 49, 40);
      node0.isOr();
      node0.isVoid();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      Node node1 = new Node(12, node0, node0, node0, node0, 0, 48);
      node1.setLength(122);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node0.isObjectLit();
      node0.isCast();
      node0.getJsDocBuilderForNode();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(49, 4601, 36);
      node1.getChangeTime();
      Node node2 = node0.srcref(node1);
      node1.isObjectLit();
      node1.setSourceEncodedPositionForTree(2);
      node1.isNE();
      node0.isScript();
      node1.isBlock();
      node2.setString((String) null);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node.newNumber((-1171.095527));
      node0.toStringTree();
      node0.getAncestors();
      Node node1 = new Node(16, node0, node0);
      Node node2 = node0.detachFromParent();
      StringWriter stringWriter0 = new StringWriter(40);
      node2.appendStringTree(stringWriter0);
      node1.isSyntheticBlock();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newString(155, "NoResolvedType");
      node0.getLength();
      node0.isEquivalentTo(node0);
      node0.isGetProp();
      node0.isCast();
      node0.getAncestor(155);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node(112, 112, 742);
      int int0 = Node.LENGTH;
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isWhile();
      node0.getJsDocBuilderForNode();
      node0.putBooleanProp((-718), false);
      node0.isBlock();
      node0.setLineno(742);
      node0.isDo();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = new Node(125, 36, 125);
      node0.isStringKey();
      Node node1 = new Node(83);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = new Node(4095);
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0kfs*_H?1i?=,");
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isVoid();
      Node node1 = new Node(47, node0, node0, node0);
      Node node2 = new Node(92, node1);
      node2.isAssignAdd();
      node2.siblings();
      node0.isHook();
      node2.isQuotedString();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = new Node(126, 126, 126);
      node0.isLabel();
      node0.getBooleanProp(126);
      Node node1 = Node.newString("%s (%s) must be less than size (%s)");
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isVoid();
      Node node1 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      Node node2 = new Node(38, node0, node0, node0, node1, 57, 54);
      node2.srcref(node1);
      node0.isEmpty();
      node2.isObjectLit();
      node1.setSourceEncodedPositionForTree(50);
      node1.isNE();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = Node.newString(153, "~ASyh!Zphr&", 7, 153);
      Node.newString("~ASyh!Zphr&");
      node0.isLabelName();
      node0.isReturn();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = new Node(110);
      node0.isContinue();
      node0.isLabel();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newString(1788, "rdQ:Cr'_;w!}Tj8v", 1788, 43);
      Node node1 = new Node(4);
      node1.copyInformationFromForTree(node0);
      Node.newString("RecordProperty associated with a property should not be null!");
      Node.newString("$tGV0s4_PdvFBGl|");
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isCase();
      Node node1 = new Node(1, node0, node0, node0);
      node0.srcref(node1);
      node0.isRegExp();
      node0.cloneTree();
      node0.isUnscopedQualifiedName();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = new Node(110);
      int int0 = Node.LENGTH;
      node0.isContinue();
      Node node1 = new Node(47, node0, node0, node0);
      node1.isAdd();
      node0.useSourceInfoIfMissingFrom(node1);
      node1.setSideEffectFlags(52);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3801), nodeArray0);
      Node node1 = new Node(47, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = new Node(50, nodeArray0);
      node2.srcref(node3);
      node1.getSourceFileName();
      node0.removeChild(node2);
      node0.isContinue();
      node1.isTrue();
      int int0 = 50;
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(46, 15);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node node1 = new Node(48, 47, 0);
      node0.isOnlyModifiesArgumentsCall();
      node1.detachChildren();
      node0.isDo();
      Node node2 = Node.newNumber(1.0);
      node1.getLength();
      node2.isObjectLit();
      node2.isEquivalentToTyped(node0);
      Node node3 = new Node(46, 52, 38);
      node3.isReturn();
      Node node4 = node0.useSourceInfoFromForTree(node1);
      node1.isEquivalentTo(node4, true, false, false);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newString((-5001), "&*");
      Node node1 = new Node(86, 48, 86);
      node1.getStaticSourceFile();
      node1.copyInformationFromForTree(node0);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$tV0s}_PdvFBGv|", true);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node1 = new Node(86, 48, 86);
      node1.isTry();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(122, 122, 122);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isBreak();
      node0.isCatch();
      node0.setSideEffectFlags(307);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|", 95, 95);
      node0.isNot();
      node0.isSyntheticBlock();
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.removeChildren();
      node0.addSuppression("$tV0s}_PdvFBGv|");
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node3 = new Node(2, 1, 31);
      node3.isOnlyModifiesArgumentsCall();
      Node node4 = node1.copyInformationFrom(node3);
      node4.mayMutateArguments();
      node2.isFromExterns();
      node1.toStringTree();
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$IsEqualToPredicate");
      node0.isVoid();
      Node node1 = new Node(47, node0, node0, node0);
      node1.cloneNode();
      node1.isThrow();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(13, 13, 491);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(2);
      Node node1 = node0.copyInformationFrom(node0);
      node1.srcrefTree(node0);
      node0.isFromExterns();
      node1.toStringTree();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newString(95, "ppB.[tG", 95, 95);
      node0.addChildToFront(node0);
      Node node1 = new Node(31);
      node0.checkTreeEquals(node1);
      int int0 = 930;
      int int1 = 77;
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isLocalResultCall();
      node0.isEquivalentTo(node0);
      node0.setIsSyntheticBlock(true);
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.setChangeTime((-1855));
      node0.setSourceEncodedPositionForTree((-4046));
      Node node2 = node0.copyInformationFrom(node0);
      node0.isSyntheticBlock();
      node2.getChangeTime();
      node0.getIndexOfChild((Node) null);
      node0.isEquivalentTo(node0, true, true, true);
      node0.getJSDocInfo();
      node0.isEquivalentTo(node2);
      node0.setString((String) null);
      node1.isGetterDef();
      node2.isTypeOf();
      node2.getJSType();
      node2.getLength();
      int int0 = 2672;
      node0.setType(int0);
      int int1 = 532;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int1);
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = Node.newNumber((double) 57, 43, 40);
      node1.isEquivalentTo(node1);
      node0.setIsSyntheticBlock(true);
      node0.copyInformationFromForTree(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isNot();
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = new Node(38, 38, 504);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(38);
      Node node1 = new Node(63, node0, node0, node0, 40, 16);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isFromExterns();
      node1.toStringTree();
      node2.isQualifiedName();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node node0 = Node.newString((-6), "");
      node0.isOnlyModifiesArgumentsCall();
      node0.isObjectLit();
      Node node1 = new Node(39, node0);
      node0.isReturn();
      node1.useSourceInfoFromForTree(node0);
      node1.isEquivalentTo((Node) null, false, false, false);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = Node.newString("$tV0s}_PdvFBGv|");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(49, node0);
      node1.isIn();
      node1.isDec();
      node1.isFunction();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newNumber((-1998.2457163892), 32, 24);
      node0.putIntProp((-1929), 32);
      node0.getDouble();
      node0.isVarArgs();
      node0.isIf();
      node0.toStringTree();
      Node node1 = new Node(node0.EMPTY_BLOCK, node0, node0, node0, node0);
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = new Node(152, 147, 147);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(114);
      Node node1 = new Node((-865), node0, node0, node0, 16, 40);
      Node node2 = node0.copyInformationFrom(node1);
      node1.isFromExterns();
      node1.toStringTree();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isTry();
      Node node1 = new Node(1804, node0, node0, node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(130);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node node1 = new Node(40, 4095, 206);
      node0.isOnlyModifiesArgumentsCall();
      node0.detachChildren();
      node1.isDo();
      Node node2 = Node.newNumber((double) 15);
      node1.getLength();
      node2.isObjectLit();
      node0.isEquivalentToTyped(node2);
      node0.isReturn();
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node3.isEquivalentTo(node0, false, false, true);
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      node0.setIsSyntheticBlock(true);
      node0.setChangeTime(36);
      Node node1 = Node.newNumber((-1.0), 41, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node1.isFromExterns();
      node1.toStringTree();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.toStringTree();
      node0.getAncestors();
      Node node1 = new Node(102, node0, node0);
      node1.copyInformationFromForTree(node0);
      node0.getSourceFileName();
      node0.isContinue();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(46, 15);
      node0.putBooleanProp(130, true);
      node0.putIntProp(46, 130);
      node0.getDouble();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = Node.newString("mOXV&xA0");
      node0.isVoid();
      Node node1 = new Node(44, 4, 50);
      node0.setIsSyntheticBlock(true);
      node1.setChangeTime(48);
      Node node2 = Node.newString("4");
      node1.copyInformationFrom(node2);
      node2.toStringTree();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.isSetterDef();
      Node node1 = node0.cloneTree();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = new Node(64, 1073741823, 1073741823);
      Node.newString(51, ":?=h>PR;vR");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.hasOneChild();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(46, 15);
      node0.putBooleanProp(130, true);
      InputId inputId0 = new InputId((String) null);
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isIf();
      Node node1 = new Node(15, node0, node0, node0, node0);
      node0.srcrefTree(node1);
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(105);
      node0.setType(105);
      Node node1 = Node.newNumber(0.7, 105, 6507);
      node1.isEquivalentTo(node0, false, false, false);
      node0.isTry();
      node0.isAssignAdd();
      node0.isVarArgs();
      Node node2 = Node.newString("gH~\"H61]N", 3383, 38);
      Node node3 = node2.clonePropsFrom(node0);
      Node.newString("Wbsk]%g)T:`|8o$D\"", 56, 48);
      node0.isCall();
      node2.wasEmptyNode();
      Node node4 = node2.srcref(node0);
      node0.isOnlyModifiesThisCall();
      Node node5 = node2.copyInformationFromForTree(node3);
      node2.checkTreeEquals(node0);
      node3.isRegExp();
      node5.getJsDocBuilderForNode();
      node2.isEquivalentTo(node4, true, false, true);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-246));
      node0.setType(31);
      node0.isDo();
      Node node1 = new Node(55);
      node1.isBlock();
      node1.isBlock();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newString(38, "", 38, 38);
      node0.getQualifiedName();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isTypeOf();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(46, 15);
      node0.putBooleanProp(42, true);
      node0.toStringTree();
      InputId inputId0 = new InputId("EXPR_RESULT 130 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000003] [is_namespace: com.google.javascript.rhino.Node$IntPropListItem@0000000002]\n");
      node0.isAdd();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = new Node(154);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      Node node1 = new Node(4095, 38, 0);
      Node node2 = node0.srcref(node1);
      node1.isEmpty();
      Node node3 = new Node((-1323));
      node2.addChildToBack(node3);
      node0.isObjectLit();
      node1.setSourceEncodedPositionForTree(30);
      node1.isNE();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.isSetterDef();
      Node node1 = node0.cloneTree();
      node1.srcref(node0);
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(46, 15);
      node0.putBooleanProp(130, true);
      Node node1 = new Node(33, node0, 4095, 53);
      node0.copyInformationFromForTree(node1);
      Node node2 = Node.newString(1, "YPg`>", 435, 31);
      node2.getSourceFileName();
      node2.isContinue();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node node0 = new Node(134);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      Node node1 = new Node(12, node0, node0, node0, node0, 0, 48);
      Node node2 = node0.srcref(node1);
      node1.isEmpty();
      node0.isObjectLit();
      node1.setSourceEncodedPositionForTree(30);
      node1.isNE();
      node0.isEquivalentTo(node2);
      node1.isGetProp();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isBreak();
      node0.removeChildren();
      node0.isCatch();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.putIntProp(40, 40);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isAssign();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK 125 [originalname: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = Node.newString(1, "NNsN?M6");
      node0.useSourceInfoFrom(node1);
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isWhile();
      node0.getQualifiedName();
      node0.isOnlyModifiesArgumentsCall();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = Node.newString("C<QDArKC=wxJPa^5p");
      node0.setLength((-5780));
      node0.isObjectLit();
      Node node1 = new Node(38, node0, node0, 2, 15);
      node1.copyInformationFromForTree(node0);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newString("mOXV&xA0");
      node0.isVoid();
      Node node1 = new Node((-579), node0, 1, 30);
      Node node2 = new Node(37, node1);
      node1.isIn();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      Node node1 = new Node((-159), node0);
      node1.isIn();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newString(49, "[r");
      node0.putIntProp(49, 38);
      node0.getDouble();
      node0.isOnlyModifiesArgumentsCall();
      node0.isTry();
      // Undeclared exception!
      try { 
        node0.isNull();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW [r [direct_eval: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = new Node(130);
      node0.cloneTree();
      node0.putIntProp(34, (-1260));
      node0.getDouble();
      node0.isBlock();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isEquivalentToTyped(node1);
      immutableList0.toArray();
      node0.isFromExterns();
      node0.toStringTree();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = Node.newString("t6");
      Node node1 = new Node(37, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getJsDocBuilderForNode();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("n#|pSrV(rrlw", (-286), 32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString("Mp~Wv\u0001-B{<CZz^", 52, 3398);
      Node node2 = new Node(38, node1, node0);
      node2.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.srcrefTree(node1);
      node3.isContinue();
      node2.replaceChild(node1, node3);
      node0.isFor();
      node0.isEquivalentTo(node2, false, false, true);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = Node.newString("t6");
      Node node1 = new Node(37, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node1.checkTreeEquals(node0);
      node1.isRegExp();
      node1.getJsDocBuilderForNode();
      node1.useSourceInfoIfMissingFrom(node0);
      Node.newString("Node tree inequality:\nTree1:\nCALL\n    STRING t6\n\n\nTree2:\nSTRING t6\n\n\nSubtree1: CALL\n    STRING t6\n\n\nSubtree2: STRING t6\n", 32, (-1));
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = new Node(55, 1, 52);
      node1.getIntProp((-15));
      node0.setIsSyntheticBlock(false);
      node0.setChangeTime(51);
      Node node2 = node0.copyInformationFrom(node1);
      node0.srcref(node2);
      node1.addSuppression("L~.");
      node2.toStringTree();
      node1.isTypeOf();
      node1.isNoSideEffectsCall();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(998, "qr(=mpbSjkHyOGzU", 998, 998);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getProp(1679);
      node0.getSourceOffset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(103, node0, node0, node0, node0, 3675, 57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = node2.copyInformationFrom(node1);
      node0.getIndexOfChild(node1);
      Node node4 = node0.useSourceInfoIfMissingFrom(node2);
      Node.newString("com.google.common.collect.ImmutableSet");
      node4.getProp(7);
      node4.isNull();
      Node.newString("qr(=mpbSjkHyOGzU");
      node1.isObjectLit();
      Node node5 = node1.useSourceInfoIfMissingFrom(node2);
      node4.detachFromParent();
      node1.getInputId();
      node5.srcref(node1);
      node1.getStaticSourceFile();
      node1.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.getQualifiedName();
      node0.toStringTree();
      node0.getAncestors();
      Node node1 = new Node(102, node0, node0);
      node1.isSyntheticBlock();
      node0.clonePropsFrom(node1);
      node1.setDouble(1827.3297369605);
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = Node.newNumber((double) 538, 4, (-269));
      Node node1 = new Node(32, node0, node0);
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(45, 45, 45);
      node0.putIntProp(45, 45);
      node0.removeFirstChild();
      node0.isScript();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(130);
      node0.putIntProp(43, 37);
      node0.isOr();
      node0.isVoid();
      Node node1 = Node.newNumber(0.5);
      node0.checkTreeEquals(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isQualifiedName();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = Node.newString(546, "2\"m^5(-ZvOYM#]>f2;", 546, (-1859));
      node0.setLength((-1859));
      node0.getLength();
      Node node1 = new Node(54, node0, node0, 114, 921);
      node0.copyInformationFromForTree(node1);
      node0.mayMutateArguments();
      node0.getExistingIntProp(50);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionParamBuilder");
      Node node1 = Node.newString(516, "com.google.javascript.rhino.jstype.FunctionParamBuilder");
      Node node2 = new Node(49, node1, node0);
      node2.addChildBefore(node1, node1);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(45, 45, 45);
      node0.getJsDocBuilderForNode();
      node0.setIsSyntheticBlock(true);
      node0.setWasEmptyNode(true);
      node0.setChangeTime(2);
      node0.setDouble(48);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$OrPredicate");
      Node node1 = new Node(47, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      node0.isTry();
      node1.isQuotedString();
      node0.getParent();
      Node.newString(31, "1zG");
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.JSType$1");
      Node node1 = new Node(154, node0, node0, 4095, 102);
      node1.isQuotedString();
      Node node2 = new Node((-376), 63, (-4370));
      node1.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = Node.newString(38, "b", 38, 38);
      node0.mayMutateArguments();
      node0.toString(true, true, true);
      node0.getQualifiedName();
      node0.isLabel();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = Node.newString((-2222), "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isLocalResultCall();
      Node node1 = new Node(40, node0, node0, node0, node0);
      node0.isComma();
      node1.setIsSyntheticBlock(false);
      Node node2 = node1.copyInformationFromForTree(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isNot();
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = Node.newString(1489, "N1");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = new Node(52, node0, 8, 53);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.detachChildren();
      Node node3 = node1.srcrefTree(node0);
      Node node4 = node3.useSourceInfoIfMissingFrom(node0);
      node4.isOnlyModifiesArgumentsCall();
      node1.toStringTree();
      node4.useSourceInfoFromForTree(node3);
      int int0 = (-26);
      Node node5 = node3.getAncestor(int0);
      node1.isWhile();
      node4.isHook();
      // Undeclared exception!
      try { 
        node5.getSourceFileName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1489
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = new Node(30, 30, 2336);
      EvoSuiteFile evoSuiteFile0 = null;
      node0.setSourceEncodedPosition(2336);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = Node.newNumber((double) 4095);
      node0.isEquivalentTo(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.detachFromParent();
      node2.setQuotedString();
      int int0 = (-2010);
      node0.siblings();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.setCharno(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = Node.newString("%D00E>1fe31hw4e", (-10), (-10));
      Node node1 = new Node(102, node0, node0, node0, 116, (-808));
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = new Node(105);
      node0.getJSDocInfo();
      Node node1 = Node.newNumber((double) 4095, (-4370), 47);
      node0.addChildToBack(node1);
      Node.newString(55, "COMMA", 53, 154);
      node1.addChildrenToFront(node0);
      node0.isEquivalentTo(node0, true, true, true);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      Node node1 = new Node(4, node0, node0, node0, 1, 0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = Node.newString("quoted");
      Node node1 = new Node(37, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals(node1);
      node1.srcrefTree(node0);
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newString("e<4?~.w5", 2104, 38);
      node1.isQuotedString();
      Node node2 = node0.clonePropsFrom(node1);
      node0.getProp(124);
      node0.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = new Node(105);
      node0.getJSDocInfo();
      node0.addChildToBack(node0);
      Node.newString(55, "COMMA", 53, 154);
      node0.isEquivalentTo(node0, true, true, true);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = new Node(148);
      Node node1 = new Node(42, node0, node0, node0, node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "originalname");
      node0.isEquivalentToShallow(node1);
      Node node2 = node1.cloneNode();
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = node2.srcrefTree(node0);
      node3.getIntProp(50);
      node3.getBooleanProp(55);
      node0.checkTreeEqualsImpl(node1);
      node1.isFromExterns();
      node0.isRegExp();
      node1.getLength();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("=i6=Qb2mE5@W", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node4 = Node.newNumber((double) 0, 915, 15);
      node0.checkTreeEquals(node4);
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = Node.newString(89, "q1[*a=anD4O@p/", 89, 89);
      Node node1 = new Node(38, node0, 1288, 40);
      node1.addSuppression("q1[*a=anD4O@p/");
      node1.toStringTree();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      int int0 = Node.IS_DISPATCHER;
      node1.isNew();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.isGetProp();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = new Node(93);
      Node node1 = new Node(2);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = Node.newString(38, "P", 38, 38);
      node0.mayMutateArguments();
      Node node1 = new Node(98, node0, node0, 52, 4);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = Node.newString("Object#Element");
      node0.clonePropsFrom(node1);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      Node node1 = Node.newString(122, "d:", 715, 57);
      node0.isEquivalentTo(node1, true, false, true);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(57, node0, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.mayMutateArguments();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(98, node0, node0, node0, node0, 4740, 721);
      node0.srcref(node1);
      node1.isObjectLit();
      Node node2 = new Node((-666), (-2552), (-505));
      node2.isNE();
      node2.setLineno(48);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = new Node(43, 4095, 39);
      node1.isSetterDef();
      Node node2 = node1.cloneTree();
      node2.isDec();
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = Node.newString(35, "f&!eucall");
      node0.getDirectives();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(46, nodeArray0);
      node1.addChildrenToBack(node1);
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(13, 13, 491);
      node0.setChangeTime(2);
      Node node1 = node0.copyInformationFrom(node0);
      Node node2 = node1.srcrefTree(node0);
      node0.isFromExterns();
      node1.toStringTree();
      node1.setLineno((-459));
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node3.addChildToBack(node2);
      Node.extractCharno(37);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "REFERENCE_ERROR_FUNCTION_TYPE");
      Node node0 = Node.newNumber((double) 100, 100, (-3800));
      node0.getSideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getStaticSourceFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(100, node0, node0, node0, 0, 53);
      node0.getSourceFileName();
      node1.siblings();
      Node node2 = node1.cloneNode();
      node1.isNot();
      node0.isOnlyModifiesThisCall();
      node1.putBooleanProp(2725, false);
      Node node3 = node0.useSourceInfoFrom(node1);
      node3.getIntProp(55);
      node3.replaceChild(node1, node1);
      node0.addChildToFront(node3);
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Node node0 = Node.newString(33, "ALWAYS_FALSE");
      PipedWriter pipedWriter0 = new PipedWriter();
      node0.appendStringTree(pipedWriter0);
      node0.isOnlyModifiesArgumentsCall();
      int int0 = null;
      try {  
      int0 = Node.IS_DISPATCHER;
      } catch(IOException e) {}
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.JSType$1", (-2426), 111);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isNot();
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isVarArgs();
      node0.getJSDocInfo();
      node0.addChildToBack(node0);
      Node.newString(55, "COMMA", 53, 154);
      node0.getString();
      Node.extractCharno(node0.CHANGE_TIME);
      node0.children();
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      Node node1 = Node.newString((-1365), "start index");
      node1.addChildrenToBack(node0);
      Node node2 = node0.cloneNode();
      node2.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      node0.isCase();
      Node node1 = node0.cloneTree();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Node node1 = new Node(4095, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.srcrefTree(node1);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = new Node((-619));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.setType((-619));
      node0.getStaticSourceFile();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node node2 = Node.newString(42, "s2Q&DZm{[@X(>Q");
      node1.type = 30;
      node1.isTrue();
      node1.cloneTree();
      node2.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = Node.newString(37, "length", (-605), 49);
      node0.copyInformationFromForTree(node1);
      node0.getJSDocInfo();
      Node node2 = Node.newNumber((double) 31);
      node0.addChildrenAfter(node2, node2);
      Node node3 = new Node(node0.INCRDECR_PROP, node0.POST_FLAG, node0.COLUMN_BITS);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = new Node(153);
      node0.getChildCount();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      node0.copyInformationFromForTree(node0);
      Node node1 = new Node(587, nodeArray0, 31, 30);
      node0.replaceChildAfter(node1, nodeArray0[7]);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.setChangeTime(38);
      Node node1 = new Node(36, 36, 2472);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newNumber((double) 51);
      Node node4 = node2.srcrefTree(node3);
      node0.isFromExterns();
      node4.toStringTree();
      node2.children();
      node4.isAnd();
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = new Node(105);
      node0.setWasEmptyNode(false);
      node0.getJSDocInfo();
      node0.addChildToBack(node0);
      Node.newString(30, "COMMA", 53, 154);
      node0.isEquivalentTo(node0, false, false, false);
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = new Node(105);
      node0.getJSDocInfo();
      node0.addChildToBack(node0);
      Node.newString(55, "COMMA", 53, 154);
      node0.isEquivalentTo(node0, false, false, false);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.toStringTree();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(102, node0, node0);
      node1.cloneNode();
      node1.isSyntheticBlock();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = new Node(88);
      node0.isVarArgs();
      node0.toStringTree();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
      Node node1 = new Node((-7), node0, node0);
      node1.setType(542);
      node0.isSyntheticBlock();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isDec();
      node1.getLastChild();
  }
}
